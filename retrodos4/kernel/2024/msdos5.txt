     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 22/01/2024	((Previous: 27/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if consle input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5  are  the  block  device  number  for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E9A678                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;19/09/2023
  3257                                  ;22/12/2022
  3258                                  ;04/11/2022	
  3259                                  ;29/04/2019 - Retro DOS v4.0
  3260                                  ;============================================================================
  3261                                  ; 	Retro DOS v4.0
  3262                                  ;============================================================================
  3263 000000BE 00                      	db 	0
  3264                                  RETRODOSMSG:
  3265 000000BF 0D0A                    	db	13,10
  3266                                  	;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3267                                  	;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3268                                  	;db	"Retro DOS v4.0 by Erdogan Tan [2023]"	; 27/09/2023
  3269 000000C1 526574726F20444F53-     	db	"Retro DOS v4.0 by Erdogan Tan [2024]"	; 05/01/2024
  3269 000000CA 2076342E3020627920-
  3269 000000D3 4572646F67616E2054-
  3269 000000DC 616E205B323032345D 
  3270 000000E5 0D0A2400                	db	13,10,"$", 0 
  3271                                  
  3272                                  ;============================================================================
  3273                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3274                                  ;============================================================================
  3275                                  ; 11/07/2018 - Retro DOS v3.0
  3276                                  
  3277                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3278 000000E9 90                      align 2
  3279                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3280                                  
  3281                                  ; Standard Functions
  3282                                  ;DISPATCH  LABEL WORD
  3283                                  DISPATCH:
  3284                                  	; 16/07/2018 - Retro DOS v3.0
  3285                                  	; (MSDOS 3.3)
  3286                                  
  3287                                  ; 29/04/2019
  3288                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3289                                  
  3290                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3291                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3292                                  
  3293 000000EA [0563]                          short_addr  _$ABORT			    ;  0      0
  3294 000000EC [D816]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3295 000000EE [E116]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3296 000000F0 [9317]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3297 000000F2 [AE17]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3298 000000F4 [B417]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3299 000000F6 [1F16]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3300 000000F8 [4B16]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3301 000000FA [F213]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3302 000000FC [4C14]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3303 000000FE [5814]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3304 00000100 [C817]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3305 00000102 [D217]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3306 00000104 [1310]                          short_addr  _$DISK_RESET		    ; 13      D
  3307 00000106 [F20E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3308 00000108 [9B1E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3309 0000010A [7118]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3310 0000010C [AD1F]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3311 0000010E [3F20]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3312 00000110 [1718]                          short_addr  _$FCB_DELETE		    ; 19     13
  3313 00000112 [991F]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3314 00000114 [9E1F]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3315 00000116 [7F1F]                          short_addr  _$FCB_CREATE		    ; 22     16
  3316 00000118 [E118]                          short_addr  _$FCB_RENAME		    ; 23     17
  3317                                  	; 16/07/2018
  3318                                          ;short_addr _CPMFUNC			    ; 24     18	
  3319 0000011A [A006]                          short_addr  NO_OP			    ; 24     18
  3320 0000011C [ED0E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3321 0000011E [E20E]                          short_addr  _$SET_DMA			    ; 26     1A
  3322                                  
  3323                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3324                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3325                                  ;                                                                          ;
  3326 00000120 [9F0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3327 00000122 [A10F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3328                                  ;                                                                          ;
  3329                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3330                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3331                                  
  3332                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3333                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3334                                  
  3335                                  ; 08/07/2018 - Retro DOS v3.0
  3336                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3337                                  
  3338 00000124 [A006]                  	short_addr  NO_OP			    ; 29     1D
  3339 00000126 [A006]                  	short_addr  NO_OP			    ; 30     1E
  3340                                  
  3341                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3342                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3343                                  ;                                                                          ;
  3344 00000128 [E30F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3345                                  ;                                                                          ;
  3346                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3347                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3348                                          ;short_addr _CPMFUNC			    ; 32     20
  3349                                  
  3350                                  ; 08/07/2018 - Retro DOS v3.0
  3351                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3352                                  
  3353 0000012A [A006]                  	short_addr  NO_OP			    ; 32     20
  3354                                  
  3355 0000012C [A31F]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3356 0000012E [A81F]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3357 00000130 [2918]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3358 00000132 [FF17]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3359                                  
  3360                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3361                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3362                                  
  3363                                  ; Extended Functions
  3364 00000134 [140F]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3365                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3366                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3367                                  ;                                                                          ;
  3368 00000136 [2011]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3369                                  ;                                                                          ;
  3370                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3371                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3372 00000138 [941F]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3373 0000013A [8F1F]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3374 0000013C [940F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3375 0000013E [B20A]                          short_addr  _$GET_DATE                      ; 42     2A
  3376 00000140 [CF0A]                          short_addr  _$SET_DATE                      ; 43     2B
  3377 00000142 [EE0A]                          short_addr  _$GET_TIME                      ; 44     2C
  3378 00000144 [FF0A]                          short_addr  _$SET_TIME                      ; 45     2D
  3379 00000146 [BE0C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3380                                  
  3381                                  ; Extended functionality group
  3382 00000148 [CE0E]                          short_addr  _$GET_DMA                       ; 47     2F
  3383 0000014A [940C]                          short_addr  _$GET_VERSION                   ; 48     30
  3384 0000014C [A962]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3385                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3386                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3387                                  ;                                                                          ;
  3388 0000014E [E50F]                          short_addr  _$GET_DPB			    ; 50     32
  3389                                  ;                                                                          ;
  3390                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3391                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3392 00000150 [A102]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3393 00000152 [CB0F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3394 00000154 [040F]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3395 00000156 [A50E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3396 00000158 [420F]                          short_addr  _$CHAR_OPER                     ; 55     37
  3397 0000015A [C50C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3398                                  ; XENIX CALLS
  3399                                  ;   Directory Group
  3400 0000015C [9922]                          short_addr  _$MKDIR			    ; 57     39
  3401 0000015E [E521]                          short_addr  _$RMDIR			    ; 58     3A
  3402 00000160 [2022]                          short_addr  _$CHDIR			    ; 59     3B
  3403                                  ;   File Group
  3404 00000162 [CD70]                          short_addr  _$CREAT			    ; 60     3C
  3405 00000164 [F66F]                          short_addr  _$OPEN			    ; 61     3D
  3406 00000166 [2268]                          short_addr  _$CLOSE		 	    ; 62     3E
  3407 00000168 [3369]                          short_addr  _$READ			    ; 63     3F
  3408 0000016A [9969]                          short_addr  _$WRITE			    ; 64     40
  3409 0000016C [1D71]                          short_addr  _$UNLINK			    ; 65     41
  3410 0000016E [9E69]                          short_addr  _$LSEEK			    ; 66     42
  3411 00000170 [DA70]                          short_addr  _$CHMOD			    ; 67     43
  3412 00000172 [FA22]                          short_addr  _$IOCTL			    ; 68     44
  3413 00000174 [536A]                          short_addr  _$DUP			    ; 69     45
  3414 00000176 [716A]                          short_addr  _$DUP2			    ; 70     46
  3415 00000178 [7621]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3416                                  ;   Memory Group
  3417 0000017A [9C63]                          short_addr  _$ALLOC			    ; 72     48
  3418 0000017C [1665]                          short_addr  _$DEALLOC                       ; 73     49
  3419 0000017E [F264]                          short_addr  _$SETBLOCK                      ; 74     4A
  3420                                  ;   Process Group
  3421 00000180 [835C]                          short_addr  _$EXEC			    ; 75     4B
  3422 00000182 [E162]                          short_addr  _$EXIT			    ; 76     4C
  3423 00000184 [795C]                          short_addr  _$WAIT			    ; 77     4D
  3424 00000186 [B220]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3425                                  ;   Special Group
  3426 00000188 [0821]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3427                                  ; SPECIAL SYSTEM GROUP
  3428                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3429                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3430                                  ;                                                                          ;
  3431 0000018A [F802]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3432 0000018C [0403]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3433 0000018E [D70F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3434 00000190 [4810]                          short_addr  _$SETDPB			    ; 83     53
  3435                                  ;                                                                          ;
  3436                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3437                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3438 00000192 [B90C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3439                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3440                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3441                                  ;                                                                          ;
  3442 00000194 [0F11]                          short_addr  _$DUP_PDB                       ; 85     55
  3443                                  ;                                                                          ;
  3444                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3445                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3446 00000196 [4371]                          short_addr  _$RENAME			    ; 86     56
  3447 00000198 [056A]                          short_addr  _$FILE_TIMES                    ; 87     57
  3448 0000019A [4C65]                          short_addr  _$ALLOCOPER                     ; 88     58
  3449                                  
  3450                                  ; 08/07/2018 - Retro DOS v3.0
  3451                                  ; -------------------------------------------------------------------------;
  3452                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3453                                  
  3454                                  ; Network extention system calls
  3455 0000019C [560F]                          short_addr  _$GetExtendedError              ; 89     59
  3456 0000019E [CE71]                          short_addr  _$CreateTempFile                ; 90     5A
  3457 000001A0 [B671]                          short_addr  _$CreateNewFile                 ; 91     5B
  3458 000001A2 [AF73]                          short_addr  _$LockOper                      ; 92     5C
  3459 000001A4 [3266]                          short_addr  _$ServerCall                    ; 93     5D
  3460 000001A6 [3B6B]                          short_addr  _$UserOper                      ; 94     5E
  3461 000001A8 [A06A]                          short_addr  _$AssignOper                    ; 95     5F
  3462 000001AA [906F]                          short_addr  _$NameTrans                     ; 96     60
  3463 000001AC [A006]                  	short_addr  NO_OP			    ; 97     61
  3464 000001AE [0403]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3465                                  ; the next call is reserved for hangool sys call
  3466                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3467 000001B0 [790F]                  	short_addr  _$ECS_Call			    ; 99     63
  3468                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3469                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3470                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3471                                  ;                                                                          ;
  3472 000001B2 [1003]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3473                                  ;                                                                          ;
  3474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3476 000001B4 [500D]                          short_addr  _$GetExtCntry                   ; 101    65
  3477 000001B6 [510E]                          short_addr  _$GetSetCdPg                    ; 102    66
  3478 000001B8 [6F68]                          short_addr  _$ExtHandle                     ; 103    67
  3479 000001BA [5568]                          short_addr  _$COMMIT                        ; 104    68
  3480                                  
  3481                                  ; 08/07/2018
  3482                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3483                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3484                                  
  3485                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3486 000001BC [1212]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3487 000001BE [5568]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3488 000001C0 [A006]                  	short_addr  NO_OP                           ; 107    6B   
  3489                                  						    ; IFS_IOCTL no longer 
  3490                                  						    ; supported
  3491 000001C2 [6472]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3492                                  
  3493                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3494                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3495                                  ;                                                                          ;
  3496                                  ;ifdef ROMEXEC
  3497                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3498                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3499                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3500                                  ;endif
  3501                                  ;                                                                          ;
  3502                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3503                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3504                                  
  3505                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3506                                  
  3507                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3508                                  
  3509                                  ; 08/07/2018 - Retro DOS v3.0
  3510                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3511                                  
  3512                                  ;	If 	Installed
  3513                                  
  3514                                  align 2
  3515                                  
  3516                                  ;PUBLIC FOO
  3517                                  
  3518                                  FOO:	; LABEL WORD
  3519 000001C4 [5D07]                          short_addr  Leave2F
  3520                                  
  3521 000001C6 [C801]                  DTab:	DW  DOSTable
  3522                                  
  3523                                  	;PUBLIC FOO,DTAB
  3524                                  
  3525                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3526                                  
  3527                                  ; 29/04/2019
  3528                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3529                                  
  3530                                  
  3531                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3532                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3533                                         
  3534                                  DOSTable:  ; LABEL  WORD
  3535 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3536 000001C9 [8809]                          short_addr  DOSInstall          ;   0 install check
  3537 000001CB [BA2F]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3538 000001CD [370F]                          short_addr  RECSET              ;   2   RECSET
  3539 000001CF [8209]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3540 000001D1 [9951]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3541 000001D3 [E316]                          short_addr  OUTT                ;   5   OUT
  3542 000001D5 [7054]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3543 000001D7 [135A]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3544 000001D9 [B830]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3545 000001DB [C55B]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3546 000001DD [6374]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3547 000001DF [002D]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3548 000001E1 [EA2C]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3549 000001E3 [460B]                          short_addr  DATE16              ;   13  DATE16
  3550 000001E5 [7E12]                          short_addr  Idle		;   14      empty slot
  3551 000001E7 [0C5A]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3552 000001E9 [7E12]                          short_addr  Idle		;   16      empty slot
  3553 000001EB [4B12]                          short_addr  StrCpy              ;   17  StrCpy
  3554 000001ED [6312]                          short_addr  StrLen              ;   18  StrLen
  3555 000001EF [4451]                          short_addr  UCase		;   19  UCase
  3556 000001F1 [505A]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3557 000001F3 [9C5B]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3558 000001F5 [9D67]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3559 000001F7 [006C]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3560 000001F9 [CA04]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3561 000001FB [AB6B]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3562 000001FD [B56F]                          short_addr  DriveFromText       ;   26  DriveFromText
  3563 000001FF [F00B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3564 00000201 [8A0C]                          short_addr  DSUM                ;   28  DSUM
  3565 00000203 [E40B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3566 00000205 [2912]                          short_addr  StrCmp              ;   30  StrCmp
  3567 00000207 [EE6A]                          short_addr  InitCDS             ;   31  initcds
  3568 00000209 [6A67]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3569 0000020B [906F]                          short_addr  _$NameTrans		;   33  $NameTrans
  3570 0000020D [C706]                          short_addr  CAL_LK              ;   34  CAL_LK
  3571 0000020F [A642]                          short_addr  DEVNAME             ;   35  DEVNAME
  3572 00000211 [7E12]                          short_addr  Idle                ;   36  Idle
  3573 00000213 [7112]                          short_addr  DStrLen             ;   37  DStrLen
  3574 00000215 [2213]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3575 00000217 [2268]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3576 00000219 [2813]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3577 0000021B [3369]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3578 0000021D [E212]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3579 0000021F [6513]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3580 00000221 [5413]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3581 00000223 [8213]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3582                                          
  3583                                  	; 29/04/2019 - Retro DOS v4.0
  3584 00000225 [8713]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3585                                  
  3586 00000227 [A006]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3587                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3588                                  
  3589                                  DOSTableEnd:  ; LABEL BYTE
  3590                                  
  3591                                  	;ENDIF
  3592                                  
  3593                                  ; ----------------------------------------------------------------------------
  3594                                  ; BREAK   <Copyright notice and version>
  3595                                  ; ----------------------------------------------------------------------------
  3596                                  
  3597                                  ;CODSTRT EQU	$
  3598                                  
  3599                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3600                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3601                                  
  3602                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3603                                  ;       module. The reason is so that the data alignments are the same in
  3604                                  ;       IBM-DOS and MS-DOS up through header.
  3605                                  
  3606                                  	;PUBLIC	HEADER
  3607                                  
  3608                                  HEADER:	; LABEL	BYTE
  3609                                          ;IF	DEBUG
  3610                                          ;DB	13,10,"Debugging DOS version "
  3611                                          ;DB	MAJOR_VERSION + "0"
  3612                                          ;DB	"."
  3613                                          ;DB	(MINOR_VERSION / 10) + "0"
  3614                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3615                                          ;ENDIF
  3616                                  
  3617                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3618                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3619                                  %if 0
  3620                                          ;IF	NOT IBM
  3621                                          DB	13,10,"MS-DOS version "
  3622                                          DB	MAJOR_VERSION + "0"
  3623                                          DB	"."
  3624                                          DB	(MINOR_VERSION / 10) + "0"
  3625                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3626                                          DB	(MINOR_VERSION % 10) + "0"
  3627                                  
  3628                                          ;IF	HIGHMEM
  3629                                          ;DB	"H"
  3630                                          ;ENDIF
  3631                                  
  3632                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3633                                  	; 30/04/2019 - Retro DOS v4.0
  3634                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3635                                  
  3636                                  	;ENDIF
  3637                                  
  3638                                  %endif
  3639                                  
  3640                                  ;IF DEBUG
  3641                                  ;	DB	13,10,"$"
  3642                                  ;ENDIF
  3643                                  
  3644                                  ;include copyrigh.inc
  3645                                  
  3646                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3647                                  
  3648                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3649                                  	;DB	"Licensed Material - Property of Microsoft "
  3650                                  	;DB	"All rights reserved "
  3651                                  
  3652                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3653                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3654                                  
  3655                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3656                                  ms_copyright:
  3657 00000229 4D5320444F53205665-     	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3657 00000232 7273696F6E20352E30-
  3657 0000023B 3020284329436F7079-
  3657 00000244 726967687420313938-
  3657 0000024D 312D31393931204D69-
  3657 00000256 63726F736F66742043-
  3657 0000025F 6F727020           
  3658 00000263 4C6963656E73656420-     	db	'Licensed Material - Property of Microsoft '
  3658 0000026C 4D6174657269616C20-
  3658 00000275 2D2050726F70657274-
  3658 0000027E 79206F66204D696372-
  3658 00000287 6F736F667420       
  3659 0000028D 416C6C207269676874-     	db	'All rights reserved '
  3659 00000296 732072657365727665-
  3659 0000029F 6420               
  3660                                  
  3661                                  ;============================================================================
  3662                                  ; MSCODE.ASM
  3663                                  ;============================================================================
  3664                                  
  3665                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3666                                  ; 03/03/2018
  3667                                  
  3668                                  ;
  3669                                  ; MSCODE.ASM -- MSDOS code
  3670                                  ;
  3671                                  
  3672                                  ;INCLUDE DOSSEG.ASM
  3673                                  ;INCLUDE STDSW.ASM
  3674                                  
  3675                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3676                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3677                                  
  3678                                  ;.xcref
  3679                                  ;INCLUDE DOSSYM.ASM
  3680                                  ;INCLUDE DEVSYM.ASM
  3681                                  ;.cref
  3682                                  ;.list
  3683                                  
  3684                                  ;IFNDEF  KANJI
  3685                                  ;KANJI   EQU     0       ; FALSE
  3686                                  ;ENDIF
  3687                                  
  3688                                  ;IFNDEF  IBM
  3689                                  ;IBM     EQU     0
  3690                                  ;ENDIF
  3691                                  
  3692                                  ;IFNDEF  HIGHMEM
  3693                                  ;HIGHMEM  EQU     0
  3694                                  ;ENDIF
  3695                                  
  3696                                          ;i_need  USER_SP,WORD
  3697                                          ;i_need  USER_SS,WORD
  3698                                          ;i_need  SAVEDS,WORD
  3699                                          ;i_need  SAVEBX,WORD
  3700                                          ;i_need  INDOS,BYTE
  3701                                          ;i_need  NSP,WORD
  3702                                          ;i_need  NSS,WORD
  3703                                          ;i_need  CURRENTPDB,WORD
  3704                                          ;i_need  AUXSTACK,BYTE
  3705                                          ;i_need  CONSWAP,BYTE
  3706                                          ;i_need  IDLEINT,BYTE
  3707                                          ;i_need  NOSETDIR,BYTE
  3708                                          ;i_need  ERRORMODE,BYTE
  3709                                          ;i_need  IOSTACK,BYTE
  3710                                          ;i_need  WPERR,BYTE
  3711                                          ;i_need  DSKSTACK,BYTE
  3712                                          ;i_need  CNTCFLAG,BYTE
  3713                                          ;i_need  LEAVEADDR,WORD
  3714                                          ;i_need  NULLDEVPT,DWORD
  3715                                  
  3716                                          ;IF NOT IBM
  3717                                          ;i_need  OEM_HANDLER,DWORD
  3718                                          ;ENDIF
  3719                                  
  3720                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3721                                  
  3722                                  ;============================================================================
  3723                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3724                                  ;============================================================================
  3725                                  ; 11/07/2018 - Retro DOS v3.0
  3726                                  ; 01/05/2019 - Retro DOS v4.0
  3727                                  
  3728                                  ; DosCode SEGMENT
  3729                                  
  3730                                  ; ==========================================================================
  3731                                  ;
  3732                                  ; $Set_CTRL_C_Trapping
  3733                                  ;
  3734                                  ; Function:
  3735                                  ;	Enable disable ^C checking in dispatcher
  3736                                  ;
  3737                                  ; Inputs:
  3738                                  ;		AL = 0 read ^C status
  3739                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3740                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3741                                  ;		AL = 5 get DOS boot drive
  3742                                  ;		AL = 6 Get version number
  3743                                  ;			RETURNS:
  3744                                  ;				BH = Minor version number
  3745                                  ;				BL = Major version number
  3746                                  ;				DL = DOS internal revision
  3747                                  ;				DH = DOS type flags
  3748                                  ;					Bit 3 	- DOS in ROM
  3749                                  ;					Bit 4 	- DOS in HMA
  3750                                  ;					Bit 0-2, 5-7 - Reserved
  3751                                  ; Outputs:
  3752                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3753                                  ;
  3754                                  ; History:
  3755                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3756                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3757                                  ; ==========================================================================
  3758                                  
  3759                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3760                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3761                                  
  3762                                  _$SET_CTRL_C_TRAPPING:
  3763                                  	; 01/05/2019 - Retro DOS v4.0
  3764                                  
  3765 000002A1 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3766 000002A3 7603                    	jbe	short scct_1		; If yes continue processing
  3767                                  
  3768 000002A5 B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3769                                  
  3770 000002A7 CF                      	iret
  3771                                  scct_1:
  3772 000002A8 1E                      	push	DS
  3773                                  
  3774                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3775 000002A9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3776                                  	
  3777 000002AE 50                      	push	AX			; DL only register that can change
  3778 000002AF 56                      	push	SI
  3779                                  
  3780 000002B0 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3781 000002B3 30E4                    	xor	AH,AH			; Clear high byte of AX
  3782 000002B5 09C0                    	or	AX,AX			; Check for subfunction 0
  3783 000002B7 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3784                                  
  3785 000002B9 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3786 000002BB EB35                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3787                                  scct_2:
  3788 000002BD 48                      	dec	AX			; Now dec AX and see if it was 1
  3789 000002BE 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3790                                  
  3791 000002C0 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3792 000002C3 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3793 000002C5 EB2B                    	jmp	SHORT scct_9s		; Jmp to exit
  3794                                  scct_3:
  3795 000002C7 48                      	dec	AX			; Dec AX again to see if it was 2
  3796 000002C8 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3797                                  
  3798 000002CA 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3799 000002CD 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3800 000002CF EB21                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3801                                  scct_4:
  3802 000002D1 83F803                  	cmp	AX,3 			; Test for 5 after it was dec twice
  3803 000002D4 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3804 000002D6 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3805 000002DA EB16                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3806                                  scct_5:
  3807 000002DC 83F804                  	cmp	AX,4 			; Test for 6 after it was dec twice
  3808 000002DF 7511                    	jne	short scct_9s		; If not equal then not get version
  3809                                  	
  3810                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3811                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)	
  3812 000002E1 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3813 000002E4 B200                    	mov	dl,0
  3814                                  	;mov	DL,DOSREVNM ; 0
  3815                                  
  3816 000002E6 30F6                    	xor	dh,dh			; assume vanilla DOS
  3817 000002E8 803E[1112]00            	cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3818                                  	;je	short @F
  3819 000002ED 7403                    	je	short scct_6
  3820 000002EF 80CE10                  	or	dh,10h
  3821                                  	;or	DH,DOSINHMA ; 10h
  3822                                  ;@@:
  3823                                  scct_6:
  3824                                  
  3825                                  ;ifdef ROMDOS
  3826                                  ;	or	DH, DOSINROM
  3827                                  ;endif ; ROMDOS
  3828                                  
  3829                                  scct_9s:
  3830 000002F2 5E                      	pop	SI
  3831 000002F3 58                      	pop	AX
  3832 000002F4 1F                      	pop	DS
  3833                                  
  3834                                  scct_9f:
  3835 000002F5 CF                      	iret
  3836                                  
  3837                                  SetCtrlShortEntry:			; This allows a conditional entry
  3838                                  					; from main dispatch code
  3839 000002F6 EBA9                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3840                                  
  3841                                  ; ==========================================================================
  3842                                  ;									   
  3843                                  ; The following two routines are dispatched to directly with ints disabled
  3844                                  ; immediately after the int 21h entry.	no DIS state is set.
  3845                                  ;
  3846                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3847                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3848                                  ;
  3849                                  ; ==========================================================================
  3850                                  
  3851                                  _$SET_CURRENT_PDB:
  3852 000002F8 1E                      	push	DS
  3853                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3854 000002F9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3855 000002FE 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3856 00000302 1F                      	pop	DS
  3857 00000303 CF                      	iret
  3858                                  
  3859                                  ; ==========================================================================
  3860                                  ;
  3861                                  ; $get_current_PDB returns in BX the current process
  3862                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3863                                  ;
  3864                                  ; ==========================================================================
  3865                                  
  3866                                  _$GET_CURRENT_PDB:
  3867 00000304 1E                      	push	DS
  3868                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3869 00000305 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3870 0000030A 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3871 0000030E 1F                      	pop	DS
  3872 0000030F CF                      	iret
  3873                                  
  3874                                  ; ==========================================================================
  3875                                  ;
  3876                                  ; Sets the Printer Flag to whatever is in AL.
  3877                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3878                                  ;
  3879                                  ; ==========================================================================
  3880                                  
  3881                                  _$SET_PRINTER_FLAG:
  3882 00000310 1E                      	push	ds
  3883                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3884 00000311 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3885 00000316 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3886 00000319 1F                      	pop	ds
  3887 0000031A CF                      	iret
  3888                                  
  3889                                  ; 01/05/2019 - Retro DOS v4.0
  3890                                  ; 08/07/2018 - Retro DOS v3.0
  3891                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3892                                  
  3893                                  ; ----------------------------------------------------------------------------
  3894                                  ; BREAK   <System call entry points and dispatcher>
  3895                                  ; ----------------------------------------------------------------------------
  3896                                  
  3897                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3898                                  
  3899                                  ; ==========================================================================
  3900                                  ;
  3901                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3902                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3903                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3904                                  ;
  3905                                  ; ==========================================================================
  3906                                  
  3907                                  SYSTEM_CALL:    ; PROC NEAR
  3908                                  
  3909                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3910                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3911                                  
  3912                                  ;entry	QUIT				
  3913                                  QUIT:				; INT 20H entry point	
  3914                                  	;MOV	AH,0
  3915 0000031B 30E4                    	xor	ah,ah ; 08/07/2018
  3916 0000031D EB36                    	JMP     SHORT SAVREGS
  3917                                  
  3918                                  ; ---------------------------------------------------------------------------
  3919                                  
  3920                                  	; The system call in AH is out of the range that we know how
  3921                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3922                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3923                                  	; error as this may break some programs compatability.
  3924                                  
  3925                                  BADCALL:
  3926                                          ;MOV	AL,0
  3927 0000031F 30C0                    	xor	al,al ; 08/07/2018
  3928                                  IRETT:	; 06/05/2019
  3929                                  _IRET:
  3930 00000321 CF                              IRET
  3931                                  
  3932                                  ; ---------------------------------------------------------------------------
  3933                                  
  3934                                  ; 01/05/2019 - Retro DOS v4.0
  3935                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3936                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3937                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3938                                  
  3939                                  	; An alternative method of entering the system is to perform a
  3940                                  	; CALL 5 in the program segment prefix with the contents of CL
  3941                                  	; indicating what system call the user would like. A subset of
  3942                                  	; the possible system calls is allowed here only the
  3943                                  	; CPM-compatible calls may get dispatched.
  3944                                  
  3945                                  		; System call entry point and dispatcher
  3946                                  CALL_ENTRY:
  3947 00000322 1E                      	push	DS
  3948                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3949 00000323 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3950 00000328 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3951                                  
  3952 0000032C 58                              POP     AX                      ; IP from the long call at 5
  3953 0000032D 58                              POP     AX                      ; Segment from the long call at 5
  3954 0000032E 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3955                                  
  3956                                  		; Re-order the stack to simulate an interrupt 21.
  3957                                  
  3958 00000332 9C                      	PUSHF				; Start re-ordering the stack
  3959 00000333 FA                      	CLI
  3960 00000334 50                              PUSH    AX                      ; Save segment
  3961 00000335 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3962                                  	; 04/11/2022
  3963                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3964                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3965 00000339 FF36[EC05]              	push	word [SAVEDS]
  3966 0000033D 1F                      	pop	ds
  3967                                  	;
  3968                                  	;cmp	cl,36
  3969 0000033E 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3970 00000341 77DC                            JA      SHORT BADCALL
  3971 00000343 88CC                            MOV     AH,CL
  3972                                  	; 08/07/2018
  3973 00000345 EB0E                    	jmp	short SAVREGS
  3974                                  
  3975                                  ; ---------------------------------------------------------------------------
  3976                                  
  3977                                  ; 01/05/2019 - Retro DOS v4.0
  3978                                  
  3979                                  	; This is the normal INT 21 entry point. We first perform a
  3980                                  	; quick test to see if we need to perform expensive DOS-entry
  3981                                  	; functions. Certain system calls are done without interrupts
  3982                                  	; being enabled.
  3983                                  
  3984                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  3985                                  
  3986                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  3987                                  ; 04/11/2022
  3988                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  3989                                  
  3990                                  COMMAND:
  3991                                  	; 22/12/2022
  3992 00000347 FA                      	cli
  3993                                  
  3994                                  	; 01/05/2019 - Retro DOS v4.0
  3995                                  	; 08/07/2018 - Retro DOS v3.0
  3996                                  
  3997                                  ; 22/12/2022
  3998                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3999                                  	;IF	NOT IBM
  4000 00000348 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4001 0000034B 7203                    	JB	SHORT NOTOEM
  4002 0000034D E98401                  	JMP	_$SET_OEM_HANDLER
  4003                                  
  4004                                  NOTOEM:
  4005                                  	;ENDIF
  4006                                  
  4007                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4008                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4009                                  
  4010                                  	; 22/12/2022
  4011                                  	;cli	; 08/07/2018
  4012                                  
  4013                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4014                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4015                                  	; 04/11/2022
  4016 00000350 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4017                                  	;JBE	SHORT SAVREGS
  4018 00000353 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4019                                  
  4020                                  	; 31/05/2019
  4021                                  
  4022                                  	; The following set of calls are issued by the server at
  4023                                  	; *arbitrary* times and, therefore, must be executed on
  4024                                  	; the user's entry stack and executed with interrupts off.
  4025                                  
  4026                                  SAVREGS:
  4027                                  	; 01/05/2019 - Retro DOS v4.0
  4028                                  	; 10/08/2018
  4029                                  	; 08/07/2018 - Retro DOS v3.0
  4030 00000355 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4031                                  	;;je	_$SET_CTRL_C_TRAPPING
  4032                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4033 00000358 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4034                                  	; 04/11/2022
  4035 0000035A 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4036 0000035C 80FC64                  	cmp	ah,64h			; Check Max case number
  4037 0000035F 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4038 00000361 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4039 00000363 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4040 00000366 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4041 00000368 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4042 0000036B 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4043 0000036D 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4044 00000370 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4045                                  
  4046                                  SaveAllRegs:
  4047                                  	; 01/05/2019 - Retro DOS v4.0
  4048                                  
  4049 00000372 06                              push	ES
  4050 00000373 1E                      	push	DS
  4051 00000374 55                      	push	BP
  4052 00000375 57                      	push	DI
  4053 00000376 56                      	push	SI
  4054 00000377 52                      	push	DX
  4055 00000378 51                      	push	CX
  4056 00000379 53                      	push	BX
  4057 0000037A 50                      	push	AX
  4058                                  
  4059 0000037B 8CD8                    	mov	AX,DS
  4060                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4061 0000037D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4062 00000382 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4063 00000385 891E[EA05]              	mov	[SAVEBX],BX
  4064                                  
  4065                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4066                                  	
  4067                                  	; 08/07/2018 - Retro DOS v3.0        
  4068                                  	;xor     ax,ax
  4069                                  	;mov     [USER_ID],ax
  4070                                  	;mov     ax,[CurrentPDB]
  4071                                  	;mov     [PROC_ID],ax
  4072                                  
  4073                                  	; 01/05/2019
  4074                                  
  4075                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4076                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4077                                  	; this!!!
  4078                                  
  4079 00000389 A1[8405]                	MOV     AX,[USER_SP]
  4080 0000038C A3[F205]                        MOV     [NSP],AX
  4081 0000038F A1[8605]                        MOV     AX,[USER_SS]
  4082 00000392 A3[F005]                        MOV     [NSS],AX
  4083                                  
  4084 00000395 31C0                    	xor	AX,AX ; 0
  4085 00000397 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4086                                  
  4087 0000039A F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4088 0000039F 7503                    	jnz	short set_indos_flag	; if win386 present
  4089 000003A1 A3[3E03]                	mov	[USER_ID],AX
  4090                                  set_indos_flag:
  4091 000003A4 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4092                                  
  4093 000003A8 8926[8405]                      MOV     [USER_SP],SP
  4094 000003AC 8C16[8605]                      MOV     [USER_SS],SS
  4095                                  
  4096 000003B0 A1[3003]                	mov	AX,[CurrentPDB]
  4097 000003B3 A3[3C03]                	mov	[PROC_ID],AX
  4098 000003B6 8ED8                    	mov	DS,AX
  4099 000003B8 58                      	pop	AX
  4100 000003B9 50                      	push	AX
  4101                                  
  4102                                  	; save user stack in his area for later returns (possibly from EXEC)
  4103                                  
  4104 000003BA 89262E00                        MOV     [PDB.USER_STACK],SP
  4105 000003BE 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4106                                  
  4107                                  	; 18/07/2018
  4108                                  	;mov	byte [CS:FSHARING], 0
  4109                                  
  4110                                  	;MOV     BX,CS			; no holes here.
  4111                                  	;MOV     SS,BX
  4112                                  
  4113                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4114 000003C2 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4115                                  					;entry	REDISP
  4116                                  REDISP:
  4117 000003C7 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4118 000003CA FB                              STI                             ; stack is in our space now...
  4119                                  
  4120 000003CB 8CD3                    	mov	bx,ss
  4121 000003CD 8EDB                    	mov	ds,bx
  4122                                  
  4123 000003CF 93                      	xchg	ax,bx
  4124                                  
  4125 000003D0 31C0                    	xor	ax,ax ; 0
  4126                                  
  4127                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4128                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4129                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4130                                  
  4131                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4132                                  
  4133                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4134                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4135                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4136                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4137                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4138                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4139                                  	;inc	ax
  4140                                  	;;inc	AL			; AL = 1
  4141                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4142                                  
  4143                                  	; 15/12/2022
  4144 000003D2 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4145                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4146 000003D5 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4147 000003DB A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4148                                  	;mov	byte [IDLEINT],1
  4149 000003DE A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4150 000003E1 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4151 000003E4 40                      	inc	ax
  4152                                  	;inc	al			; AL = 1
  4153 000003E5 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4154                                  
  4155 000003E8 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4156                                  
  4157 000003E9 88E3                    	MOV     BL,AH			
  4158 000003EB D1E3                            SHL     BX,1			; 2 bytes per call in table
  4159                                         
  4160 000003ED FC                      	CLD
  4161                                  		; Since the DOS maintains mucho state information across system
  4162                                  		; calls, we must be very careful about which stack we use.
  4163                                  		; First, all abort operations must be on the disk stack. This
  4164                                  		; is due to the fact that we may be hitting the disk (close
  4165                                  		; operations, flushing) and may need to report an INT 24.
  4166                                          
  4167 000003EE 08E4                    	OR      AH,AH
  4168 000003F0 7416                            JZ      SHORT DSKROUT		; ABORT
  4169                                  
  4170                                          ;CMP	AH,12
  4171                                          ;JBE	SHORT IOROUT		; Character I/O
  4172                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4173                                          ;JZ	SHORT IOROUT
  4174                                          ;CMP	AH,SET_CURRENT_PDB
  4175                                          ;JNZ	SHORT DSKROUT
  4176                                  
  4177                                  		; Second, PRINT and PSPRINT and the server issue
  4178                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4179                                  		; This call MUST, therefore, use the AUXSTACK.
  4180                                  
  4181                                  	; 10/08/2018
  4182 000003F2 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4183 000003F5 743D                    	je      short DISPCALL
  4184                                  	
  4185                                  	; 01/05/2019
  4186                                  	
  4187                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4188                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4189                                  
  4190 000003F7 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4191 000003FA 770C                    	ja      short DSKROUT
  4192                                  
  4193                                  IOROUT:
  4194                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4195                                  	; (ss: prefix was not needed here! ds=ss)
  4196                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4197                                  	; 15/12/2022
  4198 000003FC 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4199 00000401 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4200 00000403 BC[A00A]                        MOV     SP,IOSTACK
  4201 00000406 EB2C                            JMP     SHORT DISPCALL
  4202                                  
  4203                                  		; We are on a system call that is classified as "the rest".
  4204                                  		; We place ourselves onto the DSKSTACK and away we go.
  4205                                  		; We know at this point:
  4206                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4207                                  		;    ErrorMode and WpErr
  4208                                  		; *  That there can be no critical sections in effect.
  4209                                  		;    We signal the server to remove all the resources.
  4210                                  
  4211                                  DSKROUT:
  4212                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4213                                  	; 08/07/2018 - Retro DOS v3.0
  4214 00000408 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4215 0000040B C606[2303]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4216                                  	
  4217 00000410 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4218 00000415 C606[2203]FF            	MOV     BYTE [WPERR],-1		; error mode, so good place to
  4219                                  	                   		; make sure flags are reset
  4220                                  
  4221                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4222                                  	; (ss: prefix was not needed here! ds=ss)
  4223                                  
  4224                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4225                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4226                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4227                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4228                                                                          ; make sure flags are reset
  4229 0000041A 50                      	push    ax
  4230 0000041B B482                    	mov     ah,82h			; Release all resource information
  4231 0000041D CD2A                    	int     2Ah 		; Microsoft Networks 
  4232                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4233 0000041F 58                      	pop     ax
  4234                                  
  4235                                  		; Since we are going to be running on the DSKStack and since
  4236                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4237                                  		; generation of INT 28's.
  4238                                  
  4239                                  	; 15/12/2022
  4240                                  	;mov     byte [ss:IDLEINT],0
  4241                                  	;
  4242                                          ;mov	sp,DSKSTACK
  4243                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4244                                          ;jz	short DISPCALL
  4245                                  
  4246 00000420 C606[5803]00            	mov     byte [IDLEINT],0
  4247                                  
  4248 00000425 BC[2009]                	MOV     SP,DSKSTACK
  4249 00000428 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4250 0000042D 7405                    	JZ      SHORT DISPCALL
  4251                                  
  4252 0000042F 50                              PUSH    AX
  4253                                          ;invoke	DSKSTATCHK
  4254 00000430 E87F4D                          CALL	DSKSTATCHK
  4255 00000433 58                      	POP     AX
  4256                                  DISPCALL:
  4257                                  	; 01/05/2019 - Retro DOS v4.0
  4258 00000434 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4259                                  
  4260                                  	; 15/12/2022
  4261 00000439 871E[EA05]              	xchg	bx,[SAVEBX]
  4262 0000043D 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4263                                  
  4264                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4265                                  	; (ss: prefix was not needed here! ds=ss)        
  4266                                  	;xchg	bx,[ss:SAVEBX]
  4267                                  	;mov	ds,[ss:SAVEDS]
  4268                                  
  4269 00000441 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4270                                  
  4271                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4272                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4273                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4274                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4275                                  	; because this bit is used to indicate to the next int 21 call that
  4276                                  	; the previous int 21 was an exec.
  4277                                  	;
  4278                                  	; So do not add any code between the call above and the label 
  4279                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4280                                  
  4281                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4282 00000446 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4283                                  
  4284                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4285                                  ; DOSCODE:41F7h
  4286                                  
  4287                                  ;entry LEAVE
  4288                                  ;;;_LEAVE:				; Exit from a system call
  4289                                  LeaveDOS: ; 18/07/2018 
  4290                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4291 0000044C FA                      	CLI
  4292                                  
  4293                                  	; 01/05/2019
  4294                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4295 0000044D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4296 00000452 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4297 00000457 7527                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4298                                  
  4299                                  LeaveA20On:
  4300 00000459 FE0E[2103]                      DEC     BYTE [INDOS]
  4301                                          ; 04/11/2022
  4302 0000045D 8E16[8605]              	mov	ss,[USER_SS]
  4303 00000461 8B26[8405]              	MOV     SP,[USER_SP]
  4304                                  	;MOV	SS,[USER_SS]
  4305 00000465 89E5                    	MOV     BP,SP
  4306                                  	;MOV	[BP.user_AX],AL	
  4307                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4308                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h	
  4309                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4310                                  	; 15/12/2022
  4311 00000467 884600                  	MOV	[BP],AL
  4312 0000046A A1[F205]                	MOV     AX,[NSP]
  4313 0000046D A3[8405]                        MOV     [USER_SP],AX
  4314 00000470 A1[F005]                        MOV     AX,[NSS]
  4315 00000473 A3[8605]                        MOV     [USER_SS],AX
  4316                                  
  4317 00000476 58                      	pop	AX
  4318 00000477 5B                      	pop	BX
  4319 00000478 59                      	pop	CX
  4320 00000479 5A                      	pop	DX
  4321 0000047A 5E                      	pop	SI
  4322 0000047B 5F                      	pop	DI
  4323 0000047C 5D                      	pop	BP
  4324 0000047D 1F                      	pop	DS
  4325 0000047E 07                      	pop	ES
  4326                                  
  4327 0000047F CF                              IRET
  4328                                  
  4329                                  disa20:	   				; M068 - Start
  4330 00000480 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4331 00000484 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4332 00000488 75CF                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4333                                  					;    a20 off
  4334                                  					; Y: turn a20 off and dec a20off_count
  4335 0000048A FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4336                                   					; Start - M004
  4337 0000048E 1E                      	push	ds			; segment of stub
  4338 0000048F BB[2D11]                	mov	bx,disa20_iret		; offset in stub
  4339 00000492 53                      	push	bx
  4340 00000493 CB                      	retf	  			; go to stub
  4341                                  					; End - M004
  4342                                  ;SYSTEM_CALL ENDP
  4343                                  
  4344                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4345                                  ; 04/11/2022
  4346                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4347                                  
  4348                                  ; ==========================================================================
  4349                                  ;
  4350                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4351                                  ; the stack prior to giving the user control
  4352                                  ;
  4353                                  ; ==========================================================================
  4354                                  
  4355                                  ; 01/05/2019 - Retro DOS v4.0
  4356                                  
  4357                                          ;procedure restore_world,NEAR
  4358                                  restore_world:
  4359                                  	;getdseg <es>		; es -> dosdata
  4360 00000494 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4361                                  
  4362 00000499 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4363                                  
  4364 0000049E 58                              POP     AX
  4365 0000049F 5B                              POP     BX
  4366 000004A0 59                              POP     CX
  4367 000004A1 5A                              POP     DX
  4368 000004A2 5E                              POP     SI
  4369 000004A3 5F                              POP     DI
  4370 000004A4 5D                              POP     BP
  4371 000004A5 1F                              POP     DS
  4372                                  
  4373 000004A6 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4374                                  
  4375                                  ;restore_world	ENDP
  4376                                  
  4377                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4378                                  
  4379                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4380                                  ; 04/11/2022
  4381                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4382                                  
  4383                                  ; ==========================================================================
  4384                                  ;
  4385                                  ; Save_World saves complete registers on the stack
  4386                                  ;
  4387                                  ; ==========================================================================
  4388                                  
  4389                                          ;procedure save_world,NEAR
  4390                                  save_world:
  4391                                  	;getdseg <es>		; es -> dosdata
  4392 000004AB 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4393                                  
  4394 000004B0 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4395                                  
  4396                                  	; 12/05/2019
  4397                                          
  4398 000004B5 1E                      	PUSH    DS
  4399 000004B6 55                              PUSH    BP
  4400 000004B7 57                              PUSH    DI
  4401 000004B8 56                              PUSH    SI
  4402 000004B9 52                              PUSH    DX
  4403 000004BA 51                              PUSH    CX
  4404 000004BB 53                              PUSH    BX
  4405 000004BC 50                              PUSH    AX
  4406                                  
  4407 000004BD 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4408                                  
  4409 000004C2 55                      	push	BP		
  4410 000004C3 89E5                    	mov	BP,SP
  4411 000004C5 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4412 000004C8 5D                      	pop	BP
  4413                                  	
  4414 000004C9 C3                      	retn
  4415                                  
  4416                                  ;save_world	ENDP
  4417                                  
  4418                                  ; 01/05/2019
  4419                                  
  4420                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4421                                  ; 04/11/2022
  4422                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4423                                  
  4424                                  ; ==========================================================================
  4425                                  ;
  4426                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4427                                  ;
  4428                                  ; ==========================================================================
  4429                                  
  4430                                          ;procedure get_user_stack,NEAR
  4431                                  Get_User_Stack:
  4432                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4433 000004CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4434 000004CF C536[8405]                      lds	si,[USER_SP]
  4435 000004D3 C3                      	retn
  4436                                  
  4437                                  ;get_user_stack  ENDP
  4438                                  
  4439                                  ; 22/12/2022
  4440                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4441                                  ;%if 0
  4442                                  
  4443                                  ; ---------------------------------------------------------------------------
  4444                                  ;
  4445                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4446                                  ; Inputs:
  4447                                  ;	User registers, User Stack, INTS disabled
  4448                                  ;	If CALL F8, DS:DX is new handler address
  4449                                  ; Function:
  4450                                  ;	Process OEM INT 21 extensions
  4451                                  ; Outputs:
  4452                                  ;	Jumps to OEM_HANDLER if appropriate
  4453                                  ;
  4454                                  ; ---------------------------------------------------------------------------
  4455                                  
  4456                                  ;IF	NOT IBM
  4457                                  
  4458                                  _$SET_OEM_HANDLER:
  4459                                  	; 01/05/2019 - Retro DOS v4.0
  4460                                  	
  4461                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4462                                  	;(jb	short NOTOOEM)
  4463                                  
  4464 000004D4 06                      	push	es ; *
  4465                                  	;getdseg <es>			; es -> dosdata
  4466 000004D5 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4467                                  
  4468 000004DA 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4469                                  						; (message) request	
  4470                                  	; AH = 0F8h = SET OEM HANDLER
  4471                                  
  4472 000004DC 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4473 000004E1 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4474                                  
  4475 000004E6 07                      	pop	es ; *
  4476                                  
  4477 000004E7 CF                      	IRET                            ; Quick return, Have altered no registers
  4478                                  
  4479                                  check_trueversion_request:
  4480                                  	; 18/07/2019 - Retro DOS v3.0
  4481                                  
  4482                                  	; Retro DOS v2.0 - 20/04/2018
  4483 000004E8 83F8FF                  	CMP	AX,0FFFFh
  4484                                  	; 18/07/2018
  4485 000004EB 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4486                                  
  4487                                  	; 01/05/2019
  4488 000004ED 07                      	pop	es ; *
  4489                                  
  4490 000004EE B40E                    	mov	ah,0Eh
  4491                                  
  4492                                  	; Retro DOS v4.0 feature only!
  4493 000004F0 81FBA101                	cmp	bx,417  ; Signature to bypass
  4494                                  			; Retro DOS true version message	
  4495 000004F4 7414                    	je	short true_version_iret
  4496                                  
  4497 000004F6 56                      	push	si
  4498 000004F7 53                      	push	bx
  4499                                  
  4500 000004F8 BE[BF00]                	mov	si,RETRODOSMSG
  4501                                  wrdosmsg:
  4502                                  	;movb	ah,0Eh
  4503 000004FB BB0700                  	mov	bx,7
  4504                                  wrdosmsg_nxt:
  4505 000004FE 2EAC                    	cs	lodsb
  4506 00000500 3C24                    	cmp	al,'$'
  4507 00000502 7404                    	je	short wrdosmsg_ok		
  4508 00000504 CD10                    	int	10h
  4509 00000506 EBF6                    	jmp	short wrdosmsg_nxt
  4510                                  
  4511                                  wrdosmsg_ok:
  4512 00000508 5B                      	pop	bx
  4513 00000509 5E                      	pop	si
  4514                                  
  4515                                  true_version_iret:
  4516                                  	; ah = 0Eh
  4517 0000050A B040                    	mov	al,40h ; Retro DOS v4.0 
  4518 0000050C CF                      	iret
  4519                                  
  4520                                  	; If above F8 try to jump to handler
  4521                                  
  4522                                  DO_OEM_FUNC:
  4523                                  	; 01/05/2019
  4524 0000050D 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4525 00000513 7504                    	JNE     short OEM_JMP
  4526 00000515 07                      	pop	es ; *
  4527 00000516 E906FE                  	JMP     BADCALL                 ; Handler not initialized
  4528                                  OEM_JMP:
  4529 00000519 06                      	push	es
  4530 0000051A 1F                      	pop	ds ; DOSDATA segment !
  4531 0000051B 07                      	pop	es ; *
  4532                                  
  4533                                  	; 22/12/2022
  4534 0000051C FB                      	sti	; (enable interrupts before jumping to private handler)  
  4535                                  
  4536 0000051D FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4537                                  
  4538                                  ;       ENDIF
  4539                                  
  4540                                  ; ---------------------------------------------------------------------------
  4541                                  
  4542                                  ;%endif
  4543                                  
  4544                                  ;============================================================================
  4545                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4546                                  ;============================================================================
  4547                                  ; 17/07/2018 - Retro DOS v3.0
  4548                                  
  4549                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4550                                  ;	NAME	IBMCODE
  4551                                  
  4552                                  ;BREAK <NullDev -- Driver for null device>
  4553                                  
  4554                                  ; ROMDOS note:
  4555                                  ;	NUL device driver used to be here, but it was removed and placed in
  4556                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4557                                  ;	header, which is also in DOSDATA.
  4558                                  
  4559                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4560                                  
  4561                                  ;----------------------------------------------------------------------------
  4562                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4563                                  ;----------------------------------------------------------------------------
  4564                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4565                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4566                                  
  4567                                  ;Public MSC001S,MSC001E
  4568                                  ;MSC001S label byte
  4569                                  	;IF	IBM
  4570                                  ; Codes returned by BIOS
  4571                                  ERRIN:
  4572 00000521 02                      	DB	2			; NO RESPONSE
  4573 00000522 06                      	DB	6			; SEEK FAILURE
  4574 00000523 0C                      	DB	12			; GENERAL ERROR
  4575 00000524 04                      	DB	4			; BAD CRC
  4576 00000525 08                      	DB	8			; SECTOR NOT FOUND
  4577 00000526 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4578                                  ERROUT:
  4579                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4580 00000527 80                      	DB	80H			; NO RESPONSE
  4581 00000528 40                      	DB	40H			; Seek failure
  4582 00000529 02                      	DB	2			; Address Mark not found
  4583 0000052A 10                      	DB	10H			; BAD CRC
  4584 0000052B 04                      	DB	4			; SECTOR NOT FOUND
  4585 0000052C 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4586                                  
  4587                                  NUMERR	EQU	$-ERROUT
  4588                                  	;ENDIF
  4589                                  ;MSC001E label byte
  4590                                  ;----------------------------------------------------------------------------
  4591                                  
  4592                                  ;============================================================================
  4593                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4594                                  ;============================================================================
  4595                                  ; 18/07/2018 - Retro DOS v3.0
  4596                                  ; 15/05/2019 - Retro DOS v4.0
  4597                                  
  4598                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4599                                  
  4600                                  ;   AbsSetup - setup for abs disk functions
  4601                                  ;----------------------------------------------------------------------------
  4602                                  
  4603                                  AbsSetup:
  4604 0000052D 36FE06[2103]            	INC	byte [SS:INDOS]		; SS override
  4605 00000532 FB                      	STI
  4606 00000533 FC                      	CLD
  4607 00000534 1E                      	PUSH	DS
  4608 00000535 16                      	push	ss
  4609 00000536 1F                      	pop	ds
  4610 00000537 E80C01                  	CALL	GETBP
  4611 0000053A 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  4612                                  	;mov	word [es:bp+1Fh]
  4613 0000053C 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4614                                  errdriv:
  4615 00000542 1F                      	POP	DS
  4616 00000543 7301                    	jnc	short AbsSetup2
  4617                                  AbsSetup_retn:
  4618 00000545 C3                      	retn
  4619                                  
  4620                                  AbsSetup2:
  4621                                  	; 15/05/2019 - Retro DOS v4.0
  4622                                  	; MSDOS 6.0
  4623                                  					; SS override
  4624 00000546 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4625 0000054D E83B04                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4626 00000550 72F3                    	jc	short AbsSetup_retn
  4627 00000552 E8FD56                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4628                                  
  4629                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4630 00000555 1E                      	PUSH	DS
  4631 00000556 56                      	PUSH	SI
  4632 00000557 50                      	PUSH	AX
  4633                                  
  4634 00000558 16                      	push	ss
  4635 00000559 1F                      	pop	ds
  4636                                  	
  4637 0000055A BE[BE03]                	MOV	SI,OPENBUF
  4638 0000055D 8804                    	MOV	[SI],AL
  4639 0000055F 800441                  	ADD	BYTE [SI],"A"
  4640 00000562 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4641 00000567 B80003                  	MOV	AX,0300H
  4642 0000056A F8                      	CLC
  4643 0000056B CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4644                                  		
  4645                                  		; 04/11/2022
  4646                                  		; (INT 2Ah - AX = 0300h)
  4647                                  		; Microsoft Networks - CHECK DIRECT I/O
  4648                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4649                                  		;    only drive specifier--must include the colon)
  4650                                  		; Return: CF clear if absolute disk access allowed
  4651                                  
  4652 0000056D 58                      	POP	AX
  4653 0000056E 5E                      	POP	SI
  4654 0000056F 1F                      	POP	DS
  4655 00000570 73D3                    	jnc	short AbsSetup_retn
  4656                                  
  4657                                  	;mov	word [ss:EXTERR],32h
  4658 00000572 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4659 00000579 C3                      	retn
  4660                                  
  4661                                  ;---------------------------------------------------------------------------
  4662                                  ;
  4663                                  ; Procedure Name : ABSDRD
  4664                                  ;
  4665                                  ; Interrupt 25 handler. Performs absolute disk read.
  4666                                  ; Inputs:	AL - 0-based drive number
  4667                                  ;		DS:BX point to destination buffer
  4668                                  ;		CX number of logical sectors to read
  4669                                  ;		DX starting logical sector number (0-based)
  4670                                  ; Outputs:	Original flags still on stack
  4671                                  ;		Carry set
  4672                                  ;		    AH error from BIOS
  4673                                  ;		    AL same as low byte of DI from INT 24
  4674                                  ;
  4675                                  ;---------------------------------------------------------------------------
  4676                                          ;procedure   ABSDRD,FAR
  4677                                  ABSDRD:
  4678                                  	; 15/05/2019 - Retro DOS v4.0
  4679                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4680                                  	; 04/11/2022
  4681                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4682                                  	
  4683                                  	; MSDOS 6.0
  4684 0000057A FA                      	CLI
  4685                                  	
  4686                                  ;	set up ds to point to DOSDATA
  4687                                  
  4688 0000057B 50                      	push	ax			; preserve AX value
  4689 0000057C 8CD8                    	mov	ax,ds			; store DS value in AX
  4690                                  	;getdseg <ds>
  4691 0000057E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4692 00000583 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4693 00000586 58                      	pop	ax			; restore AX value
  4694                                  
  4695                                  	; M072:
  4696                                  	; We shall save es on the user stack here. We need to use ES in
  4697                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4698                                  	; time in order to restore the user stack.
  4699                                  
  4700 00000587 06                      	push	es  ; ****		; M072
  4701                                  
  4702 00000588 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4703 0000058C 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4704                                  
  4705                                  ; 	set up ss to point to DOSDATA
  4706                                  ;
  4707                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4708                                  ; version of the getdseg macro with the SS register! An interrupt will
  4709                                  ; sneak through.
  4710                                  
  4711                                  ;ifndef ROMDOS
  4712                                  	;getdseg <ss>			; cli in entry of routine
  4713 00000590 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4714                                  ;else
  4715                                  ;	mov	ds, cs:[BioDataSeg]
  4716                                  ;	assume	ds:bdata
  4717                                  ;
  4718                                  ;	mov	ss, ds:[DosDataSg]
  4719                                  ;	assume	ss:DOSDATA
  4720                                  ;
  4721                                  ;endif ; ROMDOS
  4722                                  
  4723 00000595 BC[2009]                	MOV	SP,DSKSTACK
  4724                                  
  4725 00000598 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4726                                  
  4727 0000059C 06                      	push	es ; *** (MSDOS 6.21)
  4728 0000059D E80BFF                  	call	save_world		; save all regs
  4729                                  
  4730 000005A0 06                      	PUSH	ES ; **
  4731 000005A1 E889FF                  	CALL	AbsSetup
  4732 000005A4 723D                    	JC	short ILEAVE
  4733                                  
  4734                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4735                                  	;  the secondary cache. The secondary cache does not check for media
  4736                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4737                                  	;  read, and get data from the previous disk. To get around this,
  4738                                  	;  we just won't use the secondary cache for absolute disk reads.
  4739                                  	;                                                      -mw 8/5/88
  4740                                  
  4741                                  	;EnterCrit critDisk
  4742 000005A6 E8DF0D                  	call	ECritDisk
  4743 000005A9 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4744                                  	;LeaveCrit critDisk
  4745 000005AF E8F10D                  	call	LCritDisk
  4746                                  
  4747                                          ;invoke	DSKREAD
  4748 000005B2 E85832                  	CALL	DSKREAD
  4749 000005B5 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4750                                  
  4751 000005B7 89F9                            mov     cx,di
  4752 000005B9 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4753 000005BE 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4754                                  
  4755                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4756                                  ;            sectors, also termed an "Extent".)
  4757                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4758                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4759                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4760                                  ;
  4761                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4762                                  ;	buffers must be "read" into the transfer memory block, so that the
  4763                                  ;       transfer memory reflects the most recent data.
  4764                                  
  4765                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4766 000005C3 E89D34                          call	DskRdBufScan
  4767 000005C6 EB1B                    	jmp     short ILEAVE
  4768                                  
  4769                                  TLEAVE:
  4770 000005C8 7419                    	JZ	short ILEAVE
  4771                                  
  4772                                  ERR_LEAVE:				; M039
  4773                                  	; 15/07/2018 - Retro DOS v3.0
  4774                                          ;IF	IBM
  4775                                  ; Translate the error code to ancient 1.1 codes
  4776 000005CA 06                              PUSH    ES ; *
  4777 000005CB 0E                              PUSH    CS
  4778 000005CC 07                              POP     ES
  4779 000005CD 30E4                            XOR     AH,AH			; Nul error code
  4780                                  	;mov	cx,6
  4781 000005CF B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4782 000005D2 BF[2105]                        MOV     DI,ERRIN		; Point to error conditions
  4783 000005D5 F2AE                            REPNE   SCASB
  4784 000005D7 7504                            JNZ     SHORT LEAVECODE		; Not found
  4785                                  	;mov	ah,[ES:DI+5]
  4786 000005D9 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4787                                  LEAVECODE:
  4788 000005DD 07                              POP     ES ; *
  4789                                  	; 15/05/2019 - Retro DOS v4.0
  4790 000005DE 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4791                                          ;ENDIF
  4792                                  
  4793 000005E2 F9                              STC
  4794                                  ILEAVE:
  4795                                  	; 15/05/2019
  4796 000005E3 07                              POP     ES ; **
  4797 000005E4 E8ADFE                  	call	restore_world
  4798 000005E7 07                              pop	es ; *** (MSDOS 6.21)
  4799 000005E8 FA                      	CLI
  4800 000005E9 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4801 000005ED 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4802 000005F2 16                              push	ss			; M072 - Start
  4803 000005F3 07                      	pop	es			; es - dosdata
  4804 000005F4 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4805 000005F9 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4806 000005FE 07                      	pop	es  ; ****		; Note es was saved on user
  4807                                  					; stack at entry 
  4808                                  					; M072 - End
  4809 000005FF FB                              STI
  4810 00000600 CB                      	RETF   ; ! FAR return !
  4811                                  
  4812                                  ;ABSDRD	ENDP
  4813                                  
  4814                                  ;---------------------------------------------------------------------------
  4815                                  ;
  4816                                  ; Procedure Name : ABSDWRT
  4817                                  ;
  4818                                  ; Interrupt 26 handler. Performs absolute disk write.
  4819                                  ; Inputs:	AL - 0-based drive number
  4820                                  ;		DS:BX point to source buffer
  4821                                  ;		CX number of logical sectors to write
  4822                                  ;		DX starting logical sector number (0-based)
  4823                                  ; Outputs:	Original flags still on stack
  4824                                  ;		Carry set
  4825                                  ;		    AH error from BIOS
  4826                                  ;		    AL same as low byte of DI from INT 24
  4827                                  ;
  4828                                  ;---------------------------------------------------------------------------
  4829                                          ;procedure   ABSDWRT,FAR
  4830                                  ABSDWRT:
  4831                                  	; 15/05/2019 - Retro DOS v4.0
  4832                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4833                                  	; 04/11/2022
  4834                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4835                                  
  4836 00000601 FA                      	CLI
  4837                                  
  4838                                  ;	set up ds to point to DOSDATA
  4839                                  
  4840 00000602 50                      	push	ax
  4841 00000603 8CD8                    	mov	ax,ds
  4842                                  	;getdseg <ds>
  4843 00000605 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4844 0000060A A3[0A0D]                	mov	[TEMPSEG],ax
  4845 0000060D 58                      	pop	ax
  4846                                  
  4847                                  	; M072:
  4848                                  	; We shall save es on the user stack here. We need to use ES in
  4849                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4850                                  	; time in order to restore the user stack.
  4851                                  
  4852 0000060E 06                      	push	es ; ****		; M072
  4853                                  
  4854 0000060F 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4855 00000613 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4856                                  
  4857                                  	; set up ss to point to DOSDATA
  4858                                  	;
  4859                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4860                                  	; ROMDOS version of the getdseg macro with the SS register!
  4861                                  	; An interrupt will sneak through.
  4862                                  
  4863                                  ;ifndef ROMDOS
  4864                                  	;getdseg <ss>			; cli in entry of routine
  4865 00000617 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4866                                  ;else
  4867                                  ;	mov	ds, cs:[BioDataSeg]
  4868                                  ;	assume	ds:bdata
  4869                                  ;
  4870                                  ;	mov	ss, ds:[DosDataSg]
  4871                                  ;	assume	ss:DOSDATA
  4872                                  ;
  4873                                  ;endif ; ROMDOS
  4874                                  
  4875 0000061C BC[2009]                	MOV	SP,DSKSTACK
  4876                                  		; we are now switched to DOS's disk stack
  4877                                  
  4878 0000061F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4879                                  
  4880 00000623 06                      	push	es ; *** (MSDOS 6.21)
  4881                                  
  4882 00000624 E884FE                  	call	save_world	      	; save all regs
  4883                                  
  4884 00000627 06                      	PUSH	ES ; **
  4885 00000628 E802FF                  	CALL	AbsSetup
  4886 0000062B 72B6                    	JC	short ILEAVE
  4887                                  
  4888                                  	;EnterCrit critDisk
  4889 0000062D E8580D                  	call	ECritDisk
  4890 00000630 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4891 00000636 E89803                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4892                                  	;LeaveCrit critDisk
  4893 00000639 E8670D                  	call	LCritDisk
  4894                                  
  4895                                  ;M039
  4896                                  ;       DS:BX = transfer address (source data address).
  4897                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4898                                  ;	     sectors, also termed an "Extent".)
  4899                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4900                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4901                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4902                                  ;
  4903                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4904                                  ;       written. Note that all the above registers are preserved for
  4905                                  ;       DSKWRITE.
  4906                                  
  4907 0000063C 1E                              push    ds
  4908                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4909 0000063D E83E37                  	call	DskWrtBufPurge
  4910 00000640 1F                              pop     ds
  4911                                  ;M039
  4912                                  	;invoke	DSKWRITE
  4913 00000641 E8F231                  	call	DSKWRITE
  4914 00000644 EB82                    	JMP	short TLEAVE
  4915                                  
  4916                                  ;ABSDWRT ENDP
  4917                                  
  4918                                  ;----------------------------------------------------------------------------
  4919                                  ;
  4920                                  ; Procedure Name : GETBP
  4921                                  ;
  4922                                  ; Inputs:
  4923                                  ;	AL = Logical unit number (A = 0)
  4924                                  ; Function:
  4925                                  ;	Find Drive Parameter Block
  4926                                  ; Outputs:
  4927                                  ;	ES:BP points to DPB
  4928                                  ;	[THISDPB] = ES:BP
  4929                                  ;	Carry set if unit number bad or unit is a NET device.
  4930                                  ;		Later case sets extended error error_I24_not_supported
  4931                                  ; No other registers alteredjjj
  4932                                  ;
  4933                                  ;----------------------------------------------------------------------------
  4934                                  
  4935                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4936                                  GETBP:
  4937                                  	; 15/05/2019 - Retro DOS v4.0
  4938                                  	; 11/07/2018 - Retro DOS v3.0
  4939 00000646 50                      	PUSH	AX
  4940 00000647 0401                    	ADD	AL, 1		; No increment; need carry flag
  4941 00000649 7216                    	JC	SHORT SKIPGET
  4942 0000064B E85D65                  	CALL	GETTHISDRV
  4943                                  	; MSDOS 6.0
  4944 0000064E 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4945 00000650 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4946 00000652 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4947 00000655 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4948 00000657 F9                      	STC				;DCR.			;AN000;
  4949 00000658 A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4950 0000065B C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4951                                  SKIPGET:
  4952 00000661 58                      	POP	AX
  4953 00000662 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4954                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4955                                  	;jnc	short getbp_t
  4956                                  	;retn
  4957                                  getbp_t:
  4958 00000664 C42E[A205]              	LES	BP,[THISCDS]
  4959                                  	; 15/12/2022
  4960 00000668 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  4961                                  	; 07/12/2022
  4962                                  	;TEST	WORD [ES:BP+43H],8000H
  4963                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  4964 0000066D 7408                    	JZ	SHORT GETBP_CDS
  4965 0000066F C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  4966 00000675 F9                      	STC
  4967                                  GETBP_RETN:
  4968 00000676 C3                      	RETN
  4969                                  
  4970                                  GETBP_CDS:
  4971                                  	;LES	BP,[ES:BP+45H]
  4972 00000677 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  4973                                  GOTDPB:
  4974                                  	; Load THISDPB from ES:BP
  4975 0000067B 892E[8A05]              	MOV	[THISDPB],BP
  4976 0000067F 8C06[8C05]              	MOV	[THISDPB+2],ES
  4977 00000683 C3                      	RETN
  4978                                  
  4979                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  4980                                  
  4981                                  ;----------------------------------------------------------------------------
  4982                                  ;
  4983                                  ; Procedure Name : SYS_RETURN
  4984                                  ;
  4985                                  ; These are the general system call exit mechanisms. All internal system
  4986                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  4987                                  ; is to set the user's flags and set his AX register for return.
  4988                                  ;
  4989                                  ;----------------------------------------------------------------------------
  4990                                  
  4991                                          ;procedure   SYS_RETURN,NEAR
  4992                                  SYS_RETURN:        
  4993                                          ;entry	SYS_RET_OK
  4994                                  SYS_RET_OK:   
  4995 00000684 E843FE                  	call    Get_User_Stack
  4996                                  		; turn off user's carry flag
  4997                                  SYS_RET_OK_clc: ; 25/06/2019 
  4998                                          ;;and	word [SI+16h],0FFFEh 
  4999                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5000                                          ; 25/06/2019
  5001 00000687 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5002 0000068B EB10                    	JMP     SHORT DO_RET
  5003                                  
  5004                                          ;entry   SYS_RET_ERR
  5005                                  SYS_RET_ERR:        
  5006 0000068D 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5007 0000068F E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5008 00000692 E81A00                  	CALL	ErrorMap
  5009                                  
  5010                                  	;entry	From_GetSet
  5011                                  From_GetSet:
  5012 00000695 E832FE                          call    Get_User_Stack
  5013                                  		 ; signal carry to user
  5014                                  	;;or	word [SI+16h],1
  5015                                  	;OR	word [SI+user_env.user_F],f_Carry
  5016                                  	; 25/06/2019
  5017 00000698 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5018 0000069C F9                      	STC			; also, signal internal error
  5019                                  DO_RET:
  5020                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5021 0000069D 8904                    	MOV	[SI],AX
  5022 0000069F C3                      	RETN
  5023                                  
  5024                                  	;entry	FCB_RET_OK
  5025                                  FCB_RET_OK:
  5026                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5027                                  NO_OP:
  5028 000006A0 30C0                    	XOR	AL,AL
  5029 000006A2 C3                      	retn
  5030                                  
  5031                                  	;entry	FCB_RET_ERR
  5032                                  FCB_RET_ERR:
  5033 000006A3 30E4                    	XOR	AH,AH
  5034 000006A5 36A3[2403]              	mov	[ss:EXTERR],AX
  5035 000006A9 E80300                  	CALL	ErrorMap
  5036 000006AC B0FF                    	MOV	AL,-1
  5037 000006AE C3                      	retn
  5038                                  
  5039                                  	;entry	ErrorMap
  5040                                  ErrorMap:
  5041 000006AF 56                      	PUSH	SI
  5042                                  				; ERR_TABLE_21 is now in DOSDATA
  5043 000006B0 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5044                                  				; SS override for FAILERR and EXTERR
  5045 000006B3 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5046 000006B9 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5047                                  		 ; Ooops, this is the REAL reason
  5048                                  	;mov	word [SS:EXTERR],53h
  5049 000006BB 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5050                                  EXTENDED_NORMAL:
  5051 000006C2 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5052 000006C5 5E                      	POP	SI
  5053 000006C6 C3                      	retn
  5054                                  
  5055                                  	;EndProc SYS_RETURN
  5056                                  
  5057                                  ;---------------------------------------------------------------------------
  5058                                  ;
  5059                                  ; Procedure Name : CAL_LK
  5060                                  ;
  5061                                  ; Inputs:
  5062                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5063                                  ;		(DS NEED not be DOSDATA)
  5064                                  ;	[EXTERR] is set with error
  5065                                  ; Function:
  5066                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5067                                  ; Outputs:
  5068                                  ;	[EXTERR_CLASS] set
  5069                                  ;	[EXTERR_ACTION] set
  5070                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5071                                  ; Destroys SI, FLAGS
  5072                                  ;
  5073                                  ;---------------------------------------------------------------------------
  5074                                  
  5075                                  	;procedure CAL_LK,NEAR
  5076                                  CAL_LK:
  5077 000006C7 1E                      	PUSH	DS
  5078 000006C8 50                      	PUSH	AX
  5079 000006C9 53                      	PUSH	BX
  5080                                  
  5081                                  ;M048	Context DS		; DS:SI -> Table
  5082                                  ;
  5083                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5084                                  ; is DOSDATA
  5085                                  
  5086                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5087                                  	; 15/05/2019 - Retro DOS v4.0
  5088 000006CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5089                                  
  5090                                  	; 18/07/2018
  5091                                  	;push	ss
  5092                                  	;pop	ds
  5093                                  
  5094 000006CF 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5095                                  TABLK1:
  5096 000006D3 AC                      	LODSB
  5097                                  
  5098 000006D4 3CFF                    	CMP	AL,0FFH
  5099 000006D6 7409                    	JZ	short GOT_VALS	; End of table
  5100 000006D8 38D8                    	CMP	AL,BL
  5101 000006DA 7405                    	JZ	short GOT_VALS	; Got entry
  5102 000006DC 83C603                  	ADD	SI,3		; Next table entry
  5103                                  	; 15/08/2018
  5104 000006DF EBF2                    	JMP	short TABLK1
  5105                                  
  5106                                  GOT_VALS:
  5107 000006E1 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5108                                  
  5109 000006E2 80FCFF                  	CMP	AH,0FFH
  5110 000006E5 7404                    	JZ	short NO_SET_ACT
  5111 000006E7 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5112                                  NO_SET_ACT:
  5113 000006EB 3CFF                    	CMP	AL,0FFH
  5114 000006ED 7403                    	JZ	short NO_SET_CLS
  5115 000006EF A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5116                                  NO_SET_CLS:
  5117 000006F2 AC                      	LODSB			; Get LOCUS
  5118                                  
  5119 000006F3 3CFF                    	CMP	AL,0FFH
  5120 000006F5 7403                    	JZ	short NO_SET_LOC
  5121 000006F7 A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5122                                  NO_SET_LOC:
  5123 000006FA 5B                      	POP	BX
  5124 000006FB 58                      	POP	AX
  5125 000006FC 1F                      	POP	DS
  5126 000006FD C3                      	retn
  5127                                  
  5128                                  	;EndProc CAL_LK
  5129                                  
  5130                                  ;---------------------------------------------------------------------------
  5131                                  ;
  5132                                  ; Procedure Name : ETAB_LK
  5133                                  ;
  5134                                  ; Inputs:
  5135                                  ;	AX is error code
  5136                                  ;	[USER_IN_AX] has AH value of system call involved
  5137                                  ; Function:
  5138                                  ;	Make sure error code is appropriate to this call.
  5139                                  ; Outputs:
  5140                                  ;	AX MAY be mapped error code
  5141                                  ;	[EXTERR] = Input AX
  5142                                  ; Destroys ONLY AX and FLAGS
  5143                                  ;
  5144                                  ;---------------------------------------------------------------------------
  5145                                  
  5146                                  	;procedure ETAB_LK,NEAR
  5147                                  
  5148                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5149 000006FE 1E                      	PUSH	DS
  5150 000006FF 56                      	PUSH	SI
  5151 00000700 51                      	PUSH	CX
  5152 00000701 53                      	PUSH	BX
  5153                                  
  5154                                  	;Context DS			; SS is DOSDATA
  5155                                  
  5156 00000702 16                      	push	ss
  5157 00000703 1F                      	pop	ds
  5158                                  
  5159 00000704 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5160                                  
  5161                                  					; I21_MAP_E_TAB is now in DOSCODE
  5162 00000707 BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5163 0000070A 88C7                    	MOV	BH,AL			; Real code to BH
  5164 0000070C 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5165                                  TABLK2:
  5166                                  	; 15/05/2019 - Retro DOS v4.0
  5167 00000710 2E                      	cs
  5168 00000711 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5169                                  	
  5170                                  	; 18/07/2018 - Retro DOS v3.0
  5171                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5172                                  
  5173 00000712 3CFF                    	CMP	AL,0FFH 		; End of table?
  5174 00000714 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5175 00000716 38D8                    	CMP	AL,BL			; Found call?
  5176 00000718 740C                    	JZ	short GOT_CALL		; Yes
  5177 0000071A 86E0                    	XCHG	AH,AL			; Count to AL
  5178 0000071C 30E4                    	XOR	AH,AH			; Make word for add
  5179 0000071E 01C6                    	ADD	SI,AX			; Next table entry
  5180 00000720 EBEE                    	JMP	short TABLK2
  5181                                  
  5182                                  NOT_IN_TABLE:
  5183 00000722 88F8                    	MOV	AL,BH			; Restore original code
  5184 00000724 EB0C                    	JMP	SHORT NO_MAP
  5185                                  
  5186                                  GOT_CALL:
  5187 00000726 88E1                    	MOV	CL,AH
  5188 00000728 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5189                                  CHECK_CODE:
  5190                                  	; 15/05/2019 - Retro DOS v4.0
  5191 0000072A 2E                      	cs
  5192 0000072B AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5193                                  
  5194                                  	; 18/07/2018
  5195                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5196                                  
  5197 0000072C 38F8                    	CMP	AL,BH			; Code OK?
  5198 0000072E 7402                    	JZ	short NO_MAP		; Yes
  5199 00000730 E2F8                    	LOOP	CHECK_CODE
  5200                                  NO_MAP:
  5201 00000732 30E4                    	XOR	AH,AH			; AX is now valid code
  5202 00000734 5B                      	POP	BX
  5203 00000735 59                      	POP	CX
  5204 00000736 5E                      	POP	SI
  5205 00000737 1F                      	POP	DS
  5206 00000738 C3                      	retn
  5207                                  
  5208                                  	;EndProc ETAB_LK
  5209                                  
  5210                                  ; 18/07/2018 - Retro DOS v3.0
  5211                                  ;---------------------------------------------------------------------------
  5212                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5213                                  
  5214                                  ;IF installed ; (*)
  5215                                  
  5216                                  ;---------------------------------------------------------------------------
  5217                                  ;
  5218                                  ; Procedure Name : SetBad
  5219                                  ;
  5220                                  ; SetBad sets up info for bad functions
  5221                                  ;
  5222                                  ;---------------------------------------------------------------------------
  5223                                  
  5224                                  SetBad:
  5225                                  	;mov	ax,1
  5226 00000739 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5227                                  
  5228                                  	; MSDOS 3.3
  5229                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5230                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5231                                  
  5232                                  ;	set up ds to point to DOSDATA
  5233                                  
  5234                                  	; 15/05/2019 - Retro DOS v4.0
  5235                                  	; MSDOS 6.0
  5236 0000073C 1E                      	push	ds
  5237                                  
  5238                                  	;getdseg <ds>
  5239 0000073D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5240                                  
  5241 00000742 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5242                                  
  5243 00000747 1F                      	pop	ds	  	;hkn; restore ds
  5244                                  
  5245 00000748 F9                      	STC
  5246 00000749 C3                      	retn
  5247                                  
  5248                                  ;--------------------------------------------------------------------------
  5249                                  ;
  5250                                  ; Procedure Name : BadCall
  5251                                  ;
  5252                                  ; BadCall is the initial routine for bad function calls
  5253                                  ;
  5254                                  ;--------------------------------------------------------------------------
  5255                                  
  5256                                  BadCall:
  5257 0000074A E8ECFF                  	call	SetBad
  5258 0000074D CB                      	retf
  5259                                  
  5260                                  ;--------------------------------------------------------------------------
  5261                                  ;
  5262                                  ; OKCall always sets carry to off.
  5263                                  ;
  5264                                  ;-----------------------------------------------------------------------
  5265                                  
  5266                                  OKCall:
  5267 0000074E F8                      	CLC
  5268 0000074F CB                      	retf
  5269                                  
  5270                                  ;---------------------------------------------------------------------------
  5271                                  ;
  5272                                  ; Procedure Name : INT2F
  5273                                  ;
  5274                                  ; INT 2F handler works as follows:
  5275                                  ;   PUSH    AX
  5276                                  ;   MOV     AX,multiplex:function
  5277                                  ;   INT     2F
  5278                                  ;   POP     ...
  5279                                  ; The handler itself needs to make the AX available for the various routines.
  5280                                  ;
  5281                                  ;----------------------------------------------------------------------------
  5282                                  
  5283                                  ; 15/05/2019 - Retro DOS v4.0
  5284                                  
  5285                                  ;KERNEL_SEGMENT equ 70h
  5286                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5287                                  DOSBIODATASEG equ 70h
  5288                                  
  5289                                  ; retrodos4.s - offset in BIOSDATA
  5290                                  bios_i2f equ 5
  5291                                  
  5292                                  ;PUBLIC	Int2F
  5293                                  ;INT2F	PROC	FAR
  5294                                  
  5295                                  ; 15/05/2019
  5296                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5297                                  
  5298                                  ; 04/11/2022
  5299                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5300                                  
  5301                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5302                                  	; 18/07/2018 - Retro DOS v3.0
  5303                                  INT2F:
  5304                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5305                                  INT2FNT:
  5306                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5307 00000750 FB                      	STI
  5308                                  	;cmp	ah,11h
  5309 00000751 80FC11                  	CMP	AH,MultNET
  5310 00000754 750A                    	JNZ	short INT2FSHR
  5311                                  TestInstall:
  5312 00000756 08C0                    	OR	AL,AL
  5313 00000758 7403                    	JZ	short Leave2F
  5314                                  BadFunc:
  5315 0000075A E8DCFF                  	CALL	SetBad
  5316                                  
  5317                                  	;entry	Leave2F
  5318                                  Leave2F:
  5319 0000075D CA0200                  	RETF	2			; long return + clear flags off stack
  5320                                  
  5321                                  INT2FSHR:
  5322                                  	;cmp	ah,10h
  5323 00000760 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5324 00000763 74F1                    	JZ	short TestInstall	; yes, check for installation
  5325                                  INT2FNLS:
  5326                                  	;cmp	ah,14h
  5327 00000765 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5328 00000768 74EC                    	JZ	short TestInstall	; yes check for installation
  5329                                  INT2FDOS:
  5330                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5331                                  
  5332                                  	; 18/07/2018
  5333                                  	; MSDOS 3.3
  5334                                  	;;cmp	ah,12h	
  5335                                  	;CMP	AH,MultDOS
  5336                                  	;jz	short DispatchDOS
  5337                                  	;iret
  5338                                  
  5339                                  	; 15/05/2019
  5340                                  	; MSDOS 6.0
  5341                                  	;cmp	ah,12h	; 07/12/2022
  5342 0000076A 80FC12                  	CMP	AH,MultDOS
  5343 0000076D 7503                    	JNZ	short check_win		;check if win386 broadcast
  5344 0000076F E9F801                  	jmp	DispatchDOS
  5345                                  
  5346                                  	; .... win386 .... 
  5347                                  
  5348                                  check_win:
  5349                                  	;cmp	ah,16h
  5350 00000772 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5351 00000775 7408                    	je	short Win386_Msg
  5352                                  
  5353                                  	; M044
  5354                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5355                                  	; of Windows. If so, do special action of going and saving last para
  5356                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5357                                  	; bug
  5358                                  
  5359 00000777 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5360                                  	;jne	short next_i2f		; no, chain on
  5361                                  	; 15/12/2022
  5362                                  	;jmp	winold_swap		; yes, do desired action
  5363 0000077A 7442                    	je	short winold_swap
  5364 0000077C E90701                  	jmp	next_i2f
  5365                                  
  5366                                  	; 15/12/2022
  5367                                  ;next_i2f:
  5368                                  ;	;;;jmp	bios_i2f
  5369                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5370                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5371                                  ;	; 04/11/2022
  5372                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5373                                  
  5374                                  ;	IRET				; This assume that we are at the head
  5375                                  					; of the list
  5376                                  ;INT2F	ENDP
  5377                                  
  5378                                  ; 15/05/2019 - Retro DOS v4.0
  5379                                  
  5380                                  ; We have received a message from Win386. There are three possible
  5381                                  ; messages we could get from Win386:
  5382                                  ;
  5383                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5384                                  ;		  to the Win386 startup info structure.
  5385                                  ; Exit		- for this, we clear the IsWin386 flag.
  5386                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5387                                  ;		  has already been handled. this is indicated by setting
  5388                                  ;		  CX to a non-zero value.
  5389                                  
  5390                                  Win386_Msg:
  5391 0000077F 1E                      	push	ds
  5392                                  
  5393                                  	;getdseg <DS>			; ds is DOSDATA
  5394 00000780 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5395                                  
  5396                                  	; For WIN386 2.xx instance data
  5397                                  
  5398 00000785 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5399 00000787 7503                    	jne	short Win386_Msg_exit
  5400 00000789 E92C01                  	jmp	OldWin386Init		; yes, return instance data
  5401                                  Win386_Msg_exit:
  5402 0000078C 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5403 0000078E 7503                    	jne	short Win386_Msg_devcall
  5404 00000790 E92E01                  	jmp	Win386_Leaving
  5405                                  Win386_Msg_devcall:
  5406 00000793 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5407 00000795 7503                    	jne	short Win386_Msg_init
  5408 00000797 E96501                  	jmp	Win386_Query
  5409                                  Win386_Msg_init:
  5410 0000079A 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5411 0000079C 7403                    	je	short Win386_Starting
  5412 0000079E E9E400                  	jmp	win_nexti2f		; no, return
  5413                                  Win386_Starting:
  5414                                  	; 17/12/2022
  5415 000007A1 F6C201                  	test	dl,1
  5416                                  	;test	dx,1			; is this really win386?
  5417 000007A4 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5418 000007A6 E9DC00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5419                                  Win386_vchk:
  5420                                  	; M018 -- start of block changes
  5421                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5422                                  	; than 030Ah, we skip the VxD presence check
  5423                                  
  5424                                  ;M067 -- Begin changes
  5425                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5426                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5427                                  ;So, we null out the VxD ptr before the check.
  5428                                  
  5429                                  	;mov	word [Win386_Info+6],0
  5430 000007A9 C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5431                                  	;mov	word [Win386_Info+8],0
  5432 000007AF C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5433                                  
  5434                                  ;M067 -- End changes
  5435                                  
  5436                                  ;ifdef JAPAN
  5437                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5438                                  ;else
  5439 000007B5 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5440                                  ;endif
  5441                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5442 000007B9 724E                    	jb	short Win386_vxd
  5443 000007BB E9DF00                  	jmp	noVxD31
  5444                                  
  5445                                  	; 15/12/2022
  5446                                  winold_swap:
  5447 000007BE 1E                      	push	ds
  5448 000007BF 06                      	push	es
  5449 000007C0 56                      	push	si
  5450 000007C1 57                      	push	di
  5451 000007C2 51                      	push	cx
  5452                                  
  5453                                  	;getdseg <ds>			;ds = DOSDATA
  5454 000007C3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5455                                  
  5456 000007C8 3C01                    	cmp	al,1			;swap Windows out call
  5457 000007CA 751B                    	jne	short swapin		;no, check if Swap in call
  5458 000007CC E88E01                  	call	getwinlast
  5459 000007CF 1E                      	push	ds
  5460 000007D0 07                      	pop	es
  5461 000007D1 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5462 000007D3 31F6                    	xor	si,si
  5463 000007D5 BF[0600]                	mov	di,WinoldPatch1
  5464 000007D8 B90800                  	mov	cx,8
  5465 000007DB FC                      	cld
  5466 000007DC 51                      	push	cx
  5467 000007DD F3A4                    	rep	movsb			;save first 8 bytes
  5468 000007DF 59                      	pop	cx
  5469 000007E0 BF[CD0D]                	mov	di,WinoldPatch2
  5470 000007E3 F3A4                    	rep	movsb			;save next 8 bytes
  5471 000007E5 EB1B                    	jmp	short winold_done
  5472                                  swapin:
  5473 000007E7 3C02                    	cmp	al,2			;swap Windows in call?
  5474 000007E9 7517                    	jne	short winold_done	;no, something else, pass it on
  5475 000007EB E86F01                  	call	getwinlast
  5476 000007EE 8EC6                    	mov	es,si
  5477 000007F0 31FF                    	xor	di,di
  5478 000007F2 BE[0600]                	mov	si,WinoldPatch1
  5479 000007F5 B90800                  	mov	cx,8
  5480 000007F8 FC                      	cld
  5481 000007F9 51                      	push	cx
  5482 000007FA F3A4                    	rep	movsb			;restore first 8 bytes
  5483 000007FC 59                      	pop	cx
  5484 000007FD BE[CD0D]                	mov	si,WinoldPatch2
  5485 00000800 F3A4                    	rep	movsb			;restore next 8 bytes
  5486                                  winold_done:
  5487 00000802 59                      	pop	cx
  5488 00000803 5F                      	pop	di
  5489 00000804 5E                      	pop	si
  5490 00000805 07                      	pop	es
  5491 00000806 1F                      	pop	ds
  5492 00000807 EB7D                    	jmp	short next_i2f		;chain on
  5493                                  	; 15/12/2022
  5494                                  	;jmp	next_i2f	
  5495                                  
  5496                                  Win386_vxd:
  5497 00000809 50                      	push	ax
  5498 0000080A 53                      	push	bx
  5499 0000080B 51                      	push	cx
  5500 0000080C 52                      	push	dx
  5501 0000080D 56                      	push	si
  5502 0000080E 57                      	push	di			; save regs !!dont change order!!
  5503                                  
  5504 0000080F 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5505 00000813 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5506 00000816 7421                    	je	short Vxd31		; N: continue
  5507                                  					; Y: save arena associated with 
  5508                                  					;    umb_head
  5509                                  
  5510 00000818 C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5511                                  					; umb_arena
  5512 0000081D 1E                      	push	ds
  5513 0000081E 06                      	push	es
  5514                                  
  5515 0000081F 8CD8                    	mov	ax,ds
  5516 00000821 8EC0                    	mov	es,ax			; es - > dosdata
  5517                                  
  5518 00000823 8EDB                    	mov	ds,bx
  5519 00000825 31F6                    	xor	si,si			; ds:si -> umb_head
  5520                                  
  5521 00000827 FC                      	cld
  5522                                  
  5523 00000828 BF[1F12]                	mov	di,UmbSave1
  5524 0000082B B90B00                  	mov	cx,11
  5525 0000082E F3A4                    	rep	movsb
  5526                                  
  5527 00000830 BF[D50D]                	mov	di,UmbSave2
  5528                                  	;mov	cx,5
  5529                                  	; 18/12/2022
  5530 00000833 B105                    	mov	cl,5
  5531 00000835 F3A4                    	rep	movsb	
  5532                                  
  5533 00000837 07                      	pop	es
  5534 00000838 1F                      	pop	ds			; M062 - End
  5535                                  
  5536                                  Vxd31:
  5537                                  	;test	byte [DOS_FLAG],2
  5538 00000839 F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5539 0000083E 7408                    	jz	short Dont_Supress		; M066
  5540 00000840 5F                      	pop	di				; M066
  5541 00000841 5E                      	pop	si				; M066
  5542 00000842 5A                      	pop	dx				; M066
  5543 00000843 59                      	pop	cx				; M066
  5544 00000844 5B                      	pop	bx				; M066
  5545 00000845 58                      	pop	ax				; M066
  5546 00000846 EB55                    	jmp	short noVxD31			; M066
  5547                                  
  5548                                  	; We check here if the VxD is available in the root of the boot drive. 
  5549                                  	; We do an extended open to suppress any error messages
  5550                                  	
  5551                                  Dont_Supress:
  5552 00000848 A0[6900]                	mov	al,[BOOTDRIVE]
  5553 0000084B 0440                    	add	al,'A' - 1		; get drive letter
  5554 0000084D A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5555                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5556                                  	;mov	al,0			; no extended attributes
  5557                                  	; 18/12/2022
  5558 00000850 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5559 00000853 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5560                                  					; no inherit, suppress crit err
  5561 00000856 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5562 00000859 BA0100                  	mov	dx,1			; fail if file does not exist
  5563 0000085C BE[3110]                	mov	si,VxDpath	
  5564                                  					; path of VxD file
  5565 0000085F BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5566                                  
  5567 00000862 CD21                    	int	21h			; do extended open
  5568                                  
  5569 00000864 5F                      	pop	di
  5570 00000865 5E                      	pop	si
  5571 00000866 5A                      	pop	dx
  5572 00000867 59                      	pop	cx
  5573                                  
  5574 00000868 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5575                                  
  5576                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5577                                  	; to indicate error to Windows after displaying message to user that 
  5578                                  	; VxD needs to be present to run Windows in enhanced mode.
  5579                                  
  5580 0000086A 52                      	push	dx
  5581 0000086B 1E                      	push	ds
  5582 0000086C 56                      	push	si
  5583 0000086D BE[060A]                	mov	si,NoVxDErrMsg
  5584 00000870 0E                      	push	cs
  5585 00000871 1F                      	pop	ds
  5586 00000872 B96300                  	mov	cx,VxDMesLen ; 99	;
  5587 00000875 B402                    	mov	ah,2			; write char to console
  5588 00000877 FC                      	cld
  5589                                  vxdlp:
  5590 00000878 AC                      	lodsb
  5591 00000879 86D0                    	xchg	dl,al			; get char in dl
  5592 0000087B CD21                    	int	21h
  5593 0000087D E2F9                    	loop	vxdlp
  5594                                  
  5595 0000087F 5E                      	pop	si
  5596 00000880 1F                      	pop	ds
  5597 00000881 5A                      	pop	dx
  5598 00000882 5B                      	pop	bx
  5599 00000883 58                      	pop	ax			;all registers restored
  5600 00000884 41                      	inc	cx			;cx != 0 to indicate error
  5601                                  	; 15/12/22022
  5602                                  	;jmp	win_nexti2f		;chain on
  5603                                  	;jmp	short win_nexti2f
  5604                                  
  5605                                  	; 15/12/2022
  5606                                  win_nexti2f:
  5607 00000885 1F                      	pop	ds
  5608                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5609                                  	; 15/12/2022
  5610                                  next_i2f:
  5611                                  	;;;jmp	bios_i2f
  5612                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5613                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5614                                  	; 04/11/2022
  5615 00000886 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5616                                  
  5617                                  VxDthere:
  5618 0000088B 89C3                    	mov	bx,ax
  5619 0000088D B43E                    	mov	ah,CLOSE ; 3Eh
  5620 0000088F CD21                    	int	21h			;close the file
  5621                                  
  5622                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5623                                  
  5624                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5625                                  	;mov	bx,Win386_Info
  5626                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5627                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5628                                  	; 15/12/2022
  5629 00000891 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5630 00000897 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5631                                  
  5632 0000089B 5B                      	pop	bx
  5633 0000089C 58                      	pop	ax
  5634                                  noVxD31:
  5635                                  	; M018; End of block changes
  5636                                  
  5637 0000089D 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5638 000008A2 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5639                                  
  5640                                  	; M002;
  5641                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5642                                  
  5643 000008A7 52                      	push	dx			; M002
  5644 000008A8 89DA                    	mov	dx,bx			; M002
  5645                                  					; point ES:BX to Win386_Info ; M002
  5646 000008AA BB[E20F]                	mov	bx,Win386_Info 
  5647 000008AD 895702                  	mov	[bx+2],dx		; M002
  5648 000008B0 8C4704                  	mov	[bx+4],es		; M002
  5649 000008B3 5A                      	pop	dx			; M002
  5650 000008B4 1E                      	push	ds			; M002
  5651 000008B5 07                      	pop	es			; M002
  5652                                  	;jmp	win_nexti2f		; M002
  5653                                  	; 15/12/2022
  5654 000008B6 EBCD                    	jmp	short win_nexti2f
  5655                                  
  5656                                  	; 15/12/2022
  5657                                  	; Code to return Win386 2.xx instance table
  5658                                  OldWin386Init:
  5659 000008B8 58                      	pop	ax			; discard ds pushed on stack
  5660 000008B9 BE[E711]                	mov	si,OldInstanceJunk 
  5661                                  					; ds:si = instance table
  5662 000008BC B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5663                                  	;jmp	next_i2f
  5664                                  	; 15/12/2022
  5665 000008BF EBC5                    	jmp	short next_i2f
  5666                                  
  5667                                  Win386_Leaving:
  5668                                  	; 15/12/2022
  5669 000008C1 F6C201                  	test 	dl,1
  5670                                  	;test	dx,1			; is this really win386?
  5671                                  	;jz	short Win386_Leaving_c
  5672                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5673                                  	; 15/12/2022
  5674 000008C4 75BF                    	jnz	short win_nexti2f	
  5675                                  
  5676                                  Win386_Leaving_c:
  5677                                  					; M062 - Start
  5678 000008C6 803E[DA0D]01            	cmp	byte [UmbSaveFlag], 1	; Q: was umb_arena saved at win start
  5679                                  					;    up.
  5680 000008CB 7526                    	jne	short noumb		; N: not saved 
  5681 000008CD C606[DA0D]00            	mov	byte [UmbSaveFlag], 0	; Y: clear UmbSaveFlag and restore 
  5682                                  					;    previously saved umb_head
  5683 000008D2 50                      	push	ax
  5684 000008D3 06                      	push	es
  5685 000008D4 51                      	push	cx
  5686 000008D5 56                      	push	si
  5687 000008D6 57                      	push	di
  5688                                  
  5689 000008D7 A1[8C00]                	mov	ax,[UMB_HEAD]	
  5690 000008DA 8EC0                    	mov	es,ax
  5691 000008DC 31FF                    	xor	di,di			; es:di -> umb_head
  5692                                  
  5693 000008DE FC                      	cld
  5694                                  
  5695 000008DF BE[1F12]                	mov	si,UmbSave1
  5696 000008E2 B90B00                  	mov	cx,11
  5697 000008E5 F3A4                    	rep	movsb
  5698 000008E7 BE[D50D]                	mov	si,UmbSave2
  5699                                  	;mov	cx,5
  5700                                  	; 18/12/2022
  5701 000008EA B105                    	mov	cl,5
  5702 000008EC F3A4                    	rep	movsb
  5703                                  
  5704 000008EE 5F                      	pop	di
  5705 000008EF 5E                      	pop	si
  5706 000008F0 59                      	pop	cx
  5707 000008F1 07                      	pop	es
  5708 000008F2 58                      	pop	ax
  5709                                  noumb:					; M062 - End
  5710 000008F3 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5711 000008F8 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5712 000008FD EB86                    	jmp	short win_nexti2f
  5713                                  
  5714                                  ;	; 15/12/2022
  5715                                  ;	; Code to return Win386 2.xx instance table
  5716                                  ;OldWin386Init:
  5717                                  ;	pop	ax			; discard ds pushed on stack
  5718                                  ;	mov	si,OldInstanceJunk 
  5719                                  ;					; ds:si = instance table
  5720                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5721                                  ;	;jmp	next_i2f
  5722                                  ;	; 15/12/2022
  5723                                  ;	jmp	short _next_i2f
  5724                                  
  5725                                  Win386_Query:
  5726 000008FF 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5727 00000902 7581                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5728 00000904 09C9                    	or	cx,cx			; is it an instance query?
  5729 00000906 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5730 00000908 41                      	inc	cx			; indicate that data is instanced
  5731                                  ;
  5732                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5733                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5734                                  ; M001;  
  5735                                  ; M001; OFFSETS STRUC
  5736                                  ; M001; 	Major_version	db	?
  5737                                  ; M001; 	Minor_version	db	?
  5738                                  ; M001; 	SaveDS		dw	?
  5739                                  ; M001; 	SaveBX		dw	?
  5740                                  ; M001; 	Indos		dw	?
  5741                                  ; M001; 	User_id		dw	?
  5742                                  ; M001; 	CritPatch	dw	?
  5743                                  ; M001; OFFSETS	ENDS
  5744                                  ; M001; 
  5745                                  ; M001; User_Id is the only variable really important for proper functioning  
  5746                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5747                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5748                                  ; M001; pass this table because Win386 depends on this table to get the 
  5749                                  ; M001; User_Id offset.
  5750                                  ; M001; 
  5751 00000909 BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5752 0000090C 1E                      	push	ds			; M001
  5753 0000090D 07                      	pop	es			; es:bx points at offset table ; M001
  5754 0000090E EB41                    	jmp	short PopIret		; M001
  5755                                  
  5756                                  ; 15/12/2022
  5757                                  ;	; Code to return Win386 2.xx instance table
  5758                                  ;OldWin386Init:
  5759                                  ;	pop	ax			; discard ds pushed on stack
  5760                                  ;	mov	si,OldInstanceJunk 
  5761                                  ;					; ds:si = instance table
  5762                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5763                                  ;	;jmp	next_i2f
  5764                                  ;	; 15/12/2022
  5765                                  ;	jmp	short _next_i2f
  5766                                  
  5767                                  dosmgr_func:
  5768 00000910 49                      	dec	cx
  5769 00000911 7436                    	jz	short win386_patch	; call to patch DOS
  5770 00000913 49                      	dec	cx
  5771 00000914 743B                    	jz	short PopIret		; remove DOS patches, ignore
  5772 00000916 49                      	dec	cx
  5773 00000917 743A                    	jz	short win386_size	; get size of DOS data structures
  5774 00000919 49                      	dec	cx
  5775 0000091A 7429                    	jz	short win386_inst	; instance more data
  5776 0000091C 49                      	dec	cx
  5777 0000091D 7532                    	jnz	short PopIret		; no functions above this
  5778                                  
  5779                                  	; Get DOS device driver size -- es:di points at device driver header
  5780                                  	; In DOS 4.x, the para before the device header contains an arena 
  5781                                  	; header for the driver.
  5782                                  
  5783 0000091F 8CC0                    	mov	ax,es			; ax = device header segment
  5784                                  
  5785                                  	; We check to see if we have a memory arena for this device driver. 
  5786                                  	; The way to do this would be to look at the previous para to see if
  5787                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5788                                  	; in the arena is the same as the device header segment. These two 
  5789                                  	; checks together should take care of all cases
  5790                                  
  5791 00000921 48                      	dec	ax			; get arena header
  5792 00000922 06                      	push	es
  5793 00000923 8EC0                    	mov	es,ax			; arena header for device driver
  5794                                  
  5795 00000925 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5796 00000929 7517                    	jnz	short cantsize		; no, cant size this driver
  5797 0000092B 40                      	inc	ax			; get back device header segment
  5798 0000092C 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5799 00000930 7510                    	jnz	short cantsize		; no, not a proper arena
  5800                                  
  5801 00000932 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5802 00000936 07                      	pop	es
  5803                                  
  5804                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5805                                  	; Speed is not critical and so we choose the shortest method 
  5806                                  	; -- use "mul"
  5807                                  
  5808 00000937 BB1000                  	mov	bx,16
  5809 0000093A F7E3                    	mul	bx
  5810 0000093C 89C1                    	mov	cx,ax
  5811 0000093E 89D3                    	mov	bx,dx
  5812 00000940 EB09                    	jmp	short win386_done	; return with device driver size
  5813                                  cantsize:
  5814 00000942 07                      	pop	es
  5815 00000943 31C0                    	xor	ax,ax
  5816                                  win386_inst:	; 05/01/2024
  5817 00000945 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5818 00000947 EB08                    	jmp	short PopIret		; return
  5819                                  
  5820                                  win386_patch:
  5821                                  	; dx contains bits marking the patches to be applied. We return 
  5822                                  	; the field with all bits set to indicate that all patches have been
  5823                                  	; done
  5824                                  
  5825 00000949 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5826                                   	;jmp	short win386_done	; done, return
  5827                                  	; 15/12/2022
  5828                                  	; 15/12/2022
  5829                                  win386_done:
  5830 0000094B B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5831 0000094E BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5832                                  PopIret:
  5833 00000951 1F                      	pop	ds
  5834 00000952 CF                      	iret	
  5835                                  
  5836                                  win386_size:
  5837                                  	; Return the size of DOS data structures -- currently only CDS size
  5838                                  
  5839                                  	; 17/12/2022
  5840 00000953 F6C201                  	test	dl,1
  5841                                  	;test	dx,1			; check for CDS size bit
  5842 00000956 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5843                                  
  5844 00000958 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5845 0000095B EBEE                    	jmp	short win386_done	; return with the size
  5846                                  
  5847                                  ; 05/01/2024
  5848                                  %if 0
  5849                                  win386_inst:
  5850                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5851                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5852                                  	; this by returning a status of not previously instanced. The basic
  5853                                  	; structure of these things have not changed and so the current
  5854                                  	; DOSMGR code should be able to work it out
  5855                                  
  5856                                  	xor	dx,dx			; make sure dx has a not done value
  5857                                  	jmp	short PopIret		; skip done indication
  5858                                  %endif
  5859                                  
  5860                                  	; 15/12/2022
  5861                                  ;win386_done:
  5862                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5863                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5864                                  ;PopIret:
  5865                                  ;	pop	ds
  5866                                  ;	iret				; return back up the chain
  5867                                  
  5868                                  	; 15/12/2022
  5869                                  ;win_nexti2f:
  5870                                  	;pop	ds
  5871                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5872                                  
  5873                                  ;End WIN386 support
  5874                                  
  5875                                  ; 15/05/2019
  5876                                  
  5877                                  ;M044; Start of changes
  5878                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5879                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5880                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5881                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5882                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5883                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5884                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5885                                  ; last para of the Windows memory block and then restore this para on the
  5886                                  ; Windows swapin callout. 
  5887                                  
  5888                                  getwinlast:
  5889                                  	; 07/12/2022
  5890 0000095D 8B36[3003]              	mov	si,[CurrentPDB]
  5891 00000961 4E                      	dec	si
  5892 00000962 8EC6                    	mov	es,si
  5893 00000964 2603360300              	add	si,[es:3]
  5894 00000969 C3                      	retn
  5895                                  
  5896                                  ; 15/12/2022
  5897                                  %if 0
  5898                                  winold_swap:
  5899                                  	push	ds
  5900                                  	push	es
  5901                                  	push	si
  5902                                  	push	di
  5903                                  	push	cx
  5904                                  
  5905                                  	;getdseg <ds>			;ds = DOSDATA
  5906                                  	mov	ds,[cs:DosDSeg]
  5907                                  
  5908                                  	cmp	al,1			;swap Windows out call
  5909                                  	jne	short swapin		;no, check if Swap in call
  5910                                  	call	getwinlast
  5911                                  	push	ds
  5912                                  	pop	es
  5913                                  	mov	ds,si			;ds = memory arena of Windows
  5914                                  	xor	si,si
  5915                                  	mov	di,WinoldPatch1
  5916                                  	mov	cx,8
  5917                                  	cld
  5918                                  	push	cx
  5919                                  	rep	movsb			;save first 8 bytes
  5920                                  	pop	cx
  5921                                  	mov	di,WinoldPatch2
  5922                                  	rep	movsb			;save next 8 bytes
  5923                                  	jmp	short winold_done
  5924                                  swapin:
  5925                                  	cmp	al,2			;swap Windows in call?
  5926                                  	jne	short winold_done	;no, something else, pass it on
  5927                                  	call	getwinlast
  5928                                  	mov	es,si
  5929                                  	xor	di,di
  5930                                  	mov	si,WinoldPatch1
  5931                                  	mov	cx,8
  5932                                  	cld
  5933                                  	push	cx
  5934                                  	rep	movsb			;restore first 8 bytes
  5935                                  	pop	cx
  5936                                  	mov	si,WinoldPatch2
  5937                                  	rep	movsb			;restore next 8 bytes
  5938                                  winold_done:
  5939                                  	pop	cx
  5940                                  	pop	di
  5941                                  	pop	si
  5942                                  	pop	es
  5943                                  	pop	ds
  5944                                  	jmp	next_i2f		;chain on
  5945                                  
  5946                                  %endif
  5947                                  
  5948                                  ;M044; End of changes
  5949                                  
  5950                                  ; 15/05/2019
  5951                                  
  5952                                  DispatchDOS:
  5953 0000096A 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  5954 0000096F 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  5955 00000974 50                      	PUSH	AX			; push index
  5956 00000975 55                      	PUSH	BP
  5957 00000976 89E5                    	MOV	BP,SP
  5958                                  		; stack looks like:
  5959                                  		;   0	BP
  5960                                  		;   2	DISPATCH
  5961                                  		;   4	TABLE
  5962                                  		;   6	RETURN
  5963                                  		;   8	LONG-RETURN
  5964                                  		;   C	FLAGS
  5965                                  		;   E	AX
  5966                                  	
  5967 00000978 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  5968 0000097B 5D                      	POP	BP
  5969 0000097C E81909                  	call	TableDispatch
  5970 0000097F E9D8FD                  	JMP	BadFunc 		; return indicates invalid function
  5971                                  
  5972                                  INT2F_etcetera:
  5973                                  	;entry	DosGetGroup
  5974                                  DosGetGroup:
  5975                                  	; MSDOS 3.3
  5976                                  	;push	cs
  5977                                  	;pop	ds
  5978                                  	;retn
  5979                                  
  5980                                  	; MSDOS 6.0
  5981                                  ;SR; Cannot use CS now
  5982                                  ;
  5983                                  ;	PUSH	CS
  5984                                  ;	POP	DS
  5985                                  
  5986                                  	; 04/11/2022
  5987                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  5988                                  
  5989                                  	;getdseg <ds>
  5990 00000982 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5991 00000987 C3                      	retn
  5992                                  
  5993                                  	;entry	DOSInstall
  5994                                  DOSInstall:
  5995 00000988 B0FF                    	MOV	AL,0FFh
  5996 0000098A C3                      	retn
  5997                                  
  5998                                  ;ENDIF ; (*)
  5999                                  
  6000                                  
  6001                                  ; 15/05/2019 - Retro DOS v4.0
  6002                                  
  6003                                  ;------------------------------------------------------------------------
  6004                                  ;
  6005                                  ; Procedure Name : RW32_CONVERT
  6006                                  ;
  6007                                  ;Input: same as ABSDRD and ABSDWRT
  6008                                  ;	 ES:BP -> DPB
  6009                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6010                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6011                                  ;	 carry clear, parms ok
  6012                                  ;
  6013                                  ;------------------------------------------------------------------------
  6014                                  
  6015                                  RW32_CONVERT:
  6016 0000098B 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6017 0000098E 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6018 00000990 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6019 00000991 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6020 00000992 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6021 00000996 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6022 0000099A 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6023 0000099D 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6024                                  	;INC	DL			;>32mb			;AN000;
  6025                                  	; 17/12/2022
  6026 0000099F 42                      	inc	dx
  6027 000009A0 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6028 000009A2 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6029 000009A4 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6030                                  letold:
  6031 000009A6 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6032 000009A7 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6033 000009A8 7425                    	JZ	short old_style		;>32mb  no 		;AN000;
  6034                                  
  6035 000009AA 1E                      	push	ds
  6036                                  	;getdseg <ds>
  6037 000009AB 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6038 000009B0 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6039 000009B6 1F                      	pop	ds
  6040                                  
  6041 000009B7 F9                      	STC				;>32mb			;AN000;
  6042 000009B8 C3                      	retn				;>32mb			;AN000;
  6043                                  
  6044                                  new32format:
  6045                                  	;mov	dx,[bx+2]
  6046 000009B9 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6047                                  
  6048 000009BC 1E                      	push	ds			; set up ds to DOSDATA
  6049                                  	;getdseg <ds>
  6050 000009BD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6051 000009C2 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6052 000009C6 1F                      	pop	ds
  6053                                  
  6054 000009C7 8B17                    	mov	dx,[bx]
  6055                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6056                                  	;mov	cx,[bx+4]
  6057 000009C9 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6058                                  	;lds	bx,[bx+6]
  6059 000009CC C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6060                                  old_style:				;>32mb			;AN000;
  6061 000009CF F8                      	CLC				;>32mb			;AN000;
  6062 000009D0 C3                      	retn				;>32mb			;AN000;
  6063                                  
  6064                                  ;------------------------------------------------------------------------
  6065                                  ;
  6066                                  ; Procedure Name : Fastxxx_Purge
  6067                                  ;
  6068                                  ; Input: None
  6069                                  ; Functions: Purge Fastopen/ Cache Buffers
  6070                                  ; Output: None
  6071                                  ;
  6072                                  ;------------------------------------------------------------------------
  6073                                  
  6074                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6075                                  
  6076                                  Fastxxx_Purge:
  6077 000009D1 50                      	PUSH	AX			; save regs.	;AN000;
  6078 000009D2 56                      	PUSH	SI						;AN000;
  6079 000009D3 52                      	PUSH	DX						;AN000;
  6080                                  topen:
  6081 000009D4 1E                      	push	ds			; set up ds to DOSDATA
  6082                                  	;getdseg <ds>
  6083 000009D5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6084                                  
  6085 000009DA F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6086                                  					; fastopen installed ?	;AN000;
  6087 000009DF 1F                      	pop	ds
  6088 000009E0 740B                    	JZ	short nofast		; no			;AN000;
  6089 000009E2 B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6090                                  dofast:
  6091 000009E4 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6092                                  	;;mov	dl,[es:bp+0]
  6093                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6094                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6095                                  	; 15/12/2022
  6096 000009E6 268A5600                	mov	dl,[es:bp]
  6097                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6098 000009EA E8961D                  	call	Fast_Dispatch
  6099                                  nofast:
  6100 000009ED 5A                      	POP	DX						;AN000;
  6101 000009EE 5E                      	POP	SI			; restore regs		;AN000;
  6102 000009EF 58                      	POP	AX			 			;AN000;
  6103 000009F0 C3                      	retn				; exit
  6104                                  
  6105                                  ;============================================================================
  6106                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6107                                  ;============================================================================
  6108                                  ; 29/04/2019 - Retro DOS v4.0
  6109                                  
  6110                                  ;include dossym.inc
  6111                                  ;include dosmac.inc
  6112                                  ;include doscntry.inc
  6113                                  
  6114                                  ; DOSCODE Segment
  6115                                  
  6116                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6117                                  ; ---------------------------------------------------------------------------
  6118                                  ;include divmes.inc
  6119                                  
  6120                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6121                                  ; -------------------------------------
  6122                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6123                                  
  6124                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6125                                  	;PUBLIC	DIVMES
  6126                                  
  6127 000009F1 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6127 000009FA 6F766572666C6F770D-
  6127 00000A03 0A                 
  6128                                  
  6129                                  	;PUBLIC	DivMesLen
  6130                                  DivMesLen:
  6131 00000A04 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6132                                  
  6133                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6134                                  ; -------------------------------------
  6135                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6136                                  
  6137                                  ; (MSDOS 6.0)
  6138                                  ; VxD not found error message
  6139                                  
  6140                                  NoVxDErrMsg:
  6141 00000A06 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6141 00000A0F 686176652074686520-
  6141 00000A18 66696C652057494E41-
  6141 00000A21 32302E33383620696E-
  6141 00000A2A 2074686520726F6F74-
  6141 00000A33 206F6620796F757220-
  6141 00000A3C 626F6F742064726976-
  6141 00000A45 65                 
  6142 00000A46 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6142 00000A4F 57696E646F77732069-
  6142 00000A58 6E20456E68616E6365-
  6142 00000A61 64204D6F64650D0A   
  6143                                  
  6144                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6145                                  
  6146                                  ; 13/05/2019 - Retro DOS v4.0
  6147                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6148                                  
  6149                                  ;include yesno.asm  (MNSDOS 6.0)
  6150                                  ; -------------------------------------
  6151                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6152                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6153                                  
  6154                                  ; This is for country Yes and No
  6155                                  
  6156 00000A69 59                      NLS_YES:	db 'Y'
  6157 00000A6A 4E                      NLS_NO:		db 'N'
  6158 00000A6B 79                      NLS_yes2:	db 'y'
  6159 00000A6C 6E                      NLS_no2:	db 'n'
  6160                                  
  6161                                  ; ---------------------------------------------------------------------------
  6162                                  
  6163                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6164                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6165                                  
  6166                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6167                                  
  6168                                  ; The following two tables implement the current buffered input editing
  6169                                  ; routines. The tables are pairwise associated in reverse order for ease
  6170                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6171                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6172                                  
  6173                                  	;PUBLIC	CANCHAR
  6174                                  CANCHAR:
  6175 00000A6D 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6176                                  	
  6177                                  	;PUBLIC	ESCCHAR
  6178                                  ESCCHAR:
  6179 00000A6E 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6180                                  	
  6181                                  	;IF	NOT Rainbow
  6182                                  
  6183                                  ESCTAB:	; LABEL BYTE
  6184                                  
  6185                                  	;IF	IBM
  6186 00000A6F 40                      	DB	64		; Ctrl-Z - F6
  6187 00000A70 4D                      	DB	77		; Copy one char - -->
  6188 00000A71 3B                      	DB	59		; Copy one char - F1
  6189 00000A72 53                      	DB	83		; Skip one char - DEL
  6190 00000A73 3C                      	DB	60		; Copy to char - F2
  6191 00000A74 3E                      	DB	62		; Skip to char - F4
  6192 00000A75 3D                      	DB	61		; Copy line - F3
  6193 00000A76 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6194 00000A77 3F                      	DB	63		; Reedit line (new template) - F5
  6195 00000A78 4B                      	DB	75		; Backspace - <--
  6196 00000A79 52                      	DB	82		; Enter insert mode - INS (toggle)
  6197 00000A7A 52                      	DB	82		; Exit insert mode - INS (toggle)
  6198 00000A7B 41                      	DB	65		; Escape character - F7
  6199 00000A7C 41                      	DB	65		; End of table
  6200                                  	;ENDIF
  6201                                  
  6202                                  ESCEND: ; LABEL BYTE
  6203                                  
  6204                                  ESCTABLEN EQU ESCEND-ESCTAB
  6205                                  
  6206                                  ESCFUNC: ; LABEL WORD
  6207                                  	
  6208 00000A7D [9314]                  	short_addr  GETCH	; Ignore the escape sequence
  6209 00000A7F [1015]                  	short_addr  TWOESC
  6210 00000A81 [0816]                  	short_addr  EXITINS
  6211 00000A83 [0816]                  	short_addr  ENTERINS
  6212 00000A85 [0B15]                  	short_addr  BACKSP
  6213 00000A87 [F415]                  	short_addr  REEDIT
  6214 00000A89 [F814]                  	short_addr  KILNEW
  6215 00000A8B [8715]                  	short_addr  COPYLIN
  6216 00000A8D [BA15]                  	short_addr  SKIPSTR
  6217 00000A8F [8D15]                  	short_addr  COPYSTR
  6218 00000A91 [B015]                  	short_addr  SKIPONE
  6219 00000A93 [9215]                  	short_addr  COPYONE
  6220 00000A95 [9215]                  	short_addr  COPYONE
  6221 00000A97 [1016]                  	short_addr  CTRLZ
  6222                                  
  6223                                  	;ENDIF
  6224                                  
  6225                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6226                                  ; ---------------------------------------------------------------------------
  6227                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6228                                  
  6229                                  ; OEMFunction key is expected to process a single function
  6230                                  ;   key input from a device and dispatch to the proper
  6231                                  ;   routines leaving all registers UNTOUCHED.
  6232                                  ;
  6233                                  ; Inputs:   CS, SS are DOSGROUP
  6234                                  ; Outputs:  None. This function is expected to JMP to onw of
  6235                                  ;           the following labels:
  6236                                  ;
  6237                                  ;           GetCh       - ignore the sequence
  6238                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6239                                  ;           ExitIns     - toggle insert mode
  6240                                  ;           EnterIns    - toggle insert mode
  6241                                  ;           BackSp      - move backwards one space
  6242                                  ;           ReEdit      - reedit the line with a new template
  6243                                  ;           KilNew      - discard the current line and start from scratch
  6244                                  ;           CopyLin     - copy the rest of the template into the line
  6245                                  ;           SkipStr     - read the next character and skip to it in the template
  6246                                  ;           CopyStr     - read next char and copy from template to line until char
  6247                                  ;           SkipOne     - advance position in template one character
  6248                                  ;           CopyOne     - copy next character in template into line
  6249                                  ;           CtrlZ       - place a ^Z into the template
  6250                                  ; Registers that are allowed to be modified by this function are:
  6251                                  ;           AX, CX, BP
  6252                                  
  6253                                  ; 13/05/2019 - Retro DOS v4.0
  6254                                  ; -------------------------------------
  6255                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6256                                  
  6257                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6258                                  ; -------------------------------------
  6259                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6260                                  
  6261                                  OEMFunctionKey:
  6262 00000A99 E85609                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6263 00000A9C B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6264 00000A9E 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6265 00000A9F BF[6F0A]                	MOV     DI,ESCTAB		; offset of second byte table
  6266 00000AA2 06                      	push	es
  6267 00000AA3 0E                      	push	cs
  6268 00000AA4 07                      	pop	es
  6269 00000AA5 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6270 00000AA7 07                      	pop	es
  6271 00000AA8 5F                      	POP     DI                      ; restore DI
  6272 00000AA9 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6273 00000AAB 89CD                    	MOV     BP,CX                   ; move to indexable register
  6274                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6275 00000AAD 2EFFA6[7D0A]            	JMP	word [CS:BP+ESCFUNC]
  6276                                  
  6277                                  ;DOSCODE ENDS
  6278                                  	
  6279                                  ;============================================================================
  6280                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6281                                  ;============================================================================
  6282                                  ; Retro DOS v3.0 - 18/07/2018
  6283                                  
  6284                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6285                                  ;----------------------------------------------------------------------------
  6286                                  ; Retro DOS v2.0 - 13/03/2018
  6287                                  
  6288                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6289                                  
  6290                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6291                                  
  6292                                  ;**	$GET_DATE - Get Current Date
  6293                                  ;----------------------------------------
  6294                                  ;	ENTRY	none
  6295                                  ;	EXIT	(cx:dx) = current date
  6296                                  ;	USES	all
  6297                                  
  6298                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6299                                  
  6300                                  _$GET_DATE:	;System call 42
  6301                                  
  6302 00000AB2 16                      	PUSH	SS
  6303 00000AB3 1F                      	POP	DS
  6304 00000AB4 E8B900                  	CALL	READTIME	;Check for rollover to next day
  6305 00000AB7 A1[5203]                	MOV	AX,[YEAR]
  6306                                  
  6307                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6308                                  
  6309 00000ABA 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6310 00000ABE E809FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6311                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6312 00000AC1 895C06                  	MOV	[SI+user_env.user_DX],BX
  6313 00000AC4 05BC07                  	ADD	AX,1980		;Put bias back
  6314                                  	;MOV	[SI+4],AX	;CX=year
  6315 00000AC7 894404                  	MOV	[SI+user_env.user_CX],AX
  6316 00000ACA 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6317                                  RET20:	; 05/11/2022
  6318                                  RET24:	; 18/12/2022
  6319 00000ACE C3                      	RETN
  6320                                  
  6321                                  ;**	$SET_DATE - Set Current Date
  6322                                  ;----------------------------------------
  6323                                  ;	ENTRY	(cx:dx) = current date
  6324                                  ;	EXIT	(al) = -1 iff bad date
  6325                                  ;		(al) = 0 if ok
  6326                                  ;	USES	all
  6327                                  
  6328                                  _$SET_DATE:	;System call 43
  6329                                  
  6330 00000ACF B0FF                    	MOV	AL,-1		;Be ready to flag error
  6331 00000AD1 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6332                                  	;JC	SHORT RET24	;Error if not big enough
  6333                                  	; 05/11/2022
  6334 00000AD5 72F7                    	jc	short RET20
  6335 00000AD7 83F977                  	CMP	CX,119		;Year must be less than 2100
  6336 00000ADA 77F2                    	JA	SHORT RET24
  6337 00000ADC 08F6                    	OR	DH,DH
  6338                                  	;JZ	SHORT RET24
  6339                                   	; 05/11/2022
  6340 00000ADE 74EE                    	jz	short RET20
  6341 00000AE0 08D2                    	OR	DL,DL
  6342                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6343                                  	; 05/11/2022
  6344 00000AE2 74EA                    	jz	short RET20
  6345 00000AE4 80FE0C                  	CMP	DH,12		;Check against max. month
  6346 00000AE7 77E5                    	JA	SHORT RET24
  6347 00000AE9 16                      	PUSH	SS
  6348 00000AEA 1F                      	POP	DS
  6349                                  	;CALL	DODATE
  6350                                  	; 18/12/2022
  6351 00000AEB E91801                  	jmp	DODATE
  6352                                  ;RET24:  
  6353                                  	;RETN
  6354                                  
  6355                                  ;**	$GET_TIME - Get Current Time
  6356                                  ;----------------------------------------
  6357                                  ;	ENTRY	none
  6358                                  ;	EXIT	(cx:dx) = current time
  6359                                  ;	USES	all
  6360                                  
  6361                                  _$GET_TIME:			;System call 44
  6362                                  
  6363 00000AEE 16                      	PUSH	SS
  6364 00000AEF 1F                      	POP	DS
  6365 00000AF0 E87D00                  	CALL	READTIME
  6366 00000AF3 E8D4F9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6367                                  	;MOV	[SI+6],DX
  6368 00000AF6 895406                  	MOV	[SI+user_env.user_DX],DX
  6369                                  	;MOV	[SI+4],CX
  6370 00000AF9 894C04                  	MOV	[SI+user_env.user_CX],CX
  6371 00000AFC 30C0                    	XOR	AL,AL
  6372                                  RET26:  
  6373 00000AFE C3                      	RETN
  6374                                  
  6375                                  ;**	$SET_TIME - Set Current Time
  6376                                  ;----------------------------------------
  6377                                  ;	ENTRY	(cx:dx) = time
  6378                                  ;	EXIT	(al) = 0 if 0k
  6379                                  ;		(al) = -1 if invalid
  6380                                  ;	USES	ALL
  6381                                  
  6382                                  _$SET_TIME:			;System call 45
  6383                                  
  6384 00000AFF B0FF                    	MOV	AL,-1		;Flag in case of error
  6385 00000B01 80FD18                  	CMP	CH,24		;Check hours
  6386 00000B04 73F8                    	JAE	SHORT RET26
  6387 00000B06 80F93C                  	CMP	CL,60		;Check minutes
  6388 00000B09 73F3                    	JAE	SHORT RET26
  6389 00000B0B 80FE3C                  	CMP	DH,60		;Check seconds
  6390 00000B0E 73EE                    	JAE	SHORT RET26
  6391 00000B10 80FA64                  	CMP	DL,100		;Check 1/100's
  6392 00000B13 73E9                    	JAE	SHORT RET26
  6393 00000B15 51                      	PUSH	CX
  6394 00000B16 52                      	PUSH	DX
  6395 00000B17 16                      	PUSH	SS
  6396 00000B18 1F                      	POP	DS
  6397 00000B19 BB[B603]                	MOV	BX,TIMEBUF
  6398 00000B1C B90600                  	MOV	CX,6
  6399 00000B1F 31D2                    	XOR	DX,DX
  6400 00000B21 89D0                    	MOV	AX,DX
  6401 00000B23 53                      	PUSH	BX
  6402 00000B24 E8943C                  	CALL	SETREAD
  6403 00000B27 1E                      	PUSH	DS
  6404 00000B28 C536[2E00]              	LDS	SI,[BCLOCK]
  6405 00000B2C E8163C                  	CALL	DEVIOCALL2	;Get correct day count
  6406 00000B2F 1F                      	POP	DS
  6407 00000B30 5B                      	POP	BX
  6408 00000B31 E8BA3C                  	CALL	SETWRITE
  6409 00000B34 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6410 00000B38 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6411 00000B3C C536[2E00]              	LDS	SI,[BCLOCK]
  6412 00000B40 E8023C                  	CALL	DEVIOCALL2	;Set the time
  6413 00000B43 30C0                    	XOR	AL,AL
  6414 00000B45 C3                      	RETN
  6415                                  
  6416                                  ; 11/07/2018 - Retro DOS v3.0
  6417                                  ; Retro DOS v2.0 - 14/03/2018
  6418                                  
  6419                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6420                                  
  6421                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6422                                  ;----------------------------------------------------------
  6423                                  ; Date16 returns the current date in AX, current time in DX
  6424                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6425                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6426                                  
  6427                                  DATE16:
  6428                                  	
  6429                                  ;M048	Context DS
  6430                                  ;
  6431                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6432                                  ; is DOSDATA
  6433                                  
  6434                                  	;push	ss
  6435                                  	;pop	ds
  6436                                  
  6437                                  	;getdseg <ds>		; M048
  6438                                  
  6439                                  	; 13/05/2019 - Retro DOS v4.0
  6440 00000B46 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6441                                  
  6442 00000B4B 51                      	PUSH	CX
  6443 00000B4C 06                      	PUSH	ES
  6444 00000B4D E82000                  	CALL	READTIME
  6445 00000B50 07                      	POP	ES
  6446 00000B51 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6447 00000B53 D0E1                    	SHL	CL,1
  6448 00000B55 D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6449 00000B57 D1E1                    	SHL	CX,1
  6450 00000B59 D1E1                    	SHL	CX,1
  6451 00000B5B D0EE                    	SHR	DH,1		;Count every two seconds
  6452 00000B5D 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6453 00000B5F 89CA                    	MOV	DX,CX
  6454                                  
  6455                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6456                                  
  6457 00000B61 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6458 00000B64 B104                    	MOV	CL,4
  6459 00000B66 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6460 00000B68 D1E0                    	SHL	AX,1
  6461 00000B6A 59                      	POP	CX
  6462 00000B6B 0A06[5003]              	OR	AL,[DAY]
  6463                                  RET21:
  6464 00000B6F C3                      	RETN
  6465                                  
  6466                                  ;----------------------------------------------------------
  6467                                  
  6468                                  READTIME:
  6469                                  
  6470                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6471                                  ;Uses AX, CX, DX.
  6472                                  
  6473 00000B70 C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6474 00000B76 56                      	PUSH	SI
  6475 00000B77 53                      	PUSH	BX
  6476                                  
  6477 00000B78 BB[B603]                	MOV	BX,TIMEBUF
  6478                                  
  6479 00000B7B B90600                  	MOV	CX,6
  6480 00000B7E 31D2                    	XOR	DX,DX
  6481 00000B80 89D0                    	MOV	AX,DX
  6482 00000B82 E8363C                  	CALL	SETREAD
  6483 00000B85 1E                      	PUSH	DS
  6484 00000B86 C536[2E00]              	LDS	SI,[BCLOCK]
  6485 00000B8A E8B83B                  	CALL	DEVIOCALL2	;Get correct date and time
  6486 00000B8D 1F                      	POP	DS
  6487 00000B8E 5B                      	POP	BX
  6488 00000B8F 5E                      	POP	SI
  6489 00000B90 A1[B603]                	MOV	AX,[TIMEBUF]
  6490 00000B93 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6491 00000B97 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6492 00000B9B 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6493                                  	;JZ	SHORT RET22
  6494 00000B9F 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6495                                  	;cmp	ax,43830
  6496 00000BA1 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6497 00000BA4 733D                    	JAE	SHORT RET22	;Ignore if too large
  6498 00000BA6 A3[5403]                	MOV	[DAYCNT],AX
  6499 00000BA9 56                      	PUSH	SI
  6500 00000BAA 51                      	PUSH	CX
  6501 00000BAB 52                      	PUSH	DX		;Save time
  6502 00000BAC 31D2                    	XOR	DX,DX
  6503                                  	;mov	cx,1461
  6504 00000BAE B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6505 00000BB1 F7F1                    	DIV	CX		;Compute number of 4-year units
  6506 00000BB3 D1E0                    	SHL	AX,1
  6507 00000BB5 D1E0                    	SHL	AX,1
  6508 00000BB7 D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6509 00000BB9 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6510                                  
  6511 00000BBB BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6512                                  
  6513 00000BBE E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6514 00000BC1 D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6515 00000BC3 7304                    	JNC	SHORT SK	;Extra half-year?
  6516 00000BC5 81C2C800                	ADD	DX,200
  6517                                  SK:
  6518 00000BC9 E82400                  	CALL	SETYEAR
  6519 00000BCC B101                    	MOV	CL,1		;At least at first month in year
  6520                                  
  6521 00000BCE BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6522                                  	
  6523 00000BD1 E81000                  	CALL	DSLIDE		;Find out which month we're in
  6524 00000BD4 880E[5103]              	MOV	[MONTH],CL
  6525 00000BD8 42                      	INC	DX		;Remainder is day of month (start with one)
  6526 00000BD9 8816[5003]              	MOV	[DAY],DL
  6527 00000BDD E89700                  	CALL	WKDAY		;Set day of week
  6528 00000BE0 5A                      	POP	DX
  6529 00000BE1 59                      	POP	CX
  6530 00000BE2 5E                      	POP	SI
  6531                                  RET22:  
  6532 00000BE3 C3                      	RETN
  6533                                  
  6534                                  ;----------------------------------------------------------
  6535                                  
  6536                                  DSLIDE:
  6537 00000BE4 B400                    	MOV	AH,0
  6538                                  DSLIDE1:
  6539 00000BE6 AC                      	LODSB			;Get count of days
  6540 00000BE7 39C2                    	CMP	DX,AX		;See if it will fit
  6541                                  	;JB	SHORT RET23	;If not, done
  6542 00000BE9 72F8                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6543 00000BEB 29C2                    	SUB	DX,AX
  6544 00000BED 41                      	INC	CX		;Count one more month/year
  6545 00000BEE EBF6                    	JMP	SHORT DSLIDE1
  6546                                  
  6547                                  ;----------------------------------------------------------
  6548                                  
  6549                                  SETYEAR:
  6550                                  
  6551                                  ;Set year with value in CX. Adjust length of February for this year.
  6552                                  
  6553                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6554                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6555                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6556                                  ;	preserve DS as CHKYR is also called as a routine.
  6557                                  
  6558                                  	; MSDOS 6.0 (18/07/2018) ; *
  6559                                  
  6560                                  	;GETDSEG DS
  6561                                  
  6562                                  	;PUSH	CS  ; *
  6563                                  	;POP	DS  ; *
  6564                                  
  6565                                  	; 13/05/2019 - Retro DOS v4.0
  6566 00000BF0 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6567                                  
  6568                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6569                                  	; 05/11/2022 
  6570                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6571                                  
  6572 00000BF5 880E[5203]              	MOV	[YEAR],CL
  6573                                  CHKYR:
  6574 00000BF9 F6C103                  	TEST	CL,3		;Check for leap year
  6575 00000BFC B01C                    	MOV	AL,28
  6576 00000BFE 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6577 00000C00 FEC0                    	INC	AL		;Add leap day
  6578                                  SAVFEB:
  6579 00000C02 A2[1D0D]                	mov	[february],al
  6580                                  	;MOV	[MONTAB+1],AL	;Store for February
  6581                                  RET23:  
  6582 00000C05 C3                      	RETN
  6583                                  
  6584                                  ;----------------------------------------------------------
  6585                                  
  6586                                  DODATE:
  6587 00000C06 E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6588 00000C09 88F0                    	MOV	AL,DH
  6589                                  
  6590 00000C0B BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6591                                  
  6592 00000C0E D7                      	XLAT			;Look up days in month
  6593 00000C0F 38D0                    	CMP	AL,DL
  6594 00000C11 B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6595                                  	;JB	SHORT RET25	;Error if too many days
  6596 00000C13 72F0                    	jb	short RET23 ; 18/07/2018
  6597 00000C15 E8D8FF                  	CALL	SETYEAR
  6598                                  ;
  6599                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6600                                  ;
  6601 00000C18 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6602 00000C1C D1E9                    	SHR	CX,1
  6603 00000C1E D1E9                    	SHR	CX,1
  6604                                  	;mov	ax,1461
  6605 00000C20 B8B505                  	MOV	AX,FOURYEARS
  6606 00000C23 89D3                    	MOV	BX,DX
  6607 00000C25 F7E1                    	MUL	CX
  6608 00000C27 8A0E[5203]              	MOV	CL,[YEAR]
  6609 00000C2B 80E103                  	AND	CL,3
  6610                                  
  6611 00000C2E BE[140D]                	MOV	SI,YRTAB
  6612                                  
  6613 00000C31 89C2                    	MOV	DX,AX
  6614 00000C33 D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6615 00000C35 E85200                  	CALL	DSUM		;Add up the days in each year
  6616 00000C38 88F9                    	MOV	CL,BH		;Month of year
  6617                                  
  6618 00000C3A BE[1C0D]                	MOV	SI,MONTAB
  6619                                  
  6620 00000C3D 49                      	DEC	CX		;Account for months starting with one
  6621 00000C3E E84900                  	CALL	DSUM		;Add up days in each month
  6622 00000C41 88D9                    	MOV	CL,BL		;Day of month
  6623 00000C43 49                      	DEC	CX		;Account for days starting with one
  6624 00000C44 01CA                    	ADD	DX,CX		;Add in to day total
  6625 00000C46 92                      	XCHG	AX,DX		;Get day count in AX
  6626 00000C47 A3[5403]                	MOV	[DAYCNT],AX
  6627 00000C4A 56                      	PUSH	SI
  6628 00000C4B 53                      	PUSH	BX
  6629 00000C4C 50                      	PUSH	AX
  6630                                  
  6631 00000C4D BB[B603]                	MOV	BX,TIMEBUF
  6632                                  
  6633 00000C50 B90600                  	MOV	CX,6
  6634 00000C53 31D2                    	XOR	DX,DX
  6635 00000C55 89D0                    	MOV	AX,DX
  6636 00000C57 53                      	PUSH	BX
  6637 00000C58 E8603B                  	CALL	SETREAD
  6638                                  
  6639 00000C5B 1E                      	PUSH	DS
  6640 00000C5C C536[2E00]              	LDS	SI,[BCLOCK]
  6641 00000C60 E8E23A                  	CALL	DEVIOCALL2	;Get correct date and time
  6642 00000C63 1F                      	POP	DS
  6643 00000C64 5B                      	POP	BX
  6644 00000C65 E8863B                  	CALL	SETWRITE
  6645 00000C68 8F06[B603]              	POP	WORD [TIMEBUF]
  6646 00000C6C 1E                      	PUSH	DS
  6647 00000C6D C536[2E00]              	LDS	SI,[BCLOCK]
  6648 00000C71 E8D13A                  	CALL	DEVIOCALL2	;Set the date
  6649 00000C74 1F                      	POP	DS
  6650 00000C75 5B                      	POP	BX
  6651 00000C76 5E                      	POP	SI
  6652                                  WKDAY:
  6653 00000C77 A1[5403]                	MOV	AX,[DAYCNT]
  6654 00000C7A 31D2                    	XOR	DX,DX
  6655 00000C7C B90700                  	MOV	CX,7
  6656 00000C7F 40                      	INC	AX
  6657 00000C80 40                      	INC	AX		;First day was Tuesday
  6658 00000C81 F7F1                    	DIV	CX		;Compute day of week
  6659 00000C83 8816[5603]              	MOV	[WEEKDAY],DL
  6660 00000C87 30C0                    	XOR	AL,AL		;Flag OK
  6661                                  RET25:
  6662 00000C89 C3                      	RETN
  6663                                  
  6664                                  ;----------------------------------------------------------
  6665                                  
  6666                                  ;**	DSUM - Compute the sum of a string of bytes
  6667                                  ;
  6668                                  ;	ENTRY	(cx) = byte count
  6669                                  ;		(ds:si) = byte address
  6670                                  ;		(dx) = sum register, initialized by caller
  6671                                  ;	EXIT	(dx) updated
  6672                                  ;	USES	ax, cx, dx, si, flags
  6673                                  
  6674                                  DSUM:
  6675 00000C8A B400                    	MOV	AH,0
  6676 00000C8C E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6677                                  	;JCXZ	RET25 ; 18/07/2018
  6678                                  DSUM1:
  6679 00000C8E AC                      	LODSB
  6680 00000C8F 01C2                    	ADD	DX,AX
  6681 00000C91 E2FB                    	LOOP	DSUM1
  6682                                  DSUM9:
  6683 00000C93 C3                      	RETN
  6684                                  
  6685                                  ;============================================================================
  6686                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6687                                  ;============================================================================
  6688                                  ; 29/04/2019 - Retro DOS v4.0
  6689                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6690                                  
  6691                                  ; 12/03/2018 - Retro DOS v2.0 
  6692                                  
  6693                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6694                                  ;NAME	GETSET
  6695                                  
  6696                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6697                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6698                                  
  6699                                  ;USERNUM:
  6700                                  ;	DW	0			; 24 bit user number
  6701                                  ;       DB      0
  6702                                  ;;	IF      IBM
  6703                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6704                                  ;;	ELSE
  6705                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6706                                  ;;	ENDIF
  6707                                  
  6708                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6709                                  ;; 08/07/2018 - Retro DOS v3.0
  6710                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6711                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6712                                  
  6713                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6714                                  ;----------------------------------------------------------------------------
  6715                                  
  6716                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6717                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6718                                  
  6719                                  _$GET_VERSION:
  6720                                  
  6721                                  ; Inputs:
  6722                                  ;       None
  6723                                  ; Function:
  6724                                  ;       Return MS-DOS version number
  6725                                  ; Outputs:
  6726                                  ;       OEM number in BH
  6727                                  ;       User number in BL:CX (24 bits)
  6728                                  ;       Version number as AL.AH in binary
  6729                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6730                                  
  6731                                  ; MSDOS 6.0
  6732                                  ;
  6733                                  ;	Fake_Count is used to lie about the version numbers to support
  6734                                  ;	old binarys. See ms_table.asm for more info.
  6735                                  ;
  6736                                  ;		if input al = 00
  6737                                  ;		  (bh) = OEM number			
  6738                                  ;		else if input al = 01
  6739                                  ;		  (bh) = version flags
  6740                                  ;		 
  6741                                  ;		       	 bits 0-2 = DOS internal revision
  6742                                  ;		       	 bits 3-7 = DOS type flags
  6743                                  ;		              bit 3    = DOS is in ROM
  6744                                  ;		              bit 4    = DOS in in HMA
  6745                                  ;		              bits 5-7 = reserved
  6746                                  ;               M007 change - only bit 3 is now valid. Other bits
  6747                                  ;               are 0 when AL = 1
  6748                                  
  6749                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6750                                  	;--------------------------------------
  6751                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6752                                  
  6753 00000C94 16                              PUSH    SS
  6754 00000C95 1F                              POP     DS
  6755 00000C96 8B1E[B403]                      MOV     BX,[USERNUM+2]
  6756 00000C9A 8B0E[B203]                      MOV     CX,[USERNUM]
  6757                                  
  6758                                  	; 13/05/2019 - Retro DOS v4.0
  6759                                  
  6760                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6761                                  	;DOS flags
  6762                                  
  6763 00000C9E 3C01                    	cmp	AL,1
  6764 00000CA0 7502                    	jne	short Norm_Vers
  6765                                  
  6766                                  ;ifdef ROMDOS
  6767                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6768                                  ;				(DOSINROM = 8)
  6769                                  ;else
  6770 00000CA2 30FF                            xor     bh,bh		; Otherwise return 0
  6771                                  ;endif				;M007 end
  6772                                  
  6773                                  Norm_Vers:
  6774                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6775                                  
  6776                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6777                                  	; 13/05/2019 - Retro DOS v4.0
  6778 00000CA4 1E                      	push	ds		; Get the version number from the
  6779 00000CA5 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6780                                  	;mov	ax,[40h]
  6781 00000CA9 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6782                                  	; 07/12/2022
  6783 00000CAC 1F                      	pop	ds
  6784 00000CAD E81AF8                  	call	Get_User_Stack
  6785                                  				; Put values for return registers
  6786                                  				; in the proper place on the user's	 
  6787                                  				; stack addressed by DS:SI
  6788                                          ;MOV	[SI+user_env.user_AX],AX
  6789 00000CB0 8904                            MOV	[SI],AX			 
  6790                                  	;MOV	[SI+2],BX		 
  6791 00000CB2 895C02                  	mov	[SI+user_env.user_BX],BX 
  6792                                          ;MOV	[SI+4],CX
  6793 00000CB5 894C04                  	mov	[SI+user_env.user_CX],CX
  6794                                  
  6795 00000CB8 C3                      	RETN
  6796                                  
  6797                                  ; 18/07/2018 - Retro DOS v3.0
  6798                                  
  6799                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6800                                  ;----------------------------------------------------------------------------
  6801                                  
  6802                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6803                                  ;
  6804                                  ;	ENTRY	none
  6805                                  ;	EXIT	(al) = value of VERIFY flag
  6806                                  ;	USES	all
  6807                                  
  6808                                  
  6809                                  _$GET_VERIFY_ON_WRITE:
  6810                                  
  6811                                  ;hkn; SS override
  6812 00000CB9 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6813 00000CBD C3                      	retn
  6814                                  
  6815                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6816                                  ;
  6817                                  ;	ENTRY	(al) = value of VERIFY flag
  6818                                  ;	EXIT	none
  6819                                  ;	USES	all
  6820                                  
  6821                                  _$SET_VERIFY_ON_WRITE:
  6822                                  
  6823 00000CBE 2401                    	AND	AL,1
  6824                                  ;hkn; SS override
  6825 00000CC0 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6826                                  RET27:	; 18/07/2018
  6827 00000CC4 C3                      	retn
  6828                                  
  6829                                  ; 19/07/2018 - Retro DOS v3.0
  6830                                  
  6831                                  ;BREAK <$International - return country-dependent information>
  6832                                  ;----------------------------------------------------------------------------
  6833                                  ;
  6834                                  ; Procedure Name : $INTERNATIONAL
  6835                                  ;
  6836                                  ; Inputs:
  6837                                  ;	MOV	AH,International
  6838                                  ;	MOV	AL,country	(al = 0 => current country)
  6839                                  ;      [MOV	BX,country]
  6840                                  ;	LDS	DX,block
  6841                                  ;	INT	21
  6842                                  ; Function:
  6843                                  ;	give users an idea of what country the application is running
  6844                                  ; Outputs:
  6845                                  ;	IF DX != -1 on input (get country)
  6846                                  ;	  AL = 0 means return current country table.
  6847                                  ;	  0<AL<0FFH means return country table for country AL
  6848                                  ;	  AL = 0FF means return country table for country BX
  6849                                  ;	  No Carry:
  6850                                  ;	     Register BX will contain the 16-bit country code.
  6851                                  ;	     Register AL will contain the low 8 bits of the country code.
  6852                                  ;	     The block pointed to by DS:DX is filled in with the information
  6853                                  ;	     for the particular country.
  6854                                  ;		BYTE  Size of this table excluding this byte and the next
  6855                                  ;		BYTE  Country code represented by this table
  6856                                  ;			A sequence of n bytes, where n is the number specified
  6857                                  ;			by the first byte above and is not > internat_block_max,
  6858                                  ;			in the correct order for being returned by the
  6859                                  ;			INTERNATIONAL call as follows:
  6860                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6861                                  ;		5 BYTE	Currency symbol null terminated
  6862                                  ;		2 BYTE	thousands separator null terminated
  6863                                  ;		2 BYTE	Decimal point null terminated
  6864                                  ;		2 BYTE	Date separator null terminated
  6865                                  ;		2 BYTE	Time separator null terminated
  6866                                  ;		1 BYTE	Bit field.  Currency format.
  6867                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6868                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6869                                  ;		1 BYTE	No. of significant decimal digits in currency
  6870                                  ;		1 BYTE	Bit field.  Time format.
  6871                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6872                                  ;		DWORD	Call address of case conversion routine
  6873                                  ;		2 BYTE	Data list separator null terminated.
  6874                                  ;	  Carry:
  6875                                  ;	     Register AX has the error code.
  6876                                  ;	IF DX = -1 on input (set current country)
  6877                                  ;	  AL = 0 is an error
  6878                                  ;	  0<AL<0FFH means set current country to country AL
  6879                                  ;	  AL = 0FF means set current country to country BX
  6880                                  ;	  No Carry:
  6881                                  ;	    Current country SET
  6882                                  ;	    Register AL will contain the low 8 bits of the country code.
  6883                                  ;	  Carry:
  6884                                  ;	     Register AX has the error code.
  6885                                  ;-----------------------------------------------------------------------------
  6886                                  
  6887                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6888                                  
  6889                                  ; 13/05/2019 - Retro DOS v4.0
  6890                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6891                                  
  6892                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6893                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6894                                  
  6895                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6896                                  	 
  6897 00000CC5 3CFF                    	CMP	AL,0FFH
  6898 00000CC7 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6899 00000CC9 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6900 00000CCB 30FF                    	XOR	BH,BH
  6901                                  BX_HAS_CODE:
  6902 00000CCD 1E                      	PUSH	DS
  6903 00000CCE 07                      	POP	ES
  6904 00000CCF 52                      	PUSH	DX
  6905 00000CD0 5F                      	POP	DI			; User buffer to ES:DI
  6906                                  
  6907                                  ;hkn; SS is DOSDATA
  6908                                  ;	context DS
  6909                                  
  6910 00000CD1 16                      	push	ss
  6911 00000CD2 1F                      	pop	ds
  6912                                  
  6913 00000CD3 83FFFF                  	CMP	DI,-1
  6914 00000CD6 7465                    	JZ	short international_set
  6915 00000CD8 09DB                    	OR	BX,BX
  6916 00000CDA 7505                    	JNZ	short international_find
  6917                                  
  6918                                  ;hkn; country_cdpg is in DOSDATA segment.
  6919 00000CDC BE[2A12]                	MOV	SI,COUNTRY_CDPG
  6920                                  
  6921 00000CDF EB41                    	JMP	SHORT international_copy
  6922                                  
  6923                                  international_find:
  6924 00000CE1 BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  6925 00000CE4 E80B00                  	CALL	international_get
  6926 00000CE7 725C                    	JC	short errtn
  6927 00000CE9 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  6928 00000CEC 7534                    	JNZ	SHORT international_copy ; no, copy by myself
  6929 00000CEE 89D3                    	MOV	BX,DX			 ; put country back
  6930 00000CF0 EB40                    	JMP	SHORT international_ok3
  6931                                  
  6932                                  international_get:
  6933 00000CF2 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  6934                                  
  6935                                  ;hkn; country_cdpg is in DOSDATA segment.
  6936                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6937                                  
  6938                                  	; MSDOS 3.3
  6939                                  	;;cmp	bx,[SI+63h]
  6940                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  6941                                  	;jz	short RET27
  6942                                  
  6943                                  	; 13/05/2019 - Retro DOS v4.0
  6944                                  
  6945                                  	; MSDOS 6.0
  6946                                  	;cmp	bx,[ss:si+68h]
  6947 00000CF5 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  6948 00000CF9 74C9                    	jz	short RET27			; return if equal
  6949                                  
  6950 00000CFB 89DA                    	MOV	DX,BX
  6951 00000CFD 31DB                    	XOR	BX,BX			; bx = 0, default code page
  6952                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  6953 00000CFF B80014                  	mov	ax,1400h
  6954 00000D02 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  6955                                  			; Return: AL = 00h not installed, OK to install
  6956                                  			; 01h not installed, not OK
  6957                                  			; FFh installed
  6958 00000D04 3CFF                    	CMP	AL,0FFH
  6959 00000D06 7516                    	JNZ	short interr		; not in memory
  6960                                  	;cmp	bp,0
  6961 00000D08 09ED                    	or	bp,bp			; GetCntry ?
  6962 00000D0A 7507                    	JNZ	short stcdpg
  6963                                  	
  6964                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  6965 00000D0C B80414                  	mov     ax,1404h
  6966 00000D0F CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  6967                                  			; BX = code page, DX = country code,
  6968                                  			; DS:SI -> internal code page structure
  6969                                  			; ES:DI -> user buffer
  6970                                  			; Return: AL = status
  6971                                  
  6972 00000D11 EB05                    	JMP	short chkok
  6973                                  	
  6974                                  	;nop
  6975                                  
  6976                                  stcdpg:
  6977                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  6978 00000D13 B80314                  	mov     ax,1403h
  6979 00000D16 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  6980                                  			; DS:SI -> internal code page structure
  6981                                  			; BX = code page, DX = country code
  6982                                  			; Return: AL = status
  6983                                  chkok:
  6984 00000D18 08C0                    	or	al,al			; success ?
  6985                                  	;retz				; yes
  6986 00000D1A 74A8                    	jz	short RET27
  6987                                  
  6988                                  setcarry:
  6989 00000D1C F9                      	STC				; set carry
  6990 00000D1D C3                      	retn
  6991                                  interr:
  6992 00000D1E B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  6993 00000D20 EBFA                    	JMP	short setcarry
  6994                                  
  6995                                  international_copy:
  6996                                  
  6997                                  ;hkn; country_cdpg is in DOSDATA segment.
  6998                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6999                                  
  7000                                  	; MSDOS 3.3
  7001                                  	;;mov	bx,[SI+63h]
  7002                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7003                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7004                                  
  7005                                  	; 13/05/2019 - Retro DOS v4.0
  7006                                  
  7007                                  	; MSDOS 6.0
  7008                                  	;mov	bx,[ss:si+68h]
  7009 00000D22 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7010 00000D26 BE[9612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7011                                  
  7012                                  	;mov	cx,24
  7013 00000D29 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7014                                  
  7015                                  	; MSDOS 6.0
  7016                                  
  7017                                  ;hkn;	must set up DS to SS so that international info can be copied
  7018                                  	
  7019 00000D2C 1E                      	push	ds
  7020                                  
  7021 00000D2D 16                      	push	ss			; cs -> ss
  7022 00000D2E 1F                      	pop	ds
  7023                                  
  7024 00000D2F F3A4                    	REP	MOVSB			; copy country info
  7025                                  
  7026                                  	; MSDOS 6.0
  7027                                  
  7028 00000D31 1F                      	pop	ds	;hkn;	restore ds
  7029                                  
  7030                                  international_ok3:
  7031 00000D32 E895F7                  	call	Get_User_Stack
  7032                                  ;ASSUME	DS:NOTHING
  7033                                  	;MOV	[SI+2],BX
  7034 00000D35 895C02                  	MOV	[SI+user_env.user_BX],BX
  7035                                  international_ok:
  7036 00000D38 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7037                                  ;SYS_RET_OK_jmp:
  7038                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7039                                  nono:	; 15/12/2022
  7040                                  SYS_RET_OK_jmp:
  7041 00000D3A E947F9                  	jmp	SYS_RET_OK
  7042                                  
  7043                                  international_set:
  7044                                  
  7045                                  ;hkn; ASSUME	DS:DOSGROUP
  7046                                  ;ASSUME	DS:DOSDATA
  7047                                  
  7048 00000D3D BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7049 00000D40 E8AFFF                  	CALL	international_get
  7050 00000D43 73F3                    	JNC	short international_ok
  7051                                  errtn:
  7052 00000D45 3CFF                    	CMP	AL,0FFH
  7053 00000D47 7403                    	JZ	short errtn2
  7054                                  errtn1:
  7055 00000D49 E941F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7056                                  errtn2:
  7057                                  	;error	error_invalid_function	; NLSFUNC not existent
  7058                                  
  7059                                  	;mov	al,1
  7060 00000D4C B001                    	mov	al,error_invalid_function 
  7061 00000D4E EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7062                                  ;errtn3:
  7063                                  ;	jmp	SYS_RET_ERR
  7064                                  
  7065                                  ;EndProc $INTERNATIONAL
  7066                                  
  7067                                  ; 19/07/2018
  7068                                  
  7069                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7070                                  
  7071                                  ;----------------------------------------------------------------------------
  7072                                  ;
  7073                                  ; Procedure Name : $GetExtCntry
  7074                                  ;
  7075                                  ; Inputs:
  7076                                  ;	if AL >= 20H
  7077                                  ;	  AL= 20H    capitalize single char, DL= char
  7078                                  ;	      21H    capitalize string, CX= string length
  7079                                  ;	      22H    capitalize ASCIIZ string
  7080                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7081                                  ;	      80H bit 0 = use normal upper case table
  7082                                  ;		      1 = use file upper case table
  7083                                  ;	   DS:DX points to string
  7084                                  ;
  7085                                  ;	else
  7086                                  ;
  7087                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7088                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7089                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7090                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7091                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7092                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7093                                  ;	INT	21
  7094                                  ; Function:
  7095                                  ;	give users extended country dependent information
  7096                                  ;	or capitalize chars
  7097                                  ; Outputs:
  7098                                  ;	  No Carry:
  7099                                  ;	     extended country info is succesfully returned
  7100                                  ;	  Carry:
  7101                                  ;	     Register AX has the error code.
  7102                                  ;	     AX=0, NO	 for YES/NO CHECK
  7103                                  ;		1, YES
  7104                                  ;----------------------------------------------------------------------------
  7105                                  
  7106                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7107                                  
  7108                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7109                                  
  7110                                  	; MSDOS 6.0
  7111                                  _$GetExtCntry:
  7112 00000D50 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7113 00000D52 726B                    	JB	short notcap
  7114                                  capcap: 				;
  7115 00000D54 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7116 00000D56 7505                    	JNZ	short fileupper		; file upper case
  7117                                  
  7118                                  ;hkn; UCASE_TAB in DOSDATA
  7119 00000D58 BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7120 00000D5B EB05                    	JMP	SHORT capit
  7121                                  
  7122                                  fileupper:
  7123                                  	; 16/01/2024 (MSDOS 3.3-6.22 MSDOS.SYS has a bug here)
  7124                                  	; (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7125                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7126                                  	; AL >= 80h
  7127 00000D5D 247F                    	and	al,7Fh
  7128                                  
  7129                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7130 00000D5F BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7131                                  capit:					;
  7132 00000D62 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7133 00000D64 750D                    	JNZ	short chkyes		; no
  7134 00000D66 88D0                    	MOV	AL,DL			; set up AL
  7135 00000D68 E8FE43                  	call	GETLET3 		; upper case it
  7136 00000D6B E85CF7                  	call	Get_User_Stack		; get user stack
  7137                                  	;mov	[si+6],al
  7138 00000D6E 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7139 00000D71 EBC7                    	JMP	SHORT nono		; done
  7140                                  chkyes: 				;
  7141 00000D73 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7142 00000D75 7522                    	JNZ	short capstring		; no
  7143                                  
  7144 00000D77 31C0                    	XOR	AX,AX			; presume NO
  7145                                  		      
  7146                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7147                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7148                                  
  7149                                  	; 06/08/2018 - Retro DOS v3.0
  7150                                  	; 13/05/2019 - Retro DOS v4.0
  7151                                  	;cmp	dl,'Y'
  7152 00000D79 2E3A16[690A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7153 00000D7E 7416                    	JZ	short yesyes		; yes
  7154                                  	;cmp	dl,'y'
  7155 00000D80 2E3A16[6B0A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7156 00000D85 740F                    	JZ	short yesyes		; yes
  7157                                  	;cmp	dl,'N'
  7158 00000D87 2E3A16[6A0A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7159 00000D8C 74AC                    	JZ	short nono		; no
  7160                                  	;cmp	dl,'n'
  7161 00000D8E 2E3A16[6C0A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7162 00000D93 74A5                    	JZ	short nono		; no
  7163                                  ;dbcs_char:				;
  7164 00000D95 40                      	INC	AX			; not YES or NO
  7165                                  yesyes: 				;
  7166 00000D96 40                      	INC	AX			; return 1
  7167                                  	; 15/12/2022
  7168                                  ;nono:	
  7169 00000D97 EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7170                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7171                                  	;jmp	SYS_RET_OK		; done
  7172                                  
  7173                                  capstring:				;
  7174 00000D99 89D6                    	MOV	SI,DX			; si=dx
  7175 00000D9B 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7176 00000D9D 750F                    	JNZ	short capascii		; no
  7177 00000D9F 09C9                    	OR	CX,CX			; check count 0
  7178 00000DA1 7497                    	JZ	short nono		; yes finished
  7179                                  concap: 				;
  7180 00000DA3 AC                      	LODSB				; get char
  7181 00000DA4 E8C243                  	call	GETLET3 		; upper case it
  7182 00000DA7 8844FF                  	MOV	byte [SI-1],AL		; store back
  7183                                  ;next99: 				;
  7184 00000DAA E2F7                    	LOOP	concap			; continue
  7185 00000DAC EB8C                    	JMP	short nono		; done
  7186                                  capascii:				;
  7187 00000DAE 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7188 00000DB0 7545                    	JNZ	short capinval		; no
  7189                                  concap2:				;
  7190 00000DB2 AC                      	LODSB				; get char
  7191 00000DB3 08C0                    	or	al,al			; end of string ?
  7192 00000DB5 7483                    	JZ	short nono		; yes
  7193 00000DB7 E8AF43                  	call	GETLET3 		; upper case it
  7194 00000DBA 8844FF                  	MOV	[SI-1],AL		; store back
  7195 00000DBD EBF3                    	JMP	short concap2 		; continue
  7196                                  
  7197                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7198                                  
  7199                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7200                                  ; _$GetExtCntry:
  7201                                  
  7202                                  notcap:
  7203 00000DBF 83F905                  	CMP	CX,5			; minimum size is 5
  7204 00000DC2 7279                    	jb	short sizeerror
  7205                                  
  7206                                  GEC_CONT:
  7207                                  ;hkn; SS is DOSDATA
  7208                                  	;context DS
  7209                                  
  7210 00000DC4 16                      	push	ss
  7211                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7212 00000DC5 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7213                                  	
  7214                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7215 00000DC6 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7216                                  
  7217 00000DC9 83FAFF                  	CMP	DX,-1			; active country ?
  7218 00000DCC 7503                    	JNZ	short GETCDPG 		; no
  7219                                  
  7220                                  ;hkn; use DS override to accesss country_cdpg fields
  7221                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7222                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7223 00000DCE 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7224                                  					; get active country id;smr;use DS
  7225                                  GETCDPG:
  7226 00000DD1 83FBFF                  	CMP	BX,-1			; active code page?
  7227 00000DD4 7503                    	JNZ	short CHKAGAIN		; no, check again
  7228                                  
  7229                                  ;hkn; use DS override to accesss country_cdpg fields
  7230                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7231                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7232 00000DD6 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7233                                  					; get active code page id;smr;Use DS
  7234                                  CHKAGAIN:
  7235                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7236 00000DD9 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7237                                  					; same as active country id?;smr;use DS
  7238 00000DDC 7552                    	JNZ	short CHKNLS		; no
  7239                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7240 00000DDE 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7241                                  					; same as active code pg id?;smr;use DS
  7242 00000DE1 754D                    	JNZ	short CHKNLS		; no
  7243                                  CHKTYPE:
  7244                                  	;mov	bx,[si+48h]
  7245 00000DE3 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7246                                  					; bx = sys code page id;smr;use DS
  7247 00000DE6 51                      	PUSH	CX			; save cx
  7248                                  	;mov	cx,[si+4Ah]
  7249 00000DE7 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7250                                  	;mov	si,COUNTRY_CDPG+76
  7251 00000DEA BE[7612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7252                                  NXTENTRY:
  7253 00000DED 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7254 00000DEF 740B                    	JZ	short FOUNDIT
  7255 00000DF1 83C605                  	ADD	SI,5			; next entry
  7256 00000DF4 E2F7                    	LOOP	NXTENTRY
  7257 00000DF6 59                      	POP	CX
  7258                                  capinval:
  7259                                  	;error	error_invalid_function	; info type not found
  7260                                  	;mov	al,1
  7261 00000DF7 B001                    	mov	al,error_invalid_function
  7262                                  ;SYS_RET_ERR_jmp:
  7263                                  	;jmp	SYS_RET_ERR
  7264                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7265                                  SYS_RET_ERR_jmp:
  7266 00000DF9 E991F8                  	jmp	SYS_RET_ERR	
  7267                                  
  7268                                  FOUNDIT:
  7269 00000DFC A4                      	MOVSB				; move info id byte
  7270 00000DFD 59                      	POP	CX			; restore char count
  7271                                  	;cmp	al,1
  7272 00000DFE 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7273 00000E00 7415                    	JZ	short setsize
  7274 00000E02 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7275 00000E05 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7276                                  OK_RETN:
  7277 00000E08 F3A4                    	REP	MOVSB			; copy info
  7278 00000E0A 89C1                    	MOV	CX,AX			; CX = actual length returned
  7279 00000E0C 89D8                    	MOV	AX,BX			; return sys code page in ax
  7280                                  GETDONE:
  7281 00000E0E E8B9F6                  	call	Get_User_Stack		; return actual length to user's CX
  7282                                  	;mov	[si+4],cx 
  7283 00000E11 894C04                  	MOV	[SI+user_env.user_CX],CX
  7284                                  	;jmp	SYS_RET_OK
  7285                                  	; 15/12/2022
  7286                                  	; 25/06/2019
  7287 00000E14 E970F8                  	jmp	SYS_RET_OK_clc
  7288                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7289                                  	; 15/12/2022
  7290                                  ;nono_jmp:
  7291                                  	;jmp	short nono
  7292                                  setsize:
  7293 00000E17 83E903                  	SUB	CX,3			; size after length field
  7294 00000E1A 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7295 00000E1C 7302                    	JAE	short setsize2		; no
  7296 00000E1E 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7297                                  setsize2:
  7298 00000E20 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7299 00000E23 83C702                  	ADD	DI,2			; update index
  7300 00000E26 83C602                  	ADD	SI,2
  7301 00000E29 89C8                    	MOV	AX,CX
  7302 00000E2B 83C003                  	ADD	AX,3			; AX has the actual length
  7303 00000E2E EBD8                    	JMP	short OK_RETN 		; go move it
  7304                                  CHKNLS:
  7305 00000E30 30E4                    	XOR	AH,AH
  7306 00000E32 50                      	PUSH	AX			; save info type
  7307 00000E33 5D                      	POP	BP			; bp = info type
  7308                                  	
  7309                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7310 00000E34 B80014                  	mov     ax,1400h
  7311 00000E37 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7312                                  			; Return: AL = 00h not installed, OK to install
  7313                                  			; 01h not installed, not OK
  7314                                  			; FFh installed
  7315 00000E39 3CFF                    	CMP	AL,0FFH
  7316 00000E3B 7404                    	JZ	short NLSNXT		; in memory
  7317                                  
  7318                                  sizeerror:
  7319                                  	;error	error_invalid_function
  7320                                  	;mov	al,1
  7321 00000E3D B001                    	mov	al,error_invalid_function
  7322                                  	;jmp	SYS_RET_ERR
  7323                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7324                                  sys_ret_err_jmp2:
  7325 00000E3F EBB8                    	jmp	short SYS_RET_ERR_jmp
  7326                                  
  7327                                  NLSNXT: 
  7328                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7329 00000E41 B80214                  	mov     ax,1402h
  7330 00000E44 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7331                                  			; BP = subfunction, BX = code page
  7332                                  			; DX = country code, DS:SI -> internal code page structure
  7333                                  			; ES:DI -> user buffer, CX = size of user buffer
  7334                                  			; Return: AL = status
  7335                                  			; 00h successful
  7336                                  			; else DOS error code
  7337                                  
  7338 00000E46 3C00                    	CMP	AL,0			; success ?
  7339 00000E48 7505                    	JNZ	short NLSERROR
  7340                                  	;mov	ax,[si+48h] ; 13/05/2019 
  7341 00000E4A 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7342                                  			; ax = sys code page id;smr;use ds;
  7343                                  			;BUGBUG;check whether DS is OK after the above calls
  7344 00000E4D EBBF                    	JMP	short GETDONE
  7345                                  seterr:
  7346                                  	; 15/12/2022
  7347                                  NLSERROR:
  7348                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7349                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7350                                  	;jmp	short sys_ret_err_jmp2
  7351                                  	; 15/12/2022
  7352 00000E4F EBA8                    	jmp	short SYS_RET_ERR_jmp
  7353                                  
  7354                                  ;EndProc $GetExtCntry
  7355                                  
  7356                                  ; 13/05/2019 - Retro DOS v4.0
  7357                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7358                                  
  7359                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7360                                  ;----------------------------------------------------------------------------
  7361                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7362                                  ;
  7363                                  ;   System call format:
  7364                                  ;
  7365                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7366                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7367                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7368                                  ;	INT	21
  7369                                  ;
  7370                                  ;	ENTRY	(al) = n
  7371                                  ;		(bx) = code page
  7372                                  ;	EXIT	'C' clear
  7373                                  ;		  global code page is set	(set global code page)
  7374                                  ;		  (BX) = active code page id	(get global code page)
  7375                                  ;		  (DX) = system code page id	(get global code page)
  7376                                  ;		'C' set
  7377                                  ;		  (AX) = error code
  7378                                  
  7379                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7380                                  
  7381                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7382                                  	; DOSCODE:4BC9h
  7383                                  
  7384                                  _$GetSetCdPg:
  7385                                  
  7386                                  ;hkn; SS is DOSDATA
  7387                                  	;context DS
  7388                                  
  7389 00000E51 16                      	push	ss
  7390 00000E52 1F                      	pop	ds
  7391                                  
  7392                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7393 00000E53 BE[2A12]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7394                                  
  7395 00000E56 3C01                    	CMP	AL,1		       ; get global code page
  7396 00000E58 7512                    	JNZ	short setglpg 	       ; set global code page
  7397                                  	
  7398                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7399                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7400 00000E5A 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7401                                  					; get active code page id;smr;use ds
  7402                                  	;mov	dx,[si+48h]
  7403 00000E5D 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7404                                  				  	; get sys code page id;smr;use ds
  7405 00000E60 E867F6                  	call	Get_User_Stack
  7406                                  ;ASSUME DS:NOTHING
  7407                                  	;mov	[si+2],bx
  7408 00000E63 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7409                                  	;mov	[si+6],dx
  7410 00000E66 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7411                                  OK_RETURN:
  7412                                  	; 15/12/2022
  7413                                  	;transfer SYS_RET_OK
  7414 00000E69 E918F8                  	jmp	SYS_RET_OK
  7415                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7416                                  	;jmp	short nono_jmp
  7417                                  
  7418                                  ;hkn; ASSUME DS:DOSGROUP
  7419                                  ;ASSUME	DS:DOSDATA
  7420                                  
  7421                                  setglpg:
  7422 00000E6C 3C02                    	CMP	AL,2
  7423 00000E6E 7531                    	JNZ	short nomem
  7424                                  	
  7425                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7426                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7427 00000E70 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7428                                  	
  7429                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7430 00000E73 B80014                  	mov     ax,1400h
  7431 00000E76 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7432                                  			; Return: AL = 00h not installed, OK to install
  7433                                  			; 01h not installed, not OK
  7434                                  			; FFh installed
  7435 00000E78 3CFF                    	CMP	AL,0FFH
  7436 00000E7A 7525                    	JNZ	short nomem		; not in memory
  7437                                  
  7438                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7439 00000E7C B80114                  	mov     ax,1401h
  7440 00000E7F CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7441                                  			; DS:SI -> internal code page structure
  7442                                  			; BX = new code page, DX = country code???
  7443                                  			; Return: AL = status
  7444                                  			; 00h successful
  7445                                  			; else DOS error code
  7446                                  	;cmp	al,0
  7447 00000E81 08C0                    	or	al,al			; success ?
  7448 00000E83 74E4                    	JZ	short OK_RETURN		; yes
  7449                                  
  7450 00000E85 3C41                    	CMP	AL,65			; set device code page failed
  7451 00000E87 75C6                    	JNZ	short seterr
  7452 00000E89 B84100                  	MOV	AX,65
  7453 00000E8C A3[2403]                	MOV	[EXTERR],AX
  7454                                  	;mov	byte [EXTERR_ACTION],6
  7455                                  	;mov	byte [EXTERR_CLASS],5
  7456                                  	;mov	byte [EXTERR_LOCUS],4
  7457 00000E8F C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7458 00000E94 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7459 00000E99 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7460                                  	;transfer From_GetSet
  7461 00000E9E E9F4F7                  	jmp	From_GetSet
  7462                                  
  7463                                  	; 15/12/2022
  7464                                  ;seterr:
  7465                                  	;;;transfer SYS_RET_ERR
  7466                                  	;;jmp	SYS_RET_ERR
  7467                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7468                                  	;jmp	short NLSERROR
  7469                                  
  7470                                  nomem:
  7471                                  	;error	error_invalid_function ; function not defined
  7472                                  	;mov	al,1
  7473 00000EA1 B001                    	mov	al,error_invalid_function
  7474 00000EA3 EBAA                    	jmp	short seterr
  7475                                  
  7476                                  ;EndProc $GetSetCdPg
  7477                                  
  7478                                  ; 13/05/2019 - Retro DOS v4.0
  7479                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7480                                  
  7481                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7482                                  ;----------------------------------------------------------------------------
  7483                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7484                                  ;
  7485                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7486                                  ;		drive.
  7487                                  ;
  7488                                  ;	This call returns the same info in the same registers (except for the
  7489                                  ;	FAT pointer) as the old FAT pointer calls
  7490                                  ;
  7491                                  ;	ENTRY	DL = Drive number
  7492                                  ;	EXIT	AX = Sectors per allocation unit
  7493                                  ;		   = -1 if bad drive specified
  7494                                  ;		On User Stack
  7495                                  ;		    BX = Number of free allocation units
  7496                                  ;		    DX = Total Number of allocation units on disk
  7497                                  ;		    CX = Sector size
  7498                                  
  7499                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7500                                  
  7501                                  _$GET_DRIVE_FREESPACE:
  7502                                  
  7503                                  ;hkn; SS is DOSDATA
  7504                                  	;context DS
  7505 00000EA5 16                      	push	ss
  7506 00000EA6 1F                      	pop	ds
  7507                                  
  7508 00000EA7 88D0                    	MOV	AL,DL
  7509                                  	;invoke	GetThisDrv		; Get drive
  7510 00000EA9 E8FF5C                  	call	GETTHISDRV
  7511                                  SET_AX_RET:
  7512 00000EAC 7218                    	JC	short BADFDRV
  7513                                  	;invoke	DISK_INFO
  7514 00000EAE E8B81E                  	call	DISK_INFO
  7515 00000EB1 87D3                    	XCHG	DX,BX
  7516                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7517                                  	; 06/01/2024
  7518 00000EB3 7211                    	jc	short BADFDRV
  7519 00000EB5 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7520                                  DoSt:
  7521 00000EB7 E810F6                  	call	Get_User_Stack
  7522                                  ;ASSUME	DS:NOTHING
  7523                                  	;mov	[si+6],dx
  7524                                  	;mov	[si+4],cx
  7525                                  	;mov	[si+2],bx
  7526 00000EBA 895406                  	MOV	[SI+user_env.user_DX],DX
  7527 00000EBD 894C04                  	MOV	[SI+user_env.user_CX],CX
  7528 00000EC0 895C02                  	MOV	[SI+user_env.user_BX],BX
  7529                                  	;MOV	[SI+user_env.user_AX],AX
  7530 00000EC3 8904                    	mov     [si],ax
  7531                                  	;return
  7532 00000EC5 C3                      	retn
  7533                                  
  7534                                  BADFDRV:
  7535                                  	; MSDOS 3.3
  7536                                  	;;mov	al,0Fh
  7537                                  	;mov	al,error_invalid_drive	; Assume error
  7538                                  
  7539                                  	; 13/05/2019 - Retro DOS v4.0
  7540                                  
  7541                                  	; MSDOS 6.0 & MSDOS 3.3
  7542                                  	;invoke	FCB_RET_ERR
  7543 00000EC6 E8DAF7                  	call	FCB_RET_ERR
  7544                                  	
  7545 00000EC9 B8FFFF                  	MOV	AX,-1
  7546 00000ECC EBE9                    	JMP	short DoSt
  7547                                  
  7548                                  ;EndProc $GET_DRIVE_FREESPACE
  7549                                  
  7550                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7551                                  ;----------------------------------------------------------------------------
  7552                                  ;**	$Get_DMA - Get Disk Transfer Address
  7553                                  ;
  7554                                  ;	ENTRY	none
  7555                                  ;	EXIT	ES:BX is current transfer address
  7556                                  ;	USES	all
  7557                                  
  7558                                  _$GET_DMA:
  7559 00000ECE 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7560 00000ED3 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7561 00000ED8 E8EFF5                  	call	Get_User_Stack
  7562                                  	;mov	[si+2],bx
  7563                                  	;mov	[si+10h],cx
  7564 00000EDB 895C02                  	MOV	[SI+user_env.user_BX],BX
  7565 00000EDE 894C10                  	MOV	[SI+user_env.user_ES],CX
  7566 00000EE1 C3                      	retn
  7567                                  
  7568                                  ;**	$Set_DMA - Set Disk Transfer Address
  7569                                  ;----------------------------------------------------------------------------
  7570                                  ;	ENTRY	DS:DX is current transfer address
  7571                                  ;	EXIT	none
  7572                                  ;	USES	all
  7573                                  
  7574                                  _$SET_DMA:
  7575 00000EE2 368916[2C03]            	MOV	[SS:DMAADD],DX
  7576 00000EE7 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7577 00000EEC C3                      	retn
  7578                                  
  7579                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7580                                  ;------------------------------------------------------------------------------
  7581                                  
  7582                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7583                                  ;-----------------------------------------------------
  7584                                  ;	ENTRY	none
  7585                                  ;	EXIT	(AL) = drive number
  7586                                  ;	USES	all
  7587                                  
  7588                                  _$GET_DEFAULT_DRIVE:
  7589 00000EED 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7590 00000EF1 C3                      	retn
  7591                                  
  7592                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7593                                  ;-----------------------------------------------------
  7594                                  ;	ENTRY	(DL) = Drive number for new default drive
  7595                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7596                                  
  7597                                  _$SET_DEFAULT_DRIVE:
  7598 00000EF2 88D0                    	MOV	AL,DL
  7599 00000EF4 FEC0                    	INC	AL			; A=1, B=2...
  7600 00000EF6 E8965C                  	call	GetVisDrv		; see if visible drive
  7601 00000EF9 7204                    	JC	short SETRET		; errors do not set
  7602 00000EFB 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7603                                  
  7604                                  SETRET:
  7605 00000EFF 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7606 00000F03 C3                      	retn
  7607                                  
  7608                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7609                                  ;----------------------------------------------------------------------------
  7610                                  
  7611                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7612                                  ;---------------------------------------------------
  7613                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7614                                  ;	contents of an interrupt vector.
  7615                                  ;
  7616                                  ;	ENTRY	(AL) = interrupt number
  7617                                  ;	EXIT	(ES:BX) = current interrupt vector
  7618                                  
  7619                                  _$GET_INTERRUPT_VECTOR:
  7620 00000F04 E83000                  	CALL	RECSET
  7621 00000F07 26C41F                  	LES	BX,[ES:BX]
  7622 00000F0A E8BDF5                  	call	Get_User_Stack
  7623                                  	;mov	[si+2],bx
  7624                                  	;mov	[si+10h],es
  7625 00000F0D 895C02                  	MOV	[SI+user_env.user_BX],BX
  7626 00000F10 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7627 00000F13 C3                      	retn
  7628                                  
  7629                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7630                                  ;---------------------------------------------------
  7631                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7632                                  ;	contents of an interrupt vector.
  7633                                  ;
  7634                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7635                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7636                                  ;	for explanation.
  7637                                  ;
  7638                                  ;	ENTRY	(AL) = interrupt number
  7639                                  ;		(ds:dx) = desired new vector value
  7640                                  ;	EXIT	none
  7641                                  ;	USES	all
  7642                                  
  7643                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7644                                  ; 13/05/2019 - Retro DOS v4.0
  7645                                  
  7646                                  _$SET_INTERRUPT_VECTOR:
  7647 00000F14 E82000                  	CALL	RECSET
  7648 00000F17 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7649 00000F18 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7650 00000F1B 268C5F02                	MOV	[ES:BX+2],DS
  7651 00000F1F FB                      	STI
  7652                                  					; M004, M068 - Start
  7653                                  	; MSDOS 6.0
  7654 00000F20 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7655                                  					; Q: was the previous call an int 21
  7656                                  					;    exec call
  7657                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7658                                  	;jnz	short siv_1		; Y: go set count
  7659                                  	;retn				; N: return
  7660                                  	; 15/12/2022
  7661 00000F26 740E                    	jz	short siv_2
  7662                                  siv_1:	
  7663 00000F28 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7664 00000F2E 7506                    	jne	short siv_2		 ; N: done 
  7665 00000F30 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos 
  7666                                  					 ; dispatcher to turn A20 Off before 
  7667                                  					 ; returning to user.
  7668                                  siv_2:
  7669                                  	; 07/12/2022
  7670 00000F36 C3                      	retn				; M004, M068 - End
  7671                                  	
  7672                                  RECSET:
  7673 00000F37 31DB                    	XOR	BX,BX
  7674 00000F39 8EC3                    	MOV	ES,BX
  7675 00000F3B 88C3                    	MOV	BL,AL
  7676 00000F3D D1E3                    	SHL	BX,1
  7677 00000F3F D1E3                    	SHL	BX,1
  7678 00000F41 C3                      	retn
  7679                                  
  7680                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7681                                  ;-------------------------------------------------------------------------------------
  7682                                  
  7683                                  ;**	$Char_Oper - Manipulate Switch Character
  7684                                  ;
  7685                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7686                                  ;
  7687                                  ;	ENTRY	AL = function:
  7688                                  ;		    0 - read switch char
  7689                                  ;		    1 - set switch char (char in DL)
  7690                                  ;		    2 - read device availability
  7691                                  ;			Always returns available
  7692                                  ;		    3 - set device availability
  7693                                  ;			No longer supported (NOP)
  7694                                  ;	EXIT	(al) = 0xff iff error
  7695                                  ;		(al) != 0xff if ok
  7696                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7697                                  ;	USES	AL, DL
  7698                                  ;
  7699                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7700                                  ;		The character / is always returned for subfunction 0,
  7701                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7702                                  
  7703                                  ; 13/05/2019 - Retro DOS v4.0
  7704                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7705                                  
  7706                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7707                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7708                                  
  7709                                  _$CHAR_OPER:
  7710                                  	; MSDOS 6.0
  7711 00000F42 08C0                    	or	al,al				; get switch?
  7712 00000F44 B22F                    	mov	dl,'/'				; assume yes
  7713 00000F46 7407                    	jz	short chop_1			; jump if yes
  7714 00000F48 3C02                    	cmp	al,2				; check device availability?
  7715 00000F4A B2FF                    	mov	dl,-1				; assume yes
  7716 00000F4C 7401                    	jz	short chop_1			; jump if yes
  7717 00000F4E C3                      	retn					; otherwise just quit
  7718                                  
  7719                                  ; subfunctions requiring return of value to user come here. DL holds
  7720                                  ; value to return
  7721                                  
  7722                                  chop_1:
  7723 00000F4F E878F5                  	call	Get_User_Stack
  7724 00000F52 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7725 00000F55 C3                      	retn
  7726                                  
  7727                                  	; MSDOS 3.3
  7728                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7729                                  	;push	ss
  7730                                  	;pop	ds
  7731                                  	;cmp	al,1
  7732                                  	;jb	short chop_1
  7733                                  	;jz	short chop_2
  7734                                  	;cmp	al,3
  7735                                  	;jb	short chop_3
  7736                                  	;jz	short chop_5
  7737                                  	;mov	al,0FFh
  7738                                  	;retn
  7739                                  ;chop_1:
  7740                                  	;mov	dl,[chSwitch]
  7741                                  	;jmp	short chop_4
  7742                                  ;chop_2:
  7743                                  	;mov	[chSwitch],dl
  7744                                  	;retn
  7745                                  ;chop_3:
  7746                                  	;mov	dl, FFh
  7747                                  ;chop_4:
  7748                                  	;call	Get_User_Stack
  7749                                  	;mov	[si+6],dx
  7750                                  ;chop_5:
  7751                                  	;retn
  7752                                  
  7753                                  ;**	$GetExtendedError - Return Extended error code
  7754                                  ;----------------------------------------------------------------------------
  7755                                  ;	This function reads up the extended error info from the static
  7756                                  ;	variables where it was stored.
  7757                                  ;
  7758                                  ;	ENTRY	none
  7759                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7760                                  ;		BL = recommended action
  7761                                  ;		BH = class of error
  7762                                  ;		CH = locus of error
  7763                                  ;		ES:DI = may be pointer
  7764                                  ;	USES	ALL
  7765                                  
  7766                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7767                                  
  7768                                  _$GetExtendedError:
  7769 00000F56 16                      	push	ss
  7770 00000F57 1F                      	pop	ds
  7771 00000F58 A1[2403]                	MOV	AX,[EXTERR]
  7772 00000F5B C43E[2803]              	LES	DI,[EXTERRPT]
  7773 00000F5F 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7774 00000F63 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7775 00000F67 E860F5                  	call	Get_User_Stack
  7776                                  	;mov	[si+0Ah],di
  7777 00000F6A 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7778                                  	;mov	[si+10h],es
  7779 00000F6D 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7780                                  	;mov	[si+2],bx
  7781 00000F70 895C02                  	MOV	[SI+user_env.user_BX],BX
  7782                                  	;mov	[si+4],cx
  7783 00000F73 894C04                  	MOV	[SI+user_env.user_CX],CX
  7784                                  jmp_SYS_RET_OK:
  7785                                  	; 15/12/2022
  7786                                  	;jmp	SYS_RET_OK
  7787                                  	; 25/06/2019
  7788 00000F76 E90EF7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7789                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7790                                  ;jmp_SYS_RET_OK:
  7791                                  	;jmp	SYS_RET_OK
  7792                                  
  7793                                  ; --------------------------------------------------------------------------
  7794                                  ; 09/01/2024
  7795                                  %if 0
  7796                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7797                                  	; DOSCODE:4CF3h
  7798                                  ;patch_or_unknown:
  7799                                  ;get_code_page:
  7800                                  	push    si
  7801                                  	mov     si, COUNTRY_CDPG
  7802                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7803                                  	mov     ax, [ss:si+6Ah]
  7804                                  	pop     si
  7805                                  	retn
  7806                                  %endif
  7807                                  ; --------------------------------------------------------------------------
  7808                                  
  7809                                  ; 29/04/2019 - Retro DOS v4.0
  7810                                  
  7811                                  ;BREAK	<ECS_call - Extended Code System support function>
  7812                                  ;---------------------------------------------------------------------------
  7813                                  ; Inputs:
  7814                                  ;	AL = 0	get lead byte table
  7815                                  ;		on return DS:SI has the table location
  7816                                  ;
  7817                                  ;	AL = 1	set / reset interim console flag
  7818                                  ;		DL = flag (00H or 01H)
  7819                                  ;		no return
  7820                                  ;
  7821                                  ;	AL = 2	get interim console flag
  7822                                  ;		on return DL = current flag value
  7823                                  ;
  7824                                  ;	AL = OTHER then error, and returns with:
  7825                                  ;		AX = error_invalid_function
  7826                                  ;
  7827                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7828                                  ;	 SS:SP WILL BE PRESERVED!
  7829                                  ;---------------------------------------------------------------------------
  7830                                  
  7831                                  _$ECS_Call:
  7832 00000F79 08C0                    	or	al,al			; AL = 0 (get table)?
  7833                                  	;jnz	short _okok
  7834                                  	; 15/12/2022
  7835 00000F7B 7403                    	jz	short get_lbt
  7836                                  ;_okok:
  7837 00000F7D E904F7                  	jmp	SYS_RET_OK
  7838                                  get_lbt:
  7839 00000F80 E847F5                  	call	Get_User_Stack		; *
  7840                                  
  7841                                  ;hkn; dbcs_table moved low to dosdata
  7842                                  	;mov	word [si+8],DBCS_TAB+2
  7843 00000F83 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7844                                  
  7845 00000F88 06                      	push	es
  7846                                  	;getdseg <es>			; es = DOSDATA
  7847 00000F89 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7848                                  	;mov	[si+14],es
  7849 00000F8E 8C440E                  	mov	[SI+user_env.user_DS],es
  7850 00000F91 07                      	pop	es
  7851                                  
  7852                                  	; 15/12/2022
  7853 00000F92 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  7854                                  ;_okok:
  7855                                  	; 15/12/2022	
  7856                                  	;;transfer SYS_RET_OK
  7857                                  	;jmp	short jmp_SYS_RET_OK
  7858                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7859                                  	;;jmp	SYS_RET_OK
  7860                                  	;jmp	short jmp_SYS_RET_OK
  7861                                  
  7862                                  ;============================================================================
  7863                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7864                                  ;============================================================================
  7865                                  ; 19/07/2018 - Retro DOS v3.0
  7866                                  ; 15/05/2019 - Retro DOS v4.0
  7867                                  
  7868                                  ; System calls for parsing command lines
  7869                                  ;
  7870                                  ;   $PARSE_FILE_DESCRIPTOR
  7871                                  ;
  7872                                  ;   Modification history:
  7873                                  ;
  7874                                  ;       Created: ARR 30 March 1983
  7875                                  ;               EE PathParse 10 Sept 1983
  7876                                  ;
  7877                                  
  7878                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7879                                  ;---------------------------------------------------------------------------
  7880                                  ; Inputs:
  7881                                  ;       DS:SI Points to a command line
  7882                                  ;       ES:DI Points to an empty FCB
  7883                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7884                                  ;                   = 0 Parse stops if separator encountered
  7885                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7886                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7887                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7888                                  ;                   = 0  "       "      "       - put blanks in FCB
  7889                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7890                                  ;                   = 0  "       "      "        - put blanks in FCB
  7891                                  ; Function:
  7892                                  ;       Parse command line into FCB
  7893                                  ; Returns:
  7894                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7895                                  ;       DS:SI points to first character after filename
  7896                                  ;---------------------------------------------------------------------------
  7897                                  
  7898                                  _$PARSE_FILE_DESCRIPTOR:
  7899 00000F94 E86F40                  	call	MAKEFCB
  7900 00000F97 56                      	PUSH    SI
  7901 00000F98 E82FF5                  	call	Get_User_Stack
  7902                                  	;pop	word [si+8]
  7903 00000F9B 8F4408                  	POP     word [SI+user_env.user_SI]
  7904 00000F9E C3                      	retn
  7905                                  
  7906                                  ;============================================================================
  7907                                  ; MISC.ASM, MSDOS 6.0, 1991
  7908                                  ;============================================================================
  7909                                  ; 19/07/2018 - Retro DOS v3.0
  7910                                  
  7911                                  ; 29/04/2019 - Retro DOS v4.0
  7912                                  
  7913                                  ;ENTRYPOINTSEG	EQU	0CH
  7914                                  ;MAXDIF		EQU	0FFFH
  7915                                  ;SAVEXIT 	EQU	10
  7916                                  ;WRAPOFFSET	EQU	0FEF0h
  7917                                  
  7918                                  ;
  7919                                  ;----------------------------------------------------------------------------
  7920                                  ;
  7921                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7922                                  ;
  7923                                  ;	Return Stuff sort of like old get fat call
  7924                                  ;
  7925                                  ;	ENTRY	none
  7926                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7927                                  ;			GOD help anyone who tries to do ANYTHING except
  7928                                  ;			READ this ONE byte.
  7929                                  ;		DX = Total Number of allocation units on disk
  7930                                  ;		CX = Sector size
  7931                                  ;		AL = Sectors per allocation unit
  7932                                  ;		   = -1 if bad drive specified
  7933                                  ;	USES	all
  7934                                  ;
  7935                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7936                                  ;
  7937                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7938                                  ;
  7939                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7940                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7941                                  ;			GOD help anyone who tries to do ANYTHING except
  7942                                  ;			READ this ONE byte.
  7943                                  ;		DX = Total Number of allocation units on disk
  7944                                  ;		CX = Sector size
  7945                                  ;		AL = Sectors per allocation unit
  7946                                  ;		   = -1 if bad drive specified
  7947                                  ;	USES	all
  7948                                  ;
  7949                                  ;----------------------------------------------------------------------------
  7950                                  ;
  7951                                  
  7952                                  _$SLEAZEFUNC:
  7953                                  	; 15/05/2019 - Retro DOS v4.0
  7954 00000F9F B200                    	MOV	DL,0
  7955                                  _$SLEAZEFUNCDL:
  7956 00000FA1 16                      	push	ss
  7957 00000FA2 1F                      	pop	ds
  7958                                  	
  7959 00000FA3 88D0                    	MOV	AL,DL
  7960 00000FA5 E8035C                  	call	GETTHISDRV		; Get CDS structure
  7961                                  SET_AL_RET:
  7962                                  	; MSDOS 3.3
  7963                                  	;;mov	al, 0Fh
  7964                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7965                                  	
  7966                                  	; MSDOS 6.0 & MSDOS 3.3
  7967 00000FA8 721E                    	JC	short BADSLDRIVE
  7968                                  
  7969 00000FAA E8BC1D                  	call	DISK_INFO
  7970                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  7971 00000FAD 7219                    	jc	short BADSLDRIVE
  7972 00000FAF 8826[9805]              	MOV	[FATBYTE],AH
  7973                                  
  7974                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7975                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7976                                  ; CALL AGAIN
  7977                                  
  7978 00000FB3 BF[9805]                	MOV	DI,FATBYTE
  7979 00000FB6 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7980 00000FB8 E80FF5                  	call	Get_User_Stack
  7981                                  	;mov	[si+4],cx
  7982                                  	;mov	[si+6],bx
  7983                                  	;mov	[si+2],di
  7984 00000FBB 894C04                  	MOV	[SI+user_env.user_CX],CX
  7985 00000FBE 895C06                  	MOV	[SI+user_env.user_DX],BX
  7986 00000FC1 897C02                  	MOV	[SI+user_env.user_BX],DI
  7987                                  	
  7988                                  	;mov	[si+0Eh],ss
  7989 00000FC4 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  7990                                  
  7991 00000FC7 C3                      	retn
  7992                                  
  7993                                  BADSLDRIVE:
  7994 00000FC8 E9D8F6                  	jmp	FCB_RET_ERR
  7995                                  
  7996                                  ;
  7997                                  ;----------------------------------------------------------------------------
  7998                                  ;
  7999                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8000                                  ;
  8001                                  ;	Returns location of DOS status for interrupt routines
  8002                                  ;									   ;
  8003                                  ;	ENTRY	none
  8004                                  ;	EXIT	(es:bx) = flag location
  8005                                  ;	USES	all
  8006                                  ;
  8007                                  ;----------------------------------------------------------------------------
  8008                                  ;
  8009                                  
  8010                                  _$GET_INDOS_FLAG:
  8011 00000FCB E8FCF4                          CALL	Get_User_Stack
  8012                                          ;MOV	WORD [SI+2],INDOS
  8013 00000FCE C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8014                                          ;MOV	[SI+10H],SS
  8015 00000FD3 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8016 00000FD6 C3                      	RETN 
  8017                                  
  8018                                  ;
  8019                                  ;----------------------------------------------------------------------------
  8020                                  ;
  8021                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8022                                  ;
  8023                                  ;	Return a pointer to interesting DOS variables This call is version
  8024                                  ;	dependent and is subject to change without notice in future versions.
  8025                                  ;	Use at risk.
  8026                                  ;
  8027                                  ;	ENTRY	none
  8028                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8029                                  ;	uses	ALL
  8030                                  ;
  8031                                  ;----------------------------------------------------------------------------
  8032                                  ;
  8033                                  
  8034                                  _$GET_IN_VARS:
  8035 00000FD7 E8F0F4                          CALL	Get_User_Stack
  8036                                          ;MOV	WORD [SI+2],SYSINITVAR
  8037                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8038 00000FDA C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8039                                          ;MOV	[SI+10H],SS
  8040 00000FDF 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8041 00000FE2 C3                      	RETN
  8042                                  
  8043                                  ;
  8044                                  ;----------------------------------------------------------------------------
  8045                                  ;
  8046                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8047                                  ;
  8048                                  ;	Return pointer to drive parameter table for default drive
  8049                                  ;
  8050                                  ;	ENTRY	none
  8051                                  ;	EXIT	(ds:bx) = DPB address
  8052                                  ;	USES	all
  8053                                  ;
  8054                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8055                                  ;
  8056                                  ;	Return pointer to a specified drive parameter table
  8057                                  ;
  8058                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8059                                  ;	EXIT	(al) = 0 iff ok
  8060                                  ;		  (ds:bx) = DPB address
  8061                                  ;		(al) = -1 if bad drive
  8062                                  ;	USES	all
  8063                                  ;
  8064                                  ;----------------------------------------------------------------------------
  8065                                  ;
  8066                                  
  8067                                  ; 15/05/2019 - Retro DOS v4.0
  8068                                  
  8069                                  _$GET_DEFAULT_DPB:
  8070 00000FE3 B200                    	MOV	DL,0
  8071                                  _$GET_DPB:
  8072 00000FE5 16                      	push	ss
  8073 00000FE6 1F                      	pop	ds
  8074                                  
  8075 00000FE7 88D0                    	MOV	AL,DL
  8076 00000FE9 E8BF5B                  	call	GETTHISDRV		; Get CDS structure
  8077 00000FEC 7222                    	JC	short ISNODRV 		; no valid drive
  8078 00000FEE C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8079                                  	;;test	word [es:di+43h],8000h
  8080                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8081                                  	;test	byte [es:di+44h],80h
  8082 00000FF2 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8083 00000FF7 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8084 00000FF9 E88C03                  	call	ECritDisk
  8085 00000FFC E8F047                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8086 00000FFF E8A103                  	call	LCritDisk
  8087 00001002 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8088                                  					;   have.
  8089 00001004 E8C3F4                  	call	Get_User_Stack
  8090                                  	;mov	[si+2],bp
  8091 00001007 896C02                  	MOV	[SI+user_env.user_BX],BP
  8092                                  	;mov	[si+0Eh],es
  8093 0000100A 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8094 0000100D 30C0                    	XOR	AL,AL
  8095 0000100F C3                      	retn
  8096                                  ISNODRV:
  8097 00001010 B0FF                    	MOV	AL,-1
  8098 00001012 C3                      	retn
  8099                                  
  8100                                  ;
  8101                                  ;----------------------------------------------------------------------------
  8102                                  ;
  8103                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8104                                  ;
  8105                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8106                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8107                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8108                                  ;
  8109                                  ;	ENTRY	none
  8110                                  ;	EXIT	none
  8111                                  ;	USES	all
  8112                                  ;
  8113                                  ;----------------------------------------------------------------------------
  8114                                  ;
  8115                                  
  8116                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8117                                  	; DOSCODE:4D94h
  8118                                  _$DISK_RESET:
  8119                                  	; 15/05/2019 - Retro DOS v4.0
  8120 00001013 B0FF                    	mov	al,0FFh	; -1
  8121 00001015 16                      	push	ss
  8122 00001016 1F                      	pop	ds
  8123                                  	; 06/11/2022
  8124                                  	;MOV	AL,-1
  8125 00001017 E86E03                  	call	ECritDisk
  8126                                  	; MSDOS 6.0
  8127                                  	;;or	word [DOS34_FLAG],4
  8128                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8129 0000101A 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8130 0000101F E83B4B                  	call	FLUSHBUF
  8131                                  	; MSDOS 6.0
  8132                                  	;and	word [DOS34_FLAG],0FFFBh
  8133                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8134                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8135                                  	; 15/12/2022
  8136 00001022 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8137 00001027 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8138                                  ;
  8139                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate.  This
  8140                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8141                                  ; let's do it.
  8142                                  ;
  8143                                  ; Invalidate 'last-buffer' used
  8144                                  ;
  8145 0000102D BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8146 00001030 891E[2000]              	MOV	[LastBuffer+2],BX
  8147 00001034 891E[1E00]              	MOV	[LastBuffer],BX
  8148                                  
  8149                                  	; MSDOS 3.3 
  8150                                  	; IBMDOS.COM, Offset 1C66h
  8151                                  	;;;;
  8152                                  	;lds	si,[BUFFHEAD]
  8153                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8154                                  				; .buf_flags, AH = 0, reset/clear
  8155                                  ;DRST_1:
  8156                                  	;;mov	[si+4],ax
  8157                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8158                                  	;lds	si,[SI]
  8159                                  	;cmp	si,bx ; -1
  8160                                  	;je	short DRST_2
  8161                                  	;;mov	[si+4],ax
  8162                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8163                                  	;lds	si,[SI]
  8164                                  	;cmp	si,bx
  8165                                  	;jne	short DRST_1
  8166                                  	;;;;
  8167                                  ;DRST_2:
  8168 00001038 E86803                  	call	LCritDisk
  8169 0000103B B8FFFF                  	MOV	AX,-1
  8170                                  	; 07/12/2022
  8171                                  	;mov	ax,0FFFFh
  8172                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8173 0000103E 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8174 0000103F B82011                  	mov     ax,1120h
  8175 00001042 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8176                                  			; DS = DOS CS
  8177                                  			; Return: CF clear (successful)
  8178 00001044 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8179                                  	
  8180 00001045 C3                      	retn
  8181                                  
  8182                                  	; 19/07/2018 - Retro DOS v3.0
  8183                                  
  8184                                  ;
  8185                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8186                                  ;
  8187                                  ;----------------------------------------------------------------------------
  8188                                  ;
  8189                                  ;**	$SetDPB - Create a DPB
  8190                                  ;
  8191                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8192                                  ;
  8193                                  ;	ENTRY	ES:BP Points to DPB
  8194                                  ;		DS:SI Points to BPB
  8195                                  ;	EXIT	DPB setup
  8196                                  ;	USES	ALL but BP, DS, ES
  8197                                  ;
  8198                                  ;----------------------------------------------------------------------------
  8199                                  ;
  8200                                  
  8201                                  ; 10/05/2019 - Retro DOS v4.0
  8202                                  
  8203                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8204                                  
  8205                                  ; MSDOS 6.0
  8206 00001046 0300                    word3:	dw	3			; M008 -- word value for divides
  8207                                  
  8208                                  ; 13/01/2024
  8209                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8210                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8211                                  
  8212                                  ;procedure   $SETDPB,NEAR
  8213                                  
  8214                                  _$SETDPB:
  8215 00001048 89EF                    	MOV	DI,BP
  8216                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8217                                  	; 13/01/2024
  8218 0000104A 47                      	inc	di
  8219 0000104B 47                      	inc	di
  8220 0000104C AD                      	LODSW
  8221 0000104D AB                      	STOSW				; dpb_sector_size
  8222                                  	; MSDOS 6.0
  8223                                  	;cmp	byte [si+3],0
  8224 0000104E 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8225 00001052 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8226                                  	;mov	byte [es:di+4],0
  8227 00001054 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8228                                  	; 13/01/2024
  8229 00001059 89C3                    	mov	bx,ax
  8230 0000105B EB70                    	JMP	short setend			     ; NO		;AN000;
  8231                                  
  8232                                  yesfat: ; 10/08/2018
  8233 0000105D 89C2                    	MOV	DX,AX
  8234 0000105F AC                      	LODSB
  8235                                  	;DEC	AL
  8236                                  	; 17/12/2022
  8237 00001060 48                      	dec	ax
  8238 00001061 AA                      	STOSB				; dpb_cluster_mask
  8239                                  	;INC	AL
  8240 00001062 40                      	inc	ax
  8241 00001063 30E4                    	XOR	AH,AH
  8242                                  LOG2LOOP:
  8243 00001065 A801                    	test	AL,1
  8244 00001067 7506                    	JNZ	short SAVLOG
  8245 00001069 FEC4                    	INC	AH
  8246 0000106B D0E8                    	SHR	AL,1
  8247 0000106D EBF6                    	JMP	SHORT LOG2LOOP
  8248                                  SAVLOG:
  8249 0000106F 88E0                    	MOV	AL,AH
  8250 00001071 AA                      	STOSB				; dpb_cluster_shift
  8251 00001072 88C3                    	MOV	BL,AL
  8252 00001074 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8253 00001075 AC                      	LODSB
  8254 00001076 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8255                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8256                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8257 00001077 88C7                    	MOV	BH,AL
  8258 00001079 AD                      	LODSW
  8259 0000107A AB                      	STOSW				; dpb_root_entries Number of directory entries
  8260 0000107B B105                    	MOV	CL,5
  8261 0000107D D3EA                    	SHR	DX,CL			; Directory entries per sector
  8262 0000107F 48                      	DEC	AX
  8263 00001080 01D0                    	ADD	AX,DX			; Cause Round Up
  8264 00001082 89D1                    	MOV	CX,DX
  8265 00001084 31D2                    	XOR	DX,DX
  8266 00001086 F7F1                    	DIV	CX
  8267 00001088 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8268 0000108A 47                      	INC	DI
  8269 0000108B 47                      	INC	DI			; Skip dpb_first_sector
  8270 0000108C A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8271 0000108D AC                      	LODSB
  8272                                  	;mov	[es:bp+17h],al
  8273 0000108E 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8274 00001092 AD                      	LODSW				; Number of sectors in a FAT
  8275                                  	
  8276                                  	;;;
  8277                                  	;MSDOS 3.3
  8278                                  	;
  8279                                  	;STOSB		; DPB.FAT_SIZE
  8280                                  	;MUL	BH
  8281                                  	
  8282                                  	;MSDOS 6.0
  8283                                  	;
  8284 00001093 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8285 00001094 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8286 00001096 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8287 00001098 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8288                                  	;;;
  8289                                  	
  8290                                  	;add	ax,[es:bp+6]
  8291 0000109A 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8292 0000109E AB                      	STOSW				; dpb_dir_sector
  8293 0000109F 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8294                                  	;mov	[es:bp+0Bh],ax
  8295 000010A1 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8296                                  	
  8297                                  	; MSDOS 6.0
  8298 000010A5 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8299                                  	;;cmp	word [es:bp+0Dh],0
  8300                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8301                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8302                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8303                                  	; 15/12/2022
  8304                                  	; 28/07/2019
  8305 000010A7 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8306 000010AB 09DB                    	or	bx,bx
  8307 000010AD 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8308                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8309                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8310                                  	
  8311                                  
  8312 000010AF 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8313                                  	;mov	bx,[si+8]
  8314 000010B1 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8315                                  	;mov	dx,[si+10]
  8316 000010B4 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8317 000010B7 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8318 000010B9 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8319 000010BC 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8320 000010BE 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8321                                  rott:					;AN000;;F.C. >32mb
  8322 000010C0 F8                      	CLC				;AN000;;F.C. >32mb
  8323 000010C1 D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8324 000010C3 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8325 000010C5 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8326                                  norot:					;AN000;
  8327                                  	; 15/12/2022
  8328                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8329 000010C7 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8330                                  normal_dpb:
  8331                                  	;;sub	ax,[es:bp+0Dh]
  8332                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8333                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8334                                  	; 15/12/2022
  8335                                  	; bx = [es:bp+DSKSIZ]
  8336                                  	;sub	ax,bx ; 28/07/2019
  8337                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8338                                  	; 15/12/2022
  8339 000010C9 29C3                    	sub	bx,ax
  8340                                  	;NEG	AX			; Sectors in data area
  8341                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8342                                  	; 15/12/2022
  8343                                  	; CL = cluster shift
  8344                                  	; BX = number of data sectors 
  8345                                  	;SHR	AX,CL			; Div by sectors/cluster
  8346 000010CB D3EB                    	shr	bx,cl 
  8347                                  setend:
  8348                                  ;	M008 - CAS
  8349                                  ;
  8350                                  	; 15/12/2022
  8351 000010CD 43                      	inc	bx
  8352                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8353                                  ;
  8354                                  ;	There has been a bug in our fatsize calculation for so long
  8355                                  ;	  that we can't correct it now without causing some user to
  8356                                  ;	  experience data loss. There are even cases where allowing
  8357                                  ;	  the number of clusters to exceed the fats is the optimal
  8358                                  ;	  case -- where adding 2 more fat sectors would make the
  8359                                  ;	  data field smaller so that there's nothing to use the extra
  8360                                  ;	  fat sectors for.
  8361                                  ;
  8362                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8363                                  ;	  still report that there was a cluster left when the disk was
  8364                                  ;	  actually full. Very graceful failure for a corrupt system
  8365                                  ;	  configuration. There may be worse cases that were never
  8366                                  ;	  properly traced back to this bug. The problem cases only
  8367                                  ;	  occurred when partition sizes were very near FAT sector
  8368                                  ;	  rounding boundaries, which were rare cases.
  8369                                  ;
  8370                                  ;	Also, it's possible that some third-party partition program might
  8371                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8372                                  ;	  scheme. In this hypothetical case, the number of allocation
  8373                                  ;	  clusters which don't actually have FAT entries to represent
  8374                                  ;	  them might be larger and might create a more catastrophic
  8375                                  ;	  failure. So we'll provide the safeguard of limiting the
  8376                                  ;	  max_cluster to the amount that will fit in the FATs.
  8377                                  ;
  8378                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8379                                  
  8380                                  ;	make sure the number of fat sectors is actually enough to
  8381                                  ;	  hold that many clusters. otherwise, back the number of
  8382                                  ;	  clusters down
  8383                                  
  8384                                  	; 15/12/2022
  8385                                  	; bx = number of clusters
  8386                                  
  8387                                  	; 19/07/2018 - Retro DOS v3.0
  8388                                  	; MSDOS 6.0
  8389                                  	; 15/12/2022
  8390                                  	;mov	bx,ax			; remember calculated # clusters
  8391                                  
  8392                                  	; 01/08/2018 (MSDOS 3.3)
  8393                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8394                                  	;xor	ah,ah 
  8395                                  
  8396                                  	; 10/05/2019 - Retro DOS v4.0
  8397                                  	;mov	ax,[ES:BP+0Fh]
  8398 000010CE 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8399                                  
  8400                                  	;mul	word [es:bp+2]	
  8401 000010D2 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8402 000010D6 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8403 000010DA 720D                    	jb	short setend_fat12
  8404 000010DC D1EA                    	shr	dx,1
  8405                                  
  8406                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8407                                  	; 15/12/2022
  8408                                  ;cs3 7/2/92
  8409 000010DE 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8410                                  					; than enough for the maximum FAT,
  8411                                  					; so go ahead and use the calculated
  8412                                  					; number of clusters.
  8413                                  ;cs3 7/2/92
  8414                                  
  8415 000010E0 D1D8                    	rcr	ax,1			; find number of entries
  8416 000010E2 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8417                                  ;					;  into 12-bit fatland?
  8418 000010E5 7215                    	jb	short setend_faterr	; then go ahead and let the
  8419                                  ;					;  inconsistency pass through
  8420                                  ;					;  rather than lose data by
  8421                                  ;					;  correcting the fat type
  8422 000010E7 EB0E                    	jmp	short setend_fat16
  8423                                  
  8424                                  setend_fat12:
  8425 000010E9 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8426 000010EB 11D2                    	adc	dx,dx
  8427                                  
  8428                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8429                                  ;cs3 7/2/92
  8430                                  	; 15/12/2022
  8431 000010ED 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8432 000010F0 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8433                                  					; here. Check for it and use
  8434                                  					; the calculated size in this case.
  8435                                  ;cs3 7/2/92
  8436                                  
  8437 000010F2 2EF736[4610]            	div	word [cs:word3]
  8438                                  
  8439                                  setend_fat16:
  8440 000010F7 48                      	dec	ax			; limit at 1
  8441 000010F8 39D8                    	cmp	ax,bx			; is fat big enough?
  8442 000010FA 7602                    	jbe	short setend_fat	; use max value that'll fit
  8443                                  
  8444                                  setend_faterr:
  8445 000010FC 89D8                    	mov	ax,bx			; use calculated value
  8446                                  
  8447                                  setend_fat:
  8448                                  
  8449                                  ;	now ax = maximum legal cluster
  8450                                  
  8451                                  ;	end M008
  8452                                  
  8453                                  	;mov	[es:bp+0Dh], ax
  8454 000010FE 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8455                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8456                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8457 00001102 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8458                                  					; Init so first ALLOC starts at
  8459                                  					; begining of FAT
  8460                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8461                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8462 00001108 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8463                                  
  8464 0000110E C3                      	retn
  8465                                  
  8466                                  ;EndProc $SETDPB
  8467                                  
  8468                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8469                                  
  8470                                  ;
  8471                                  ;----------------------------------------------------------------------------
  8472                                  ;
  8473                                  ;**	$Dup_PDB
  8474                                  ;
  8475                                  ; Inputs:   DX is new segment address of process
  8476                                  ;	    SI is end of new allocation block
  8477                                  ;
  8478                                  ;----------------------------------------------------------------------------
  8479                                  ;
  8480                                  
  8481                                  _$DUP_PDB:
  8482                                  
  8483                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8484                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8485                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8486                                  
  8487                                  	; MSDOS 3.3
  8488                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8489                                  	;MOV	DS,[CS:CurrentPDB]
  8490                                  
  8491                                  	; 15/05/2019 - Retro DOS v4.0
  8492                                  	; MSDOS 6.0
  8493 0000110F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8494 00001114 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8495 00001119 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8496                                  
  8497 0000111D 56                      	PUSH	SI
  8498 0000111E EB0A                    	JMP	SHORT CreateCopy
  8499                                  
  8500                                  ;
  8501                                  ;----------------------------------------------------------------------------
  8502                                  ;
  8503                                  ; Inputs:
  8504                                  ;	DX = Segment number of new base
  8505                                  ; Function:
  8506                                  ;	Set up program base and copy term and ^C from int area
  8507                                  ; Returns:
  8508                                  ;	None
  8509                                  ; Called at DOS init
  8510                                  ;
  8511                                  ;----------------------------------------------------------------------------
  8512                                  ;
  8513                                  
  8514                                  ; 15/05/2019 - Retro DOS v4.0
  8515                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8516                                  
  8517                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8518                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8519                                  
  8520                                  _$CREATE_PROCESS_DATA_BLOCK:
  8521                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8522 00001120 E8A7F3                  	CALL	Get_User_Stack
  8523                                  	;mov	ds,[si+14h]
  8524 00001123 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8525                                  	;push	word [2]
  8526 00001126 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8527                                  CreateCopy:
  8528 0000112A 8EC2                    	MOV	ES,DX
  8529                                  
  8530 0000112C 31F6                    	XOR	SI,SI			; copy entire PDB
  8531 0000112E 89F7                    	MOV	DI,SI
  8532 00001130 B98000                  	MOV	CX,128
  8533 00001133 F3A5                    	REP	MOVSW
  8534                                  
  8535                                  ; DOS 3.3 7/9/86
  8536                                  	;mov	cx,20
  8537                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8538                                  	; 15/12/2022
  8539 00001135 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8540                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8541                                  	;mov	cx,FILPERPROC
  8542                                  
  8543                                  	;mov	di,18h
  8544 00001137 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8545                                  	;;PUSH	DS ; * 15/05/2019
  8546                                  	;;lds	si,[34h]
  8547                                  	;LDS	SI,[PDB.JFN_Pointer]
  8548                                  	;REP	MOVSB
  8549                                  	;;POP	DS ; * 15/05/2019
  8550                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8551                                  	; 05/12/2022
  8552                                  	; (push ds then pop ds is not needed here!)
  8553                                  	;push	ds
  8554                                  	;lds	si,[34h]
  8555 0000113A C5363400                	lds	si,[PDB.JFN_Pointer]
  8556 0000113E F3A4                    	rep	movsb
  8557                                  	;pop	ds
  8558                                  
  8559                                  ; DOS 3.3 7/9/86
  8560                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8561                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8562                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8563                                  
  8564 00001140 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8565                                  
  8566                                  	;;test	byte [cs:CreatePDB],0FFh
  8567                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8568                                  	; 17/12/2022
  8569 00001145 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8570                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8571 00001149 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8572                                  
  8573                                  ; Here we set up for a new process...
  8574                                  
  8575                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8576                                  	;POP	DS
  8577                                  
  8578                                  	; MSDOS 6.0
  8579                                  	;;getdseg <ds>			; ds -> dosdata
  8580                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8581                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8582                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8583                                  	; 15/12/2022
  8584                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8585                                  
  8586 0000114B 31DB                    	XOR	BX,BX			; dup all jfns
  8587                                  	;mov	cx,20
  8588                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8589                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8590                                  	; 15/12/2022
  8591 0000114D B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8592                                  
  8593                                  Create_dup_jfn:
  8594 0000114F 06                      	PUSH	ES ;**			; save new PDB
  8595 00001150 E83456                  	call	SFFromHandle		; get sf pointer
  8596 00001153 B0FF                    	MOV	AL,-1			; unassigned JFN
  8597 00001155 7224                    	JC	short CreateStash	; file was not really open
  8598                                  	;;test	word [es:di+5],1000h
  8599                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8600                                  	; 15/05/2019
  8601                                  	;test	byte [es:di+6],10h
  8602 00001157 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8603 0000115C 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8604                                  
  8605                                  ; We do not inherit network file handles.
  8606                                  
  8607                                  	;mov	ah,[es:di+2]
  8608 0000115E 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8609                                  	;and	ah,0F0h
  8610 00001162 80E4F0                  	AND	AH,SHARING_MASK
  8611                                  	;cmp	ah,70h
  8612 00001165 80FC70                  	CMP	AH,SHARING_NET_FCB
  8613 00001168 7411                    	jz	short CreateStash
  8614                                  
  8615                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8616                                  ; duplication operation.
  8617                                  
  8618 0000116A 893E[9E05]              	MOV	[THISSFT],DI
  8619 0000116E 8C06[A005]              	MOV	[THISSFT+2],ES
  8620 00001172 E84919                  	call	DOS_DUP 		; signal duplication
  8621                                  
  8622                                  ; get the old sfn for copy
  8623                                  
  8624 00001175 E8F255                  	call	pJFNFromHandle		; ES:DI is jfn
  8625 00001178 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8626                                  
  8627                                  ; Take AL (old sfn or -1) and stash it into the new position
  8628                                  
  8629                                  CreateStash:
  8630 0000117B 07                      	POP	ES ;**
  8631                                  	;mov	[es:bx+18h],al
  8632 0000117C 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8633 00001180 43                      	INC	BX			; next jfn...
  8634 00001181 E2CC                    	LOOP	Create_dup_jfn
  8635                                  
  8636 00001183 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8637                                  	; 06/11/2022
  8638                                  	;mov	[es:16h],bx
  8639 00001187 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8640 0000118C 8C06[3003]              	MOV	[CurrentPDB],ES
  8641                                  	;MOV	DS,BX ; 28/07/2019
  8642                                  	; 07/12/2022
  8643                                  	;mov	ds,[cs:DosDSeg]
  8644                                  	; 15/12/2022
  8645                                  	; ds = [cs:DosDSeg]
  8646 00001190 C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8647                                  	;mov	ds,bx
  8648                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8649                                  	; 15/12/2022
  8650                                  	;mov	ds,bx
  8651                                  
  8652                                  ; end of new process create
  8653                                  
  8654                                  Create_PDB_cont:
  8655                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8656                                  
  8657                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8658                                  
  8659                                  	;; 28/07/2019
  8660                                  	;;push	ds
  8661                                  	;;mov	ds,[cs:DosDSeg]
  8662                                  	;mov	byte [CreatePDB],0
  8663                                  	;;pop	ds
  8664                                  
  8665                                  ; 05/12/2022
  8666                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8667                                  ;	; (push-pop ds is nonsense here! 
  8668                                  ;	;  but i am using same code with original MSDOS.SYS
  8669                                  ;	;  for address compatibility.)
  8670                                  ;	push	ds
  8671                                  ;	; ds = [cs:DosDSeg] !
  8672                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8673                                  ;	mov	byte [CreatePDB],0
  8674                                  ;	pop	ds
  8675                                  
  8676 00001195 58                      	POP	AX ;*
  8677                                  
  8678                                  	;entry	SETMEM
  8679                                  
  8680                                  	; 17/12/2022
  8681                                  	; cx = 0
  8682                                  
  8683                                  ;---------------------------------------------------------------------------
  8684                                  ; Inputs:
  8685                                  ;	AX = Size of memory in paragraphs
  8686                                  ;	DX = Segment
  8687                                  ; Function:
  8688                                  ;	Completely prepares a program base at the
  8689                                  ;	specified segment.
  8690                                  ; Called at DOS init
  8691                                  ; Outputs:
  8692                                  ;	DS = DX
  8693                                  ;	ES = DX
  8694                                  ;	[0] has INT int_abort
  8695                                  ;	[2] = First unavailable segment
  8696                                  ;	[5] to [9] form a long call to the entry point
  8697                                  ;	[10] to [13] have exit address (from int_terminate)
  8698                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8699                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8700                                  ; DX,BP unchanged. All other registers destroyed.
  8701                                  ;---------------------------------------------------------------------------
  8702                                  
  8703                                  SETMEM:
  8704                                  	;XOR	CX,CX
  8705                                  	; 17/12/2022
  8706                                  	; cx = 0
  8707 00001196 8ED9                    	MOV	DS,CX
  8708 00001198 8EC2                    	MOV	ES,DX
  8709                                  	;mov	si,88h
  8710 0000119A BE8800                  	MOV	SI,addr_int_terminate
  8711                                  	;mov	di,10 ; 0Ah
  8712 0000119D BF0A00                  	MOV	DI,SAVEXIT
  8713                                  	;MOV	CX,6
  8714                                  	; 15/12/2022
  8715 000011A0 B106                    	mov	cl,6
  8716 000011A2 F3A5                    	REP	MOVSW
  8717 000011A4 26A30200                	MOV	[ES:2],AX
  8718 000011A8 29D0                    	SUB	AX,DX
  8719 000011AA 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8720 000011AD 7603                    	JBE	short HAVDIF
  8721 000011AF B8FF0F                  	MOV	AX,MAXDIF
  8722                                  HAVDIF:
  8723 000011B2 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8724 000011B5 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8725 000011B8 29C3                    	SUB	BX,AX
  8726 000011BA B104                    	MOV	CL,4
  8727 000011BC D3E0                    	SHL	AX,CL
  8728 000011BE 8EDA                    	MOV	DS,DX
  8729                                  
  8730                                  	; (MSDOS 6.0 note)
  8731                                  	;
  8732                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8733                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8734                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8735                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8736                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8737                                  	; making this equvalence valid for this particular case. If however
  8738                                  	; there is less than 64K remaining the address in BX:AX will not 
  8739                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8740                                  	; into the PSP.
  8741                                  	;
  8742                                  	; Therefore for the case where there is less than 64K remaining in 
  8743                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8744                                  	; requirements will not work. Call 5, however will continue to work
  8745                                  	; for all cases.
  8746                                  	;
  8747                                  
  8748                                  	;mov	[6],ax
  8749                                  	;mov	[8],bx
  8750                                  
  8751 000011C0 A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8752 000011C3 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8753                                  
  8754                                  	; 06/05/2019 - Retro DOS v4.0
  8755 000011C7 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8756                                  					;    memory left
  8757 000011CA 740C                    	je	short addr_ok		; Y: the above calculated address is
  8758                                  					;    OK
  8759                                  					; N: 
  8760                                  
  8761 000011CC C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8762 000011D2 C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8763                                  addr_ok:
  8764                                  	;mov	word [0],20CDh
  8765 000011D8 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8766                                  	;mov	byte [5],9Ah
  8767 000011DE C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8768                                  	;mov	word [50h],21CDh
  8769 000011E3 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8770                                  	;mov	byte [52h],0CBh
  8771 000011E9 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8772                                  	;mov	word [34h],18h
  8773 000011EE C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8774                                  	;mov	word [36h],ds
  8775 000011F4 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8776                                  	;mov	word [32h],20
  8777 000011F8 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8778                                  ;
  8779                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8780                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8781                                  ; particular SFT.  We perform this by requiring that the server link together
  8782                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8783                                  ; initialize this pointer.
  8784                                  ;
  8785                                   	;mov	word [38h],-1
  8786 000011FE C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8787                                  	;mov	word [3Ah],-1
  8788 00001204 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8789                                  
  8790                                  	; 06/05/2019
  8791                                  	; Set the real version number in the PSP - 5.00
  8792                                  
  8793                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8794                                  	; 07/12/2022
  8795 0000120A 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8796                                  
  8797 00001211 C3                      	retn
  8798                                  
  8799                                  ; 29/04/2019 - Retro DOS v4.0
  8800                                  
  8801                                  ;BREAK <$GSetMediaID -- get set media ID>
  8802                                  
  8803                                  ;---------------------------------------------------------------------------
  8804                                  ; Inputs:
  8805                                  ;	BL= drive number as defined in IOCTL
  8806                                  ;	AL= 0 get media ID
  8807                                  ;	    1 set media ID
  8808                                  ;	DS:DX= buffer containing information
  8809                                  ;		DW  0  info level (set on input)
  8810                                  ;		DD  ?  serial #
  8811                                  ;		DB  11 dup(?)  volume id
  8812                                  ;		DB   8 dup(?)  file system type
  8813                                  ; Function:
  8814                                  ;	Get or set media ID
  8815                                  ; Returns:
  8816                                  ;	carry clear, DS:DX is filled
  8817                                  ;	carry set, error
  8818                                  ;---------------------------------------------------------------------------
  8819                                  
  8820                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8821                                  _$GSetMediaID:
  8822                                  	; RAWIO - GET_MEDIA_ID
  8823 00001212 B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8824 00001215 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8825 00001217 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8826                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8827                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8828                                  	; 15/12/2022
  8829 00001219 FEC8                    	dec	al
  8830 0000121B 7507                    	jnz	short errorfunc ; al > 1
  8831                                  	; RAWIO - SET_MEDIA_ID
  8832                                  	;mov	cx,0846h	      ;AN001;MS.;
  8833                                  	; 15/12/2022
  8834 0000121D B146                    	mov	cl,46h	; cx = 0846h 
  8835                                  doioctl:			      ;AN000;
  8836 0000121F B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8837                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8838                                  	;call	_$IOCTL
  8839                                  	;retn			      ;AN000;MS.;
  8840                                  	; 15/12/2022
  8841 00001221 E9D610                  	jmp	_$IOCTL
  8842                                  errorfunc:			      ;AN000;
  8843                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  8844                                  	;mov	al,1
  8845 00001224 B001                    	mov	al,error_invalid_function
  8846 00001226 E964F4                  	jmp	SYS_RET_ERR
  8847                                  
  8848                                  ; 16/05/2019 - Retro DOS v4.0
  8849                                  
  8850                                  ;============================================================================
  8851                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8852                                  ;============================================================================
  8853                                  ; 20/07/2018 - Retro DOS v3.0
  8854                                  ; 29/04/2019 - Retro DOS v4.0
  8855                                  
  8856                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8857                                  ;----------------------------------------------------------------------------
  8858                                  ;
  8859                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8860                                  ;	     Strings of different lengths don't match.
  8861                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  8862                                  ;   Outputs: Z if strings same, NZ if different
  8863                                  ;   Registers modified: NONE
  8864                                  ;----------------------------------------------------------------------------
  8865                                  
  8866                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8867                                  StrCmp:
  8868 00001229 56                      	push	si
  8869 0000122A 57                      	push	di
  8870 0000122B 50                      	push	ax
  8871                                  Cmplp:
  8872 0000122C AC                      	LODSB
  8873 0000122D E8143F                  	call	UCase			; convert to upper case
  8874 00001230 E8663F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8875 00001233 88C4                    	MOV	AH,AL
  8876 00001235 268A05                  	MOV	AL,[ES:DI]
  8877 00001238 47                      	INC	DI
  8878 00001239 E8083F                  	call	UCase			; convert to upper case
  8879 0000123C E85A3F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8880 0000123F 38C4                    	CMP	AH,AL
  8881 00001241 7504                    	JNZ	short PopRet		; Strings dif
  8882                                  
  8883 00001243 08C0                    	OR	AL,AL
  8884 00001245 75E5                    	JNZ	short Cmplp		; More string
  8885                                  PopRet:
  8886 00001247 58                      	pop	ax
  8887 00001248 5F                      	pop	di
  8888 00001249 5E                      	pop	si
  8889 0000124A C3                      	retn
  8890                                  
  8891                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8892                                  ;----------------------------------------------------------------------------
  8893                                  ;
  8894                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8895                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  8896                                  ;	characters.
  8897                                  ;
  8898                                  ;   Inputs:	DS:SI - pointer to source string
  8899                                  ;		ES:DI - pointer to destination string
  8900                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8901                                  ;		DS:SI point byte after nul byte at end of source string
  8902                                  ;   Registers modified: SI,DI
  8903                                  ;----------------------------------------------------------------------------
  8904                                  
  8905                                  StrCpy:
  8906 0000124B 50                      	push	ax
  8907                                  CPYLoop:
  8908 0000124C AC                      	LODSB
  8909 0000124D E8F43E                  	call	UCase			; convert to upper case
  8910 00001250 E8463F                  	call	PATHCHRCMP		; convert / to \ ;
  8911 00001253 AA                      	STOSB
  8912                                  
  8913 00001254 08C0                    	OR	AL,AL
  8914 00001256 75F4                    	JNZ	short CPYLoop
  8915 00001258 58                      	pop	ax
  8916 00001259 C3                      	retn
  8917                                  
  8918                                  ;----------------------------------------------------------------------------
  8919                                  ; Procedure Name : FStrCpy
  8920                                  ;----------------------------------------------------------------------------
  8921                                  
  8922                                  FStrCpy:
  8923 0000125A 50                      	push	ax
  8924                                  FCPYLoop:
  8925 0000125B AC                      	LODSB
  8926 0000125C AA                      	STOSB
  8927 0000125D 08C0                    	OR	AL,AL
  8928 0000125F 75FA                    	JNZ	short FCPYLoop
  8929 00001261 58                      	pop	ax
  8930 00001262 C3                      	retn
  8931                                  
  8932                                  ; 20/07/2018 - Retro DOS v3.0
  8933                                  ;----------------------------------------------------------------------------
  8934                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8935                                  ;----------------------------------------------------------------------------
  8936                                  ;
  8937                                  ;UCase:	
  8938                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8939                                  ;	retn
  8940                                  
  8941                                  ;Break <StrLen - compute length of string ES:DI>
  8942                                  ;----------------------------------------------------------------------------
  8943                                  ;**	StrLen - Compute Length of String
  8944                                  ;
  8945                                  ;	StrLen computes the length of a string, including the trailing 00
  8946                                  ;
  8947                                  ;	ENTRY	(es:di) = address of string
  8948                                  ;	EXIT	(cx) = size of string
  8949                                  ;	USES	cx, flags
  8950                                  ;----------------------------------------------------------------------------
  8951                                  
  8952                                  StrLen:
  8953 00001263 57                      	push	di
  8954 00001264 50                      	push	ax
  8955                                  	;MOV	CX,-1
  8956 00001265 B9FFFF                  	mov	cx,65535
  8957 00001268 30C0                    	XOR	AL,AL
  8958 0000126A F2AE                    	REPNE	SCASB
  8959 0000126C F7D1                    	NOT	CX
  8960 0000126E 58                      	pop	ax
  8961 0000126F 5F                      	pop	di
  8962 00001270 C3                      	retn
  8963                                  
  8964                                  ;----------------------------------------------------------------------------
  8965                                  ;**	DStrLen - Compute Length of String
  8966                                  ;
  8967                                  ;	ENTRY	(ds:si) = address of string
  8968                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8969                                  ;	USES	cx, flags
  8970                                  ;----------------------------------------------------------------------------
  8971                                  
  8972                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8973 00001271 E80300                  	CALL	XCHGP
  8974 00001274 E8ECFF                  	CALL	StrLen
  8975                                  	;CALL	XCHGP
  8976                                  	;retn
  8977                                  	; 18/12/2022
  8978                                  	;jmp	short XCHGP
  8979                                  
  8980                                  ;----------------------------------------------------------------------------
  8981                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8982                                  ;
  8983                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8984                                  ;
  8985                                  ;	ENTRY	none
  8986                                  ;	EXIT	pairs exchanged
  8987                                  ;	USES	SI, DI, DS, ES
  8988                                  ;----------------------------------------------------------------------------
  8989                                  
  8990                                  XCHGP:
  8991 00001277 1E                      	push	ds
  8992 00001278 06                      	push	es
  8993 00001279 1F                      	pop	ds
  8994 0000127A 07                      	pop	es
  8995 0000127B 87F7                    	XCHG	SI,DI
  8996                                  xchgp_retn:
  8997 0000127D C3                      	retn
  8998                                  
  8999                                  ;Break	<Idle - wait for a specified amount of time>
  9000                                  ;----------------------------------------------------------------------------
  9001                                  ;
  9002                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9003                                  ;   	   we spin until RetryLoop is exhausted.
  9004                                  ;
  9005                                  ;   Inputs:	RetryLoop is the number of times we spin
  9006                                  ;   Outputs:	Wait
  9007                                  ;   Registers modified: none
  9008                                  ;----------------------------------------------------------------------------
  9009                                  
  9010                                  Idle:
  9011                                  	;test	byte [SS:FSHARING],0FFh
  9012 0000127E 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9013                                  	;retnz
  9014 00001284 75F7                    	jnz	short xchgp_retn
  9015                                  	;SAVE	<CX>
  9016 00001286 51                      	push	cx
  9017 00001287 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9018 0000128C E308                    	JCXZ	Idle3
  9019                                  Idle1:	
  9020 0000128E 51                      	PUSH	CX
  9021 0000128F 31C9                    	XOR	CX,CX
  9022                                  Idle2:	
  9023 00001291 E2FE                    	LOOP	Idle2
  9024 00001293 59                      	POP	CX
  9025 00001294 E2F8                    	LOOP	Idle1
  9026                                  Idle3:	
  9027                                  	;RESTORE <CX>
  9028 00001296 59                      	pop	cx
  9029 00001297 C3                      	retn
  9030                                  
  9031                                  ;Break	<TableDispatch - dispatch to a table>
  9032                                  ;----------------------------------------------------------------------------
  9033                                  ;
  9034                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9035                                  ;   routine. Preserve all input registers to the routine.
  9036                                  ;
  9037                                  ;   Inputs:	Push	return address
  9038                                  ;		Push	Table address
  9039                                  ;		Push	index (byte)
  9040                                  ;   Outputs:	appropriate routine gets jumped to.
  9041                                  ;		return indicates invalid index
  9042                                  ;   Registers modified: none.
  9043                                  ;----------------------------------------------------------------------------
  9044                                  
  9045                                  struc TFrame	 ; TableFrame
  9046 00000000 ????                    .OldBP:	 resw 1  ; 0
  9047 00000002 ????                    .OldRet: resw 1  ; 2
  9048 00000004 ??                      .Index:	 resb 1  ; 4
  9049 00000005 ??                      .Pad:	 resb 1  ; 5  
  9050 00000006 ????                    .Tab:	 resw 1  ; 6
  9051 00000008 ????                    .NewRet: resw 1  ; 8
  9052                                  endstruc
  9053                                  
  9054                                  TableDispatch:
  9055 00001298 55                      	PUSH	BP
  9056 00001299 89E5                    	MOV	BP,SP
  9057 0000129B 53                      	PUSH	BX			; save BX
  9058                                  	;mov	bx,[bp+6]
  9059 0000129C 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9060 0000129F 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9061                                  	;cmp	[bp+4],bl
  9062 000012A2 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9063 000012A5 7317                    	JAE	short TableError	; yes
  9064                                  	;mov	bl,[bp+4]
  9065 000012A7 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9066 000012AA 30FF                    	XOR	BH,BH			; convert to word
  9067 000012AC D1E3                    	SHL	BX,1			; convert to word pointer
  9068 000012AE 43                      	INC	BX			; point past first length byte
  9069                                  	; 17/08/2018
  9070                                  	;add	bx,[bp+6]
  9071 000012AF 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9072 000012B2 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9073                                  	;mov	[bp+6],bx
  9074 000012B5 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9075 000012B8 5B                      	POP	BX			; restore BX
  9076 000012B9 5D                      	POP	BP			; restore BP
  9077 000012BA 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9078 000012BD C3                      	retn				; do operation
  9079                                  TableError:
  9080 000012BE 5B                      	POP	BX			; restore BX
  9081 000012BF 5D                      	POP	BP			; restore BP
  9082 000012C0 C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9083                                  
  9084                                  ;Break	<TestNet - determine if a CDS is for the network>
  9085                                  ;----------------------------------------------------------------------------
  9086                                  ;
  9087                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9088                                  ;	network CDS. This will handle NULL cds also.
  9089                                  ;
  9090                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9091                                  ;   Outputs:	ES:DI = ThisCDS
  9092                                  ;		carry Set => network
  9093                                  ;		carry Clear => local
  9094                                  ;   Registers modified: none.
  9095                                  ;----------------------------------------------------------------------------
  9096                                  
  9097                                  TestNet:
  9098                                  	;LES	DI,[CS:THISCDS]
  9099                                  
  9100                                  	; 16/05/2019 - Retro DOS v4.0
  9101 000012C3 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9102 000012C8 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9103 000012CD 83FFFF                  	CMP	DI,-1
  9104 000012D0 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9105                                  	;;test	word [es:di+43h],8000h
  9106                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9107                                  	;test	byte [es:di+44h],80h
  9108 000012D2 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9109 000012D7 7501                    	JNZ	short CMCRet		; jump has carry clear
  9110 000012D9 C3                      	retn				; carry is clear
  9111                                  CMCRet: 
  9112 000012DA F5                      	CMC
  9113 000012DB C3                      	retn
  9114                                  
  9115                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9116                                  ;----------------------------------------------------------------------------
  9117                                  ;
  9118                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9119                                  ;	network file.
  9120                                  ;
  9121                                  ;   Inputs:	ES:DI point to SFT
  9122                                  ;   Outputs:	Zero set if not network sft
  9123                                  ;		zero reset otherwise
  9124                                  ;		Carry CLEAR!!!
  9125                                  ;   Registers modified: none.
  9126                                  ;----------------------------------------------------------------------------
  9127                                  
  9128                                  IsSFTNet:
  9129                                  	;;test	word [es:di+5],8000h
  9130                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9131                                  	; 16/05/2019 
  9132                                  	;test	byte [es:di+6],80h
  9133 000012DC 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9134 000012E1 C3                      	retn
  9135                                  
  9136                                  ;Break	<FastInit - Initialize FastTable entries >
  9137                                  ;----------------------------------------------------------------------------
  9138                                  ;   DOS 4.00   2/9/87
  9139                                  ;   FastInit  - initialize the FASTXXX routine entry
  9140                                  ;		  in the FastTable
  9141                                  ;
  9142                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9143                                  ;		DS:SI = address of FASTXXX routine entry
  9144                                  ;		   SI = -1 for query only
  9145                                  ;   Outputs:	Carry flag clear, if success
  9146                                  ;		Carry flag set,   if failure
  9147                                  ;
  9148                                  ;
  9149                                  ;----------------------------------------------------------------------------
  9150                                  
  9151                                  ;Procedure FastInit,NEAR
  9152                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9153                                  
  9154                                  ;	; MSDOS 3.3
  9155                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9156                                  ;FastInit:
  9157                                  ;	mov	di,FastTable ; FastOpenTable
  9158                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9159                                  ;	mov	bx,cs			; get DOS segment
  9160                                  ;	cmp	ax,bx			; first time installed ?	
  9161                                  ;	je	short ok_install	; yes
  9162                                  ;	stc				; set carry
  9163                                  ;	retn				; (cf=1 means) already installed !
  9164                                  ;
  9165                                  ;ok_install:
  9166                                  ;	mov	bx,FastTable ; FastOpenTable
  9167                                  ;	mov	cx,ds
  9168                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9169                                  ;	mov	[cs:bx+4],cx
  9170                                  ;	mov	[cs:bx+2],si
  9171                                  ;	retn
  9172                                  
  9173                                  ; 16/05/2019 - Retro DOS v4.0
  9174                                  
  9175                                  FastInit:
  9176                                  	; MSDOS 6.0
  9177                                  	;hkn; set up es to dosdataseg.
  9178 000012E2 06                      	push	es
  9179                                  	;getdseg <es>			; es -> dosdata
  9180 000012E3 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9181                                  
  9182                                  	;hkn; FastTable is in DOSDATA
  9183 000012E8 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9184 000012EB 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9185 000012EC 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9186 000012EE D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9187 000012F0 D1E3                    	SHL	BX,1			;AN000;FO.
  9188 000012F2 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9189 000012F4 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9190                                  fcheck: 				;AN000;
  9191 000012F8 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9192 000012FA 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9193 000012FC 7407                    	JZ	short ok_install	;AN000;FO.;; yes
  9194 000012FE 09C0                    	OR	AX,AX			;AN000;FO.;
  9195 00001300 7403                    	JZ	short ok_install	;AN000;FO.;
  9196 00001302 F9                      	STC				;AN000;FO.;; already installed !
  9197 00001303 EB17                    	JMP	SHORT FSret		;AN000;FO. set carry
  9198                                  ok_install:				;AN000;
  9199 00001305 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9200 00001308 7412                    	JZ	short FSret		;AN000;FO.; yes
  9201 0000130A 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9202 0000130C 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9203 00001310 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9204                                  
  9205                                  ;hkn; FastFlg moved to DOSDATA
  9206 00001313 BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9207 00001316 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9208                                  	;or	byte [es:di],80h
  9209 00001318 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9210                                  FSret:					;AN000;
  9211 0000131C 07                      	pop	es
  9212 0000131D C3                      	retn				;AN000;FO.
  9213                                  
  9214                                  ;EndProc FastInit
  9215                                  
  9216                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9217                                  ;----------------------------------------------------------------------------
  9218                                  ;   DOS 3.3   6/10/86
  9219                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9220                                  ;
  9221                                  ;   Inputs:	None
  9222                                  ;   Outputs:	AX = -1 and carry flag set
  9223                                  ;
  9224                                  ;   Registers modified: none.
  9225                                  ;----------------------------------------------------------------------------
  9226                                  
  9227                                  FastRet:
  9228                                  	;mov	ax,-1
  9229                                  	;stc
  9230                                  	;retf
  9231 0000131E F9                      	STC
  9232 0000131F 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9233 00001321 CB                      	RETF
  9234                                  
  9235                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9236                                  ;----------------------------------------------------------------------------
  9237                                  ;   DOS 3.3   6/10/86
  9238                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9239                                  ;
  9240                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9241                                  ;   Outputs:	same output as $OPEN
  9242                                  ;
  9243                                  ;----------------------------------------------------------------------------
  9244                                  
  9245                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9246                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9247                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9248                                  
  9249                                  NLS_OPEN:
  9250                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9251                                  ;	MOV	BYTE [CPSWFLAG],0
  9252                                  ;	PUSH	BX		 ; save current state
  9253                                  
  9254 00001322 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9255 00001324 E8CF5C                  	call	_$OPEN
  9256                                  
  9257                                  ;	POP	BX		 ; restore current state
  9258                                  ;	MOV	[CPSWFLAG],BL
  9259 00001327 C3                      	RETN
  9260                                  
  9261                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9262                                  ;----------------------------------------------------------------------------
  9263                                  ;   DOS 3.3   6/10/86
  9264                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9265                                  ;
  9266                                  ;   Inputs:	BP = open mode
  9267                                  ;   Outputs:	same output as $LSEEK
  9268                                  ;
  9269                                  ;----------------------------------------------------------------------------
  9270                                  
  9271                                  ; 16/05/2019 - Retro DOS v4.0
  9272                                  
  9273                                  NLS_LSEEK:
  9274 00001328 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9275 0000132D 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9276 00001332 E81000                  	CALL	Fake_User_Stack
  9277 00001335 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9278 00001337 E86456                  	call	_$LSEEK
  9279 0000133A 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9280 0000133F 368F06[8405]            	POP	word [SS:USER_SP]
  9281 00001344 C3                      	RETN
  9282                                  
  9283                                  ;Break	<Fake_User_Stack - save user stack>
  9284                                  ;----------------------------------------------------------------------------
  9285                                  ;   DOS 3.3   6/10/86
  9286                                  ;   Fake_User_Stack - save user stack pointer
  9287                                  ;
  9288                                  ;----------------------------------------------------------------------------
  9289                                  
  9290                                  Fake_User_Stack:
  9291 00001345 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9292 00001349 36A3[8405]              	MOV	[SS:USER_SP],AX
  9293 0000134D 8CD0                    	MOV	AX,SS
  9294 0000134F 36A3[8605]              	MOV	[SS:USER_SS],AX
  9295 00001353 C3                      	RETN
  9296                                  
  9297                                  ;Break	<GetDevList - get device header list pointer>
  9298                                  ;----------------------------------------------------------------------------
  9299                                  ;   DOS 3.3   7/25/86
  9300                                  ;   GetDevList - get device header list pointer
  9301                                  ;
  9302                                  ;   Output: AX:BX points to the device header list
  9303                                  ;----------------------------------------------------------------------------
  9304                                  
  9305                                  GetDevList:
  9306                                  	; 16/05/2019 - Retro DOS v4.0
  9307 00001354 BE[280D]                	MOV	SI,SysInitTable
  9308 00001357 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9309 0000135C C534                    	LDS	SI,[SI]
  9310                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9311 0000135E 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9312                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9313 00001361 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9314 00001364 C3                      	RETN
  9315                                  
  9316                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9317                                  ;----------------------------------------------------------------------------
  9318                                  ;   DOS 3.3   7/25/86
  9319                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9320                                  ;
  9321                                  ;   Inputs:	BP = function code 0CH
  9322                                  ;   Outputs:	same output as generic $IOCTL
  9323                                  ;
  9324                                  ;----------------------------------------------------------------------------
  9325                                  
  9326                                  NLS_IOCTL:
  9327                                  	; 16/05/2019 - Retro DOS v4.0
  9328 00001365 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9329 0000136A 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9330 0000136F E8D3FF                  	CALL	Fake_User_Stack
  9331 00001372 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9332 00001374 E8830F                  	call	_$IOCTL
  9333 00001377 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9334 0000137C 368F06[8405]            	POP	word [SS:USER_SP]
  9335 00001381 C3                      	RETN
  9336                                  
  9337                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9338                                  ;----------------------------------------------------------------------------
  9339                                  ;   DOS 3.3   7/25/86
  9340                                  ;   NLS_GETEXT	-
  9341                                  ;
  9342                                  ;   Inputs:	none
  9343                                  ;   Outputs:	AX = extended error
  9344                                  ;
  9345                                  ;----------------------------------------------------------------------------
  9346                                  
  9347                                  NLS_GETEXT:
  9348                                  	; 16/05/2019 - Retro DOS v4.0
  9349 00001382 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9350 00001386 C3                      	RETN
  9351                                  
  9352                                  ; 29/04/2019 - Retro DOS v4.0
  9353                                  
  9354                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9355                                  
  9356                                  ;----------------------------------------------------------------------------
  9357                                  ;   DOS 4.00
  9358                                  ;
  9359                                  ;   Inputs:	DL=0 get extended error message addr
  9360                                  ;		  =1 set extended error message addr
  9361                                  ;		  =2 get parser error message addr
  9362                                  ;		  =3 set parser error message addr
  9363                                  ;		  =4 get critical error message addr
  9364                                  ;		  =5 set critical error message addr
  9365                                  ;		  =6 get file system error message addr
  9366                                  ;		  =7 set file system error message addr
  9367                                  ;		  =8 get address for code reduction
  9368                                  ;		  =9 set address for code reduction
  9369                                  ;   Function:	get/set message address
  9370                                  ;   Outputs:	ES:DI points to addr when get
  9371                                  ;----------------------------------------------------------------------------
  9372                                  
  9373                                  ;Procedure MSG_RETRIEVAL,NEAR
  9374                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9375                                  
  9376                                  MSG_RETRIEVAL:
  9377                                  
  9378                                  ;;	NOTE:  This function lives in command.com resident code now.
  9379                                  ;;	If the int 2F ever gets this far, we'll return registers
  9380                                  ;;	unchanged, which produces the same result as before, if
  9381                                  ;;	command.com wasn't present (and therefore no messages available).
  9382                                  ;;
  9383                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9384                                  ;;	No_Op zeroes AL.
  9385                                  ;;
  9386                                  ;;;hkn; set up ds to point to DOSDATA
  9387                                  ;;	push	ds
  9388                                  ;;	getdseg	<ds>			; ds -> dosdata
  9389                                  ;;
  9390                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9391                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9392                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9393                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9394                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9395                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9396                                  ;;	DEC	AL		    ;AN000;;MS.
  9397                                  ;;toget:				    ;AN000;
  9398                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9399                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9400                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9401                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9402                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9403                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9404                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9405                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9406                                  ;;getget: 				     ;AN000;
  9407                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9408                                  ;;MSGret: 				     ;AN000;
  9409                                  ;;	POP	SI			     ;AN000;;MS.
  9410                                  ;;	POP	AX			     ;AN000;;MS.
  9411                                  ;;
  9412                                  ;;	pop	ds
  9413                                  
  9414                                  ;	return				     ;AN000;;MS. exit
  9415 00001387 C3                      	retn	; 29/04/2019
  9416                                  
  9417                                  ;============================================================================
  9418                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9419                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9420                                  ;============================================================================
  9421                                  ; 20/07/2018 - Retro DOS v3.0
  9422                                  
  9423                                  ;	; MSDOS 3.3
  9424                                  ;	; 08/08/2018 - Retro DOS v3.0
  9425                                  ;ECritMEM:
  9426                                  ;ECritSFT:
  9427                                  ;	;
  9428                                  ;ECritDisk:
  9429                                  ;	retn
  9430                                  ;	;push	ax
  9431                                  ;	
  9432                                  ;	mov	ax,8001h
  9433                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9434                                  ;			; AL = critical section number (00h-0Fh)
  9435                                  ;	pop	ax
  9436                                  ;	retn
  9437                                  ;
  9438                                  ;	; MSDOS 3.3
  9439                                  ;	; 08/08/2018 - Retro DOS v3.0
  9440                                  ;LCritMEM:
  9441                                  ;LCritSFT:
  9442                                  ;	;
  9443                                  ;LCritDisk:
  9444                                  ;	retn
  9445                                  ;	;push	ax
  9446                                  ;	
  9447                                  ;	mov	ax,8101h
  9448                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9449                                  ;			; AL = critical section number (00h-0Fh)
  9450                                  ;	pop	ax
  9451                                  ;	retn
  9452                                  ;
  9453                                  ;ECritDevice:
  9454                                  ;	retn
  9455                                  ;	;push	ax
  9456                                  ;	
  9457                                  ;	mov	ax,8002h
  9458                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9459                                  ;			; AL = critical section number (00h-0Fh)
  9460                                  ;	pop	ax
  9461                                  ;	retn
  9462                                  ;
  9463                                  ;LCritDevice:
  9464                                  ;	retn
  9465                                  ;	;push	ax
  9466                                  ;	
  9467                                  ;	mov	ax,8102h
  9468                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9469                                  ;			; AL = critical section number (00h-0Fh)
  9470                                  ;	pop	ax
  9471                                  ;	retn
  9472                                  
  9473                                  ;============================================================================
  9474                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9475                                  ;============================================================================
  9476                                  ; 12/05/2019 - Retro DOS v4.0
  9477                                  
  9478                                  ; Critical Section Routines
  9479                                  
  9480                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9481                                  
  9482                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9483                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9484                                  
  9485                                  ; ---------------------------------------------------------------------------
  9486                                  ; Each handler must leave everything untouched; including flags!
  9487                                  ;
  9488                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9489                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9490                                  ; ---------------------------------------------------------------------------
  9491                                  
  9492                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9493                                  ; ---------------------------------------------------------------------------
  9494                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9495                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9496                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9497                                  ; ---------------------------------------------------------------------------
  9498                                  
  9499                                  ;%macro POPFF 0
  9500                                  ;	jmp	$+3
  9501                                  ;	iret
  9502                                  ;	push	cs
  9503                                  ;	call	$-2
  9504                                  ;%endmacro
  9505                                  
  9506                                  ; ---------------------------
  9507                                  
  9508                                  ;Procedure  ECritDisk,NEAR
  9509                                  	;public  ECritMEM
  9510                                  	;public  ECritSFT
  9511                                  ECritMEM:
  9512                                  ECritSFT:
  9513                                  ;
  9514                                  ECritDisk:
  9515                                  
  9516                                  ;SR; Check if critical section is to be entered
  9517                                  
  9518 00001388 9C                      	pushf
  9519 00001389 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9520 0000138F 740D                    	jz	short ECritDisk_2
  9521                                  
  9522                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9523                                  ;	;popff  ; * (macro)
  9524                                  ;	jmp	short ECritDisk_1 ; *
  9525                                  ;
  9526                                  ;ECritDisk_iret: ; *
  9527                                  ;	iret ; *
  9528                                  
  9529                                  	; 16/12/2022
  9530                                  	; 13/11/2022
  9531                                  	;jmp	short ECritDisk_1
  9532                                  	; 06/11/2022
  9533                                  ;ECritDisk_iret:
  9534                                  ;	iret	
  9535                                  
  9536                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9537                                  ECritDisk_1:
  9538 00001391 0E                      	push	cs ; *
  9539 00001392 E80800                  	call	ECritDisk_iret ; *		
  9540                                  	
  9541                                  ECritDisk_0:
  9542 00001395 50                      	PUSH    AX
  9543                                  	;MOV	AX,8000h+critDisk
  9544                                  	;INT	int_IBM
  9545 00001396 B80180                  	mov	ax,8001h
  9546 00001399 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9547                                  			; AL = critical section number (00h-0Fh)
  9548 0000139B 58                      	POP     AX
  9549 0000139C C3                      	retn
  9550                                  
  9551                                  	; 16/12/2022
  9552                                  	; 13/11/2022
  9553                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9554                                  LCritDisk_iret: 
  9555 0000139D CF                      	iret
  9556                                  
  9557                                  ECritDisk_2:
  9558                                  	;;popff ; *
  9559                                  	;;retn
  9560                                  ;	jmp	short ECritDisk_3 ; *
  9561                                  ;ECritDisk_iret2: ; *
  9562                                  ;	iret
  9563                                  	
  9564                                  	; 16/12/2022
  9565                                  	; 13/11/2022
  9566                                  	;jmp	short ECritDisk_3
  9567                                  ;ECritDisk_iret2:
  9568                                  	;iret
  9569                                  
  9570                                  ECritDisk_3:
  9571 0000139E 0E                      	push    cs ; *
  9572                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9573                                  	;call	ECritDisk_iret2 ; *
  9574                                  	;retn
  9575                                  	; 16/12/2022
  9576 0000139F E8FBFF                  	call	ECritDisk_iret
  9577 000013A2 C3                      	retn
  9578                                  
  9579                                  ;EndProc ECritDisk
  9580                                  
  9581                                  ; ---------------------------
  9582                                  
  9583                                  ;Procedure   LCritDisk,NEAR
  9584                                  	;public  LCritMEM
  9585                                  	;public  LCritSFT
  9586                                  LCritMEM:
  9587                                  LCritSFT:
  9588                                  ;
  9589                                  LCritDisk:
  9590                                  
  9591                                  ;SR; Check if critical section is to be entered
  9592                                  
  9593 000013A3 9C                      	pushf
  9594 000013A4 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9595 000013AA 740C                    	jz	short LCritDisk_2
  9596                                  	;popff  ; * (macro)
  9597                                  ;	jmp	short LCritDisk_1 ; *
  9598                                  ;
  9599                                  ;LCritDisk_iret: ; *
  9600                                  ;	iret ; *
  9601                                  
  9602                                  	; 16/12/2022
  9603                                  	; 13/11/2022
  9604                                  	;jmp	short LCritDisk_1
  9605                                  ;LCritDisk_iret:
  9606                                  	;iret
  9607                                  
  9608                                  LCritDisk_1:
  9609 000013AC 0E                      	push	cs ; *
  9610 000013AD E8EDFF                  	call	LCritDisk_iret ; *		
  9611                                  	
  9612                                  LCritDisk_0:
  9613 000013B0 50                      	PUSH	AX
  9614                                  	;MOV	AX,8100h+critDisk
  9615                                  	;INT	int_IBM
  9616 000013B1 B80181                  	mov	ax,8101h
  9617 000013B4 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9618                                  			; AL = critical section number (00h-0Fh)
  9619 000013B6 58                      	POP	AX
  9620 000013B7 C3                      	retn
  9621                                  
  9622                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9623                                  ;	iret
  9624                                  
  9625                                  LCritDisk_2:
  9626                                  	;;popff ; *
  9627                                  	;;retn
  9628                                  ;	jmp	short LCritDisk_3 ; *
  9629                                  ;LCritDisk_iret2: ; *
  9630                                  ;	iret
  9631                                  
  9632                                  	; 16/12/2022
  9633                                  	; 13/11/2022
  9634                                  	;jmp	short LCritDisk_3
  9635                                  ;LCritDisk_iret2:
  9636                                  	;iret
  9637                                  
  9638                                  LCritDisk_3:
  9639 000013B8 0E                      	push    cs ; *
  9640                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9641                                  	;call	LCritDisk_iret2 ; *
  9642                                  	;retn
  9643                                  	; 16/12/2022
  9644 000013B9 E8E1FF                  	call	LCritDisk_iret
  9645 000013BC C3                      	retn
  9646                                  
  9647                                  ;EndProc LCritDisk
  9648                                  
  9649                                  ; ---------------------------
  9650                                  
  9651                                  ;Procedure   ECritDevice,NEAR
  9652                                  
  9653                                  ECritDevice:
  9654                                  
  9655                                  ;SR; Check if critical section is to be entered
  9656                                  
  9657 000013BD 9C                      	pushf
  9658 000013BE 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9659 000013C4 740D                    	jz	short ECritDevice_2
  9660                                  	;popff  ; * (macro)
  9661                                  ;	jmp	short ECritDevice_1 ; *
  9662                                  ;
  9663                                  ;ECritDevice_iret: ; *
  9664                                  ;	iret ; *
  9665                                  
  9666                                  	; 16/12/2022	
  9667                                  	; 13/11/2022
  9668                                  	;jmp	short ECritDevice_1
  9669                                  ;ECritDevice_iret:
  9670                                  	;iret
  9671                                  
  9672                                  ECritDevice_1:
  9673 000013C6 0E                      	push	cs ; *
  9674 000013C7 E80800                  	call	ECritDevice_iret ; *		
  9675                                  	
  9676                                  ECritDevice_0:
  9677 000013CA 50                      	PUSH	AX
  9678                                  	;MOV	AX,8000h+critDevice
  9679                                  	;INT	int_IBM
  9680 000013CB B80280                  	mov	ax,8002h
  9681 000013CE CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9682                                  			; AL = critical section number (00h-0Fh)
  9683 000013D0 58                      	POP     AX
  9684 000013D1 C3                      	retn
  9685                                  
  9686                                  	; 16/12/2022
  9687                                  	; 06/12/2022
  9688                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9689                                  LCritDevice_iret: 
  9690 000013D2 CF                      	iret
  9691                                  
  9692                                  ECritDevice_2:
  9693                                  	;;popff ; *
  9694                                  	;;retn
  9695                                  ;	jmp	short ECritDevice_3 ; *
  9696                                  ;ECritDevice_iret2: ; *
  9697                                  ;	iret
  9698                                  
  9699                                  	; 16/12/2022
  9700                                  	; 13/11/2022
  9701                                  	;jmp	short ECritDevice_3
  9702                                  ;ECritDevice_iret2:
  9703                                  	;iret
  9704                                  
  9705                                  ECritDevice_3:
  9706 000013D3 0E                      	push    cs ; *
  9707                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9708                                  	;call	ECritDevice_iret2 ; *
  9709                                  	;retn
  9710                                  	; 16/12/2022
  9711 000013D4 E8FBFF                  	call	ECritDevice_iret
  9712 000013D7 C3                      	retn
  9713                                  
  9714                                  ;EndProc ECritDevice
  9715                                  
  9716                                  ; ---------------------------
  9717                                  
  9718                                  ;Procedure   LCritDevice,NEAR
  9719                                  
  9720                                  LCritDevice:
  9721                                  
  9722                                  ;SR; Check if critical section is to be entered
  9723                                  
  9724 000013D8 9C                      	pushf
  9725 000013D9 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9726 000013DF 740C                    	jz	short LCritDevice_2
  9727                                  	;popff  ; * (macro)
  9728                                  ;	jmp	short LCritDevice_1 ; *
  9729                                  ;
  9730                                  ;LCritDevice_iret: ; *
  9731                                  ;	iret ; *
  9732                                  
  9733                                  	; 16/12/2022
  9734                                  	; 13/11/2022
  9735                                  	;jmp	short LCritDevice_1
  9736                                  ;LCritDevice_iret:
  9737                                  	;iret
  9738                                  
  9739                                  LCritDevice_1:
  9740 000013E1 0E                      	push	cs ; *
  9741 000013E2 E8EDFF                  	call	LCritDevice_iret ; *		
  9742                                  	
  9743                                  LCritDevice_0:
  9744 000013E5 50                      	PUSH	AX
  9745                                  	;MOV	AX,8100h+critDevice
  9746                                  	;INT	int_IBM
  9747 000013E6 B80281                  	mov	ax,8102h
  9748 000013E9 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9749                                  			; AL = critical section number (00h-0Fh)
  9750 000013EB 58                      	POP     AX
  9751 000013EC C3                      	retn
  9752                                  
  9753                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9754                                  ;	iret
  9755                                  
  9756                                  LCritDevice_2:
  9757                                  	;;popff ; *
  9758                                  	;;retn
  9759                                  ;	jmp	short LCritDevice_3 ; *
  9760                                  ;LCritDevice_iret2: ; *
  9761                                  ;	iret
  9762                                  
  9763                                  	; 16/12/2022
  9764                                  	; 13/11/2022
  9765                                  	;jmp	short LCritDevice_3
  9766                                  ;LCritDevice_iret2:
  9767                                  	;iret
  9768                                  
  9769                                  LCritDevice_3:
  9770 000013ED 0E                      	push    cs ; *
  9771                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9772                                  	;call	LCritDevice_iret2 ; *
  9773                                  	;retn
  9774                                  	; 16/12/2022
  9775 000013EE E8E1FF                  	call	LCritDevice_iret
  9776 000013F1 C3                      	retn
  9777                                  
  9778                                  ;EndProc LCritDevice
  9779                                  
  9780                                  ;============================================================================
  9781                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9782                                  ;============================================================================
  9783                                  ; 20/07/2018 - Retro DOS v3.0
  9784                                  
  9785                                  ;============================================================================
  9786                                  ; STDIO.ASM - (MSDOS 2.0)
  9787                                  ;============================================================================
  9788                                  
  9789                                  ;
  9790                                  ; Standard device IO for MSDOS (first 12 function calls)
  9791                                  ;
  9792                                  
  9793                                  ;.xlist
  9794                                  ;.xcref
  9795                                  ;INCLUDE STDSW.ASM
  9796                                  ;INCLUDE DOSSEG.ASM
  9797                                  ;.cref
  9798                                  ;.list
  9799                                  
  9800                                  ;TITLE   STDIO - device IO for MSDOS
  9801                                  ;NAME    STDIO
  9802                                  
  9803                                  ;INCLUDE IO.ASM
  9804                                  
  9805                                  ; ---------------------------------------------------------------------------
  9806                                  ;
  9807                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9808                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9809                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9810                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9811                                  ;			    to restore MSDOS 2.0 device IO source code 
  9812                                  ;
  9813                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9814                                  	
  9815                                  ;============================================================================
  9816                                  ; STDIO.ASM - (MSDOS 2.0)
  9817                                  ;============================================================================
  9818                                  
  9819                                  ;
  9820                                  ; Standard device IO for MSDOS (first 12 function calls)
  9821                                  ;
  9822                                  
  9823                                  ;.xlist
  9824                                  ;.xcref
  9825                                  ;INCLUDE STDSW.ASM
  9826                                  ;INCLUDE DOSSEG.ASM
  9827                                  ;.cref
  9828                                  ;.list
  9829                                  
  9830                                  ;TITLE   STDIO - device IO for MSDOS
  9831                                  ;NAME    STDIO
  9832                                  
  9833                                  ;INCLUDE IO.ASM
  9834                                  
  9835                                  ; ---------------------------------------------------------------------------
  9836                                  ;
  9837                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9838                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9839                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9840                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9841                                  ;			    to restore MSDOS 2.0 device IO source code 
  9842                                  ;
  9843                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9844                                  ;
  9845                                  ;============================================================================
  9846                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9847                                  ;============================================================================
  9848                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9849                                  
  9850                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9851                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9852                                  
  9853                                  ;============================================================================
  9854                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
  9855                                  ;============================================================================
  9856                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
  9857                                  
  9858                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9859                                  
  9860                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9861                                  ;
  9862                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9863                                  ;	NAME	IBMCPMIO
  9864                                  
  9865                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9866                                  ;
  9867                                  ;	$Std_Con_Input_No_Echo
  9868                                  ;	$Std_Con_String_Output
  9869                                  ;	$Std_Con_String_Input
  9870                                  ;	$RawConIO
  9871                                  ;	$RawConInput
  9872                                  ;	RAWOUT
  9873                                  ;	RAWOUT2
  9874                                  ;
  9875                                  
  9876                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9877                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9878                                  ; references to be SS or CS relative which is desired.
  9879                                  
  9880                                  ; ---------------------------------------------------------------------------
  9881                                  
  9882                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9883                                  ;	NAME	CPMIO2
  9884                                  
  9885                                  ;
  9886                                  ;	Microsoft Confidential
  9887                                  ;	Copyright (C) Microsoft Corporation 1991
  9888                                  ;	All Rights Reserved.
  9889                                  ;
  9890                                  
  9891                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9892                                  ;
  9893                                  ;	$Std_Con_Input
  9894                                  ;	$Std_Con_Output
  9895                                  ;	OUTT
  9896                                  ;	TAB
  9897                                  ;	BUFOUT
  9898                                  ;	$Std_Aux_Input
  9899                                  ;	$Std_Aux_Output
  9900                                  ;	$Std_Printer_Output
  9901                                  ;	$Std_Con_Input_Status
  9902                                  ;	$Std_Con_Input_Flush
  9903                                  ;
  9904                                  ;	Revision History:
  9905                                  ;
  9906                                  ;	  AN000	 version 4.00 - Jan. 1988
  9907                                  
  9908                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9909                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9910                                  ; references to be SS or CS relative which is desired.
  9911                                  
  9912                                  ;DOSCODE SEGMENT
  9913                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9914                                  
  9915                                  
  9916                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9917                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9918                                  ;hkn;	not valid. 
  9919                                  
  9920                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
  9921                                  ; 08/11/2022
  9922                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
  9923                                  
  9924                                  ;
  9925                                  ;----------------------------------------------------------------------------
  9926                                  ;
  9927                                  ; Procedure : $Std_Con_Input_No_Echo
  9928                                  ;
  9929                                  ;----------------------------------------------------------------------------
  9930                                  ;
  9931                                  
  9932                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9933                                  
  9934                                  ; Inputs:
  9935                                  ;	None
  9936                                  ; Function:
  9937                                  ;	Input character from console, no echo
  9938                                  ; Returns:
  9939                                  ;	AL = character
  9940                                  
  9941 000013F2 1E                      	push	ds
  9942 000013F3 56                      	push	si
  9943                                  INTEST:
  9944 000013F4 E86D3E                  	call	STATCHK
  9945 000013F7 753B                    	jnz	short GET ; 08/09/2018
  9946                                  ;*************************************************************************
  9947                                  ;hkn; SS override
  9948 000013F9 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9949 000013FF 7505                    	jnz	short no_sys_wait
  9950 00001401 B405                    	mov	ah,5			; get input status with system wait
  9951 00001403 E86831                  	call	IOFUNC
  9952                                  no_sys_wait:
  9953                                  ;**************************************************************************
  9954 00001406 B484                    	MOV	AH,84h
  9955 00001408 CD2A                    	INT	int_IBM	 ; int 2Ah
  9956                                  
  9957                                  ;;; 7/15/86  update the date in the idle loop
  9958                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9959                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9960                                  
  9961                                  ;hkn; SS override
  9962 0000140A 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9963 00001410 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9964                                  
  9965 00001412 50                      	PUSH	AX
  9966 00001413 53                      	PUSH	BX			; following is tricky,
  9967 00001414 51                      	PUSH	CX			; it may be called by critical handler
  9968 00001415 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9969                                  					; other's READ or WRITE
  9970 00001416 1E                      	PUSH	DS			; save DS = SFT's segment
  9971                                  
  9972                                  ;hkn; READTIME must use ds = DOSDATA
  9973                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9974                                  
  9975 00001417 16                      	PUSH	SS ; 04/05/2019
  9976 00001418 1F                      	POP	DS
  9977                                  
  9978 00001419 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9979 0000141C E89802                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9980                                  	;invoke	READTIME		; readtime
  9981 0000141F E84EF7                  	call	READTIME
  9982 00001422 B80100                  	MOV	AX,1
  9983 00001425 E88F02                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9984                                  
  9985                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9986                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9987                                  ;	push	bx
  9988                                  ;	mov	bx,DATE_FLAG
  9989                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
  9990                                  ;	cmp	word [cs:bx],5872h
  9991                                  ;	jz	short FETCHI_TAG_chk_ok
  9992                                  ;	call	DOSINIT
  9993                                  ;FETCHI_TAG_chk_ok:
  9994                                  ;	pop	bx
  9995                                  
  9996 00001428 1F                      	POP	DS			; restore DS
  9997 00001429 5A                      	POP	DX
  9998 0000142A 59                      	POP	CX
  9999 0000142B 5B                      	POP	BX
 10000 0000142C 58                      	POP	AX
 10001                                  NoUpdate:
 10002                                  
 10003                                  ;hkn; SS override
 10004 0000142D 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10005                                  
 10006                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10007 00001432 EBC0                    	JMP	short INTEST
 10008                                  GET:
 10009 00001434 30E4                    	XOR	AH,AH
 10010 00001436 E83531                  	call	IOFUNC
 10011 00001439 5E                      	POP	SI
 10012 0000143A 1F                      	POP	DS
 10013                                  ;;; 7/15/86
 10014                                  
 10015                                  ;hkn; SS override
 10016                                  	; MSDOS 6.0
 10017 0000143B 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10018                                  	;
 10019 00001441 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10020 00001443 7506                    	JNZ	short noscan
 10021                                  
 10022                                  ;hkn; SS override
 10023 00001445 36C606[900D]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10024                                  noscan:
 10025 0000144B C3                      	retn
 10026                                  ;
 10027                                  ;----------------------------------------------------------------------------
 10028                                  ;
 10029                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10030                                  ;
 10031                                  ;
 10032                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10033                                  ;	EXIT	none
 10034                                  ;	USES	ALL
 10035                                  ;
 10036                                  ;----------------------------------------------------------------------------
 10037                                  ;
 10038                                  
 10039                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10040                                  
 10041 0000144C 89D6                    	mov	si,dx
 10042                                  STRING_OUT1:	
 10043 0000144E AC                      	lodsb
 10044 0000144F 3C24                    	cmp	al,'$'
 10045 00001451 74F8                    	je	short noscan
 10046                                  NEXT_STR1:
 10047 00001453 E88D02                  	call	OUTT
 10048                                  
 10049 00001456 EBF6                    	jmp	short STRING_OUT1
 10050                                  
 10051                                  ;----------------------------------------------------------------------------
 10052                                  ;
 10053                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10054                                  ;
 10055                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10056                                  ;
 10057                                  ;	ENTRY	(ds:dx) = input buffer
 10058                                  ;	EXIT	none
 10059                                  ;	USES	ALL
 10060                                  ;
 10061                                  ;----------------------------------------------------------------------------
 10062                                  
 10063                                  	; 15/01/2024
 10064                                  
 10065                                  _$STD_CON_STRING_INPUT:		;System call 10
 10066                                  
 10067 00001458 8CD0                    	mov	ax,ss
 10068 0000145A 8EC0                    	mov	es,ax
 10069 0000145C 89D6                    	mov	si,dx
 10070 0000145E 30ED                    	xor	ch,ch
 10071 00001460 AD                      	lodsw
 10072                                  
 10073                                  ;	(AL) = the buffer length
 10074                                  ;	(AH) = the template length
 10075                                  
 10076 00001461 08C0                            or	al,al
 10077 00001463 74E6                            jz	short noscan	;Buffer is 0 length!!?
 10078 00001465 88E3                    	mov	bl,ah		;Init template counter
 10079 00001467 88EF                            mov	bh,ch		;Init template counter
 10080                                  
 10081                                  ;	(BL) = the number of bytes in the template
 10082                                  
 10083 00001469 38D8                            cmp	al,bl
 10084 0000146B 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10085 0000146D 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10086 00001470 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10087                                  
 10088                                  ; The number of chars in the template is >= the number of chars in buffer or
 10089                                  ; there is no CR at the end of the template.  This is an inconsistant state
 10090                                  ; of affairs.  Pretend that the template was empty:
 10091                                  ;
 10092                                  
 10093                                  NOEDIT:	
 10094 00001472 88EB                    	mov	bl,ch		;Reset buffer
 10095                                  EDITON: 
 10096 00001474 88C2                    	mov	dl,al
 10097 00001476 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10098                                  
 10099                                  ;	Top level. We begin to read a line in.
 10100                                  
 10101                                  NEWLIN: 
 10102 00001477 36A0[F901]              	mov	al,[SS:CARPOS]
 10103 0000147B 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10104                                  
 10105 0000147F 56                      	push	si
 10106 00001480 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10107 00001483 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10108 00001488 88EF                    	mov	bh,ch		;No chars from template yet
 10109 0000148A 88EE                    	mov	dh,ch		;No chars to new line yet
 10110 0000148C E863FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10111 0000148F 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10112 00001491 7503                    	jnz	short GOTCH
 10113                                  
 10114                                  ;	This is the main loop of reading in a character and processing it.
 10115                                  ;
 10116                                  ;	(BH) = the index of the next byte in the template
 10117                                  ;	(BL) = the length of the template
 10118                                  ;	(DH) = the number of bytes in the buffer
 10119                                  ;	(DL) = the length of the buffer
 10120                                  
 10121                                  GETCH:
 10122 00001493 E85CFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10123                                  GOTCH:
 10124                                  ;
 10125                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10126                                  ; input queue.
 10127                                  ;
 10128 00001496 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10129 00001498 74F9                    	jz	short GETCH
 10130                                  
 10131                                  ;	If the leading char is the function-key lead byte
 10132                                  
 10133                                  	;cmp	al,[SS:ESCCHAR]
 10134                                  
 10135                                  	; 04/05/2019 - Retro DOS v4.0
 10136                                  
 10137                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10138                                  
 10139 0000149A 2E3A06[6E0A]            	CMP	AL,[cs:ESCCHAR]
 10140 0000149F 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10141                                  
 10142                                  ;	Rubout and ^H are both destructive backspaces.
 10143                                  
 10144 000014A1 3C7F                            cmp	al,c_DEL ; 7FH
 10145                                          ;jz	short BACKSPJ
 10146                                          ; 15/01/2024
 10147 000014A3 7466                    	je	short BACKSP
 10148 000014A5 3C08                    	cmp	al,c_BS  ; 8
 10149                                          ;jz	short BACKSPJ
 10150                                          ; 15/01/2024
 10151 000014A7 7462                    	je	short BACKSP
 10152                                  
 10153                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10154                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10155                                  	;	   	after CMP and a CMP again!
 10156                                  	;		
 10157                                  	;		-It would be better if they use a 'JMP short' to 
 10158                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10159                                  	;		between them. Then, they would be able use a patch
 10160                                  	;		between 5271h and 5279h when if it will be required.
 10161                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10162                                  	;	
 10163                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10164                                  
 10165                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10166                                  	;
 10167                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10168                                  
 10169                                  ;DOSCODE:526D	cmp     al, 8
 10170                                  ;DOSCODE:526F	jz      short BACKSPJ
 10171                                  ;DOSCODE:5271	cmp     al, 17h
 10172                                  ;DOSCODE:5273	nop
 10173                                  ;DOSCODE:5274	nop
 10174                                  ;DOSCODE:5275	cmp     al, 15h
 10175                                  ;DOSCODE:5277	nop
 10176                                  ;DOSCODE:5278	nop
 10177                                  ;DOSCODE:5279	cmp     al, 0Dh
 10178                                  ;DOSCODE:527B	jz      short ENDLIN
 10179                                  ;DOSCODE:527D	cmp     al, 0Ah
 10180                                  ;DOSCODE:527F	jz      short PHYCRLF
 10181                                  	
 10182                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10183                                  	; DOSCODE:525Dh
 10184                                  
 10185                                  ; 16/12/2022
 10186                                  %if 0
 10187                                  	; MSDOS 6.0
 10188                                  ;	^W deletes backward once and then backs up until a letter is before the
 10189                                  ;	cursor
 10190                                  
 10191                                  	CMP     AL,"W"-"@" ; 17h
 10192                                  
 10193                                  ;	The removal of the comment characters before the jump statement will
 10194                                  ;	cause ^W to backup a word.
 10195                                  
 10196                                  ;***	JZ	short WordDel
 10197                                  	NOP
 10198                                  	NOP
 10199                                  
 10200                                  	CMP     AL,"U"-"@" ; 15h
 10201                                  
 10202                                  ;	The removal of the comment characters before the jump statement will
 10203                                  ;	cause ^U to clear a line.
 10204                                  
 10205                                  ;***	JZ	short LineDel
 10206                                  	NOP
 10207                                  	NOP
 10208                                  
 10209                                  %endif
 10210                                  
 10211                                  ;	CR terminates the line.
 10212                                  
 10213 000014A9 3C0D                            cmp	al,c_CR ; 0Dh
 10214 000014AB 7430                            jz	short ENDLIN
 10215                                  
 10216                                  ;	LF goes to a new line and keeps on reading.
 10217                                  
 10218 000014AD 3C0A                            cmp	al,c_LF ; 0Ah
 10219 000014AF 7442                    	jz	short PHYCRLF
 10220                                  
 10221                                  ;	^X (or ESC) deletes the line and starts over
 10222                                  
 10223                                  	; MSDOS 3.3
 10224                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10225                                  	;jz	short KILNEW
 10226                                  
 10227                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10228                                  
 10229                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10230                                  
 10231 000014B1 2E3A06[6D0A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10232 000014B6 7440                    	jz	short KILNEW
 10233                                  	
 10234                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10235                                  	;jz	short KILNEW
 10236                                  
 10237                                  ; Otherwise, we save the input character.
 10238                                  
 10239                                  SAVCH:	
 10240 000014B8 38D6                    	cmp	dh,dl
 10241 000014BA 7317                    	jnb	short BUFFUL		; buffer is full.
 10242 000014BC AA                              stosb
 10243 000014BD FEC6                    	inc	dh                      ; increment count in buffer.
 10244 000014BF E8B502                  	call	BUFOUT			; Print control chars nicely
 10245                                  
 10246 000014C2 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10247 000014C8 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10248 000014CA 38DF                            cmp	bh,bl
 10249 000014CC 73C5                            jnb	short GETCH		; no more characters in template
 10250 000014CE 46                              inc	si                      ; Skip to next char in template
 10251 000014CF FEC7                            inc	bh                      ; remember position in template
 10252 000014D1 EBC0                            jmp	short GETCH
 10253                                  
 10254                                  	; 15/01/2024
 10255                                  ;BACKSPJ: 
 10256                                  	;jmp	short BACKSP
 10257                                  
 10258                                  BUFFUL: 
 10259 000014D3 B007                    	mov	al, 7			; Bell to signal full buffer
 10260 000014D5 E80B02                  	call	OUTT
 10261 000014D8 EBB9                    	jmp	short GETCH
 10262                                  
 10263                                  ESCAPE: 
 10264                                  	;transfer OEMFunctionKey
 10265 000014DA E9BCF5                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10266                                  
 10267                                  ENDLIN:
 10268 000014DD AA                              stosb				; Put the CR in the buffer
 10269 000014DE E80202                  	call	OUTT                    ; Echo it
 10270 000014E1 5F                              pop	di                      ; Get start of user buffer
 10271 000014E2 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10272 000014E5 FEC6                            inc	dh			; DH is length including CR
 10273                                  
 10274                                  COPYNEW:
 10275                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10276                                  	;mov	bp, es
 10277                                  	;mov	bx, ds
 10278                                  	;mov	es, bx
 10279                                  	;mov	ds, bp
 10280                                  	;mov	si, INBUF
 10281                                  	;mov	cl, dh
 10282                                  	;rep	movsb
 10283                                  	;retn
 10284                                  
 10285                                  	; CPMIO.ASM (MSDOS 6.0)
 10286                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10287                                  	;SAVE	<DS,ES>
 10288 000014E7 1E                      	PUSH	DS
 10289 000014E8 06                      	PUSH	ES
 10290                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10291 000014E9 1F                      	POP	DS
 10292 000014EA 07                      	POP	ES
 10293                                  
 10294                                  ;;hkn; INBUF is in DOSDATA
 10295 000014EB BE[FB01]                        MOV     SI,INBUF
 10296 000014EE 88F1                            MOV     CL,DH                   ; set up count
 10297 000014F0 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10298                                  OLDBAK_RETN:
 10299 000014F2 C3                              RETN
 10300                                  
 10301                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10302                                  
 10303                                  PHYCRLF:
 10304 000014F3 E81F01                  	CALL	CRLF
 10305 000014F6 EB9B                            JMP	short GETCH
 10306                                  
 10307                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10308                                  
 10309                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10310                                  
 10311                                  	; Note: Following routines were not used in IBMDOS.COM
 10312                                  	;	-CRTL+W, CRTL+U is not activated-
 10313                                  	;	but they were in the kernel code!?)
 10314                                  
 10315                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10316                                  	; DOSCODE:52B6h
 10317                                  
 10318                                  ;;;;;;;;
 10319                                  
 10320                                  ; 16/12/2022
 10321                                  %if 0
 10322                                  ;
 10323                                  ; Delete the previous line
 10324                                  ;
 10325                                  LineDel:
 10326                                  	OR      DH,DH
 10327                                  	JZ	short GETCH	 ; 06/12/2022
 10328                                  	Call    BackSpace
 10329                                  	JMP	short LineDel
 10330                                  
 10331                                  %endif
 10332                                  
 10333                                  ;
 10334                                  ; delete the previous word.
 10335                                  ;
 10336                                  WordDel:
 10337                                  WordLoop:
 10338                                  ;	Call    BackSpace               ; backspace the one spot
 10339                                  ;	OR      DH,DH
 10340                                  ;	JZ	short GetChj
 10341                                  ;	MOV     AL,[ES:DI-1]
 10342                                  ;	cmp     al,'0'
 10343                                  ;	jb	short GetChj
 10344                                  ;	cmp     al,'9'
 10345                                  ;	jbe	short WordLoop
 10346                                  ;	OR      AL,20h
 10347                                  ;	CMP     AL,'a'
 10348                                  ;	JB	short GetChj
 10349                                  ;	CMP     AL,'z'
 10350                                  ;	JBE	short WordLoop
 10351                                  ;GetChj: 
 10352                                  ;	JMP	GETCH
 10353                                  
 10354                                  ; 16/12/2022
 10355                                  %if 0
 10356                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10357                                  	; (Worddel is not called or jumped from anywhere!)
 10358                                  WordDel:
 10359                                  WordLoop:
 10360                                  	Call    BackSpace               ; backspace the one spot
 10361                                  	OR      DH,DH
 10362                                  	JZ	short GetChj
 10363                                  	MOV     AL,[ES:DI-1]
 10364                                  	cmp     al,'0'
 10365                                  	jb	short GetChj
 10366                                  	cmp     al,'9'
 10367                                  	jbe	short WordLoop
 10368                                  	OR      AL,20h
 10369                                  	CMP     AL,'a'
 10370                                  	JB	short GetChj
 10371                                  	CMP     AL,'z'
 10372                                  	JBE	short WordLoop
 10373                                  GetChj: 
 10374                                  	JMP	GETCH
 10375                                  
 10376                                  %endif
 10377                                  
 10378                                  ;;;;;;;;
 10379                                  
 10380                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10381                                  
 10382                                  ; The user wants to throw away what he's typed in and wants to start over.
 10383                                  ; We print the backslash and then go to the next line and tab to the correct
 10384                                  ; spot to begin the buffered input.
 10385                                  
 10386                                  KILNEW:
 10387 000014F8 B05C                            mov	al,'\'
 10388 000014FA E8E601                          call	OUTT            ;Print the CANCEL indicator
 10389 000014FD 5E                              pop	si		;Remember start of edit buffer
 10390                                  PUTNEW:
 10391 000014FE E81401                  	call	CRLF            ;Go to next line on screen
 10392 00001501 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10393 00001505 E84F02                  	call	TAB             ;Tab over
 10394 00001508 E96CFF                          JMP     NEWLIN		;Start over again
 10395                                  
 10396                                  ;	Destructively back up one character position
 10397                                  
 10398                                  BACKSP:
 10399                                  	; 09/09/2018
 10400 0000150B E80800                  	Call    BackSpace
 10401 0000150E EB83                    	JMP     short GETCH	; 15/01/2024
 10402                                  
 10403                                  	; 15/01/2024
 10404                                  ;User really wants an ESC character in his line
 10405                                  TWOESC:	
 10406 00001510 2EA0[6E0A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10407 00001514 EBA2                    	jmp	short SAVCH
 10408                                  
 10409                                  BackSpace:
 10410 00001516 08F6                    	or	dh,dh
 10411 00001518 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10412 0000151A E85800                  	call	BACKUP          ;Do the backup
 10413 0000151D 268A05                  	mov	al,[es:di]	;Get the deleted char
 10414 00001520 3C20                            cmp	al,20h	; ' '
 10415 00001522 730F                    	jnb	short OLDBAK	;Was a normal char
 10416 00001524 3C09                            cmp	al,c_HT ; 9
 10417 00001526 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10418                                  ;; 9/27/86 fix for ctrl-U backspace
 10419 00001528 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10420 0000152A 7407                    	JZ	short OLDBAK
 10421 0000152C 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10422 0000152E 7403                    	JZ	short OLDBAK
 10423                                  ;; 9/27/86 fix for ctrl-U backspace
 10424 00001530 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10425                                  OLDBAK:
 10426 00001533 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10427 00001539 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10428 0000153B 08FF                    	or	bh,bh
 10429 0000153D 74B3                            jz	short OLDBAK_RETN 
 10430                                  				;Not advanced in template, stay where we are
 10431 0000153F FECF                    	dec	bh		;Go back in template
 10432 00001541 4E                              dec	si
 10433 00001542 C3                      	retn
 10434                                  BAKTAB:
 10435 00001543 57                              push	di
 10436 00001544 4F                              dec	di		;Back up one char
 10437 00001545 FD                              std			;Go backward
 10438 00001546 88F1                            mov	cl,dh		;Number of chars currently in line
 10439 00001548 B020                            mov	al,20h	; ' '
 10440 0000154A 53                              push	bx
 10441 0000154B B307                            mov	bl,7		;Max
 10442 0000154D E30E                            jcxz	FIGTAB		;At start, do nothing
 10443                                  FNDPOS:
 10444 0000154F AE                              scasb			;Look back
 10445 00001550 7609                    	jbe	short CHKCNT
 10446 00001552 26807D0109              	cmp	byte [es:di+1],9
 10447 00001557 7409                    	jz	short HAVTAB	;Found a tab
 10448 00001559 FECB                    	dec	bl		;Back one char if non tab control char
 10449                                  CHKCNT:
 10450 0000155B E2F2                            loop	FNDPOS
 10451                                  FIGTAB:		
 10452 0000155D 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10453                                  HAVTAB:
 10454 00001562 28F3                    	sub	bl,dh
 10455 00001564 00D9                    	add	cl,bl
 10456 00001566 80E107                  	and	cl,7		;CX has correct number to erase
 10457 00001569 FC                      	cld			;Back to normal
 10458 0000156A 5B                      	pop	bx
 10459 0000156B 5F                      	pop	di
 10460 0000156C 74C5                    	jz	short OLDBAK	;Nothing to erase
 10461                                  TABBAK:
 10462 0000156E E80700                  	call	BACKMES
 10463 00001571 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10464 00001573 EBBE                    	jmp	short OLDBAK
 10465                                  
 10466                                  BACKUP:
 10467 00001575 FECE                            dec	dh		;Back up in line
 10468 00001577 4F                              dec	di
 10469                                  BACKMES:
 10470 00001578 B008                            mov	al,c_BS ; 8	;Backspace
 10471 0000157A E86601                          call	OUTT
 10472 0000157D B020                            mov	al,20h ; ' '	;Erase
 10473 0000157F E86101                          call	OUTT
 10474 00001582 B008                            mov	al,c_BS ; 8	;Backspace
 10475 00001584 E95C01                  	jmp	OUTT		;Done
 10476                                  
 10477                                  	; 15/01/2024
 10478                                  ;User really wants an ESC character in his line
 10479                                  ;TWOESC:	
 10480                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10481                                  ;	jmp	SAVCH
 10482                                  
 10483                                  ;Copy the rest of the template
 10484                                  COPYLIN:
 10485 00001587 88D9                            mov	cl,bl		;Total size of template
 10486 00001589 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10487 0000158B EB07                            jmp	short COPYEACH
 10488                                  
 10489                                  COPYSTR:
 10490 0000158D E83400                  	call	FINDOLD         ;Find the char
 10491 00001590 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10492                                  
 10493                                  ;Copy one char from template to line
 10494                                  COPYONE:
 10495 00001592 B101                            mov	cl,1
 10496                                  ;Copy CX chars from template to line
 10497                                  COPYEACH:
 10498 00001594 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10499 0000159A 38D6                    	cmp	dh,dl
 10500 0000159C 740F                            jz	short GETCH2		;At end of line, can't do anything
 10501 0000159E 38DF                            cmp	bh,bl
 10502 000015A0 740B                            jz	short GETCH2		;At end of template, can't do anything
 10503 000015A2 AC                              lodsb
 10504 000015A3 AA                              stosb
 10505 000015A4 E8D001                  	call	BUFOUT
 10506 000015A7 FEC7                            inc	bh			;Ahead in template
 10507 000015A9 FEC6                            inc	dh			;Ahead in line
 10508 000015AB E2E7                            loop	COPYEACH
 10509                                  GETCH2:
 10510 000015AD E9E3FE                          jmp	GETCH
 10511                                  
 10512                                  ;Skip one char in template
 10513                                  SKIPONE:
 10514 000015B0 38DF                    	cmp	bh,bl
 10515 000015B2 74F9                    	jz	short GETCH2		;At end of template
 10516 000015B4 FEC7                    	inc	bh			;Ahead in template
 10517 000015B6 46                      	inc	si
 10518 000015B7 E9D9FE                  	jmp	GETCH
 10519                                  
 10520                                  SKIPSTR:
 10521 000015BA E80700                  	call	FINDOLD                 ;Find out how far to go
 10522 000015BD 01CE                            add	si,cx			;Go there
 10523 000015BF 00CF                            add	bh,cl
 10524 000015C1 E9CFFE                          jmp	GETCH
 10525                                  
 10526                                  ;Get the next user char, and look ahead in template for a match
 10527                                  ;CX indicates how many chars to skip to get there on output
 10528                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10529                                  ;       address is popped off and a jump to GETCH is taken.
 10530                                  ;       Make sure nothing extra on stack when this routine
 10531                                  ;       is called!!! (no PUSHes before calling it).
 10532                                  
 10533                                  FINDOLD:
 10534 000015C4 E82BFE                          call	_$STD_CON_INPUT_NO_ECHO
 10535                                  
 10536                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10537                                  
 10538                                  	;CMP	AL,[SS:ESCCHAR]	
 10539                                  	;JNZ	SHORT FINDSETUP
 10540                                  
 10541                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10542                                  
 10543                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10544                                  
 10545 000015C7 2E3A06[6E0A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10546 000015CC 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10547                                  
 10548 000015CE E821FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10549 000015D1 EB1D                            JMP	SHORT NOTFND		; go try again
 10550                                  FINDSETUP:
 10551 000015D3 88D9                    	mov	cl,bl
 10552 000015D5 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10553 000015D7 7417                    	jz	short NOTFND	;At end of template
 10554 000015D9 49                              dec	cx		;Cannot point past end, limit search
 10555 000015DA 7414                            jz	short NOTFND	;If only one char in template, forget it
 10556 000015DC 06                      	push	es
 10557 000015DD 1E                      	push	ds
 10558 000015DE 07                      	pop	es
 10559 000015DF 57                      	push	di
 10560 000015E0 89F7                    	mov	di,si		;Template to ES:DI
 10561 000015E2 47                      	inc	di
 10562 000015E3 F2AE                    	repne	scasb		;Look
 10563 000015E5 5F                      	pop	di
 10564 000015E6 07                      	pop	es
 10565 000015E7 7507                    	jnz	short NOTFND	;Didn't find the char
 10566 000015E9 F6D1                            not	cl		;Turn how far to go into how far we went
 10567 000015EB 00D9                            add	cl,bl		;Add size of template
 10568 000015ED 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10569                                  FINDOLD_RETN:
 10570 000015EF C3                      	retn
 10571                                  
 10572                                  NOTFND:
 10573 000015F0 5D                              pop	bp              ;Chuck return address
 10574 000015F1 E99FFE                          jmp	GETCH
 10575                                  
 10576                                  REEDIT:
 10577 000015F4 B040                    	mov	al,'@'		;Output re-edit character
 10578 000015F6 E8EA00                  	call	OUTT
 10579 000015F9 5F                      	pop	di
 10580 000015FA 57                      	push	di
 10581 000015FB 06                      	push	es
 10582 000015FC 1E                      	push	ds
 10583 000015FD E8E7FE                  	call	COPYNEW		;Copy current line into template
 10584 00001600 1F                      	pop	ds
 10585 00001601 07                      	pop	es
 10586 00001602 5E                      	pop	si
 10587 00001603 88F3                    	mov	bl,dh		;Size of line is new size template
 10588 00001605 E9F6FE                  	jmp	PUTNEW		;Start over again
 10589                                  
 10590                                  EXITINS:
 10591                                  ENTERINS:
 10592 00001608 36F616[7905]            	not	byte [SS:INSMODE]
 10593 0000160D E983FE                  	jmp	GETCH
 10594                                  
 10595                                  ;Put a real live ^Z in the buffer (embedded)
 10596                                  CTRLZ:
 10597 00001610 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10598 00001612 E9A3FE                          jmp	SAVCH
 10599                                  
 10600                                  ;Output a CRLF
 10601                                  CRLF:
 10602 00001615 B00D                    	mov	al,c_CR ; 0Dh 
 10603 00001617 E8C900                  	call	OUTT
 10604 0000161A B00A                    	mov	al,c_LF ; 0Ah
 10605 0000161C E9C400                  	jmp	OUTT
 10606                                  
 10607                                  ;
 10608                                  ;----------------------------------------------------------------------------
 10609                                  ;
 10610                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10611                                  ;
 10612                                  ;	Input or output raw character from console, no echo
 10613                                  ;
 10614                                  ;	ENTRY	DL = -1 if input
 10615                                  ;		   =  output character if output
 10616                                  ;	EXIT	(AL) = input character if input
 10617                                  ;	USES	all
 10618                                  ;
 10619                                  ;----------------------------------------------------------------------------
 10620                                  ; 20/07/2018 - Retro DOS v3.0
 10621                                  
 10622                                  ; 04/05/2019 - Retro DOS v4.0
 10623                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10624                                  
 10625                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10626                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10627                                  
 10628                                  _$RAW_CON_IO:			; System call 6
 10629 0000161F 88D0                    	MOV	AL,DL
 10630 00001621 3CFF                    	CMP	AL,-1
 10631 00001623 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10632                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10633                                  	;jz	short rci1
 10634                                  	;jmp	short RAWOUT
 10635                                  	; 16/12/202
 10636                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10637                                  	;nop
 10638                                  rci1:
 10639                                  			; Get pointer to register save area
 10640 00001625 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10641 0000162A 31DB                    	XOR	BX,BX
 10642                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10643 0000162C E8CA20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10644                                          ;JC	SHORT RET17
 10645 0000162F 72BE                            jc	short FINDOLD_RETN
 10646 00001631 B401                    	MOV	AH,1
 10647 00001633 E8382F                  	CALL	IOFUNC
 10648 00001636 750B                    	JNZ	SHORT RESFLG
 10649 00001638 E8FB3B                  	CALL	SPOOLINT
 10650                                  	;OR	BYTE [ES:DI+16H],40H
 10651 0000163B 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10652 00001640 30C0                    	XOR	AL,AL
 10653                                  RET17:
 10654 00001642 C3                      	RETN
 10655                                  
 10656                                  RESFLG:
 10657                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10658 00001643 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10659                                  				; Reset user's zero flag
 10660                                  ;RILP:
 10661                                  rci0:
 10662 00001648 E8EB3B                  	CALL	SPOOLINT
 10663                                  ;
 10664                                  ;----------------------------------------------------------------------------
 10665                                  ;
 10666                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10667                                  ;
 10668                                  ;	Input raw character from console, no echo
 10669                                  ;
 10670                                  ;	ENTRY	none
 10671                                  ;	EXIT	(al) = character
 10672                                  ;	USES	all
 10673                                  ;
 10674                                  ;----------------------------------------------------------------------------
 10675                                  ;
 10676                                  
 10677                                  ;rci0:	invoke	SPOOLINT
 10678                                  
 10679                                  	;entry	$RAW_CON_INPUT
 10680                                  
 10681                                  	; 04/05/2019 - Retro DOS v4.0
 10682                                  
 10683                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10684                                  
 10685                                  _$RAW_CON_INPUT:		; System call 7
 10686 0000164B 53                      	push	bx
 10687 0000164C 31DB                    	XOR	BX,BX
 10688                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10689 0000164E E8A820                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10690 00001651 5B                      	pop	bx
 10691 00001652 72EE                    	JC	SHORT RET17
 10692 00001654 B401                    	MOV	AH,1
 10693 00001656 E8152F                  	CALL	IOFUNC
 10694                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10695                                  	;XOR	AH,AH
 10696                                          ;CALL	IOFUNC
 10697                                          ;RETN
 10698 00001659 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10699 0000165B B484                    	MOV	AH,84h
 10700 0000165D CD2A                    	INT	int_IBM  ; int 2Ah
 10701 0000165F EBE7                    	JMP	short rci0
 10702                                  rci5:	
 10703 00001661 30E4                    	XOR	AH,AH
 10704                                  	;CALL	IOFUNC
 10705                                  	;RETN
 10706                                  	; 18/12/2022
 10707 00001663 E9082F                  	jmp	IOFUNC
 10708                                  
 10709                                  ;       Output the character in AL to stdout
 10710                                  ;
 10711                                  	;entry	RAWOUT
 10712                                  RAWOUT:
 10713 00001666 53                      	PUSH    BX
 10714 00001667 BB0100                  	MOV     BX,1
 10715                                  
 10716                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10717 0000166A E88C20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10718 0000166D 721B                    	JC	SHORT RAWRET1
 10719                                  
 10720                                  	;
 10721                                  	; MSDOS 2.11
 10722                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10723                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10724                                          ;PUSH	DS
 10725                                          ;PUSH	SI
 10726                                          ;LDS	SI,[SI+19H]		; output to special?
 10727                                  	;TEST	BYTE [SI+4],ISSPEC
 10728                                  	;POP	SI
 10729                                  	;
 10730                                          
 10731                                  	; MSDOS 3.3 & MSDOS 6.0
 10732                                  	;mov	bx,[si+5]
 10733 0000166F 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10734                                   ;
 10735                                   ; If we are a network handle OR if we are not a local device then go do the
 10736                                   ; output the hard way.
 10737                                   ;	
 10738                                  	;and	bx,8080h
 10739 00001672 81E38080                	AND	BX,sf_isnet+devid_device
 10740                                  	;cmp	bx,80h
 10741 00001676 81FB8000                	CMP	BX,devid_device
 10742 0000167A 7510                    	jnz     short RAWNORM
 10743 0000167C 1E                      	push    ds
 10744                                  	;lds	bx,[si+7]
 10745 0000167D C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10746                                  	;test	byte [bx+4],10h
 10747 00001680 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10748                                  	;
 10749                                  
 10750 00001684 1F                      	POP	DS
 10751 00001685 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10752                                  
 10753 00001687 CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10754                                  
 10755                                  	;JMP	SHORT RAWRET
 10756                                  ;RAWNORM:
 10757                                  ;	CALL    RAWOUT3
 10758                                  RAWRET: 
 10759 00001689 F8                      	CLC
 10760                                  RAWRET1:
 10761 0000168A 5B                      	POP     BX
 10762                                  RAWRET2:
 10763 0000168B C3                      	RETN
 10764                                  RAWNORM:
 10765 0000168C E80700                  	CALL    RAWOUT3
 10766 0000168F EBF8                    	jmp	short RAWRET
 10767                                  
 10768                                  ;	Output the character in AL to handle in BX
 10769                                  ;
 10770                                  ;	entry	RAWOUT2
 10771                                  
 10772                                  RAWOUT2:
 10773                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10774                                  	;JC	SHORT RET18
 10775 00001691 E86520                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10776 00001694 72F5                    	JC	SHORT RAWRET2
 10777                                  RAWOUT3:
 10778 00001696 50                      	PUSH	AX
 10779 00001697 EB0C                    	JMP	SHORT RAWOSTRT
 10780                                  ROLP:
 10781 00001699 E89A3B                  	CALL	SPOOLINT
 10782                                  
 10783                                  	; 01/05/2019 - Retro DOS v4.0
 10784                                  
 10785                                  	; MSDOS 6.0
 10786                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10787                                  	; 17/12/2022
 10788 0000169C 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 10789                                  	;or	word [ss:DOS34_FLAG],200h
 10790                                  				;AN002; set control break
 10791                                  	;invoke DSKSTATCHK
 10792 000016A2 E80D3B                  	call	DSKSTATCHK	;AN002; check control break
 10793                                  RAWOSTRT:
 10794 000016A5 B403                    	MOV	AH,3
 10795 000016A7 E8C42E                  	CALL	IOFUNC
 10796 000016AA 74ED                    	JZ	SHORT ROLP
 10797                                  
 10798                                  	; MSDOS 6.0
 10799                                  ;SR;
 10800                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10801                                  ;the user failed. We do not send a char if this happens. We however return
 10802                                  ;to the caller with carry clear because this DOS call does not return any
 10803                                  ;status. 
 10804                                  ;
 10805 000016AC 40                      	inc	ax		;fail on I24 if ax = -1
 10806 000016AD 58                      	POP	AX
 10807 000016AE 7405                    	jz	short nosend	;yes, do not send char
 10808 000016B0 B402                    	MOV	AH,2
 10809 000016B2 E8B92E                  	call	IOFUNC
 10810                                  nosend:
 10811 000016B5 F8                      	CLC			; Clear carry indicating successful
 10812 000016B6 C3                      	retn
 10813                                  
 10814                                  	; MSDOS 3.3 & MSDOS 2.11
 10815                                  	;POP	AX
 10816                                  	;MOV	AH,2
 10817                                          ;CALL	IOFUNC
 10818                                  	;CLC			; Clear carry indicating successful
 10819                                  ;RET18:    
 10820                                  	;RETN
 10821                                  
 10822                                  ;;10/08/2018
 10823                                  ; 20/07/2018 - Retro DOS v3.0
 10824                                  ; ---------------------------------------------------------------------------
 10825                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10826                                  ; ---------------------------------------------------------------------------
 10827                                  
 10828                                  ; This routine is called at DOS init
 10829                                  
 10830                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10831                                  ;;OUTMES:
 10832                                  ;;	;LODS	CS:BYTE PTR [SI]
 10833                                  ;;	CS	LODSB
 10834                                  ;;	CMP     AL,"$" ; 24h
 10835                                  ;;	JZ	SHORT RET18
 10836                                  ;;	CALL	OUTT
 10837                                  ;;	JMP     SHORT OUTMES
 10838                                  
 10839                                  ; ---------------------------------------------------------------------------
 10840                                  
 10841                                  ; 20/07/2018 - Retro DOS v3.0
 10842                                  
 10843                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10844                                  
 10845                                  ;
 10846                                  ;----------------------------------------------------------------------------
 10847                                  ;
 10848                                  ; Inputs:
 10849                                  ;	AX=0 save the DEVCALL request packet
 10850                                  ;	  =1 restore the DEVCALL request packet
 10851                                  ; Function:
 10852                                  ;	save or restore the DEVCALL packet
 10853                                  ; Returns:
 10854                                  ;	none
 10855                                  ;
 10856                                  ;----------------------------------------------------------------------------
 10857                                  ;
 10858                                  
 10859                                  ; 04/05/2019 - Retro DOS v4.0
 10860                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 10861                                  
 10862                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10863                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 10864                                  
 10865                                  ; 12/05/2019
 10866                                  
 10867                                  Save_Restore_Packet:
 10868 000016B7 1E                      	PUSH	DS
 10869 000016B8 06                      	PUSH	ES
 10870 000016B9 56                      	PUSH	SI
 10871 000016BA 57                      	PUSH	DI
 10872                                  
 10873                                  	; 16/12/2022
 10874                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10875                                  	; 09/09/2018
 10876 000016BB BF[6C0D]                	mov	di,FAKE_STACK_2F 
 10877 000016BE BE[5A03]                	mov	si,DEVCALL
 10878                                  	;
 10879 000016C1 83F800                  	CMP	AX,0		; save packet
 10880 000016C4 7402                    	JZ	short save_packet ; 16/12/2022
 10881                                  	;je	short set_seg
 10882                                  
 10883                                  	; MSDOS 6.0
 10884                                  restore_packet:
 10885                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 10886                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 10887                                  	; MSDOS 3.3
 10888                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10889                                  	;mov	di,DEVCALL  ; 09/09/2018
 10890                                  	;
 10891                                  	;JMP	short set_seg
 10892                                  
 10893                                  	; 16/12/2022	
 10894                                  	; 09/09/2018
 10895 000016C6 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10896                                  
 10897                                  ; 16/12/2022
 10898                                  %if 0
 10899                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10900                                  	cmp	ax,0		; save packet
 10901                                  	jz	short save_packet
 10902                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 10903                                  	mov	di,DEVCALL 
 10904                                  	jmp	short set_seg
 10905                                  
 10906                                  	; MSDOS 6.0
 10907                                  save_packet:
 10908                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 10909                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 10910                                  	; 09/09/2018
 10911                                  	; MSDOS 3.3
 10912                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10913                                  	;mov	si,DEVCALL ; 09/09/2018
 10914                                  
 10915                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10916                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10917                                  	mov	si,DEVCALL
 10918                                  %endif
 10919                                  
 10920                                  ; 16/12/2022
 10921                                  save_packet:
 10922                                  ;set_seg:
 10923                                  	; MSDOS 3.3
 10924                                  	;mov	ax,cs
 10925                                  
 10926                                  	; MSDOS 6.0
 10927 000016C8 8CD0                    	MOV	AX,SS		; set DS,ES to DOSDATA	
 10928                                  
 10929 000016CA 8ED8                    	MOV	DS,AX
 10930 000016CC 8EC0                    	MOV	ES,AX
 10931 000016CE B90B00                  	MOV	CX,11		; 11 words to move
 10932 000016D1 F3A5                    	REP	MOVSW
 10933                                  
 10934 000016D3 5F                      	POP	DI
 10935 000016D4 5E                      	POP	SI
 10936 000016D5 07                      	POP	ES
 10937 000016D6 1F                      	POP	DS
 10938 000016D7 C3                      	retn
 10939                                  
 10940                                  ;============================================================================
 10941                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10942                                  ;============================================================================
 10943                                  ; 20/07/2018 - Retro DOS v3.0
 10944                                  ; 01/05/2019 - Retro DOS v4.0
 10945                                  
 10946                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10947                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10948                                  ;hkn;	not valid. 
 10949                                  
 10950                                  ;
 10951                                  ;----------------------------------------------------------------------------
 10952                                  ;
 10953                                  ;**	$STD_CON_INPUT - System Call 1
 10954                                  ;
 10955                                  ;	Input character from console, echo
 10956                                  ;
 10957                                  ;	ENTRY	none
 10958                                  ;	EXIT	(al) = character
 10959                                  ;	USES	ALL
 10960                                  ;
 10961                                  ;----------------------------------------------------------------------------
 10962                                  ;
 10963                                  
 10964                                  _$STD_CON_INPUT:	;System call 1
 10965                                  	
 10966 000016D8 E817FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10967 000016DB 50                      	PUSH	AX
 10968 000016DC E80400                  	CALL	OUTT
 10969 000016DF 58                      	POP	AX
 10970                                  CON_INPUT_RETN:	
 10971 000016E0 C3                      	RETN
 10972                                  
 10973                                  ;
 10974                                  ;----------------------------------------------------------------------------
 10975                                  ;
 10976                                  ;**	$STD_CON_OUTPUT - System Call 2
 10977                                  ;
 10978                                  ;	Output character to console
 10979                                  ;
 10980                                  ;	ENTRY	(dl) = character
 10981                                  ;	EXIT	none
 10982                                  ;	USES	all
 10983                                  ;
 10984                                  ;----------------------------------------------------------------------------
 10985                                  ;
 10986                                  
 10987                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 10988                                  
 10989                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10990                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 10991                                  
 10992                                  _$STD_CON_OUTPUT:	;System call 2
 10993                                  
 10994 000016E1 88D0                    	MOV	AL,DL
 10995                                  OUTT:
 10996 000016E3 3C20                    	CMP	AL,20H ; " "
 10997 000016E5 725C                    	JB	SHORT CTRLOUT
 10998 000016E7 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10999 000016E9 7405                    	JZ	SHORT OUTCH
 11000                                  OUTCHA:	
 11001                                  	;INC	BYTE PTR [CARPOS]
 11002 000016EB 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11003                                  OUTCH:
 11004 000016F0 1E                      	PUSH	DS
 11005 000016F1 56                      	PUSH	SI
 11006                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11007                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11008 000016F2 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11009                                  	;AND	BYTE [SS:CHARCO],00111111B
 11010                                  	; 01/05/2019 - Retro DOS v4.0
 11011 000016F7 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11012 000016FD 7505                    	JNZ	SHORT OUTSKIP
 11013                                  
 11014 000016FF 50                      	PUSH	AX
 11015 00001700 E8613B                  	CALL	STATCHK
 11016 00001703 58                      	POP	AX
 11017                                  OUTSKIP:
 11018 00001704 E85FFF                  	CALL	RAWOUT				;output the character
 11019                                  
 11020 00001707 5E                      	POP	SI
 11021 00001708 1F                      	POP	DS
 11022                                  
 11023                                  	;TEST	BYTE PTR [PFLAG],-1
 11024                                  	;retz
 11025 00001709 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11026 0000170F 74CF                    	JZ	SHORT CON_INPUT_RETN
 11027                                  
 11028 00001711 53                      	PUSH	BX
 11029 00001712 1E                      	PUSH	DS
 11030 00001713 56                      	PUSH	SI
 11031 00001714 BB0100                  	MOV	BX,1
 11032                                  	; 20/07/2018 - Retro DOS v3.0
 11033                                  	; MSDOS 3.3
 11034                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11035 00001717 E8DF1F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11036                                  					;hkn; to sft entry
 11037 0000171A 7224                    	JC	SHORT TRIPOPJ
 11038                                  
 11039                                  	; 01/05/2019 - Retro DOS v4.0
 11040                                  
 11041                                  	;mov	bx,[si+5]
 11042 0000171C 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11043                                  	;test	bx,8000h
 11044                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11045 0000171F F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11046 00001722 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11047                                  	;;test	bx,80h
 11048                                  	;TEST	BX,devid_device 		; output to file?
 11049 00001724 F6C380                  	test	bl,devid_device ; 80h
 11050 00001727 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11051                                  	; 14/03/2018
 11052                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11053                                  	;jc	short TRIPOPJ
 11054                                  	; MSDOS 2.11
 11055                                  	;test	byte [SI+18H], 80h
 11056                                  	;jz	short TRIPOPJ
 11057 00001729 BB0400                  	MOV	BX,4
 11058 0000172C E8CA1F                  	CALL	GET_IO_SFT
 11059 0000172F 720F                    	JC	SHORT TRIPOPJ
 11060                                  	;;test	word [si+5], 800h
 11061                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11062                                  	;test	byte [si+6],8 ; 08/11/2022
 11063 00001731 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11064                                  						; StdPrn redirected?
 11065                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11066                                  	;jz	LISSTRT2 ; 10/08/2018 
 11067                                  	; 16/12/2022
 11068 00001735 7503                    	jnz	short outch1
 11069 00001737 E98700                  	jmp	LISSTRT2
 11070                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11071                                  	;jz	short LISSTRT2J
 11072                                  outch1:
 11073                                  	;MOV	BYTE [PFLAG],0
 11074 0000173A 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11075                                  	; MSDOS 2.11
 11076                                  	;mov	bx,4
 11077                                  	;jmp	short LISSTRT2
 11078                                  	
 11079                                  TRIPOPJ:
 11080                                  	; 20/07/2018
 11081 00001740 E98100                  	JMP	TRIPOP
 11082                                  
 11083                                  	; 16/12/2022
 11084                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11085                                  ;LISSTRT2J:
 11086                                  ;	JMP	LISSTRT2
 11087                                  
 11088                                  CTRLOUT:
 11089 00001743 3C0D                    	CMP	AL,c_CR ; 0Dh
 11090 00001745 7420                    	JZ	SHORT ZERPOS
 11091 00001747 3C08                    	CMP	AL,c_BS ; 8
 11092 00001749 7424                    	JZ	SHORT BACKPOS
 11093 0000174B 3C09                    	CMP	AL,c_HT ; 9
 11094 0000174D 75A1                    	JNZ	SHORT OUTCH
 11095                                  	;MOV	AL,[CARPOS]
 11096 0000174F 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11097 00001753 0CF8                    	OR	AL,0F8H
 11098 00001755 F6D8                    	NEG	AL
 11099                                  TAB:
 11100 00001757 51                      	PUSH	CX
 11101 00001758 88C1                    	MOV	CL,AL
 11102 0000175A B500                    	MOV	CH,0
 11103 0000175C E307                    	JCXZ	POPTAB
 11104                                  TABLP:
 11105 0000175E B020                    	MOV	AL," "
 11106 00001760 E880FF                  	CALL	OUTT
 11107 00001763 E2F9                    	LOOP	TABLP
 11108                                  POPTAB:
 11109 00001765 59                      	POP	CX
 11110                                  
 11111 00001766 C3                      	RETN
 11112                                  
 11113                                  ZERPOS:
 11114                                  	;MOV	BYTE PTR [CARPOS],0
 11115 00001767 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11116                                  	; 10/08/2018
 11117 0000176D EB81                    	JMP	short OUTCH ; 04/05/2019
 11118                                  	
 11119                                  	; 18/12/2022
 11120                                  ;OUTJ:	
 11121                                  	;JMP	OUTT
 11122                                  
 11123                                  BACKPOS:
 11124                                  	;DEC	BYTE PTR [CARPOS]
 11125 0000176F 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11126 00001774 E979FF                  	JMP	OUTCH
 11127                                  
 11128                                  BUFOUT:
 11129 00001777 3C20                    	CMP	AL," "
 11130 00001779 7315                    	JAE	SHORT OUTJ		;Normal char
 11131 0000177B 3C09                    	CMP	AL,9
 11132 0000177D 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11133                                  	;DOS 3.3  7/14/86
 11134 0000177F 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11135 00001781 740D                    	JZ	short CTRLU
 11136 00001783 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11137 00001785 7409                    	JZ	short CTRLU
 11138                                  NOT_CTRLU:
 11139                                  	;DOS 3.3  7/14/86
 11140 00001787 50                      	PUSH	AX
 11141 00001788 B05E                    	MOV	AL,"^"
 11142 0000178A E856FF                  	CALL	OUTT		;Print '^' before control chars
 11143 0000178D 58                      	POP	AX
 11144 0000178E 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11145                                  CTRLU:
 11146                                  	;CALL	OUTT
 11147                                  	; 18/12/2022
 11148                                  OUTJ:
 11149 00001790 E950FF                  	jmp	OUTT
 11150                                  ;BUFOUT_RETN:
 11151                                  	;RETN
 11152                                  
 11153                                  ;
 11154                                  ;----------------------------------------------------------------------------
 11155                                  ;
 11156                                  ;**	$STD_AUX_INPUT - System Call 3
 11157                                  ;
 11158                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11159                                  ;
 11160                                  ;	ENTRY	none
 11161                                  ;	EXIT	(al) = character
 11162                                  ;	USES	all
 11163                                  ;
 11164                                  ;----------------------------------------------------------------------------
 11165                                  ;
 11166                                  
 11167                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11168                                  
 11169                                  _$STD_AUX_INPUT:	;System call 3
 11170                                  
 11171 00001793 E8CE3A                  	CALL	STATCHK
 11172 00001796 BB0300                  	MOV	BX,3
 11173 00001799 E85D1F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11174                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11175                                  	;retc
 11176                                  	; 16/12/2022
 11177                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11178                                  	;JC	SHORT BUFOUT_RETN
 11179                                  	;JMP	SHORT TAISTRT
 11180                                  	; 07/12/2022
 11181 0000179C 7304                    	jnc	SHORT TAISTRT
 11182 0000179E C3                      	retn	
 11183                                  
 11184                                  AUXILP:
 11185 0000179F E8943A                  	CALL	SPOOLINT
 11186                                  TAISTRT:
 11187 000017A2 B401                    	MOV	AH,1
 11188 000017A4 E8C72D                  	CALL	IOFUNC
 11189 000017A7 74F6                    	JZ	SHORT AUXILP
 11190 000017A9 30E4                    	XOR	AH,AH
 11191                                  	; 16/12/2022
 11192                                  	;CALL	IOFUNC
 11193                                  	;RETN
 11194                                  	; 07/12/2022
 11195 000017AB E9C02D                  	jmp	IOFUNC
 11196                                  
 11197                                  ;
 11198                                  ;----------------------------------------------------------------------------
 11199                                  ;
 11200                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11201                                  ;
 11202                                  ;	ENTRY	(dl) = character
 11203                                  ;	EXIT	none
 11204                                  ;	USES	all
 11205                                  ;
 11206                                  ;----------------------------------------------------------------------------
 11207                                  ;
 11208                                  
 11209                                  _$STD_AUX_OUTPUT:	;System call 4
 11210                                  
 11211 000017AE 53                      	PUSH	BX
 11212 000017AF BB0300                  	MOV	BX,3
 11213 000017B2 EB04                    	JMP	SHORT SENDOUT
 11214                                  
 11215                                  ;
 11216                                  ;----------------------------------------------------------------------------
 11217                                  ;
 11218                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11219                                  ;
 11220                                  ;	ENTRY	(dl) = character
 11221                                  ;	EXIT	none
 11222                                  ;	USES	all
 11223                                  ;
 11224                                  ;----------------------------------------------------------------------------
 11225                                  ;
 11226                                  
 11227                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11228                                  
 11229 000017B4 53                      	PUSH	BX
 11230 000017B5 BB0400                  	MOV	BX,4
 11231                                  
 11232                                  SENDOUT:
 11233 000017B8 88D0                    	MOV	AL,DL
 11234 000017BA 50                      	PUSH	AX
 11235 000017BB E8A63A                  	CALL	STATCHK
 11236 000017BE 58                      	POP	AX
 11237 000017BF 1E                      	PUSH	DS
 11238 000017C0 56                      	PUSH	SI
 11239                                  LISSTRT2:
 11240 000017C1 E8CDFE                  	CALL	RAWOUT2
 11241                                  TRIPOP:
 11242 000017C4 5E                      	POP	SI
 11243 000017C5 1F                      	POP	DS
 11244 000017C6 5B                      	POP	BX
 11245                                  SCIS_RETN:	; 20/07/2018
 11246 000017C7 C3                      	RETN
 11247                                  ;
 11248                                  ;----------------------------------------------------------------------------
 11249                                  ;
 11250                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11251                                  ;
 11252                                  ;	Check console input status
 11253                                  ;
 11254                                  ;	ENTRY	none
 11255                                  ;	EXIT	AL = -1 character available, = 0 no character
 11256                                  ;	USES	all
 11257                                  ;
 11258                                  ;----------------------------------------------------------------------------
 11259                                  ;
 11260                                  
 11261                                  _$STD_CON_INPUT_STATUS:		 ;System call 11
 11262                                  
 11263 000017C8 E8993A                  	CALL	STATCHK
 11264 000017CB B000                    	MOV	AL,0			; no xor!!
 11265                                  	;retz
 11266 000017CD 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11267 000017CF 0CFF                    	OR	AL,-1
 11268                                  ;SCIS_RETN:
 11269 000017D1 C3                      	RETN
 11270                                  
 11271                                  ;
 11272                                  ;----------------------------------------------------------------------------
 11273                                  ;
 11274                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11275                                  ;
 11276                                  ;	Flush console input buffer and perform call in AL
 11277                                  ;
 11278                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11279                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11280                                  ;		return arguments for the fcn supplied in (AL)
 11281                                  ;	USES	all
 11282                                  ;
 11283                                  ;----------------------------------------------------------------------------
 11284                                  ;
 11285                                  
 11286                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11287                                  
 11288 000017D2 50                      	PUSH	AX
 11289 000017D3 52                      	PUSH	DX
 11290 000017D4 31DB                    	XOR	BX,BX
 11291 000017D6 E8201F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11292                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11293 000017D9 7205                    	JC	SHORT BADJFNCON
 11294 000017DB B404                    	MOV	AH,4
 11295 000017DD E88E2D                  	CALL	IOFUNC
 11296                                  
 11297                                  BADJFNCON:
 11298 000017E0 5A                      	POP	DX
 11299 000017E1 58                      	POP	AX
 11300 000017E2 88C4                    	MOV	AH,AL
 11301 000017E4 3C01                    	CMP	AL,1
 11302 000017E6 7413                    	JZ	SHORT REDISPJ
 11303 000017E8 3C06                    	CMP	AL,6
 11304 000017EA 740F                    	JZ	SHORT REDISPJ
 11305 000017EC 3C07                    	CMP	AL,7
 11306 000017EE 740B                    	JZ	SHORT REDISPJ
 11307 000017F0 3C08                    	CMP	AL,8
 11308 000017F2 7407                    	JZ	SHORT REDISPJ
 11309 000017F4 3C0A                    	CMP	AL,10
 11310 000017F6 7403                    	JZ	SHORT REDISPJ
 11311 000017F8 B000                    	MOV	AL,0
 11312 000017FA C3                      	RETN
 11313                                  
 11314                                  REDISPJ:
 11315 000017FB FA                      	CLI
 11316                                  	;transfer REDISP
 11317 000017FC E9C8EB                  	JMP	REDISP
 11318                                  
 11319                                  ;============================================================================
 11320                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11321                                  ;============================================================================
 11322                                  ; 20/07/2018 - Retro DOS v3.0
 11323                                  ; 17/05/2019 - Retro DOS v4.0
 11324                                  
 11325                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11326                                  ;
 11327                                  ;	$GET_FCB_POSITION
 11328                                  ;	$FCB_DELETE
 11329                                  ;	$GET_FCB_FILE_LENGTH
 11330                                  ;	$FCB_CLOSE
 11331                                  ;	$FCB_RENAME
 11332                                  ;	SaveFCBInfo
 11333                                  ;	ResetLRU
 11334                                  ;	SetOpenAge
 11335                                  ;	LRUFCB
 11336                                  ;	FCBRegen
 11337                                  ;	BlastSFT
 11338                                  ;	CheckFCB
 11339                                  ;	SFTFromFCB
 11340                                  ;	FCBHardErr
 11341                                  ;
 11342                                  ;	Revision history:
 11343                                  ;
 11344                                  ;		Created: ARR 4 April 1983"
 11345                                  ;			 MZ  6 June  1983 completion of functions
 11346                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11347                                  ;					  times.  Change so successive closes work by
 11348                                  ;					  always returning OK.	Also, detect I/O to
 11349                                  ;					  already closed FCB and return EOF.
 11350                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11351                                  ;					  out of sft into FCB for reconnection
 11352                                  ;
 11353                                  ;		A000	 version 4.00  Jan. 1988
 11354                                  
 11355                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11356                                  ;----------------------------------------------------------------------------
 11357                                  ;
 11358                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11359                                  ;	extent and next record field and set the random record field to point
 11360                                  ;	to that record
 11361                                  ;
 11362                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11363                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11364                                  ;   Registers modified: all
 11365                                  ;
 11366                                  ;----------------------------------------------------------------------------
 11367                                  ;
 11368                                  
 11369                                  _$GET_FCB_POSITION:
 11370 000017FF E8E004                  	call	GetExtended		; point to FCB
 11371 00001802 E8B004                  	call	GetExtent		; DX:AX is current record
 11372                                  	;mov	[si+21h],ax
 11373 00001805 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11374                                  	;mov	[si+23h],dl
 11375 00001808 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11376                                  	;cmp	word [si+0Eh],64
 11377 0000180B 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11378 0000180F 7303                    	JAE	short GetFCBBye
 11379                                  	;mov	[si+24h],dh
 11380 00001811 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11381                                  GoodPath:	; 16/12/2022
 11382                                  GetFCBBye:
 11383 00001814 E989EE                  	jmp	FCB_RET_OK
 11384                                  
 11385                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11386                                  ;----------------------------------------------------------------------------
 11387                                  ;
 11388                                  ;**	$FCB_Delete - Delete from FCB Template
 11389                                  ;
 11390                                  ;	given an FCB, remove all directory entries in the current
 11391                                  ;	directory that have names that match the FCB's ?  marks.
 11392                                  ;
 11393                                  ;	ENTRY	(DS:DX) = address of FCB
 11394                                  ;	EXIT	entries matching the FCB are deleted
 11395                                  ;		(al) = ff iff no entries were deleted
 11396                                  ;	USES	all
 11397                                  ;
 11398                                  ;----------------------------------------------------------------------------
 11399                                  ;
 11400                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11401                                  
 11402                                  _$FCB_DELETE:		; System call 19
 11403                                  					; OpenBuf is in DOSDATA
 11404 00001817 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11405                                  
 11406 0000181A E80754                  	call	TransFCB		; convert FCB to path
 11407 0000181D 7207                    	JC	short BadPath 		; signal no deletions
 11408                                  
 11409 0000181F 16                      	push	SS
 11410 00001820 1F                      	pop	DS			; SS is DOSDATA
 11411                                  
 11412 00001821 E8880D                  	call	DOS_DELETE		; wham
 11413                                  	;JC	short BadPath
 11414                                  	; 16/12/2022
 11415 00001824 73EE                    	jnc 	short GoodPath
 11416                                  ;GoodPath:
 11417                                  ;	;jmp	FCB_RET_OK		; do a good return
 11418                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11419                                  ;	jmp	short GetFCBBye
 11420                                  
 11421                                  BadPath:
 11422                                  	; Error code is in AX
 11423                                  
 11424 00001826 E97AEE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11425                                  
 11426                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11427                                  ;----------------------------------------------------------------------------
 11428                                  ;
 11429                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11430                                  ;	file in records (rounded up if partial).
 11431                                  ;
 11432                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11433                                  ;   Outputs:	Random record field updated to reflect the number of records
 11434                                  ;   Registers modified: all
 11435                                  ;
 11436                                  ;----------------------------------------------------------------------------
 11437                                  ;
 11438                                  	; 15/01/2024
 11439                                  
 11440                                  _$GET_FCB_FILE_LENGTH:
 11441                                  
 11442 00001829 E8B604                  	call	GetExtended		; get real FCB pointer
 11443                                  					; DX points to Input FCB
 11444                                  
 11445                                  					; OpenBuf is in DOSDATA
 11446 0000182C BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11447                                  
 11448 0000182F 1E                      	push	ds			; save pointer to true FCB
 11449 00001830 56                      	push	si
 11450 00001831 E8F053                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11451 00001834 5E                      	pop	si
 11452 00001835 1F                      	pop	ds
 11453 00001836 72EE                    	JC	short BadPath
 11454 00001838 1E                      	push	ds			; save pointer
 11455 00001839 56                      	push	si
 11456 0000183A 16                      	push	ss		
 11457 0000183B 1F                      	pop	ds
 11458 0000183C E87F11                  	call	GET_FILE_INFO		; grab the info
 11459 0000183F 5E                      	pop	si			; get pointer back
 11460 00001840 1F                      	pop	ds
 11461 00001841 72E3                    	JC	short BadPath 		; invalid something
 11462                                  	; 15/01/2024
 11463                                  	;MOV	DX,BX (*)		; get high order size
 11464                                  	;MOV	AX,DI (**)		; get low order size
 11465 00001843 89D8                    	mov	ax,bx ; hw of file size
 11466                                  	;
 11467                                  	;mov	bx,[si+0Eh]
 11468 00001845 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11469 00001848 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11470 0000184A 7502                    	JNZ	short GetSize 		; not empty
 11471                                  	;MOV	BX,128
 11472 0000184C B380                    	mov	bl,128	; 15/01/2024
 11473                                  GetSize:
 11474                                  	; 15/01/2024
 11475                                  	;MOV	DI,AX			; save low order word
 11476                                  	;MOV	AX,DX			; move high order for divide
 11477                                  	;xchg	ax,dx ; (*)
 11478                                  	; ax = hw of file size
 11479                                  
 11480 0000184E 31D2                    	XOR	DX,DX			; clear out high
 11481 00001850 F7F3                    	DIV	BX			; wham
 11482 00001852 50                      	PUSH	AX			; save dividend
 11483 00001853 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11484 00001855 F7F3                    	DIV	BX			; wham
 11485 00001857 89D1                    	MOV	CX,DX			; save remainder
 11486 00001859 5A                      	POP	DX			; get high order dividend
 11487 0000185A E306                    	JCXZ	LengthStore		; no roundup
 11488 0000185C 83C001                  	ADD	AX,1
 11489 0000185F 83D200                  	ADC	DX,0			; 32-bit increment
 11490                                  LengthStore:
 11491                                  	;mov	[si+21h],ax
 11492 00001862 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11493                                  	;mov	[si+23h],dl
 11494 00001865 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11495 00001868 08F6                    	OR	DH,DH
 11496 0000186A 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11497                                  	;mov	[si+24h],dh
 11498 0000186C 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11499                                  	; 16/12/2022
 11500                                  GoodRet:
 11501                                  	;jmp	FCB_RET_OK
 11502 0000186F EBA3                    	jmp	short GoodPath
 11503                                  
 11504                                  ;Break <$FCB_Close - close a file>
 11505                                  ;----------------------------------------------------------------------------
 11506                                  ;
 11507                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11508                                  ;	as the FCB may be used for further I/O
 11509                                  ;
 11510                                  ;   Inputs:	DS:DX point to FCB
 11511                                  ;   Outputs:	AL = FF if file was not found on disk
 11512                                  ;   Registers modified: all
 11513                                  ;
 11514                                  ;----------------------------------------------------------------------------
 11515                                  ;
 11516                                  
 11517                                  _$FCB_CLOSE:		; System call 16
 11518                                  
 11519 00001871 30C0                    	XOR	AL,AL			; default search attributes
 11520 00001873 E86C04                  	call	GetExtended		; DS:SI point to real FCB
 11521 00001876 7403                    	JZ	short NoAttr		; not extended
 11522 00001878 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11523                                  NoAttr:
 11524                                  					; SS override
 11525 0000187B 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11526 0000187F E8CE03                  	call	SFTFromFCB
 11527 00001882 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11528                                  
 11529                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11530                                  	; there is no need to set the SFT's attribute.
 11531                                  
 11532                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11533                                  	;;; done
 11534                                  
 11535                                  	;mov	al,[es:di+4]
 11536 00001884 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11537 00001888 30E4                    	XOR	AH,AH
 11538 0000188A 50                      	PUSH	AX
 11539                                  
 11540                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11541                                  	;;; done
 11542                                  
 11543 0000188B E8C35B                  	call	CheckShare
 11544 0000188E 7508                    	JNZ	short NoStash
 11545 00001890 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11546                                  	;mov	[es:di+4],al
 11547 00001894 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11548                                  NoStash:
 11549                                  	;mov	ax,[si+14h]
 11550 00001898 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11551                                  	;mov	[es:di+0Fh],ax
 11552 0000189B 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11553                                  	;mov	ax,[si+16h]
 11554 0000189F 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11555                                  	;mov	[es:di+0Dh],ax
 11556 000018A2 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11557                                  	;mov	ax,[si+10h]
 11558 000018A6 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11559                                  	;mov	[es:di+11h],ax
 11560 000018A9 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11561                                  	;mov	ax,[si+12h]
 11562 000018AD 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11563                                  	;mov	[es:di+13h],ax
 11564 000018B0 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11565                                  	;or	word [es:di+5],4000h
 11566                                  	; 17/12/2022
 11567 000018B4 26804D0640              	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11568                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11569 000018B9 16                      	push	ss
 11570 000018BA 1F                      	pop	ds
 11571 000018BB E8FC16                  	call	DOS_CLOSE	; wham
 11572 000018BE C43E[9E05]              	LES	DI,[THISSFT]
 11573                                  
 11574                                  	;;; 9/8/86 F.C. restore SFT attribute
 11575 000018C2 59                      	POP	CX
 11576                                  	;mov	[es:di+4],cl
 11577 000018C3 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11578                                  	;;; 9/8/86 F.C. restore SFT attribute
 11579                                  
 11580 000018C7 9C                      	PUSHF
 11581                                  	;test	word [es:di],0FFFFh
 11582                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11583                                  				; zero ref count gets blasted
 11584 000018C8 26833D00                	cmp	word [ES:DI],0
 11585 000018CC 7507                    	jnz     short CloseOK
 11586 000018CE 50                      	PUSH	AX
 11587 000018CF B04D                    	MOV	AL,'M'
 11588 000018D1 E8F902                  	call	BlastSFT
 11589 000018D4 58                      	POP	AX
 11590                                  CloseOK:
 11591 000018D5 9D                      	POPF
 11592 000018D6 7397                    	JNC	short GoodRet
 11593                                  	;cmp	al,6
 11594 000018D8 3C06                    	CMP	AL,error_invalid_handle
 11595 000018DA 7493                    	JZ	short GoodRet
 11596                                  	;mov	al,2
 11597 000018DC B002                    	MOV	AL,error_file_not_found
 11598                                  fren90:
 11599                                  	; 16/12/2022
 11600                                  fcb_close_err:
 11601 000018DE E9C2ED                  	jmp	FCB_RET_ERR
 11602                                  
 11603                                  ;
 11604                                  ;----------------------------------------------------------------------------
 11605                                  ;
 11606                                  ;**	$FCB_Rename - Rename a File
 11607                                  ;
 11608                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11609                                  ;	multiple files copying from the meta characters.
 11610                                  ;
 11611                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11612                                  ;		    name of the files to be renamed. Starting at offset 11h
 11613                                  ;		    in the FCB is the destination name.
 11614                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11615                                  ;		AL = FF -> some files may have been renamed but:
 11616                                  ;			rename to existing file or source file not found
 11617                                  ;	USES	ALL
 11618                                  ;
 11619                                  ;----------------------------------------------------------------------------
 11620                                  ;
 11621                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11622                                  
 11623                                  _$FCB_RENAME:		; System call 23
 11624                                  
 11625 000018E1 E8FE03                  	call	GetExtended		; get pointer to real FCB
 11626 000018E4 52                      	push	dx
 11627 000018E5 8A04                    	MOV	AL,[SI] 		; get drive byte
 11628 000018E7 83C610                  	ADD	SI,10h			; point to destination
 11629                                  
 11630                                  					; RenBuf is in DOSDATA
 11631 000018EA BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11632 000018ED FF34                    	push	word [SI]
 11633 000018EF 1E                      	push	ds
 11634                                  	;push	di			; save source pointer for TransFCB
 11635                                  	; 16/01/2024 - BugFix !
 11636 000018F0 56                      	push	si
 11637 000018F1 8804                    	MOV	[SI],AL			; drop in real drive
 11638 000018F3 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11639 000018F5 E82C53                  	call	TransFCB		; munch this pathname
 11640 000018F8 5E                      	pop	si
 11641 000018F9 1F                      	pop	ds	
 11642 000018FA 8F04                    	pop	WORD [SI]		; get path back
 11643 000018FC 5A                      	pop	dx			; Original FCB pointer
 11644 000018FD 72DF                    	JC	short fren90		; bad path -> error
 11645                                  
 11646                                  					; SS override for WFP_Start & Ren_WFP
 11647 000018FF 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11648 00001904 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11649                                  
 11650                                  					; OpenBuf is in DOSDATA
 11651 00001909 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11652 0000190C E81553                  	call	TransFCB		; wham
 11653                                  					; NOTE that this call is pointing
 11654                                  					;  back to the ORIGINAL FCB so
 11655                                  					;  SATTRIB gets set correctly
 11656 0000190F 72CD                    	JC	short fren90		; error
 11657 00001911 E8760E                  	call	DOS_RENAME
 11658 00001914 72C8                    	JC	short fren90
 11659                                  	; 16/12/2022
 11660 00001916 E987ED                  	jmp	FCB_RET_OK
 11661                                  	
 11662                                  ;	Error -
 11663                                  ;
 11664                                  ;	(al) = error code
 11665                                  
 11666                                  	; 16/12/2022
 11667                                  ;fren90:	
 11668                                  ;	;jmp	FCB_RET_ERR
 11669                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11670                                  ;	jmp	short fcb_close_err
 11671                                  
 11672                                  ;Break <Misbehavior fixers>
 11673                                  ;
 11674                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11675                                  ;   user's space so he may move them at will. Second, they have a small
 11676                                  ;   reserved area that may be used for system information. Third, there was
 11677                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11678                                  ;   usage.
 11679                                  ;
 11680                                  ;   This results in the following misbehavior:
 11681                                  ;
 11682                                  ;	infinite opens of the same file:
 11683                                  ;
 11684                                  ;	While (TRUE) {			While (TRUE) {
 11685                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11686                                  ;	    Read (FCB); 		    Write (FCB);
 11687                                  ;	    }				    }
 11688                                  ;
 11689                                  ;	infinite opens of different files:
 11690                                  ;
 11691                                  ;	While (TRUE) {			While (TRUE) {
 11692                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11693                                  ;	    Read (FCB); 		    Write (FCB);
 11694                                  ;	    }				    }
 11695                                  ;
 11696                                  ;	multiple closes of the same file:
 11697                                  ;
 11698                                  ;	FCBOpen (FCB);
 11699                                  ;	while (TRUE)
 11700                                  ;	    FCBClose (FCB);
 11701                                  ;
 11702                                  ;	I/O after closing file:
 11703                                  ;
 11704                                  ;	FCBOpen (FCB);
 11705                                  ;	while (TRUE) {
 11706                                  ;	    FCBWrite (FCB);
 11707                                  ;	    FCBClose (FCB);
 11708                                  ;	    }
 11709                                  ;
 11710                                  ;   The following is am implementation of a methodology for emulating the
 11711                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11712                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11713                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11714                                  ;   the local machine.
 11715                                  ;
 11716                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11717                                  ;   structures depending on the file itself and the state of operations of the
 11718                                  ;   OS. The information contained in this reserved field is enough to
 11719                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11720                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11721                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11722                                  ;
 11723                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11724                                  ;
 11725                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11726                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11727                                  ;   regenerated.
 11728                                  ;
 11729                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11730                                  ;   longer available. We can make up for this by using the following
 11731                                  ;   information:
 11732                                  ;
 11733                                  ;	The Drive number (from the DPB).
 11734                                  ;	The physical sector of the directory that contains the entry.
 11735                                  ;	The relative position of the entry in the sector.
 11736                                  ;	The first cluster field.
 11737                                  ;	The last used SFT.
 11738                                  ;      OR In the case of a device FCB
 11739                                  ;	The low 6 bits of sf_flags (indicating device type)
 11740                                  ;	The pointer to the device header
 11741                                  ;
 11742                                  ;   We read in the particular directory sector and examine the indicated
 11743                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11744                                  ;
 11745                                  ;   Some key items need to be remembered:
 11746                                  ;
 11747                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11748                                  ;	information. We enforce good behavior on the FCBs.
 11749                                  ;
 11750                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11751                                  ;	open VCs. The VCs may be closed only at process termination.
 11752                                  ;
 11753                                  ;	If this is not an installed version of the DOS, file sharing will
 11754                                  ;	always be present.
 11755                                  ;
 11756                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11757                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11758                                  ;
 11759                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11760                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11761                                  ;	proper OI record.
 11762                                  ;
 11763                                  ;   The test bits are:
 11764                                  ;
 11765                                  ;	00 -> local file
 11766                                  ;	40 -> sharing local
 11767                                  ;	80 -> network
 11768                                  ;	C0 -> local device
 11769                                  
 11770                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11771                                  ;----------------------------------------------------------------------------
 11772                                  ;
 11773                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11774                                  ;	pieces of information into the FCB to allow for subsequent
 11775                                  ;	regeneration. Poke LRU also.
 11776                                  ;
 11777                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11778                                  ;		DS:SI point to the FCB (not an extended one)
 11779                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11780                                  ;		DS:SI preserved
 11781                                  ;		ES:DI point to sft
 11782                                  ;   Registers modified: All
 11783                                  ;
 11784                                  ;
 11785                                  ;----------------------------------------------------------------------------
 11786                                  ;
 11787                                  
 11788                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11789                                  
 11790                                  SaveFCBInfo:
 11791                                  
 11792 00001919 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 11793 0000191E E8BBF9                  	call	IsSFTNet
 11794 00001921 740B                    	JZ	short SaveLocal		; if not network then save local info
 11795                                  ;
 11796                                  ;----- In net support -----
 11797                                  ;
 11798                                  	; 17/05/2019 - Retro DOS v4.0
 11799                                  
 11800                                  	; MSDOS 3.3
 11801                                  	;;mov	ax,[es:di+1Dh]
 11802                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 11803                                  	;;mov	[si+1Ah],ax
 11804                                  	;mov	[si+fcb_net_handle],ax
 11805                                  	;push	es
 11806                                  	;push	di
 11807                                  	;;les	di,[es:di+19h]
 11808                                  	;LES	DI,[ES:DI+sf_netid]
 11809                                  	;;mov	[si+1Ch],di
 11810                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 11811                                  	;;mov 	[si+1Eh],es
 11812                                  	;MOV	[SI+fcb_netID+2],ES
 11813                                  	;pop	di
 11814                                  	;pop	es
 11815                                  
 11816                                  	; MSDOS 6.0
 11817                                  	;mov	ax,[es:di+0Bh]
 11818 00001923 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 11819                                  	;mov	[si+1Ch],ax
 11820 00001927 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 11821                                  	
 11822                                  	;mov	bl,80h
 11823 0000192A B380                    	MOV	BL,FCBNETWORK
 11824                                  ;
 11825                                  ;----- END In net support -----
 11826                                  ;
 11827 0000192C EB65                    	jmp	SHORT SaveSFN
 11828                                  
 11829                                  SaveLocal:
 11830                                  	;IF	Installed
 11831 0000192E E8205B                  	call	CheckShare
 11832                                  	;JZ	short SaveNoShare	; no sharer
 11833                                  	;JMP	short SaveShare		; sharer present
 11834                                  	; 16/12/2022
 11835                                  	; 28/07/2019
 11836 00001931 755B                    	jnz	short SaveShare
 11837                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11838                                  	;JZ	short SaveNoShare	; no sharer
 11839                                  	;JMP	short SaveShare		; sharer present
 11840                                  
 11841                                  SaveNoShare:
 11842                                  	;;test 	word [es:di+5],80h
 11843                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 11844 00001933 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 11845 00001938 7542                    	JNZ	short SaveNoShareDev	; Device
 11846                                  
 11847                                  	; Save no sharing local file information
 11848                                  
 11849                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 11850                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 11851 0000193A 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11852                                  	;mov	[si+1Dh],ax
 11853 0000193E 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11854                                  
 11855                                  	; MSDOS 6.0
 11856                                  
 11857                                  	;SR; Store high byte of directory sector
 11858                                  	;mov	ax,[es:di+1Dh]
 11859 00001941 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11860                                  	
 11861                                  	; SR;
 11862                                  	; We have to store the read-only and archive attributes of the file.
 11863                                  	; We extract it from the SFT and store it in the top two bits of the 
 11864                                  	; sector number ( sector number == 22 bits only )
 11865                                  
 11866                                  	;mov	bl,[es:di+4]
 11867 00001945 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 11868 00001949 88DF                    	mov	bh,bl
 11869 0000194B D0CB                    	ror	bl,1
 11870 0000194D D0E7                    	shl	bh,1
 11871 0000194F 08FB                    	or	bl,bh
 11872 00001951 80E3C0                  	and	bl,0C0h
 11873 00001954 08D8                    	or	al,bl
 11874                                  	;mov	[si+18h],al ; 08/11/2022
 11875 00001956 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 11876                                  
 11877                                  	; MSDOS 6.0 (& MSDOS 3.3)
 11878                                  	;mov	al,[es:di+1Fh]
 11879 00001959 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11880                                  	;mov	[si+1Fh],al
 11881 0000195D 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11882                                  	;mov	ax,[es:di+0Bh]
 11883 00001960 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11884                                  	;mov	[si+1Bh],ax
 11885 00001964 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11886 00001967 B300                    	MOV	BL,0
 11887                                  
 11888                                  	; Create the bits field from the dirty/device bits of the flags word 
 11889                                  	; and the mode byte
 11890                                  
 11891                                  SetFCBBits:
 11892                                  	;mov	ax,[es:di+5]
 11893 00001969 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11894 0000196D 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11895                                  	;or	al,[es:di+2]
 11896 0000196F 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11897                                  	;mov	[si+1Ah], al
 11898 00001973 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11899                                  
 11900                                  	; MSDOS 6.0
 11901                                  	
 11902                                  	; SR;
 11903                                  	; Check if we came here for local file or device. If for local file, 
 11904                                  	; skip setting of SFT index
 11905                                  	
 11906 00001976 08DB                    	or	bl,bl
 11907 00001978 742A                    	jz	short SaveNoSFN		; do not save SFN if local file
 11908                                  
 11909 0000197A EB17                    	JMP	short SaveSFN 		; go and save SFN
 11910                                  
 11911                                  	; Save no sharing local device information
 11912                                  
 11913                                  SaveNoShareDev:
 11914                                  	;mov	ax,[es:di+7]
 11915 0000197C 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11916                                  	;mov	[si+1Ah],ax
 11917 00001980 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11918                                  	;mov	ax,[es:di+9]
 11919 00001983 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11920 00001987 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11921                                  	;mov	bl,40h
 11922 0000198A B340                    	MOV	BL,FCBDEVICE
 11923 0000198C EBDB                    	JMP	SetFCBBits		; go and save SFN
 11924                                  
 11925                                  SaveShare:
 11926                                  	;ENDIF
 11927                                  
 11928                                  ;----- In share support -----
 11929                                  
 11930                                  	;call	far [ss:ShSave]
 11931 0000198E 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11932                                  
 11933                                  ;----- end in share support -----
 11934                                  
 11935                                  	; 17/05/2019
 11936                                  
 11937                                  SaveSFN:
 11938                                  	;lea	ax,[di-6]
 11939 00001993 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11940                                  	
 11941                                  	; Adjust for offset to table.
 11942                                  	
 11943 00001996 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11944                                  
 11945 0000199B 53                      	push	bx			;bx = FCB type (net/Share or local)
 11946                                  	;;mov	bl,53 ; MSDOS 3.3
 11947                                  	;mov	bl,59 ; MSDOS 6.0
 11948 0000199C B33B                    	MOV	BL,SF_ENTRY.size
 11949 0000199E F6F3                    	DIV	BL
 11950                                  	;mov	[si+18h],al
 11951 000019A0 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11952 000019A3 5B                      	pop	bx			;restore bx
 11953                                  
 11954                                  SaveNoSFN:
 11955                                  	;mov	ax,[es:di+5]
 11956 000019A4 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11957 000019A8 243F                    	AND	AL,3Fh			; get real drive
 11958 000019AA 08D8                    	OR	AL,BL
 11959                                  	;mov	[si+19h],al
 11960 000019AC 884419                  	MOV	[SI+fcb_l_drive],AL
 11961                                  
 11962 000019AF 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11963 000019B3 40                      	INC	AX
 11964                                  	;mov	[es:di+15h],ax
 11965 000019B4 26894515                	MOV	[ES:DI+sf_LRU],AX
 11966 000019B8 7506                    	JNZ	short SimpleStuff
 11967                                  	
 11968                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 11969                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 11970                                  	
 11971                                  	;mov	bx,15h
 11972 000019BA BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11973 000019BD E80500                  	call	ResetLRU
 11974                                  
 11975                                  	; Set new LRU to AX
 11976                                  SimpleStuff:
 11977 000019C0 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11978 000019C4 C3                      	retn
 11979                                  
 11980                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11981                                  ;----------------------------------------------------------------------------
 11982                                  ;
 11983                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 11984                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11985                                  ;   at 0.
 11986                                  ;
 11987                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11988                                  ;		ES:DI point to SFT currently being updated
 11989                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11990                                  ;		AX has 8000h
 11991                                  ;   Registers modified: none
 11992                                  ;
 11993                                  ;----------------------------------------------------------------------------
 11994                                  ;
 11995                                  
 11996                                  	; 17/05/2019 - Retro DOS v4.0
 11997                                  ResetLRU:
 11998                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11999                                  	; DOSDATA
 12000                                  
 12001 000019C5 B80080                  	MOV	AX,8000h
 12002 000019C8 06                      	push	es
 12003 000019C9 57                      	push	di
 12004                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12005 000019CA 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12006                                  	;mov	cx,[es:di+4]
 12007 000019CF 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12008                                  	;lea	di,[di+6]
 12009 000019D3 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12010                                  ovScan:
 12011 000019D6 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12012 000019D9 7703                    	JA	short ovLoop
 12013 000019DB 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12014                                  ovLoop:
 12015                                  	;;add	di,53	; MSDOS 3.3
 12016                                  	;add	di,59	; MSDOS 6.0	
 12017 000019DE 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12018 000019E1 E2F3                    	LOOP	ovScan
 12019 000019E3 5F                      	pop	di
 12020 000019E4 07                      	pop	es
 12021 000019E5 268901                  	MOV	[ES:DI+BX],AX
 12022 000019E8 C3                      	retn
 12023                                  
 12024                                  ;IF  0  ; We dont need this routine any more.
 12025                                  ;
 12026                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12027                                  ;----------------------------------------------------------------------------
 12028                                  ;
 12029                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12030                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12031                                  ;   count here and fill in the appropriate field.
 12032                                  ;
 12033                                  ;   Inputs:	ES:DI point to SFT
 12034                                  ;   Outputs:	ES:DI has the open age field filled in.
 12035                                  ;		If open age has wraparound, we will have subtracted 8000h
 12036                                  ;		    from all open ages.
 12037                                  ;   Registers modified: AX
 12038                                  ;
 12039                                  ;----------------------------------------------------------------------------
 12040                                  ;
 12041                                  ;SetOpenAge:
 12042                                  ;	; 20/07/2018 - Retro DOS v3.0
 12043                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12044                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12045                                  ;
 12046                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12047                                  ;
 12048                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12049                                  ;	INC	AX
 12050                                  ;	;mov	[es:di+17h],ax
 12051                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12052                                  ;	JNZ	short SetDone
 12053                                  ;	;mov	bx,17h
 12054                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12055                                  ;	call	ResetLRU
 12056                                  ;SetDone:
 12057                                  ;	MOV	[CS:OpenLRU],AX
 12058                                  ;	retn
 12059                                  ;
 12060                                  ;ENDIF	; SetOpenAge no longer needed
 12061                                  
 12062                                  ; 21/07/2018 - Retro DOS v3.0
 12063                                  ; LRUFCB for MSDOS 6.0 !
 12064                                  
 12065                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12066                                  ;----------------------------------------------------------------------------
 12067                                  ;
 12068                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12069                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12070                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12071                                  ;
 12072                                  ;   Inputs:	none
 12073                                  ;   Outputs:	ES:DI point to SFT
 12074                                  ;		ThisSFT points to SFT
 12075                                  ;		SFT is zeroed
 12076                                  ;		Carry set of closes failed
 12077                                  ;   Registers modified: none
 12078                                  ;
 12079                                  ;----------------------------------------------------------------------------
 12080                                  ;
 12081                                  ; MSDOS 6.0
 12082                                  ;IF 0	; rewritten this routine
 12083                                  ;
 12084                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12085                                  ;	call	save_world
 12086                                  ;	
 12087                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12088                                  ; to find the lease recently used one that is younger than the open age.  We
 12089                                  ; operate be scanning the list n times finding the least age that is greater
 12090                                  ; or equal to the previous minimum age.
 12091                                  ;
 12092                                  ;   BP is the count of times we need to go through this loop.
 12093                                  ;   AX is the current acceptable minimum age to consider
 12094                                  ;
 12095                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12096                                  ;	XOR	AX,AX			; low = 0;
 12097                                  ;
 12098                                  ; If we've scanned the table n times, then we are done.
 12099                                  ;
 12100                                  ;lru1:
 12101                                  ;	CMP	bp,0			; while (k--) {
 12102                                  ;	JZ	short lru75
 12103                                  ;	DEC	bp
 12104                                  ;
 12105                                  ; Set up for scan.
 12106                                  ;
 12107                                  ;   AX is the minimum age for consideration
 12108                                  ;   BX is the minimum age found during the scan
 12109                                  ;   SI is the position of the entry that corresponds to BX
 12110                                  ;
 12111                                  ;	MOV	BX,-1			;     min = 0xffff;
 12112                                  ;	MOV	si,BX			;     pos = 0xffff;
 12113                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12114                                  ;	;mov	cx,[es:di+4]
 12115                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12116                                  ;	;lea	di,[di+6]
 12117                                  ;	LEA	DI,[DI+SFT.SFTable]
 12118                                  ;
 12119                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12120                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12121                                  ; are done.  In both cases, we use the found entry.
 12122                                  ;
 12123                                  ;lru2:
 12124                                  ;	cmp	word [es:di],0
 12125                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12126                                  ;	jz	short lru25
 12127                                  ;	;cmp	word [es:di],-1
 12128                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12129                                  ;	cmp	word [es:di],sf_busy
 12130                                  ;	jnz	short lru3
 12131                                  ;
 12132                                  ; The entry is usable without further scan.  Go and use it.
 12133                                  ;
 12134                                  ;lru25:
 12135                                  ;	MOV	si,DI			;	      pos = i;
 12136                                  ;	JMP	short lru11		;	      goto got;
 12137                                  ;
 12138                                  ; See if the entry is for the network or for the sharer.
 12139                                  ;
 12140                                  ;  If for the sharer or network then
 12141                                  ;	if the age < current minimum AND >= allowed minimum then
 12142                                  ;	    this entry becomes current minimum
 12143                                  ;
 12144                                  ;lru3:
 12145                                  ;	;test	word [es:di+5],8000h
 12146                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12147                                  ;					;	  if (!net[i]
 12148                                  ;	JNZ	short lru35
 12149                                  ;if installed
 12150                                  ;	call	CheckShare		;		&& !sharing)
 12151                                  ;	JZ	short lru5		;	  else
 12152                                  ;ENDIF
 12153                                  ;
 12154                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12155                                  ; current minimum.
 12156                                  ;
 12157                                  ;lru35:
 12158                                  ;	;mov	dx,[es:di+17h]
 12159                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12160                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12161                                  ;	JB	short lru5
 12162                                  ;	CMP	DX,BX
 12163                                  ;	JAE	short lru5		;	      age[i] < min) {
 12164                                  ;
 12165                                  ; entry is new minimum.  Remember his age.
 12166                                  ;
 12167                                  ;	mov	bx,DX			;	      min = age[i];
 12168                                  ;	mov	si,di			;	      pos = i;
 12169                                  ;
 12170                                  ; End of loop.	gp back for more
 12171                                  ;
 12172                                  ;lru5:
 12173                                  ;	;add	di,53
 12174                                  ;	add	di,SF_ENTRY.size
 12175                                  ;	loop	lru2			;	      }
 12176                                  ;
 12177                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12178                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12179                                  ; complete.  Go find LRU.
 12180                                  ;
 12181                                  ;lru6:	
 12182                                  ;	cmp	si,-1			; position not -1?
 12183                                  ;	jz	short lru75		; no, done with everything
 12184                                  ;	lea	ax,[bx+1]		; set new threshold age
 12185                                  ;	jmp	short lru1		; go and loop for more
 12186                                  ;lru65:	
 12187                                  ;	stc
 12188                                  ;	jmp	short LRUDead		;	  return -1;
 12189                                  ;
 12190                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12191                                  ; network entry. We now make a second pass through to find the LRU entry
 12192                                  ; that is local-no-share or has age >= AX
 12193                                  ;
 12194                                  ;lru75:
 12195                                  ;	mov	bx,-1			; min = 0xffff;
 12196                                  ;	mov	si,bx			; pos = 0xffff;
 12197                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12198                                  ;	;mov	cx,[es:di+4]
 12199                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12200                                  ;	;lea	di,[di+6]
 12201                                  ;	LEA	DI,[DI+SFT.SFTable]
 12202                                  ;
 12203                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12204                                  ; then check for lru.
 12205                                  ;
 12206                                  ;lru8:
 12207                                  ;	;test	word [es:di+5],8000h
 12208                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12209                                  ;	jnz	short lru85		; is for network, go check age
 12210                                  ;	call	CheckShare		; sharer here?
 12211                                  ;	jz	short lru86		; no, go check lru
 12212                                  ;
 12213                                  ; Network or sharer.  Check age
 12214                                  ;
 12215                                  ;lru85:
 12216                                  ;	;cmp	[es:di+17h],ax
 12217                                  ;	cmp	[es:di+sf_OpenAge],ax
 12218                                  ;	jb	short lru9		; age is before threshold, skip it
 12219                                  ;
 12220                                  ; Check LRU
 12221                                  ;
 12222                                  ;lru86:
 12223                                  ;	;cmp	[es:di+15h],bx
 12224                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12225                                  ;	jae	short lru9		; no, skip this
 12226                                  ;	mov	si,di			; remember position
 12227                                  ;	;mov	bx,[es:di+15h]
 12228                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12229                                  ;
 12230                                  ; Done with this entry, go back for more.
 12231                                  ;
 12232                                  ;lru9:
 12233                                  ;	;add	di, 53
 12234                                  ;	add	di,SF_ENTRY.size
 12235                                  ;	loop	lru8
 12236                                  ;
 12237                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12238                                  ; out. The conditions here are:
 12239                                  ;
 12240                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12241                                  ;
 12242                                  ;lru10:
 12243                                  ;	cmp	si,-1			; if no one f
 12244                                  ;	jz	short lru65		;     return -1;
 12245                                  ;lru11:
 12246                                  ;	mov	di,si
 12247                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12248                                  ;	MOV	[CS:THISSFT+2],ES
 12249                                  ;
 12250                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12251                                  ; is 0.
 12252                                  ;
 12253                                  ;	;test	word [es:di+5],8000h
 12254                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12255                                  ;	JNZ	short LRUClose
 12256                                  ;IF INSTALLED
 12257                                  ;	call	CheckShare
 12258                                  ;	JZ	short LRUDone
 12259                                  ;ENDIF
 12260                                  ;
 12261                                  ; Repeat close until ref count is 0
 12262                                  ;
 12263                                  ;LRUClose:
 12264                                  ;	push	ss
 12265                                  ;	pop	ds
 12266                                  ;	LES	DI,[THISSFT]
 12267                                  ;	cmp     word [es:di],0
 12268                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12269                                  ;	JZ	short LRUDone 		; nope, all done
 12270                                  ;	call	DOS_CLOSE
 12271                                  ;	jnc	short LRUClose		; no error => clean up
 12272                                  ;	;cmp	al,6
 12273                                  ;	cmp	al,error_invalid_handle
 12274                                  ;	jz	short LRUClose
 12275                                  ;	stc
 12276                                  ;	JMP	short LRUDead
 12277                                  ;LRUDone:
 12278                                  ;	XOR	AL,AL
 12279                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12280                                  ;
 12281                                  ;LRUDead:
 12282                                  ;	call	restore_world
 12283                                  ;	LES     DI,[CS:THISSFT]
 12284                                  ;	jnc	short LRUFCB_retn
 12285                                  ;LRUFCB_err:
 12286                                  ;	; mov	al, 23h	
 12287                                  ;	MOV	AL,error_FCB_unavailable
 12288                                  ;LRUFCB_retn:	
 12289                                  ;	retn:
 12290                                  ;
 12291                                  ;ENDIF	; LRUFCB has been rewritten below.
 12292                                  
 12293                                  ; 17/05/2019 - Retro DOS v4.0
 12294                                  ; LRUFCB for MSDOS 6.0 !
 12295                                  ;----------------------------------------------------------------------------
 12296                                  ;
 12297                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12298                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12299                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12300                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12301                                  ; optimize regeneration operations by keeping track of the current local
 12302                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12303                                  ; local SFT in the SFT Block.
 12304                                  ;
 12305                                  ; Inputs: al = 0 => Regenerate SFT operation
 12306                                  ;	    = 1 => Allocate new SFT for Open/Create
 12307                                  ;
 12308                                  ; Outputs: Carry clear
 12309                                  ;	 	es:di = Address of allocated SFT
 12310                                  ;	  	ThisSFT = Address of allocated SFT
 12311                                  ;
 12312                                  ;	  carry set if closes of net/Share files failed 
 12313                                  ;		al = error_FCB_unavailable
 12314                                  ;
 12315                                  ; Registers affected: None
 12316                                  ;
 12317                                  ;----------------------------------------------------------------------------
 12318                                  
 12319                                  ;LruFCB	PROC	NEAR
 12320                                  LRUFCB:
 12321                                  	; 17/05/2019 - Retro DOS v4.0
 12322                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12323                                  
 12324                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12325                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12326                                  
 12327                                  	; 20/01/2024
 12328                                  
 12329 000019E9 06                      	push	es	; * (MSDOS 6.21)
 12330                                  	
 12331 000019EA E8BEEA                  	call	save_world
 12332                                  	
 12333                                  	;getdseg <ds>		;ds = DOSDATA
 12334 000019ED 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12335                                  
 12336 000019F2 08C0                    	or	al,al		;Check if regenerate allocation
 12337 000019F4 751A                    	jnz	short lru1	;Try to find SFT to use
 12338                                  
 12339                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12340                                  	; local SFT, just return that SFT to reuse
 12341                                  
 12342 000019F6 8B3E[5D10]              	mov	di,[LocalSFT]
 12343 000019FA 0B3E[5F10]              	or	di,[LocalSFT+2]	;is address == 0?
 12344 000019FE 7410                    	jz	short lru1	;invalid local SFT, find one
 12345                                  
 12346                                  	; We have found a valid local SFT. Recycle this SFT
 12347                                  
 12348 00001A00 C43E[5D10]              	les	di,[LocalSFT]
 12349                                  
 12350                                  gotlocalSFT:
 12351 00001A04 893E[9E05]              	mov	[THISSFT],di
 12352 00001A08 8C06[A005]              	mov	[THISSFT+2],es
 12353 00001A0C F8                      	clc
 12354 00001A0D E9AA00                  	jmp	LRUDone		;clear up SFT and return
 12355                                  
 12356                                  lru1:
 12357 00001A10 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12358                                  	;mov	cx,[es:di+4]
 12359 00001A14 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12360                                  	;lea	di,[di+6]
 12361 00001A18 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12362                                  
 12363                                  	; We scan through all the SFTs scanning for a free one. It also 
 12364                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12365                                  	; bx = min. LRU for local SFTs
 12366                                  	; si = pos. of local SFT with min. LRU
 12367                                  	; dx = min. LRU for net/Share SFTs
 12368                                  	; bp = pos. of net/Share SFT with min. LRU
 12369                                  
 12370 00001A1B BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12371 00001A1E 89DE                    	mov	si,bx
 12372 00001A20 89DA                    	mov	dx,bx
 12373 00001A22 89DD                    	mov	bp,bx
 12374                                  
 12375                                  findSFT:
 12376                                  	;See if this SFT is a free one. If so, return it
 12377 00001A24 26830D00                	or	word [es:di],0
 12378                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12379 00001A28 744D                    	jz	short gotSFT	;yes, SFT is free
 12380                                  	;;cmp	word [es:di],-1
 12381                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12382 00001A2A 26833DFF                	cmp	word [es:di],sf_busy ; -1
 12383 00001A2E 7447                    	jz	short gotSFT	;no, can use it
 12384                                  
 12385                                  	; Check if this SFT is local and store its address in LocalSFT. Can be
 12386                                  	; used for a later regen.
 12387                                  
 12388                                  	; 16/12/2022
 12389                                  	; 08/11/2022
 12390                                  	;test	byte [es:di+6],80h
 12391 00001A30 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12392                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12393                                  	;;test	word [es:di+5],8000h
 12394                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12395 00001A35 7532                    	jnz	short lru5	;yes, get net/Share LRU
 12396                                  
 12397                                  ;IF installed
 12398 00001A37 E8175A                  	call	CheckShare	;Share present?
 12399                                  ;ENDIF
 12400 00001A3A 752D                    	jnz	short lru5	;yes, get net/Share LRU
 12401                                  
 12402                                  	;Local SFT, register its address
 12403                                  
 12404                                  	; !!HACK!!!
 12405                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12406                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12407                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12408                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12409                                  	; out the code that previously existed at label 'gotSFT'
 12410                                  
 12411                                  hackpoint:
 12412 00001A3C 893E[5D10]              	mov	[LocalSFT],di
 12413 00001A40 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12414                                  
 12415 00001A44 08C0                    	or	al,al		;Is operation = REGEN?
 12416 00001A46 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12417                                  
 12418                                  	;Get LRU for local files
 12419                                  	
 12420                                  	;cmp	[es:di+15h],bx
 12421 00001A48 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12422 00001A4C 7306                    	jae	short lru4	;no, skip 
 12423                                  
 12424                                  	;mov	bx,[es:di+15h]
 12425 00001A4E 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12426 00001A52 89FE                    	mov	si,di		;store SFT position
 12427                                  
 12428                                  lru4:
 12429                                  	;add	di,59
 12430 00001A54 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12431 00001A57 E2CB                    	loop	findSFT
 12432                                  
 12433                                  	; Check whether we got a net/Share or local SFT. If local SFT 
 12434                                  	; available, we will reuse it instead of net/Share LRU
 12435                                  
 12436 00001A59 89F7                    	mov	di,si
 12437 00001A5B 83FEFF                  	cmp	si,-1		;local SFT available?
 12438 00001A5E 7517                    	jnz	short gotSFT	;yes, return it
 12439                                  
 12440                                  	;No local SFT, see if we got a net/Share SFT
 12441                                  
 12442 00001A60 89EF                    	mov	di,bp
 12443 00001A62 83FDFF                  	cmp	bp,-1		;net/Share SFT available?
 12444 00001A65 752D                    	jnz	short gotnetSFT	;yes, return it
 12445                                  noSFT:
 12446                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12447                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12448                                  	; count is not maintained properly.
 12449                                  
 12450 00001A67 EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12451                                  
 12452                                  	; Handle the LRU for net/Share SFTs
 12453                                  lru5:
 12454                                  	;cmp	[es:di+15h],dx
 12455 00001A69 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12456 00001A6D 73E5                    	jae	short lru4	;no, skip 
 12457                                  
 12458                                  	;mov	dx,[es:di+15h]
 12459 00001A6F 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12460                                  
 12461 00001A73 89FD                    	mov	bp,di		;store SFT position
 12462 00001A75 EBDD                    	jmp	short lru4	;continue with next SFT
 12463                                  
 12464                                  gotSFT:
 12465 00001A77 08C0                    	or	al,al
 12466 00001A79 74C1                    	jz	short hackpoint	;save es:di in LocalSFT
 12467                                  
 12468                                  	; HACK!!!
 12469                                  	; The code here differs from the code at 'hackpoint' only in the 
 12470                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12471                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12472                                  	; has been commented out below and replaced by the code just above.
 12473                                  
 12474                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12475                                  ;
 12476                                  ;	or	al,al		  ;Regen?
 12477                                  ;	jnz	short notlocaluse ;yes, register it and return
 12478                                  ;
 12479                                  ;Register this SFT as a local one
 12480                                  ;
 12481                                  ;	mov	[LocalSFT],di
 12482                                  ;	mov	[LocalSFT+2],es
 12483                                  ;	jmp	gotlocalSFT	;return to caller
 12484                                  ;
 12485                                  ;notlocaluse:
 12486                                  
 12487                                  	; The caller is probably going to use this SFT for a net/Share file.
 12488                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12489                                  	; does not really know whether it is a local file or not. We
 12490                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12491                                  	; registered as a local SFT that can be recycled.
 12492                                  
 12493 00001A7B 8CC0                    	mov	ax,es
 12494 00001A7D 393E[5D10]              	cmp	[LocalSFT],di		;Offset same?
 12495 00001A81 750E                    	jne	short notinvalid
 12496 00001A83 3906[5F10]              	cmp	[LocalSFT+2],ax		;Segments same?
 12497                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12498                                  	; 20/01/2024
 12499 00001A87 7508                    	jne	short notinvalid
 12500                                  zerolocalSFT:	
 12501 00001A89 31C0                    	xor	ax,ax ; 0
 12502 00001A8B A3[5D10]                	mov	[LocalSFT],ax
 12503 00001A8E A3[5F10]                	mov	[LocalSFT+2],ax
 12504                                  	
 12505                                  notinvalid:
 12506 00001A91 E970FF                  	jmp	gotlocalSFT
 12507                                  
 12508                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12509                                  	; Invalidate this variable i.e LocalSFT = NULL
 12510                                  
 12511                                  ;zerolocalSFT:
 12512                                  	;xor	ax,ax ; 0
 12513                                  	;mov	[LocalSFT],ax
 12514                                  	;mov	[LocalSFT+2],ax
 12515                                  	;
 12516                                  	;jmp	gotlocalSFT
 12517                                  
 12518                                  gotnetSFT:
 12519                                  	; We have an SFT that is currently net/Share. If it is going to be
 12520                                  	; used for a regen, we know it has to be a local SFT. Update the
 12521                                  	; LocalSFT variable
 12522                                  
 12523 00001A94 08C0                    	or	al,al
 12524 00001A96 7508                    	jnz	short closenet
 12525                                  
 12526 00001A98 893E[5D10]              	mov	[LocalSFT],di
 12527 00001A9C 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12528                                  closenet:
 12529 00001AA0 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12530 00001AA4 8C06[A005]              	mov	[THISSFT+2],es
 12531                                  
 12532                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12533                                  	; count is 0.
 12534                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12535                                  	; recycled -- no need to check for this.
 12536                                  
 12537                                  LRUClose:
 12538 00001AA8 26833D00                	cmp	word [es:di],0
 12539                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12540 00001AAC 740C                    	jz	short LRUDone	; nope, all done
 12541                                  
 12542 00001AAE E80915                  	call	DOS_CLOSE
 12543 00001AB1 73F5                    	jnc	short LRUClose	; no error => clean up
 12544                                  
 12545                                  	; Bugbug: I dont know why we are trying to close after we get an
 12546                                  	; error closing. Seems like we could have a potential infinite loop
 12547                                  	; here. This has to be verified.
 12548                                  
 12549 00001AB3 3C06                    	cmp	al,error_invalid_handle ; 6
 12550 00001AB5 74F1                    	je	short LRUClose
 12551                                  errorbadSFT:
 12552 00001AB7 F9                      	stc
 12553 00001AB8 EB05                    	JMP	short LRUDead
 12554                                  LRUDone:
 12555 00001ABA 30C0                    	XOR	AL,AL
 12556 00001ABC E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12557                                  
 12558                                  LRUDead:
 12559 00001ABF E8D2E9                  	call	restore_world		; use macro
 12560                                  	
 12561 00001AC2 07                      	pop	es ; * (MSDOS 6.21)
 12562                                  
 12563                                  	;getdseg <es>
 12564 00001AC3 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12565                                  
 12566 00001AC8 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12567                                  
 12568                                  	;;retnc
 12569                                  	;jc	short LruFCB_err
 12570                                  	;retn
 12571                                  
 12572                                  	; 16/12/2022
 12573                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12574 00001ACD 7302                    	jnc	short LruFCB_retn
 12575                                  	;jc	short LruFCB_err
 12576                                  	;retn
 12577                                  		
 12578                                  LruFCB_err:
 12579 00001ACF B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12580                                  LruFCB_retn:
 12581 00001AD1 C3                      	retn
 12582                                  	
 12583                                  ;LruFCB	ENDP
 12584                                  
 12585                                  ; 17/05/2019 - Retro DOS v4.0
 12586                                  
 12587                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12588                                  
 12589                                  ; --------------------------------------------------------------------------
 12590                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12591                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12592                                  ; to copy the name to different destinations
 12593                                  ;
 12594                                  ; Inputs: ds:si = source string
 12595                                  ;	 es:di = destination string
 12596                                  ;	 cx = length of string
 12597                                  ;
 12598                                  ; Outputs: String copied to destination
 12599                                  ;
 12600                                  ; Registers affected: cx,di,si
 12601                                  ; --------------------------------------------------------------------------
 12602                                  
 12603                                  RegenCopyName:
 12604                                  CopyName:
 12605 00001AD2 AC                      	lodsb			;load character
 12606 00001AD3 E86E36                  	call	UCase		; convert char to upper case
 12607                                  StuffChar2:
 12608 00001AD6 AA                      	STOSB			;store converted character
 12609 00001AD7 E2F9                    	LOOP	CopyName	;
 12610                                  DoneName:
 12611 00001AD9 C3                      	retn
 12612                                  
 12613                                  ; --------------------------------------------------------------------------
 12614                                  
 12615                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12616                                  FCBRegen:
 12617                                  	; called from SFTFromFCB. SS already DOSDATA
 12618                                  
 12619                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12620                                  	; we do not fill, size we do no fill, position we do not fill,
 12621                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12622                                  
 12623                                  	;mov	al,[si+19h]
 12624 00001ADA 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12625                                  
 12626                                  	; We discriminate based on the first two bits in the reserved field.
 12627                                  	
 12628                                  	;test	al,80h
 12629 00001ADD A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12630 00001ADF 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12631                                  
 12632                                  	; The FCB is for a network or a sharing based system. At this point 
 12633                                  	; we have already closed the SFT for this guy and reconnection is 
 12634                                  	; impossible.
 12635                                  	;
 12636                                  	; Remember that he may have given us a FCB with bogus information in
 12637                                  	; it. Check to see if sharing is present or if the redir is present.
 12638                                  	; If either is around, presume that we have cycled out the FCB and 
 12639                                  	; give the hard error. Otherwise, just return with carry set.
 12640                                  
 12641 00001AE1 E86D59                  	call	CheckShare		; test for sharer
 12642 00001AE4 7509                    	JNZ	short RegenFail		; yep, fail this.
 12643                                  	
 12644                                  	;mov	ax,1100h
 12645 00001AE6 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12646 00001AE9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12647                                  			; Return: AL = 00h  not installed, OK to install
 12648                                  			; 01h  not installed, not OK to install
 12649                                  			; FFh  installed
 12650 00001AEB 08C0                    	OR	AL,AL			; is it there?
 12651 00001AED 740C                    	JZ	short RegenDead		; no, just fail the operation
 12652                                  RegenFail:
 12653                                  	; 17/05/2019 - Retro DOS v4.0
 12654                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12655 00001AEF 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12656                                  
 12657                                  	;cmp	ah,10h
 12658 00001AF3 80FC10                  	cmp	AH,FCB_CLOSE
 12659 00001AF6 7403                    	jz	short RegenDead
 12660 00001AF8 E88B01                  	call	FCBHardErr		; massive hard error.
 12661                                  RegenDead:
 12662 00001AFB F9                      	STC				; carry set
 12663                                  FCBRegen_retn:
 12664 00001AFC C3                      	retn
 12665                                  
 12666                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12667                                  	; so fail the operation.
 12668                                  
 12669                                  RegenNoSharing:
 12670 00001AFD E85159                  	call	CheckShare		; Sharing around?
 12671 00001B00 75ED                    	JNZ	short RegenFail
 12672                                  	
 12673                                  	; Find an SFT for this guy.
 12674                                  	
 12675                                  	; 17/05/2019 - Retro DOS v4.0
 12676                                  
 12677                                  	; MSDOS 3.3
 12678                                  	;call	LRUFCB
 12679                                  	;jc	short FCBRegen_retn
 12680                                  	
 12681                                  	; MSDOS 6.0
 12682 00001B02 50                      	push	ax
 12683 00001B03 B000                    	mov	al,0			;indicate it is a regen operation
 12684 00001B05 E8E1FE                  	call	LRUFCB
 12685 00001B08 58                      	pop	ax
 12686 00001B09 72F1                    	jc	short FCBRegen_retn
 12687                                  
 12688                                  	;mov	word [es:di+2],8002h
 12689 00001B0B 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12690 00001B11 243F                    	AND	AL,3Fh			; get drive number for flags
 12691 00001B13 98                      	CBW
 12692                                  	;or	ax,4000h
 12693 00001B14 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12694                                  
 12695                                  	; The bits field consists of the upper two bits (dirty and device) 
 12696                                  	; from the SFT and the low 4 bits from the open mode.
 12697                                  
 12698                                  	;mov	cl,[si+1Ah]
 12699 00001B17 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12700 00001B1A 88CD                    	MOV	CH,CL
 12701 00001B1C 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12702 00001B1F 08E8                    	OR	AL,CH
 12703                                  	;and	cl,0Fh
 12704 00001B21 80E10F                  	AND	CL,access_mask		; get the mode bits
 12705                                  	;mov	[es:di+2],cl
 12706 00001B24 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12707                                  	;mov	[es:di+5],ax
 12708 00001B28 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12709                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12710 00001B2C 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12711                                  	;mov	[es:di+31h],ax
 12712 00001B30 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12713 00001B34 1E                      	push	ds
 12714 00001B35 56                      	push	si
 12715 00001B36 06                      	push	es
 12716 00001B37 57                      	push	di
 12717 00001B38 16                      	push	ss
 12718 00001B39 07                      	pop	es
 12719 00001B3A BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12720                                  
 12721 00001B3D B90800                  	MOV	CX,8
 12722 00001B40 46                      	INC	SI			; Skip past drive byte to name in FCB
 12723                                  
 12724                                  	; MSDOS 3.3
 12725                                  ;RegenCopyName:
 12726                                  	;lodsb
 12727                                  	;call	UCase
 12728                                  	;stosb
 12729                                  	;loop	RegenCopyName
 12730                                  
 12731                                  	; MSDOS 6.0
 12732 00001B41 E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12733                                  
 12734 00001B44 16                      	push	ss	; SS is DOSDATA
 12735 00001B45 1F                      	pop	ds
 12736                                  
 12737                                  	;mov	byte [ATTRIB],16h
 12738 00001B46 C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12739                                  					; Must set this to something interesting
 12740                                  					; to call DEVNAME.
 12741 00001B4B E85827                  	call	DEVNAME 		; check for device
 12742 00001B4E 5E                      	pop	si
 12743 00001B4F 07                      	pop	es
 12744 00001B50 5E                      	pop	si
 12745 00001B51 1F                      	pop	ds
 12746 00001B52 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12747                                  
 12748                                  	; Device found. We can ignore disk-specific info
 12749                                  
 12750                                  	;mov	[es:di+5],bh
 12751 00001B54 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12752                                  	;mov	byte [es:di+4],0
 12753 00001B58 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12754                                  					; SS override
 12755                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12756 00001B5D 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12757                                  	;mov	[es:di+7],si
 12758 00001B62 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12759                                  	;mov	[es:di+9],ds
 12760 00001B66 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12761 00001B6A C3                      	retn				; carry is clear
 12762                                  
 12763                                  RegenDeadJ:
 12764 00001B6B EB8E                    	JMP	short RegenDead
 12765                                  
 12766                                  	; File found. Just copy in the remaining pieces.
 12767                                  
 12768                                  RegenFileNoSharing:
 12769                                  	;mov	ax,[es:di+5]
 12770 00001B6D 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12771 00001B71 83E03F                  	AND	AX,03Fh
 12772 00001B74 1E                      	push	ds
 12773 00001B75 56                      	push	si
 12774 00001B76 E8604F                  	call	FIND_DPB
 12775                                  	;mov	[es:di+7],si
 12776 00001B79 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12777                                  	;mov	[es:di+9],ds
 12778 00001B7D 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12779 00001B81 5E                      	pop	si
 12780 00001B82 1F                      	pop	ds
 12781 00001B83 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 12782                                  					; indicator was bogus
 12783                                  	;mov	ax,[si+1Dh]
 12784 00001B85 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 12785                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 12786                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 12787 00001B88 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 12788                                  
 12789                                  	; MSDOS 6.0
 12790                                  
 12791                                  	; SR;
 12792                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 12793                                  	; number
 12794                                  
 12795                                  	;mov	al,[si+18h]
 12796 00001B8C 8A4418                  	mov	al,[si+fcb_sfn]
 12797 00001B8F 24C0                    	and	al,0C0h		;get the 2 attribute bits
 12798 00001B91 88C4                    	mov	ah,al
 12799 00001B93 D0C4                    	rol	ah,1
 12800 00001B95 D0E8                    	shr	al,1
 12801 00001B97 08E0                    	or	al,ah
 12802 00001B99 243F                    	and	al,03Fh		;mask off unused bits
 12803                                  	;mov	[es:di+4],al
 12804 00001B9B 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 12805                                  
 12806                                  	; SR;
 12807                                  	; Update the higher word of the directory sector from the FCB
 12808                                  
 12809                                  	;;mov	al,[si+18h]
 12810 00001B9F 8A4418                  	mov	al,[si+fcb_sfn]
 12811 00001BA2 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 12812 00001BA4 28E4                    	sub	ah,ah
 12813                                  	;mov	[es:di+1Dh],ax
 12814 00001BA6 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 12815                                  
 12816                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12817                                  	;mov	ax,[si+1Bh]
 12818 00001BAA 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 12819                                  	;mov	[es:di+0Bh],ax
 12820 00001BAD 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 12821                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 12822                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 12823 00001BB1 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 12824                                  	;mov	al,[si+1Fh]
 12825 00001BB5 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 12826                                  	;mov  	[es:di+1Fh],al
 12827 00001BB8 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 12828                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12829 00001BBC 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 12830                                  					; Existing FCB entries would be
 12831                                  					; flushed unnecessarily because of
 12832                                  					; check in CheckFCB of the ref_count.
 12833                                  					; July 22/85 - BAS
 12834                                  	;lea	si,[si+1]
 12835 00001BBF 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 12836                                  	;lea	di,[di+20h]
 12837 00001BC2 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 12838                                  	;mov	cx,11
 12839 00001BC5 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 12840                                  	
 12841                                  	; MSDOS 6.0
 12842 00001BC8 E807FF                  	call	RegenCopyName	;copy name to SFT 
 12843                                  	
 12844                                  	; MSDOS 3.3
 12845                                  ;RegenCopyName2:
 12846                                  	;lodsb
 12847                                  	;call    UCase
 12848                                  	;stosb
 12849                                  	;loop    RegenCopyName2
 12850                                  
 12851 00001BCB F8                      	clc
 12852 00001BCC C3                      	retn
 12853                                  
 12854                                  ; 17/05/2019 - Retro DOS v4.0
 12855                                  
 12856                                  ;**	BlastSFT - FIll SFT with Garbage
 12857                                  ; --------------------------------------------------------------------------
 12858                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 12859                                  ;	various garbage values to put into the SFT.  I don't know why,
 12860                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 12861                                  ;	necessary to show that the SFT is free after filling it.
 12862                                  ;
 12863                                  ;	ENTRY	(es:di) = address of SFT
 12864                                  ;		(al) = fill character
 12865                                  ;	EXIT	(ax) = -1
 12866                                  ;		'C' clear
 12867                                  ;	USES	AX, CX, Flags
 12868                                  
 12869                                  BlastSFT:
 12870 00001BCD 57                      	push	di
 12871                                  	;mov	cx,53 ; MSDOS 3.3
 12872                                  	;mov	cx,59 ; MSDOS 6.0
 12873 00001BCE B93B00                  	mov	cx,SF_ENTRY.size
 12874 00001BD1 F3AA                    	rep	stosb
 12875 00001BD3 5F                      	pop	di
 12876 00001BD4 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 12877 00001BD6 268905                  	mov	[es:di],ax
 12878                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 12879                                  	;mov	[es:di+15h],ax
 12880 00001BD9 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 12881 00001BDD 48                      	dec	ax	; -1					    ;
 12882                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 12883 00001BDE 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 12884                                  BlastSFT_retn:
 12885 00001BE2 C3                      	retn				; return with 'C' clear     ;
 12886                                  
 12887                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 12888                                  ; --------------------------------------------------------------------------
 12889                                  ;
 12890                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 12891                                  ;   regenerated.
 12892                                  ;
 12893                                  ;   Inputs:	DS:SI point to FCB (not extended)
 12894                                  ;		AL is SFT index
 12895                                  ;   Outputs:	Carry Set - FCB needs to be regened
 12896                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 12897                                  ;   Registers modified: AX and BX
 12898                                  ;
 12899                                  ; --------------------------------------------------------------------------
 12900                                  
 12901                                  	; 21/01/2024
 12902                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12903                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 12904                                  CheckFCB:
 12905                                  		
 12906                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 12907                                  
 12908                                  	; MSDOS 3.3
 12909                                  
 12910                                  	; LES	DI,[CS:SFTFCB]
 12911                                  
 12912                                  	; MSDOS 6.0
 12913                                  	
 12914                                  	; SR;
 12915                                  	; We check if the given FCB is for a local file. If so, we return a 
 12916                                  	; bad SFT status forcing the caller to regenerate the SFT.
 12917                                  
 12918                                  	;test	byte [si+19h],0C0h
 12919 00001BE3 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 12920 00001BE7 7447                    	jz	short BadSFT		;Local file, return bad SFT
 12921 00001BE9 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 12922                                  
 12923                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12924                                  	;cmp	[es:di+4],al
 12925 00001BEE 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 12926 00001BF2 723C                    	JC	short BadSFT
 12927                                  	;;mov	bl,53 ; MSDOS 3.3
 12928                                  	;mov	bl,59 ; MSDOS 6.0
 12929 00001BF4 B33B                    	MOV	BL,SF_ENTRY.size
 12930 00001BF6 F6E3                    	MUL	BL
 12931                                  	;lea	di,[di+6]
 12932 00001BF8 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 12933 00001BFB 01C7                    	ADD	DI,AX
 12934                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 12935 00001BFD 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 12936                                  	;cmp	[es:di+31h],ax
 12937 00001C01 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 12938 00001C05 7529                    	JNZ	short BadSFT		; must match process
 12939 00001C07 26833D00                	cmp	word [es:di],0
 12940                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 12941 00001C0B 7423                    	JZ	short BadSFT		; must also be in use
 12942                                  	;mov	al,[si+19h]
 12943 00001C0D 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12944                                  	;test	al,80h
 12945 00001C10 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 12946 00001C12 7428                    	JZ	short CheckNoShare	; No. try local or device
 12947                                  
 12948                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 12949                                  	; FCBSHARE is a superset of FCBNETWORK.
 12950                                  
 12951 00001C14 50                      	PUSH	AX
 12952                                  	;and	al,0C0h
 12953 00001C15 24C0                    	AND	AL,FCBMASK
 12954                                  	;cmp	al,0C0h
 12955 00001C17 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 12956 00001C19 58                      	POP	AX
 12957 00001C1A 7516                    	JNZ	short CheckNet		; yes
 12958                                  ;
 12959                                  ;----- In share support -----
 12960                                  ;
 12961                                  	;call	far [cs:JShare+(11*4)]
 12962 00001C1C 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 12963 00001C21 720D                    	JC	short BadSFT
 12964                                  
 12965                                  ; 21/01/2024
 12966                                  %if 0
 12967                                  	JMP	SHORT CheckD
 12968                                  ;
 12969                                  ;----- End in share support -----
 12970                                  ;
 12971                                  	; 09/11/2022
 12972                                  	; (There is not any procedure/sub
 12973                                  	;  which calls or jumps to CheckFirClus here)
 12974                                  	;;;
 12975                                  CheckFirClus:
 12976                                  	;cmp     bx,[es:di+0Bh]
 12977                                  	; 07/12/2022
 12978                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 12979                                  	JNZ	short BadSFT
 12980                                  	;;;
 12981                                  %endif
 12982                                  
 12983                                  CheckD: 
 12984 00001C23 243F                    	AND	AL,3Fh
 12985                                  	;mov	ah,[es:di+5]
 12986 00001C25 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 12987 00001C29 80E43F                  	AND	AH,3Fh
 12988 00001C2C 38C4                    	CMP	AH,AL
 12989                                  	; 16/12/2022
 12990 00001C2E 74B2                    	jz	short BlastSFT_retn	; carry is clear
 12991                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12992                                  	;jnz	short BadSFT
 12993                                  ;CheckD_retn:
 12994                                  	;retn
 12995                                  BadSFT: 
 12996 00001C30 F9                      	STC
 12997 00001C31 C3                      	retn
 12998                                  				
 12999                                  CheckNet:
 13000                                  	; 17/05/2019 - Retro DOS v4.0
 13001                                  	
 13002                                  ;----- In net support -----
 13003                                  
 13004                                  	; MSDOS 3.3
 13005                                  	;;mov	ax,[si+1Ah]
 13006                                  	;mov	ax,[si+fcb_net_handle]
 13007                                  	;;cmp	ax,[es:di+1Dh]
 13008                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13009                                  	;jnz	short BadSFT
 13010                                  	;;cmp	ax,[es:di+19h]
 13011                                  	;cmp	ax,[ES:DI+sf_netid]
 13012                                  	;jnz     short BadSFT
 13013                                  	;;mov	ax,[si+1Eh]
 13014                                  	;mov	ax,[si+fcb_l_attr]
 13015                                  	;;cmp	ax,[es:di+1Bh]
 13016                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13017                                  	;jnz     short BadSFT
 13018                                  
 13019                                  	; MSDOS 6.0
 13020                                  	;mov	ax,[si+1Ch]
 13021 00001C32 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13022                                  	; 09/11/2022
 13023                                  	;cmp	ax,[es:di+0Bh] 
 13024 00001C35 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13025 00001C39 75F5                    	JNZ	short BadSFT
 13026                                  
 13027                                  ;----- END In net support -----
 13028                                  
 13029                                  CheckNet_retn:
 13030 00001C3B C3                      	retn
 13031                                  
 13032                                  CheckNoShare:
 13033                                  
 13034                                  ; 16/12/2022
 13035                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13036                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13037                                  ;	;test	al,40h
 13038                                  ;	test	AL,FCBDEVICE		; Device?
 13039                                  ;	;jnz	short $+2 ; 09/11/2022
 13040                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13041                                  
 13042                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13043                                  	;;mov	bx,[si+1Dh]
 13044                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13045                                  	;;cmp	bx,[es:di+1Dh]
 13046                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13047                                  	;jnz	short BadSFT
 13048                                  	;;mov	bl,[si+1Fh]
 13049                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13050                                  	;;cmp	bl,[es:di+1Fh]
 13051                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13052                                  	;jnz	short BadSFT
 13053                                  	;;mov	bl,[si+1Ah]
 13054                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13055                                  	;;mov	bh,[es:di+5]
 13056                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13057                                  	;xor	bh,bl
 13058                                  	;and	bh,0C0h
 13059                                  	;jnz	short BadSFT
 13060                                  	;;xor	bl,[es:di+2]
 13061                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13062                                  	;and	bl,0Fh
 13063                                  	;jnz	short BadSFT
 13064                                  	;push	di
 13065                                  	;push	si
 13066                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13067                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13068                                  	;;lea	si,[si+1]
 13069                                  	;LEA	SI,[SI+SYS_FCB.name]
 13070                                  	;;mov	cx,11
 13071                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13072                                  	;repe	cmpsb
 13073                                  	;pop	si
 13074                                  	;pop	di
 13075                                  	;jnz	short BadSFT
 13076                                  	;;mov	bx,[si+1Bh]
 13077                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13078                                  	;jmp	short CheckFirClus
 13079                                  
 13080                                  	; MSDOS 6.0
 13081                                  
 13082                                  	; SR;
 13083                                  	; The code below to match a local FCB with its SFT can no longer be
 13084                                  	; used. We just return a no-match status. This check is done right
 13085                                  	; at the top.
 13086                                  
 13087                                  CheckNoShareDev:
 13088                                  	;mov	bx,[si+1Ah]
 13089 00001C3C 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13090                                  	;cmp	bx,[es:di+7]
 13091 00001C3F 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13092 00001C43 75EB                    	JNZ	short BadSFT
 13093                                  	;mov	bx,[si+1Ch]
 13094 00001C45 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13095                                  	;cmp	bx,[es:di+9]
 13096 00001C48 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13097 00001C4C 75E2                    	JNZ	short BadSFT
 13098 00001C4E EBD3                    	JMP	short CheckD
 13099                                  
 13100                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13101                                  ;----------------------------------------------------------------------------
 13102                                  ;
 13103                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13104                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13105                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13106                                  ;	with PID
 13107                                  ;
 13108                                  ;   Inputs:	DS:SI point to FCB
 13109                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13110                                  ;		Carry clear -> OK ES:DI -> SFT
 13111                                  ;		Carry set -> error in ax
 13112                                  ;   Registers modified: ES,DI, AX
 13113                                  ;
 13114                                  ;----------------------------------------------------------------------------
 13115                                  
 13116                                  SFTFromFCB:
 13117                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13118                                  
 13119                                  	; 17/05/2019 - Retro DOS v4.0
 13120                                  
 13121 00001C50 50                      	push	ax
 13122 00001C51 53                      	push	bx
 13123                                  	;mov	al,[si+18h]
 13124 00001C52 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13125 00001C55 E88BFF                  	call	CheckFCB
 13126 00001C58 5B                      	pop	bx
 13127 00001C59 58                      	pop	ax
 13128                                  	;MOV	[CS:THISSFT],DI		; SS override
 13129                                  	;MOV	[CS:THISSFT+2],ES
 13130 00001C5A 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13131 00001C5F 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13132 00001C64 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13133                                  	
 13134                                  	; 09/11/2022 (MSDOS 5.0)
 13135                                  	; 31/05/2019
 13136 00001C66 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13137 00001C67 E841E8                  	call	save_world
 13138 00001C6A E86DFE                  	call	FCBRegen
 13139 00001C6D E824E8                  	call	restore_world		; use macro restore world
 13140 00001C70 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13141                                  
 13142                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13143 00001C71 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13144 00001C75 72C4                    	jc	short CheckNet_retn
 13145                                  
 13146                                  Set_SFT: 
 13147                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13148 00001C77 36C43E[9E05]            	les	di,[ss:THISSFT]
 13149                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13150 00001C7C 36FF36[3C03]            	push	word [ss:PROC_ID]
 13151                                  	;pop	word [es:di+31h]
 13152 00001C81 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13153 00001C85 C3                      	retn				; carry is clear
 13154                                  
 13155                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13156                                  ;----------------------------------------------------------------------------
 13157                                  ;
 13158                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13159                                  ;	unavailable FCB.
 13160                                  ;
 13161                                  ;   Inputs:	none.
 13162                                  ;   Outputs:	none.
 13163                                  ;   Registers modified: all
 13164                                  ;
 13165                                  ;----------------------------------------------------------------------------
 13166                                  
 13167                                  FCBHardErr:
 13168                                  	; 17/05/2019 - Retro DOS v4.0
 13169 00001C86 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13170                                  	;
 13171                                  	;mov	ax,23h
 13172 00001C8B B82300                  	MOV	AX,error_FCB_unavailable
 13173                                  	;;mov	byte [cs:ALLOWED],8
 13174                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13175 00001C8E 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13176                                  	
 13177                                  	;LES	BP,[CS:THISDPB]
 13178 00001C94 26C42E[8A05]            	les	bp,[es:THISDPB]
 13179                                  	
 13180 00001C99 BF0100                  	MOV	DI,1			; Fake some registers
 13181 00001C9C 89F9                    	MOV	CX,DI
 13182                                  	;mov	dx,[es:bp+0Bh]
 13183 00001C9E 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13184 00001CA2 E85E37                  	call	HARDERR
 13185 00001CA5 F9                      	STC
 13186 00001CA6 C3                      	retn
 13187                                  
 13188                                  ;============================================================================
 13189                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13190                                  ;============================================================================
 13191                                  ; 21/07/2018 - Retro DOS v3.0
 13192                                  ; 17/05/2019 - Retro DOS v4.0
 13193                                  
 13194                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13195                                  ;
 13196                                  ;	GetRR
 13197                                  ;	GetExtent
 13198                                  ;	SetExtent
 13199                                  ;	GetExtended
 13200                                  ;	GetRecSize
 13201                                  ;	FCBIO
 13202                                  ;	$FCB_OPEN
 13203                                  ;	$FCB_CREATE
 13204                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13205                                  ;	$FCB_RANDOM_READ_BLOCK
 13206                                  ;	$FCB_SEQ_READ
 13207                                  ;	$FCB_SEQ_WRITE
 13208                                  ;	$FCB_RANDOM_READ
 13209                                  ;	$FCB_RANDOM_WRITE
 13210                                  ;
 13211                                  ;	Revision history:
 13212                                  ;
 13213                                  ;		Created: ARR 4 April 1983
 13214                                  ;			 MZ  6 June  1983 completion of functions
 13215                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13216                                  ;				  times.  Change so successive closes work by
 13217                                  ;				  always returning OK.	Also, detect I/O to
 13218                                  ;				  already closed FCB and return EOF.
 13219                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13220                                  ;				  out of sft into FCB for reconnection
 13221                                  ;
 13222                                  ;	    A000   version 4.00	Jan. 1988
 13223                                  
 13224                                  ; Defintions for FCBOp flags
 13225                                  
 13226                                  RANDOM	equ 2				; random operation
 13227                                  FCBREAD equ 4				; doing a read
 13228                                  BLOCK	equ 8				; doing a block I/O
 13229                                  
 13230                                  ;Break <GetRR - return the random record field in DX:AX>
 13231                                  ;---------------------------------------------------------------------------
 13232                                  ;
 13233                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13234                                  ;	from the FCB pointed to by DS:SI
 13235                                  ;
 13236                                  ;   Inputs:	DS:SI point to an FCB
 13237                                  ;		BX has record size
 13238                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13239                                  ;   Registers modified: none
 13240                                  ;---------------------------------------------------------------------------
 13241                                  
 13242                                  GetRR:
 13243                                  	;mov	ax,[si+21h]
 13244 00001CA7 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13245                                  	;mov	dx,[si+23h]
 13246 00001CAA 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13247 00001CAD 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13248 00001CB0 7202                    	JB	short GetRRBye
 13249 00001CB2 30F6                    	XOR	DH,DH
 13250                                  GetRRBye:
 13251 00001CB4 C3                      	retn
 13252                                  
 13253                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13254                                  ;---------------------------------------------------------------------------
 13255                                  ;
 13256                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13257                                  ;	NR fields in the FCB.
 13258                                  ;
 13259                                  ;   Inputs:	DS:SI - point to FCB
 13260                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13261                                  ;   Registers modified: none
 13262                                  ;---------------------------------------------------------------------------
 13263                                  
 13264                                  GetExtent:
 13265                                  	;mov	al,[si+20h]
 13266 00001CB5 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13267                                  	;mov	dx,[si+0Ch]
 13268 00001CB8 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13269 00001CBB D0E0                    	SHL	AL,1
 13270 00001CBD D1EA                    	SHR	DX,1
 13271 00001CBF D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13272 00001CC1 88D4                    	MOV	AH,DL
 13273 00001CC3 88F2                    	MOV	DL,DH
 13274 00001CC5 30F6                    	XOR	DH,DH
 13275 00001CC7 C3                      	retn
 13276                                  
 13277                                  ;Break <SetExtent - update the extent/NR field>
 13278                                  ;---------------------------------------------------------------------------
 13279                                  ;
 13280                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13281                                  ;	fields
 13282                                  ;
 13283                                  ;   Inputs:	DS:SI point to FCB
 13284                                  ;		DX:AX is a record location in file
 13285                                  ;   Outputs:	Extent/NR fields are filled in
 13286                                  ;   Registers modified: CX
 13287                                  ;---------------------------------------------------------------------------
 13288                                  
 13289                                  SetExtent:
 13290 00001CC8 50                      	push	ax
 13291 00001CC9 52                      	push	dx
 13292 00001CCA 89C1                    	MOV	CX,AX
 13293 00001CCC 247F                    	AND	AL,7FH			; next rec field
 13294                                  	;mov	[si+20h],al
 13295 00001CCE 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13296 00001CD1 80E180                  	AND	CL,80H			; save upper bit
 13297 00001CD4 D1E1                    	SHL	CX,1
 13298 00001CD6 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13299 00001CD8 88E8                    	MOV	AL,CH
 13300 00001CDA 88D4                    	MOV	AH,DL
 13301                                  	;mov	[si+0Ch], ax
 13302 00001CDC 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13303 00001CDF 5A                      	pop	dx
 13304 00001CE0 58                      	pop	ax
 13305 00001CE1 C3                      	retn
 13306                                  
 13307                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13308                                  ;---------------------------------------------------------------------------
 13309                                  ;
 13310                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13311                                  ;
 13312                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13313                                  ;   Outputs:	DS:SI point to the FCB part
 13314                                  ;		zeroflag set if not extended fcb
 13315                                  ;   Registers modified: SI
 13316                                  ;---------------------------------------------------------------------------
 13317                                  
 13318                                  GetExtended:
 13319 00001CE2 89D6                    	MOV	SI,DX			; point to Something
 13320 00001CE4 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13321 00001CE7 7503                    	JNZ	short GetBye		; not there
 13322 00001CE9 83C607                  	ADD	SI,7			; point to FCB
 13323                                  GetBye:
 13324 00001CEC 39D6                    	CMP	SI,DX			; set condition codes
 13325                                  getextd_retn:
 13326 00001CEE C3                      	retn
 13327                                  
 13328                                  ;Break <GetRecSize - return in BX the FCB record size>
 13329                                  ;---------------------------------------------------------------------------
 13330                                  ;
 13331                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13332                                  ;
 13333                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13334                                  ;   Outputs:	BX contains the record size
 13335                                  ;   Registers modified: None
 13336                                  ;---------------------------------------------------------------------------
 13337                                  
 13338                                  	; 22/01/2024
 13339                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13340                                  GetRecSize:
 13341                                  	;mov	bx,[si+0Eh]
 13342 00001CEF 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13343 00001CF2 09DB                    	OR	BX,BX			; is it nul?
 13344                                  	;jz	short getextd_retn
 13345                                  	; 22/01/2024 (BugFix)
 13346 00001CF4 75F8                    	jnz	short getextd_retn
 13347                                  	;MOV	BX,128			; use default size
 13348 00001CF6 B380                    	mov	bl,128
 13349                                  	;mov	[si+0Eh],bx
 13350 00001CF8 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13351 00001CFB C3                      	retn
 13352                                  
 13353                                  ;BREAK <FCBIO - do internal FCB I/O>
 13354                                  ;---------------------------------------------------------------------------
 13355                                  ;
 13356                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13357                                  ;
 13358                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13359                                  ;		DS:DX point to FCB
 13360                                  ;		CX may have count of number of records to xfer
 13361                                  ;   Outputs:	AL has error code
 13362                                  ;   Registers modified: all
 13363                                  ;---------------------------------------------------------------------------
 13364                                  
 13365                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13366                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13367                                  FCBIO:
 13368                                  
 13369                                  FEOF	EQU	1
 13370                                  FTRIM	EQU	2
 13371                                  
 13372                                  %define	FCBErr	byte [bp-1]  ; byte	
 13373                                  %define	cRec	word [bp-3]  ; word	
 13374                                  ;%define RecPos	word [bp-7]  ; dword
 13375                                  %define RecPosL	word [bp-7]  ; word
 13376                                  %define RecPosH	word [bp-5]  ; word
 13377                                  %define	RecSize	word [bp-9]  ; word
 13378                                  ;%define bPos	word [bp-13] ; dword
 13379                                  %define bPosL	word [bp-13] ; word
 13380                                  %define bPosH	word [bp-11] ; word
 13381                                  %define cByte	word [bp-15] ; word	
 13382                                  %define cResult word [bp-17] ; word	
 13383                                  %define	cRecRes	word [bp-19] ; word
 13384                                  %define	FCBOp	byte [bp-20] ; byte
 13385                                  
 13386                                  	;Enter
 13387                                  
 13388 00001CFC 55                      	push	bp
 13389 00001CFD 89E5                    	mov	bp,sp
 13390 00001CFF 83EC14                  	sub	sp,20
 13391                                  	;mov	[bp-20],al
 13392 00001D02 8846EC                  	MOV	FCBOp,AL
 13393                                  	;mov	byte [bp-1],0
 13394 00001D05 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13395 00001D09 E8D6FF                  	call	GetExtended		;   FCB = GetExtended ();
 13396                                  	;test	byte [bp-20],8
 13397 00001D0C F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13398 00001D10 7503                    	JNZ	short GetPos
 13399 00001D12 B90100                  	MOV	CX,1			;	cRec = 1;
 13400                                  GetPos:
 13401                                  	;mov	[bp-3],cx
 13402 00001D15 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13403 00001D18 E89AFF                  	call	GetExtent		;   RecPos = GetExtent ();
 13404 00001D1B E8D1FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13405                                  	;mov	[bp-9],bx
 13406 00001D1E 895EF7                  	MOV	RecSize,BX
 13407                                  	;test	byte [bp-20],2
 13408 00001D21 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13409 00001D25 7403                    	JZ	short GetRec
 13410 00001D27 E87DFF                  	call	GetRR			;	RecPos = GetRR ();
 13411                                  GetRec:
 13412                                  	;mov	[bp-7],ax
 13413 00001D2A 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13414                                  	;mov	[bp-5],dx
 13415 00001D2D 8956FB                  	MOV	RecPosH,DX
 13416 00001D30 E895FF                  	call	SetExtent		;   SetExtent (RecPos);
 13417                                  	;mov	ax,[bp-5]
 13418 00001D33 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13419 00001D36 F7E3                    	MUL	BX
 13420 00001D38 89C7                    	MOV	DI,AX
 13421                                  	;mov	ax,[bp-7]
 13422 00001D3A 8B46F9                  	MOV	AX,RecPosL
 13423 00001D3D F7E3                    	MUL	BX
 13424 00001D3F 01FA                    	ADD	DX,DI
 13425                                  	;mov	[bp-13],ax
 13426 00001D41 8946F3                  	MOV	bPosL,AX
 13427                                  	;mov	[bp-11],dx
 13428 00001D44 8956F5                  	MOV	bPosH,DX
 13429                                  	;mov	ax,[bp-3]
 13430 00001D47 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13431 00001D4A F7E3                    	MUL	BX
 13432                                  	;mov	[bp-15],ax
 13433 00001D4C 8946F1                  	MOV	cByte,AX
 13434                                  
 13435                                  ;hkn; 	SS override
 13436 00001D4F 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13437 00001D54 83D200                  	ADC	DX,0
 13438 00001D57 7419                    	JZ	short DoOper
 13439                                  	;mov	byte [bp-1],2
 13440 00001D59 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13441                                  
 13442                                  ;hkn; 	SS override
 13443 00001D5D 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13444 00001D61 F7D8                    	NEG	AX
 13445 00001D63 7501                    	JNZ	short DoDiv
 13446 00001D65 48                      	DEC	AX
 13447                                  DoDiv:
 13448 00001D66 31D2                    	XOR	DX,DX
 13449 00001D68 F7F3                    	DIV	BX
 13450                                  	;mov	[bp-3],ax
 13451 00001D6A 8946FD                  	MOV	cRec,AX
 13452 00001D6D F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13453                                  	;mov	[bp-15],ax
 13454 00001D6F 8946F1                  	MOV	cByte,AX		;	}
 13455                                  DoOper:
 13456 00001D72 31DB                    	XOR	BX,BX
 13457                                  	;mov	[bp-17],bx
 13458 00001D74 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13459                                  	;cmp	[bp-15],bx
 13460 00001D77 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13461 00001D7A 7506                    	JNZ	short DoGetExt
 13462                                  	;test	byte [bp-1],2
 13463 00001D7C F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13464                                  	;JZ	short DoGetExt
 13465                                  	;JMP	short SkipOp
 13466                                  	; 16/12/2022
 13467 00001D80 7576                    	jnz	short SkipOp
 13468                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13469                                  	;JZ	short DoGetExt
 13470                                  	;JMP	short SkipOp
 13471                                  DoGetExt:
 13472 00001D82 E8CBFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13473 00001D85 730F                    	JNC	short ContinueOp
 13474                                  FCBDeath:
 13475 00001D87 E819E9                  	call	FCB_RET_ERR		; signal error, map for extended
 13476                                  	;mov	word [bp-19],0
 13477 00001D8A C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13478                                  	;mov	byte [bp-1],1
 13479 00001D8F C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13480 00001D93 E9EF00                  	JMP	FCBSave 		; bam!
 13481                                  ContinueOp:
 13482                                  	;mov	ax,[si+10h]
 13483 00001D96 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 13484                                  	;mov	[es:di+11h],ax
 13485 00001D99 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13486                                  	;mov	ax,[si+12h]
 13487 00001D9D 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13488                                  	;mov	[es:di+13h],ax
 13489 00001DA0 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13490                                  	;mov	ax,[bp-13]
 13491 00001DA4 8B46F3                  	MOV	AX,bPosL
 13492                                  	;mov	dx,[bp-11]
 13493 00001DA7 8B56F5                  	MOV	DX,bPosH
 13494                                  	;mov	[es:di+15h],ax
 13495 00001DAA 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13496                                  	;xchg	dx,[es:di+17h]
 13497 00001DAE 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13498 00001DB2 52                      	PUSH	DX			; save away Open age.
 13499                                  	;mov	cx,[bp-15]
 13500 00001DB3 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13501                                  
 13502                                  ;hkn; DOS_Read is in DOSCODE
 13503 00001DB6 BF[7D33]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13504                                  	;test	byte [bp-20],4
 13505 00001DB9 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13506 00001DBD 7503                    	JNZ	short DoContext
 13507                                  
 13508                                  ;hkn; DOS_Write is in DOSCODE
 13509 00001DBF BF[A635]                	MOV	DI,DOS_WRITE
 13510                                  DoContext:
 13511 00001DC2 55                      	push	bp
 13512 00001DC3 1E                      	push	ds
 13513 00001DC4 56                      	push	si
 13514                                  
 13515                                  ;hkn; SS is DOSDATA
 13516 00001DC5 16                      	push	ss
 13517 00001DC6 1F                      	pop	ds
 13518                                  
 13519                                  ;; Fix for disk full
 13520 00001DC7 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE	
 13521                                  	
 13522 00001DC9 5E                      	pop	si
 13523 00001DCA 1F                      	pop	ds
 13524 00001DCB 5D                      	pop	bp
 13525 00001DCC 72B9                    	JC	short FCBDeath
 13526                                  	
 13527 00001DCE 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13528 00001DD4 740A                    	JZ	short NODSKFULL
 13529 00001DD6 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13530                                  	;mov	byte [bp-1],1 
 13531 00001DDC C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13532                                  NODSKFULL:
 13533                                  ;; Fix for disk full
 13534                                  	;mov	[bp-17],cx
 13535 00001DE0 894EEF                  	MOV	cResult,CX
 13536 00001DE3 E833FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13537                                  	;pop	word [es:di+17h]	
 13538 00001DE6 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13539                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 13540                                  	;mov	ax,[es:di+11h]
 13541 00001DEA 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13542                                  	;mov	[si+10h],ax
 13543 00001DEE 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13544                                  	;mov	ax,[es:di+13h]
 13545 00001DF1 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13546                                  	;mov	[si+12h],ax
 13547 00001DF5 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13548                                  					;	}
 13549                                  SkipOp:
 13550                                  	;mov	ax,[bp-17]
 13551 00001DF8 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13552 00001DFB 31D2                    	XOR	DX,DX
 13553                                  	;div	word [bp-9]
 13554 00001DFD F776F7                  	DIV	RecSize
 13555                                  	;mov	[bp-19],ax
 13556 00001E00 8946ED                  	MOV	cRecRes,AX
 13557                                  	;add	[bp-7],ax
 13558 00001E03 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13559                                  	;adc	word [bp-5],0
 13560 00001E06 8356FB00                	ADC	RecPosH,0
 13561                                  
 13562                                  ; If we have not gotten the expected number of records, we signal an EOF
 13563                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13564                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13565                                  ; do we.
 13566                                  
 13567                                  	;cmp	ax,[bp-3]
 13568 00001E0A 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13569 00001E0D 7411                    	JZ	short TryBlank
 13570                                  	;test	byte [bp-20],4
 13571 00001E0F F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13572 00001E13 7507                    	JNZ	short SetEOF
 13573                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13574                                  	; MSDOS 3.3
 13575                                  	;;test	word [es:di+5],80h
 13576                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13577                                  	;JNZ	short TryBlank
 13578                                  	; MSDOS 5.0 & MSDOS 6.0
 13579                                  	;test	byte [es:di+5],80h
 13580 00001E15 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13581 00001E1A 7504                    	jnz	short TryBlank
 13582                                  
 13583                                  SetEOF:
 13584                                  	;mov	byte [bp-1],1
 13585 00001E1C C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13586                                  TryBlank:				;
 13587 00001E20 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13588 00001E22 7426                    	JZ	short SetExt
 13589                                  	;add	word [bp-7],1
 13590 00001E24 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13591                                  	;adc	word [bp-5],0
 13592 00001E28 8356FB00                	ADC	RecPosH,0
 13593                                  	;test	byte [bp-20],4
 13594 00001E2C F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13595 00001E30 7418                    	JZ	short SetExt
 13596                                  	;inc	word [bp-19]
 13597 00001E32 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13598                                  	;mov	byte [bp-1],3
 13599 00001E35 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13600                                  	;mov	cx,[bp-9]
 13601 00001E39 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13602 00001E3C 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13603 00001E3E 30C0                    	XOR	AL,AL
 13604                                  ;hkn; 	SS override
 13605 00001E40 36C43E[2C03]            	les     di,[ss:DMAADD]
 13606                                  	;add	di,[bp-17]
 13607 00001E45 037EEF                  	ADD	DI,cResult
 13608 00001E48 F3AA                    	REP	STOSB			;   }	}
 13609                                  SetExt:
 13610                                  	;mov	dx,[bp-5]
 13611 00001E4A 8B56FB                  	MOV	DX,RecPosH
 13612                                  	;mov	ax,[bp-7]
 13613 00001E4D 8B46F9                  	MOV	AX,RecPosL
 13614                                  	;test	byte [bp-20],2
 13615 00001E50 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 13616 00001E54 7406                    	JZ	short DoSetExt
 13617                                  	;test	byte [bp-20],8
 13618 00001E56 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 13619 00001E5A 7403                    	JZ	short TrySetRR
 13620                                  DoSetExt:
 13621 00001E5C E869FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 13622                                  TrySetRR:
 13623                                  	;test	byte [bp-20],8
 13624 00001E5F F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13625 00001E63 740F                    	JZ	short TryReturn
 13626                                  	;mov	[si+21h],ax
 13627 00001E65 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 13628                                  	;mov	[si+23h],dl
 13629 00001E68 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 13630                                  	;cmp	word [si+0Eh],64
 13631 00001E6B 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 13632 00001E6F 7303                    	JAE	short TryReturn
 13633                                  	;mov	[si+24h],dh
 13634 00001E71 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 13635                                  TryReturn: 
 13636                                  	;test	byte [bp-20],4
 13637 00001E74 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 13638 00001E78 750B                    	JNZ	short FCBSave
 13639 00001E7A 1E                      	push	ds			;	FCB->FDate = date;
 13640 00001E7B E8C8EC                  	call	DATE16			;	FCB->FTime = time;
 13641 00001E7E 1F                      	pop	ds
 13642                                  	;mov	[si+14h],ax
 13643 00001E7F 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13644                                  	;mov	[si+16h],dx
 13645 00001E82 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 13646                                  FCBSave: 
 13647                                  	;test	byte [bp-20],8
 13648 00001E85 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13649 00001E89 7409                    	jz	short DoReturn
 13650                                  	;mov	cx,[bp-19]
 13651 00001E8B 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 13652 00001E8E E839E6                  	call    Get_User_Stack
 13653                                  	;mov	[si+4],cx
 13654 00001E91 894C04                  	MOV	[SI+user_env.user_CX],CX
 13655                                  DoReturn:
 13656                                  	;mov	al,[bp-1]
 13657 00001E94 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 13658                                  	;Leave	
 13659 00001E97 89EC                    	mov     sp,bp
 13660 00001E99 5D                      	pop     bp
 13661 00001E9A C3                      	retn
 13662                                  
 13663                                  ; 22/07/2018 - Retro DOS v3.0
 13664                                  
 13665                                  ;Break <$FCB_Open - open an old-style FCB>
 13666                                  ;---------------------------------------------------------------------------
 13667                                  ;
 13668                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 13669                                  ;	for us and asked to have the rest filled in.
 13670                                  ;
 13671                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13672                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13673                                  ;		FCB has the following fields filled in:
 13674                                  ;		    Time/Date Extent/NR Size
 13675                                  ;---------------------------------------------------------------------------
 13676                                  
 13677                                  _$FCB_OPEN:			; System call 15
 13678                                  
 13679 00001E9B B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 13680                                  
 13681                                  ;hkn; DOS_Open is in DOSCODE
 13682 00001E9E B9[FE2B]                	MOV	CX,DOS_OPEN
 13683                                  
 13684                                  ; The following is common code for Creation and openning of FCBs. AX is
 13685                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 13686                                  ; the FCB
 13687                                  
 13688                                  DoAccess:
 13689 00001EA1 1E                      	push	ds
 13690 00001EA2 52                      	push	dx
 13691 00001EA3 51                      	push	cx
 13692 00001EA4 50                      	push	ax			; save FCB pointer away
 13693                                  
 13694                                  ;hkn; 	OpenBuf is in DOSDATA
 13695 00001EA5 BF[BE03]                	MOV	DI,OPENBUF
 13696 00001EA8 E8794D                  	call	TransFCB		; crunch the fcb
 13697 00001EAB 58                      	pop	ax
 13698 00001EAC 59                      	pop	cx
 13699 00001EAD 5A                      	pop	dx
 13700 00001EAE 1F                      	pop	ds			; get fcb
 13701 00001EAF 7303                    	JNC	short FindFCB		; everything seems ok
 13702                                  FCBOpenErr:
 13703                                  	; AL has error code
 13704 00001EB1 E9EFE7                  	jmp	FCB_RET_ERR
 13705                                  FindFCB:
 13706 00001EB4 E82BFE                  	call	GetExtended		; DS:SI will point to FCB
 13707                                  
 13708                                  	; 17/05/2019 - Retro DOS v4.0
 13709                                  
 13710                                  	; MSDOS 3.3
 13711                                  	;call	LRUFCB
 13712                                  	;jc	short HardMessage
 13713                                  
 13714                                  	; MSDOS 6.0
 13715 00001EB7 50                      	push	ax
 13716 00001EB8 B001                    	mov	al,1			;indicate Open/Create operation
 13717 00001EBA E82CFB                  	call	LRUFCB			; get a sft entry (no error)
 13718 00001EBD 58                      	pop	ax
 13719 00001EBE 722A                    	jc	short HardMessage
 13720                                  	
 13721                                  	;mov	word [es:di+2],8000h
 13722 00001EC0 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 13723 00001EC6 1E                      	push	ds
 13724 00001EC7 56                      	push	si	
 13725 00001EC8 53                      	push	bx			; save fcb pointer
 13726 00001EC9 89CE                    	MOV	SI,CX
 13727                                  
 13728                                  ;hkn; SS is DOSDATA
 13729 00001ECB 16                      	push	ss
 13730 00001ECC 1F                      	pop	ds			    ; let DOS_Open see variables
 13731 00001ECD FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 13732 00001ECF 5B                      	pop	bx
 13733 00001ED0 5E                      	pop	si
 13734 00001ED1 1F                      	pop	ds			; get fcb
 13735                                  
 13736                                  ;hkn; SS override
 13737 00001ED2 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 13738 00001ED7 7318                    	JNC	short FCBOK		; operation succeeded
 13739                                  failopen:
 13740 00001ED9 50                      	PUSH	AX
 13741 00001EDA B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 13742 00001EDC E8EEFC                  	call	BlastSFT
 13743 00001EDF 58                      	POP	AX
 13744                                  	;cmp	ax,4
 13745 00001EE0 83F804                  	CMP	AX,error_too_many_open_files
 13746 00001EE3 7405                    	JZ	short HardMessage
 13747                                  	;cmp	ax,24h
 13748 00001EE5 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 13749 00001EE8 7505                    	jnz	short DeadFCB
 13750                                  HardMessage:
 13751 00001EEA 50                      	PUSH	AX
 13752 00001EEB E898FD                  	call	FCBHardErr
 13753 00001EEE 58                      	POP	AX
 13754                                  DeadFCB:
 13755                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13756                                  	;jmp	FCB_RET_ERR
 13757 00001EEF EBC0                    	jmp	short FCBOpenErr
 13758                                  FCBOK:
 13759                                  	; MSDOS 6.0
 13760 00001EF1 E8E8F3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 13761 00001EF4 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 13762 00001EF6 E85855                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 13763 00001EF9 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 13764                                  ;SR;
 13765                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 13766                                  ; LocalSFT variable to reflect this.
 13767                                  
 13768 00001EFB 36893E[5D10]            	mov	[ss:LocalSFT],di
 13769 00001F00 368C06[5F10]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 13770                                  ;;SR;
 13771                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 13772                                  ;;
 13773                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 13774                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 13775                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 13776                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 13777                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 13778                                  
 13779                                  FCBOK2:
 13780                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13781 00001F05 26FF05                  	inc	word [es:di]
 13782                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 13783 00001F08 E80EFA                  	call	SaveFCBInfo
 13784                                  	; MSDOS 3.3
 13785                                  	;call	SetOpenAge
 13786                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13787                                  	;test	word [es:di+5],80h
 13788                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13789 00001F0B 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 13790 00001F10 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 13791 00001F12 8A04                    	MOV	AL,[SI]			; get drive byte
 13792 00001F14 E8944C                  	call	GETTHISDRV		; convert
 13793                                  	;INC	AL
 13794                                  	; 17/12/2022
 13795 00001F17 40                      	inc	ax
 13796 00001F18 8804                    	MOV	[SI],AL			; stash in good drive letter
 13797                                  FCBNoDrive:
 13798                                  	;mov	word [si+0Eh],128
 13799 00001F1A C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 13800                                  
 13801                                  	;mov	ax,[es:di+0Dh]
 13802 00001F1F 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 13803                                  	;mov	[si+16h],ax
 13804 00001F23 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 13805                                  	;mov	ax,[es:di+0Fh]
 13806 00001F26 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 13807                                  	;mov	[si+14h],ax
 13808 00001F2A 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13809                                  	;mov	ax,[es:di+11h]
 13810 00001F2D 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 13811                                  	;mov	[si+10h],ax
 13812 00001F31 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13813                                  	;mov	ax,[es:di+13h]
 13814 00001F34 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13815                                  	;mov	[si+12h],ax
 13816 00001F38 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13817 00001F3B 31C0                    	XOR	AX,AX			; convenient zero
 13818                                  	;mov	[si+0Ch],ax
 13819 00001F3D 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 13820                                  
 13821                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 13822                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 13823                                  
 13824                                  ;hkn; 	SS override
 13825 00001F40 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 13826                                  	;mov	ah,[es:di+4]
 13827 00001F45 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 13828                                  OpenScan:
 13829                                  	;cmp	al,[si+18h]
 13830 00001F49 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 13831 00001F4C 7407                    	JZ	short SkipCheck
 13832 00001F4E 50                      	push	ax			; preserve count
 13833 00001F4F E891FC                  	call	CheckFCB		; do they match
 13834 00001F52 58                      	pop	ax			; get count back
 13835 00001F53 7309                    	JNC	short OpenFound		; found a match!
 13836                                  SkipCheck:
 13837 00001F55 FEC0                    	INC	AL			; advance to next FCB
 13838 00001F57 38E0                    	CMP	AL,AH			; table full?
 13839 00001F59 75EE                    	JNZ	short OpenScan		; no, go for more
 13840                                  OpenDone:
 13841 00001F5B 30C0                    	xor	al,al			; return success
 13842 00001F5D C3                      	retn
 13843                                  
 13844                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 13845                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 13846                                  ; Consider:
 13847                                  ;
 13848                                  ;   open (foo)	delete (foo) open (bar)
 13849                                  ;
 13850                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 13851                                  ; foo even though foo is no longer needed; this is due to the server closing
 13852                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 13853                                  ; If we were to CLOSE bar, the server would then close the only reference to
 13854                                  ; bar and subsequent I/O would be lost to the redirector.
 13855                                  ;
 13856                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 13857                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 13858                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 13859                                  ; around. This will allow us to access the same file through multiple network
 13860                                  ; connections and NOT prematurely terminate when the ref count on one
 13861                                  ; connection goes to zero.
 13862                                  
 13863                                  OpenFound:
 13864                                  	;mov	[si+18h],al
 13865 00001F5E 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 13866 00001F61 26FF05                  	inc	word [es:di]
 13867                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13868                                  					; remember this new invocation
 13869 00001F64 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 13870                                  	;mov	[es:di+15h],ax
 13871 00001F68 26894515                	MOV	[ES:DI+sf_LRU],AX
 13872                                  ;
 13873                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 13874                                  ; blast it to prevent other reuse.
 13875                                  ;
 13876 00001F6C 16                      	push	ss
 13877 00001F6D 1F                      	pop	ds
 13878 00001F6E C43E[9E05]              	LES	DI,[THISSFT]
 13879 00001F72 26FF0D                  	dec	word [es:di]
 13880                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13881                                  					; free the newly allocated SFT
 13882 00001F75 E81155                  	call	ShareEnd
 13883 00001F78 B043                    	MOV	AL,'C'	 ; 43h
 13884 00001F7A E850FC                  	call	BlastSFT
 13885 00001F7D EBDC                    	JMP	short OpenDone
 13886                                  
 13887                                  ;BREAK	<$FCB_Create - create a new directory entry>
 13888                                  ;----------------------------------------------------------------------------
 13889                                  ;
 13890                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 13891                                  ;	FCB for us and asked to have the rest filled in.
 13892                                  ;
 13893                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13894                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13895                                  ;		FCB has the following fields filled in:
 13896                                  ;		    Time/Date Extent/NR Size
 13897                                  ;----------------------------------------------------------------------------
 13898                                  
 13899                                  _$FCB_CREATE:		; System call 22
 13900                                  
 13901                                  ;hkn; DOS_Create is in DOSCODE
 13902 00001F7F B9[D42A]                	MOV	CX,DOS_CREATE		; routine to call
 13903 00001F82 31C0                    	XOR	AX,AX			; attributes to create
 13904 00001F84 E85BFD                  	call	GetExtended		; get extended FCB
 13905 00001F87 7403                    	JZ	short DoAccessJ		; not an extended FCB
 13906 00001F89 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 13907                                  DoAccessJ:
 13908 00001F8C E912FF                  	JMP	DoAccess		; do dirty work
 13909                                  
 13910                                  ; 22/07/2018 - Retro DOS v3.0
 13911                                  
 13912                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13913                                  ;----------------------------------------------------------------------------
 13914                                  ;
 13915                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13916                                  ;	and write a number of blocks from it.
 13917                                  ;
 13918                                  ;   Inputs:	DS:DX point to an FCB
 13919                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13920                                  ;		AL <> 0 Not enough room on disk for the output
 13921                                  ;
 13922                                  ;----------------------------------------------------------------------------
 13923                                  
 13924                                  _$FCB_RANDOM_WRITE_BLOCK:
 13925                                  	;mov	AL,0Ah	
 13926 00001F8F B00A                    	MOV	AL,RANDOM+BLOCK
 13927 00001F91 E968FD                  	JMP	FCBIO
 13928                                  
 13929                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13930                                  ;----------------------------------------------------------------------------
 13931                                  ;
 13932                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13933                                  ;	and read a number of blocks from it.
 13934                                  ;
 13935                                  ;   Inputs:	DS:DX point to an FCB
 13936                                  ;   Outputs:	AL = error codes defined above
 13937                                  ;
 13938                                  ;----------------------------------------------------------------------------
 13939                                  
 13940                                  _$FCB_RANDOM_READ_BLOCK:
 13941                                  	;mov	AL,0Eh	
 13942 00001F94 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13943 00001F96 E963FD                  	JMP	FCBIO
 13944                                  
 13945                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13946                                  ;----------------------------------------------------------------------------
 13947                                  ;
 13948                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13949                                  ;	memory
 13950                                  ;
 13951                                  ;   Inputs:	DS:DX point to an FCB
 13952                                  ;   Outputs:	AL = error codes defined above
 13953                                  ;
 13954                                  ;----------------------------------------------------------------------------
 13955                                  
 13956                                  _$FCB_SEQ_READ:
 13957                                  	;mov	AL,4	
 13958 00001F99 B004                    	MOV	AL,FCBREAD
 13959 00001F9B E95EFD                  	JMP	FCBIO
 13960                                  
 13961                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13962                                  ;----------------------------------------------------------------------------
 13963                                  ;
 13964                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13965                                  ;	file
 13966                                  ;
 13967                                  ;   Inputs:	DS:DX point to an FCB
 13968                                  ;   Outputs:	AL = error codes defined above
 13969                                  ;
 13970                                  ;----------------------------------------------------------------------------
 13971                                  
 13972                                  _$FCB_SEQ_WRITE:
 13973 00001F9E B000                    	MOV	AL,0
 13974 00001FA0 E959FD                  	jmp	FCBIO
 13975                                  
 13976                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13977                                  ;----------------------------------------------------------------------------
 13978                                  ;
 13979                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13980                                  ;	record from it.
 13981                                  ;
 13982                                  ;   Inputs:	DS:DX point to an FCB
 13983                                  ;   Outputs:	AL = error codes defined above
 13984                                  ;
 13985                                  ;----------------------------------------------------------------------------
 13986                                  
 13987                                  _$FCB_RANDOM_READ:
 13988                                  	;mov	AL,6	
 13989 00001FA3 B006                    	MOV	AL,RANDOM+FCBREAD
 13990 00001FA5 E954FD                  	jmp	FCBIO			; single block
 13991                                  
 13992                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13993                                  ;----------------------------------------------------------------------------
 13994                                  ;
 13995                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13996                                  ;	a record to it.
 13997                                  ;
 13998                                  ;   Inputs:	DS:DX point to an FCB
 13999                                  ;   Outputs:	AL = error codes defined above
 14000                                  ;
 14001                                  ;----------------------------------------------------------------------------
 14002                                  
 14003                                  _$FCB_RANDOM_WRITE:
 14004                                  	;mov	AL,2	
 14005 00001FA8 B002                    	MOV	AL,RANDOM
 14006 00001FAA E94FFD                  	jmp	FCBIO
 14007                                  
 14008                                  ;============================================================================
 14009                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14010                                  ;============================================================================
 14011                                  ; 22/07/2018 - Retro DOS v3.0
 14012                                  ; 17/05/2019 - Retro DOS v4.0
 14013                                  
 14014                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14015                                  
 14016                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14017                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14018                                  
 14019                                  ;**	Search.asm
 14020                                  ;----------------------------------------------------------------------------
 14021                                  ;	Directory search system calls.
 14022                                  ;	These will be passed direct text of the pathname from the user. 
 14023                                  ;	They will need to be passed through the macro expander prior to
 14024                                  ;	being sent through the low-level stuff. 
 14025                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14026                                  ;
 14027                                  ;	$Dir_Search_First	  written
 14028                                  ;	$Dir_Search_Next	  written
 14029                                  ;	$Find_First	  written
 14030                                  ;	$Find_Next		  written
 14031                                  ;	PackName		  written
 14032                                  ;
 14033                                  ;	Modification history:
 14034                                  ;
 14035                                  ;	  Created: ARR 4 April 1983
 14036                                  
 14037                                  ;----------------------------------------------------------------------------
 14038                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14039                                  ;
 14040                                  ; Inputs:
 14041                                  ;	DS:DX Points to unopenned FCB
 14042                                  ; Function:
 14043                                  ;	Directory is searched for first matching entry and the directory
 14044                                  ;	entry is loaded at the disk transfer address
 14045                                  ; Returns:
 14046                                  ;	AL = -1 if no entries matched, otherwise 0
 14047                                  ;----------------------------------------------------------------------------
 14048                                  
 14049                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14050                                  
 14051                                  _$DIR_SEARCH_FIRST:
 14052 00001FAD 368916[A605]            	MOV	[SS:THISFCB],DX
 14053 00001FB2 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14054 00001FB7 89D6                    	MOV	SI,DX
 14055 00001FB9 803CFF                  	CMP	BYTE [SI],0FFH
 14056 00001FBC 7503                    	JNZ	short NORMFCB4
 14057 00001FBE 83C607                  	ADD	SI,7			; Point to drive select byte
 14058                                  NORMFCB4:
 14059 00001FC1 FF34                    	push	word [SI]		; Save original drive byte for later
 14060                                  
 14061 00001FC3 16                      	push	ss
 14062 00001FC4 07                      	pop	es			; get es to address DOSGroup
 14063                                  
 14064 00001FC5 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14065 00001FC8 E8594C                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14066 00001FCB 7304                    	JNC	short SearchIt		; no error, go and look
 14067 00001FCD 5B                      	pop	bx			; Clean stack
 14068                                  
 14069                                  ; Error code is in AX
 14070                                  
 14071                                  	; 09/11/2022
 14072                                  dcf_errj:
 14073 00001FCE E9D2E6                  	jmp	FCB_RET_ERR		; error
 14074                                  
 14075                                  SearchIt:
 14076 00001FD1 16                      	push	ss
 14077 00001FD2 1F                      	pop	ds			; get ready for search
 14078 00001FD3 FF36[2C03]              	push	word [DMAADD]
 14079 00001FD7 FF36[2E03]              	push	word [DMAADD+2]
 14080 00001FDB C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14081 00001FE1 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14082                                  	; MSDOS 3.3
 14083                                  	;call	DOS_SEARCH_FIRST
 14084                                  	; MSDOS 6.0
 14085 00001FE5 E88501                  	call	GET_FAST_SEARCH		; search
 14086 00001FE8 8F06[2E03]              	pop	word [DMAADD+2]
 14087 00001FEC 8F06[2C03]              	pop	word [DMAADD]
 14088 00001FF0 7303                    	JNC	short SearchSet		; no error, transfer info
 14089 00001FF2 5B                      	pop	bx			; Clean stack
 14090                                  
 14091                                  ; Error code is in AX
 14092                                  
 14093                                  	; 09/11/2022
 14094                                  	;jmp	FCB_RET_ERR
 14095 00001FF3 EBD9                    	jmp	short dcf_errj
 14096                                  
 14097                                  ; The search was successful (or the search-next). We store the information
 14098                                  ; into the user's FCB for continuation.
 14099                                  
 14100                                  SearchSet:
 14101 00001FF5 BE[BE04]                	MOV	SI,SEARCHBUF
 14102 00001FF8 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14103 00001FFC F606[6C05]FF            	TEST	byte [EXTFCB],0FFh		;
 14104 00002001 7403                    	JZ	short NORMFCB1
 14105 00002003 83C707                  	ADD	DI,7			; Point past the extension
 14106                                  NORMFCB1:
 14107 00002006 5B                      	pop	bx			; Get original drive byte
 14108 00002007 08DB                    	OR	BL,BL
 14109 00002009 7506                    	JNZ	short SearchDrv
 14110 0000200B 8A1E[3603]              	MOV	BL,[CURDRV]
 14111 0000200F FEC3                    	INC	BL
 14112                                  SearchDrv:
 14113 00002011 AC                      	LODSB				; Get correct search contin drive byte
 14114 00002012 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14115 00002014 47                      	INC	DI
 14116                                  	;STOSB				; Store the correct "user" drive byte
 14117                                  					;  at the start of the search info
 14118 00002015 B90A00                  	MOV	CX,20/2
 14119 00002018 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14120 0000201A 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14121                                  					;   byte to AL
 14122 0000201C AA                      	STOSB				; Search contin drive byte at end of
 14123                                  					;   contin info
 14124 0000201D C43E[2C03]              	LES	DI,[DMAADD]
 14125 00002021 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14126 00002026 740D                    	JZ	short NORMFCB2
 14127 00002028 B0FF                    	MOV	AL,0FFh
 14128 0000202A AA                      	STOSB
 14129 0000202B FEC0                    	INC	AL
 14130                                  	;MOV	CX,5
 14131                                  	; 17/12/2022
 14132 0000202D B105                    	mov	cl,5
 14133 0000202F F3AA                    	REP	STOSB
 14134 00002031 A0[6D05]                	MOV	AL,[SATTRIB]
 14135 00002034 AA                      	STOSB
 14136                                  NORMFCB2:
 14137 00002035 88D8                    	MOV	AL,BL			; User Drive byte
 14138 00002037 AA                      	STOSB
 14139                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14140                                  	; 17/12/2022
 14141 00002038 B110                    	mov	cl,16
 14142 0000203A F3A5                    	REP	MOVSW
 14143 0000203C E961E6                  	jmp	FCB_RET_OK
 14144                                  
 14145                                  ;----------------------------------------------------------------------------
 14146                                  ;
 14147                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14148                                  ;
 14149                                  ; Inputs:
 14150                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14151                                  ; Function:
 14152                                  ;	Directory is searched for the next matching entry and the directory
 14153                                  ;	entry is loaded at the disk transfer address
 14154                                  ; Returns:
 14155                                  ;	AL = -1 if no entries matched, otherwise 0
 14156                                  ;----------------------------------------------------------------------------
 14157                                  
 14158                                  _$DIR_SEARCH_NEXT:
 14159 0000203F 368916[A605]            	MOV	[SS:THISFCB],DX
 14160 00002044 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14161 00002049 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14162 0000204F 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14163                                  
 14164 00002055 16                      	push	ss
 14165 00002056 07                      	pop	es
 14166                                  
 14167 00002057 BF[BE04]                	MOV	DI,SEARCHBUF
 14168                                  
 14169 0000205A 89D6                    	MOV	SI,DX
 14170 0000205C 803CFF                  	CMP	BYTE [SI],0FFh
 14171 0000205F 750D                    	JNZ	short NORMFCB6
 14172 00002061 83C606                  	ADD	SI,6
 14173 00002064 AC                      	LODSB
 14174                                  
 14175 00002065 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14176 00002069 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14177                                  NORMFCB6:
 14178 0000206E AC                      	LODSB				; Get original user drive byte
 14179 0000206F 50                      	push	ax			; Put it on stack
 14180 00002070 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14181 00002073 AA                      	STOSB				; Put in correct place
 14182 00002074 B90A00                  	MOV	CX,20/2
 14183 00002077 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14184                                  
 14185 00002079 16                      	push	ss
 14186 0000207A 1F                      	pop	ds
 14187                                  
 14188 0000207B FF36[2C03]              	push	word [DMAADD]
 14189 0000207F FF36[2E03]              	push	word [DMAADD+2]
 14190 00002083 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14191 00002089 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14192 0000208D E8250E                  	call	DOS_SEARCH_NEXT 	; Find it
 14193 00002090 8F06[2E03]              	pop	word [DMAADD+2]
 14194 00002094 8F06[2C03]              	pop	word [DMAADD]
 14195 00002098 7203                    	JC	short SearchNoMore
 14196 0000209A E958FF                  	JMP	SearchSet		; Ok set return
 14197                                  
 14198                                  SearchNoMore:
 14199 0000209D C43E[A605]              	LES	DI,[THISFCB]
 14200 000020A1 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14201 000020A6 7403                    	JZ	short NORMFCB8
 14202 000020A8 83C707                  	ADD	DI,7			; Point past the extension
 14203                                  NORMFCB8:
 14204 000020AB 5B                      	pop	bx			; Get original drive byte
 14205 000020AC 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14206                                  					;  at the right spot
 14207                                  ; error code is in AX
 14208                                  
 14209 000020AF E9F1E5                  	jmp	FCB_RET_ERR
 14210                                  
 14211                                  ; 17/05/2019 - Retro DOS v4.0
 14212                                  
 14213                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14214                                  
 14215                                  ;---------------------------------------------------------------------------
 14216                                  ;
 14217                                  ;   Procedure Name : $FIND_FIRST
 14218                                  ; 
 14219                                  ;   Assembler usage:
 14220                                  ;	    MOV AH, FindFirst
 14221                                  ;	    LDS DX, name
 14222                                  ;	    MOV CX, attr
 14223                                  ;	    INT 21h
 14224                                  ;	; DMA address has datablock
 14225                                  ;
 14226                                  ;   Error Returns:
 14227                                  ;	    AX = error_path_not_found
 14228                                  ;	       = error_no_more_files
 14229                                  ;---------------------------------------------------------------------------
 14230                                  
 14231                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14232                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14233                                  
 14234                                  _$FIND_FIRST:
 14235 000020B2 89D6                    	MOV	SI,DX			; get name in appropriate place
 14236 000020B4 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14237                                  
 14238 000020B9 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14239                                  
 14240 000020BC E8CB4B                  	call	TransPathSet		; convert the path
 14241 000020BF 7305                    	JNC	short Find_it 		; no error, go and look
 14242                                  FindError:
 14243                                  	;mov	al,3
 14244 000020C1 B003                    	mov	al, error_path_not_found ; error and map into one.
 14245                                  	; 09/11/2022
 14246                                  FF_errj:
 14247 000020C3 E9C7E5                  	jmp	SYS_RET_ERR
 14248                                  Find_it:
 14249 000020C6 16                      	push	ss
 14250 000020C7 1F                      	pop	ds
 14251                                  
 14252 000020C8 FF36[2C03]              	push	word [DMAADD]
 14253 000020CC FF36[2E03]              	push	word [DMAADD+2]
 14254 000020D0 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14255 000020D6 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14256                                  	; MSDOS 3.3
 14257                                  	;call	DOS_SEARCH_FIRST
 14258                                  	; MSDOS 6.0
 14259 000020DA E89000                  	call	GET_FAST_SEARCH 	; search
 14260 000020DD 8F06[2E03]              	pop	word [DMAADD+2]
 14261 000020E1 8F06[2C03]              	pop	word [DMAADD]
 14262                                  	
 14263                                  	; 16/12/2022
 14264                                  	;JNC	short FindSet 		; no error, transfer info
 14265 000020E5 72DC                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14266                                  	;
 14267                                  	;jmp	SYS_RET_ERR
 14268                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14269                                  ;FFF_errj:
 14270                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14271                                  
 14272                                  FindSet:
 14273 000020E7 BE[BE04]                	MOV	SI,SEARCHBUF
 14274 000020EA C43E[2C03]              	LES	DI,[DMAADD]
 14275 000020EE B91500                  	MOV	CX,21
 14276 000020F1 F3A4                    	REP	MOVSB
 14277 000020F3 56                      	PUSH	SI			; Save pointer to start of entry
 14278                                  	;mov	al,[si+0Bh]
 14279 000020F4 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14280 000020F7 AA                      	STOSB
 14281                                  	;add	si,16h ; 22
 14282 000020F8 83C616                  	ADD	SI,dir_entry.dir_time
 14283 000020FB A5                      	MOVSW				; dir_time
 14284 000020FC A5                      	MOVSW				; dir_date
 14285 000020FD 46                      	INC	SI
 14286 000020FE 46                      	INC	SI			; Skip dir_first
 14287 000020FF A5                      	MOVSW				; dir_size (2 words)
 14288 00002100 A5                      	MOVSW
 14289 00002101 5E                      	POP	SI			; Point back to dir_name
 14290 00002102 E83500                   	CALL	PackName
 14291 00002105 E97CE5                  	jmp	SYS_RET_OK		; bye with no errors
 14292                                  
 14293                                  ;---------------------------------------------------------------------------
 14294                                  ;
 14295                                  ;   Procedure Name : $FIND_NEXT
 14296                                  ;
 14297                                  ;   Assembler usage:
 14298                                  ;	; dma points at area returned by find_first
 14299                                  ;	    MOV AH, findnext
 14300                                  ;	    INT 21h
 14301                                  ;	; next entry is at dma
 14302                                  ;
 14303                                  ;   Error Returns:
 14304                                  ;	    AX = error_no_more_files
 14305                                  ;---------------------------------------------------------------------------
 14306                                  
 14307                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14308                                  _$FIND_NEXT:
 14309 00002108 16                      	push	ss
 14310 00002109 07                      	pop	es
 14311                                  
 14312 0000210A BF[BE04]                	MOV	DI,SEARCHBUF
 14313                                  
 14314 0000210D 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14315                                  
 14316 00002112 B91500                  	MOV	CX,21
 14317 00002115 F3A4                    	REP	MOVSB			; Put the search continuation info
 14318                                  					;  in the right place
 14319 00002117 16                      	push	ss
 14320 00002118 1F                      	pop	ds			; get ready for search
 14321                                  	
 14322 00002119 FF36[2C03]              	push	word [DMAADD]
 14323 0000211D FF36[2E03]              	push	word [DMAADD+2]
 14324 00002121 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14325 00002127 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14326 0000212B E8870D                  	call	DOS_SEARCH_NEXT 	; Find it
 14327 0000212E 8F06[2E03]              	pop	word [DMAADD+2]
 14328 00002132 8F06[2C03]              	pop	word [DMAADD]
 14329 00002136 73AF                    	JNC	short FindSet 		; No error, set info
 14330                                  	;jmp	SYS_RET_ERR
 14331                                  	; 16/12/2022
 14332 00002138 EB89                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14333                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14334                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14335                                  
 14336                                  ;---------------------------------------------------------------------------
 14337                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14338                                  ;
 14339                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14340                                  ;	the ASCIZ format.
 14341                                  ;
 14342                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14343                                  ;		(ES:DI) = destination area (13 bytes)
 14344                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14345                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14346                                  ;---------------------------------------------------------------------------
 14347                                  
 14348                                  PackName:
 14349                                  ;	Move over 8 characters to cover the name component, then trim it's
 14350                                  ;	trailing blanks.
 14351                                  
 14352 0000213A B90800                  	MOV	CX,8			; Pack the name
 14353 0000213D F3A4                    	REP	MOVSB			; Move all of it
 14354                                  main_kill_tail:
 14355 0000213F 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14356 00002144 7507                    	JNZ	short find_check_dot
 14357 00002146 4F                      	DEC	DI			; Back up over trailing space
 14358 00002147 41                      	INC	CX
 14359 00002148 83F908                  	CMP	CX,8
 14360 0000214B 72F2                    	JB	short main_kill_tail
 14361                                  find_check_dot:
 14362                                  	;CMP	WORD [SI],(" " << 8) | " "
 14363 0000214D 813C2020                	cmp     word [si],2020h 
 14364 00002151 7506                    	JNZ	short got_ext 		; Some chars in extension
 14365 00002153 807C0220                	CMP	BYTE [SI+2]," "
 14366 00002157 7410                    	JZ	short find_done		; No extension
 14367                                  got_ext:
 14368 00002159 B02E                    	MOV	AL,"."	; 2Eh
 14369 0000215B AA                      	STOSB
 14370                                  	;MOV	CX,3
 14371                                  	; 18/12/2022
 14372                                  	;mov	cl,3
 14373                                  	;REP	MOVSB
 14374 0000215C A4                      	movsb
 14375 0000215D A4                      	movsb
 14376 0000215E A4                      	movsb
 14377                                  ext_kill_tail:
 14378 0000215F 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14379 00002164 7503                    	JNZ	short find_done
 14380 00002166 4F                      	DEC	DI			; Back up over trailing space
 14381 00002167 EBF6                    	JMP	short ext_kill_tail
 14382                                  find_done:
 14383 00002169 31C0                    	XOR	AX,AX
 14384 0000216B AA                      	STOSB				; NUL terminate
 14385 0000216C C3                      	retn
 14386                                  
 14387                                  ;---------------------------------------------------------------------------
 14388                                  
 14389                                  	; 17/05/2019 - Retro DOS v4.0
 14390                                  GET_FAST_SEARCH:
 14391                                  	; 22/07/2018
 14392                                  	; MSDOS 6.0
 14393                                  	; 17/12/2022
 14394 0000216D 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14395                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14396                                  					;FO.trigger fastopen ;AN000;
 14397                                  	;call	DOS_SEARCH_FIRST
 14398                                  	;retn
 14399                                  	; 17/12/2022
 14400 00002173 E9530C                  	jmp	DOS_SEARCH_FIRST
 14401                                  
 14402                                  ;============================================================================
 14403                                  ; PATH.ASM, MSDOS 6.0, 1991
 14404                                  ;============================================================================
 14405                                  ; 06/08/2018 - Retro DOS v3.0
 14406                                  ; 17/05/2019 - Retro DOS v4.0
 14407                                  
 14408                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14409                                  
 14410                                  ;**	Directory related system calls. These will be passed direct text of the
 14411                                  ;	pathname from the user. They will need to be passed through the macro
 14412                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14413                                  ;	defined in DISPATCH. The system calls are:
 14414                                  ;
 14415                                  ;	$CURRENT_DIR  Written
 14416                                  ;	$RMDIR	  Written
 14417                                  ;	$CHDIR	  Written
 14418                                  ;	$MKDIR	  Written
 14419                                  ;
 14420                                  ;
 14421                                  ;	Modification history:
 14422                                  ;
 14423                                  ;	    Created: ARR 4 April 1983
 14424                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14425                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14426                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14427                                  ;				    current directory.
 14428                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14429                                  
 14430                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14431                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14432                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14433                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14434                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14435                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14436                                  ;	I_Need	cMeta,BYTE
 14437                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14438                                  
 14439                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14440                                  ;----------------------------------------------------------------------------
 14441                                  ;
 14442                                  ;   Procedure Name : $CURRENT_DIR
 14443                                  ;
 14444                                  ;   Assembler usage:
 14445                                  ;		LDS	SI,area
 14446                                  ;		MOV	DL,drive
 14447                                  ;		INT	21h
 14448                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14449                                  ;	    ; current directory.
 14450                                  ;   Error returns:
 14451                                  ;	    AX = error_invalid_drive
 14452                                  ;
 14453                                  ;----------------------------------------------------------------------------
 14454                                  
 14455                                  _$CURRENT_DIR:
 14456                                  	;06/08/2018 - Retro DOS v3.0
 14457                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14458 00002176 E80FF2                  	call	ECritDisk
 14459 00002179 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14460 0000217B E8114A                  	call	GetVisDrv		; grab it
 14461 0000217E 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14462                                  CurdirErr:
 14463 00002180 E820F2                  	call	LCritDisk
 14464                                  
 14465                                  	; MSDOS 3.3
 14466                                  	;mov	al,0Fh
 14467                                  	
 14468                                  	; MSDOS 6.0
 14469 00002183 1E                      	push	ds
 14470 00002184 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14471 00002189 A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14472 0000218C 1F                      	pop	ds
 14473                                  
 14474                                  curdir_errj:
 14475 0000218D E9FDE4                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14476                                  
 14477                                  CurrentValidate:
 14478 00002190 1E                      	push	ds			; save destination
 14479 00002191 56                      	push	si
 14480                                  	
 14481                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14482                                  	
 14483                                  	; MSDOS 6.0
 14484 00002192 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14485 00002197 C536[A205]              	lds     si,[THISCDS]
 14486                                  
 14487                                  ; 16/12/2022
 14488                                  %if 0
 14489                                  	; 09/11/2022 (following test instruction is nonsense!)
 14490                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14491                                  
 14492                                  	;test	word [si+43h],8000h
 14493                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14494                                  	;jnz	short $+2  ; 09/11/2022	
 14495                                  	jnz	short DoCheck
 14496                                  %endif
 14497                                  
 14498                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14499                                  ; media check.
 14500                                  ;	CMP	word [SI+curdir.ID],0
 14501                                  ;	JZ	short GetDst
 14502                                  DoCheck:
 14503                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14504                                  
 14505                                  	; MSDOS 6.0
 14506 0000219B 1E                      	push	ds
 14507 0000219C 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14508 000021A1 C606[4C03]00            	mov	byte [NoSetDir],0
 14509 000021A6 1F                      	pop	ds
 14510                                  
 14511 000021A7 BF[BE03]                	MOV	DI,OPENBUF
 14512 000021AA E88621                  	call	ValidateCDS		; output is ES:DI -> CDS
 14513                                  
 14514 000021AD 06                      	push	es	 		; swap source and destination
 14515 000021AE 57                      	push	di
 14516 000021AF 5E                      	pop	si
 14517 000021B0 1F                      	pop	ds
 14518                                  GetDst:
 14519 000021B1 5F                      	pop	di
 14520 000021B2 07                      	pop	es			; get real destination
 14521 000021B3 72CB                    	JC	short CurdirErr
 14522                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14523                                  	;
 14524                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14525                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14526                                  	; 16/12/2022
 14527                                  	;add	si,0  ; add si,curdir.text
 14528                                  	;
 14529                                  	;add	si,[si+4Fh] ; 17/05/2019
 14530 000021B5 03744F                  	ADD	SI,[SI+curdir.end]
 14531 000021B8 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14532 000021BB 7501                    	JNZ	short CurrentCopy
 14533 000021BD 46                      	INC	SI
 14534                                  CurrentCopy:
 14535                                  ;	call	FStrCpy
 14536                                  ;; 10/29/86 E5 char
 14537 000021BE 50                      	PUSH	AX
 14538 000021BF AC                      	LODSB				; get char
 14539 000021C0 08C0                    	OR	AL,AL
 14540 000021C2 7413                    	JZ	short FOK
 14541 000021C4 3C05                    	CMP	AL,05H
 14542 000021C6 740D                    	JZ	short FCHANGE
 14543 000021C8 EB01                    	JMP	short FFF
 14544                                  FCPYNEXT:
 14545 000021CA AC                      	LODSB				; get char
 14546                                  FFF:
 14547 000021CB 3C5C                    	CMP	AL,'\'			; beginning of directory
 14548 000021CD 7508                    	JNZ	short FOK		; no
 14549 000021CF AA                      	STOSB				; put into user's buffer
 14550 000021D0 AC                      	LODSB				; 1st char of dir is 05?
 14551 000021D1 3C05                    	CMP	AL,05H
 14552 000021D3 7502                    	JNZ	short FOK		; no
 14553                                  FCHANGE:
 14554 000021D5 B0E5                    	MOV	AL,0E5H			; make it E5
 14555                                  FOK:
 14556 000021D7 AA                      	STOSB				; put into user's buffer
 14557 000021D8 08C0                    	OR	AL,AL			; final char
 14558 000021DA 75EE                    	JNZ	short FCPYNEXT		; no
 14559 000021DC 58                      	POP	AX
 14560                                  
 14561                                  ;; 10/29/86 E5 char
 14562 000021DD 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14563 000021DF E8C1F1                  	call	LCritDisk
 14564 000021E2 E99FE4                  	jmp	SYS_RET_OK		; no more, bye!
 14565                                  
 14566                                  ; 17/05/2019 - Retro DOS v4.0
 14567                                  
 14568                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14569                                  
 14570                                  ;BREAK <$RmDir -- Remove a directory>
 14571                                  ;----------------------------------------------------------------------------
 14572                                  ;
 14573                                  ; Procedure Name : $RmDir
 14574                                  ;
 14575                                  ; Inputs:
 14576                                  ;	DS:DX Points to asciz name
 14577                                  ; Function:
 14578                                  ;	Delete directory if empty
 14579                                  ; Returns:
 14580                                  ;	STD XENIX Return
 14581                                  ;	AX = error_path_not_found If path bad
 14582                                  ;	AX = error_access_denied If
 14583                                  ;		Directory not empty
 14584                                  ;		Path not directory
 14585                                  ;		Root directory specified
 14586                                  ;		Directory malformed (. and .. not first two entries)
 14587                                  ;		User tries to delete a current directory
 14588                                  ;	AX = error_current_directory
 14589                                  ;
 14590                                  ;----------------------------------------------------------------------------
 14591                                  
 14592                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14593                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14594                                  
 14595                                  _$RMDIR:
 14596 000021E5 52                      	push	dx			; Save ptr to name
 14597 000021E6 1E                      	push	ds
 14598 000021E7 89D6                    	mov	si,dx			; Load ptr into si
 14599 000021E9 BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14600 000021EC 57                      	push	di
 14601 000021ED E8A24A                  	call	TransPathNoSet		; Translate the name
 14602 000021F0 5F                      	pop	di			; di = ptr to buf for trans name
 14603 000021F1 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14604 000021F3 1F                      	pop	ds
 14605 000021F4 5A                      	pop	dx			; Restore the name
 14606                                  	;mov	al,3
 14607 000021F5 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14608                                  	; 16/12/2022
 14609                                  rmdir_errj: ; 10/08/2018
 14610                                  chdir_errj:
 14611 000021F7 EB94                    	jmp	short curdir_errj
 14612                                  	;jmp	SYS_RET_ERR
 14613                                  rmlset:
 14614 000021F9 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14615 000021FF 7512                    	Jnz	short rmerr		;	return (-1);
 14616 00002201 16                      	push	ss
 14617 00002202 07                      	pop	es
 14618 00002203 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14619                                  rmloop: 
 14620 00002205 E8F849                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14621 00002208 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14622 0000220A E81CF0                  	call	StrCmp			; Are the 2 paths the same?
 14623 0000220D 7404                    	jz	short rmerr		; Yes, report error.
 14624 0000220F FEC0                    	inc	al			; No, inc al to next drive number
 14625 00002211 EBF2                    	jmp	short rmloop		; Go check next drive.
 14626                                  rmerr:
 14627 00002213 1F                      	pop	ds
 14628 00002214 5A                      	pop	dx			; Restore the name
 14629                                  	;mov	al,10h
 14630 00002215 B010                    	mov	al,error_current_directory ; error
 14631                                  	; 16/12/2022
 14632                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14633                                  ;chdir_errj:
 14634 00002217 EBDE                    	jmp	short rmdir_errj
 14635                                  rmcont:
 14636 00002219 1F                      	pop	ds
 14637 0000221A 5A                      	pop	dx			; Restore the name
 14638 0000221B BE[9F32]                	MOV	SI,DOS_RMDIR
 14639 0000221E EB7C                    	JMP	DoDirCall
 14640                                  
 14641                                  ; 17/05/2019 - Retro DOS v4.0
 14642                                  
 14643                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 14644                                  
 14645                                  ;BREAK <$ChDir -- Change current directory on a drive>
 14646                                  ;----------------------------------------------------------------------------
 14647                                  ;
 14648                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 14649                                  ; for setting up the CDS for the specified drive appropriately.  There are
 14650                                  ; several cases to consider:
 14651                                  ;
 14652                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 14653                                  ;	it into a WFP.	We verify the existance of this directory and then
 14654                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 14655                                  ;	directory cluster.
 14656                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 14657                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 14658                                  ;	WFP back into the CDS.
 14659                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 14660                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 14661                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 14662                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 14663                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 14664                                  ;	to process the path but to return the logical CDS and the logical
 14665                                  ;	path.  We then copy the logical path into the logical CDS.
 14666                                  ;
 14667                                  ; Inputs:
 14668                                  ;	DS:DX Points to asciz name
 14669                                  ; Returns:
 14670                                  ;	STD XENIX Return
 14671                                  ;	AX = chdir_path_not_found if error
 14672                                  ;
 14673                                  ;----------------------------------------------------------------------------
 14674                                  
 14675                                  _$CHDIR:
 14676 00002220 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14677 00002223 89D6                    	MOV	SI,DX			; get source
 14678 00002225 E85E4A                  	call	TransPath		; go munge the path and get real CDS
 14679 00002228 7304                    	JNC	short ChDirCrack	; no errors, try path
 14680                                  ChDirErrP:
 14681                                  	;mov	al,3
 14682 0000222A B003                    	MOV	AL,error_path_not_found
 14683                                  ChDirErr:
 14684                                  	;jmp	SYS_RET_ERR 	; oops!
 14685                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14686 0000222C EBC9                    	jmp	short chdir_errj
 14687                                  
 14688                                  ChDirCrack:
 14689 0000222E 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 14690 00002233 75F5                    	JNZ	short ChDirErrP
 14691                                  
 14692                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 14693                                  ; found.
 14694                                  
 14695 00002235 C43E[A205]              	LES	DI,[THISCDS]
 14696 00002239 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 14697 0000223C 74EC                    	JZ	short ChDirErrP		;	error ();
 14698                                  
 14699                                  ; Find out if the directory exists.
 14700                                  
 14701 0000223E E81B10                  	call	DOS_CHDIR
 14702                                  	;Jc	short ChDirErr
 14703                                  	; 16/12/2022
 14704 00002241 72B4                    	jc	short chdir_errj
 14705                                  ;
 14706                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 14707                                  ; not network). If one was seen, all we need to do is copy in the text
 14708                                  ;
 14709 00002243 C43E[A205]              	LES	DI,[THISCDS]
 14710                                  	;test	word [es:di+43h],2000h
 14711                                  	; 17/12/2022
 14712 00002247 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14713                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 14714 0000224C 7425                    	JZ	short GotCDS
 14715                                  
 14716                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 14717                                  
 14718 0000224E 06                      	push	es	
 14719 0000224F 57                      	push	di
 14720 00002250 51                      	push	cx			; save CDS and cluster...
 14721 00002251 E876E2                  	call	Get_User_Stack		; get original text
 14722                                  	
 14723                                  	;mov	di,[si+6]
 14724 00002254 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 14725                                  	;mov	ds,[si+0Eh]
 14726 00002257 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 14727                                  	
 14728 0000225A BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 14729 0000225D 87F7                    	XCHG	SI,DI
 14730 0000225F 30C0                    	XOR	AL,AL			; do no splicing
 14731 00002261 57                      	push	di
 14732 00002262 E82D4A                  	call	TransPathNoSet		; Munge path
 14733 00002265 5E                      	pop	si
 14734                                  
 14735                                  ; There should NEVER be an error here.
 14736                                  
 14737                                  ;IF FALSE
 14738                                  ;	JNC SKipErr
 14739                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 14740                                  ;SkipErr:
 14741                                  ;ENDIF
 14742 00002266 C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 14743                                  	;mov	word [es:di+49h],-1
 14744 0000226A 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 14745                                  					; no valid cluster here...
 14746 00002270 59                      	pop	cx
 14747 00002271 5F                      	pop	di
 14748 00002272 07                      	pop	es
 14749                                  
 14750                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 14751                                  
 14752                                  GotCDS:
 14753                                  
 14754                                  ; wfp_start points to the text. See if it is long enough
 14755                                  
 14756                                  	; MSDOS 3.3
 14757                                  	;push	ss
 14758                                  	;pop	ds
 14759                                  	;mov	si,[WFP_START]
 14760                                  	;push	cx
 14761                                  	;call	DStrLen
 14762                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 14763                                  	;pop	cx
 14764                                  	;ja	short ChDirErrP
 14765                                  
 14766                                  	; MSDOS 6.0
 14767 00002273 E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 14768 00002276 77B2                    	JA	short ChDirErrP
 14769                                  	; MSDOS 3.3 & MSDOS 6.0
 14770                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 14771                                  	; 17/12/2022
 14772 00002278 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 14773 0000227D 7512                    	JNZ	short SkipRecency
 14774                                  	; MSDOS 6.0
 14775                                  	;test	word [es:di+43h],2000h
 14776                                  	; 17/12/2022
 14777 0000227F 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14778                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 14779                                  					;PTM. for Join and Subst ;AN000;
 14780 00002284 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 14781 00002286 B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 14782                                  setdirclus:
 14783                                  	;mov	[es:di+49h],cx
 14784 00002289 26894D49                	MOV	[ES:DI+curdir.ID],CX
 14785 0000228D C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 14786                                  SkipRecency:
 14787 00002291 E8C6EF                  	call	FStrCpy
 14788 00002294 30C0                    	XOR	AL,AL
 14789                                  mkdir_ok:
 14790 00002296 E9EBE3                  	jmp	SYS_RET_OK
 14791                                  
 14792                                  ; 17/05/2019 - Retro DOS v4.0
 14793                                  
 14794                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 14795                                  
 14796                                  ;BREAK <$MkDir - Make a directory entry>
 14797                                  ;---------------------------------------------------------------------------
 14798                                  ;
 14799                                  ; Procedure Name : $MkDir
 14800                                  ; Inputs:
 14801                                  ;	DS:DX Points to asciz name
 14802                                  ; Function:
 14803                                  ;	Make a new directory
 14804                                  ; Returns:
 14805                                  ;	STD XENIX Return
 14806                                  ;	AX = mkdir_path_not_found if path bad
 14807                                  ;	AX = mkdir_access_denied  If
 14808                                  ;		Directory cannot be created
 14809                                  ;		Node already exists
 14810                                  ;		Device name given
 14811                                  ;		Disk or directory(root) full
 14812                                  ;---------------------------------------------------------------------------
 14813                                  
 14814                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14815                                  
 14816                                  _$MKDIR:
 14817 00002299 BE[5E31]                	MOV	SI,DOS_MKDIR
 14818                                  DoDirCall:
 14819 0000229C BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14820                                  
 14821 0000229F 56                      	push	si
 14822 000022A0 89D6                    	MOV	SI,DX			; get source
 14823 000022A2 E8E149                  	call	TransPath		; go munge the path
 14824 000022A5 5E                      	pop	si
 14825 000022A6 7305                    	JNC	short MkDirCrack	; no errors, try path
 14826                                  MkErrP:
 14827 000022A8 B003                    	MOV	AL,error_path_not_found	; oops!
 14828                                  MkErr:
 14829 000022AA E9E0E3                  	jmp	SYS_RET_ERR
 14830                                  MkDirCrack:
 14831 000022AD 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 14832 000022B3 75F3                    	JNZ	short MkErrP
 14833                                  
 14834                                  	; MSDOS 3.3
 14835                                  	;push	ss
 14836                                  	;pop	ds
 14837                                  	;call	si
 14838                                  	;jb	short MkErr
 14839                                  	;;jmp	short mkdir_ok
 14840                                  	;jmp	SYS_RET_OK
 14841                                  
 14842                                  	; MSDOS 6.0
 14843 000022B5 56                      	PUSH	SI			;PTM.			;AN000;
 14844 000022B6 E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 14845 000022B9 5E                      	POP	SI			;PTM.			;AN000;
 14846 000022BA 7604                    	JBE	short pathok		;PTM.			;AN000;
 14847                                  	;mov	al,5
 14848 000022BC B005                    	MOV	AL,error_access_denied	;PTM. ops!
 14849                                  	;jmp	SYS_RET_ERR		;PTM.
 14850 000022BE EBEA                    	jmp	short MkErr
 14851                                  pathok:
 14852 000022C0 FFD6                    	CALL	SI			; go get file
 14853 000022C2 72E6                    	JC	short MkErr		; no errors
 14854                                  	; 16/12/2022
 14855                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14856 000022C4 EBD0                    	jmp	short mkdir_ok
 14857                                  	;jmp	SYS_RET_OK
 14858                                  
 14859                                  ;----------------------------------------------------------------------------
 14860                                  ;
 14861                                  ; Procedure Name : Check_PathLen
 14862                                  ;
 14863                                  ; Inputs:
 14864                                  ;	nothing
 14865                                  ; Function:
 14866                                  ;	check if final path length greater than 67
 14867                                  ; Returns:
 14868                                  ;	Above flag set if > 67
 14869                                  ;
 14870                                  ;---------------------------------------------------------------------------
 14871                                  
 14872                                  Check_PathLen:
 14873                                  	; 09/09/2018
 14874                                  	;mov	SI,[WFP_START]
 14875 000022C6 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 14876                                  Check_PathLen2:
 14877 000022CB 16                      	push	ss
 14878 000022CC 1F                      	pop	ds
 14879                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 14880 000022CD 51                      	push	CX	
 14881 000022CE E8A0EF                  	CALL	DStrLen
 14882 000022D1 83F943                  	CMP	CX,DIRSTRLEN ; 67
 14883 000022D4 59                      	POP	CX
 14884 000022D5 C3                      	retn
 14885                                  
 14886                                  ;============================================================================
 14887                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 14888                                  ;============================================================================
 14889                                  ; 07/08/2018 - Retro DOS v3.0
 14890                                  ; 17/05/2019 - Retro DOS v4.0
 14891                                  
 14892                                  ;**	IOCTL system call.
 14893                                  ;----------------------------------------------------------------------------
 14894                                  ;	$IOCTL
 14895                                  ;
 14896                                  ;	  Revision history:
 14897                                  ;
 14898                                  ;		Created: ARR 4 April 1983
 14899                                  ;
 14900                                  ;		GenericIOCTL added:		KGS	22 April 1985
 14901                                  ;
 14902                                  ;		A000	version 4.00	Jan. 1988
 14903                                  ;
 14904                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 14905                                  ;
 14906                                  
 14907                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 14908                                  ;---------------------------------------------------------------------------
 14909                                  ;
 14910                                  ;   Assembler usage:
 14911                                  ;	    MOV     BX, Handle
 14912                                  ;	    MOV     DX, Data
 14913                                  ;
 14914                                  ;	(or LDS     DX,BUF
 14915                                  ;	    MOV     CX,COUNT)
 14916                                  ;
 14917                                  ;	    MOV     AH, Ioctl
 14918                                  ;	    MOV     AL, Request
 14919                                  ;	    INT     21h
 14920                                  ;
 14921                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 14922                                  ;	    attribute word in DX, handle in BX:
 14923                                  ;	    DH = high word of device driver attributes
 14924                                  ;	    DL = low byte of sf_flags
 14925                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 14926                                  ;	    in BX.
 14927                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 14928                                  ;	    into DS:DX.  Return number read in AX.
 14929                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 14930                                  ;	    DS:DX.  Return bytes written in AX.
 14931                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 14932                                  ;	    into DS:DX.  Return number read in AX.
 14933                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 14934                                  ;	    DS:DX.  Return bytes written in AX.
 14935                                  ;	 6  Return input status of handle in BX. If a read will go to the
 14936                                  ;	    device, AL = 0FFh, otherwise 0.
 14937                                  ;	 7  Return output status of handle in BX. If a write will go to the
 14938                                  ;	    device, AL = 0FFh, otherwise 0.
 14939                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 14940                                  ;	    removable media, 0 otherwise.
 14941                                  ;	 9  Return the contents of the device attribute word in DX for the
 14942                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 14943                                  ;	    network. 8000h is the bit for local use.
 14944                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 14945                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 14946                                  ;	    the count and CX is the delay.
 14947                                  ;
 14948                                  ;   Error returns:
 14949                                  ;	    AX = error_invalid_handle
 14950                                  ;	       = error_invalid_function
 14951                                  ;	       = error_invalid_data
 14952                                  ;
 14953                                  ;-------------------------------------------------------------------------------
 14954                                  ;
 14955                                  ;   This is the documentation copied from DOS 4.0 it is much better
 14956                                  ;   than the above
 14957                                  ;
 14958                                  ;	There are several basic forms of IOCTL calls:
 14959                                  ;
 14960                                  ;
 14961                                  ;	** Get/Set device information:	**
 14962                                  ;
 14963                                  ;	ENTRY	(AL) = function code
 14964                                  ;		  0 - Get device information
 14965                                  ;		  1 - Set device information
 14966                                  ;		(BX) = file handle
 14967                                  ;		(DX) = info for "Set Device Information"
 14968                                  ;	EXIT	'C' set if error
 14969                                  ;		  (AX) = error code
 14970                                  ;		'C' clear if OK
 14971                                  ;		  (DX) = info for "Get Device Information"
 14972                                  ;	USES	ALL
 14973                                  ;
 14974                                  ;
 14975                                  ;	**  Read/Write Control Data From/To Handle  **
 14976                                  ;
 14977                                  ;	ENTRY	(AL) = function code
 14978                                  ;		  2 - Read device control info
 14979                                  ;		  3 - Write device control info
 14980                                  ;		(BX) = file handle
 14981                                  ;		(CX) = transfer count
 14982                                  ;		(DS:DX) = address for data
 14983                                  ;	EXIT	'C' set if error
 14984                                  ;		  (AX) = error code
 14985                                  ;		'C' clear if OK
 14986                                  ;		  (AX) = count of bytes transfered
 14987                                  ;	USES	ALL
 14988                                  ;
 14989                                  ;
 14990                                  ;	**  Read/Write Control Data From/To Block Device  **
 14991                                  ;
 14992                                  ;	ENTRY	(AL) = function code
 14993                                  ;		  4 - Read device control info
 14994                                  ;		  5 - Write device control info
 14995                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14996                                  ;		(CX) = transfer count
 14997                                  ;		(DS:DX) = address for data
 14998                                  ;	EXIT	'C' set if error
 14999                                  ;		  (AX) = error code
 15000                                  ;		'C' clear if OK
 15001                                  ;		  (AX) = count of bytes transfered
 15002                                  ;	USES	ALL
 15003                                  ;
 15004                                  ;
 15005                                  ;	**  Get Input/Output Status  **
 15006                                  ;
 15007                                  ;	ENTRY	(AL) = function code
 15008                                  ;		  6 - Get Input status
 15009                                  ;		  7 - Get Output Status
 15010                                  ;		(BX) = file handle
 15011                                  ;	EXIT	'C' set if error
 15012                                  ;		  (AX) = error code
 15013                                  ;		'C' clear if OK
 15014                                  ;		  (AL) = 00 if not ready
 15015                                  ;		  (AL) = FF if ready
 15016                                  ;	USES	ALL
 15017                                  ;
 15018                                  ;
 15019                                  ;	**  Get Drive Information  **
 15020                                  ;
 15021                                  ;	ENTRY	(AL) = function code
 15022                                  ;		  8 - Check for removable media
 15023                                  ;		  9 - Get device attributes
 15024                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15025                                  ;	EXIT	'C' set if error
 15026                                  ;		  (AX) = error code
 15027                                  ;		'C' clear if OK
 15028                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15029                                  ;		  (DX) = device attribute word (func. 9)
 15030                                  ;	USES	ALL
 15031                                  ;
 15032                                  ;
 15033                                  ;	**  Get Redirected bit	**
 15034                                  ;
 15035                                  ;	ENTRY	(AL) = function code
 15036                                  ;		  0Ah - Network stuff
 15037                                  ;		(BX) = file handle
 15038                                  ;	EXIT	'C' set if error
 15039                                  ;		  (AX) = error code
 15040                                  ;		'C' clear if OK
 15041                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15042                                  ;	USES	ALL
 15043                                  ;
 15044                                  ;
 15045                                  ;	**  Change sharer retry parameters  **
 15046                                  ;
 15047                                  ;	ENTRY	(AL) = function code
 15048                                  ;		  0Bh - Set retry parameters
 15049                                  ;		(CX) = retry loop count
 15050                                  ;		(DX) = number of retries
 15051                                  ;	EXIT	'C' set if error
 15052                                  ;		  (AX) = error code
 15053                                  ;		'C' clear if OK
 15054                                  ;	USES	ALL
 15055                                  ;
 15056                                  ;
 15057                                  ;   =================================================================
 15058                                  ;
 15059                                  ;	**  New Standard Control  **
 15060                                  ;
 15061                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15062                                  ;	FORMS ARE OBSOLETE.
 15063                                  ;
 15064                                  ;   =================================================================
 15065                                  ;
 15066                                  ;	ENTRY	(AL) = function code
 15067                                  ;		  0Ch - Control Function subcode
 15068                                  ;		(BX) = File Handle
 15069                                  ;		(CH) = Category Indicator
 15070                                  ;		(CL) = Function within category
 15071                                  ;		(DS:DX) = address for data, if any
 15072                                  ;		(SI) = Passed to device as argument, use depends upon function
 15073                                  ;		(DI) = Passed to device as argument, use depends upon function
 15074                                  ;	EXIT	'C' set if error
 15075                                  ;		  (AX) = error code
 15076                                  ;		'C' clear if OK
 15077                                  ;		  (SI) = Return value, meaning is function dependent
 15078                                  ;		  (DI) = Return value, meaning is function dependent
 15079                                  ;		  (DS:DX) = Return address, use is function dependent
 15080                                  ;	USES	ALL
 15081                                  ;
 15082                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15083                                  ;     (See inc\ioctl.inc for more info)
 15084                                  ;
 15085                                  ;	ENTRY	(AL) = function code
 15086                                  ;		  0Dh - Control Function subcode
 15087                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15088                                  ;		(CH) = Category Indicator
 15089                                  ;		(CL) = Function within category
 15090                                  ;		(DS:DX) = address for data, if any
 15091                                  ;		(SI) = Passed to device as argument, use depends upon function
 15092                                  ;		(DI) = Passed to device as argument, use depends upon function
 15093                                  ;
 15094                                  ;	EXIT	'C' set if error
 15095                                  ;		  (AX) = error code
 15096                                  ;		'C' clear if OK
 15097                                  ;		  (DS:DX) = Return address, use is function dependent
 15098                                  ;	USES	ALL
 15099                                  ;
 15100                                  ;---------------------------------------------------------------------------
 15101                                  	
 15102                                  	; 17/05/2019 - Retro DOS v4.0
 15103                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15104                                  
 15105                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15106                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15107                                  
 15108                                  IOCTLJMPTABLE:	;label	word
 15109                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15110 000022D6 [1223]                  	dw	ioctl_getset_data	; 0
 15111 000022D8 [1223]                  	dw	ioctl_getset_data   	; 1
 15112 000022DA [6223]                  	dw	ioctl_control_string	; 2
 15113 000022DC [6223]                  	dw	ioctl_control_string	; 3
 15114 000022DE [B624]                  	dw	ioctl_get_dev		; 4
 15115 000022E0 [B624]                  	dw	ioctl_get_dev		; 5
 15116 000022E2 [7C23]                  	dw	ioctl_status		; 6
 15117 000022E4 [7C23]                  	dw	ioctl_status		; 7
 15118 000022E6 [1D24]                  	dw	ioctl_rem_media		; 8
 15119 000022E8 [5B24]                  	dw	ioctl_drive_attr	; 9
 15120 000022EA [A824]                  	dw	ioctl_handle_redir	; A
 15121 000022EC [9823]                  	dw	Set_Retry_Parameters	; B
 15122 000022EE [A623]                  	dw	GENERICIOCTLHANDLE	; C
 15123 000022F0 [BD23]                  	dw	GENERICIOCTL		; D
 15124                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15125 000022F2 [6725]                  	dw	ioctl_drive_owner	; E
 15126 000022F4 [6725]                  	dw	ioctl_drive_owner	; F
 15127                                  	; MSDOS 6.0
 15128 000022F6 [A623]                  	dw	query_handle_support	; 10h
 15129 000022F8 [BD23]                  	dw	query_device_support	; 11h
 15130                                  
 15131                                  	; 11/11/2022
 15132                                  _$IOCTL:
 15133 000022FA 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15134 000022FC 16                      	push	ss
 15135 000022FD 1F                      	pop	ds			;hkn; SS is DOSDATA
 15136                                  
 15137                                  	; MSDOS 3.3
 15138                                  	;cmp	al,0Fh 
 15139                                  	; MSDOS 6.0
 15140 000022FE 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15141 00002300 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15142                                  
 15143                                  	; 14/01/2024
 15144                                  	; 28/05/2019
 15145                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15146 00002302 89C7                    	mov	di,ax			; di NOT a PARM
 15147 00002304 81E7FF00                	and	di,0FFh			; di = al
 15148 00002308 D1E7                    	shl	di,1			; di = index into jmp table
 15149                                  	;pop	AX			; Restore AL for generic IOCTL
 15150                                  
 15151 0000230A 2EFFA5[D622]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15152                                  
 15153                                  ioctl_bad_funj2:
 15154 0000230F E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15155                                  
 15156                                  ;--------------------------------------------------------------------------
 15157                                  ;
 15158                                  ; IOCTL: AL = 0,1
 15159                                  ;
 15160                                  ; ENTRY: DS = DOSDATA
 15161                                  ;
 15162                                  ;--------------------------------------------------------------------------
 15163                                  
 15164                                  ioctl_getset_data:
 15165                                  	; MSDOS 6.0
 15166 00002312 E87244                  	call	SFFromHandle		; ES:DI -> SFT
 15167 00002315 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15168                                  ioctl_bad_handle:
 15169                                  	;mov	al,6
 15170 00002317 B006                    	mov	al,error_invalid_handle
 15171                                  ioctl_error:
 15172 00002319 E971E3                  	jmp	SYS_RET_ERR
 15173                                  
 15174                                  ioctl_check_permissions:
 15175 0000231C 3C00                    	CMP	AL,0
 15176                                  	;mov	al,[es:di+5]
 15177 0000231E 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15178 00002322 741B                    	JZ	short ioctl_read	; read the byte
 15179                                  
 15180 00002324 08F6                    	or	dh,dh
 15181 00002326 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15182                                  	;mov	al,0Dh
 15183 00002328 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15184                                  	;jmp	SYS_RET_ERR
 15185 0000232A EBED                    	jmp	short ioctl_error
 15186                                  
 15187                                  ioctl_check_device:
 15188 0000232C A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15189 0000232E 74DF                    	jz	short ioctl_bad_funj2
 15190 00002330 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15191                                  					;   device bit!! He can muck with the
 15192                                  					;   others at will.
 15193 00002333 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15194 00002338 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15195                                  ioctl_ok:
 15196 0000233C E945E3                  	jmp	SYS_RET_OK
 15197                                  
 15198                                  ioctl_read:
 15199 0000233F C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15200 00002344 30E4                    	XOR	AH,AH
 15201 00002346 A880                    	test	AL,devid_device 	; Should I set high byte
 15202 00002348 740D                    	JZ	short ioctl_no_high	; no
 15203 0000234A C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15204                                  	;les	di,[es:di+7]
 15205 0000234F 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15206                                  	;mov	ah,[es:di+5]
 15207 00002353 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15208                                  ioctl_no_high:
 15209 00002357 89C2                    	MOV	DX,AX
 15210                                  ioctl_set_dx:	; 16/12/2022
 15211 00002359 E86EE1                  	call	Get_User_Stack
 15212                                  	;mov	[si+6],dx
 15213 0000235C 895406                  	MOV	[SI+user_env.user_DX],DX
 15214                                  	;;jmp	SYS_RET_OK
 15215                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15216                                  ioctl_ok_j:
 15217                                  	; 16/12/2022
 15218 0000235F E925E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15219                                  	;jmp	short ioctl_ok
 15220                                  	; 26/07/2019
 15221                                  	;jmp	SYS_RET_OK_clc
 15222                                  
 15223                                  ;--------------------------------------------------------------------------
 15224                                  ;
 15225                                  ; IOCTL: AL = 2,3
 15226                                  ;
 15227                                  ; ENTRY: DS = DOSDATA
 15228                                  ;	 SI = user's DS
 15229                                  ;
 15230                                  ;--------------------------------------------------------------------------
 15231                                  
 15232                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15233                                  ioctl_control_string:
 15234 00002362 E82244                  	call	SFFromHandle		; ES:DI -> SFT
 15235 00002365 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15236                                  	; 07/12/2022
 15237                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15238                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15239                                  	; MSDOS 5.0 & MSDOS 6.0
 15240 00002367 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15241 0000236C 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15242 0000236E C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15243 00002373 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15244 00002377 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15245 00002379 E94201                  	JMP	ioctl_do_string
 15246                                  
 15247                                  ;--------------------------------------------------------------------------
 15248                                  ;
 15249                                  ; IOCTL: AL = 6,7
 15250                                  ;
 15251                                  ; ENTRY: DS = DOSDATA
 15252                                  ;
 15253                                  ;--------------------------------------------------------------------------
 15254                                  
 15255                                  ioctl_status:
 15256 0000237C B401                    	MOV	AH,1
 15257 0000237E 2C06                    	SUB	AL,6			; 6=0,7=1
 15258 00002380 7402                    	JZ	short ioctl_get_status
 15259 00002382 B403                    	MOV	AH,3
 15260                                  ioctl_get_status:
 15261 00002384 50                      	PUSH	AX
 15262 00002385 E87113                  	call	GET_IO_SFT
 15263 00002388 58                      	POP	AX
 15264                                  	;JNC	short DO_IOFUNC
 15265                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15266                                  	; 16/12/2022
 15267 00002389 728C                    	jc	short ioctl_bad_handle
 15268                                  DO_IOFUNC:
 15269 0000238B E8E021                  	call	IOFUNC
 15270 0000238E 88C4                    	MOV	AH,AL
 15271 00002390 B0FF                    	MOV	AL,0FFH
 15272 00002392 7502                    	JNZ	short ioctl_status_ret
 15273 00002394 FEC0                    	INC	AL
 15274                                  ioctl_status_ret:
 15275                                  	;jmp	SYS_RET_OK
 15276                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15277                                  	;jmp	short ioctl_ok_j
 15278                                  	; 16/12/2022
 15279 00002396 EBA4                    	jmp	short ioctl_ok
 15280                                  
 15281                                  ;--------------------------------------------------------------------------
 15282                                  ;
 15283                                  ; IOCTL: AL = B
 15284                                  ;
 15285                                  ; ENTRY: DS = DOSDATA
 15286                                  ;
 15287                                  ;--------------------------------------------------------------------------
 15288                                  
 15289                                  Set_Retry_Parameters:
 15290                                  	; 09/09/2018
 15291 00002398 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15292 0000239C 09D2                    	OR	DX,DX			; zero retries not allowed
 15293 0000239E 7475                    	JZ	short ioctl_bad_fun
 15294 000023A0 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15295                                  doneok:
 15296                                  	;jmp	SYS_RET_OK		; Done
 15297                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15298                                  	;jmp	short ioctl_status_ret
 15299                                  	; 16/12/2022
 15300 000023A4 EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15301                                  
 15302                                  ;--------------------------------------------------------------------------
 15303                                  ;
 15304                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15305                                  ;
 15306                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15307                                  ;	SI:DX -> Users Device Parameter Table
 15308                                  ;	IOCALL -> IOCTL_Req structure
 15309                                  ;
 15310                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15311                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15312                                  ;	call.
 15313                                  ;
 15314                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15315                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15316                                  ;         return address off the stack if the drive is invalid.
 15317                                  ;
 15318                                  ;--------------------------------------------------------------------------
 15319                                  
 15320                                  query_handle_support:	; Entry point for handles
 15321                                  GENERICIOCTLHANDLE:
 15322 000023A6 E8DE43                  	call	SFFromHandle		; Get SFT for device.
 15323 000023A9 726F                    	jc	short ioctl_bad_handlej
 15324                                  
 15325                                  	;test	word [es:di+5],8000h
 15326                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15327                                  	;test	byte [es:di+6],80h
 15328 000023AB 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15329 000023B0 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15330                                  
 15331 000023B2 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15332                                  	;les	di,[es:di+7]
 15333 000023B7 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15334 000023BB EB0F                    	jmp	short Do_GenIOCTL
 15335                                  
 15336                                  query_device_support:	; Entry point for devices:
 15337                                  GENERICIOCTL:
 15338 000023BD C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15339 000023C2 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15340 000023C5 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15341                                  
 15342 000023C7 E88101                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15343 000023CA 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15344                                  
 15345                                  Do_GenIOCTL:
 15346                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15347                                  					; Can device handle Generic IOCTL funcs
 15348                                  	; 09/09/2018
 15349                                  	;test	byte [es:di+4],40h
 15350 000023CC 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15351 000023D1 7442                    	jz	short ioctl_bad_fun
 15352                                  
 15353                                  	; 17/05/2019 - Retro DOS v4.0
 15354                                  
 15355                                  	; MSDOS 6.0
 15356                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15357 000023D3 C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15358                                  	;cmp	al,10h
 15359 000023D8 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15360 000023DA 7C0C                    	jl	short SetIOCtlBlock
 15361                                  	
 15362                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15363                                  	;test	byte [es:di+4],80h 
 15364 000023DC 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15365 000023E1 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15366                                  	;
 15367                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15368 000023E3 C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15369                                  
 15370                                  SetIOCtlBlock:
 15371 000023E8 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15372 000023E9 57                      	PUSH	DI			; in DS:SI
 15373                                  					; Setup Generic IOCTL Request Block
 15374                                  	;mov	byte [IOCALL_REQLEN],23
 15375 000023EA C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15376                                  	; 07/09/2018 (MSDOS 3.3)
 15377                                  	;;mov	byte [IOCALL_REQFUNC],19
 15378                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15379                                  	;
 15380 000023EF 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15381 000023F3 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15382 000023F7 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15383 000023FB 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15384 000023FF 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15385 00002403 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15386 00002407 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15387                                  
 15388                                  ;hkn; IOCALL is in DOSDATA
 15389 0000240B BB[7C03]                	MOV	BX,IOCALL
 15390                                  
 15391 0000240E 16                      	PUSH	SS
 15392 0000240F 07                      	POP	ES
 15393                                  					; DS:SI -> Device header.
 15394 00002410 5E                      	POP	SI
 15395 00002411 1F                      	POP	DS
 15396                                  	; 10/08/2018
 15397 00002412 E9E200                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15398                                  
 15399                                  ioctl_bad_fun:
 15400 00002415 B001                    	mov	al, error_invalid_function  ; 1
 15401 00002417 E973E2                  	jmp	SYS_RET_ERR	
 15402                                  
 15403                                  ioctl_bad_handlej:
 15404 0000241A E9FAFE                  	jmp	ioctl_bad_handle
 15405                                  
 15406                                  ;---------------------------------------------------------------------------
 15407                                  ;
 15408                                  ; IOCTL: AL = 8
 15409                                  ;
 15410                                  ; ENTRY: DS = DOSDATA
 15411                                  ;
 15412                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15413                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15414                                  ;         return address off the stack if the drive is invalid.
 15415                                  ;
 15416                                  ;-------------------------------------------------------------------------
 15417                                  
 15418                                  ioctl_rem_media:
 15419                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15420 0000241D E82B01                  	CALL	Check_If_Net
 15421 00002420 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15422                                  					;   certainly don't know how to do this
 15423                                  					;   call.
 15424                                  	;test	word [es:di+4],800h
 15425                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15426                                  	;test	byte [es:di+5],8
 15427 00002422 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15428 00002427 74EC                    	JZ	short ioctl_bad_fun		; NO
 15429                                  
 15430                                  ;hkn; SS override for IOCALL
 15431 00002429 36C606[7E03]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15432 0000242F B00D                    	MOV	AL,REMHL  ; 13
 15433 00002431 88DC                    	MOV	AH,BL			; Unit number
 15434 00002433 36A3[7C03]              	MOV	[SS:IOCALL_REQLEN],AX
 15435 00002437 31C0                    	XOR	AX,AX
 15436 00002439 36A3[7F03]              	MOV	[SS:IOCALL_REQSTAT],AX
 15437 0000243D 06                      	PUSH	ES
 15438 0000243E 1F                      	POP	DS
 15439 0000243F 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15440 00002441 16                      	PUSH	SS
 15441 00002442 07                      	POP	ES
 15442                                  
 15443                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15444 00002443 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15445 00002446 1E                      	push	ds
 15446 00002447 56                      	push	si
 15447 00002448 E8FA22                  	call	DEVIOCALL2
 15448 0000244B 5E                      	pop	si
 15449 0000244C 1F                      	pop	ds
 15450                                  
 15451                                  ;hkn; SS override
 15452 0000244D 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15453 00002451 250002                  	AND	AX,STBUI ; 200h		; Mask to busy bit
 15454 00002454 B109                    	MOV	CL,9
 15455 00002456 D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15456                                  ioctl_da_ok_j:	; 11/11/2022
 15457 00002458 E929E2                  	jmp	SYS_RET_OK
 15458                                  
 15459                                  ;-------------------------------------------------------------------------
 15460                                  ;
 15461                                  ; IOCTL: AL = 9
 15462                                  ;
 15463                                  ; ENTRY: DS = DOSDATA
 15464                                  ;
 15465                                  ;-------------------------------------------------------------------------
 15466                                  
 15467                                  ioctl_drive_attr:
 15468                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15469 0000245B 88D8                    	mov	al,bl
 15470 0000245D E84B47                  	call	GETTHISDRV
 15471 00002460 7241                    	jc	short ioctl_drv_err
 15472 00002462 E8B800                  	call	Get_Driver_BL
 15473                                  	; MSDOS 6.0
 15474 00002465 723C                    	JC	short ioctl_drv_err	; drive not valid
 15475                                  
 15476                                  	;mov	dx,[es:di+4]
 15477 00002467 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15478                                  					; get device attribute word
 15479 0000246B 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15480                                  
 15481                                  ;hkn; SS override
 15482 0000246D 36C43E[A205]            	LES	DI,[SS:THISCDS]
 15483                                  	;test	word [es:di+43h],8000h
 15484                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15485                                  	;test	byte [es:di+44h],80h
 15486 00002472 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15487 00002477 7403                    	JZ	short IOCTLShare
 15488                                  
 15489                                  	;or	dx,1000h ; (MSDOS 3.3)
 15490                                  
 15491                                  ;	Net devices don't return a device attribute word.
 15492                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15493                                  
 15494 00002479 BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15495                                  IOCTLShare:
 15496 0000247C 16                      	push	ss
 15497 0000247D 1F                      	pop	ds
 15498 0000247E BE[BE03]                	MOV	SI,OPENBUF
 15499 00002481 80C341                  	ADD	BL,"A"	; 41h
 15500 00002484 881C                    	MOV	[SI],BL
 15501 00002486 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15502 0000248B B80003                  	MOV	AX,0300h
 15503 0000248E F8                      	CLC
 15504                                  	;INT	int_IBM
 15505 0000248F CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15506                                  			; DS:SI -> ASCIZ disk device name 
 15507                                  			; (may be full path or only drive
 15508                                  			; specifier--must include the colon)
 15509                                  			; Return: CF clear if absolute disk access allowed
 15510 00002491 7303                    	JNC	short IOCTLLocal	; Not shared
 15511                                  	;OR	DX,0200H		; Shared, bit 9
 15512                                  	; 17/12/2022
 15513 00002493 80CE02                  	or	dh,02h
 15514                                  IOCTLLocal:
 15515                                  	;test	word [es:di+43h],1000h
 15516                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15517                                  	;test	byte [es:di+44h],10h
 15518 00002496 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15519                                  	;JZ	short ioctl_set_DX
 15520                                  	; 16/12/2022
 15521 0000249B 7403                    	jz	short _ioctl_set_DX
 15522                                  	;OR	DX,8000h
 15523                                  	; 17/12/2022
 15524 0000249D 80CE80                  	or	dh,80h
 15525                                  ;ioctl_set_DX:
 15526                                  _ioctl_set_DX:
 15527                                  	; 16/12/2022
 15528 000024A0 E9B6FE                  	jmp	ioctl_set_dx
 15529                                  ; 16/12/2022
 15530                                  %if 0	
 15531                                  	call	Get_User_Stack
 15532                                  	MOV	[SI+user_env.user_DX],DX
 15533                                  	;;jmp	SYS_RET_OK
 15534                                  	;; 25/06/2019
 15535                                  	;jmp	SYS_RET_OK_clc
 15536                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15537                                  ioctl_gd_ok_j:
 15538                                  	jmp	short ioctl_da_ok_j
 15539                                  %endif
 15540                                  
 15541                                  ioctl_drv_err:
 15542 000024A3 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15543                                  ioctl_gd_err_j:	; 11/11/2022
 15544 000024A5 E9E5E1                  	jmp	SYS_RET_ERR
 15545                                  
 15546                                  ;--------------------------------------------------------------------------
 15547                                  ;
 15548                                  ; IOCTL: AL = A
 15549                                  ;
 15550                                  ; ENTRY: DS = DOSDATA
 15551                                  ;
 15552                                  ;--------------------------------------------------------------------------
 15553                                  
 15554                                  ioctl_handle_redir:
 15555 000024A8 E8DC42                  	call	SFFromHandle		; ES:DI -> SFT
 15556 000024AB 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15557 000024AD E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15558                                  
 15559                                  ioctl_got_sft:
 15560                                  	;mov	dx,[es:di+5]
 15561 000024B0 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15562                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15563                                  	; 16/12/2022
 15564 000024B4 EBEA                    	jmp	short _ioctl_set_DX
 15565                                  
 15566                                  	; 16/12/2022
 15567                                  ;ioctl_bad_funj:
 15568                                  	;JMP	ioctl_bad_fun
 15569                                  
 15570                                  ;--------------------------------------------------------------------------
 15571                                  ;
 15572                                  ; IOCTL: AL= 4,5
 15573                                  ;
 15574                                  ; ENTRY: DS = DOSDATA
 15575                                  ;	 SI = user's DS
 15576                                  ;
 15577                                  ;
 15578                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15579                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15580                                  ;         return address off the stack if the drive is invalid.
 15581                                  ;
 15582                                  ;-------------------------------------------------------------------------
 15583                                  
 15584                                  ioctl_get_dev:
 15585 000024B6 E89200                  	CALL	Check_If_Net
 15586                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15587                                  					; certainly don't know how to do this
 15588                                  					; call.
 15589                                  	; 16/12/2022
 15590 000024B9 7403                    	jz	short ioctl_do_string
 15591                                  ioctl_bad_funj:
 15592 000024BB E957FF                  	JMP	ioctl_bad_fun
 15593                                  
 15594                                  ioctl_do_string:
 15595                                  	;test	word [es:di+4],4000h
 15596                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15597                                  	;test	byte [es:di+5],40h
 15598 000024BE 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15599 000024C3 74F6                    	JZ	short ioctl_bad_funj		; NO
 15600                                  					; assume IOCTL read
 15601 000024C5 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15602                                  
 15603 000024CA A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 15604 000024CC 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 15605                                  
 15606                                  					; it is an IOCTL write
 15607 000024CE C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 15608                                  
 15609                                  ioctl_control_call:
 15610 000024D3 B016                    	MOV	AL,DRDWRHL ; 22
 15611                                  ioctl_setup_pkt:
 15612 000024D5 88DC                    	MOV	AH,BL			; Unit number
 15613 000024D7 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15614 000024DA 31C0                    	XOR	AX,AX
 15615 000024DC A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15616 000024DF A2[8903]                	MOV	[IOMED],AL
 15617 000024E2 890E[8E03]              	MOV	[IOSCNT],CX
 15618 000024E6 8916[8A03]              	MOV	[IOXAD],DX
 15619 000024EA 8936[8C03]              	MOV	[IOXAD+2],SI
 15620 000024EE 06                      	PUSH	ES
 15621 000024EF 1F                      	POP	DS
 15622 000024F0 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15623 000024F2 16                      	PUSH	SS
 15624 000024F3 07                      	POP	ES
 15625                                  
 15626 000024F4 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15627                                  ioctl_do_IO:
 15628 000024F7 E84B22                  	call	DEVIOCALL2
 15629                                  
 15630                                  ;hkn; SS override for IOCALL
 15631                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 15632                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15633                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15634 000024FA 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15635 00002500 7507                    	JNZ	short ioctl_string_err
 15636                                  
 15637                                  ;hkn; SS override
 15638 00002502 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 15639                                  	; 16/12/2022
 15640 00002506 E97BE1                  	jmp	SYS_RET_OK
 15641                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15642                                  	;jmp	short ioctl_gd_ok_j
 15643                                  
 15644                                  ioctl_string_err:
 15645 00002509 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 15646                                  device_err:
 15647 0000250E 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 15648 00002512 89F8                    	MOV	AX,DI
 15649 00002514 E8E830                  	call	SET_I24_EXTENDED_ERROR
 15650                                  
 15651                                  ;hkn; use SS override
 15652                                  ;hkn;	mov	ax,[CS:EXTERR]
 15653 00002517 36A1[2403]              	mov	ax,[SS:EXTERR]
 15654                                  	;jmp	SYS_RET_ERR
 15655                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15656 0000251B EB88                    	jmp	short ioctl_gd_err_j
 15657                                  
 15658                                  ; 17/05/2019 - Retro DOS v4.0
 15659                                  
 15660                                  ;--------------------------------------------------------------------------
 15661                                  ; Proc name : Get_Driver_BL
 15662                                  ;
 15663                                  ;	DS is DOSDATA
 15664                                  ;	BL is drive number (0=default)
 15665                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 15666                                  ;	No regs modified
 15667                                  ;
 15668                                  ;---------------------------------------------------------------------------
 15669                                  
 15670                                  Get_Driver_BL:
 15671 0000251D 50                      	PUSH	AX
 15672 0000251E 88D8                    	MOV	AL,BL			; Drive
 15673 00002520 E88846                  	call	GETTHISDRV
 15674 00002523 7224                    	jc	short ioctl_bad_drv
 15675 00002525 30DB                    	XOR	BL,BL			; Unit zero on Net device
 15676 00002527 C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 15677 0000252C C43E[A205]              	LES	DI,[THISCDS]
 15678                                  	;test	word [es:di+43h],8000h
 15679                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15680                                  	;test	byte [es:di+44h],80h
 15681 00002530 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15682                                  	;les	di,[es:di+45h]
 15683 00002535 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 15684 00002539 750D                    	JNZ	short got_dev_ptr	 ; Is net
 15685 0000253B C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15686                                  	;mov	bl,[es:di+1]
 15687 00002540 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 15688                                  	;les	di,[es:di+13h]
 15689 00002544 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 15690                                  got_dev_ptr:
 15691 00002548 F8                      	CLC
 15692                                  ioctl_bad_drv:
 15693 00002549 58                      	POP	AX
 15694 0000254A C3                      	retn
 15695                                  
 15696                                  ;-------------------------------------------------------------------------
 15697                                  ; Proc Name : Check_If_Net:
 15698                                  ;
 15699                                  ;
 15700                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 15701                                  ; If no device is found, the return address is popped off the stack, and a
 15702                                  ; jump is made to ioctl_drv_err.
 15703                                  ;
 15704                                  ; On Entry:
 15705                                  ; Registers same as those for Get_Driver_BL
 15706                                  ;
 15707                                  ; On Exit:
 15708                                  ; ZERO flag	- set if not a net device
 15709                                  ;		- reset if net device
 15710                                  ; ES:DI -> the device
 15711                                  ;
 15712                                  ;
 15713                                  ; BUGBUG: This function assumes the following stack setup on entry
 15714                                  ;
 15715                                  ;	  SP+2 -> Error return address
 15716                                  ;	  SP   -> Normal return address
 15717                                  ;
 15718                                  ;-------------------------------------------------------------------------
 15719                                  
 15720                                  Check_If_Net:
 15721                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15722 0000254B E8CFFF                  	CALL	Get_Driver_BL
 15723 0000254E 720E                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 15724 00002550 06                      	PUSH	ES
 15725 00002551 57                      	PUSH	DI
 15726 00002552 C43E[A205]              	LES	DI,[THISCDS]
 15727                                  	;test	word [es:di+43h],8000h
 15728                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15729                                  	;test	byte [es:di+44h],80h
 15730 00002556 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15731 0000255B 5F                      	POP	DI
 15732 0000255C 07                      	POP	ES
 15733 0000255D C3                      	retn
 15734                                  
 15735                                  ioctl_drv_err_pop:
 15736 0000255E 58                      	pop	ax			; pop off return address
 15737 0000255F E941FF                  	jmp	ioctl_drv_err
 15738                                  
 15739                                  ioctl_bad_funj3:
 15740 00002562 E9B0FE                  	jmp	ioctl_bad_fun
 15741                                  
 15742                                  ioctl_string_errj:
 15743 00002565 EBA2                    	jmp	short ioctl_string_err  ; 25/05/2019
 15744                                  
 15745                                  ;--------------------------------------------------------------------------
 15746                                  ;
 15747                                  ; IOCTL: AL = E, F
 15748                                  ;
 15749                                  ; ENTRY: DS = DOSDATA
 15750                                  ;
 15751                                  ;
 15752                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 15753                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15754                                  ;         return address off the stack if the drive is invalid.
 15755                                  ;
 15756                                  ;--------------------------------------------------------------------------
 15757                                  
 15758                                  ioctl_drive_owner:
 15759                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15760 00002567 E8E1FF                  	Call	Check_If_Net
 15761 0000256A 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 15762                                  					;   certainly don't know how to do this
 15763                                  					;   call.
 15764                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 15765                                  	; 09/09/2018
 15766                                  	;test	byte [es:di+4],40h
 15767 0000256C 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15768 00002571 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 15769                                  	;mov	byte [IOCALL_REQFUNC],23
 15770 00002573 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 15771 00002578 3C0E                    	cmp	al,0Eh			; Get Owner ?
 15772 0000257A 7405                    	jz	short GetOwner
 15773                                  SetOwner:
 15774 0000257C C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 15775                                  GetOwner:
 15776 00002581 B00D                    	MOV	AL,OWNHL ; 13
 15777 00002583 88DC                    	MOV	AH,BL			; Unit number
 15778 00002585 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15779 00002588 31C0                    	XOR	AX,AX
 15780 0000258A A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15781 0000258D 06                      	PUSH	ES
 15782 0000258E 1F                      	POP	DS
 15783 0000258F 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15784 00002591 16                      	PUSH	SS
 15785 00002592 07                      	POP	ES
 15786 00002593 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15787 00002596 1E                      	push	ds
 15788 00002597 56                      	push	si
 15789 00002598 E8AA21                  	call	DEVIOCALL2
 15790 0000259B 5E                      	pop	si
 15791 0000259C 1F                      	pop	ds
 15792                                  ;hkn; SS override
 15793                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15794                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15795 0000259D 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15796 000025A3 75C0                    	jnz	short ioctl_string_errj
 15797 000025A5 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 15798                                  					; owner returned is 1-based.
 15799 000025A9 E9D8E0                  	jmp	SYS_RET_OK
 15800                                  
 15801                                  ;============================================================================
 15802                                  ; DELETE.ASM, MSDOS 6.0, 1991
 15803                                  ;============================================================================
 15804                                  ; 07/08/2018 - Retro DOS v3.0
 15805                                  ; 17/05/2019 - Retro DOS v4.0
 15806                                  
 15807                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 15808                                  ;	NAME	DOS_DELETE
 15809                                  
 15810                                  ;
 15811                                  ;	Microsoft Confidential
 15812                                  ;	Copyright (C) Microsoft Corporation 1991
 15813                                  ;	All Rights Reserved.
 15814                                  ;
 15815                                  
 15816                                  ;**	DELETE.ASM - Low level routine for deleting files
 15817                                  ;----------------------------------------------------------------------------
 15818                                  ;		DOS_DELETE
 15819                                  ;		REN_DEL_Check
 15820                                  ;		FastOpen_Delete	       ; DOS 3.3
 15821                                  ;		FastOpen_Update	       ; DOS 3.3
 15822                                  
 15823                                  ;   Revision history:
 15824                                  ;
 15825                                  ;   A000  version 4.00	Jan. 1988
 15826                                  ;   A001  Fastopen Rename fix	April 1989
 15827                                  
 15828                                  ;Installed = TRUE
 15829                                  
 15830                                  ;	i_need	NoSetDir,BYTE
 15831                                  ;	i_need	Creating,BYTE
 15832                                  ;	i_need	DELALL,BYTE
 15833                                  ;	i_need	THISDPB,DWORD
 15834                                  ;	i_need	THISSFT,DWORD
 15835                                  ;	i_need	THISCDS,DWORD
 15836                                  ;	i_need	CURBUF,DWORD
 15837                                  ;	i_need	ATTRIB,BYTE
 15838                                  ;	i_need	SATTRIB,BYTE
 15839                                  ;	i_need	WFP_START,WORD
 15840                                  ;	i_need	REN_WFP,WORD			 ;BN001
 15841                                  ;	i_need	NAME1,BYTE			 ;BN001
 15842                                  ;	i_need	FoundDel,BYTE
 15843                                  ;	i_need	AUXSTACK,BYTE
 15844                                  ;	i_need	VOLCHNG_FLAG,BYTE
 15845                                  ;	i_need	JShare,DWORD
 15846                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 15847                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 15848                                  ;
 15849                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 15850                                  ;
 15851                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 15852                                  ;	i_need	DMAADD,DWORD
 15853                                  ;	i_need	RENAMEDMA,BYTE
 15854                                  
 15855                                  ;----------------------------------------------------------------------------
 15856                                  ;
 15857                                  ; Procedure Name : DOS_DELETE
 15858                                  ;
 15859                                  ; Inputs:
 15860                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15861                                  ;		terminated)
 15862                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15863                                  ;		( = -1 if current dir not involved, else
 15864                                  ;		 Points to first char after last "/" of current dir part)
 15865                                  ;	[THISCDS] Points to CDS being used
 15866                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15867                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15868                                  ; Function:
 15869                                  ;	Delete the specified file(s)
 15870                                  ; Outputs:
 15871                                  ;	CARRY CLEAR
 15872                                  ;		OK
 15873                                  ;	CARRY SET
 15874                                  ;	    AX is error code
 15875                                  ;		error_file_not_found
 15876                                  ;			Last element of path not found
 15877                                  ;		error_path_not_found
 15878                                  ;			Bad path (not in curr dir part if present)
 15879                                  ;		error_bad_curr_dir
 15880                                  ;			Bad path in current directory part of path
 15881                                  ;		error_access_denied
 15882                                  ;			Attempt to delete device or directory
 15883                                  ;		***error_sharing_violation***
 15884                                  ;			Deny both access required, generates an INT 24.
 15885                                  ;			This error is NOT returned. The INT 24H is generated,
 15886                                  ;			  and the file is ignored (not deleted). Delete will
 15887                                  ;			  simply continue on looking for more files.
 15888                                  ;			  Carry will NOT be set in this case.
 15889                                  ; DS preserved, others destroyed
 15890                                  ;
 15891                                  ;----------------------------------------------------------------------------
 15892                                  
 15893                                  FILEFOUND   equ 01h
 15894                                  FILEDELETED equ 10h
 15895                                  
 15896                                  
 15897                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15898                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 15899                                  
 15900                                  DOS_DELETE:
 15901                                  
 15902                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 15903                                  ;hkn; appropriately at this point.
 15904                                  
 15905 000025AC E814ED                  	call	TestNet
 15906 000025AF 7306                    	JNC	short LOCAL_DELETE
 15907                                  
 15908                                  ;IF NOT Installed
 15909                                  ;	transfer NET_DELETE
 15910                                  ;ELSE
 15911                                  	;MOV	AX,(MultNET SHL 8) | 19
 15912                                  	;INT	2FH
 15913                                  	;return
 15914                                  
 15915 000025B1 B81311                  	mov	ax,1113h
 15916 000025B4 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 15917                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 15918                                  			;		fully-qualified filename in DOS CS
 15919                                  			; SDA CDS pointer -> current directory structure for drive with file
 15920                                  			; Return: CF set on error
 15921 000025B6 C3                      	retn
 15922                                  ;ENDIF
 15923                                  
 15924                                  LOCAL_DELETE:
 15925 000025B7 C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 15926 000025BC E8C9ED                  	call	ECritDisk
 15927                                  	;mov	word [CREATING],0E500h
 15928 000025BF C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 15929 000025C5 8B36[B205]              	MOV	SI,[WFP_START]
 15930                                  SKPNUL:
 15931 000025C9 AC                      	LODSB
 15932 000025CA 08C0                    	OR	AL,AL
 15933 000025CC 75FB                    	JNZ	short SKPNUL		; go to end
 15934 000025CE 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 15935 000025D1 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 15936 000025D5 7506                    	JNZ	short TEST_QUEST
 15937 000025D7 807C022A                	CMP	BYTE [SI+2],"*"
 15938 000025DB 741F                    	JZ	short CHECK_ATTS
 15939                                  TEST_QUEST:
 15940 000025DD 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 15941 000025E0 87FE                    	XCHG	DI,SI
 15942                                  
 15943 000025E2 16                      	push	ss
 15944                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 15945 000025E3 07                      	pop	es ; 17/05/2019
 15946                                  
 15947 000025E4 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 15948 000025E7 B90400                  	MOV	CX,4		; four sets of "??"
 15949 000025EA F3AF                    	REPE	SCASW
 15950 000025EC 751C                    	JNZ	short NOT_ALL
 15951 000025EE 87FE                    	XCHG	DI,SI
 15952 000025F0 AD                      	LODSW
 15953 000025F1 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 15954 000025F4 7514                    	JNZ	short NOT_ALL
 15955 000025F6 AD                      	LODSW
 15956 000025F7 3D3F3F                  	CMP	AX,"??"
 15957 000025FA 750E                    	JNZ	short NOT_ALL
 15958                                  CHECK_ATTS:
 15959 000025FC A0[6D05]                	MOV	AL,[SATTRIB]
 15960                                  	;and	al,1Fh
 15961 000025FF 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15962                                  					; Look only at hidden bits
 15963                                  	;cmp	al,1Fh
 15964 00002601 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15965                                  					; All must be set
 15966 00002603 7505                    	JNZ	short NOT_ALL
 15967                                  
 15968                                  ; NOTE WARNING DANGER-----
 15969                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 15970                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 15971                                  
 15972 00002605 C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 15973                                  NOT_ALL:
 15974 0000260A C606[4C03]01            	MOV	byte [NoSetDir],1
 15975 0000260F E8D719                  	call	GetPathNoSet
 15976 00002612 7312                    	JNC	short Del_found
 15977 00002614 750B                    	JNZ	short _bad_path
 15978 00002616 08C9                    	OR	CL,CL
 15979 00002618 7407                    	JZ	short _bad_path
 15980                                  No_file:
 15981 0000261A B80200                  	MOV	AX,error_file_not_found
 15982                                  ErrorReturn:
 15983 0000261D F9                      	STC
 15984                                  	;call	LCritDisk
 15985                                  	;retn
 15986                                  	; 18/12/2022
 15987 0000261E E982ED                  	jmp	LCritDisk
 15988                                  
 15989                                  _bad_path:
 15990 00002621 B80300                  	MOV	AX,error_path_not_found
 15991 00002624 EBF7                    	JMP	short ErrorReturn
 15992                                  
 15993                                  Del_found:
 15994 00002626 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 15995 00002628 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 15996 0000262D 7405                    	JZ	short NOT_DIR
 15997                                  Del_access_err:
 15998 0000262F B80500                  	MOV	AX,error_access_denied
 15999 00002632 EBE9                    	JMP	short ErrorReturn
 16000                                  
 16001                                  NOT_DIR:
 16002 00002634 08E4                    	OR	AH,AH			; Check if device name
 16003 00002636 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16004                                  
 16005                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16006                                  
 16007                                  DELFILE:
 16008 00002638 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16009                                  
 16010                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16011                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16012                                  
 16013 0000263D 1E                      	PUSH	DS
 16014 0000263E 8A26[7F05]              	MOV	AH,[DELALL]
 16015 00002642 C53E[E205]              	LDS	DI,[CURBUF]
 16016                                  	
 16017                                  ;hkn; SS override
 16018 00002646 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16019 0000264C 7509                    	JNZ	short DoDelete		; yes
 16020                                  
 16021 0000264E F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16022 00002652 7403                    	JZ	short DoDelete		; not read only
 16023                                  
 16024 00002654 1F                      	POP	DS
 16025 00002655 EB32                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16026                                  
 16027                                  DoDelete:
 16028 00002657 E88400                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16029 0000265A 7303                    	JNC	short DEL_SHARE_OK
 16030 0000265C 1F                      	POP	DS
 16031 0000265D EB2A                    	JMP	SHORT DELNXT		; Skip it
 16032                                  
 16033                                  DEL_SHARE_OK:
 16034                                  	; 17/05/2019 - Retro DOS v4.0
 16035                                  	; MSDOS 6.0
 16036                                  	;test	byte [di+5],40h
 16037 0000265F F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16038                                  					;LB. if already dirty		  ;AN000;
 16039 00002663 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16040 00002665 E8FD35                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16041                                  	;or	byte [di+5],40h
 16042 00002668 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16043                                  yesdirty:
 16044 0000266C 8827                    	mov	[bx],ah 
 16045                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16046 0000266E 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16047 00002670 1F                      	POP	DS
 16048 00002671 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16049                                  
 16050 00002676 83FB02                  	CMP	BX,2
 16051 00002679 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16052                                  	;cmp	bx,[es:bp+0Dh]
 16053 0000267B 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16054 0000267F 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16055                                  
 16056 00002681 E83529                  	call	RELEASE 		; Free file data
 16057 00002684 7252                    	JC	short No_fileJ
 16058                                  
 16059                                  ; DOS 3.3  FastOpen
 16060                                  
 16061 00002686 E8C300                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16062                                  
 16063                                  ; DOS 3.3  FastOpen
 16064                                  
 16065                                  DELNXT:
 16066 00002689 C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16067 0000268D E8C218                  	call	GETENTRY		; Registers need to be reset
 16068 00002690 7246                    	JC	short No_fileJ
 16069 00002692 E8F617                  	call	NEXTENT
 16070 00002695 73A1                    	JNC	short DELFILE
 16071 00002697 C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16072                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16073                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16074                                  	;;mov	al,[es:bp+0]
 16075                                  	; 15/12/2022
 16076 0000269B 268A4600                	MOV	AL,[ES:BP]
 16077 0000269F E8BB34                  	call	FLUSHBUF
 16078 000026A2 7234                    	JC	short No_fileJ
 16079                                  ;
 16080                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16081                                  ;
 16082                                  ;   not found not deleted		file not found
 16083                                  ;   not found	  deleted		*** impossible ***
 16084                                  ;	found not deleted		access denied (read-only)
 16085                                  ;	found	  deleted		no error
 16086                                  ;
 16087 000026A4 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16088 000026A9 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16089                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16090                                  ; and to force the DOS to issue a media check.
 16091 000026AB F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16092 000026B0 741C                    	jz	short No_Set_Flag
 16093 000026B2 50                      	PUSH	AX
 16094 000026B3 06                      	PUSH	ES
 16095 000026B4 57                      	PUSH	DI
 16096 000026B5 C43E[A205]              	LES	DI,[THISCDS]
 16097 000026B9 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16098 000026BC 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16099 000026BF 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16100                                  	
 16101                                  	; MSDOS 6.0
 16102 000026C3 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16103 000026C5 E8DE04                  	call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 16104                                  	 
 16105 000026C8 E82431                  	call	FATREAD_CDS		; force media check
 16106 000026CB 5F                      	POP	DI
 16107 000026CC 07                      	POP	ES
 16108 000026CD 58                      	POP	AX
 16109                                  No_Set_Flag:
 16110                                  	;call	LCritDisk		; carry is clear
 16111                                  	;retn
 16112                                  	; 18/12/2022
 16113 000026CE E9D2EC                  	jmp	LCritDisk
 16114                                  DelError:
 16115 000026D1 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16116 000026D6 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16117                                  No_fileJ:
 16118 000026D8 E93FFF                  	JMP	No_file ; 10/08/2018 		; Nope
 16119                                  Del_access_errJ:
 16120 000026DB E951FF                  	JMP	Del_access_err ; 10/08/2018
 16121                                  
 16122                                  ; 08/08/2018 - Retro DOS v3.0
 16123                                  
 16124                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16125                                  ;---------------------------------------------------------------------------
 16126                                  ; Procedure Name : REN_DEL_Check
 16127                                  ;
 16128                                  ; Inputs:
 16129                                  ;	[THISDPB] set
 16130                                  ;	[CURBUF+2]:BX points to entry
 16131                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16132                                  ;	[WFP_Start] points to name
 16133                                  ; Function:
 16134                                  ;	Check for Exclusive access on given file.
 16135                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16136                                  ; Outputs:
 16137                                  ;	ES:BP = [THISDPB]
 16138                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16139                                  ;		last element will be loaded from the directory entry.  This is
 16140                                  ;		so the name given to the sharer doesn't have any meta chars in
 16141                                  ;		it.
 16142                                  ;	Carry set if sharing violation, INT 24H generated
 16143                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16144                                  ;		This is because input AX is preserved.
 16145                                  ;		Caller must set the error if needed.
 16146                                  ;	Carry clear
 16147                                  ;		OK
 16148                                  ; AX,DS,BX,SI,DI preserved
 16149                                  ;---------------------------------------------------------------------------
 16150                                  
 16151                                  REN_DEL_Check:
 16152                                  
 16153 000026DE 1E                      	PUSH	DS
 16154 000026DF 57                      	PUSH	DI
 16155 000026E0 50                      	PUSH	AX
 16156 000026E1 53                      	PUSH	BX
 16157 000026E2 56                      	PUSH	SI		; Save CURBUF pointers
 16158                                  	
 16159 000026E3 16                      	push	ss
 16160 000026E4 07                      	pop	es
 16161                                  
 16162                                  ;hkn; context ES will assume ES to DOSDATA
 16163                                  ;hkn; ASSUME	ES:DOSGROUP
 16164                                  
 16165                                  ;hkn; SS override
 16166 000026E5 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16167 000026EA 89DE                    	MOV	SI,BX
 16168                                  
 16169                                  ;hkn; SS override
 16170 000026EC 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16171 000026F1 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16172 000026F3 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 16173 000026F6 E86AEB                  	call	StrLen		; CX is length of ES:DI including NUL
 16174 000026F9 49                      	DEC	CX		; Don't include nul in count
 16175 000026FA 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16176 000026FC E86A47                  	call	SkipBack	; Back up one element
 16177 000026FF 47                      	INC	DI		; Point to start of last element
 16178                                  
 16179                                  	; 17/05/2019 - Retro DOS v4.0
 16180                                  ;hkn; SS override
 16181                                  	; MSDOS 6.0
 16182 00002700 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16183                                  	;
 16184 00002705 E832FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16185 00002708 5E                      	POP	SI		; Get back entry pointers
 16186 00002709 5B                      	POP	BX
 16187 0000270A 53                      	PUSH	BX
 16188 0000270B 56                      	PUSH	SI		; Back on stack
 16189                                  	
 16190 0000270C 16                      	push	ss
 16191 0000270D 1F                      	pop	ds
 16192                                  
 16193                                  ;hkn; context DS will assume ES to DOSDATA
 16194                                  ;hkn; ASSUME	DS:DOSGROUP
 16195                                  
 16196                                  ; Close the file if possible by us.
 16197                                  ;
 16198                                  ;if installed
 16199 0000270E FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16200                                  ;else
 16201                                  ;	Call	ShCloseFile
 16202                                  ;endif
 16203 00002712 8C1E[A005]              	MOV	[THISSFT+2],DS
 16204                                  
 16205                                  ;hkn; AUXSTACK is in DOSDATA
 16206 00002716 C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16207                                  				; Scratch space
 16208 0000271C 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16209 0000271E E81425                  	call	DOOPEN		; Fill in SFT for share check
 16210 00002721 C43E[9E05]              	LES	DI,[THISSFT]
 16211                                  	;mov	word [es:di+2],10h
 16212 00002725 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16213                                  				; requires exclusive access
 16214                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16215 0000272B 26C7050100              	mov	word [ES:DI],1
 16216 00002730 E85B4D                  	call	ShareEnter
 16217 00002733 720D                    	jc	short CheckDone
 16218 00002735 C43E[9E05]              	LES	DI,[THISSFT]
 16219                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16220 00002739 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16221                                  	
 16222 0000273E E8484D                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16223 00002741 F8                      	CLC
 16224                                  CheckDone:
 16225 00002742 C42E[8A05]              	LES	BP,[THISDPB]
 16226 00002746 5E                      	POP	SI
 16227 00002747 5B                      	POP	BX
 16228 00002748 58                      	POP	AX
 16229 00002749 5F                      	POP	DI
 16230 0000274A 1F                      	POP	DS
 16231 0000274B C3                      	retn
 16232                                  
 16233                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16234                                  ;---------------------------------------------------------------------------
 16235                                  ; Procedure Name : FastOpen_Delete
 16236                                  ; Inputs:
 16237                                  ;	None
 16238                                  ; Function:
 16239                                  ;	Call FastOpen to delete the dir info.
 16240                                  ; Outputs:
 16241                                  ;	None
 16242                                  ;---------------------------------------------------------------------------
 16243                                  
 16244                                  FastOpen_Delete:
 16245 0000274C 9C                      	PUSHF			; save flag
 16246 0000274D 56                      	PUSH	SI		; save registers
 16247 0000274E 53                      	PUSH	BX
 16248 0000274F 50                      	PUSH	AX
 16249                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16250                                  ;hkn; SS override
 16251                                  	; 17/05/2019 - Retro DOS v4.0
 16252                                  	; MSDOS 6.0
 16253 00002750 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16254                                  	
 16255 00002755 B003                    	MOV	AL,FONC_delete	; al = 3
 16256                                  fastinvoke:
 16257                                  ;hkn; FastTable is in DOSDATA
 16258 00002757 BB[320D]                	MOV	BX,FastTable+2
 16259 0000275A FF1F                    	CALL	far [BX]	; call fastopen
 16260 0000275C 58                      	POP	AX		; restore registers
 16261 0000275D 5B                      	POP	BX
 16262 0000275E 5E                      	POP	SI
 16263 0000275F 9D                      	POPF			; restore flag
 16264 00002760 C3                      	retn
 16265                                  
 16266                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16267                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16268                                  
 16269                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16270                                  ;---------------------------------------------------------------------------
 16271                                  ; PROCEDURE Name : FastOpen_Rename
 16272                                  ;
 16273                                  ; Inputs:
 16274                                  ;	 REN_WFP   = Path Name
 16275                                  ;	 NAME1	   = New Name
 16276                                  ; Function:
 16277                                  ;	Call FastOpen to rename the dir entry in the cache
 16278                                  ; Outputs:
 16279                                  ;	None
 16280                                  ;---------------------------------------------------------------------------
 16281                                  
 16282                                  FastOpen_Rename:
 16283                                  	; 17/05/2019 - Retro DOS v4.0
 16284                                  	; 08/08/2018 - Retro DOS v3.0
 16285                                  	; MSDOS 6.0
 16286 00002761 9C                      	PUSHF			;AN001 save flag
 16287 00002762 56                      	PUSH	SI		;AN001 save registers
 16288 00002763 57                      	PUSH	DI		;AN001
 16289 00002764 53                      	PUSH	BX		;AN001
 16290 00002765 50                      	PUSH	AX		;AN001
 16291                                  	;
 16292                                  ;hkn; SS override
 16293 00002766 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16294                                  
 16295                                  ;hkn; NAME1 is in DOSDATA
 16296 0000276B BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16297                                  	;mov	al,6
 16298 0000276E B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16299                                  	
 16300                                  ;hkn; FastTable is in DOSDATA
 16301 00002770 BB[320D]                	MOV	BX,FastTable+2
 16302 00002773 FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16303                                  	
 16304 00002775 58                      	POP	AX		; restore registers  ;AN001
 16305 00002776 5B                      	POP	BX				     ;AN001
 16306 00002777 5F                      	POP	DI				     ;AN001
 16307 00002778 5E                      	POP	SI				     ;AN001
 16308 00002779 9D                      	POPF			; restore flag	     ;AN001
 16309 0000277A C3                      	retn					     ;AN001
 16310                                  
 16311                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16312                                  ;---------------------------------------------------------------------------
 16313                                  ; Procedure Name : FastOpen_Update
 16314                                  ;
 16315                                  ; Inputs:
 16316                                  ;	DL     drive number (A=0,B=1,,,)
 16317                                  ;	CX     first cluster #
 16318                                  ;	AH     0 updates dir entry
 16319                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16320                                  ;	ES:DI  directory entry
 16321                                  ; Function:
 16322                                  ;	Call FastOpen to update the dir info.
 16323                                  ; Outputs:
 16324                                  ;	None
 16325                                  ;---------------------------------------------------------------------------
 16326                                  
 16327                                  FastOpen_Update:
 16328 0000277B 9C                      	PUSHF			; save flag
 16329 0000277C 56                      	PUSH	SI
 16330 0000277D 53                      	PUSH	BX		; save regs
 16331 0000277E 50                      	PUSH	AX
 16332 0000277F B004                    	MOV	AL,FONC_update	; al = 4
 16333 00002781 EBD4                    	JMP	short fastinvoke
 16334                                  
 16335                                  	; 17/05/2019
 16336                                  
 16337                                  	; MSDOS 6.0
 16338                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16339                                  ;---------------------------------------------------------------------------
 16340                                  Fast_Dispatch:
 16341                                  ;hkn; FastTable is in DOSDATA
 16342 00002783 BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16343                                  ;hkn; use SS override
 16344 00002786 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16345 00002789 C3                      	retn
 16346                                  
 16347                                  ;============================================================================
 16348                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16349                                  ;============================================================================
 16350                                  ; 08/08/2018 - Retro DOS v3.0
 16351                                  ; 17/05/2019 - Retro DOS v4.0
 16352                                  
 16353                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16354                                  ;	NAME	DOS_RENAME
 16355                                  
 16356                                  ;**	Low level routine for renaming files
 16357                                  ;----------------------------------------------------------------------------
 16358                                  ;	DOS_RENAME
 16359                                  ;
 16360                                  ;	Modification history:
 16361                                  ;
 16362                                  ;	    Created: ARR 30 March 1983
 16363                                  
 16364                                  ;----------------------------------------------------------------------------
 16365                                  ;
 16366                                  ; Procedure Name : DOS_RENAME
 16367                                  ;
 16368                                  ; Inputs:
 16369                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16370                                  ;		chars, NUL terminated)
 16371                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16372                                  ;		( = -1 if current dir not involved, else
 16373                                  ;		 Points to first char after last "/" of current dir part)
 16374                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16375                                  ;		chars, NUL terminated)
 16376                                  ;	[THISCDS] Points to CDS being used
 16377                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16378                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16379                                  ; Function:
 16380                                  ;	Rename the specified file(s)
 16381                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16382                                  ; Outputs:
 16383                                  ;	CARRY CLEAR
 16384                                  ;	    OK
 16385                                  ;	CARRY SET
 16386                                  ;	    AX is error code
 16387                                  ;		error_file_not_found
 16388                                  ;			No match for source, or dest path invalid
 16389                                  ;		error_not_same_device
 16390                                  ;			Source and dest are on different devices
 16391                                  ;		error_access_denied
 16392                                  ;			Directory specified (not simple rename),
 16393                                  ;			Device name given, Destination exists.
 16394                                  ;			NOTE: In third case some renames may have
 16395                                  ;			 been done if metas.
 16396                                  ;		error_path_not_found
 16397                                  ;			Bad path (not in curr dir part if present)
 16398                                  ;			SOURCE ONLY
 16399                                  ;		error_bad_curr_dir
 16400                                  ;			Bad path in current directory part of path
 16401                                  ;			SOURCE ONLY
 16402                                  ;		error_sharing_violation
 16403                                  ;			Deny both access required, generates an INT 24.
 16404                                  ; DS preserved, others destroyed
 16405                                  ;
 16406                                  ;----------------------------------------------------------------------------
 16407                                  
 16408                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16409                                  
 16410                                  DOS_RENAME:
 16411                                  
 16412                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16413                                  ;hkn; at this point to DOSDATA.
 16414                                  
 16415 0000278A E836EB                  	call	TestNet
 16416 0000278D 7306                    	JNC	short LOCAL_RENAME
 16417                                  
 16418                                  ;IF NOT Installed
 16419                                  ;	transfer NET_RENAME
 16420                                  ;ELSE
 16421                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16422                                  	;INT	2FH
 16423                                  	;return
 16424                                  
 16425 0000278F B81111                  	mov     ax, 1111h
 16426 00002792 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16427                                  			; SS = DS = DOS CS, 
 16428                                  			; SDA first filename pointer = offset of fully-qualified old name
 16429                                  			; SDA CDS pointer -> current directory
 16430                                  			; Return: CF set on error
 16431 00002794 C3                      	retn
 16432                                  ;ENDIF
 16433                                  
 16434                                  LOCAL_RENAME:
 16435 00002795 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16436 0000279A 8B36[B205]              	MOV	SI,[WFP_START]
 16437 0000279E 8B3E[B405]              	MOV	DI,[REN_WFP]
 16438 000027A2 8A04                    	MOV	AL,[SI]
 16439 000027A4 8A25                    	MOV	AH,[DI]
 16440 000027A6 0D2020                  	OR	AX,2020H		; Lower case
 16441 000027A9 38E0                    	CMP	AL,AH
 16442 000027AB 7405                    	JZ	short SAMEDRV
 16443 000027AD B81100                  	MOV	AX,error_not_same_device ; 11h
 16444 000027B0 F9                      	STC
 16445 000027B1 C3                      	retn
 16446                                  
 16447                                  SAMEDRV:
 16448 000027B2 FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16449 000027B6 FF36[2C03]              	PUSH	WORD [DMAADD]
 16450 000027BA 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16451                                  
 16452                                  ;hkn; RENAMEDMA is in DOSDATA
 16453 000027BE C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16454 000027C4 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16455 000027C9 E8BCEB                  	call	ECritDisk
 16456 000027CC E8FA05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16457                                  					;    points to entry
 16458 000027CF 7314                    	JNC	short Check_Dev
 16459 000027D1 83F812                  	CMP	AX,error_no_more_files ; 12h
 16460 000027D4 7503                    	JNZ	short GOTERR
 16461 000027D6 B80200                  	MOV	AX,error_file_not_found ; 2
 16462                                  GOTERR:
 16463 000027D9 F9                      	STC
 16464                                  RENAME_POP:
 16465 000027DA 8F06[2C03]              	POP	WORD [DMAADD]
 16466 000027DE 8F06[2E03]              	POP	WORD [DMAADD+2]
 16467                                  	;call	LCritDisk
 16468                                  	;retn
 16469                                  	; 16/12/2022
 16470 000027E2 E9BEEB                  	jmp	LCritDisk
 16471                                  
 16472                                  Check_Dev:
 16473                                  	; 17/05/2019 - Retro DOS v4.0
 16474                                  	;mov	ax,5
 16475 000027E5 B80500                  	MOV	AX,error_access_denied	; Assume error
 16476                                  	
 16477                                  	; MSDOS 6.0
 16478 000027E8 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16479 000027E9 C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 16480                                  	;add	si,21
 16481 000027ED 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16482                                  	;test	byte [si+11],10h
 16483 000027F0 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16484 000027F4 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16485 000027F6 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16486 000027FA E8CEFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16487                                  notdir:
 16488 000027FD 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16489 000027FE 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16490                                  
 16491                                  	; MSDOS 3.3 & MSDOS 6.0
 16492 00002800 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16493 00002805 75D2                    	JNZ	short GOTERR
 16494                                  
 16495                                  ; At this point a source has been found. There is search continuation info (a
 16496                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16497                                  ; directory entry found.
 16498                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16499                                  ; throughout the RENAME since it is known at this point that the source and
 16500                                  ; destination are both on the same device.
 16501                                  ; [SATTRIB] is also set.
 16502                                  
 16503 00002807 89DE                    	MOV	SI,BX
 16504                                  	;add	si,26
 16505 00002809 83C61A                  	ADD	SI,dir_entry.dir_first
 16506 0000280C E8CFFE                  	call	REN_DEL_Check
 16507 0000280F 7305                    	JNC	short REN_OK1
 16508 00002811 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16509 00002814 EBC4                    	JMP	short RENAME_POP
 16510                                  
 16511                                  ;------------------------------------------------------------------------------
 16512                                  ; Check if the source is a file or directory. If file, delete the entry
 16513                                  ; from the Fastopen cache. If directory, rename it later
 16514                                  ;------------------------------------------------------------------------------
 16515                                  
 16516                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16517                                  	; MSDOS 6.0
 16518 00002816 56                      	PUSH	SI
 16519 00002817 C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16520                                  	;add	si,21
 16521 0000281B 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16522                                  	;test	byte [si+11],10h
 16523 0000281E F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16524 00002822 7403                    	JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16525 00002824 5E                      	POP	SI			;BN00X
 16526 00002825 EB04                    	JMP	SHORT SWAP_SOURCE	;BN00X
 16527                                  NOT_DIR1:				;;BN00X it is a file, delete the entry
 16528 00002827 5E                      	POP	SI
 16529                                  
 16530                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 16531 00002828 E821FF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16532                                  SWAP_SOURCE:
 16533                                  	; MSDOS 3.3
 16534                                  	;MOV	SI,[REN_WFP]
 16535                                  	;MOV	[WFP_START],SI
 16536                                  	; MSDOS 6.0
 16537 0000282B A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16538 0000282E 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16539 00002832 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16540 00002836 A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16541                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16542 00002839 C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16543                                  	;mov	word [CREATING],0E5FFh
 16544 0000283F C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16545                                  					; A rename is like a CREATE_NEW as far
 16546                                  					; as the destination is concerned.
 16547 00002845 E8A117                  	call	GetPathNoSet
 16548                                  
 16549                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16550                                  ;   since no files match the destination name. If it fails for any other
 16551                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16552                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16553                                  ;   if the rename should fail because we haven't built an explicit name by
 16554                                  ;   substituting for the meta chars in it. In this case the destination file
 16555                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16556                                  ;   in the directory entry part.
 16557                                  	
 16558 00002848 7223                    	JC	short NODEST
 16559                                  	
 16560                                  	; MSDOS 6.0
 16561                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16562                                  	; !! MSDOS 3.3 !!
 16563                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 16564                                  
 16565 0000284A 08E4                    	OR	AH,AH			; Device?
 16566 0000284C 792C                    	JNS	short SAVEDEST		; No, continue
 16567                                  BAD_ACC:
 16568 0000284E B80500                  	MOV	AX,error_access_denied
 16569 00002851 F9                      	STC
 16570                                  RENAME_CLEAN:
 16571 00002852 9C                      	PUSHF				; Save carry state
 16572 00002853 50                      	PUSH	AX			; and error code (if carry set)
 16573 00002854 A0[7605]                	MOV	AL,[THISDRV]
 16574 00002857 E80333                  	call	FLUSHBUF
 16575 0000285A 58                      	POP	AX
 16576 0000285B 803E[4A03]00            	CMP	byte [FAILERR],0
 16577 00002860 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 16578 00002862 9D                      	POPF
 16579 00002863 E974FF                  	JMP	RENAME_POP
 16580                                  
 16581                                  BAD_ERR:
 16582 00002866 58                      	POP	AX			; Saved flags
 16583                                  	; 16/12/202
 16584                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16585                                  BAD_PATH: ; *
 16586 00002867 B80300                  	MOV	AX,error_path_not_found
 16587 0000286A E96CFF                  	JMP	GOTERR
 16588                                  
 16589                                  NODEST:
 16590 0000286D 75F8                    	JNZ	short BAD_PATH
 16591 0000286F 803E[4A03]00            	CMP	byte [FAILERR],0
 16592 00002874 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 16593                                  					; because user FAILed on I 24
 16594                                  	; 14/11/2022
 16595 00002876 08C9                    	OR	CL,CL
 16596                                  	;JNZ	short SAVEDEST
 16597                                  	; 17/05/2019
 16598 00002878 74ED                    	jz	short BAD_PATH ; *
 16599                                  ;BAD_PATH: ; *
 16600                                  ;	MOV	AX,error_path_not_found
 16601                                  ;	;STC
 16602                                  ;	;JMP	RENAME_POP
 16603                                  ;	; 17/05/2019
 16604                                  ;	jmp	GOTERR 
 16605                                  
 16606                                  ; 16/12/2022
 16607                                  %if 0
 16608                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16609                                  	or	cl,cl
 16610                                  	jnz	short SAVEDEST
 16611                                  	;jz	short BAD_PATH ; *
 16612                                  BAD_PATH: ; *
 16613                                  	;mov	ax,3
 16614                                  	mov	ax,error_path_not_found
 16615                                  	stc
 16616                                  	jmp	RENAME_POP
 16617                                  %endif
 16618                                  
 16619                                  SAVEDEST:
 16620 0000287A 16                      	push	ss
 16621 0000287B 07                      	pop	es
 16622                                  
 16623                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 16624 0000287C BF[5705]                	MOV	DI,NAME2
 16625 0000287F BE[4B05]                	MOV	SI,NAME1
 16626                                  
 16627 00002882 B90B00                  	MOV	CX,11
 16628 00002885 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 16629 00002887 A1[C205]                	MOV	AX,[DIRSTART]
 16630 0000288A A3[6405]                	MOV	[DESTSTART],AX
 16631                                  BUILDDEST:
 16632 0000288D 16                      	push	ss
 16633 0000288E 07                      	pop	es			; needed due to JMP BUILDDEST below
 16634                                  
 16635                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 16636 0000288F BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 16637 00002892 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 16638 00002895 BE[5705]                	MOV	SI,NAME2		; Raw dest
 16639                                  
 16640 00002898 B90B00                  	MOV	CX,11
 16641                                  
 16642                                  	; 17/05/2019 - Retro DOS v4.0
 16643                                  	
 16644                                  	; MSDOS 6.0
 16645 0000289B E81401                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 16646                                  
 16647                                  	; MSDOS 3.3
 16648                                  
 16649                                  ; 08/08/2018 - Retro DOS v3.0
 16650                                  ; MSDOS 6.0 
 16651                                  ;---------------------------------------------------------------------------
 16652                                  ;Procedure: NEW_RENAME
 16653                                  ;
 16654                                  ;Input: DS:SI -> raw string with ?
 16655                                  ;	ES:DI -> destination string
 16656                                  ;	DS:BX -> source string
 16657                                  ;Function: replace ? chars of raw string with chars in source string and
 16658                                  ;	   put in destination string
 16659                                  ;Output: ES:DI-> new string
 16660                                  ;---------------------------------------------------------------------------
 16661                                  ;
 16662                                  ;NEW_RENAME:
 16663                                  ;NEWNAM:
 16664                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 16665                                  ;	LODSB
 16666                                  ;	CMP	AL,"?"
 16667                                  ;	JNZ	short NOCHG
 16668                                  ;	MOV	AL,[BX] 		; Get replace char
 16669                                  ;NOCHG:
 16670                                  ;	STOSB
 16671                                  ;	INC	BX			; Next replace char
 16672                                  ;	LOOP	NEWNAM
 16673                                  ;	; MSDOS 6.0
 16674                                  ;	;retn
 16675                                  
 16676                                  	; MSDOS 3.3 & MSDOS 6.0
 16677                                  	;mov	byte [ATTRIB],16h
 16678 0000289E C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 16679 000028A3 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 16680 000028A8 E8FB19                  	call	DEVNAME 		; Check if we built a device name
 16681 000028AB 73A1                    	JNC	short BAD_ACC
 16682 000028AD 8B1E[6405]              	MOV	BX,[DESTSTART]
 16683 000028B1 C42E[8A05]              	LES	BP,[THISDPB]
 16684 000028B5 E8CB16                  	call	SETDIRSRCH		; Reset search to start of dir
 16685 000028B8 7294                    	JC	short BAD_ACC 		; Screw up
 16686 000028BA E87D15                  	call	FINDENTRY		; See if new name already exists
 16687 000028BD 738F                    	JNC	short BAD_ACC 		; Error if found
 16688 000028BF 803E[4A03]00            	CMP	byte [FAILERR],0
 16689 000028C4 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 16690 000028C6 A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 16691 000028C9 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 16692 000028CD 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 16693                                  
 16694                                  	;mov	al,[RENAMEDMA+32]
 16695 000028CF A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 16696 000028D2 A810                    	TEST	AL,attr_directory ; 10h
 16697 000028D4 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 16698                                  					; otherwise the . and .. entries get
 16699                                  					; wiped.
 16700 000028D6 A2[6B05]                	MOV	[ATTRIB],AL
 16701 000028D9 8C1E[A005]              	MOV	[THISSFT+2],DS
 16702                                  
 16703                                  ;hkn; AUXSTACK is in DOSDATA
 16704                                  	;mov	si,[RENAMEDMA+145h]
 16705 000028DD BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 16706 000028E0 8936[9E05]              	MOV	[THISSFT],SI
 16707                                  	;mov	word [SI+2],2
 16708 000028E4 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 16709 000028E9 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 16710 000028EB E8AE21                  	call	RENAME_MAKE		; This is in mknode
 16711 000028EE 7303                    	JNC	short GOT_DEST
 16712                                  BAD_ACCJ:
 16713 000028F0 E95BFF                  	JMP	BAD_ACC
 16714                                  
 16715                                  GOT_DEST:
 16716 000028F3 53                      	push	bx
 16717 000028F4 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 16718 000028F8 E88E4B                  	call	ShareEnd		; we need to remove it.
 16719 000028FB 5B                      	pop	bx
 16720                                  
 16721                                  ; A zero length entry with the correct new name has now been made at
 16722                                  ;   [CURBUF+2]:BX.
 16723                                  
 16724 000028FC C43E[E205]              	LES	DI,[CURBUF]
 16725                                  
 16726                                  	; MSDOS 6.0
 16727                                  	;test	byte [es:di+5],40h
 16728 00002900 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16729                                  					;LB. if already dirty		  ;AN000;
 16730 00002905 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 16731 00002907 E85B33                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16732                                  	;or	byte [es:di+5],40h
 16733 0000290A 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16734                                  yesdirty1:
 16735 0000290F 89DF                    	MOV	DI,BX
 16736                                  	;add	di,11
 16737 00002911 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 16738                                  
 16739                                  ;hkn; RENAMEDMA is in DOSDATA
 16740                                  	;mov	si,[RENAMEDMA+32]
 16741 00002914 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 16742                                  	;mov	cx,21
 16743 00002917 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 16744 0000291A F3A4                    	REP	MOVSB
 16745 0000291C E87D00                  	CALL	GET_SOURCE
 16746 0000291F 7277                    	JC	short RENAME_OVER
 16747 00002921 89DF                    	MOV	DI,BX
 16748 00002923 8E06[E405]              	MOV	ES,[CURBUF+2]
 16749 00002927 B0E5                    	MOV	AL,DIRFREE ; 0E5h
 16750 00002929 AA                      	STOSB				; "free" the source
 16751 0000292A EB13                    	JMP	SHORT DIRTY_IT
 16752                                  
 16753                                  SIMPLE_RENAME:
 16754 0000292C E86D00                  	CALL	GET_SOURCE		; Get the source back
 16755 0000292F 7267                    	JC	short RENAME_OVER
 16756 00002931 89DF                    	MOV	DI,BX
 16757 00002933 8E06[E405]              	MOV	ES,[CURBUF+2]
 16758                                  
 16759                                  ;hkn; NAME1 is in DOSDATA
 16760 00002937 BE[4B05]                	MOV	SI,NAME1		; New Name
 16761 0000293A B90B00                  	MOV	CX,11
 16762 0000293D F3A4                    	REP	MOVSB
 16763                                  DIRTY_IT:
 16764 0000293F 8B3E[E205]              	MOV	DI,[CURBUF]
 16765                                  
 16766                                  	; MSDOS 6.0
 16767 00002943 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16768                                  					;LB. if already dirty		  ;AN000;
 16769 00002948 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 16770 0000294A E81833                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16771                                  	
 16772 0000294D 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16773                                  
 16774                                  ;------------------------------------------------------------------------------
 16775                                  ; Check if the source is a directory of file. If directory rename it to the
 16776                                  ; the new name in the Fastopen cache buffer. If file name it has been
 16777                                  ; previously deleted.
 16778                                  ;------------------------------------------------------------------------------
 16779                                  
 16780                                  yesdirty2:
 16781                                  	; MSDOS 6.0
 16782 00002952 56                      	PUSH	SI
 16783 00002953 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 16784 00002957 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16785 0000295A F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 16786 0000295E 7406                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 16787 00002960 E8FEFD                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 16788 00002963 5E                      	POP	SI
 16789 00002964 EB01                    	JMP	SHORT NOT_DIRTY1
 16790                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 16791 00002966 5E                      	POP	SI
 16792                                  NOT_DIRTY1:				;;BN00X
 16793                                  NEXT_SOURCE:
 16794                                  ;hkn; RENAMEDMA is in DOSDATA
 16795 00002967 BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 16796                                  
 16797                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 16798                                  ; to enter it before going to RENAME_Next.
 16799                                  
 16800 0000296A E81BEA                  	call	ECritDisk
 16801 0000296D C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 16802                                  				  ;  to FF when we made the prev new file).
 16803 00002972 E88C05                  	call	RENAME_NEXT
 16804                                  
 16805                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 16806                                  ; we were before.
 16807                                  
 16808 00002975 7221                    	JC	short RENAME_OVER
 16809                                  
 16810                                  	;lea	si,[bx+26]
 16811 00002977 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 16812 0000297A E861FD                  	call	REN_DEL_Check
 16813 0000297D 7306                    	JNC	short REN_OK2
 16814 0000297F B82000                  	MOV	AX,error_sharing_violation ; 20h
 16815 00002982 E9CDFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16816                                  
 16817                                  ;------------------------------------------------------------------------------
 16818                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 16819                                  ; if directory, rename directory name in the Fastopen cache.
 16820                                  ;-----------------------------------------------------------------------------
 16821                                  
 16822                                  REN_OK2:
 16823                                  	; MSDOS 6.0
 16824                                  	;mov	al,[RERNAMEDMA+32]
 16825 00002985 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 16826                                  	;test	al,10h
 16827 00002988 A810                    	TEST	AL,attr_directory	;;BN00X directory
 16828 0000298A 7406                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 16829                                  	
 16830                                  	; MSDOS 3.3 & MSDOS 6.0
 16831 0000298C E8BDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 16832 0000298F E9FBFE                  	JMP	BUILDDEST		;;BN00X
 16833                                  
 16834                                  	; MSDOS 6.0
 16835                                  Ren_Directory:
 16836 00002992 E8CCFD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 16837 00002995 E9F5FE                  	JMP	BUILDDEST
 16838                                  
 16839                                  RENAME_OVER:
 16840 00002998 F8                      	CLC
 16841 00002999 E9B6FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16842                                  
 16843                                  ;----------------------------------------------------------------------------
 16844                                  ; Procedure: GET_SOURCE
 16845                                  ;
 16846                                  ; Inputs:
 16847                                  ;	RENAMEDMA has source info
 16848                                  ; Function:
 16849                                  ;	Re-find the source
 16850                                  ; Output:
 16851                                  ;	[CURBUF] set
 16852                                  ;	[CURBUF+2]:BX points to entry
 16853                                  ;	Carry set if error (currently user FAILed to I 24)
 16854                                  ; DS preserved, others destroyed
 16855                                  ;----------------------------------------------------------------------------
 16856                                  
 16857                                  GET_SOURCE:
 16858 0000299C 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 16859 000029A0 C42E[8A05]              	LES	BP,[THISDPB]
 16860 000029A4 E8DC15                  	call	SETDIRSRCH
 16861 000029A7 7214                    	JC	short gs_ret_label	; retc
 16862 000029A9 E8D918                  	call	STARTSRCH
 16863 000029AC A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 16864                                  	;call	GETENT
 16865                                  	; 18/12/2022
 16866 000029AF E9A315                  	jmp	GETENT
 16867                                  ;gs_ret_label:
 16868                                  	;retn
 16869                                  
 16870                                  ; MSDOS 6.0 
 16871                                  ;---------------------------------------------------------------------------
 16872                                  ;Procedure: NEW_RENAME
 16873                                  ;
 16874                                  ;Input: DS:SI -> raw string with ?
 16875                                  ;	ES:DI -> destination string
 16876                                  ;	DS:BX -> source string
 16877                                  ;Function: replace ? chars of raw string with chars in source string and
 16878                                  ;	   put in destination string
 16879                                  ;Output: ES:DI-> new string
 16880                                  ;---------------------------------------------------------------------------
 16881                                  
 16882                                  NEW_RENAME:
 16883                                  	; 17/05/2019 - Retro DOS v4.0
 16884                                  NEWNAM:
 16885                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 16886 000029B2 AC                      	LODSB
 16887 000029B3 3C3F                    	CMP	AL,"?" ; 3Fh
 16888 000029B5 7502                    	JNZ	short NOCHG
 16889 000029B7 8A07                    	MOV	AL,[BX] 		; Get replace char
 16890                                  NOCHG:
 16891 000029B9 AA                      	STOSB
 16892 000029BA 43                      	INC	BX			; Next replace char
 16893 000029BB E2F5                    	LOOP	NEWNAM
 16894                                  	; MSDOS 6.0
 16895                                  gs_ret_label:	; 18/12/2022
 16896 000029BD C3                      	retn
 16897                                  
 16898                                  ;============================================================================
 16899                                  ; FINFO.ASM, MSDOS 6.0, 1991
 16900                                  ;============================================================================
 16901                                  ; 08/08/2018 - Retro DOS v3.0
 16902                                  ; 17/05/2019 - Retro DOS v4.0
 16903                                  
 16904                                  ;**	Low level routines for returning file information and setting file
 16905                                  ;	attributes
 16906                                  ;
 16907                                  ;	GET_FILE_INFO
 16908                                  ;	SET_FILE_ATTRIBUTE
 16909                                  ;
 16910                                  ;	Modification history:
 16911                                  ;
 16912                                  ;	    Created: ARR 30 March 1983
 16913                                  ;
 16914                                  ;	M025: Return access_denied if attempting to set
 16915                                  ;	      attribute of root directory.
 16916                                  ;
 16917                                  
 16918                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 16919                                  
 16920                                  ;---------------------------------------------------------------------------
 16921                                  ; Procedure Name : GET_FILE_INFO
 16922                                  ;
 16923                                  ; Inputs:
 16924                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16925                                  ;		terminated)
 16926                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16927                                  ;		( = -1 if current dir not involved, else
 16928                                  ;		 Points to first char after last "/" of current dir part)
 16929                                  ;	[THISCDS] Points to CDS being used
 16930                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16931                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16932                                  ; Function:
 16933                                  ;	Get Information about a file
 16934                                  ; Returns:
 16935                                  ;	CARRY CLEAR
 16936                                  ;	    AX = Attribute of file
 16937                                  ;	    CX = Time stamp of file
 16938                                  ;	    DX = Date stamp of file
 16939                                  ;	    BX:DI = Size of file (32 bit)
 16940                                  ;	CARRY SET
 16941                                  ;	    AX is error code
 16942                                  ;		error_file_not_found
 16943                                  ;			Last element of path not found
 16944                                  ;		error_path_not_found
 16945                                  ;			Bad path (not in curr dir part if present)
 16946                                  ;		error_bad_curr_dir
 16947                                  ;			Bad path in current directory part of path
 16948                                  ; DS preserved, others destroyed
 16949                                  ;---------------------------------------------------------------------------
 16950                                  
 16951                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16952                                  
 16953                                  GET_FILE_INFO:
 16954                                  
 16955                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 16956                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 16957                                  
 16958 000029BE E802E9                  	call	TestNet
 16959 000029C1 7306                    	JNC	short LOCAL_INFO
 16960                                  
 16961                                  ;IF NOT Installed
 16962                                  ;	transfer NET_GET_FILE_INFO
 16963                                  ;ELSE
 16964                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 16965                                  ;	INT	2FH
 16966                                  ;	return
 16967                                  
 16968 000029C3 B80F11                  	mov     ax, 110Fh
 16969 000029C6 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 16970                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 16971                                  			; SDA CDS pointer -> current directory
 16972                                  			; Return: CF set on error, AX = file attributes
 16973 000029C8 C3                      	retn
 16974                                  ;ENDIF
 16975                                  
 16976                                  LOCAL_INFO:
 16977 000029C9 E8BCE9                  	call	ECritDisk
 16978 000029CC C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16979                                  	; MSDOS 3.3
 16980                                  	;call	GETPATH
 16981                                  	; MSDOS 6.0
 16982 000029D1 E8D800                  	call	GET_FAST_PATH
 16983                                  	; MSDOS 3.3 & MSDOS 6.0
 16984 000029D4 7312                    	JNC	short info_check_dev
 16985                                  NO_PATH:
 16986 000029D6 750B                    	JNZ	short bad_path1
 16987 000029D8 08C9                    	OR	CL,CL
 16988 000029DA 7407                    	JZ	short bad_path1
 16989                                  info_no_file:
 16990 000029DC B80200                  	MOV	AX,error_file_not_found
 16991                                  BadRet:
 16992 000029DF F9                      	STC
 16993                                  JustRet:
 16994                                  	;call	LCritDisk
 16995                                  	;retn
 16996                                  	; 18/12/2022
 16997 000029E0 E9C0E9                  	jmp	LCritDisk
 16998                                  
 16999                                  bad_path1:
 17000 000029E3 B80300                  	MOV	AX,error_path_not_found
 17001 000029E6 EBF7                    	jmp	short BadRet
 17002                                  
 17003                                  info_check_dev:
 17004 000029E8 08E4                    	OR	AH,AH
 17005 000029EA 78F0                    	JS	short info_no_file	; device
 17006                                  
 17007                                  	; MSDOS 6.0
 17008                                  ;SR;
 17009                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17010                                  ;for a root dir
 17011                                  
 17012 000029EC 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17013 000029F1 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17014                                  
 17015 000029F3 30E4                    	xor	ah,ah
 17016 000029F5 B010                    	mov	al,attr_directory ; 10h
 17017                                  	;clc
 17018                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17019                                  	; (DOSCODE:683Eh)
 17020                                  	; 16/12/2022
 17021                                  	;clc
 17022 000029F7 EBE7                    	jmp	short JustRet
 17023                                  
 17024                                  not_root:
 17025                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17026 000029F9 1E                      	PUSH	DS
 17027 000029FA 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17028 000029FE 89DE                    	MOV	SI,BX
 17029 00002A00 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17030 00002A02 89DF                    	MOV	DI,BX
 17031                                  	;mov	cx,[si+16h]
 17032 00002A04 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17033                                  	;mov	dx,[si+18h]
 17034 00002A07 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17035 00002A0A 30E4                    	XOR	AH,AH
 17036                                  	;mov	al,[si+0Bh]
 17037 00002A0C 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17038                                  	;test	al,10h
 17039 00002A0F A810                    	TEST	AL,attr_directory
 17040 00002A11 7506                    	JNZ	short NO_SIZE
 17041                                  	;mov	di,[si+1Ch]
 17042 00002A13 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17043                                  	;mov	bx,[si+1Eh]
 17044 00002A16 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17045                                  NO_SIZE:
 17046 00002A19 1F                      	POP	DS
 17047                                  	;CLC
 17048                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17049                                  	; (DOSCODE:6864h)
 17050                                  	; 16/12/2022
 17051                                  	;clc
 17052 00002A1A EBC4                    	jmp	short JustRet
 17053                                  
 17054                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17055                                  ;-------------------------------------------------------------------------------
 17056                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17057                                  ; Inputs:
 17058                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17059                                  ;		terminated)
 17060                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17061                                  ;		( = -1 if current dir not involved, else
 17062                                  ;		 Points to first char after last "/" of current dir part)
 17063                                  ;	[THISCDS] Points to CDS being used
 17064                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17065                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17066                                  ;	AX is new attributes to give to file
 17067                                  ; Function:
 17068                                  ;	Set File Attributes
 17069                                  ; Returns:
 17070                                  ;	CARRY CLEAR
 17071                                  ;	    No error
 17072                                  ;	CARRY SET
 17073                                  ;	    AX is error code
 17074                                  ;		error_file_not_found
 17075                                  ;			Last element of path not found
 17076                                  ;		error_path_not_found
 17077                                  ;			Bad path (not in curr dir part if present)
 17078                                  ;		error_bad_curr_dir
 17079                                  ;			Bad path in current directory part of path
 17080                                  ;		error_access_denied
 17081                                  ;			Attempt to set an attribute which cannot be set
 17082                                  ;			(attr_directory, attr_volume_ID)
 17083                                  ;		error_sharing_violation
 17084                                  ;			Sharing mode of file did not allow the change
 17085                                  ;			(this request requires exclusive write/read access)
 17086                                  ;			(INT 24H generated)
 17087                                  ; DS preserved, others destroyed
 17088                                  ;----------------------------------------------------------------------------
 17089                                  
 17090                                  SET_FILE_ATTRIBUTE:
 17091                                  
 17092                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17093                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17094                                  
 17095 00002A1C A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17096 00002A1F 7414                    	JZ	short set_look
 17097                                  _BAD_ACC:
 17098 00002A21 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17099 00002A26 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17100 00002A2B C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17101 00002A30 B80500                  	MOV	AX,error_access_denied ; 5
 17102 00002A33 F9                      	STC
 17103 00002A34 C3                      	retn
 17104                                  
 17105                                  set_look:
 17106 00002A35 E88BE8                  	call	TestNet
 17107 00002A38 7308                    	JNC	short LOCAL_SET
 17108                                  
 17109                                  ;IF NOT Installed
 17110                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17111                                  ;ELSE
 17112 00002A3A 50                      	PUSH	AX
 17113                                  	
 17114                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17115                                  	;INT	2FH
 17116                                  
 17117 00002A3B B80E11                  	mov     ax, 110Eh
 17118 00002A3E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17119                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17120                                  			; SDA CDS pointer -> current directory
 17121                                  			; STACK: WORD new file attributes
 17122                                  			; Return: CF set on error
 17123                                  
 17124 00002A40 5B                      	POP	BX			; clean stack
 17125 00002A41 C3                      	retn
 17126                                  ;ENDIF
 17127                                  
 17128                                  LOCAL_SET:
 17129 00002A42 E843E9                  	call	ECritDisk
 17130 00002A45 50                      	PUSH	AX			; Save new attributes
 17131 00002A46 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17132 00002A4B E89515                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17133 00002A4E 7303                    	JNC	short set_check_device
 17134 00002A50 5B                      	POP	BX			; Clean stack (don't zap AX)
 17135 00002A51 EB83                    	JMP	short NO_PATH
 17136                                  
 17137                                  set_check_device:
 17138 00002A53 08E4                    	OR	AH,AH
 17139 00002A55 7906                    	JNS	short set_check_share
 17140 00002A57 58                      	POP	AX
 17141 00002A58 E848E9                  	call	LCritDisk
 17142 00002A5B EBC4                    	JMP	short _BAD_ACC 		; device
 17143                                  
 17144                                  set_check_share:
 17145 00002A5D 58                      	POP	AX			; Get new attributes
 17146                                  
 17147                                  	; MSDOS 6.0
 17148 00002A5E 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17149 00002A63 740A                    	je	short cannot_set_root	; M025: Y: return error
 17150                                  
 17151                                  	; MSDOS 3.3 & MSDOS 6.0
 17152 00002A65 E876FC                  	call	REN_DEL_Check
 17153 00002A68 730B                    	JNC	short set_do
 17154 00002A6A B82000                  	MOV	AX,error_sharing_violation ; 32
 17155 00002A6D EB3A                    	jmp	short OK_BYE
 17156                                  
 17157                                  	; MSDOS 6.0
 17158                                  cannot_set_root:			; M025:
 17159 00002A6F B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17160 00002A72 F9                      	stc				; M025: to set attr. of root
 17161 00002A73 EB34                    	jmp	short OK_BYE		; M025:
 17162                                  
 17163                                  set_do:
 17164                                  	; MSDOS 3.3 & MSDOS 6.0
 17165 00002A75 C43E[E205]              	LES	DI,[CURBUF]
 17166 00002A79 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17167 00002A7E 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17168                                  
 17169                                  	; MSDOS 6.0
 17170 00002A82 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17171                                  					;LB. if already dirty		  ;AN000;
 17172 00002A87 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17173 00002A89 E8D931                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17174                                  	
 17175 00002A8C 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17176                                  yesdirty3:
 17177 00002A91 A0[7605]                	MOV	AL,[THISDRV]
 17178                                  ;;;; 10/1/86 F.C update fastopen cache
 17179 00002A94 52                      	PUSH	DX
 17180 00002A95 57                      	PUSH	DI
 17181 00002A96 B400                    	MOV	AH,0		  ; dir entry update
 17182 00002A98 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17183 00002A9A 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17184 00002A9C E8DCFC                  	call	FastOpen_Update
 17185 00002A9F 5F                      	POP	DI
 17186 00002AA0 5A                      	POP	DX
 17187                                  ;;;; 9/11/86 F.C update fastopen cache
 17188 00002AA1 E8B930                  	call	FLUSHBUF
 17189 00002AA4 7303                    	JNC	short OK_BYE
 17190 00002AA6 B80200                  	MOV	AX,error_file_not_found
 17191                                  OK_BYE:
 17192                                  	;call	LCritDisk
 17193                                  	;retn
 17194                                  	; 16/12/2022
 17195 00002AA9 E9F7E8                  	jmp	LCritDisk
 17196                                  
 17197                                  	; 17/05/2019 - Retro DOS v4.0
 17198                                  
 17199                                  	; MSDOS 6.0
 17200                                  GET_FAST_PATH:
 17201                                  ;hkn; use SS override for FastOpenFlg
 17202 00002AAC 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17203                                  					;FO. trigger fastopen	;AN000;
 17204 00002AB2 E82E15                  	call	GETPATH
 17205 00002AB5 9C                      	PUSHF			 	;FO.			;AN000;
 17206 00002AB6 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17207                                  					;FO. clear all fastopen flags ;AN000;
 17208 00002ABC 9D                      	POPF				;FO.			;AN000;
 17209 00002ABD C3                      	retn
 17210                                  
 17211                                  ;============================================================================
 17212                                  ; DUP.ASM, MSDOS 6.0, 1991
 17213                                  ;============================================================================
 17214                                  ; 08/08/2018 - Retro DOS v3.0
 17215                                  ; 17/05/2019 - Retro DOS v4.0
 17216                                  
 17217                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17218                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17219                                  ;
 17220                                  ;	DOS_DUP
 17221                                  ;
 17222                                  ;	Modification history:
 17223                                  ;
 17224                                  ;	  Created: ARR 30 March 1983
 17225                                  
 17226                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17227                                  ;---------------------------------------------------------------------------
 17228                                  ; Procedure Name : DOS_DUP
 17229                                  ;
 17230                                  ; Inputs:
 17231                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17232                                  ;		(a non net SFT is OK, in this case the ref
 17233                                  ;		 count is simply incremented)
 17234                                  ; Function:
 17235                                  ;	Signal to the devices that a logical open is occurring
 17236                                  ; Returns:
 17237                                  ;	ES:DI point to SFT
 17238                                  ;    Carry clear
 17239                                  ;	SFT ref_count is incremented
 17240                                  ; Registers modified: None.
 17241                                  ; NOTE:
 17242                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17243                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17244                                  ;	that time.
 17245                                  ;---------------------------------------------------------------------------
 17246                                  
 17247                                  DOS_DUP:
 17248                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17249                                  
 17250                                  	; MSDOS 6.0
 17251 00002ABE 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17252 00002AC3 26C43E[9E05]            	les	di,[es:THISSFT]
 17253                                  
 17254                                  	;Entry	Dos_Dup_Direct
 17255                                  DOS_Dup_Direct:
 17256 00002AC8 E811E8                  	call	IsSFTNet
 17257 00002ACB 7503                    	JNZ	short DO_INC
 17258 00002ACD E8F11B                  	call	DEV_OPEN_SFT
 17259                                  DO_INC:
 17260                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17261 00002AD0 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17262                                  					;   we're in big trouble anyway)
 17263 00002AD3 C3                      	retn
 17264                                  
 17265                                  ;============================================================================
 17266                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17267                                  ;============================================================================
 17268                                  ; 08/08/2018 - Retro DOS v3.0
 17269                                  ; 18/05/2019 - Retro DOS v4.0
 17270                                  
 17271                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17272                                  ;NAME	DOS_CREATE
 17273                                  ;----------------------------------------------------------------------------
 17274                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17275                                  ;
 17276                                  ;	DOS_CREATE
 17277                                  ;	DOS_CREATE_NEW
 17278                                  ;	SET_MKND_ERR
 17279                                  ;	SET_Media_ID
 17280                                  ;	SET_EXT_Mode
 17281                                  ;
 17282                                  ;	Revision history:
 17283                                  ;
 17284                                  ;	    A000 version 4.00	  Jan. 1988
 17285                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17286                                  
 17287                                  ;Installed = TRUE
 17288                                  
 17289                                  ;	i_need	THISSFT,DWORD
 17290                                  ;	i_need	THISCDS,DWORD
 17291                                  ;	I_need	EXTERR,WORD
 17292                                  ;	I_Need	ExtErr_locus,BYTE
 17293                                  ;	I_need	JShare,DWORD
 17294                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17295                                  ;	I_need	SATTRIB,BYTE
 17296                                  ;	I_need	CALLVIDM,DWORD
 17297                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17298                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17299                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17300                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17301                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17302                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17303                                  
 17304                                  ;***	DOS_CREATE - Create a File
 17305                                  ;----------------------------------------------------------------------------
 17306                                  ;	DOS_Create is called to create the specified file, truncating
 17307                                  ;	the old one if it exists.
 17308                                  ;
 17309                                  ;	ENTRY	AX is Attribute to create
 17310                                  ;		(ds) = DOSDATA
 17311                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17312                                  ;			terminated)
 17313                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17314                                  ;			( = -1 if current dir not involved, else
 17315                                  ;			 Points to first char after last "/" of current dir part)
 17316                                  ;		[THISCDS] Points to CDS being used
 17317                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17318                                  ;		[THISSFT] Points to SFT to fill in if file created
 17319                                  ;			(sf_mode field set so that FCB may be detected)
 17320                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17321                                  ;
 17322                                  ;	EXIT	sf_ref_count is NOT altered
 17323                                  ;		CARRY CLEAR
 17324                                  ;		    THISSFT filled in.
 17325                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17326                                  ;		CARRY SET
 17327                                  ;		    AX is error code
 17328                                  ;			error_path_not_found
 17329                                  ;				Bad path (not in curr dir part if present)
 17330                                  ;			error_bad_curr_dir
 17331                                  ;				Bad path in current directory part of path
 17332                                  ;			error_access_denied
 17333                                  ;				Attempt to re-create read only file , or
 17334                                  ;				create a second volume id or create a dir
 17335                                  ;			error_sharing_violation
 17336                                  ;				The sharing mode was correct but not allowed
 17337                                  ;				generates an INT 24
 17338                                  ;	USES	all but DS
 17339                                  ;----------------------------------------------------------------------------
 17340                                  
 17341                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17342                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17343                                  
 17344                                  DOS_CREATE:
 17345                                  	; 18/05/2019 - Retro DOS v4.0
 17346                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17347                                  
 17348                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17349                                  ;hkn; this point.
 17350                                  
 17351 00002AD4 30E4                    	XOR	AH,AH		; Truncate is OK
 17352                                  
 17353                                  ;	Enter here from Dos_Create_New
 17354                                  ;
 17355                                  ;	(ah) = 0 iff truncate OK
 17356                                  
 17357                                  Create_inter:
 17358 00002AD6 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17359                                  				; Mask out any meaningless bits
 17360 00002AD8 7511                    	JNZ	short AttErr
 17361 00002ADA A808                    	TEST	AL,attr_volume_id
 17362 00002ADC 7407                    	JZ	short NoReset
 17363                                  	
 17364                                  	; MSDOS 6.0
 17365                                  	; 16/12/2022
 17366 00002ADE 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17367                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17368                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17369                                  	
 17370 00002AE3 B008                    	MOV	AL,attr_volume_id ; 8
 17371                                  NoReset:
 17372 00002AE5 0C20                    	OR	AL,attr_archive ; File changed  ; 20 h
 17373 00002AE7 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17374 00002AE9 740A                    	JZ	short ATT_OK
 17375                                  AttErr:
 17376 00002AEB B80500                  	MOV	AX,5		; Attribute problem
 17377 00002AEE C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17378 00002AF3 EB66                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17379                                  				   ;	attr_device to be set.
 17380                                  ATT_OK:
 17381 00002AF5 C43E[9E05]              	LES	DI,[THISSFT]
 17382 00002AF9 06                      	PUSH	ES
 17383 00002AFA C436[A205]              	LES	SI,[THISCDS]
 17384 00002AFE 83FEFF                  	CMP	SI,-1
 17385 00002B01 751D                    	JNE	short TEST_RE_NET
 17386                                  
 17387                                  ;	No CDS, it must be redirected.
 17388                                  
 17389 00002B03 07                      	POP	ES
 17390                                  
 17391                                  	; MSDOS 6.0
 17392                                  ;Extended open hooks
 17393                                  	;test	byte [EXTOPEN_ON],1
 17394 00002B04 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17395 00002B09 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17396                                  IFS_extopen:				    ;AN000;EO.
 17397 00002B0B 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17398                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17399 00002B0C B82E11                  	mov	ax,112Eh
 17400 00002B0F CD2F                    	INT	2FH			    ;AN000;EO.
 17401 00002B11 5B                      	POP	BX			    ;AN000;EO. trash bx
 17402 00002B12 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17403 00002B17 C3                      	retn				    ;AN000;EO.
 17404                                  NOEXTOP:				    ;AN000;
 17405                                  ;Extended open hooks
 17406                                  
 17407                                  ;IF NOT Installed
 17408                                  ;	transfer NET_SEQ_CREATE
 17409                                  ;ELSE
 17410 00002B18 50                      	PUSH	AX
 17411                                  
 17412                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17413                                  	;INT	2FH
 17414                                  
 17415 00002B19 B81811                  	mov     ax,1118h
 17416 00002B1C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17417                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17418                                  			; SDA first filename pointer -> fully-qualified name of file
 17419                                  			; STACK: WORD file creation mode???
 17420                                  
 17421 00002B1E 5B                      	POP	BX			; BX is trashed anyway
 17422 00002B1F C3                      	retn
 17423                                  ;ENDIF
 17424                                  
 17425                                  ;	We have a CDS. See if it's network
 17426                                  
 17427                                  TEST_RE_NET:
 17428                                  	;;test	word [es:si+43h],8000h
 17429                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17430                                  	; 07/12/2022
 17431                                  	;test	byte [es:si+44h],80h
 17432                                  	; 17/12/2022
 17433 00002B20 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17434 00002B25 07                      	POP	ES
 17435 00002B26 7419                    	JZ	short LOCAL_CREATE
 17436                                  
 17437                                  	; MSDOS 6.0
 17438 00002B28 E8BF00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17439 00002B2B 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17440                                  	;;or	word [es:di+2],2
 17441                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17442                                  	; 17/12/2022
 17443 00002B2D 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17444                                  
 17445                                  ;Extended open hooks
 17446                                  dochk:
 17447 00002B32 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17448 00002B37 75D2                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17449                                  ;Extended open hooks
 17450                                  
 17451                                  ;IF NOT Installed
 17452                                  ;	transfer NET_CREATE
 17453                                  ;ELSE
 17454 00002B39 50                      	PUSH	AX
 17455                                  	
 17456                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17457                                  	;INT	2FH
 17458                                  	
 17459 00002B3A B81711                  	mov     ax,1117h
 17460 00002B3D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17461                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17462                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17463                                  			; SDA CDS pointer -> current directory
 17464                                  			; Return: CF set on error
 17465                                  
 17466 00002B3F 5B                      	POP	BX			; BX is trashed anyway
 17467                                  ;nomore:
 17468 00002B40 C3                      	retn
 17469                                  ;ENDIF
 17470                                  
 17471                                  ;**	It's a local create. We have a local CDS for it.
 17472                                  
 17473                                  LOCAL_CREATE:
 17474                                  	; MSDOS 6.0
 17475 00002B41 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17476 00002B44 7205                    	JC	short setdone	;AN000;EO.
 17477                                  	
 17478                                  	; MSDOS 3.3 & MSDOS 6.0
 17479                                  	; 17/12/2022
 17480                                  	;;or	word [es:di+2],2
 17481                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17482                                  	;or	byte [es:di+2],2
 17483 00002B46 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17484                                  setdone:
 17485 00002B4B E83AE8                  	call	ECritDisk
 17486 00002B4E E8251F                  	call	MakeNode
 17487 00002B51 7317                    	JNC	short Create_ok
 17488 00002B53 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17489 00002B58 E848E8                  	call	LCritDisk
 17490                                  
 17491                                  	;entry	SET_MKND_ERR
 17492                                  SET_MKND_ERR:
 17493                                  
 17494                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17495                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17496                                  
 17497                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17498 00002B5B BB[622B]                	MOV     BX,CRTERRTAB
 17499                                  	;XLAT  ; MSDOS 3.3
 17500                                  	; 18/05/2019 - Retro DOS v4.0
 17501 00002B5E 2E                      	CS
 17502 00002B5F D7                      	XLAT
 17503                                  CreatBadRet:
 17504 00002B60 F9                      	STC
 17505 00002B61 C3                      	retn
 17506                                  
 17507                                  ; 13/05/2019 - Retro DOS v4.0
 17508                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17509                                  ; ---------------------------------------------------------------------------
 17510                                  
 17511                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17512                                  
 17513                                  ; 17/07/2018 - Retro DOS v3.0
 17514                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17515                                  
 17516                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17517                                  ;	db	0,5,52h,50h,3,5,20h
 17518                                  
 17519                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17520                                  ;	db	0,5,52h,50h,3,5,20h,2
 17521                                  
 17522                                  ; 08/08/2018
 17523                                  
 17524                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17525 00002B62 00                      	DB	0			; none
 17526 00002B63 05                      	DB	error_access_denied	; MakeNode error 1
 17527 00002B64 52                      	DB	error_cannot_make	; MakeNode error 2
 17528 00002B65 50                      	DB	error_file_exists	; MakeNode error 3
 17529 00002B66 03                      	DB	error_path_not_found	; MakeNode error 4
 17530 00002B67 05                      	DB	error_access_denied	; MakeNode error 5
 17531 00002B68 20                      	DB	error_sharing_violation ; MakeNode error 6
 17532                                  	; MSDOS 6.0
 17533 00002B69 02                      	DB	error_file_not_found	; MakeNode error 7
 17534                                  
 17535                                  ; ---------------------------------------------------------------------------
 17536                                  
 17537                                  ; We have just created a new file. This results in the truncation of old
 17538                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17539                                  ; file to the current size.
 17540                                  
 17541                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17542                                  ; drive number to force a Build BPB after Media Check.
 17543                                  
 17544                                  ;;; FASTOPEN 8/29/86
 17545                                  Create_ok:
 17546 00002B6A E8DFFB                  	call	FastOpen_Delete
 17547                                  ;;; FASTOPEN 8/29/86
 17548 00002B6D A0[6D05]                	mov	al,[SATTRIB]
 17549 00002B70 A808                    	test	al,attr_volume_id
 17550 00002B72 741C                    	jz	short NoVolLabel
 17551 00002B74 C43E[A205]              	LES	DI,[THISCDS]
 17552                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 17553 00002B78 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 17554 00002B7B 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 17555 00002B7E 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 17556                                  	
 17557                                  	; 18/05/2019 - Retro DOS v4.0
 17558                                  
 17559                                  	; MSDOS 6.0
 17560 00002B82 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 17561 00002B84 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 17562                                  	
 17563 00002B87 E8FEE7                  	call	ECritDisk
 17564 00002B8A E8622C                  	call	FATREAD_CDS		; force a media check
 17565 00002B8D E813E8                  	call	LCritDisk
 17566                                  
 17567                                  NoVolLabel:
 17568 00002B90 B80200                  	MOV	ax,2
 17569 00002B93 C43E[9E05]              	LES	DI,[THISSFT]
 17570                                  ;if installed
 17571                                  	;call	JShare + 14 * 4
 17572 00002B97 FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 17573                                  ;else
 17574                                  ;	Call	ShSU
 17575                                  ;endif
 17576 00002B9B E805E8                  	call	LCritDisk
 17577 00002B9E E94901                  	jmp	SET_SFT_MODE
 17578                                  
 17579                                  ;---------------------------------------------------------------------------
 17580                                  ; Procedure Name : Dos_Create_New
 17581                                  ;
 17582                                  ; Inputs:
 17583                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17584                                  ;		terminated)
 17585                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17586                                  ;		( = -1 if current dir not involved, else
 17587                                  ;		 Points to first char after last "/" of current dir part)
 17588                                  ;	[THISCDS] Points to CDS being used
 17589                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17590                                  ;	[THISSFT] Points to SFT to fill in if file created
 17591                                  ;		(sf_mode field set so that FCB may be detected)
 17592                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17593                                  ;	AX is Attribute to create
 17594                                  ; Function:
 17595                                  ;	Try to create the specified file truncating an old one that exists
 17596                                  ; Outputs:
 17597                                  ;	sf_ref_count is NOT altered
 17598                                  ;	CARRY CLEAR
 17599                                  ;	    THISSFT filled in.
 17600                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 17601                                  ;	CARRY SET
 17602                                  ;	    AX is error code
 17603                                  ;		error_path_not_found
 17604                                  ;			Bad path (not in curr dir part if present)
 17605                                  ;		error_bad_curr_dir
 17606                                  ;			Bad path in current directory part of path
 17607                                  ;		error_access_denied
 17608                                  ;			Create a second volume id or create a dir
 17609                                  ;		error_file_exists
 17610                                  ;			Already a file by this name
 17611                                  ; DS preserved, others destroyed
 17612                                  ;---------------------------------------------------------------------------
 17613                                  
 17614                                  DOS_Create_New:
 17615 00002BA1 B401                    	MOV	AH,1		; Truncate is NOT OK
 17616 00002BA3 E930FF                  	JMP	Create_inter
 17617                                  
 17618                                  ; MSDOS 6.0
 17619                                  ;---------------------------------------------------------------------------
 17620                                  ; Procedure Name : Set_Media_ID
 17621                                  ;
 17622                                  ; Inputs:
 17623                                  ;	NAME1= Volume ID
 17624                                  ;	BH= 0, delete volume id
 17625                                  ;	    1, set new volume id
 17626                                  ;	DS= DOSGROUP
 17627                                  ; Function:
 17628                                  ;	Set Volume ID to DOS 4.00 Boot record.
 17629                                  ; Outputs:
 17630                                  ;	CARRY CLEAR
 17631                                  ;	    volume id set
 17632                                  ;	CARRY SET
 17633                                  ;	    AX is error code
 17634                                  ;---------------------------------------------------------------------------
 17635                                  
 17636                                  	; 18/05/2019 - Retro DOS v4.0
 17637                                  Set_Media_ID:
 17638 00002BA6 50                      	PUSH	AX		;AN000;;>32mb
 17639 00002BA7 06                      	PUSH	ES		;AN000;;>32mb
 17640 00002BA8 57                      	PUSH	DI		;AN000;;>32mb
 17641                                  
 17642 00002BA9 FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 17643 00002BAB 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 17644 00002BAD B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 17645 00002BAF B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 17646                                  
 17647                                  ;hkn; PACKET_TEMP is in DOSDATA
 17648 00002BB2 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 17649                                  
 17650 00002BB5 53                      	PUSH	BX		;AN000;;>32mb
 17651 00002BB6 52                      	PUSH	DX		;AN000;;>32mb
 17652 00002BB7 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17653                                  
 17654                                  	;invoke	$IOCTL		;AN000;;>32mb
 17655 00002BB9 E83EF7                  	call	_$IOCTL	
 17656                                  
 17657 00002BBC 5A                      	POP	DX		;AN000;;>32mb
 17658 00002BBD 5B                      	POP	BX		;AN000;;>32mb
 17659 00002BBE 7224                    	JC	short geterr	;AN000;;>32mb
 17660                                  
 17661 00002BC0 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 17662 00002BC2 7405                    	JZ	short NoName	;AN000;>32mb yes
 17663                                  
 17664                                  ;hkn; NAME1 is in DOSDATA
 17665 00002BC4 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 17666                                  
 17667 00002BC7 EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 17668                                  NoName: 			;AN000;
 17669                                  
 17670                                  ;hkn; NO_NAME_ID is in DOSDATA
 17671 00002BC9 BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 17672                                  
 17673                                  doset:				;AN000;
 17674 00002BCC 89D7                    	MOV	DI,DX		;AN000;;>32mb
 17675                                  	;add	di,6
 17676 00002BCE 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 17677                                  
 17678                                  ;hkn; ES & DS must point to SS
 17679                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 17680 00002BD1 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 17681                                  
 17682 00002BD2 1F                      	POP	DS		;AN000;;>32mb
 17683                                  
 17684                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 17685 00002BD3 16                      	PUSH	SS		;AN000;;>32mb
 17686                                  
 17687 00002BD4 07                      	POP	ES		;AN000;;>32mb
 17688 00002BD5 B90B00                  	MOV	CX,11		;AN000;;>32mb
 17689 00002BD8 F3A4                    	REP	MOVSB		;AN000;;>32mb
 17690 00002BDA B94608                  	MOV	CX,0846H	;AN001;;>32mb
 17691 00002BDD B00D                    	MOV	AL,0DH		;AN000;;>32mb
 17692 00002BDF 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17693                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 17694 00002BE1 E816F7                  	call	_$IOCTL	
 17695                                  geterr: 			;AN000;
 17696                                  ;hkn;	PUSH	CS		;AN000;>32mb
 17697 00002BE4 16                      	PUSH	SS		;AN000;>32mb
 17698                                  
 17699 00002BE5 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 17700                                  
 17701 00002BE6 5F                      	POP	DI		;AN000;;>32mb
 17702 00002BE7 07                      	POP	ES		;AN000;;>32mb
 17703 00002BE8 58                      	POP	AX		;AN000;;>32mb
 17704 00002BE9 C3                      	retn			;AN000;>32mb
 17705                                  
 17706                                  ; MSDOS 6.0
 17707                                  ;---------------------------------------------------------------------------
 17708                                  ; Procedure Name : Set_EXT_mode
 17709                                  ;
 17710                                  ; Inputs:
 17711                                  ;	[EXTOPEN_ON]= flag for extended open
 17712                                  ;	SAVE_BX= mode specified in Extended Open
 17713                                  ; Function:
 17714                                  ;	Set mode in ThisSFT
 17715                                  ; Outputs:
 17716                                  ;	carry set,mode is set if from Extended Open
 17717                                  ;	carry clear, mode not set yet
 17718                                  ;---------------------------------------------------------------------------
 17719                                  
 17720                                  ; 13/05/2019 - Retro DOS v4.0
 17721                                  
 17722                                  Set_EXT_mode:
 17723                                  
 17724                                  ;hkn; SS override
 17725 00002BEA 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17726 00002BF0 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 17727 00002BF2 50                      	PUSH	AX			    ;AN000;EO.
 17728                                  
 17729                                  ;hkn; SS override
 17730 00002BF3 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 17731                                  	;or	[es:di+2],ax
 17732 00002BF7 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 17733 00002BFB 58                      	POP	AX			    ;AN000;EO.
 17734 00002BFC F9                      	STC				    ;AN000;EO.
 17735                                  NOTEX:					    ;AN000;
 17736 00002BFD C3                      	retn				    ;AN000;EO.
 17737                                  
 17738                                  ;============================================================================
 17739                                  ; OPEN.ASM, MSDOS 6.0, 1991
 17740                                  ;============================================================================
 17741                                  ; 08/08/2018 - Retro DOS v3.0
 17742                                  ; 18/05/2019 - Retro DOS v4.0
 17743                                  
 17744                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 17745                                  ;	NAME	DOS_OPEN
 17746                                  
 17747                                  ;**	OPEN.ASM - File Open
 17748                                  ;----------------------------------------------------------------------------
 17749                                  ;	Low level routines for openning a file from a file spec.
 17750                                  ;	Also misc routines for sharing errors
 17751                                  ;
 17752                                  ;	DOS_Open
 17753                                  ;	Check_Access_AX
 17754                                  ;	SHARE_ERROR
 17755                                  ;	SET_SFT_MODE
 17756                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 17757                                  ;
 17758                                  ;	Revision history:
 17759                                  ;
 17760                                  ;	    Created: ARR 30 March 1983
 17761                                  ;	    A000	version 4.00   Jan. 1988
 17762                                  ;
 17763                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 17764                                  ; 	       remote extended opens and not save_cx.
 17765                                  ;
 17766                                  ;	M035 - if open made from exec then we must set the appropriate bits
 17767                                  ;	       on the stack before calling off to the redir.
 17768                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 17769                                  ;	       to handle open from exec. In this case set the appropriate bit
 17770                                  ;	       else do not.
 17771                                  ;----------------------------------------------------------------------------	
 17772                                  
 17773                                  ;Installed = TRUE
 17774                                  
 17775                                  ;	i_need	NoSetDir,BYTE
 17776                                  ;	i_need	THISSFT,DWORD
 17777                                  ;	i_need	THISCDS,DWORD
 17778                                  ;	i_need	CURBUF,DWORD
 17779                                  ;	i_need	CurrentPDB,WORD
 17780                                  ;	i_need	CURR_DIR_END,WORD
 17781                                  ;	I_need	RetryCount,WORD
 17782                                  ;	I_need	Open_Access,BYTE
 17783                                  ;	I_need	fSharing,BYTE
 17784                                  ;	i_need	JShare,DWORD
 17785                                  ;	I_need	FastOpenFlg,byte
 17786                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 17787                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 17788                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 17789                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 17790                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 17791                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 17792                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 17793                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 17794                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 17795                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 17796                                  ;	I_need	SAVE_BX,WORD			  ;M034
 17797                                  ;
 17798                                  ;	I_need	DOS_FLAG,BYTE
 17799                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 17800                                  
 17801                                  ;Break	<DOS_Open - internal file access>
 17802                                  ;---------------------------------------------------------------------------
 17803                                  ; Procedure Name : DOS_Open
 17804                                  ;
 17805                                  ; Inputs:
 17806                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17807                                  ;		terminated)
 17808                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17809                                  ;		( = -1 if current dir not involved, else
 17810                                  ;		 Points to first char after last "/" of current dir part)
 17811                                  ;	[THISCDS] Points to CDS being used
 17812                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17813                                  ;	[THISSFT] Points to SFT to fill in if file found
 17814                                  ;		(sf_mode field set so that FCB may be detected)
 17815                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17816                                  ;	AX is Access and Sharing mode
 17817                                  ;	  High NIBBLE of AL (Sharing Mode)
 17818                                  ;		sharing_compat	   file is opened in compatibility mode
 17819                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 17820                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 17821                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 17822                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 17823                                  ;	  Low NIBBLE of AL (Access Mode)
 17824                                  ;		open_for_read	file is opened for reading
 17825                                  ;		open_for_write	file is opened for writing
 17826                                  ;		open_for_both	file is opened for both reading and writing.
 17827                                  ;
 17828                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 17829                                  ;		(not checked)
 17830                                  ; Function:
 17831                                  ;	Try to open the specified file
 17832                                  ; Outputs:
 17833                                  ;	sf_ref_count is NOT altered
 17834                                  ;	CARRY CLEAR
 17835                                  ;	    THISSFT filled in.
 17836                                  ;	CARRY SET
 17837                                  ;	    AX is error code
 17838                                  ;		error_file_not_found
 17839                                  ;			Last element of path not found
 17840                                  ;		error_path_not_found
 17841                                  ;			Bad path (not in curr dir part if present)
 17842                                  ;		error_bad_curr_dir
 17843                                  ;			Bad path in current directory part of path
 17844                                  ;		error_invalid_access
 17845                                  ;			Bad sharing mode or bad access mode or bad combination
 17846                                  ;		error_access_denied
 17847                                  ;			Attempt to open read only file for writting, or
 17848                                  ;			open a directory
 17849                                  ;		error_sharing_violation
 17850                                  ;			The sharing mode was correct but not allowed
 17851                                  ;			generates an INT 24 on compatibility mode SFTs
 17852                                  ; DS preserved, others destroyed
 17853                                  ;----------------------------------------------------------------------------
 17854                                  
 17855                                  ; 18/05/2019 - Retro DOS v4.0
 17856                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 17857                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17858                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 17859                                  
 17860                                  DOS_OPEN:
 17861                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 17862                                  
 17863 00002BFE C606[4C03]00            	MOV	byte [NoSetDir],0
 17864 00002C03 E83601                  	CALL	Check_Access_AX
 17865 00002C06 722B                    	JC	short do_ret_label	    ; retc
 17866                                  
 17867 00002C08 C43E[9E05]              	LES	DI,[THISSFT]
 17868 00002C0C 30E4                    	XOR	AH,AH
 17869                                  
 17870                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 17871                                  
 17872 00002C0E 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 17873 00002C12 06                      	PUSH	ES
 17874 00002C13 C436[A205]              	LES	SI,[THISCDS]
 17875                                  	; 18/08/2018
 17876 00002C17 83FEFF                  	CMP	SI,-1
 17877 00002C1A 7530                    	JNZ	short TEST_RE_NET1
 17878 00002C1C 07                      	POP	ES
 17879                                  
 17880                                  	; MSDOS 6.0
 17881                                  ;Extended open hooks
 17882 00002C1D F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 17883 00002C22 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 17884                                  _IFS_extopen:									;AN000;
 17885 00002C24 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 17886                                  					    ; with which call was made. This
 17887                                  					    ; has the open access bits. 
 17888                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 17889                                  	
 17890 00002C27 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 17891                                  	;mov	ax,112Eh
 17892                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 17893 00002C28 B82E11                  	mov	ax,(MultNET*256)+46 
 17894 00002C2B CD2F                    	INT	2FH			    ;FT.				;AN000;
 17895 00002C2D 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 17896 00002C2E C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 17897                                  
 17898                                  do_ret_label:
 17899 00002C33 C3                      	retn				    ;FT.				;AN000;
 17900                                  _NOEXTOP:
 17901                                  ;Extended open hooks
 17902                                  	;
 17903                                  ;IF NOT Installed
 17904                                  	;transfer NET_SEQ_OPEN
 17905                                  ;ELSE
 17906                                  	
 17907                                  do_net_int2f:
 17908 00002C34 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 17909 00002C39 7409                    	jz	short not_exec_open	; N: just do net open
 17910                                  					; Y: check to see if redir is aware
 17911                                  					;    of this 
 17912                                  	
 17913                                  					; M042 - start
 17914                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 17915 00002C3B F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 17916                                  					; Q: does this redir know how to 
 17917                                  					;    this
 17918 00002C40 7402                    	jz	short not_exec_open	; N: just do net open
 17919                                  					; Y: set bit 3 of access byte and 
 17920                                  					;    set sharing mode to DENY_WRITE
 17921                                  					; M042 - end
 17922                                  	
 17923                                  	; NOTE: This specific mode has not been set for the code assembled
 17924                                  	; under the "NOT Installed" conditional. Currently Installed is 
 17925                                  	; always one.
 17926                                  					; M035 - set the bits on the stack
 17927                                  	;mov	al,23h
 17928 00002C42 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 17929                                  	
 17930                                  not_exec_open:
 17931                                  	; MSDOS 3.3 & MSDOS 6.0
 17932 00002C44 50                      	PUSH	AX
 17933                                  
 17934                                  	;MOV	AX,(MultNET SHL 8) OR 22
 17935                                  	;INT	2FH
 17936                                  
 17937 00002C45 B81611                  	mov     ax,1116h
 17938 00002C48 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 17939                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17940                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17941                                  			; STACK: WORD file open mode
 17942                                  			; Return: CF set on error
 17943                                  
 17944 00002C4A 5B                      	POP	BX			; clean stack
 17945                                  ;do_ret_label: ; 09/08/2018
 17946 00002C4B C3                      	retn
 17947                                  ;ENDIF
 17948                                  
 17949                                  TEST_RE_NET1:
 17950                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17951                                  	; 17/12/2022
 17952 00002C4C 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17953 00002C51 07                      	POP	ES
 17954                                  	; 18/05/2019
 17955 00002C52 7409                    	JZ	short LOCAL_OPEN
 17956                                  
 17957                                  ;Extended open hooks
 17958                                  	; MSDOS 6.0
 17959 00002C54 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 17960 00002C59 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 17961                                  ;Extended open hooks
 17962                                  
 17963                                  ;IF NOT Installed
 17964                                  ;	transfer NET_OPEN
 17965                                  ;ELSE
 17966 00002C5B EBD7                    	jmp	short do_net_int2f
 17967                                  ;ENDIF
 17968                                  
 17969                                  LOCAL_OPEN:
 17970                                  	; MSDOS 3.3 & MSDOS 6.0
 17971 00002C5D E828E7                  	call	ECritDisk
 17972                                  
 17973                                  ; DOS 3.3 FastOPen 6/16/86
 17974                                  
 17975                                  	;or	byte [FastOpenFlg],5
 17976 00002C60 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 17977                                  
 17978 00002C65 E87B13                  	call	GETPATH
 17979                                  
 17980                                  ; DOS 3.3 FastOPen 6/16/86
 17981                                  
 17982 00002C68 731D                    	JNC	short Open_found
 17983 00002C6A 7511                    	JNZ	short bad_path2
 17984 00002C6C 08C9                    	OR	CL,CL
 17985 00002C6E 740D                    	JZ	short bad_path2
 17986                                  OpenFNF:
 17987 00002C70 B80200                  	MOV	AX,error_file_not_found	; 2
 17988                                  OpenBadRet:
 17989                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 17990                                  	; 12/08/2018
 17991                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 17992                                  	; MSDOS 6.0
 17993 00002C73 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 17994 00002C79 F9                      	STC
 17995                                  	;call	LCritDisk
 17996                                  	; 16/12/2022
 17997 00002C7A E926E7                  	jmp	LCritDisk
 17998                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 17999                                  	;retn 	; 08/09/2018
 18000                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18001                                  	;jmp	Clear_FastOpen
 18002                                  
 18003                                  bad_path2:
 18004 00002C7D B80300                  	MOV	AX,error_path_not_found	; 3
 18005 00002C80 EBF1                    	JMP	short OpenBadRet
 18006                                  
 18007                                  Open_Bad_Access:
 18008 00002C82 B80500                  	MOV	AX,error_access_denied	; 5
 18009 00002C85 EBEC                    	JMP	short OpenBadRet
 18010                                  
 18011                                  Open_found:
 18012 00002C87 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18013 00002C89 08E4                    	OR	AH,AH
 18014 00002C8B 783E                    	JS	short open_ok		; Devices don't have attributes
 18015 00002C8D 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18016                                  	;mov	al,[es:bx+0Bh]
 18017 00002C91 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18018 00002C95 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18019 00002C97 75E9                    	JNZ	short Open_Bad_Access
 18020 00002C99 A801                    	TEST	AL,attr_read_only	; check write on read only
 18021 00002C9B 742E                    	JZ	short open_ok
 18022                                  
 18023                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18024                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18025                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18026                                  ; processing until the actual write operation:
 18027                                  ;
 18028                                  ; If FCB, then we change the mode to be read_only.
 18029                                  ; If net_FCB, then we change the mode to be read_only.
 18030                                  ; If not open for read then error.
 18031                                  
 18032 00002C9D 1E                      	push	ds
 18033 00002C9E 56                      	push	si
 18034 00002C9F C536[9E05]              	LDS	SI,[THISSFT]
 18035                                  	;mov	cx,[si+2]
 18036 00002CA3 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18037                                  	; 17/12/2022
 18038                                  	;test	ch,80h
 18039 00002CA6 F6C580                  	test	ch,sf_isFCB>>8
 18040                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18041 00002CA9 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18042 00002CAB 88CA                    	MOV	DL,CL
 18043 00002CAD 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18044 00002CB0 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18045 00002CB3 7508                    	JNZ	short NormalOpen	; no
 18046                                  ResetAccess:
 18047                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18048                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18049                                  	; 16/12/2022
 18050 00002CB5 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18051                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18052 00002CB8 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18053 00002CBB EB0C                    	JMP	SHORT FillSFT
 18054                                  
 18055                                  ; The SFT is normal. See if the requested access is open_for_read
 18056                                  
 18057                                  NormalOpen:
 18058 00002CBD 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18059 00002CC0 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18060 00002CC3 7404                    	JZ	short FillSFT
 18061 00002CC5 5E                      	pop	si
 18062 00002CC6 1F                      	pop	ds
 18063 00002CC7 EBB9                    	JMP	short Open_Bad_Access
 18064                                  ;
 18065                                  ; All done, restore registers and fill the SFT.
 18066                                  ;
 18067                                  FillSFT:
 18068 00002CC9 5E                      	pop	si
 18069 00002CCA 1F                      	pop	ds
 18070                                  open_ok:
 18071 00002CCB E8671F                  	call	DOOPEN			; Fill in SFT
 18072                                  
 18073                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18074                                  	; 18/05/2019
 18075                                  	;and	byte [ss:FastOpenFlag],80h
 18076 00002CCE 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18077                                  	; 12/08/2018
 18078                                  	;and	byte [FastOpenFlg],Fast_yes	
 18079                                  
 18080                                  	; MSDOS 6.0
 18081 00002CD4 E84600                  	CALL	DO_SHARE_CHECK
 18082 00002CD7 7303                    	JNC	short SHARE_OK
 18083                                  	;call	LCritDisk
 18084                                  	; 16/12/2022
 18085 00002CD9 E9C7E6                  	jmp	LCritDisk
 18086                                  	;;JMP	short Clear_FastOpen
 18087                                  	;retn	; 18/05/2019
 18088                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18089                                  	;jmp	short Clear_FastOpen	
 18090                                  
 18091                                  	; MSDOS 3.3
 18092                                  ;DO_SHARE_CHECK:
 18093                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18094                                  ;OpenShareRetry:
 18095                                  ;	push	cx			; Save number left to do
 18096                                  ;	call	SHARE_CHECK		; Final Check
 18097                                  ;	pop	cx			; CX = # left
 18098                                  ;	JNC	short SHARE_OK		; No problem with access
 18099                                  ;	call	Idle
 18100                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18101                                  ;OpenShareFail:
 18102                                  ;	LES	DI,[THISSFT]
 18103                                  ;	call	SHARE_ERROR
 18104                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18105                                  	
 18106                                  	;12/08/2018
 18107                                  	;mov	byte [ss:FastOpenFlg],0
 18108                                  	;08/09/2018
 18109                                  	;mov	byte [FastOpenFlg],0
 18110                                  	;call	LCritDisk
 18111                                  	;JMP	short Clear_FastOpen
 18112                                  	;retn
 18113                                  
 18114                                  SHARE_OK:
 18115                                  	; MSDOS 3.3 & MSDOS 6.0
 18116 00002CDC B80300                  	MOV	AX,3
 18117 00002CDF C43E[9E05]              	LES	DI,[THISSFT]
 18118                                  ;if installed
 18119                                  	;call	JShare + 14 * 4
 18120 00002CE3 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18121                                  ;else
 18122                                  ;	Call	ShSU
 18123                                  ;endif
 18124 00002CE7 E8B9E6                  	call	LCritDisk
 18125                                  	
 18126                                  	;FallThru Set_SFT_Mode
 18127                                  
 18128                                  ;----------------------------------------------------------------------------
 18129                                  ; Procedure Name : SET_SFT_MODE
 18130                                  ;
 18131                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18132                                  ;
 18133                                  ;   Inputs:
 18134                                  ;	ThisSFT points to SFT
 18135                                  ;
 18136                                  ;   Outputs:
 18137                                  ;	Carry clear
 18138                                  ;   Registers modified: AX.
 18139                                  ;---------------------------------------------------------------------------
 18140                                  
 18141                                  ;hkn; called from create. DS already set up to DOSDATA.
 18142                                  
 18143                                  SET_SFT_MODE:
 18144 00002CEA C43E[9E05]              	LES	DI,[THISSFT]
 18145 00002CEE E8D019                  	call	DEV_OPEN_SFT
 18146                                  	;test	word [es:di+2],8000h
 18147                                  	; 17/12/2022
 18148                                  	;test	byte [es:di+3],80h
 18149 00002CF1 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18150                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18151 00002CF6 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18152 00002CF8 A1[3003]                	MOV	AX,[CurrentPDB]
 18153                                  	;mov	[es:di+31h],ax
 18154 00002CFB 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18155                                  
 18156                                  Clear_FastOpen:
 18157 00002CFF C3                      	retn			       ;;;;; DOS 3.3
 18158                                  
 18159                                  ;----------------------------------------------------------------------------
 18160                                  ; Procedure Name : SHARE_ERROR
 18161                                  ;
 18162                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18163                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18164                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18165                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18166                                  ;---------------------------------------------------------------------------
 18167                                  
 18168                                  SHARE_ERROR:
 18169                                  	; 17/12/2022
 18170                                  	;test	byte [es:di+3],80h
 18171 00002D00 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18172                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18173 00002D05 750C                    	JNZ	short _HARD_ERR
 18174 00002D07 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18175 00002D0B 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18176 00002D0E 80F900                  	CMP	CL,SHARING_COMPAT ; 0
 18177 00002D11 7505                    	JNE	short _NO_HARD_ERR
 18178                                  _HARD_ERR:
 18179 00002D13 E84D47                  	call	SHARE_VIOLATION
 18180                                  	;retnc				; User wants retry
 18181 00002D16 73E7                    	jnc	short Clear_FastOpen
 18182                                  _NO_HARD_ERR:
 18183 00002D18 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18184 00002D1B F9                      	STC
 18185 00002D1C C3                      	retn
 18186                                  
 18187                                  ; MSDOS 6.0
 18188                                  ;----------------------------------------------------------------------------
 18189                                  ; Procedure Name : DO_SHARE_CHECK
 18190                                  ;
 18191                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18192                                  ; Functions: check file sharing mode is valid
 18193                                  ; Output: carry set, error
 18194                                  ;	  carry clear, share ok
 18195                                  ;----------------------------------------------------------------------------
 18196                                  
 18197                                  	; 18/05/2019 - Retro DOS v4.0
 18198                                  DO_SHARE_CHECK:
 18199 00002D1D E868E6                  	call	ECritDisk		; enter critical section
 18200                                  OPN_RETRY:
 18201 00002D20 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18202                                  OpenShareRetry:
 18203 00002D24 51                      	push	cx			; Save number left to do
 18204 00002D25 E83647                  	call	SHARE_CHECK		; Final Check
 18205 00002D28 59                      	pop	cx			; CX = # left
 18206 00002D29 730E                    	JNC	short Share_Ok2		; No problem with access
 18207 00002D2B E850E5                  	call	Idle
 18208 00002D2E E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18209                                  OpenShareFail:
 18210 00002D30 C43E[9E05]              	LES	DI,[THISSFT]
 18211 00002D34 E8C9FF                  	call	SHARE_ERROR
 18212 00002D37 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18213                                  Share_Ok2:
 18214                                  	;call	LCritDisk		; leave critical section
 18215                                  	;retn
 18216                                  	; 18/12/2022
 18217 00002D39 E967E6                  	jmp	LCritDisk
 18218                                  
 18219                                  ;-----------------------------------------------------------------------------
 18220                                  ; Procedure Name : Check_Access
 18221                                  ;
 18222                                  ; Inputs:
 18223                                  ;	AX is mode
 18224                                  ;	  High NIBBLE of AL (Sharing Mode)
 18225                                  ;		sharing_compat	   file is opened in compatibility mode
 18226                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18227                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18228                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18229                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18230                                  ;	  Low NIBBLE of AL (Access Mode)
 18231                                  ;		open_for_read	file is opened for reading
 18232                                  ;		open_for_write	file is opened for writing
 18233                                  ;		open_for_both	file is opened for both reading and writing.
 18234                                  ; Function:
 18235                                  ;	Check this access mode for correctness
 18236                                  ; Outputs:
 18237                                  ;	[open_access] = AL input
 18238                                  ;	Carry Clear
 18239                                  ;		Mode is correct
 18240                                  ;		AX unchanged
 18241                                  ;	Carry Set
 18242                                  ;		Mode is bad
 18243                                  ;		AX = error_invalid_access
 18244                                  ; No other registers effected
 18245                                  ;----------------------------------------------------------------------------
 18246                                  
 18247                                  Check_Access_AX:
 18248 00002D3C A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18249 00002D3F 53                      	PUSH	BX
 18250                                  
 18251                                  ;	If sharing, then test for special sharing mode for FCBs
 18252                                  
 18253 00002D40 88C3                    	MOV	BL,AL
 18254 00002D42 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18255 00002D45 803E[7205]FF            	CMP	byte [FSHARING],-1
 18256 00002D4A 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18257 00002D4C 80FB70                  	CMP	BL,SHARING_NET_FCB
 18258 00002D4F 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18259                                  CheckShareMode:
 18260 00002D51 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18261 00002D54 770D                    	JA	short Make_Bad_Access
 18262                                  CheckAccessMode:
 18263 00002D56 88C3                    	MOV	BL,AL
 18264 00002D58 80E30F                  	AND	BL,access_mask
 18265 00002D5B 80FB02                  	CMP	BL,2
 18266 00002D5E 7703                    	JA	short Make_Bad_Access
 18267 00002D60 5B                      	POP	BX
 18268 00002D61 F8                      	CLC
 18269 00002D62 C3                      	retn
 18270                                  
 18271                                  Make_Bad_Access:
 18272 00002D63 B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18273 00002D66 5B                      	POP	BX
 18274 00002D67 F9                      	STC
 18275 00002D68 C3                      	retn
 18276                                  
 18277                                  ;============================================================================
 18278                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18279                                  ;============================================================================
 18280                                  ; 08/08/2018 - Retro DOS v3.0
 18281                                  ; 18/05/2019 - Retro DOS v4.0
 18282                                  
 18283                                  ;**	Low level routine for returning disk drive information from a local
 18284                                  ;	  or NET device
 18285                                  ;
 18286                                  ;	DISK_INFO
 18287                                  ;
 18288                                  ;	  Modification history:
 18289                                  ;
 18290                                  ;		Created: ARR 30 March 1983
 18291                                  
 18292                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18293                                  ;---------------------------------------------------------------------------
 18294                                  ; Procedure Name : DISK_INFO
 18295                                  ;
 18296                                  ; Inputs:
 18297                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18298                                  ;		(It MAY NOT be NUL, error not detected)
 18299                                  ; Function:
 18300                                  ;	Get Interesting Drive Information
 18301                                  ; Returns:
 18302                                  ;	DX = Number of free allocation units
 18303                                  ;	BX = Total Number of allocation units on disk
 18304                                  ;	CX = Sector size
 18305                                  ;	AL = Sectors per allocation unit
 18306                                  ;	AH = FAT ID BYTE
 18307                                  ;	Carry set if error (currently user FAILed to I 24)
 18308                                  ; Segs except ES preserved, others destroyed
 18309                                  ;----------------------------------------------------------------------------
 18310                                  
 18311                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18312                                  ;hkn; DOSDATA. 
 18313                                  
 18314                                  DISK_INFO:
 18315                                  	; 08/08/2018 - Retro DOS v3.0
 18316                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18317                                  
 18318 00002D69 E857E5                  	call	TestNet
 18319 00002D6C 7306                    	JNC	short LOCAL_DSK_INFO
 18320                                  
 18321                                  ;IF NOT Installed
 18322                                  ;	transfer NET_DISK_INFO
 18323                                  ;ELSE
 18324                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18325                                  	;INT	2FH
 18326                                  	;return
 18327                                  
 18328 00002D6E B80C11                  	mov     ax,110Ch
 18329 00002D71 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18330                                  			; ES:DI -> current directory
 18331                                  			; Return: AL = sectors per cluster, BX = total clusters
 18332                                  			; CX = bytes per sector, DX = number of available clusters
 18333 00002D73 C3                      	retn
 18334                                  ;ENDIF
 18335                                  
 18336                                  LOCAL_DSK_INFO:
 18337 00002D74 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18338 00002D79 E80CE6                  	call	ECritDisk
 18339 00002D7C E8702A                  	call	FATREAD_CDS		; perform media check.
 18340 00002D7F 7241                    	JC	short CRIT_LEAVE
 18341 00002D81 BB0200                  	MOV	BX,2
 18342 00002D84 E8B628                  	call	UNPACK			; Get first FAT sector into CURBUF
 18343 00002D87 7239                    	JC	short CRIT_LEAVE
 18344 00002D89 C536[E205]              	LDS	SI,[CURBUF]
 18345                                  	;mov	ah,[si+20]
 18346 00002D8D 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18347                                  
 18348                                  ;hkn; SS is DOSDATA
 18349 00002D90 16                      	push	ss
 18350 00002D91 1F                      	pop	ds
 18351                                  	;mov	cx,[es:bp+0Dh]
 18352 00002D92 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18353                                  
 18354                                  ; Examine the current free count. If it indicates that we have an invalid
 18355                                  ; count, do the expensive calculation.
 18356                                  
 18357                                  	;mov	dx,[es:bp+1Fh]
 18358 00002D96 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18359 00002D9A 83FAFF                  	CMP	DX,-1			; is it valid?
 18360 00002D9D 7404                    	JZ	short DoScan
 18361                                  
 18362                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18363                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18364                                  ; the count.
 18365                                  
 18366 00002D9F 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18367 00002DA1 7222                    	JB	short GotVal		; yes, trust it.
 18368                                  DoScan:
 18369 00002DA3 31D2                    	XOR	DX,DX
 18370 00002DA5 49                      	DEC	CX
 18371                                  SCANFREE:
 18372 00002DA6 E89428                  	call	UNPACK
 18373 00002DA9 7217                    	JC	short CRIT_LEAVE
 18374 00002DAB 7501                    	JNZ	short NOTFREECLUS
 18375 00002DAD 42                      	INC	DX			; A free one
 18376                                  NOTFREECLUS:
 18377 00002DAE 43                      	INC	BX			; Next cluster
 18378 00002DAF E2F5                    	LOOP	SCANFREE
 18379 00002DB1 4B                      	DEC	BX			; BX was next cluster. Convert to
 18380                                  ReturnVals:
 18381 00002DB2 4B                      	DEC	BX			; count
 18382                                  	;mov	al,[es:bp+4]
 18383 00002DB3 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18384 00002DB7 FEC0                    	INC	AL			; Sectors/cluster
 18385                                  	;mov	cx,[es:bp+2]
 18386 00002DB9 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18387                                  	;mov	[es:bp+1Fh],dx
 18388 00002DBD 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18389 00002DC1 F8                      	CLC
 18390                                  CRIT_LEAVE:
 18391                                  	;call	LCritDisk
 18392                                  	;retn
 18393                                  	; 17/12/2022
 18394 00002DC2 E9DEE5                  	jmp	LCritDisk
 18395                                  
 18396                                  ; We have correctly computed everything previously. Load up registers for
 18397                                  ; return.
 18398                                  
 18399                                  GotVal: 
 18400 00002DC5 89CB                    	MOV	BX,CX			; get cluster count
 18401 00002DC7 EBE9                    	JMP	short ReturnVals
 18402                                  
 18403                                  ;============================================================================
 18404                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18405                                  ;============================================================================
 18406                                  ; 22/07/2018 - Retro DOS v3.0
 18407                                  
 18408                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18409                                  ;	NAME	DOS_SEARCH
 18410                                  
 18411                                  ;**	Low level routines for doing local and NET directory searches
 18412                                  ;
 18413                                  ;	DOS_SEARCH_FIRST
 18414                                  ;	DOS_SEARCH_NEXT
 18415                                  ;	RENAME_NEXT
 18416                                  ;
 18417                                  ;	Revision history:
 18418                                  ;
 18419                                  ;	    Created: ARR 30 March 1983
 18420                                  ;	    A000	version 4.00  Jan. 1988
 18421                                  ;	    A001	PTM 3564 -- search for fastopen
 18422                                  
 18423                                  ;Installed = TRUE
 18424                                  
 18425                                  ;--------------------------------------------------------------------------
 18426                                  ;
 18427                                  ; Procedure Name : DOS_SEARCH_FIRST
 18428                                  ;
 18429                                  ; Inputs:
 18430                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18431                                  ;		terminated)
 18432                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18433                                  ;		( = -1 if current dir not involved, else
 18434                                  ;		 Points to first char after last "/" of current dir part)
 18435                                  ;	[THISCDS] Points to CDS being used
 18436                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18437                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18438                                  ;	[DMAADD] Points to 53 byte buffer
 18439                                  ; Function:
 18440                                  ;	Initiate a search for the given file spec
 18441                                  ; Outputs:
 18442                                  ;	CARRY CLEAR
 18443                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18444                                  ;
 18445                                  ;	LOCAL
 18446                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18447                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18448                                  ;	    11 byte search name with Meta chars in it
 18449                                  ;	    Search Attribute Byte, attribute of search
 18450                                  ;	    WORD LastEnt value
 18451                                  ;	    WORD DirStart
 18452                                  ;	    4 byte pad
 18453                                  ;	    32 bytes of the directory entry found
 18454                                  ;	NET
 18455                                  ;	    21 bytes First byte has high bit set
 18456                                  ;	    32 bytes of the directory entry found
 18457                                  ;
 18458                                  ;	CARRY SET
 18459                                  ;	    AX = error code
 18460                                  ;		error_no_more_files
 18461                                  ;			No match for this file
 18462                                  ;		error_path_not_found
 18463                                  ;			Bad path (not in curr dir part if present)
 18464                                  ;		error_bad_curr_dir
 18465                                  ;			Bad path in current directory part of path
 18466                                  ; DS preserved, others destroyed
 18467                                  ;---------------------------------------------------------------------------
 18468                                  
 18469                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18470                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18471                                  
 18472                                  DOS_SEARCH_FIRST:
 18473                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18474                                  
 18475 00002DC9 C43E[A205]              	LES	DI,[THISCDS]
 18476 00002DCD 83FFFF                  	CMP	DI,-1
 18477 00002DD0 7506                    	JNZ	short TEST_RE_NET2
 18478                                  
 18479                                  ;IF NOT Installed
 18480                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18481                                  ;ELSE
 18482                                  	;mov	ax,1119h
 18483 00002DD2 B81911                  	MOV	AX,(MultNET<<8)|25
 18484 00002DD5 CD2F                    	INT	2Fh
 18485 00002DD7 C3                      	retn
 18486                                  ;ENDIF
 18487                                  
 18488                                  TEST_RE_NET2:
 18489                                  	;test	word [es:di+43h],8000h
 18490                                  	; 17/12/2022
 18491                                  	;test	byte [es:di+44h],80h
 18492                                  	; 28/12/2022 (BugFix)
 18493 00002DD8 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8	
 18494                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18495 00002DDD 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18496                                  
 18497                                  ;IF NOT Installed
 18498                                  ;	transfer NET_SEARCH_FIRST
 18499                                  ;ELSE
 18500                                  	;mov	ax,111Bh
 18501 00002DDF B81B11                  	MOV	AX,(MultNET<<8)|27
 18502 00002DE2 CD2F                    	INT	2FH
 18503 00002DE4 C3                      	retn
 18504                                  ;ENDIF
 18505                                  	; 18/05/2019 - Retro DOS v4.0
 18506                                  LOCAL_SEARCH_FIRST:
 18507 00002DE5 E8A0E5                  	call	ECritDisk
 18508                                  	; MSDOS 6.0
 18509                                  	;;test	word [DOS34_FLAG],400h
 18510                                  	; 17/12/2022
 18511                                  	;test	byte [DOS34_FLAG+1],04h
 18512 00002DE8 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18513                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18514 00002DED 7405                    	JZ	short NOFN			;AN000;
 18515                                  	;or	byte [FastOpenFlg],1
 18516 00002DEF 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18517                                  NOFN:						;AN000;
 18518 00002DF4 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18519                                  	; MSDOS 6.0
 18520 00002DF9 E84101                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18521 00002DFC 7305                    	JNC	short norm_GETPATH	;AN000;;FO. no
 18522                                  	;and	byte [FastOpenFlg],80h
 18523 00002DFE 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18524                                  norm_GETPATH:
 18525 00002E03 E8DD11                  	call	GETPATH
 18526                                  	; BX = offset NAME1
 18527                                  ;_getdone:
 18528 00002E06 7318                    	JNC	short find_check_dev
 18529 00002E08 7511                    	JNZ	short bad_path3
 18530 00002E0A 08C9                    	OR	CL,CL
 18531 00002E0C 740D                    	JZ	short bad_path3
 18532                                  find_no_more:
 18533                                  	;mov	ax,12h
 18534 00002E0E B81200                  	MOV	AX,error_no_more_files
 18535                                  BadBye:
 18536                                  	; MSDOS 6.0
 18537 00002E11 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 18538                                  
 18539 00002E17 F9                      	STC
 18540                                  	;call	LCritDisk
 18541                                  	;retn
 18542                                  	; 18/12/2022
 18543 00002E18 E988E5                  	jmp	LCritDisk
 18544                                  
 18545                                  bad_path3:
 18546                                  	;mov	ax,3
 18547 00002E1B B80300                  	MOV	AX,error_path_not_found
 18548 00002E1E EBF1                    	JMP	short BadBye
 18549                                  
 18550                                  find_check_dev:
 18551 00002E20 08E4                    	OR	AH,AH
 18552 00002E22 790A                    	JNS	short found_entry
 18553 00002E24 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 18554 00002E2A FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 18555                                  found_entry:
 18556                                  
 18557                                  ; We set the physical drive byte here Instead of after found_it; Doing
 18558                                  ; a search-next may not have wfp_start set correctly
 18559                                  
 18560 00002E2E C43E[2C03]              	LES	DI,[DMAADD]
 18561 00002E32 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 18562 00002E36 AC                      	LODSB
 18563 00002E37 2C40                    	SUB	AL,'A'-1                ; logical drive
 18564 00002E39 AA                      	STOSB				; High bit not set (local)
 18565                                  found_it:
 18566 00002E3A C43E[2C03]              	LES	DI,[DMAADD]
 18567 00002E3E 47                      	INC	DI
 18568                                  
 18569                                  	; MSDOS 6.0
 18570 00002E3F 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 18571                                  	;test	byte [FastOpenFlg],10h
 18572 00002E40 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 18573 00002E45 7408                    	JZ	short notfast			  ;FO.;AN001;
 18574 00002E47 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 18575 00002E49 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 18576 00002E4D EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 18577                                  
 18578                                  notfast:
 18579 00002E4F BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 18580                                  movmov:
 18581                                  ; Special E5 code
 18582 00002E52 A4                      	MOVSB
 18583 00002E53 26807DFF05              	CMP	BYTE [ES:DI-1],5
 18584 00002E58 7505                    	JNZ	short NOTKANJB
 18585 00002E5A 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 18586                                  NOTKANJB:
 18587 00002E5F B90A00                  	MOV	CX,10
 18588 00002E62 F3A4                    	REP	MOVSB
 18589                                  
 18590                                  	; 08/09/2018
 18591 00002E64 1F                      	POP	DS			;FO.;AN001; restore ds
 18592                                  
 18593 00002E65 A0[6B05]                	MOV	AL,[ATTRIB]
 18594 00002E68 AA                      	STOSB
 18595 00002E69 50                      	PUSH	AX			; Save AH device info
 18596 00002E6A A1[4803]                	MOV	AX,[LASTENT]
 18597 00002E6D AB                      	STOSW
 18598 00002E6E A1[C205]                	MOV	AX,[DIRSTART]
 18599 00002E71 AB                      	STOSW
 18600                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 18601 00002E72 83C704                  	ADD	DI,4
 18602 00002E75 58                      	POP	AX			; Recover AH device info
 18603 00002E76 08E4                    	OR	AH,AH
 18604 00002E78 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 18605 00002E7A 833E[E205]FF            	CMP	WORD [CURBUF],-1
 18606 00002E7F 7510                    	JNZ	short OKSTORE
 18607                                  
 18608                                  	; MSDOS 6.0
 18609 00002E81 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 18610                                  					;AN000;;FO. from fastopen and is good
 18611 00002E86 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 18612                                  
 18613                                  	; The user has specified the root directory itself, rather than some
 18614                                  	; contents of it. We can't "find" that.
 18615                                  
 18616 00002E88 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 18617                                  					;   stuffing a -1 at Lastent
 18618 00002E8E E97DFF                  	JMP	find_no_more
 18619                                  
 18620                                  OKSTORE:
 18621 00002E91 8E1E[E405]              	MOV	DS,[CURBUF+2]
 18622                                  DOSREL:
 18623                                  	; BX = offset NAME1 (from GETPATH)
 18624 00002E95 89DE                    	MOV	SI,BX			; SI-> start of entry
 18625                                  
 18626                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 18627                                  
 18628                                  	;mov	cx,32
 18629 00002E97 B92000                  	MOV	CX,dir_entry.size
 18630                                  ;;;;; 7/29/86
 18631 00002E9A 89F8                    	MOV	AX,DI			; save the 1st byte addr
 18632 00002E9C F3A4                    	REP	MOVSB
 18633 00002E9E 89C7                    	MOV	DI,AX			; restore 1st byte addr
 18634 00002EA0 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 18635 00002EA4 7504                    	JNZ	short NO05
 18636 00002EA6 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 18637                                  NO05:
 18638                                  
 18639                                  ;;;;; 7/29/86
 18640                                  
 18641                                  ;hkn; FastOpenflg is in DOSDATA use SS
 18642                                  	; 16/12/2022
 18643                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18644                                  	; MSDOS 6.0
 18645                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18646                                  	; 18/05/2019 - Retro DOS v4.0
 18647 00002EAA 16                      	push	ss
 18648 00002EAB 1F                      	pop	ds
 18649                                  	; 16/12/2022
 18650 00002EAC 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 18651                                  
 18652                                  ;hkn; SS is DOSDATA
 18653                                  	;push	ss
 18654                                  	;pop	ds
 18655 00002EB1 F8                      	CLC
 18656                                  	;call	LCritDisk
 18657                                  	;retn
 18658                                  	; 16/12/2022
 18659 00002EB2 E9EEE4                  	jmp	LCritDisk
 18660                                  
 18661                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 18662                                  ;----------------------------------------------------------------------------
 18663                                  ;
 18664                                  ; Procedure Name : DOS_SEARCH_NEXT
 18665                                  ;
 18666                                  ; Inputs:
 18667                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 18668                                  ;	    (only first 21 bytes must have valid information)
 18669                                  ; Function:
 18670                                  ;	Look for subsequent matches
 18671                                  ; Outputs:
 18672                                  ;	CARRY CLEAR
 18673                                  ;	    The 53 bytes at DMAADD are updated for next call
 18674                                  ;		(see DOS_SEARCH_FIRST)
 18675                                  ;	CARRY SET
 18676                                  ;	    AX = error code
 18677                                  ;		error_no_more_files
 18678                                  ;			No more files to find
 18679                                  ; DS preserved, others destroyed
 18680                                  ;---------------------------------------------------------------------------
 18681                                  
 18682                                  ;hkn; called from search.asm. DS already set up at this point.
 18683                                  
 18684                                  DOS_SEARCH_NEXT:
 18685 00002EB5 C43E[2C03]              	LES	DI,[DMAADD]
 18686 00002EB9 268A05                  	MOV	AL,[ES:DI]
 18687 00002EBC A880                    	TEST	AL,80H			; Test for NET
 18688 00002EBE 7406                    	JZ	short LOCAL_SEARCH_NEXT
 18689                                  ;IF NOT Installed
 18690                                  ;	transfer NET_SEARCH_NEXT
 18691                                  ;ELSE
 18692                                  	;mov	ax,111Ch
 18693 00002EC0 B81C11                  	MOV	AX,(MultNET<<8)|28
 18694 00002EC3 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 18695                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 18696                                  		     ; Return: CF set on error, AX = DOS error code
 18697                                  		     ; CF clear if successful
 18698 00002EC5 C3                      	retn
 18699                                  ;ENDIF
 18700                                  
 18701                                  LOCAL_SEARCH_NEXT:
 18702                                  	;AL is drive A=1
 18703                                  	;mov	byte [EXTERR_LOCUS],2
 18704 00002EC6 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18705 00002ECB E8BAE4                  	call	ECritDisk
 18706                                  
 18707                                  ;hkn; DummyCDS is in DOSDATA
 18708 00002ECE C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 18709                                  ;hkn; Segment address is DOSDATA - use ds
 18710                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 18711 00002ED4 8C1E[A405]              	mov	[THISCDS+2],DS
 18712                                  
 18713 00002ED8 0440                    	ADD	AL,'A'-1
 18714 00002EDA E8113C                  	call	InitCDS
 18715                                  
 18716                                  ;	call	GETTHISDRV		; Set CDS pointer
 18717                                  
 18718 00002EDD 7236                    	JC	short No_files		; Bogus drive letter
 18719 00002EDF C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 18720                                  	;les	bp,[es:di+45h]
 18721 00002EE3 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 18722 00002EE7 E891D7                  	call	GOTDPB			; [THISDPB] = ES:BP
 18723                                  
 18724                                  	 ;16/12/2022
 18725 00002EEA 268A4600                	mov	al,[ES:BP]
 18726                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18727                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 18728 00002EEE A2[7605]                	mov	[THISDRV],AL
 18729                                  	;mov	word [CREATING],0E500h
 18730 00002EF1 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 18731 00002EF7 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18732 00002EFC C536[2C03]              	LDS	SI,[DMAADD]
 18733 00002F00 AC                      	LODSB				; Drive Byte
 18734                                  
 18735                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 18736                                  RENAME_NEXT:
 18737                                  	;context ES
 18738 00002F01 16                      	push	ss
 18739 00002F02 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 18740                                  
 18741                                  ;hkn; NAME1 is in DOSDATA
 18742 00002F03 BF[4B05]                	MOV	DI,NAME1
 18743                                  
 18744 00002F06 B90B00                  	MOV	CX,11
 18745 00002F09 F3A4                    	REP	MOVSB			; Search name
 18746 00002F0B AC                      	LODSB				; Attribute
 18747                                  
 18748                                  ;hkn; SS override
 18749 00002F0C 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 18750 00002F10 AD                      	LODSW				; LastEnt
 18751 00002F11 09C0                    	OR	AX,AX
 18752 00002F13 7903                    	JNS	short cont_load
 18753                                  No_files:
 18754 00002F15 E9F6FE                  	JMP	find_no_more
 18755                                  
 18756                                  cont_load:
 18757 00002F18 50                      	PUSH	AX			; Save LastEnt
 18758 00002F19 AD                      	LODSW				; DirStart
 18759 00002F1A 89C3                    	MOV	BX,AX
 18760                                  
 18761                                  ;hkn; SS is DOSDATA
 18762                                  	;context DS
 18763 00002F1C 16                      	push	ss
 18764 00002F1D 1F                      	pop	ds
 18765 00002F1E C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 18766                                  	;invoke	SetDirSrch
 18767 00002F22 E85E10                  	call	SETDIRSRCH
 18768 00002F25 7303                    	JNC	short SEARCH_GOON
 18769 00002F27 58                      	POP	AX			; Clean stack
 18770 00002F28 EBEB                    	JMP	short No_files
 18771                                  
 18772                                  SEARCH_GOON:
 18773 00002F2A E85813                  	call	STARTSRCH
 18774 00002F2D 58                      	POP	AX
 18775 00002F2E E82410                  	call	GETENT
 18776 00002F31 72E2                    	JC	short No_files
 18777 00002F33 E8550F                  	call	NEXTENT
 18778 00002F36 72DD                    	JC	short No_files
 18779 00002F38 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 18780 00002F3A E9FDFE                  	JMP	found_it ; 10/08/2018
 18781                                  
 18782                                  ; MSDOS 6.0
 18783                                  ;---------------------------------------------------------------------------
 18784                                  ;
 18785                                  ; Procedure Name : CHECK_QUESTION
 18786                                  ;
 18787                                  ; Input: [WFP_START]= pointer to final path
 18788                                  ; Function: check '?' char
 18789                                  ; Output: carry clear, if no '?'
 18790                                  ;	 carry set, if '?' exists
 18791                                  ;---------------------------------------------------------------------------
 18792                                  
 18793                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18794                                  CHECK_QUESTION:
 18795                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 18796                                  ;hkn;	PUSH	CS			;AN000;;FO.
 18797 00002F3D 16                      	push	ss
 18798 00002F3E 1F                      	POP	DS			;AN000;;FO. ds:si -> final path
 18799                                  	; 16/12/2022
 18800                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18801 00002F3F 8B36[B205]              	MOV	SI,[WFP_START]		;AN000;;FO.
 18802                                  	;mov	si,[ss:WFP_START]
 18803                                  getnext:				;AN000;
 18804 00002F43 AC                      	LODSB				;AN000;;FO. get char
 18805 00002F44 08C0                    	OR	AL,AL			;AN000;;FO. is it null
 18806 00002F46 7405                    	JZ	short NO_Question	;AN000;;FO. yes
 18807 00002F48 3C3F                    	CMP	AL,'?'                  ;AN000;;FO. is '?'
 18808 00002F4A 75F7                    	JNZ	short getnext 		;AN000;;FO. no
 18809 00002F4C F9                      	STC				;AN000;;FO.
 18810                                  NO_Question:				;AN000;
 18811 00002F4D C3                      	retn				;AN000;;FO.
 18812                                  
 18813                                  ;============================================================================
 18814                                  ; ABORT.ASM, MSDOS 6.0, 1991
 18815                                  ;============================================================================
 18816                                  ; 23/07/2018 - Retro DOS v3.0
 18817                                  ; 18/05/2019 - Retro DOS v4.0
 18818                                  
 18819                                  ;**
 18820                                  ;
 18821                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 18822                                  ;  If process has NET resources a close all is sent out over the net.
 18823                                  ;
 18824                                  ;   DOS_ABORT
 18825                                  ;
 18826                                  ;   Modification history:
 18827                                  ;
 18828                                  ;       Created: ARR 30 March 1983
 18829                                  ;
 18830                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 18831                                  ;				being terminated only if it is busy.
 18832                                  ;
 18833                                  
 18834                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 18835                                  ;--------------------------------------------------------------------------
 18836                                  ;
 18837                                  ; Procedure Name : DOS_ABORT
 18838                                  ;
 18839                                  ; Inputs:
 18840                                  ;       [CurrentPDB] set to PID of process aborting
 18841                                  ; Function:
 18842                                  ;       Close all files and free all SFTs for this PID
 18843                                  ; Returns:
 18844                                  ;       None
 18845                                  ; All destroyed except stack
 18846                                  ;---------------------------------------------------------------------------
 18847                                  
 18848                                  DOS_ABORT:
 18849 00002F4E 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 18850 00002F53 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 18851                                  reset_free_jfn:
 18852 00002F58 89CB                    	MOV     BX,CX
 18853 00002F5A 51                      	PUSH    CX
 18854 00002F5B 4B                      	DEC     BX                      ; get jfn (start with last one)
 18855                                  
 18856 00002F5C E8C338                  	CALL	_$CLOSE
 18857 00002F5F 59                      	POP     CX
 18858 00002F60 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 18859                                  
 18860                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 18861                                  ; are running in the no-sharing no-network environment, we are simulating the
 18862                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 18863                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 18864                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 18865                                  ;
 18866                                  ; If sharing is loaded, then the following call to close process will
 18867                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 18868                                  ;
 18869                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 18870                                  ; known network resources. These resources are then responsible for cleaning
 18871                                  ; up after this process.
 18872                                  ;
 18873                                  ; Sleazy, eh?
 18874                                  
 18875                                  	;context DS			; SS is DOSDATA
 18876 00002F62 16                      	push	ss
 18877 00002F63 1F                      	pop	ds  ; 09/09/2018
 18878                                  
 18879                                  	;CallInstall Net_Abort, MultNET, 29
 18880 00002F64 B81D11                  	mov	ax, 111Dh
 18881 00002F67 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 18882                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 18883                                  			; DS???, SS = DOS CS
 18884                                  ;if installed
 18885 00002F69 FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 18886                                  ;else
 18887                                  ;	call 	MFTCloseP
 18888                                  ;endif
 18889                                  
 18890                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 18891                                  ; counts.
 18892                                  					; SS override
 18893 00002F6D 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 18894                                  	;mov	cx,[es:di+4]
 18895 00002F72 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 18896 00002F76 E317                    	jcxz    FCBScanDone
 18897                                  	;lea	di,[di+6]
 18898 00002F78 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 18899 00002F7B 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18900                                  FCBTest:
 18901                                  	;cmp	[es:di+31h],ax
 18902 00002F7F 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 18903 00002F83 7505                    	jnz	short FCBNext		; no, skip it
 18904 00002F85 26C7050000              	mov	word [es:di],0
 18905                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 18906                                  FCBNext:
 18907 00002F8A 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 18908 00002F8D E2F0                    	loop    FCBTest
 18909                                  FCBScanDone:
 18910                                  
 18911                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 18912                                  
 18913 00002F8F 31DB                    	XOR     BX,BX
 18914                                  Scan:
 18915 00002F91 53                      	push    bx
 18916 00002F92 E80838                  	call	SFFromSFN
 18917 00002F95 5B                      	pop     bx
 18918                                  	;jnc	short Scan1
 18919                                  	;retn
 18920                                  	; 18/12/2022
 18921 00002F96 72B5                    	jc	short NO_Question ; retn
 18922                                  
 18923                                  ;M038
 18924                                  ; Do what the comment above says, check for busy state
 18925                                  
 18926                                  Scan1:
 18927                                  	;cmp	word [es:di],0
 18928                                  	;jz	short scan_next  ; MSDOS 3.3
 18929                                  	; MSDOS 6.0
 18930 00002F98 26833DFF                	cmp	word [es:di],sf_busy ; -1
 18931                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 18932                                  				; Is Sft busy? ;M038
 18933 00002F9C 7519                    	jnz	short scan_next
 18934                                  ;
 18935                                  ; we have a SFT that is busy. See if it is for the current process
 18936                                  ;
 18937 00002F9E 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18938                                  	;cmp	[es:di+31h],ax
 18939 00002FA2 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 18940 00002FA6 750F                    	jnz	short scan_next
 18941 00002FA8 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 18942                                  	;cmp	[es:di+2Fh],ax
 18943 00002FAC 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 18944 00002FB0 7505                    	jnz	short scan_next
 18945                                  
 18946                                  ; This SFT is labelled as ours.
 18947                                  
 18948 00002FB2 26C7050000              	mov	word [es:di],0
 18949                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 18950                                  scan_next:
 18951 00002FB7 43                      	inc     bx
 18952 00002FB8 EBD7                    	jmp     short Scan
 18953                                  
 18954                                  ;============================================================================
 18955                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 18956                                  ;============================================================================
 18957                                  ; 23/07/2018 - Retro DOS v3.0
 18958                                  ; 18/05/2019 - Retro DOS v4.0
 18959                                  
 18960                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 18961                                  ;
 18962                                  ;	DOS_CLOSE
 18963                                  ;	DOS_COMMIT
 18964                                  ;	FREE_SFT
 18965                                  ;	SetSFTTimes
 18966                                  ;
 18967                                  ;	Revision history:
 18968                                  ;
 18969                                  ;	   AN000  version 4.00	Jan. 1988
 18970                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 18971                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 18972                                  
 18973                                  ;Installed = TRUE
 18974                                  
 18975                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 18976                                  ;---------------------------------------------------------------------------
 18977                                  ;
 18978                                  ; Procedure Name : DOS_CLOSE
 18979                                  ;
 18980                                  ; Inputs:
 18981                                  ;	[THISSFT] set to the SFT for the file being used
 18982                                  ; Function:
 18983                                  ;	Close the indicated file via the SFT
 18984                                  ; Returns:
 18985                                  ;	sf_ref_count decremented otherwise
 18986                                  ;	ES:DI point to SFT
 18987                                  ;	Carry set if error
 18988                                  ;	    AX has error code
 18989                                  ; DS preserved, others destroyed
 18990                                  ;---------------------------------------------------------------------------
 18991                                  
 18992                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 18993                                  
 18994                                  ; 18/05/2019 - Retro DOS v4.0
 18995                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 18996                                  
 18997                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18998                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 18999                                  
 19000                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19001                                  
 19002                                  DOS_CLOSE:
 19003 00002FBA C43E[9E05]              	LES	DI,[THISSFT]
 19004                                  	;mov	bx,[ES:DI+5]
 19005 00002FBE 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19006                                  
 19007                                  ; Network closes are handled entirely by the net code.
 19008                                  
 19009                                  	;;test	bx,8000h
 19010                                  	;TEST	BX,sf_isnet
 19011                                  	; 17/12/2022
 19012                                  	;test	bh,80h
 19013 00002FC2 F6C780                  	test	bh,(sf_isnet>>8)
 19014 00002FC5 7406                    	JZ	short LocalClose
 19015                                  
 19016                                  	;CallInstall Net_Close,MultNET,6
 19017 00002FC7 B80611                  	mov     ax,1106h
 19018 00002FCA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19019                                  			; ES:DI -> SFT
 19020                                  			; SFT DPB field -> DPB of drive containing file
 19021                                  			; Return: CF set on error, AX = DOS error code
 19022                                  			; CF clear if successful
 19023 00002FCC C3                      	retn
 19024                                  
 19025                                  ; All closes release the sharing information.
 19026                                  ; No commit releases sharing information
 19027                                  ;
 19028                                  ; All closes decrement the ref count.
 19029                                  ; No commit decrements the ref count.
 19030                                  
 19031                                  LocalClose:
 19032 00002FCD E8B8E3                  	call	ECritDisk
 19033 00002FD0 E86B01                  	CALL	SetSFTTimes
 19034 00002FD3 E8E200                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19035                                  
 19036                                  ;hkn; SS is DOSDATA
 19037                                  	;Context DS
 19038 00002FD6 16                      	push	ss
 19039 00002FD7 1F                      	pop	ds
 19040                                  
 19041 00002FD8 50                      	push	ax
 19042 00002FD9 53                      	push	bx
 19043 00002FDA E8AC44                  	call	ShareEnd
 19044 00002FDD 5B                      	pop	bx
 19045 00002FDE 58                      	pop	ax
 19046                                  
 19047                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19048                                  
 19049                                  CloseEntry:
 19050 00002FDF 50                      	PUSH	AX
 19051                                  
 19052                                  ; File clean or device does not get stamped nor disk looked at.
 19053                                  
 19054                                  	;test	bx,0C0h
 19055                                  	; 17/12/2022
 19056 00002FE0 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19057                                  	;TEST	BX,devid_file_clean+devid_device
 19058 00002FE3 7403                    	JZ	short rdir
 19059                                  	; 14/11/2022
 19060 00002FE5 E9BD00                  	JMP	FREE_SFT_OK		; either clean or device
 19061                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19062                                  
 19063                                  ; Retrieve the directory entry for the file
 19064                                  
 19065                                  rdir:
 19066 00002FE8 E8DA00                  	CALL	DirFromSFT
 19067                                  	;mov	al,5
 19068 00002FEB B005                    	MOV	AL,error_access_denied
 19069 00002FED 7303                    	JNC	short clook
 19070                                  	; 14/11/2022
 19071 00002FEF E9B400                  	JMP	CloseFinish		; pretend the close worked.
 19072                                  	;jc	short CloseFinish ; 24/07/2019
 19073                                  clook:
 19074                                  
 19075                                  ; ES:DI points to entry
 19076                                  ; DS:SI points to SFT
 19077                                  ; ES:BX points to buffer header
 19078                                  
 19079 00002FF2 57                      	push	di
 19080 00002FF3 56                      	push	si
 19081                                  	;lea	si,[si+20h]
 19082 00002FF4 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19083                                  
 19084                                  ; ES:DI point to directory entry
 19085                                  ; DS:SI point to unpacked name
 19086                                  
 19087 00002FF7 E87DE2                  	call	XCHGP
 19088                                  
 19089                                  ; ES:DI point to unpacked name
 19090                                  ; DS:SI point to directory entry
 19091                                  
 19092 00002FFA E8EC0E                  	call	MetaCompare
 19093 00002FFD E877E2                  	call	XCHGP
 19094 00003000 5E                      	pop	si
 19095 00003001 5F                      	pop	di
 19096 00003002 740C                    	JZ	short CLOSE_GO		; Name OK
 19097                                  Bye:	
 19098 00003004 89F7                    	MOV	DI,SI
 19099 00003006 1E                      	PUSH	DS
 19100 00003007 07                      	POP	ES			; ES:DI points to SFT
 19101 00003008 16                      	PUSH	SS
 19102 00003009 1F                      	POP	DS
 19103 0000300A F9                      	STC
 19104                                  	;mov	al,2
 19105 0000300B B002                    	MOV	AL,error_file_not_found
 19106 0000300D E99600                  	JMP	CloseFinish ; 24/07/2019
 19107                                  
 19108                                  	; 18/05/2019 - Retro DOS v4.0
 19109                                  CLOSE_GO:
 19110                                  	; MSDOS 6.0
 19111                                  	;test	word [si+2],8000h
 19112                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19113                                  	; 17/12/2022
 19114                                  	;test	byte [si+3],80h
 19115 00003010 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19116 00003014 740D                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19117                                  	; MSDOS 3.3 & MSDOS 6.0
 19118                                  	;mov	ch,[es:di+0Bh]
 19119 00003016 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19120                                  	;mov	al,[si+4]
 19121 0000301A 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 19122                                  
 19123                                  ;hkn; SS override
 19124 0000301D 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19125                                  	; MSDOS 3.3
 19126                                  	;;call	MatchAttributes
 19127                                  	;;JNZ	short Bye		; attributes do not match
 19128                                  	; 18/05/2019
 19129 00003021 EB07                    	JMP	SHORT setattr		;FT.
 19130                                  nofcb:
 19131                                  	; MSDOS 6.0
 19132                                  	;mov	al,[si+4]
 19133 00003023 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19134 00003026 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19135                                  setattr:
 19136                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19137                                  	;or	byte [es:di+0Bh],20h
 19138 0000302A 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19139                                  	; MSDOS 6.0
 19140                                  	;mov	ax,[es:di+1Ah]
 19141 0000302F 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19142                                  					;F.O. save old first cluster
 19143                                  ;hkn; SS override
 19144 00003033 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19145                                  
 19146                                  	;mov	ax,[si+0Bh]
 19147 00003037 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19148                                  	;mov	[es:di+1Ah],ax
 19149 0000303A 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19150                                  	;mov	ax,[si+11h]
 19151 0000303E 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19152                                  	;mov	[es:di+1Ch],ax
 19153 00003041 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19154                                  	;mov	ax,[si+13h]
 19155 00003045 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19156                                  	;mov	[es:di+1Eh],ax
 19157 00003048 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19158                                  	;mov	ax,[si+0Fh]
 19159 0000304C 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19160                                  	;mov	[es:di+18h],ax
 19161 0000304F 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19162                                  	;mov	ax,[si+0Dh]
 19163 00003053 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19164                                  	;mov	[es:di+16h],ax
 19165 00003056 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19166                                  
 19167                                  	; MSDOS 6.0
 19168                                  ;; File Tagging
 19169 0000305A 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 19170                                  				  ;LB. if already dirty		    ;AN000;
 19171 0000305F 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19172                                  	; 02/06/2019
 19173 00003061 E8012C                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19174                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19175                                  	;or	byte [es:bx+5],40h
 19176 00003064 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19177                                  yesdirty4:
 19178 00003069 1E                      	push	ds
 19179 0000306A 56                      	push	si
 19180                                  	; MSDOS 6.0
 19181                                  	;mov	cx,[si+0Bh]
 19182                                  	; 07/12/2022
 19183 0000306B 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19184                                  ;hkn; SS override
 19185 0000306E 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19186                                  	; MSDOS 3.3 
 19187                                  	;push	ss
 19188                                  	;pop	ds
 19189                                  	;MOV	AL,[THISDRV]
 19190                                  ;;; 10/1/86  update fastopen cache
 19191                                  	; MSDOS 3.3 & MSDOS 6.0
 19192 00003072 52                      	PUSH	DX
 19193 00003073 B400                    	MOV	AH,0			; dir entry update
 19194 00003075 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19195                                  	; MSDOS 6.0
 19196 00003077 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19197 00003079 750D                    	JNZ	short do_update2	;AN005; no, do update
 19198 0000307B B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19199                                  	;mov	di,[si+1Bh]
 19200 0000307D 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19201                                  	;mov	cx,[si+1Dh]
 19202 00003080 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19203                                  	;mov	dh,[si+1Fh]
 19204 00003083 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19205 00003086 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19206                                  do_update2:				;AN011;F.O.
 19207                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19208                                  	; 
 19209 00003088 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19210 0000308D 7407                    	JZ	short do_update		;AN011;F.O. yes
 19211 0000308F B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19212 00003091 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19213                                  do_update:				;AN005;
 19214                                  ;hkn; SS is DOSDATA
 19215                                  	;Context DS
 19216 00003096 16                      	push	ss
 19217 00003097 1F                      	pop	ds	
 19218                                  	; MSDOS 3.3 & MSDOS 6.0
 19219 00003098 E8E0F6                  	call	FastOpen_Update 	; invoke fastopen
 19220 0000309B 5A                      	POP	DX
 19221                                  
 19222                                  ;;; 10/1/86  update fastopen cache
 19223 0000309C E8BE2A                  	call	FLUSHBUF		; flush all relevant buffers
 19224 0000309F 5F                      	pop	di
 19225 000030A0 07                      	pop	es
 19226                                  	;mov	al,5
 19227 000030A1 B005                    	MOV	AL,error_access_denied
 19228 000030A3 7201                    	JC	short CloseFinish
 19229                                  FREE_SFT_OK:
 19230 000030A5 F8                      	CLC				; signal no error.
 19231                                  CloseFinish:
 19232                                  
 19233                                  ; Indicate to the device that the SFT is being closed.
 19234                                  
 19235                                  ;;;; 7/21/86
 19236 000030A6 9C                      	PUSHF				; save flag from DirFromSFT
 19237 000030A7 E81F16                  	call	DEV_CLOSE_SFT
 19238 000030AA 9D                      	POPF
 19239                                  ;;;; 7/21/86
 19240                                  ;
 19241                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19242                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19243                                  ; going to be moving from busy to free.
 19244                                  ;
 19245 000030AB 59                      	POP	CX			; get old ref count
 19246 000030AC 9C                      	PUSHF
 19247 000030AD 49                      	DEC	CX			; if cx != 1
 19248 000030AE 7503                    	JNZ	short NoFree		; then do NOT free SFT
 19249 000030B0 26890D                  	mov	[es:di],cx
 19250                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19251                                  NoFree:
 19252 000030B3 E8EDE2                  	call	LCritDisk
 19253 000030B6 9D                      	POPF
 19254 000030B7 C3                      	retn
 19255                                  
 19256                                  ;---------------------------------------------------------------------------
 19257                                  ;
 19258                                  ; Procedure Name : FREE_SFT
 19259                                  ;
 19260                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19261                                  ; Flags preserved. Return old ref count in AX
 19262                                  ;
 19263                                  ; Note that busy is indicated by the SFT ref count being -1.
 19264                                  ;
 19265                                  ;---------------------------------------------------------------------------
 19266                                  
 19267                                  FREE_SFT:
 19268 000030B8 9C                      	PUSHF		; Save carry state
 19269 000030B9 268B05                  	mov	ax,[es:di]
 19270                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19271 000030BC 48                      	DEC	AX
 19272 000030BD 7501                    	JNZ	short SetCount
 19273 000030BF 48                      	DEC	AX
 19274                                  SetCount:
 19275 000030C0 268705                  	xchg	ax,[es:di]
 19276                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19277 000030C3 9D                      	POPF
 19278 000030C4 C3                      	retn
 19279                                  
 19280                                  	; 18/05/2019 - Retro DOS v4.0
 19281                                  
 19282                                  ;----------------------------------------------------------------------------
 19283                                  ;
 19284                                  ; Procedure Name : DirFromSFT
 19285                                  ;
 19286                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19287                                  ;
 19288                                  ;   Inputs:	ES:DI point to SFT
 19289                                  ;		DS = DOSDATA
 19290                                  ;   Outputs:
 19291                                  ;		EXTERR_LOCUS = errLOC_Disk
 19292                                  ;		CurBuf points to buffer
 19293                                  ;		Carry Clear -> operation OK
 19294                                  ;		    ES:DI point to entry
 19295                                  ;		    ES:BX point to buffer
 19296                                  ;		    DS:SI point to SFT
 19297                                  ;		Carry SET   -> operation failed
 19298                                  ;		    registers trashified
 19299                                  ;   Registers modified: ALL
 19300                                  ;----------------------------------------------------------------------------
 19301                                  
 19302                                  DirFromSFT:
 19303                                  	;mov	byte [EXTERR_LOCUS],2
 19304 000030C5 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19305 000030CA 06                      	push	es
 19306 000030CB 57                      	push	di
 19307                                  	; MSDOS 3.3
 19308                                  	;;mov	dx,[es:di+1Dh]
 19309                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19310                                  	; MSDOS 6.0
 19311                                  	;mov	dx,[es:[di+1Dh]
 19312 000030CC 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19313 000030D0 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19314                                  	;mov	dx,[es:di+1Bh]
 19315 000030D4 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19316                                  	; 19/05/2019
 19317 000030D8 FF36[0706]              	PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19318                                  	; MSDOS 3.3 & MSDOS 6.0
 19319 000030DC 52                      	PUSH	DX
 19320 000030DD E8FF26                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19321                                  					; [THISDPB] set
 19322 000030E0 5A                      	POP	DX
 19323 000030E1 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19324 000030E5 7225                    	JC	short PopDone
 19325 000030E7 30C0                    	XOR	AL,AL			; Pre read
 19326                                  	;mov	byte [ALLOWED],18h
 19327 000030E9 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19328 000030EE E86E29                  	call	GETBUFFR
 19329 000030F1 7219                    	JC	short PopDone
 19330 000030F3 5E                      	pop	si
 19331 000030F4 1F                      	pop	ds			; Get back SFT pointer
 19332                                  
 19333                                  ;hkn; SS override
 19334 000030F5 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19335                                  	;or	byte [es:di+5],4
 19336 000030FA 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19337 000030FF 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19338                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19339                                  	;lea	di,[di+20] ; MSDOS 6.0
 19340 00003101 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19341                                  	;mov	al,32
 19342 00003104 B020                    	MOV	AL,dir_entry.size
 19343                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19344 00003106 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19345 00003109 01C7                    	ADD	DI,AX			; Point at the entry
 19346 0000310B C3                      	retn				; carry is clear
 19347                                  PopDone:
 19348 0000310C 5F                      	pop	di
 19349 0000310D 07                      	pop	es
 19350                                  PopDone_retn:
 19351 0000310E C3                      	retn
 19352                                  
 19353                                  ;----------------------------------------------------------------------------
 19354                                  ;
 19355                                  ;**	DOS_Commit - UPdate Directory Entries
 19356                                  ;
 19357                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19358                                  ;		(DS) = DOSGROUP
 19359                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19360                                  ;	USES	all but DS
 19361                                  ;
 19362                                  ;----------------------------------------------------------------------------
 19363                                  
 19364                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19365                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19366                                  
 19367                                  DOS_COMMIT:
 19368                                  	;hkn; called from srvcall. DS already set up.
 19369 0000310F C43E[9E05]              	LES	DI,[THISSFT]
 19370                                  	;mov	bx,[es:di+5]
 19371 00003113 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19372                                  	;test	bx,0C0h
 19373                                  	; 17/12/2022
 19374 00003117 F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19375                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19376 0000311A 75F2                    	jnz	short PopDone_retn
 19377                                  	;test	bx,8000h
 19378                                  	; 17/12/2022
 19379                                  	;test	bh,80h
 19380 0000311C F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19381                                  	;TEST	BX,sf_isnet ; 8000h
 19382 0000311F 7406                    	JZ	short LOCAL_COMMIT
 19383                                  
 19384                                  ;IF NOT Installed
 19385                                  ;	transfer NET_COMMIT
 19386                                  ;ELSE
 19387                                  	;mov	ax,1107h
 19388 00003121 B80711                  	MOV	AX,(MultNET<<8)|7
 19389 00003124 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19390                                  			; ES:DI -> SFT
 19391                                  			; SFT DPB field -> DPB of drive containing file
 19392                                  			; Return: CF set on error, AX = DOS error code
 19393                                  			; CF clear if successful
 19394                                  localcommit_retn: ; 18/12/2022	
 19395 00003126 C3                      	retn
 19396                                  ;ENDIF
 19397                                  
 19398                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19399                                  ; There are three ways we can do this. One is to enter a critical section to
 19400                                  ; protect a potential free. The second is to increment the ref count to mask
 19401                                  ; the close decrementing.
 19402                                  ;
 19403                                  ; The proper way is to let the caller's of close decide if a decrement should
 19404                                  ; be done. We do this by providing another entry into close after the
 19405                                  ; decrement and after the share information release.
 19406                                  
 19407                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19408                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19409                                  
 19410                                  LOCAL_COMMIT:
 19411 00003127 E85EE2                  	call	ECritDisk
 19412                                  	; MSDOS 6.0
 19413 0000312A E85BE2                  	call	ECritDisk	;PTM.
 19414 0000312D E80E00                  	call	SetSFTTimes
 19415 00003130 B8FFFF                  	MOV	AX,-1
 19416 00003133 E8A9FE                  	call	CloseEntry
 19417                                  	; MSDOS 6.0
 19418 00003136 9C                      	PUSHF			;PTM.				;AN000;
 19419 00003137 E88715                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19420 0000313A 9D                      	POPF			;PTM.				;AN000;
 19421                                  	;call	LCritDisk	;PTM.				;AN000;
 19422                                  	; 18/12/2022
 19423 0000313B E965E2                  	jmp	LCritDisk
 19424                                  ;localcommit_retn:
 19425                                  ;	retn
 19426                                  
 19427                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19428                                  ;----------------------------------------------------------------------------
 19429                                  ;
 19430                                  ; Procedure Name : SetSFTTimes
 19431                                  ;
 19432                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19433                                  ;   Reflect these times in other SFT's for the same file.
 19434                                  ;
 19435                                  ;   Inputs:	ES:DI point to SFT
 19436                                  ;		BX = sf_flags set apprpriately
 19437                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19438                                  ;   Registers modified: All except ES:DI, BX, AX
 19439                                  ;
 19440                                  ;----------------------------------------------------------------------------
 19441                                  
 19442                                  SetSFTTimes:
 19443                                  ;	File clean or device does not get stamped nor disk looked at.
 19444                                  	
 19445                                  	;test	bx,0C0h
 19446                                  	; 17/12/2022
 19447 0000313E F6C3C0                  	test	bl,devid_file_clean+devid_device
 19448                                  	;TEST	BX,devid_file_clean+devid_device
 19449                                  	;retnz				; clean or device => no timestamp
 19450 00003141 75E3                    	jnz	short localcommit_retn
 19451                                  
 19452                                  ;	file and dirty. See if date is good
 19453                                  
 19454                                  	;test	bx,4000h
 19455                                  	; 17/12/2022
 19456                                  	;test	bh,40h
 19457 00003143 F6C740                  	test	bh,(sf_close_nodate>>8)
 19458                                  	;TEST	BX,sf_close_nodate
 19459                                  	;retnz				; nodate => no timestamp
 19460 00003146 75DE                    	jnz	short localcommit_retn
 19461                                  
 19462 00003148 50                      	push	ax
 19463 00003149 53                      	push	bx
 19464 0000314A E8F9D9                  	call	DATE16			; Date/Time to AX/DX
 19465                                  	;mov	[es:di+0Fh],ax
 19466 0000314D 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 19467                                  	;mov	[es:di+0Dh],dx
 19468 00003151 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 19469 00003155 31C0                    	XOR	AX,AX
 19470                                  ;if installed
 19471                                  	;call	JShare + 14 * 4
 19472 00003157 FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 19473                                  ;else
 19474                                  ;	call	ShSU
 19475                                  ;endif
 19476 0000315B 5B                      	pop	bx
 19477 0000315C 58                      	pop	ax
 19478 0000315D C3                      	retn
 19479                                  
 19480                                  ;============================================================================
 19481                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 19482                                  ;============================================================================
 19483                                  ; 23/07/2018 - Retro DOS v3.0
 19484                                  ; 18/05/2019 - Retro DOS v4.0
 19485                                  
 19486                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 19487                                  
 19488                                  ;TITLE DIRCALL - Directory manipulation internal calls
 19489                                  ;NAME  DIRCALL
 19490                                  
 19491                                  ;**	Low level directory manipulation routines for making removing and
 19492                                  ;	  verifying local or NET directories
 19493                                  ;
 19494                                  ;	DOS_MKDIR
 19495                                  ;	DOS_CHDIR
 19496                                  ;	DOS_RMDIR
 19497                                  ;
 19498                                  ;	Modification history:
 19499                                  ;
 19500                                  ;		Created: ARR 30 March 1983
 19501                                  
 19502                                  ;BREAK <DOS_MkDir - Make a directory entry>
 19503                                  ;---------------------------------------------------------------------------
 19504                                  ;
 19505                                  ; Procedure Name : DOS_MkDir
 19506                                  ;
 19507                                  ; Inputs:
 19508                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19509                                  ;		terminated)
 19510                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19511                                  ;		( = -1 if current dir not involved, else
 19512                                  ;		 Points to first char after last "/" of current dir part)
 19513                                  ;	[THISCDS] Points to CDS being used
 19514                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19515                                  ; Function:
 19516                                  ;	Make a new directory
 19517                                  ; Returns:
 19518                                  ;	Carry Clear
 19519                                  ;		No error
 19520                                  ;	Carry Set
 19521                                  ;	    AX is error code
 19522                                  ;		error_path_not_found
 19523                                  ;			Bad path (not in curr dir part if present)
 19524                                  ;		error_bad_curr_dir
 19525                                  ;			Bad path in current directory part of path
 19526                                  ;		error_access_denied
 19527                                  ;			Already exists, device name
 19528                                  ; DS preserved, Others destroyed
 19529                                  ;---------------------------------------------------------------------------
 19530                                  
 19531                                  ;hkn; called from path.asm. DS already set up.
 19532                                  
 19533                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19534                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 19535                                  
 19536                                  DOS_MKDIR:
 19537 0000315E E862E1                  	call	TestNet
 19538 00003161 7313                    	JNC	short LOCAL_MKDIR
 19539                                  
 19540                                  ;IF NOT Installed
 19541                                  ;	transfer NET_MKDIR
 19542                                  ;ELSE
 19543                                  	;mov	ax,1103h
 19544 00003163 B80311                  	MOV	AX,(MultNET<<8)|3
 19545 00003166 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 19546                                  			; SS = DOS CS
 19547                                  			; SDA first filename pointer -> fully-qualified directory name
 19548                                  			; SDA CDS pointer -> current directory
 19549                                  			; Return: CF set on error, AX = DOS error code
 19550                                  			; CF clear if successful
 19551 00003168 C3                      	retn
 19552                                  ;ENDIF
 19553                                  
 19554                                  NODEACCERRJ:
 19555                                  	;mov	ax,5
 19556 00003169 B80500                  	MOV	AX,error_access_denied
 19557                                  _BadRet:
 19558 0000316C F9                      	STC
 19559                                  	;call	LCritDisk
 19560                                  	;retn
 19561                                  	; 18/12/2022
 19562 0000316D E933E2                  	jmp	LCritDisk
 19563                                  
 19564                                  PATHNFJ:
 19565 00003170 E830E2                  	call	LCritDisk
 19566 00003173 E9E5F9                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 19567                                  
 19568                                  LOCAL_MKDIR:
 19569 00003176 E80FE2                  	call	ECritDisk
 19570                                  
 19571                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 19572                                  
 19573 00003179 8C16[A005]              	MOV	[THISSFT+2],SS
 19574                                  
 19575                                  ;hkn; DOSDATA
 19576 0000317D C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 19577                                  
 19578                                  ;  NOTE: Need WORD PTR because MASM takes type of
 19579                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 19580                                  
 19581                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 19582 00003183 C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 19583                                  				; make sure SHARER won't complain.
 19584                                  	;mov	al,10h
 19585 00003189 B010                    	MOV	AL,attr_directory
 19586 0000318B E8E818                  	call	MakeNode
 19587 0000318E 72E0                    	JC	short PATHNFJ
 19588 00003190 83F803                  	CMP	AX,3
 19589 00003193 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 19590 00003195 C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 19591 00003199 C53E[E205]              	LDS	DI,[CURBUF]
 19592 0000319D 29FE                    	SUB	SI,DI
 19593 0000319F 56                      	PUSH	SI		; Pointer to dir_first
 19594                                  	; MSDOS 6.0
 19595                                  	;push	word [DI+8]
 19596 000031A0 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 19597                                  	; MSDOS 3.3 & MSDOS 6.0
 19598                                  	;push	word [di+6]
 19599 000031A3 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 19600 000031A6 16                      	push	ss
 19601 000031A7 1F                      	pop	ds
 19602 000031A8 FF36[C205]              	PUSH	word [DIRSTART]	; Parent for .. entry
 19603 000031AC 31C0                    	XOR	AX,AX
 19604 000031AE A3[C205]                	MOV	[DIRSTART],AX	; Null directory
 19605 000031B1 E8F517                  	call	NEWDIR
 19606 000031B4 7276                    	JC	short NODEEXISTSPOPDEL ; No room
 19607 000031B6 E89C0D                  	call	GETENT		; First entry
 19608 000031B9 7271                    	JC	short NODEEXISTSPOPDEL ; Screw up
 19609 000031BB C43E[E205]              	LES	DI,[CURBUF]
 19610                                  
 19611                                  	; MSDOS 6.0
 19612 000031BF 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 19613                                  				 ;LB. if already dirty		    ;AN000;
 19614 000031C4 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 19615 000031C6 E89C2A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 19616                                  	
 19617                                  	; MSDOS 3.3 & MSDOS 6.0
 19618                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 19619 000031C9 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 19620                                  yesdirty5:
 19621                                  	;;add	di,16 ; MSDOS 3.3
 19622                                  	;add	di,20 ; MSDOS 6.0
 19623 000031CE 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 19624 000031D1 B82E20                  	MOV	AX,202EH	; ". "
 19625 000031D4 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 19626 000031D8 E87718                  	call	SETDOTENT
 19627 000031DB B82E2E                  	MOV	AX,2E2EH	; ".."
 19628 000031DE 5A                      	POP	DX		; Parent
 19629 000031DF E87018                  	call	SETDOTENT
 19630 000031E2 C42E[8A05]              	LES	BP,[THISDPB]
 19631                                  	;mov	byte [ALLOWED],18h
 19632 000031E6 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19633 000031EB 5A                      	POP	DX		; Entry sector
 19634                                  	; MSDOS 6.0
 19635 000031EC 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 19636                                  
 19637 000031F0 30C0                    	XOR	AL,AL		; Pre read
 19638 000031F2 E86A28                  	call	GETBUFFR
 19639 000031F5 7262                    	JC	short NODEEXISTSP
 19640 000031F7 8B16[C205]              	MOV	DX,[DIRSTART]
 19641 000031FB C53E[E205]              	LDS	DI,[CURBUF]
 19642                                  	;or	byte [di+5],4
 19643 000031FF 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19644 00003203 5E                      	POP	SI		; dir_first pointer
 19645 00003204 01FE                    	ADD	SI,DI
 19646 00003206 8914                    	MOV	[SI],DX
 19647 00003208 31D2                    	XOR	DX,DX
 19648 0000320A 895402                  	MOV	[SI+2],DX	; Zero size
 19649 0000320D 895404                  	MOV	[SI+4],DX
 19650                                  DIRUP:
 19651                                  	; MSDOS 6.0
 19652 00003210 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 19653                                  	;			 ;LB. if already dirty 		   ;AN000;
 19654 00003214 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 19655 00003216 E84C2A                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 19656                                  	
 19657                                  	; MSDOS 3.3 & MSDOS 6.0
 19658                                  	;or	byte [di+5],40h
 19659 00003219 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 19660                                  yesdirty6:
 19661 0000321D 16                      	push	ss
 19662 0000321E 1F                      	pop	ds
 19663 0000321F 268A4600                	mov	al,[es:bp]
 19664                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 19665 00003223 E83729                  	call	FLUSHBUF
 19666                                  	;mov	ax,5
 19667 00003226 B80500                  	MOV	AX,error_access_denied
 19668                                  	;call	LCritDisk
 19669                                  	;retn
 19670                                  	; 18/12/2022
 19671 00003229 E977E1                  	jmp	LCritDisk
 19672                                  
 19673                                  NODEEXISTSPOPDEL:
 19674 0000322C 5A                      	POP	DX		; Parent
 19675 0000322D 5A                      	POP	DX		; Entry sector
 19676                                  	; MSDOS 6.0 
 19677 0000322E 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 19678 00003232 C42E[8A05]              	LES	BP,[THISDPB]
 19679                                  	;mov	byte [ALLOWED],18h
 19680 00003236 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19681 0000323B 30C0                    	XOR	AL,AL		; Pre read
 19682 0000323D E81F28                  	call	GETBUFFR
 19683 00003240 7217                    	JC	short NODEEXISTSP
 19684 00003242 C53E[E205]              	LDS	DI,[CURBUF]
 19685                                  	;or	byte [di+5],4
 19686 00003246 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19687 0000324A 5E                      	POP	SI		; dir_first pointer
 19688 0000324B 01FE                    	ADD	SI,DI
 19689                                  	;sub	si,1Ah ; 26
 19690 0000324D 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 19691 00003250 C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 19692 00003253 E8BAFF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 19693                                  NODEEXISTS:
 19694 00003256 E910FF                  	JMP	NODEACCERRJ ; 10/08/2018
 19695                                  
 19696                                  NODEEXISTSP:
 19697 00003259 5E                      	POP	SI		; Clean stack
 19698 0000325A EBFA                    	JMP	short NODEEXISTS
 19699                                  
 19700                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19701                                  
 19702                                  ;BREAK <DOS_ChDir -- Verify a directory>
 19703                                  ;----------------------------------------------------------------------------
 19704                                  ;
 19705                                  ; Procedure Name : DOS_ChDir
 19706                                  ;
 19707                                  ; Inputs:
 19708                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19709                                  ;		terminated)
 19710                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19711                                  ;		( = -1 if current dir not involved, else
 19712                                  ;		 Points to first char after last "/" of current dir part)
 19713                                  ;	[THISCDS] Points to CDS being used May not be NUL
 19714                                  ; Function:
 19715                                  ;	Validate the path for potential new current directory
 19716                                  ; Returns:
 19717                                  ;	NOTE:
 19718                                  ;	    [SATTRIB] is modified by this call
 19719                                  ;	Carry Clear
 19720                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 19721                                  ;		Caller must NOT set ID fields on a NET CDS.
 19722                                  ;	Carry Set
 19723                                  ;	    AX is error code
 19724                                  ;		error_path_not_found
 19725                                  ;			Bad path
 19726                                  ;		error_access_denied
 19727                                  ;			device or file name
 19728                                  ; DS preserved, Others destroyed
 19729                                  ;----------------------------------------------------------------------------
 19730                                  
 19731                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 19732                                  
 19733                                  ; 18/05/2019 - Retro DOS v4.0
 19734                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 19735                                  
 19736                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19737                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 19738                                  
 19739                                  DOS_CHDIR:
 19740 0000325C E864E0                  	call	TestNet
 19741 0000325F 7306                    	JNC	short LOCAL_CHDIR
 19742                                  
 19743                                  ;IF NOT Installed
 19744                                  ;	transfer NET_CHDIR
 19745                                  ;ELSE
 19746                                  	;mov	ax,1105h
 19747 00003261 B80511                  	MOV	AX,(MultNET<<8)|5
 19748 00003264 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 19749                                  			; SS = DOS CS
 19750                                  			; SDA first filename pointer -> fully-qualified directory name
 19751                                  			; SDA CDS pointer -> current directory
 19752                                  			; Return: CF set on error, AX = DOS error code
 19753                                  			; CF clear if successful
 19754 00003266 C3                      	retn
 19755                                  ;ENDIF
 19756                                  
 19757                                  LOCAL_CHDIR:
 19758 00003267 E81EE1                  	call	ECritDisk
 19759                                  	; MSDOS 6.0
 19760                                  	;;test	word [es:di+43h],2000h
 19761                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 19762                                  	; 17/12/2022
 19763                                  	;test	byte [es:di+44h],20h
 19764 0000326A 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 19765 0000326F 7406                    	JZ	short nojoin		   ;PTM.
 19766                                  	;mov	word [es:di+49h], 0FFFFh
 19767 00003271 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 19768                                  nojoin:
 19769                                  	; MSDOS 3.3 & MSDOS 6.0
 19770 00003277 C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 19771                                  	;mov	byte [SATTRIB],16h
 19772 0000327C C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19773                                  				; Dir calls can find these
 19774                                  ; DOS 3.3  6/24/86 FastOpen
 19775 00003281 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 19776 00003286 E85A0D                  	call	GETPATH
 19777 00003289 9C                      	PUSHF						;AN000;
 19778 0000328A 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 19779 0000328F 9D                      	POPF						;AN000;
 19780                                  ; DOS 3.3  6/24/86 FastOpen
 19781                                  
 19782                                  	; MSDOS 3.3
 19783                                  	;mov	byte [FastOpenFlg],0
 19784                                  	
 19785                                  	;mov	ax,3
 19786 00003290 B80300                  	MOV	AX,error_path_not_found
 19787 00003293 7207                    	JC	short ChDirDone
 19788 00003295 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19789 00003297 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 19790 0000329B F8                      	CLC
 19791                                  ChDirDone:
 19792                                  	;call	LCritDisk
 19793                                  	;retn
 19794                                  	; 18/12/2022
 19795 0000329C E904E1                  	jmp	LCritDisk
 19796                                  
 19797                                  ;BREAK <DOS_RmDir -- Remove a directory>
 19798                                  ;----------------------------------------------------------------------------
 19799                                  ;
 19800                                  ; Procedure Name : DOS_RmDir
 19801                                  ;
 19802                                  ; Inputs:
 19803                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19804                                  ;		terminated)
 19805                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19806                                  ;		( = -1 if current dir not involved, else
 19807                                  ;		 Points to first char after last "/" of current dir part)
 19808                                  ;	[THISCDS] Points to CDS being used
 19809                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19810                                  ; Function:
 19811                                  ;	Remove a directory
 19812                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 19813                                  ; Returns:
 19814                                  ;	NOTE:
 19815                                  ;	    [SATTRIB] is modified by this call
 19816                                  ;	Carry Clear
 19817                                  ;		No error
 19818                                  ;	Carry Set
 19819                                  ;	    AX is error code
 19820                                  ;		error_path_not_found
 19821                                  ;			Bad path (not in curr dir part if present)
 19822                                  ;		error_bad_curr_dir
 19823                                  ;			Bad path in current directory part of path
 19824                                  ;		error_access_denied
 19825                                  ;			device or file name, root directory
 19826                                  ;			Bad directory ('.' '..' messed up)
 19827                                  ; DS preserved, Others destroyed
 19828                                  ;----------------------------------------------------------------------------
 19829                                  
 19830                                  ;hkn; called from path.asm. DS already set up.
 19831                                  
 19832                                  ; 18/05/2019 - Retro DOS v4.0
 19833                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 19834                                  
 19835                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19836                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 19837                                  
 19838                                  DOS_RMDIR:
 19839 0000329F E821E0                  	call	TestNet
 19840 000032A2 7306                    	JNC	short LOCAL_RMDIR
 19841                                  
 19842                                  ;IF NOT Installed
 19843                                  ;	transfer NET_RMDIR
 19844                                  ;ELSE
 19845                                  	;mov	ax,1101h
 19846 000032A4 B80111                  	MOV	AX,(MultNET<<8)|1
 19847 000032A7 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 19848                                  			; SS = DOS CS
 19849                                  			; SDA first filename pointer -> fully-qualified directory name
 19850                                  			; SDA CDS pointer -> current directory
 19851                                  			; Return: CF set on error, AX = DOS error code
 19852                                  			; CF clear if successful
 19853 000032A9 C3                      	retn
 19854                                  ;ENDIF
 19855                                  
 19856                                  LOCAL_RMDIR:
 19857 000032AA E8DBE0                  	call	ECritDisk
 19858 000032AD C606[4C03]00            	MOV	byte [NoSetDir],0
 19859                                  	;mov	byte [SATTRIB],16h
 19860 000032B2 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19861                                  					; Dir calls can find these
 19862 000032B7 E8290D                  	call	GETPATH
 19863 000032BA 720C                    	JC	short NOPATH		; Path not found
 19864 000032BC 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19865 000032BE 8B3E[C205]              	MOV	DI,[DIRSTART]
 19866 000032C2 09FF                    	OR	DI,DI			; Root ?
 19867 000032C4 750E                    	JNZ	short rmdir_get_buf	; No
 19868 000032C6 EB09                    	JMP	SHORT NOTDIRPATH
 19869                                  
 19870                                  NOPATH:
 19871                                  	;mov	ax,3
 19872 000032C8 B80300                  	MOV	AX,error_path_not_found
 19873 000032CB E99EFE                  	JMP	_BadRet
 19874                                  
 19875                                  NOTDIRPATHPOP:
 19876 000032CE 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 19877 000032CF 58                      	POP	AX
 19878                                  NOTDIRPATHPOP2:
 19879 000032D0 58                      	POP	AX
 19880                                  NOTDIRPATH:
 19881 000032D1 E995FE                  	JMP	NODEACCERRJ
 19882                                  
 19883                                  rmdir_get_buf:
 19884 000032D4 C53E[E205]              	LDS	DI,[CURBUF]
 19885 000032D8 29FB                    	SUB	BX,DI		; Compute true offset
 19886 000032DA 53                      	PUSH	BX		; Save entry pointer
 19887                                  	
 19888                                  	; MSDOS 6.0
 19889                                  	;push	word [di+8]
 19890 000032DB FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 19891                                  	
 19892                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19893                                  	;push	word [di+6]
 19894 000032DE FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 19895                                  
 19896                                  ;hkn; SS is DOSDATA
 19897                                  	;context DS
 19898 000032E1 16                      	push	ss
 19899 000032E2 1F                      	pop	ds
 19900                                  	;context ES
 19901 000032E3 16                      	push	ss
 19902 000032E4 07                      	pop	es
 19903                                  
 19904                                  ;hkn; NAME1 is in DOSDATA
 19905 000032E5 BF[4B05]                	MOV	DI,NAME1
 19906 000032E8 B03F                    	MOV	AL,'?'
 19907 000032EA B90B00                  	MOV	CX,11
 19908 000032ED F3AA                    	REP	STOSB
 19909 000032EF 30C0                    	XOR	AL,AL
 19910 000032F1 AA                      	STOSB				; Nul terminate it
 19911 000032F2 E8900F                  	call	STARTSRCH		; Set search
 19912 000032F5 E85A0C                  	call	GETENTRY		; Get start of directory
 19913 000032F8 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 19914 000032FA 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19915 000032FE 89DE                    	MOV	SI,BX
 19916 00003300 AD                      	LODSW
 19917                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 19918 00003301 3D2E20                  	cmp	ax,202Eh ; ". "
 19919 00003304 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 19920                                  	;add	si,30
 19921 00003306 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 19922 00003309 AD                      	LODSW
 19923                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 19924                                  	;cmp	ax, '..'
 19925 0000330A 3D2E2E                  	cmp	ax,2E2Eh
 19926 0000330D 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 19927                                  
 19928                                  ;hkn; SS is DOSDATA
 19929                                  	;context DS
 19930 0000330F 16                      	push	ss
 19931 00003310 1F                      	pop	ds
 19932 00003311 C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 19933 00003317 E8380C                  	call	GETENTRY		; Get next entry
 19934 0000331A 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 19935                                  	;mov	byte [ATTRIB],16h
 19936 0000331C C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 19937 00003321 E82D0B                  	call	SRCH			; Do a search
 19938 00003324 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 19939 00003326 803E[4A03]00            	CMP	byte [FAILERR],0
 19940 0000332B 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 19941 0000332D C42E[8A05]              	LES	BP,[THISDPB]
 19942 00003331 8B1E[C205]              	MOV	BX,[DIRSTART]
 19943 00003335 E8811C                  	call	RELEASE 		; Release data in sub dir
 19944 00003338 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 19945 0000333A 5A                      	POP	DX			; Sector # of entry
 19946 0000333B 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 19947                                  	;mov	byte [ALLOWED],18h
 19948 0000333F C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19949 00003344 30C0                    	XOR	AL,AL			; Pre read
 19950 00003346 E81627                  	call	GETBUFFR		; Get sector back
 19951 00003349 7285                    	JC	short NOTDIRPATHPOP2	; Screw up
 19952 0000334B C53E[E205]              	LDS	DI,[CURBUF]
 19953                                  	;or	byte [di+5],4
 19954 0000334F 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19955 00003353 5B                      	POP	BX			; Pointer to start of entry
 19956 00003354 01FB                    	ADD	BX,DI			; Corrected
 19957 00003356 C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 19958                                  
 19959                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19960 00003359 1E                      	PUSH	DS
 19961                                  
 19962                                  ;hkn; SS is DOSDATA
 19963                                  	;context DS
 19964 0000335A 16                      	push	ss
 19965 0000335B 1F                      	pop	ds
 19966                                  
 19967                                  	; MSDOS 6.0
 19968 0000335C E8EDF3                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 19969                                  
 19970                                  ;	; MSDOS 3.3
 19971                                  ;_FastOpen_Delete:
 19972                                  ;	push	ax
 19973                                  ;	mov	si,[WFP_START]
 19974                                  ;	mov	bx,FastTable
 19975                                  ;	;mov	al,3  ; FONC_delete
 19976                                  ;	mov	al,FONC_delete
 19977                                  ;	call	far [BX+2]  ; FastTable+2
 19978                                  ;	pop	ax
 19979                                  
 19980 0000335F 1F                      	POP	DS
 19981                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19982                                  
 19983 00003360 E9ADFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 19984                                  
 19985                                  ;============================================================================
 19986                                  ; DISK.ASM, MSDOS 6.0, 1991
 19987                                  ;============================================================================
 19988                                  ; 23/07/2018 - Retro DOS v3.0 
 19989                                  ; 04/05/2019 - Retro DOS v4.0
 19990                                  
 19991                                  ;	TITLE	DISK - Disk utility routines
 19992                                  ;	NAME	Disk
 19993                                  
 19994                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19995                                  ;
 19996                                  ;	SWAPCON
 19997                                  ;	SWAPBACK
 19998                                  ;	DOS_READ
 19999                                  ;	DOS_WRITE
 20000                                  ;	get_io_sft
 20001                                  ;	DirRead
 20002                                  ;	FIRSTCLUSTER
 20003                                  ;	SET_BUF_AS_DIR
 20004                                  ;	FATSecRd
 20005                                  ;	DREAD
 20006                                  ;	CHECK_WRITE_LOCK
 20007                                  ;	CHECK_READ_LOCK
 20008                                  ;
 20009                                  ;	Revision history:
 20010                                  ;
 20011                                  ;		A000   version 4.00  Jan. 1988
 20012                                  ;
 20013                                  ;----------------------------------------------------------------------------
 20014                                  ;
 20015                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20016                                  ;		error happens, DOS retries the entire block assuming that
 20017                                  ;		zero characters were transferred. Modified the code to take
 20018                                  ;		into account the number of characters transfered before
 20019                                  ;		retrying the operation.
 20020                                  ;
 20021                                  ;----------------------------------------------------------------------------
 20022                                  ;
 20023                                  
 20024                                  ;Installed = TRUE
 20025                                  
 20026                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20027                                  
 20028                                  ; **** Drivers for file input from devices ****
 20029                                  ;----------------------------------------------------------------------------
 20030                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20031                                  ;   of handles 0 and 1
 20032                                  ;
 20033                                  ;   Inputs:	DS is DOSDATA
 20034                                  ;   Outputs:	CONSWAP is set to false.
 20035                                  ;   Registers modified: none
 20036                                  ;----------------------------------------------------------------------------
 20037                                  
 20038                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20039                                  
 20040                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20041                                  ; 04/05/2019 - Retro DOS v4.0
 20042                                  
 20043                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20044                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20045                                  
 20046                                  SWAPBACK:
 20047 00003363 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20048 00003368 C3                      	retn
 20049                                  
 20050                                  ;----------------------------------------------------------------------------
 20051                                  ;
 20052                                  ; Procedure Name : SWAPCON
 20053                                  ;
 20054                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20055                                  ;
 20056                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20057                                  ;		DS is DOSDATA
 20058                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20059                                  ;   Registers modified: none
 20060                                  ;--------------------------------------------------------------------------
 20061                                  
 20062                                  SWAPCON:
 20063                                  	; MSDOS 3.3
 20064                                  	;push	es
 20065                                  	;push	di
 20066                                  	;mov	byte [CONSWAP],1
 20067                                  	;les	di,[THISSFT]
 20068                                  	;mov	word [CONSFT],di
 20069                                  	;mov	word [CONSFT+2],es
 20070                                  	;pop	di
 20071                                  	;pop	es
 20072                                  	;retn
 20073                                  
 20074                                  	; MSDOS 6.0
 20075 00003369 C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20076 0000336E 50                      	push	ax
 20077 0000336F A1[9E05]                	mov	ax,[THISSFT]
 20078 00003372 A3[E605]                	mov	[CONSFT],ax
 20079 00003375 A1[A005]                	mov	ax,[THISSFT+2]
 20080 00003378 A3[E805]                	mov	[CONSFT+2],ax
 20081 0000337B 58                      	pop	ax
 20082 0000337C C3                      	retn
 20083                                  
 20084                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20085                                  ; 04/05/2019 - Retro DOS v4.0
 20086                                  
 20087                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20088                                  ;-----------------------------------------------------------------------------
 20089                                  ;
 20090                                  ; Inputs:
 20091                                  ;	ThisSFT set to the SFT for the file being used
 20092                                  ;	[DMAADD] contains transfer address
 20093                                  ;	CX = No. of bytes to read
 20094                                  ;	DS = DOSDATA
 20095                                  ; Function:
 20096                                  ;	Perform read operation
 20097                                  ; Outputs:
 20098                                  ;    Carry clear
 20099                                  ;	SFT Position and cluster pointers updated
 20100                                  ;	CX = No. of bytes read
 20101                                  ;	ES:DI point to SFT
 20102                                  ;    Carry set
 20103                                  ;	AX is error code
 20104                                  ;	CX = 0
 20105                                  ;	ES:DI point to SFT
 20106                                  ; DS preserved, all other registers destroyed
 20107                                  ;
 20108                                  ;-----------------------------------------------------------------------------
 20109                                  
 20110                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20111                                  
 20112                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20113                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20114                                  
 20115                                  DOS_READ:
 20116 0000337D C43E[9E05]              	LES	DI,[THISSFT]
 20117                                  
 20118                                  ; Verify that the sft has been opened in a mode that allows reading.
 20119                                  
 20120                                  	;mov	al,[es:di+2]
 20121 00003381 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20122                                  	;and	al,0Fh
 20123 00003385 240F                    	AND	AL,access_mask
 20124                                  	;cmp	al,1
 20125 00003387 3C01                    	CMP	AL,open_for_write
 20126 00003389 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20127 0000338B E91506                  	jmp	SET_ACC_ERR
 20128                                  
 20129                                  READ_NO_MODE:
 20130 0000338E E8ED04                  	call	SETUP
 20131 00003391 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20132 00003393 E846DF                  	call	IsSFTNet
 20133 00003396 7408                    	JZ	short LOCAL_READ
 20134                                  
 20135                                  ;IF NOT Installed
 20136                                  ;	transfer NET_READ
 20137                                  ;ELSE
 20138                                  	;mov	ax,1108h
 20139 00003398 B80811                  	MOV	AX,(MultNET<<8)|8
 20140 0000339B CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20141                                  			; ES:DI -> SFT
 20142                                  			; SFT DPB field -> DPB of drive containing file
 20143                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20144                                  			; Return: CF set on error, CX = bytes read
 20145 0000339D C3                      	retn
 20146                                  ;ENDIF
 20147                                  
 20148                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20149                                  ; except return immediately.
 20150                                  
 20151                                  NoIORet:
 20152 0000339E F8                      	CLC
 20153 0000339F C3                      	retn
 20154                                  
 20155                                  LOCAL_READ:
 20156                                  	;test	word [es:di+5],80h
 20157                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20158 000033A0 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20159 000033A5 750E                    	JNZ	short READDEV
 20160                                  
 20161                                  	;mov	byte [EXTERR_LOCUS],2
 20162 000033A7 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20163 000033AC E8D9DF                  	call	ECritDisk
 20164 000033AF E8AD05                  	call	DISKREAD
 20165                                  
 20166                                  critexit:
 20167                                  	;call	LCritDisk
 20168                                  	;retn
 20169                                  	; 16/12/2022
 20170 000033B2 E9EEDF                  	jmp	LCritDisk
 20171                                  
 20172                                  ; We are reading from a device. Examine the status of the device to see if we
 20173                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20174                                  ; null device, we can safely indicate no transfer.
 20175                                  
 20176                                  READDEV:
 20177                                  	;mov	byte [EXTERR_LOCUS],4
 20178 000033B5 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20179                                  	;mov	bl,[es:di+5]
 20180 000033BA 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20181 000033BE C43E[2C03]              	LES	DI,[DMAADD]
 20182                                  	;test	bl,40h
 20183 000033C2 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20184 000033C5 7407                    	JZ	short ENDRDDEVJ3
 20185                                  	;test	bl,4
 20186 000033C7 F6C304                  	test	BL,devid_device_null	; NUL device?
 20187 000033CA 7405                    	JZ	short TESTRAW 		; NO
 20188 000033CC 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20189                                  ENDRDDEVJ3:
 20190                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20191                                  	;JMP	short ENDRDDEVJ2
 20192                                  	; 16/12/2022
 20193 000033CE E96701                  	jmp	ENDRDDEV ; 04/05/2019
 20194                                  
 20195                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20196                                  ; bizarre std_con_string_input.
 20197                                  
 20198                                  TESTRAW:
 20199                                  	;test	bl,20h
 20200 000033D1 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20201 000033D4 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20202                                  	;test	bl,1
 20203 000033D6 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20204 000033D9 7461                    	JZ	short NOTRDCON
 20205 000033DB E98F01                  	JMP	READCON
 20206                                  
 20207                                  DVRDRAW:
 20208 000033DE 06                      	PUSH	ES
 20209 000033DF 1F                      	POP	DS			; Xaddr to DS:DI
 20210                                  
 20211                                  	; 04/05/2019 - Retro DOS v4.0
 20212                                  
 20213                                  	; MSDOS 6.0
 20214                                  ;SR;
 20215                                  ;Check for win386 presence -- if present, do polled read of characters
 20216                                  
 20217 000033E0 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20218 000033E6 7408                    	jz	short ReadRawRetry	;not present
 20219 000033E8 F6C301                  	test	bl,devid_device_con_in	;is it console device
 20220 000033EB 7403                    	jz	short ReadRawRetry	;no, do normal read
 20221 000033ED E9BA00                  	jmp	do_polling		;yes, do win386 polling loop
 20222                                  
 20223                                  ReadRawRetry:
 20224 000033F0 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 20225 000033F2 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20226 000033F4 89C2                    	MOV	DX,AX			; Start at 0
 20227 000033F6 E8C213                  	call	SETREAD
 20228 000033F9 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20229                                  
 20230                                  ;hkn; SS override
 20231 000033FA 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20232 000033FF E84013                  	call	DEVIOCALL
 20233 00003402 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20234 00003404 B486                    	MOV	AH,86H			; Read error
 20235                                  
 20236                                  ;hkn; SS override
 20237 00003406 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20238                                  	; MSDOS 3.3
 20239                                  	;test	di,8000h
 20240                                  	;jz	short CRDROK
 20241                                  	; MSDOS 6.0
 20242 0000340B 09FF                    	or	di,di
 20243 0000340D 7923                    	jns	short CRDROK		; no errors
 20244                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20245 0000340F E8C01F                  	call	CHARHARD
 20246 00003412 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 20247                                  
 20248                                  	; 04/05/2019
 20249                                  
 20250                                  	; MSDOS 6.0
 20251 00003414 36033E[6C03]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20252 00003419 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20253                                  
 20254                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20255 0000341E 08C0                    	OR	AL,AL
 20256 00003420 7410                    	JZ	short CRDROK		; Ignore
 20257 00003422 3C03                    	CMP	AL,3
 20258 00003424 7403                    	JZ	short CRDFERR 		; fail.
 20259 00003426 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20260 00003427 EBC7                    	JMP	short ReadRawRetry	; Retry
 20261                                  
 20262                                  ; We have encountered a device-driver error. We have informed the user of it
 20263                                  ; and he has said for us to fail the system call.
 20264                                  
 20265                                  CRDFERR:
 20266 00003429 5F                      	POP	DI			; Clean stack
 20267                                  DEVIOFERR:
 20268                                  
 20269                                  ;hkn; SS override
 20270 0000342A 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20271 0000342F E96F05                  	jmp	SET_ACC_ERR_DS
 20272                                  
 20273                                  CRDROK:
 20274 00003432 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20275 00003433 89D7                    	MOV	DI,DX
 20276                                  
 20277                                  ;hkn; SS override
 20278 00003435 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20279                                  	;JMP	SHORT ENDRDDEVJ3
 20280                                  	; 16/12/2022
 20281 0000343A EB6B                    	jmp	short ENDRDDEVJ2
 20282                                  
 20283                                  ; We are going to do a cooked read on some character device. There is a
 20284                                  ; problem here, what does the data look like? Is it a terminal device, line
 20285                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20286                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20287                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20288                                  ; included in data). this "simulates" the way con works in cooked mode
 20289                                  ; reading one line at a time. With file data, however, the lines will look
 20290                                  ; like, LF line CR. This is a little weird.
 20291                                  
 20292                                  NOTRDCON:
 20293 0000343C 8CC0                    	MOV	AX,ES
 20294 0000343E 8ED8                    	MOV	DS,AX
 20295 00003440 89FB                    	MOV	BX,DI
 20296 00003442 31D2                    	XOR	DX,DX
 20297 00003444 89D0                    	MOV	AX,DX
 20298 00003446 51                      	PUSH	CX
 20299 00003447 B90100                  	MOV	CX,1
 20300 0000344A E86E13                  	call	SETREAD
 20301 0000344D 59                      	POP	CX
 20302                                  
 20303                                  ;hkn; SS override
 20304 0000344E 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20305                                  	;lds	si,[si+7]
 20306 00003453 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20307                                  DVRDLP:
 20308 00003456 E8591D                  	call	DSKSTATCHK
 20309 00003459 E8E912                  	call	DEVIOCALL2
 20310 0000345C 57                      	PUSH	DI		; Save "count" done
 20311 0000345D B486                    	MOV	AH,86H
 20312                                  
 20313                                  ;hkn; SS override
 20314 0000345F 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20315                                  	
 20316                                  	; MSDOS 3.3
 20317                                  	;test	di,8000h
 20318                                  	;jz	short CRDOK
 20319                                  	; MSDOS 6.0
 20320 00003464 09FF                    	or	di,di
 20321 00003466 7917                    	jns	short CRDOK
 20322                                  	
 20323 00003468 E8671F                  	call	CHARHARD
 20324 0000346B 5F                      	POP	DI
 20325                                  
 20326                                  ;hkn; SS override
 20327 0000346C 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20328 00003473 3C01                    	CMP	AL,1
 20329 00003475 74DF                    	JZ	short DVRDLP		;Retry
 20330 00003477 3C03                    	CMP	AL,3
 20331 00003479 74AF                    	JZ	short DEVIOFERR		; FAIL
 20332 0000347B 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20333 0000347D EB12                    	JMP	SHORT DVRDIGN
 20334                                  
 20335                                  CRDOK:
 20336 0000347F 5F                      	POP	DI
 20337                                  
 20338                                  ;hkn; SS override
 20339 00003480 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20340                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20341 00003486 751F                    	JNZ	short ENDRDDEVJ2
 20342                                  	; 16/12/2022
 20343                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20344                                  
 20345 00003488 1E                      	PUSH	DS
 20346                                  
 20347                                  ;hkn; SS override
 20348 00003489 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20349 0000348E 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20350 00003490 1F                      	POP	DS
 20351                                  DVRDIGN:
 20352                                  
 20353                                  ;hkn; SS override
 20354 00003491 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20355 00003496 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20356 0000349D 47                      	INC	DI			; Next character
 20357 0000349E 3C1A                    	CMP	AL,1Ah			; ^Z?
 20358                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20359 000034A0 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20360                                  	; 16/12/2022
 20361                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20362 000034A2 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20363 000034A4 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20364 000034A6 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20365                                  					;  AX=FFFF which is not likely
 20366                                  ENDRDDEVJ2:
 20367                                  	; 16/12/2022
 20368                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20369                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20370 000034A7 E98E00                  	jmp	ENDRDDEV
 20371                                  
 20372                                  	; 04/05/2019
 20373                                  
 20374                                  	; MSDOS 6.0
 20375                                  ;SR;
 20376                                  ;Polling code for raw read on CON when WIN386 is present
 20377                                  ;
 20378                                  ;At this point -- ds:di is transfer address
 20379                                  ;		  cx is count
 20380                                  
 20381                                  do_polling:
 20382 000034AA 89FB                    	mov	bx,di			;ds:bx is Xfer address
 20383 000034AC 31C0                    	xor	ax,ax
 20384 000034AE 89C2                    	mov	dx,ax
 20385 000034B0 E80813                  	call	SETREAD			;prepare device packet
 20386                                  
 20387                                  do_io:
 20388                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 20389                                  
 20390 000034B3 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 20391 000034B8 1E                      	push	ds
 20392 000034B9 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 20393 000034BE E88112                  	call	DEVIOCALL		;call device driver
 20394 000034C1 1F                      	pop	ds
 20395                                  	
 20396                                  	;test	word [es:bx+3],8000h
 20397                                  	; 16/12/2022
 20398                                  	;test	byte [es:bx+4],80h
 20399 000034C2 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 20400                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 20401 000034C7 7413                    	jz	short check_busy	;no
 20402                                  
 20403 000034C9 1E                      	push	ds
 20404 000034CA 89FA                    	mov	dx,di
 20405                                  	;invoke charhard		;invoke int 24h handler
 20406 000034CC E8031F                  	call	CHARHARD
 20407 000034CF 89D7                    	mov	di,dx
 20408 000034D1 08C0                    	or	al,al
 20409 000034D3 745D                    	jz	short pop_done_read	;ignore by user, assume read done
 20410 000034D5 3C03                    	cmp	al,3
 20411 000034D7 7448                    	jz	short devrderr		;user asked to fail
 20412 000034D9 1F                      	pop	ds
 20413 000034DA EBD7                    	jmp	short do_io		;user asked to retry
 20414                                  
 20415                                  check_busy:
 20416                                  	;test	word [es:bx+3],200h
 20417                                  	; 16/12/2022
 20418 000034DC 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 20419                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 20420 000034E1 7547                    	jnz	short no_char		;yes, no character available
 20421                                  
 20422                                  ;Character is available. Read in 1 character at a time until all characters
 20423                                  ;are read in or no character is available
 20424                                  
 20425 000034E3 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 20426 000034E8 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 20427 000034EE 1E                      	push	ds
 20428 000034EF 36C536[9E05]            	lds	si,[ss:THISSFT]
 20429 000034F4 E84B12                  	call	DEVIOCALL
 20430                                  
 20431 000034F7 89FA                    	mov	dx,di
 20432 000034F9 B486                    	mov	ah,86h
 20433                                  	;mov	di,[es:bx+3]
 20434 000034FB 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 20435 000034FF F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 20436 00003503 7410                    	jz	short next_char		;no,read next character
 20437                                  
 20438                                  	;invoke	charhard		;invoke int 24h handler
 20439 00003505 E8CA1E                  	call	CHARHARD
 20440 00003508 89D7                    	mov	di,dx			;restore di
 20441 0000350A 08C0                    	or	al,al			;
 20442 0000350C 7424                    	jz	short pop_done_read	;ignore by user,assume read is done
 20443 0000350E 3C03                    	cmp	al,3
 20444 00003510 740F                    	jz	short devrderr		;user issued a 'fail',indicate error
 20445 00003512 1F                      	pop	ds
 20446 00003513 EB9E                    	jmp	short do_io		;user issued a retry
 20447                                  
 20448                                  next_char:
 20449 00003515 1F                      	pop	ds
 20450 00003516 89D7                    	mov	di,dx
 20451 00003518 49                      	dec	cx			;decrement count
 20452 00003519 E318                    	jcxz	done_read		;all characters read in
 20453 0000351B 26FF470E                	inc	word [es:bx+14]		;update transfer address
 20454 0000351F EB92                    	jmp	short do_io			;read next character in
 20455                                  
 20456                                  devrderr:
 20457 00003521 5F                      	pop	di			;discard segment address
 20458 00003522 36C43E[9E05]            	les	di,[ss:THISSFT]
 20459                                  	;transfer SET_ACC_ERR_DS	;indicate error
 20460 00003527 E97704                  	jmp     SET_ACC_ERR_DS
 20461                                  
 20462                                  no_char:
 20463                                  ;Since no character is available, we let win386 switch the VM out
 20464                                  
 20465 0000352A 50                      	push	ax
 20466 0000352B B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 20467 0000352D CD2A                    	int	2Ah			;indicate idle to WIN386
 20468                                  
 20469                                  ;When control returns from WIN386, we continue the raw read
 20470                                  
 20471 0000352F 58                      	pop	ax
 20472 00003530 EB81                    	jmp	do_io
 20473                                  
 20474                                  pop_done_read:
 20475 00003532 1F                      	pop	ds
 20476                                  done_read:
 20477 00003533 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 20478                                  
 20479                                  	; 16/12/2022
 20480                                  
 20481                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20482                                  	;jmp	ENDRDDEV ; 04/05/2019
 20483                                  
 20484                                  	; 04/05/2019 - Retro DOS v4.0
 20485                                  ENDRDDEV:
 20486 00003538 16                      	push	ss
 20487 00003539 1F                      	pop	ds
 20488 0000353A EB1F                    	jmp	short endrddev1
 20489                                  
 20490                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20491                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20492                                  
 20493                                  TRANBUF:
 20494 0000353C AC                      	LODSB
 20495 0000353D AA                      	STOSB
 20496 0000353E 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 20497 00003540 7503                    	JNZ	short NORMCH
 20498 00003542 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 20499                                  NORMCH:
 20500 00003545 3C0A                    	CMP	AL,c_LF ; 0Ah
 20501 00003547 E0F3                    	LOOPNZ	TRANBUF
 20502 00003549 7507                    	JNZ	short ENDRDCON
 20503 0000354B 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 20504 0000354D E893E1                  	call	OUTT		; Transmit linefeed
 20505 00003550 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 20506                                  ENDRDCON:
 20507                                  ;hkn; SS is DOSDATA
 20508 00003552 16                      	push	ss
 20509 00003553 1F                      	pop	ds
 20510 00003554 E80CFE                  	CALL	SWAPBACK
 20511 00003557 8936[2200]              	MOV	[CONTPOS],SI
 20512                                  
 20513                                  	; 16/12/2022
 20514                                  ;ENDRDDEV:
 20515                                  ;;hkn; SS is DOSDATA
 20516                                  ;	push	ss
 20517                                  ;	pop	ds
 20518                                  endrddev1:	; 04/05/2019
 20519 0000355B 893E[B805]              	MOV	[NEXTADD],DI
 20520 0000355F 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20521 00003561 C43E[9E05]              	LES	DI,[THISSFT]
 20522                                  	;and	byte [es:di+5],0BFh
 20523 00003565 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20524                                  				; Mark as no more data available
 20525                                  SETSFTC:
 20526                                  	; 31/07/2019
 20527                                  	;call	SETSFT
 20528                                  	;retn
 20529 0000356A E9C804                  	jmp	SETSFT
 20530                                  
 20531                                  ; 16/12/2022
 20532                                  %if 0
 20533                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20534                                  ENDRDDEV:
 20535                                  ;hkn; SS is DOSDATA
 20536                                  	push	ss
 20537                                  	pop	ds
 20538                                  	MOV	[NEXTADD],DI
 20539                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20540                                  	LES	DI,[THISSFT]
 20541                                  	;and	byte [es:di+5],0BFh
 20542                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20543                                  				; Mark as no more data available
 20544                                  SETSFTC:
 20545                                  	;call	SETSFT
 20546                                  	;retn
 20547                                  	jmp	SETSFT	
 20548                                  %endif
 20549                                  
 20550                                  READCON:
 20551 0000356D E8F9FD                  	CALL	SWAPCON
 20552 00003570 8B36[2200]              	MOV	SI,[CONTPOS]
 20553 00003574 09F6                    	OR	SI,SI
 20554 00003576 75C4                    	JNZ	short TRANBUF
 20555 00003578 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 20556 0000357D 7406                    	JZ	short GETBUF
 20557 0000357F C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 20558                                  GETBUF:
 20559 00003585 51                      	PUSH	CX
 20560 00003586 06                      	PUSH	ES
 20561 00003587 57                      	PUSH	DI
 20562                                  
 20563                                  ;hkn; CONBUF is in DOSDATA
 20564 00003588 BA[7B02]                	MOV	DX,CONBUF
 20565                                  
 20566 0000358B E8CADE                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 20567 0000358E 5F                      	POP	DI
 20568 0000358F 07                      	POP	ES
 20569 00003590 59                      	POP	CX
 20570                                  
 20571                                  ;hkn; CONBUF is in DOSDATA
 20572 00003591 BE[7D02]                	MOV	SI,CONBUF+2
 20573                                  
 20574 00003594 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 20575 00003597 75A3                    	JNZ	short TRANBUF
 20576 00003599 B01A                    	MOV	AL,1AH
 20577 0000359B AA                      	STOSB
 20578 0000359C 4F                      	DEC	DI
 20579 0000359D B00A                    	MOV	AL,c_LF
 20580 0000359F E841E1                  	call	OUTT		; Send linefeed
 20581 000035A2 31F6                    	XOR	SI,SI
 20582 000035A4 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 20583                                  
 20584                                  ; 24/07/2018 - Retro DOS v3.0
 20585                                  
 20586                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 20587                                  ;---------------------------------------------------------------------------
 20588                                  ;
 20589                                  ; Procedure Name : DOS_WRITE
 20590                                  ;
 20591                                  ; Inputs:
 20592                                  ;	ThisSFT set to the SFT for the file being used
 20593                                  ;	[DMAADD] contains transfer address
 20594                                  ;	CX = No. of bytes to write
 20595                                  ; Function:
 20596                                  ;	Perform write operation
 20597                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 20598                                  ;		to current sf_position
 20599                                  ; Outputs:
 20600                                  ;    Carry clear
 20601                                  ;	SFT Position and cluster pointers updated
 20602                                  ;	CX = No. of bytes written
 20603                                  ;	ES:DI point to SFT
 20604                                  ;    Carry set
 20605                                  ;	AX is error code
 20606                                  ;	CX = 0
 20607                                  ;	ES:DI point to SFT
 20608                                  ; DS preserved, all other registers destroyed
 20609                                  ;---------------------------------------------------------------------------
 20610                                  
 20611                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 20612                                  ;hkn; point to DOSDATA.
 20613                                  
 20614                                  ; 04/05/2019 - Retro DOS v4.0
 20615                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 20616                                  
 20617                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20618                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 20619                                  
 20620                                  DOS_WRITE:
 20621 000035A6 C43E[9E05]              	LES	DI,[THISSFT]
 20622                                  	;mov	al,[ES:DI+2]
 20623 000035AA 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20624                                  	;and	al,0Fh
 20625 000035AE 240F                    	AND	AL,access_mask
 20626                                  	;cmp	al,0
 20627 000035B0 3C00                    	CMP	AL,open_for_read
 20628 000035B2 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 20629                                  BadMode:
 20630 000035B4 E9EC03                  	jmp	SET_ACC_ERR
 20631                                  
 20632                                  ; NOTE: The following check for writting to a Read Only File is performed
 20633                                  ;	    ONLY on FCBs!!!!
 20634                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 20635                                  ;	    of a read only file which can then be written to.
 20636                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 20637                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 20638                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 20639                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 20640                                  ;	    to a read-only file.
 20641                                  
 20642                                  Check_FCB_RO:
 20643                                  	;;test	word [es:di+2],8000h
 20644                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 20645                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 20646                                  	
 20647                                  	;test	byte [es:di+3],80h
 20648 000035B7 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 20649 000035BC 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 20650                                  
 20651                                  	;test	byte [es:di+4],1
 20652 000035BE 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 20653 000035C3 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 20654                                  WRITE_NO_MODE:
 20655 000035C5 E8B602                  	call	SETUP
 20656 000035C8 E811DD                  	call	IsSFTNet
 20657 000035CB 7406                    	JZ	short LOCAL_WRITE
 20658                                  
 20659                                  ;IF NOT Installed
 20660                                  ;	transfer NET_WRITE
 20661                                  ;ELSE
 20662                                  	;mov	ax,1109h
 20663 000035CD B80911                  	MOV	AX,(MultNET<<8)|9
 20664 000035D0 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 20665                                  			; ES:DI -> SFT
 20666                                  			; SFT DPB field -> DPB of drive containing file
 20667                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20668                                  			; Return: CF set on error, CX = bytes written
 20669 000035D2 C3                      	retn
 20670                                  ;ENDIF
 20671                                  
 20672                                  LOCAL_WRITE:
 20673                                  	;;test	word [es:di+5],80h
 20674                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20675                                  	;jnz	short WRTDEV
 20676                                  
 20677                                  	;test	byte [es:di+5],80h
 20678 000035D3 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 20679 000035D8 756E                    	jnz	short WRTDEV
 20680                                  
 20681                                  	;mov	byte [EXTERR_LOCUS],2
 20682 000035DA C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20683 000035DF E8A6DD                  	call	ECritDisk
 20684                                  
 20685 000035E2 E80805                  	call	DISKWRITE
 20686                                  
 20687                                  	; 04/05/2019 - Retro DOS v4.0
 20688                                  
 20689                                  	; MSDOS 6.0
 20690                                  ; Extended Open
 20691 000035E5 7210                    	JC	short nocommit
 20692                                  	
 20693 000035E7 C43E[9E05]              	LES	DI,[THISSFT]
 20694                                  	
 20695                                  	;;test	word [ES:DI+2],4000h
 20696                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 20697                                  	;JZ	short nocommit
 20698                                  	
 20699                                  	;test	byte [ES:DI+3],40h
 20700 000035EB 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 20701 000035F0 7405                    	JZ	short nocommit
 20702                                  	
 20703 000035F2 51                      	PUSH	CX
 20704 000035F3 E819FB                  	call	DOS_COMMIT
 20705 000035F6 59                      	POP	CX
 20706                                  nocommit:
 20707                                  ; Extended Open
 20708                                  	;call	LCritDisk
 20709                                  	;retn
 20710                                  	; 18/12/2022
 20711 000035F7 E9A9DD                  	jmp	LCritDisk
 20712                                  
 20713                                  DVWRTRAW:
 20714 000035FA 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20715 000035FC E8EF11                  	call	SETWRITE
 20716 000035FF 1E                      	PUSH	DS			; Save seg of transfer
 20717                                  
 20718                                  ;hkn; SS override
 20719 00003600 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20720 00003605 E83A11                  	call	DEVIOCALL		; DS:SI -> DEVICE
 20721                                  
 20722 00003608 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 20723 0000360A B487                    	MOV	AH,87H
 20724                                  
 20725                                  ;hkn; SS override
 20726 0000360C 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20727                                  
 20728                                  	; MSDOS 3.3
 20729                                  	;test	di,8000h
 20730                                  	;jz	short CWRTROK
 20731                                  
 20732                                  	; MSDOS 6.0
 20733 00003611 09FF                    	or	di,di
 20734 00003613 7920                    	jns	short CWRTROK
 20735                                  	
 20736                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20737 00003615 E8BA1D                  	call	CHARHARD
 20738                                  
 20739                                  	; 04/05/2019  - Retro DOS v4.0
 20740                                  
 20741                                  	; MSDOS 6.0
 20742 00003618 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 20743 0000361D 89D3                    	mov	bx,dx			; number of chars xferred	M065
 20744 0000361F 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 20745 00003624 89DF                    	mov	di,bx			;				M065
 20746                                  	
 20747                                  	; MSDOS 3.3
 20748                                  	;MOV	BX,DX			; Recall transfer addr		M065
 20749                                  
 20750                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20751 00003626 08C0                    	OR	AL,AL
 20752 00003628 740B                    	JZ	short CWRTROK 		; Ignore
 20753 0000362A 3C03                    	CMP	AL,3
 20754 0000362C 7403                    	JZ	short CWRFERR
 20755 0000362E 1F                      	POP	DS			; Recover saved seg of transfer
 20756 0000362F EBC9                    	JMP	short DVWRTRAW		; Try again
 20757                                  CWRFERR:
 20758 00003631 58                      	POP	AX			; Chuck saved seg of transfer
 20759 00003632 E9F4FD                  	JMP	CRDFERR 		; Will pop one more stack element
 20760                                  CWRTROK:
 20761 00003635 58                      	POP	AX			; Chuck saved seg of transfer
 20762 00003636 1F                      	POP	DS
 20763 00003637 A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 20764                                  ENDWRDEV:
 20765 0000363A C43E[9E05]              	LES	DI,[THISSFT]
 20766 0000363E 89C1                    	MOV	CX,AX
 20767                                  	;call	ADDREC
 20768                                  	;retn
 20769                                  	; 16/12/2022
 20770                                  	; 10/06/2019
 20771 00003640 E91304                  	jmp	ADDREC
 20772                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20773                                  	;call	ADDREC
 20774                                  	;retn
 20775                                  	
 20776                                  WRTNUL:
 20777 00003643 89CA                    	MOV	DX,CX			; Entire transfer done
 20778                                  WRTCOOKJ:
 20779 00003645 E98D00                  	JMP	WRTCOOKDONE
 20780                                  WRTDEV:
 20781                                  	;mov	byte [EXTERR_LOCUS],4
 20782 00003648 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20783                                  	;or	byte [es:di+5],40h
 20784 0000364D 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 20785                                  					; Reset EOF for input
 20786                                  	;mov	bl,[es:di+5]
 20787 00003652 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20788 00003656 31C0                    	XOR	AX,AX
 20789 00003658 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 20790 0000365A 1E                      	PUSH	DS
 20791 0000365B 88D8                    	MOV	AL,BL
 20792 0000365D C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 20793 00003661 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 20794 00003663 31D2                    	XOR	DX,DX			; Set starting point
 20795                                  	;test	al,20h
 20796 00003665 A820                    	test	AL,devid_device_raw	; Raw?
 20797                                  	;JZ	short TEST_DEV_CON
 20798                                  	;JMP	DVWRTRAW
 20799                                  	; 16/12/2022
 20800 00003667 7591                    	jnz	short DVWRTRAW
 20801                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20802                                  	;JZ	short TEST_DEV_CON
 20803                                  	;JMP	short DVWRTRAW
 20804                                  
 20805                                  TEST_DEV_CON:
 20806                                  	;test	al,2
 20807 00003669 A802                    	test	AL,devid_device_con_out ; Console output device?
 20808 0000366B 756E                    	jnz	short WRITECON
 20809                                  	;test	al,4
 20810 0000366D A804                    	test	AL,devid_device_null
 20811 0000366F 75D2                    	JNZ	short WRTNUL
 20812 00003671 89D0                    	MOV	AX,DX
 20813 00003673 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 20814 00003676 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 20815 00003678 51                      	PUSH	CX
 20816 00003679 B90100                  	MOV	CX,1
 20817 0000367C E86F11                  	call	SETWRITE
 20818 0000367F 59                      	POP	CX
 20819                                  
 20820                                  ;hkn; SS override
 20821 00003680 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20822                                  ;
 20823                                  ;SR; Removed X25 support from here
 20824                                  ;
 20825                                  	;lds	si,[si+7]
 20826 00003685 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20827                                  DVWRTLP:
 20828 00003688 E8271B                  	call	DSKSTATCHK
 20829 0000368B E8B710                  	call	DEVIOCALL2
 20830 0000368E 57                      	PUSH	DI
 20831 0000368F B487                    	MOV	AH,87H
 20832                                  
 20833                                  ;hkn; SS override
 20834 00003691 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20835                                  	
 20836                                  	; MSDOS 3.3
 20837                                  	;test	di,8000h
 20838                                  	;jz	short CWROK
 20839                                  
 20840                                  	; MSDOS 6.0
 20841 00003696 09FF                    	or	di,di
 20842 00003698 7916                    	jns	short CWROK
 20843                                  	
 20844                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20845 0000369A E8351D                  	call	CHARHARD
 20846 0000369D 5F                      	POP	DI
 20847                                  
 20848                                  ;hkn; SS override
 20849 0000369E 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20850 000036A5 3C01                    	CMP	AL,1
 20851 000036A7 74DF                    	JZ	short DVWRTLP 	; Retry
 20852 000036A9 08C0                    	OR	AL,AL
 20853 000036AB 740C                    	JZ	short DVWRTIGN	; Ignore
 20854                                  	; 10/08/2018
 20855 000036AD E979FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 20856                                  CWROK:
 20857 000036B0 5F                      	POP	DI
 20858                                  
 20859                                  ;hkn; SS override
 20860 000036B1 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 20861 000036B7 741C                    	JZ	short WRTCOOKDONE
 20862                                  DVWRTIGN:
 20863 000036B9 42                      	INC	DX
 20864                                  
 20865                                  ;hkn; SS override for CALLXAD
 20866 000036BA 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 20867 000036BF 47                      	INC	DI
 20868 000036C0 1E                      	PUSH	DS
 20869 000036C1 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20870 000036C6 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 20871 000036C9 1F                      	POP	DS
 20872 000036CA 7409                    	JZ	short WRTCOOKDONE
 20873                                  
 20874                                  ;hkn; SS override
 20875 000036CC 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20876 000036D3 E2B3                    	LOOP	DVWRTLP
 20877                                  WRTCOOKDONE:
 20878 000036D5 89D0                    	MOV	AX,DX
 20879 000036D7 1F                      	POP	DS
 20880 000036D8 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 20881                                  
 20882                                  WRITECON:
 20883 000036DB 1E                      	PUSH	DS
 20884                                  
 20885                                  ;hkn; SS is DOSDATA
 20886 000036DC 16                      	push	ss
 20887 000036DD 1F                      	pop	ds
 20888 000036DE E888FC                  	CALL	SWAPCON
 20889 000036E1 1F                      	POP	DS
 20890 000036E2 89DE                    	MOV	SI,BX
 20891 000036E4 51                      	PUSH	CX
 20892                                  WRCONLP:
 20893 000036E5 AC                      	LODSB
 20894 000036E6 3C1A                    	CMP	AL,1Ah		; ^Z?
 20895 000036E8 7405                    	JZ	short CONEOF
 20896 000036EA E8F6DF                  	call	OUTT
 20897 000036ED E2F6                    	LOOP	WRCONLP
 20898                                  CONEOF:
 20899 000036EF 58                      	POP	AX			; Count
 20900 000036F0 29C8                    	SUB	AX,CX			; Amount actually written
 20901 000036F2 1F                      	POP	DS
 20902 000036F3 E86DFC                  	CALL	SWAPBACK
 20903 000036F6 E941FF                  	JMP	ENDWRDEV
 20904                                  
 20905                                  ;---------------------------------------------------------------------------
 20906                                  ;
 20907                                  ; Procedure Name : get_io_sft
 20908                                  ;
 20909                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 20910                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 20911                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 20912                                  ;
 20913                                  ;---------------------------------------------------------------------------
 20914                                  
 20915                                  ; 04/05/2019 - Retro DOS v4.0
 20916                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 20917                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20918                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 20919                                  
 20920                                  GET_IO_SFT:
 20921                                  	;test	byte [SS:CONSWAP],0FFh
 20922 000036F9 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 20923 000036FF 7512                    	JNZ	short GetRedir
 20924                                  GetNormal:
 20925 00003701 16                      	push	ss
 20926 00003702 1F                      	pop	ds
 20927 00003703 06                      	PUSH	ES
 20928 00003704 57                      	PUSH	DI
 20929 00003705 E87F30                  	call	SFFromHandle
 20930 00003708 7206                    	JC	short RET44P
 20931 0000370A 8CC6                    	MOV	SI,ES
 20932 0000370C 8EDE                    	MOV	DS,SI
 20933 0000370E 89FE                    	MOV	SI,DI
 20934                                  RET44P:
 20935 00003710 5F                      	POP	DI
 20936 00003711 07                      	POP	ES
 20937 00003712 C3                      	retn
 20938                                  GetRedir:
 20939 00003713 83FB01                  	CMP	BX,1
 20940 00003716 77E9                    	JA	short GetNormal
 20941 00003718 36C536[E605]            	LDS	SI,[SS:CONSFT]
 20942 0000371D F8                      	CLC
 20943                                  get_io_sft_retn:
 20944 0000371E C3                      	retn
 20945                                  
 20946                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 20947                                  ;---------------------------------------------------------------------------
 20948                                  ;
 20949                                  ; Procedure Name : DIRREAD
 20950                                  ;
 20951                                  ; Inputs:
 20952                                  ;	AX = Directory block number (relative to first block of directory)
 20953                                  ;	ES:BP = Base of drive parameters
 20954                                  ;	[DIRSEC] = First sector of first cluster of directory
 20955                                  ;	[CLUSNUM] = Next cluster
 20956                                  ;	[CLUSFAC] = Sectors/Cluster
 20957                                  ; Function:
 20958                                  ;	Read the directory block into [CURBUF].
 20959                                  ; Outputs:
 20960                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 20961                                  ;	[SECCLUSPOS] Set
 20962                                  ;	ES:BP unchanged
 20963                                  ;	[CURBUF] Points to Buffer with dir sector
 20964                                  ;	Carry set if error (user said FAIL to I 24)
 20965                                  ; DS preserved, all other registers destroyed.
 20966                                  ;---------------------------------------------------------------------------
 20967                                  
 20968                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 20969                                  
 20970                                  DIRREAD:
 20971                                  
 20972                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 20973                                  ; the same as what is in the DPB! In the case of the root directory, we have
 20974                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 20975                                  ; by DIRStart = 0.
 20976                                  
 20977 0000371F 31D2                    	XOR	DX,DX
 20978 00003721 833E[C205]00            	CMP	word [DIRSTART],0
 20979 00003726 7503                    	jnz	short SubDir
 20980 00003728 92                      	XCHG	AX,DX
 20981 00003729 EB0C                    	JMP	short DoRead
 20982                                  
 20983                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 20984                                  
 20985                                  SubDir:
 20986 0000372B 88C2                    	MOV	DL,AL
 20987                                  	;and	dl,[es:bp+4]
 20988 0000372D 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 20989                                  
 20990                                  ;	(DX) = sector-in-cluster
 20991                                  
 20992                                  	;mov	cl,[es:bp+5]
 20993 00003731 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20994 00003735 D3E8                    	SHR	AX,CL
 20995                                  
 20996                                  ;	(DX) = position in cluster
 20997                                  ;	(AX) = number of clusters to skip
 20998                                  
 20999                                  DoRead:
 21000 00003737 8816[7305]              	MOV	[SECCLUSPOS],DL
 21001 0000373B 89C1                    	MOV	CX,AX
 21002 0000373D 88D4                    	MOV	AH,DL
 21003                                  
 21004                                  ;	(CX) = number of clusters to skip.
 21005                                  ;	(AH) = remainder
 21006                                  
 21007                                  	; 04/05/2019 - Retro DOS v4.0
 21008                                  
 21009                                  	; MSDOS 6.0
 21010 0000373F 8B16[C005]              	MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21011 00003743 8916[0706]              	MOV	[HIGH_SECTOR],DX	  ;>32mb
 21012 00003747 8B16[BE05]              	MOV	DX,[DIRSEC]
 21013 0000374B 00E2                    	ADD	DL,AH
 21014 0000374D 80D600                  	ADC	DH,0
 21015 00003750 8316[0706]00            	ADC	word [HIGH_SECTOR],0	  ;>32mb
 21016                                  
 21017 00003755 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21018 00003759 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21019 0000375D E319                    	JCXZ	FIRSTCLUSTER
 21020                                  SKPCLLP:
 21021 0000375F E8DB1E                  	call	UNPACK
 21022 00003762 72BA                    	jc	short get_io_sft_retn
 21023 00003764 87DF                    	XCHG	BX,DI
 21024 00003766 E8BD1E                  	call	IsEOF			; test for eof based on fat size
 21025 00003769 7302                    	JAE	short HAVESKIPPED
 21026 0000376B E2F2                    	LOOP	SKPCLLP
 21027                                  HAVESKIPPED:
 21028 0000376D 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21029 00003771 89FA                    	MOV	DX,DI
 21030 00003773 88E3                    	MOV	BL,AH
 21031 00003775 E86917                  	call	FIGREC
 21032                                  
 21033                                  	;entry	FIRSTCLUSTER
 21034                                  
 21035                                  FIRSTCLUSTER:
 21036                                  	;mov	byte [ALLOWED],18h
 21037 00003778 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 21038 0000377D 30C0                    	XOR	AL,AL		; Indicate pre-read
 21039 0000377F E8DD22                  	call	GETBUFFR
 21040 00003782 729A                    	jc	short get_io_sft_retn
 21041                                  
 21042                                  	;entry	SET_BUF_AS_DIR
 21043                                  
 21044                                  SET_BUF_AS_DIR:
 21045                                  
 21046                                  ;	Set the type of CURBUF to be a directory sector.
 21047                                  ;	Only flags are modified.
 21048                                  
 21049 00003784 1E                      	PUSH	DS
 21050 00003785 56                      	PUSH	SI
 21051 00003786 C536[E205]              	LDS	SI,[CURBUF]
 21052                                  	;or	byte [si+5],4
 21053 0000378A 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21054 0000378E 5E                      	POP	SI
 21055 0000378F 1F                      	POP	DS
 21056                                  dirread_retn:
 21057 00003790 C3                      	retn
 21058                                  
 21059                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21060                                  ;----------------------------------------------------------------------------
 21061                                  ;
 21062                                  ; Procedure Name : FATSECRD
 21063                                  ; Inputs:
 21064                                  ;	Same as DREAD
 21065                                  ;	DS:BX = Transfer address
 21066                                  ;	CX = Number of sectors
 21067                                  ;	DX = Absolute record number
 21068                                  ;	ES:BP = Base of drive parameters
 21069                                  ; Function:
 21070                                  ;	Calls BIOS to perform FAT read.
 21071                                  ; Outputs:
 21072                                  ;	Same as DREAD
 21073                                  ;---------------------------------------------------------------------------
 21074                                  
 21075                                  	; 04/05/2019 - Retro DOS v4.0
 21076                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)	
 21077                                  
 21078                                  FATSECRD:
 21079                                  ;hkn; SS override
 21080                                  	;mov	byte [ss:ALLOWED],18h
 21081 00003791 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21082 00003797 89CF                    	MOV	DI,CX
 21083                                  	;mov	cl,[es:bp+8]
 21084 00003799 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21085                                  	; MSDOS 3.3
 21086                                  	;;mov	al,[es:bp+0Fh]
 21087                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 				
 21088                                  	;XOR	AH,AH
 21089                                  	; MSDOS 6.0
 21090                                  	;mov	ax,[es:bp+0Fh]
 21091 0000379D 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21092 000037A1 30ED                    	XOR	CH,CH	
 21093 000037A3 52                      	PUSH	DX
 21094                                  NXTFAT:
 21095                                  	; MSDOS 6.0
 21096                                  ;hkn; SS override
 21097 000037A4 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21098 000037AB 51                      	PUSH	CX			;32mb
 21099 000037AC 50                      	PUSH	AX
 21100 000037AD 89F9                    	MOV	CX,DI
 21101 000037AF E85B00                  	call	DSKREAD
 21102 000037B2 58                      	POP	AX
 21103 000037B3 59                      	POP	CX
 21104 000037B4 7420                    	JZ	short RET41P		; Carry clear
 21105 000037B6 01C2                    	ADD	DX,AX
 21106 000037B8 E2EA                    	LOOP	NXTFAT
 21107 000037BA 5A                      	POP	DX
 21108 000037BB 89F9                    	MOV	CX,DI
 21109                                  
 21110                                  ; NOTE FALL THROUGH
 21111                                  
 21112                                  ;Break	<DREAD -- DO A DISK READ>
 21113                                  ;---------------------------------------------------------------------------
 21114                                  ;
 21115                                  ; Procedure Name : DREAD
 21116                                  ;
 21117                                  ; Inputs:
 21118                                  ;	DS:BX = Transfer address
 21119                                  ;	CX = Number of sectors
 21120                                  ;	DX = Absolute record number	      (LOW)
 21121                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21122                                  ;	ES:BP = Base of drive parameters
 21123                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21124                                  ; Function:
 21125                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21126                                  ;	errors, will call HARDERRRW for further action.
 21127                                  ; Outputs:
 21128                                  ;	Carry set if error (currently user FAILED to INT 24)
 21129                                  ; DS,ES:BP preserved. All other registers destroyed.
 21130                                  ;---------------------------------------------------------------------------
 21131                                  
 21132                                  	;entry	DREAD
 21133                                  DREAD:
 21134 000037BD E84D00                  	call	DSKREAD
 21135 000037C0 74CE                    	jz	short dirread_retn	; Carry clear
 21136                                  ;hkn; SS override
 21137 000037C2 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21138 000037C8 E89A00                  	call	HARDERRRW
 21139 000037CB 3C01                    	CMP	AL,1			; Check for retry
 21140 000037CD 74EE                    	JZ	short DREAD
 21141 000037CF 3C03                    	CMP	AL,3			; Check for FAIL
 21142 000037D1 F8                      	CLC
 21143 000037D2 7501                    	JNZ	short NO_CAR		; Ignore
 21144 000037D4 F9                      	STC
 21145                                  NO_CAR:
 21146 000037D5 C3                      	retn
 21147                                  RET41P: 
 21148 000037D6 5A                      	POP	DX
 21149 000037D7 C3                      	retn
 21150                                  
 21151                                  ; 24/07/2018 - Retro DOS v3.0
 21152                                  
 21153                                  ;Break	<CHECK_WRITE_LOCK>
 21154                                  ;---------------------------------------------------------------------------
 21155                                  ;
 21156                                  ; Procedure Name : CHECK_WRITE_LOCK
 21157                                  ;
 21158                                  ; Inputs:
 21159                                  ;	output of SETUP
 21160                                  ;	ES:DI -> SFT
 21161                                  ; Function:
 21162                                  ;	check write lock
 21163                                  ; Outputs:
 21164                                  ;	Carry set if error
 21165                                  ;	Carry clear if ok
 21166                                  ;
 21167                                  ;----------------------------------------------------------------------------
 21168                                  
 21169                                  	; 04/05/2019 - Retro DOS v4.0
 21170                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21171                                  
 21172                                  CHECK_WRITE_LOCK:
 21173                                  	; MSDOS 6.0
 21174                                  	;test	byte [es:di+4],8
 21175 000037D8 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21176                                  	;JZ	short write_cont			     ;no
 21177                                  	;;call	SET_ACC_ERR_DS
 21178                                  	;;retn
 21179                                  	;;jnz	SET_ACC_ERR_DS
 21180                                  	; 19/08/2018
 21181                                  	;jz	short write_cont
 21182                                  	;jmp	SET_ACC_ERR_DS
 21183                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21184 000037DD 7403                    	JZ	short write_cont
 21185                                  	;call	SET_ACC_ERR_DS
 21186                                  	;retn
 21187                                  	; 16/12/2022
 21188 000037DF E9BF01                  	jmp	SET_ACC_ERR_DS
 21189                                  
 21190                                  write_cont:				;
 21191 000037E2 51                      	PUSH	CX			;save reg
 21192 000037E3 09C9                    	OR	CX,CX			;
 21193 000037E5 7501                    	JNZ	short Not_Truncate	;
 21194 000037E7 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21195                                  Not_Truncate:				;
 21196 000037E8 B080                    	MOV	AL,80H			;check write access
 21197 000037EA E8283C                  	call	LOCK_CHECK		;check lock
 21198 000037ED 59                      	POP	CX			;restore reg
 21199 000037EE 7305                    	JNC	short WRITE_OK		;lock ok
 21200 000037F0 E86501                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21201 000037F3 73ED                    	JNC	short write_cont	;retry
 21202                                  WRITE_OK:				;
 21203 000037F5 C3                      	retn				;
 21204                                  
 21205                                  ;Break	<CHECK_READ_LOCK>
 21206                                  ;---------------------------------------------------------------------------
 21207                                  ;
 21208                                  ; Procedure Name : CHECK_READ_LOC
 21209                                  ;
 21210                                  ; Inputs:
 21211                                  ;	ES:DI -> SFT
 21212                                  ;	output of SETUP
 21213                                  ; Function:
 21214                                  ;	check read lock
 21215                                  ; Outputs:
 21216                                  ;	Carry set if error
 21217                                  ;	Carry clear if ok
 21218                                  ;----------------------------------------------------------------------------
 21219                                  
 21220                                  CHECK_READ_LOCK:
 21221                                  	; MSDOS 6.0
 21222                                  	;test	byte [es:di+4],8
 21223 000037F6 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21224                                  	;JZ	short do_retry			   	     ; no
 21225                                  	;;call	SET_ACC_ERR
 21226                                  	;;retn
 21227                                  	;;jnz	SET_ACC_ERR
 21228                                  	; 16/12/2022
 21229                                  	; 28/07/2019
 21230 000037FB 7403                    	jz	short do_retry
 21231 000037FD E9A301                  	jmp	SET_ACC_ERR
 21232                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21233                                  	;JZ	short do_retry
 21234                                  	;call	SET_ACC_ERR
 21235                                  	;retn
 21236                                  do_retry:				;
 21237 00003800 30C0                    	xor	al,al			;check read access
 21238 00003802 E8103C                  	call	LOCK_CHECK		;check lock
 21239 00003805 7305                    	JNC	short READLOCK_OK 	;lock ok
 21240 00003807 E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21241 0000380A 73F4                    	JNC	short do_retry		;retry
 21242                                  READLOCK_OK:				;
 21243 0000380C C3                      	retn				;
 21244                                  
 21245                                  ;============================================================================
 21246                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21247                                  ;============================================================================
 21248                                  ; 24/07/2018 - Retro DOS v3.0
 21249                                  ; 04/05/2019 - Retro DOS v4.0
 21250                                  
 21251                                  ;	TITLE	DISK2 - Disk utility routines
 21252                                  ;	NAME	Disk2
 21253                                  
 21254                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21255                                  ;
 21256                                  ;	DskRead
 21257                                  ;	DWRITE
 21258                                  ;	DSKWRITE
 21259                                  ;	HarderrRW
 21260                                  ;	SETUP
 21261                                  ;	BREAKDOWN
 21262                                  ;	READ_LOCK_VIOLATION
 21263                                  ;	WRITE_LOCK_VIOLATION
 21264                                  ;	DISKREAD
 21265                                  ;	SET_ACC_ERR_DS
 21266                                  ;	SET_ACC_ERR
 21267                                  ;	SETSFT
 21268                                  ;	SETCLUS
 21269                                  ;	AddRec
 21270                                  ;
 21271                                  ;	Revision history:
 21272                                  ;
 21273                                  ;		AN000 version 4.00 Jan. 1988
 21274                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21275                                  
 21276                                  ; 04/05/2019 - Retro DOS v4.0
 21277                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21278                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21279                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21280                                  
 21281                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21282                                  ;---------------------------------------------------------------------------
 21283                                  ;
 21284                                  ; Procedure Name : DSKREAD
 21285                                  ;
 21286                                  ; Inputs:
 21287                                  ;	DS:BX = Transfer addr
 21288                                  ;	CX = Number of sectors
 21289                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21290                                  ;	DX = Absolute record number	       (LOW)
 21291                                  ;	ES:BP = Base of drive parameters
 21292                                  ; Function:
 21293                                  ;	Call BIOS to perform disk read
 21294                                  ; Outputs:
 21295                                  ;	DI = CX on entry
 21296                                  ;	CX = Number of sectors unsuccessfully transfered
 21297                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21298                                  ;	Zero set if OK (from BIOS) (carry clear)
 21299                                  ;	Zero clear if error (carry clear)
 21300                                  ; SI Destroyed, others preserved
 21301                                  ;---------------------------------------------------------------------------
 21302                                  
 21303                                  DSKREAD:
 21304 0000380D 51                      	PUSH	CX
 21305                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21306 0000380E 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21307                                  	;mov	al,[es:bp+1]
 21308 00003812 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21309 00003816 53                      	PUSH	BX
 21310 00003817 06                      	PUSH	ES
 21311 00003818 E8A00F                  	call	SETREAD
 21312 0000381B EB27                    	JMP	short DODSKOP
 21313                                  
 21314                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21315                                  ;--------------------------------------------------------------------------
 21316                                  ;
 21317                                  ; Procedure Name : DWRITE
 21318                                  ;
 21319                                  ; Inputs:
 21320                                  ;	DS:BX = Transfer address
 21321                                  ;	CX = Number of sectors
 21322                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21323                                  ;	DX = Absolute record number	       (LOW)
 21324                                  ;	ES:BP = Base of drive parameters
 21325                                  ;	[ALLOWED] must be set in case HARDERR called
 21326                                  ; Function:
 21327                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21328                                  ;	errors, will call HARDERRRW for further action.
 21329                                  ; Output:
 21330                                  ;	Carry set if error (currently, user FAILed to I 24)
 21331                                  ; BP preserved. All other registers destroyed.
 21332                                  ;----------------------------------------------------------------------------
 21333                                  
 21334                                  	;entry	DWRITE
 21335                                  DWRITE:
 21336 0000381D E81600                  	CALL	DSKWRITE
 21337 00003820 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 21338                                  
 21339                                  ;hkn; SS override
 21340 00003822 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 21341 00003828 E83A00                  	call	HARDERRRW
 21342 0000382B 3C01                    	CMP	AL,1		; Check for retry
 21343 0000382D 74EE                    	JZ	short DWRITE
 21344 0000382F 3C03                    	CMP	AL,3		; Check for FAIL
 21345 00003831 F8                      	CLC
 21346 00003832 7501                    	JNZ	short NO_CAR2 	; Ignore
 21347 00003834 F9                      	STC
 21348                                  NO_CAR2:
 21349                                  dw_ret_label:
 21350 00003835 C3                      	retn
 21351                                  
 21352                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 21353                                  ;---------------------------------------------------------------------------
 21354                                  ;
 21355                                  ; Procedure Name : DSKWRITE
 21356                                  ;
 21357                                  ; Inputs:
 21358                                  ;	DS:BX = Transfer addr
 21359                                  ;	CX = Number of sectors
 21360                                  ;	DX = Absolute record number	       (LOW)
 21361                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21362                                  ;	ES:BP = Base of drive parameters
 21363                                  ; Function:
 21364                                  ;	Call BIOS to perform disk read
 21365                                  ; Outputs:
 21366                                  ;	DI = CX on entry
 21367                                  ;	CX = Number of sectors unsuccessfully transfered
 21368                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21369                                  ;	Zero set if OK (from BIOS) (carry clear)
 21370                                  ;	Zero clear if error (carry clear)
 21371                                  ; SI Destroyed, others preserved
 21372                                  ;
 21373                                  ;----------------------------------------------------------------------------
 21374                                  
 21375                                  	;entry	DSKWRITE
 21376                                  DSKWRITE:
 21377 00003836 51                      	PUSH	CX
 21378                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21379 00003837 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21380                                  	;mov	al,[es:bp+1]
 21381 0000383B 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21382 0000383F 53                      	PUSH	BX
 21383 00003840 06                      	PUSH	ES
 21384 00003841 E8AA0F                  	call	SETWRITE
 21385                                  DODSKOP:
 21386 00003844 8CD9                    	MOV	CX,DS		; Save DS
 21387 00003846 1F                      	POP	DS		; DS:BP points to DPB
 21388 00003847 1E                      	PUSH	DS
 21389                                  
 21390                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 21391 00003848 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 21392 0000384C E8F60E                  	call	DEVIOCALL2
 21393                                  
 21394 0000384F 8ED9                    	MOV	DS,CX		; Restore DS
 21395 00003851 07                      	POP	ES		; Restore ES
 21396 00003852 5B                      	POP	BX
 21397                                  
 21398                                  ;hkn; SS override
 21399 00003853 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 21400 00003858 5F                      	POP	DI
 21401 00003859 29F9                    	SUB	CX,DI
 21402 0000385B F7D9                    	NEG	CX		; Number of sectors not transferred
 21403                                  
 21404                                  ;hkn; SS override
 21405 0000385D 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 21406                                  	;test	ax,8000h
 21407                                  	; 17/12/2022
 21408                                  	;test	ah,80h
 21409 00003861 F6C480                  	test	ah,(STERR>>8)
 21410                                  	;test	AX,STERR
 21411 00003864 C3                      	retn
 21412                                  
 21413                                  ;Break	<HardErrRW - map extended errors and call harderr>
 21414                                  ;---------------------------------------------------------------------------
 21415                                  ;
 21416                                  ; Procedure Name : HardErrRW
 21417                                  ;
 21418                                  ; Inputs:
 21419                                  ;	AX is error code from read or write
 21420                                  ;	Other registers set as per HARDERR
 21421                                  ; Function:
 21422                                  ;	Checks the error code for special extended
 21423                                  ;	errors and maps them if needed. Then invokes
 21424                                  ;	Harderr
 21425                                  ; Outputs:
 21426                                  ;	Of HARDERR
 21427                                  ; AX may be modified prior to call to HARDERR.
 21428                                  ; No other registers altered.
 21429                                  ;
 21430                                  ;---------------------------------------------------------------------------
 21431                                  
 21432                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21433                                  HARDERRRW:
 21434                                  	;cmp	al,0Fh
 21435 00003865 3C0F                    	CMP	AL,error_I24_wrong_disk
 21436 00003867 7512                    	JNZ	short DO_ERR				; Nothing to do
 21437                                  
 21438                                  	; MSDOS 3.3
 21439                                  	;push	ds
 21440                                  	;push	si
 21441                                  	;lds	si,[ss:CALLVIDRW]
 21442                                  	;mov	[ss:EXTERRPT+2], ds
 21443                                  	;mov	[ss:EXTERRPT], si
 21444                                  	;pop	si
 21445                                  	;pop	ds
 21446                                  
 21447                                  	; MSDOS 6.0
 21448 00003869 50                      	push	ax
 21449 0000386A 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 21450 0000386E 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 21451 00003872 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 21452 00003876 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 21453 0000387A 58                      	pop	ax
 21454                                  DO_ERR:
 21455                                  	;;call	HARDERR
 21456                                  	;;retn
 21457                                  	; 16/12/2022
 21458                                  	; 10/06/2019
 21459 0000387B E9851B                  	jmp	HARDERR	
 21460                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21461                                  	;call	HARDERR
 21462                                  	;retn
 21463                                  
 21464                                  ; 24/07/2018 - Retro DOS v3.0
 21465                                  
 21466                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 21467                                  ;----------------------------------------------------------------------------
 21468                                  ;
 21469                                  ; Procedure Name : SETUP
 21470                                  ;
 21471                                  ; Inputs:
 21472                                  ;	ES:DI point to SFT (value also in THISSFT)
 21473                                  ;	DMAAdd contains transfer address
 21474                                  ;	CX = Byte count
 21475                                  ;	DS = DOSDATA
 21476                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 21477                                  ;		2nd of caller of caller.
 21478                                  ; Outputs:
 21479                                  ;	    CX = byte count
 21480                                  ;	    [THISDPB] = Base of drive parameters if file
 21481                                  ;		      = Pointer to device header if device or NET
 21482                                  ;	    ES:DI Points to SFT
 21483                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 21484                                  ;	    [TRANS] = 0 (No transfers yet)
 21485                                  ;	    BytPos = Byte position in file
 21486                                  ;
 21487                                  ;	The following fields are relevant to local files (not devices) only:
 21488                                  ;
 21489                                  ;	    SecPos = Position of first sector (local files only)
 21490                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 21491                                  ;	    [CLUSNUM] = First cluster (local files only)
 21492                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 21493                                  ;	    [THISDRV] = Physical unit number (local files only)
 21494                                  ;
 21495                                  ;      RETURNS ONE LEVEL UP WITH:
 21496                                  ;	   CX = 0
 21497                                  ;	   CARRY = Clear
 21498                                  ;	IF AN ERROR IS DETECTED
 21499                                  ; All other registers destroyed
 21500                                  ;----------------------------------------------------------------------------
 21501                                  
 21502                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 21503                                  
 21504                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 21505                                  
 21506                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21507                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 21508                                  
 21509                                  SETUP:
 21510                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 21511                                  
 21512                                  	;lds 	si,[es:di+7]
 21513 0000387E 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 21514                                  
 21515                                  ;hkn; SS override
 21516 00003882 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 21517                                  
 21518                                  ;hkn; SS is DOSDATA
 21519 00003887 16                      	push	ss
 21520 00003888 1F                      	pop	ds
 21521                                  
 21522 00003889 8936[8A05]              	MOV	[THISDPB],SI
 21523                                  
 21524 0000388D 8B1E[2C03]              	MOV	BX,[DMAADD]
 21525 00003891 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 21526 00003895 C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 21527                                  	;mov	ax,[es:di+15h]
 21528 0000389A 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 21529                                  	;mov	dx,[es:di+17h]
 21530 0000389E 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 21531 000038A2 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 21532 000038A6 A3[CE05]                	MOV	[BYTPOS],AX
 21533                                  	;test	word [es:di+5],8080h
 21534 000038A9 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 21535 000038AF 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 21536 000038B1 06                      	PUSH	ES
 21537 000038B2 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 21538                                  
 21539                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21540                                  	;;mov	bl,[es:bp+0]
 21541                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 21542                                  	; 05/12/2022
 21543 000038B6 268A5E00                	mov	bl,[es:bp]
 21544                                  	
 21545 000038BA 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 21546                                  	;mov	bx,[es:bp+2]
 21547 000038BE 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21548                                  
 21549                                  	;; MSDOS 3.3
 21550                                  	;cmp	dx,bx
 21551                                  	;jnb	short EOFERR
 21552                                  	;div	bx
 21553                                  	;mov	[SECPOS],ax
 21554                                  	;mov	[BYTSECPOS],dx
 21555                                  	;mov	dx,ax
 21556                                  	;;and	al,[es:bp+4]
 21557                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 21558                                  	;mov	[SECCLUSPOS],al
 21559                                  	;mov	ax,cx
 21560                                  	;;mov	cl,[es:bp+5]
 21561                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21562                                  	;shr	dx,cl
 21563                                  	;mov	[CLUSNUM],dx
 21564                                  	;pop	es
 21565                                  	;mov	cx,ax
 21566                                  
 21567                                  	; 04/05/2019 - Retro DOS v4.0
 21568                                  
 21569                                  	; MSDOS 6.0
 21570                                  ;M039: Optimized this section.
 21571 000038C2 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 21572 000038C3 E83E05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 21573 000038C6 8916[CC05]              	MOV	[BYTSECPOS],DX
 21574 000038CA A3[C405]                	MOV	[SECPOS],AX
 21575 000038CD 890E[C605]              	MOV	[SECPOS+2],CX
 21576 000038D1 89CA                    	MOV	DX,CX
 21577                                  
 21578 000038D3 89C3                    	MOV	BX,AX
 21579                                  	;and	bl,[es:bp+4]
 21580 000038D5 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 21581 000038D9 881E[7305]              	MOV	[SECCLUSPOS],BL
 21582                                  
 21583 000038DD E84B05                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 21584 000038E0 59                      	POP	CX			;CX = byte count.
 21585 000038E1 751F                    	JNZ	short EOFERR		;cluster number above 64k
 21586                                  	;cmp	ax,[es:bp+0Dh]
 21587 000038E3 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 21588 000038E7 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 21589                                  
 21590 000038E9 A3[BC05]                	MOV	[CLUSNUM],AX
 21591 000038EC 07                      	POP	ES			; ES:DI point to SFT
 21592                                  ;M039
 21593                                  
 21594                                  NOSETSTUFF:
 21595 000038ED 89C8                    	MOV	AX,CX		; AX = Byte count.
 21596 000038EF 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 21597 000038F3 730C                    	JNC	short setup_OK	; Must be less than 64
 21598 000038F5 A1[2C03]                	MOV	AX,[DMAADD]
 21599 000038F8 F7D8                    	NEG	AX		; Amount of room left in segment (know
 21600                                  				;    less than 64K since max value of CX
 21601                                  				;    is FFFF).
 21602 000038FA 7501                    	JNZ	short NoDec
 21603 000038FC 48                      	DEC	AX
 21604                                  NoDec:
 21605 000038FD 89C1                    	MOV	CX,AX		; Can do this much
 21606 000038FF E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 21607                                  setup_OK:
 21608 00003901 C3                      	retn
 21609                                  
 21610                                  EOFERR:
 21611 00003902 07                      	POP	ES		; ES:DI point to SFT
 21612 00003903 31C9                    	XOR	CX,CX		; No bytes read
 21613                                  ;;;;;;;;;;; 7/18/86
 21614                                  	; MSDOS 3.3
 21615                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 21616                                  ;;;;;;;;;;;
 21617                                  NOROOM:
 21618 00003905 5B                      	POP	BX		; Kill return address
 21619 00003906 F8                      	CLC
 21620 00003907 C3                      	retn			; RETURN TO CALLER OF CALLER
 21621                                  
 21622                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 21623                                  ;---------------------------------------------------------------------------
 21624                                  ;
 21625                                  ; Procedure Name : BREAKDOWN
 21626                                  ;
 21627                                  ; Inputs:
 21628                                  ;	CX = Length of disk transfer in bytes
 21629                                  ;	ES:BP = Base of drive parameters
 21630                                  ;	[BYTSECPOS] = Byte position within first sector
 21631                                  ;	DS = DOSDATA
 21632                                  ; Outputs:
 21633                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 21634                                  ;	[SECCNT] = No. of whole sectors to transfer
 21635                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 21636                                  ; AX, BX, DX destroyed. No other registers affected.
 21637                                  ;---------------------------------------------------------------------------
 21638                                  
 21639                                  BREAKDOWN:
 21640 00003908 A1[CC05]                	MOV	AX,[BYTSECPOS]
 21641 0000390B 89CB                    	MOV	BX,CX
 21642 0000390D 09C0                    	OR	AX,AX
 21643 0000390F 740E                    	JZ	short SAVFIR	; Partial first sector?
 21644                                  	;sub	ax,[es:bp+2]
 21645 00003911 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 21646 00003915 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 21647 00003917 29C3                    	SUB	BX,AX		; Subtract from total length
 21648 00003919 7304                    	JAE	short SAVFIR
 21649 0000391B 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 21650 0000391D 31DB                    	XOR	BX,BX		; And no bytes are left
 21651                                  SAVFIR:
 21652 0000391F A3[D205]                	MOV	[BYTCNT1],AX
 21653 00003922 89D8                    	MOV	AX,BX
 21654 00003924 31D2                    	XOR	DX,DX
 21655                                  	;div	word [ES:BP+2]
 21656 00003926 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 21657 0000392A A3[D605]                	MOV	[SECCNT],AX
 21658 0000392D 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 21659                                  	; MSDOS 3.3
 21660                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 21661                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 21662                                  	;CMP	AX,1
 21663                                  	;retnz
 21664                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 21665                                  	;MOV	[BYTCNT2],AX
 21666                                  	;MOV	[SECCNT],DX	; DX = 0
 21667                                  _RET45:
 21668 00003931 C3                      	retn
 21669                                  
 21670                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 21671                                  
 21672                                  ;----------------------------------------------------------------------------
 21673                                  ;
 21674                                  ; Procedure Name : READ_LOCK_VIOLATION
 21675                                  ;
 21676                                  ; ES:DI points to SFT. This entry used by NET_READ
 21677                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 21678                                  ; Else do retrys.
 21679                                  ; ES:DI,DS,CX preserved
 21680                                  ;
 21681                                  ;----------------------------------------------------------------------------
 21682                                  
 21683                                  READ_LOCK_VIOLATION:
 21684 00003932 C606[7505]00            	MOV	byte [READOP],0
 21685                                  ERR_ON_CHECK:
 21686                                  	;;test	word [es:di+2],8000h
 21687                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21688                                  	;JNZ	short HARD_ERR
 21689                                  
 21690                                  	; 04/05/2019
 21691                                  	;test	byte [es:di+3],80h
 21692 00003937 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21693 0000393C 750E                    	JNZ	short HARD_ERR
 21694                                  
 21695 0000393E 51                      	PUSH	CX
 21696                                  	;mov	cl,[es:di+2]
 21697 0000393F 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 21698                                  	;and	cl,0F0h
 21699 00003943 80E1F0                  	AND	CL,SHARING_MASK
 21700                                  	;cmp	cl,0
 21701 00003946 80F900                  	CMP	CL,SHARING_COMPAT
 21702 00003949 59                      	POP	CX
 21703 0000394A 7505                    	JNE	short NO_HARD_ERR
 21704                                  HARD_ERR:
 21705 0000394C E8DC3A                  	call	LOCK_VIOLATION
 21706 0000394F 73E0                    	jnc	short _RET45		; User wants Retrys
 21707                                  NO_HARD_ERR:
 21708 00003951 31C9                    	XOR	CX,CX			;No bytes transferred
 21709                                  	;mov	ax,21h
 21710 00003953 B82100                  	MOV	AX,error_lock_violation
 21711 00003956 F9                      	STC
 21712 00003957 C3                      	retn
 21713                                  
 21714                                  ;----------------------------------------------------------------------------
 21715                                  ;
 21716                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 21717                                  ;
 21718                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 21719                                  ; This entry used by NET_WRITE
 21720                                  ;
 21721                                  ;----------------------------------------------------------------------------
 21722                                  
 21723                                  WRITE_LOCK_VIOLATION:
 21724 00003958 C606[7505]01            	MOV	byte [READOP],1
 21725 0000395D EBD8                    	JMP	short ERR_ON_CHECK
 21726                                  
 21727                                  ; 04/05/2019 - Retro DOS v4.0
 21728                                  
 21729                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 21730                                  
 21731                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 21732                                  ;----------------------------------------------------------------------------
 21733                                  ;
 21734                                  ; Procedure Name : DISKREAD
 21735                                  ;
 21736                                  ; Inputs:
 21737                                  ;	Outputs of SETUP
 21738                                  ; Function:
 21739                                  ;	Perform disk read
 21740                                  ; Outputs:
 21741                                  ;    Carry clear
 21742                                  ;	CX = No. of bytes read
 21743                                  ;	ES:DI point to SFT
 21744                                  ;	SFT offset and cluster pointers updated
 21745                                  ;    Carry set
 21746                                  ;	CX = 0
 21747                                  ;	ES:DI point to SFT
 21748                                  ;	AX has error code
 21749                                  ;----------------------------------------------------------------------------
 21750                                  
 21751                                  ;hkn; called from disk.asm. DS already set up.
 21752                                  
 21753                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21754                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 21755                                  
 21756                                  DISKREAD:
 21757                                  	;mov	ax,[es:di+11h]
 21758 0000395F 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 21759                                  	;mov	bx,[es:di+13h]
 21760 00003963 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 21761 00003967 2B06[CE05]              	SUB	AX,[BYTPOS]
 21762 0000396B 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 21763 0000396F 7226                    	JB	short RDERR		;Read starts past EOF
 21764 00003971 750A                    	JNZ	short ENUF		;More than 64k to EOF
 21765 00003973 09C0                    	OR	AX,AX
 21766 00003975 7420                    	JZ	short RDERR		;Read starts at EOF
 21767 00003977 39C8                    	CMP	AX,CX
 21768 00003979 7302                    	JAE	short ENUF		;I/O fits
 21769 0000397B 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 21770                                  ENUF:
 21771                                  	; MSDOS 3.3
 21772                                  	;test	byte [es:di+4],8
 21773                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 21774                                  	;jnz	short SET_ACC_ERR
 21775                                  	;call	LOCK_CHECK
 21776                                  	;jnb	short _READ_OK
 21777                                  	;call	READ_LOCK_VIOLATION
 21778                                  	;jnb	short ENUF
 21779                                  	;retn
 21780                                  
 21781                                  	; MSDOS 6.0
 21782 0000397D E876FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 21783 00003980 7301                    	JNC	short _READ_OK 		; There are no locks
 21784 00003982 C3                      	retn
 21785                                  
 21786                                  _READ_OK:
 21787 00003983 C42E[8A05]              	LES	BP,[THISDPB]
 21788 00003987 E87EFF                  	CALL	BREAKDOWN
 21789 0000398A 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 21790                                  
 21791 0000398E E8B113                  	call	FNDCLUS
 21792                                       	; MSDOS 6.0			;M022 conditional removed here
 21793 00003991 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 21794                                  					; migrated from 330a - HKN
 21795 00003993 09C9                    	OR	CX,CX
 21796 00003995 7413                    	JZ	short SKIPERR
 21797                                  RDERR:
 21798 00003997 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 21799 00003999 E92502                  	jmp	WRTERR22
 21800                                  
 21801                                  ;RDLASTJ: 
 21802                                  	;JMP	RDLAST                  ;M039
 21803                                  
 21804                                  SETSFTJ2: 
 21805 0000399C E99600                  	JMP	SETSFT
 21806                                  
 21807                                  CANOT_READ:
 21808                                  	; MSDOS 3.3
 21809                                  	;POP	CX		;M039.
 21810                                  	; MSDOS 3.3 & MSDOS 6.0
 21811 0000399F 59                      	POP	CX              ;Clean stack.
 21812 000039A0 5B                      	POP	BX
 21813                                  
 21814                                  	;entry	SET_ACC_ERR_DS
 21815                                  SET_ACC_ERR_DS:
 21816                                  
 21817                                  ;hkn; SS is DOSDATA
 21818                                  	;Context DS
 21819 000039A1 16                      	push	ss
 21820 000039A2 1F                      	pop	ds
 21821                                  
 21822                                  	;entry	SET_ACC_ERR
 21823                                  SET_ACC_ERR:
 21824 000039A3 31C9                    	XOR	CX,CX
 21825                                  	;mov	ax,5
 21826 000039A5 B80500                  	MOV	AX,error_access_denied
 21827 000039A8 F9                      	STC
 21828 000039A9 C3                      	retn
 21829                                  
 21830                                  SKIPERR:
 21831 000039AA 8916[BA05]              	MOV	[LASTPOS],DX
 21832 000039AE 891E[BC05]              	MOV	[CLUSNUM],BX
 21833 000039B2 833E[D205]00            	CMP	word [BYTCNT1],0
 21834 000039B7 7405                    	JZ	short RDMID
 21835                                  
 21836 000039B9 E8FC13                  	call	BUFRD
 21837 000039BC 72E3                    	JC	short SET_ACC_ERR_DS
 21838                                  
 21839                                  RDMID:
 21840 000039BE 833E[D605]00            	CMP	word [SECCNT],0
 21841                                  	;JZ	RDLAST ; 10/08/2018
 21842 000039C3 7453                    	jz	short RDLAST
 21843                                  
 21844 000039C5 E88914                  	call	NEXTSEC
 21845 000039C8 72D2                    	JC	short SETSFTJ2
 21846                                  
 21847 000039CA C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 21848                                  ONSEC:
 21849 000039CF 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 21850 000039D3 8B0E[D605]              	MOV	CX,[SECCNT]
 21851 000039D7 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21852                                  RDLP:
 21853 000039DB E8A414                  	call	OPTIMIZE
 21854 000039DE 72C1                    	JC	short SET_ACC_ERR_DS
 21855                                  
 21856 000039E0 57                      	PUSH	DI                      ;DI = Next physical cluster.
 21857 000039E1 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 21858 000039E2 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 21859                                  	;mov	byte [ALLOWED],38h
 21860 000039E3 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 21861 000039E8 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 21862                                  
 21863 000039EC 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 21864 000039ED 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 21865                                  
 21866                                  	; 04/05/2019 - Retro DOS v4.0
 21867                                  
 21868                                  	; MSDOS 6.0
 21869 000039EE E86122                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 21870                                  
 21871                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21872 000039F1 E8C9FD                  	call	DREAD
 21873                                  
 21874                                  	; MSDOS 3.3 
 21875                                  	;pop	bx
 21876                                  	;pop	dx
 21877                                  	;jc	short CANOT_READ
 21878                                  	;add	bx,dx	; (bx = Extent end)
 21879                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 21880                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 21881                                  	;call	SETVISIT
 21882                                  	; ->***
 21883                                  ;M039
 21884                                  	; MSDOS 6.0 
 21885 000039F4 59                      	pop	cx
 21886 000039F5 5A                      	pop	dx
 21887 000039F6 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 21888 000039FB 72A2                    	jc	short CANOT_READ
 21889                                  
 21890 000039FD 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 21891                                  
 21892                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 21893                                  ;            sectors, also termed an "Extent".)
 21894                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 21895                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 21896                                  ;       ES:BP -> Drive Parameter Block (DPB).
 21897                                  ;
 21898                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 21899                                  ;	buffers must be "read" into the transfer memory block, so that the
 21900                                  ;       transfer memory reflects the most recent data.
 21901                                  
 21902 00003A02 E85E00                  	call	DskRdBufScan
 21903                                  
 21904                                  	;Context DS
 21905 00003A05 16                      	push	ss
 21906 00003A06 1F                      	pop	ds
 21907                                          
 21908 00003A07 59                      	pop	cx
 21909 00003A08 5B                              pop	bx
 21910                                  
 21911                                  ;       CX = # of sector remaining.
 21912                                  ;       BX = Next physical cluster.
 21913                                  
 21914                                  ;M039
 21915                                  
 21916                                  ;;;;;;;;
 21917                                  ;	; 25/07/2018 - Retro DOS v3.0
 21918                                  ;	; ***->
 21919                                  ;	; MSDOS 3.3
 21920                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 21921                                  ;bufq:
 21922                                  ;;	DX = Extent start.
 21923                                  ;;	BX = Extent end.
 21924                                  ;;	 AL = Drive #.
 21925                                  ;;     DS:DI-> 1st buffer in queue.
 21926                                  ;
 21927                                  ;	;or	byte [di+5],20h
 21928                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 21929                                  ;	;cmp	al,[di+4]	
 21930                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 21931                                  ;	jnz	short bufq3
 21932                                  ;	;cmp	[di+6],dx
 21933                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 21934                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 21935                                  ;	;cmp	[di+6],bx
 21936                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 21937                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 21938                                  ;	
 21939                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 21940                                  ;
 21941                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 21942                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 21943                                  ;;      as MRU (Most Recently Used).
 21944                                  ;
 21945                                  ;	;test	byte [di+5],40h
 21946                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 21947                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 21948                                  ;	pop	ax ; transfer address
 21949                                  ;	push	ax
 21950                                  ;	push	di
 21951                                  ;	push	dx
 21952                                  ;	;sub	dx,[di+6]
 21953                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 21954                                  ;	neg	dx
 21955                                  ;
 21956                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 21957                                  ;;           block.
 21958                                  ;
 21959                                  ;	mov	si,di
 21960                                  ;	mov	di,ax
 21961                                  ;	mov	ax,dx
 21962                                  ;	;mov	cx,[es:bp+6]	
 21963                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 21964                                  ;	mul	cx
 21965                                  ;	add	di,ax
 21966                                  ;
 21967                                  ;	lea	si,[si+16]
 21968                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 21969                                  ;	shr	cx,1
 21970                                  ;	push	es
 21971                                  ;	mov	es,[SS:DMAADD+2]
 21972                                  ;
 21973                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 21974                                  ;;      DS:SI-> Buffer sector data.
 21975                                  ;;      ES:DI-> Destination within Transfer memory block.
 21976                                  ;
 21977                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 21978                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 21979                                  ;	;rep	movsb                   ;Copy last byte.
 21980                                  ;	jnc	short bufq1
 21981                                  ;	movsb
 21982                                  ;bufq1:
 21983                                  ;	pop	es
 21984                                  ;	pop	dx
 21985                                  ;	pop	di
 21986                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 21987                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 21988                                  ;bufq2:
 21989                                  ;	call	SCANPLACE
 21990                                  ;bufq3:
 21991                                  ;	call	SKIPVISIT
 21992                                  ;	jnz	short bufq
 21993                                  ;	
 21994                                  ;	push	ss
 21995                                  ;	pop	ds
 21996                                  ;	pop	cx
 21997                                  ;	pop	cx
 21998                                  ;	pop	bx	
 21999                                  ;bufq4:
 22000                                  ;;;;;;;
 22001 00003A09 E30D                    	JCXZ	RDLAST
 22002                                  
 22003 00003A0B E8181C                  	call	IsEOF			; test for eof on fat size
 22004 00003A0E 7325                    	JAE	short SETSFT
 22005                                  
 22006 00003A10 B200                    	MOV	DL,0
 22007 00003A12 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22008 00003A16 EBC3                    	JMP	short RDLP ; 19/05/2019
 22009                                  
 22010                                  RDLAST:
 22011 00003A18 A1[D405]                	MOV	AX,[BYTCNT2]
 22012 00003A1B 09C0                    	OR	AX,AX
 22013 00003A1D 7416                    	JZ	short SETSFT
 22014 00003A1F A3[D205]                	MOV	[BYTCNT1],AX
 22015                                  
 22016 00003A22 E82C14                  	call	NEXTSEC
 22017 00003A25 720E                    	JC	short SETSFT
 22018                                  
 22019 00003A27 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22020 00003A2D E88813                  	call	BUFRD
 22021                                  	; 10/08/2018
 22022                                  
 22023 00003A30 7303                    	JNC	short SETSFT
 22024 00003A32 E96CFF                  	JMP	SET_ACC_ERR_DS
 22025                                  
 22026                                  ;------------------------------------------------------------------------------
 22027                                  ;
 22028                                  ; Procedure Name : SETSFT
 22029                                  ; Inputs:
 22030                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22031                                  ;		and set cluster fields
 22032                                  ; Function:
 22033                                  ;	Update [THISSFT] based on the transfer
 22034                                  ; Outputs:
 22035                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22036                                  ;	ES:DI points to [THISSFT]
 22037                                  ;	CX No. of bytes transferred
 22038                                  ;	Carry clear
 22039                                  ;
 22040                                  ;----------------------------------------------------------------------------
 22041                                  
 22042                                  	;entry	SETSFT
 22043                                  
 22044                                  ; 26/07/2018 - Retro DOS v3.0
 22045                                  SETSFT:
 22046 00003A35 C43E[9E05]              	LES	DI,[THISSFT]
 22047                                  
 22048                                  ; Same as SETSFT except ES:DI already points to SFT
 22049                                  	;entry	SETCLUS
 22050                                  SETCLUS:	
 22051 00003A39 8B0E[B805]              	MOV	CX,[NEXTADD]
 22052 00003A3D 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22053                                  	;;test	word [es:di+5],80h
 22054                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22055                                  	;JNZ	short ADDREC		; don't set clusters if device
 22056                                  
 22057                                  	; 04/05/2019 - Retro DOS v4.0
 22058                                  	;test	byte [es:di+5],80h
 22059 00003A41 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22060 00003A46 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22061                                  
 22062 00003A48 A1[BC05]                	MOV	AX,[CLUSNUM]
 22063                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22064                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22065 00003A4B 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22066 00003A4F A1[BA05]                	MOV	AX,[LASTPOS]
 22067                                  	;mov	[es:di+19h],ax
 22068 00003A52 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22069                                  
 22070                                  ;----------------------------------------------------------------------------
 22071                                  ;
 22072                                  ; Procedure : AddRec
 22073                                  ; Inputs:
 22074                                  ;	ES:DI points to SFT
 22075                                  ;	CX is No. Bytes transferred
 22076                                  ; Function:
 22077                                  ;	Update the SFT offset based on the transfer
 22078                                  ; Outputs:
 22079                                  ;	sf_position updated to point to first byte after transfer
 22080                                  ;	ES:DI points to SFT
 22081                                  ;	CX No. of bytes transferred
 22082                                  ;	Carry clear
 22083                                  ;----------------------------------------------------------------------------
 22084                                  
 22085                                  	;entry	AddRec
 22086                                  ADDREC:
 22087 00003A56 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22088                                  	;add	[es:di+15h],cx
 22089 00003A58 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22090                                  	;adc	word [es:di+17h], 0
 22091 00003A5C 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22092                                  RET28:	
 22093 00003A61 F8                      	CLC
 22094 00003A62 C3                      	retn
 22095                                  
 22096                                  ; 25/07/2018
 22097                                  ; MSDOS 6.0
 22098                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22099                                  ;----------------------------------------------------------------------------
 22100                                  ;
 22101                                  ; Procedure Name : DskRdBufScan
 22102                                  ;
 22103                                  ; Inputs:
 22104                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22105                                  ;            sectors, also termed an "Extent".)
 22106                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22107                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22108                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22109                                  ;
 22110                                  ; Function:
 22111                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22112                                  ;	"read" into the transfer memory block, so that the transfer memory
 22113                                  ;	reflects the most recent data.
 22114                                  ;
 22115                                  ; Outputs:
 22116                                  ;       Transfer memory updated as required.
 22117                                  ;
 22118                                  ; Uses:
 22119                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22120                                  ;       SS override for all global variables.
 22121                                  ;
 22122                                  ; Notes:
 22123                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22124                                  ;	than the FIRST.
 22125                                  ;----------------------------------------------------------------------------
 22126                                  ;M039: Created
 22127                                  
 22128                                  ; 04/05/2019 - Retro DOS v4.0
 22129                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22130                                  
 22131                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22132                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22133                                  
 22134                                  ;procedure DskRdBufScan,NEAR
 22135                                  ;
 22136                                  ;ASSUME  DS:NOTHING
 22137                                  
 22138                                  DskRdBufScan:
 22139 00003A63 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22140 00003A69 743C                    	je	short bufx		     ; -no, skip all work.
 22141                                  
 22142 00003A6B 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22143 00003A70 89DE                    	mov     si,bx
 22144 00003A72 01D1                    	add     cx,dx
 22145 00003A74 83D600                  	adc     si,0
 22146                                  
 22147 00003A77 E8801F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22148                                  	;mov	ax,[di+2]
 22149 00003A7A 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22150 00003A7D 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22151                                  		
 22152                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22153                                  	;;mov	al,[es:bp+0]
 22154                                  	;mov	al,[es:bp+DPB.DRIVE]
 22155                                  	; 15/12/2022
 22156 00003A81 268A4600                	mov	al,[es:bp]
 22157                                  
 22158                                  ;       BX:DX = Extent start.
 22159                                  ;       SI:CX = Extent end + 1.
 22160                                  ;          AL = Drive #.
 22161                                  ;       DS:DI-> 1st buffer in queue.
 22162                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22163                                  
 22164                                  bufq:	
 22165                                  	;cmp	al,[di+4]
 22166 00003A85 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22167 00003A88 7514                    	jne	short bufq1        	;  -no, jump.
 22168                                  
 22169                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22170                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22171                                  
 22172                                  	;cmp	bx,[di+8]
 22173 00003A8A 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22174 00003A8D 7503                    	jne	short bufq01
 22175                                  	;cmp	dx,[di+6]
 22176 00003A8F 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22177                                  bufq01:
 22178 00003A92 770A                    	ja	short bufq1
 22179                                  
 22180                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22181                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22182                                  
 22183                                  	;cmp	si,[di+8]
 22184 00003A94 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22185 00003A97 7503                    	jne	short bufq02
 22186                                  	;cmp	cx,[di+6]
 22187 00003A99 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22188                                  bufq02:
 22189 00003A9C 770A                    	ja	short bufq2
 22190                                  bufq1:	
 22191 00003A9E 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22192 00003AA3 8B3D                    	mov	di,[di]
 22193                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22194 00003AA5 75DE                    	jne	short bufq		; -no, do next buffer
 22195                                  bufx:
 22196 00003AA7 C3                      	retn				;Exit.
 22197                                  
 22198                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22199                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22200                                  ;       as MRU (Most Recently Used).
 22201                                  
 22202                                  bufq2:	
 22203 00003AA8 50                      	push	ax
 22204                                  	;test	byte [di+5],40h
 22205 00003AA9 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22206 00003AAD 742F                    	jz	short bufq3                    ; -no, jump.
 22207                                  
 22208                                  ;       SaveReg <cx,dx,si,di,es>
 22209 00003AAF 51                      	push	cx
 22210 00003AB0 52                      	push	dx
 22211 00003AB1 56                      	push	si
 22212 00003AB2 57                      	push	di
 22213 00003AB3 06                      	push	es
 22214                                  
 22215 00003AB4 89D0                    	mov     ax,dx
 22216                                  	;sub	ax,[di+6]
 22217 00003AB6 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22218 00003AB9 F7D8                    	neg	ax
 22219                                  
 22220                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22221                                  ;            block. (Note: the upper word of the sector # may be ignored
 22222                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22223                                  ;            is imposed by the input parameters of the disk read operation.)
 22224                                  
 22225                                  	;lea	si,[di+20]
 22226 00003ABB 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22227                                  	;mov	cx,[es:bp+2]
 22228 00003ABE 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22229 00003AC2 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22230 00003AC4 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22231 00003AC9 01C7                    	add	di,ax
 22232 00003ACB 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22233 00003AD0 D1E9                    	shr	cx,1
 22234                                  
 22235                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22236                                  ;       DS:SI-> Buffer sector data.
 22237                                  ;       ES:DI-> Destination within Transfer memory block.
 22238                                  
 22239 00003AD2 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22240                                  	;; 04/05/2019
 22241                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22242                                  	;;rep	movsb                   ;Copy last byte.
 22243                                  	;jnc	short bufq03	
 22244                                  	;movsb
 22245                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22246 00003AD4 83D100                  	adc	cx,0
 22247 00003AD7 F3A4                    	rep	movsb
 22248                                  bufq03:
 22249                                  	;RestoreReg <es,di,si,dx,cx>
 22250 00003AD9 07                      	pop	es
 22251 00003ADA 5F                      	pop	di
 22252 00003ADB 5E                      	pop	si
 22253 00003ADC 5A                      	pop	dx
 22254 00003ADD 59                      	pop	cx
 22255                                  
 22256                                  ;       DS:DI -> current buffer.
 22257                                  bufq3:	
 22258 00003ADE 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22259                                          ;invoke SCANPLACE
 22260 00003AE0 E8291F                  	call	SCANPLACE
 22261 00003AE3 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22262 00003AE8 58                      	pop	ax
 22263                                  	;jne	short bufq		; -no, jump.
 22264                                  	;;jmp	short bufx		; -yes, exit.
 22265                                  	;; 12/06/2019
 22266                                  	;retn
 22267                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22268 00003AE9 759A                    	jne	short bufq
 22269 00003AEB EBBA                    	jmp	short bufx
 22270                                  
 22271                                  ;EndProc DskRdBufScan
 22272                                  
 22273                                  ;============================================================================
 22274                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22275                                  ;============================================================================
 22276                                  ; 04/05/2019 - Retro DOS v4.0
 22277                                  ; 24/07/2018 - Retro DOS v3.0
 22278                                  
 22279                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22280                                  ;----------------------------------------------------------------------------
 22281                                  ;
 22282                                  ; Procedure Name : DISKWRITE
 22283                                  ;
 22284                                  ; Inputs:
 22285                                  ;       Outputs of SETUP
 22286                                  ; Function:
 22287                                  ;       Perform disk write
 22288                                  ; Outputs:
 22289                                  ;    Carry clear
 22290                                  ;       CX = No. of bytes written
 22291                                  ;       ES:DI point to SFT
 22292                                  ;       SFT offset and cluster pointers updated
 22293                                  ;    Carry set
 22294                                  ;       CX = 0
 22295                                  ;       ES:DI point to SFT
 22296                                  ;       AX has error code
 22297                                  ;----------------------------------------------------------------------------
 22298                                  
 22299                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 22300                                  
 22301                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 22302                                  
 22303                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22304                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 22305                                  
 22306                                  DISKWRITE:
 22307                                  	; MSDOS 3.3
 22308                                  	; IBMDOS.COM - Offset 436Dh
 22309                                  	;;test	byte [es:di+4],8
 22310                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22311                                  	;jz	short write_cont
 22312                                  	;jmp	SET_ACC_ERR_DS
 22313                                  ;write_cont:
 22314                                  	;push	cx
 22315                                  	;or	cx,cx
 22316                                  	;jnz	short Not_Truncate
 22317                                  	;;mov	cx,-1
 22318                                  	;dec	cx
 22319                                  ;Not_Truncate:
 22320                                  	;call	LOCK_CHECK
 22321                                  	;pop	cx
 22322                                  	;jnb	short _WRITE_OK
 22323                                  	;call	WRITE_LOCK_VIOLATION
 22324                                  	;jnb	short DISKWRITE
 22325                                  	;retn
 22326                                  
 22327                                  	; MSDOS 6.0
 22328 00003AED E8E8FC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 22329                                  	; 19/08/2018
 22330 00003AF0 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 22331 00003AF2 C3                      	retn
 22332                                  
 22333                                  WRTEOFJ:
 22334 00003AF3 E9DE01                  	JMP     WRTEOF
 22335                                  
 22336                                  _WRITE_OK:
 22337                                   	; 27/07/2018
 22338                                  	; IBMDOS.COM - Offset 438Eh
 22339                                  	
 22340                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22341                                  	;and	word [es:di+5],0BFBFh
 22342 00003AF6 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 22343                                  				; Mark file as dirty, clear no date on close
 22344                                  
 22345                                  	; 04/05/2019 - Retro DOS v4.0	
 22346                                  
 22347                                  	; MSDOS 6.0
 22348                                  	; mov 	ax,[es:di+11h]
 22349 00003AFC 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 22350 00003B00 A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 22351                                  	;mov	ax,[es:di+13h]
 22352 00003B03 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 22353 00003B07 A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 22354                                  
 22355                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 22356                                  
 22357                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22358 00003B0A C42E[8A05]              	LES     BP,[THISDPB]
 22359                                  
 22360 00003B0E E8F7FD                  	call	BREAKDOWN
 22361                                  
 22362 00003B11 A1[CE05]                	MOV     AX,[BYTPOS]
 22363 00003B14 8B16[D005]              	MOV     DX,[BYTPOS+2]
 22364 00003B18 E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 22365 00003B1A 01C8                    	ADD     AX,CX
 22366 00003B1C 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 22367                                  
 22368                                  	;mov	bx,[es:bp+2]
 22369 00003B1F 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 22370                                  
 22371                                  	; MSDOS 3.3
 22372                                  	;cmp	dx,bx
 22373                                  	;jnb	short WRTERR33
 22374                                  	;div	bx
 22375                                  	;mov	bx,ax
 22376                                  	;OR	DX,DX
 22377                                  	;JNZ	short CALCLUS
 22378                                  	;dec	ax
 22379                                  ;CALCLUS:
 22380                                  	; MSDOS 3.3
 22381                                  	;mov	cl,[es:bp+5]
 22382                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22383                                  	;shr	ax,cl
 22384                                  	;push	ax
 22385                                  	;push	dx
 22386                                  	;push	es
 22387                                  	;les	di,[THISSFT]
 22388                                  	;;mov	ax,[es:di+11h]
 22389                                  	;;mov	dx,[es:di+13h]
 22390                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 22391                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 22392                                  	;pop	es
 22393                                  	;;DX:AX = current file size (in bytes).
 22394                                  	;;div	word [es:bp+2]
 22395                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22396                                  	;mov	cx,ax
 22397                                  	;or	dx,dx
 22398                                  	;jz	short NORND
 22399                                  	;inc	ax
 22400                                  ;NORND:
 22401                                  	; MSDOS 6.0
 22402 00003B23 E8DE02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 22403 00003B26 89C6                    	MOV	SI,AX
 22404 00003B28 890E[0706]                      MOV	[HIGH_SECTOR],CX
 22405                                  
 22406                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 22407                                  
 22408 00003B2C 09D2                    	OR	DX,DX
 22409 00003B2E 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 22410 00003B2F 89CA                    	MOV	DX,CX			;M039
 22411 00003B31 7506                    	JNZ	short CALCLUS
 22412 00003B33 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 22413 00003B36 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 22414                                  
 22415                                  CALCLUS:
 22416                                  	; MSDOS 6.0
 22417 00003B39 E8EF02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 22418 00003B3C 5A                      	POP	DX
 22419                                  
 22420                                  ;       AX = Last cluster to write.
 22421                                  ;       DX = # of bytes in last sector to write (the "tail").
 22422                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 22423                                  
 22424 00003B3D 50                      	PUSH	AX
 22425 00003B3E 52                      	PUSH	DX
 22426                                  ;M039
 22427 00003B3F 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 22428 00003B43 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 22429 00003B46 E8BB02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 22430 00003B49 890E[0E06]              	mov	[TEMP_VAR2],cx
 22431 00003B4D 890E[CA05]              	mov	[VALSEC+2],cx
 22432 00003B51 89C1                    	mov	cx,ax
 22433 00003B53 89F3                    	mov	bx,si
 22434                                  
 22435                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 22436                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 22437                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 22438                                  ;                     DX = # of bytes in last sector of current file.
 22439                                  ;M039
 22440 00003B55 09D2                    	OR	DX,DX
 22441 00003B57 7408                    	JZ	short NORND
 22442 00003B59 83C001                  	ADD	AX,1            	;Round up if any remainder	;AC000;
 22443 00003B5C 8316[CA05]00            	ADC	word [VALSEC+2],0
 22444                                  NORND:	
 22445                                  	; MSDOS 3.3 & MSDOS 6.0
 22446 00003B61 A3[C805]                	MOV     [VALSEC],AX
 22447                                  
 22448                                  ;       [VALSEC] = Last sector of current file.
 22449                                  
 22450 00003B64 31C0                    	XOR     AX,AX
 22451 00003B66 A3[DE05]                	MOV     [GROWCNT],AX
 22452 00003B69 A3[E005]                	MOV     [GROWCNT+2],AX
 22453 00003B6C 58                      	POP     AX
 22454                                  
 22455                                  	; MSDOS 6.0
 22456 00003B6D 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 22457 00003B71 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 22458 00003B75 7264                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 22459 00003B77 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 22460 00003B79 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 22461 00003B7B 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 22462 00003B7F EB09                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 22463                                  lowsec:
 22464 00003B81 BF0000                  	MOV	DI,0			;F.C. >32mb
 22465                                  	; MSDOS 3.3 & MSDOS 6.0
 22466 00003B84 29CB                    	SUB	BX,CX			; Number of full sectors
 22467 00003B86 7253                    	JB	short NOGROW
 22468 00003B88 7444                    	JZ	short TESTTAIL
 22469                                  yesgrow:
 22470                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22471 00003B8A 89D1                    	MOV     CX,DX
 22472 00003B8C 93                      	XCHG    AX,BX
 22473                                  	;mul	word [es:bp+2]
 22474 00003B8D 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 22475                                  	
 22476                                  	; MSDOS 6.0
 22477 00003B91 8916[0706]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 22478 00003B95 A3[0E06]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 22479 00003B98 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 22480                                  	;mul	word [es:bp+2]
 22481 00003B9A 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 22482                                  	
 22483 00003B9E 0306[0706]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 22484 00003BA2 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 22485 00003BA4 A1[0E06]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 22486                                  
 22487                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22488 00003BA7 29C8                    	SUB     AX,CX			; Take off current "tail"
 22489 00003BA9 83DA00                  	SBB     DX,0			; 32-bit extension
 22490 00003BAC 01D8                    	ADD     AX,BX			; Add on new "tail"
 22491 00003BAE 83D200                  	ADC     DX,0			; ripple tim's head off
 22492 00003BB1 EB21                    	JMP     SHORT SETGRW
 22493                                  
 22494                                  HAVSTART:
 22495                                  	;int 3
 22496 00003BB3 89C1                    	MOV     CX,AX
 22497 00003BB5 E8AA11                  	call	SKPCLP
 22498                                  	;JCXZ	DOWRTJ
 22499                                  	; 16/12/2022
 22500 00003BB8 E357                    	jcxz	DOWRT
 22501                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22502                                  	;jcxz	DOWRTJ
 22503                                  
 22504 00003BBA E85013                  	call	ALLOCATE
 22505                                  	;JNC	short DOWRTJ
 22506                                  	; 16/12/2022
 22507 00003BBD 7352                    	jnc	short DOWRT
 22508                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22509                                  	;jnc	short DOWRTJ
 22510                                  
 22511                                  	;entry   WRTERR
 22512                                  WRTERR:
 22513 00003BBF B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort      ;AN000;
 22514                                  
 22515                                  	;entry WRTERR22
 22516                                  WRTERR22:
 22517 00003BC1 A0[7605]                	MOV     AL,[THISDRV]		;MS.                            ;AN000;
 22518                                  
 22519                                  	; 27/07/2018
 22520                                  WRTERR33:
 22521                                  	;MOV	CX,0			;No bytes transferred
 22522 00003BC4 31C9                    	XOR     CX,CX
 22523                                  					
 22524 00003BC6 C43E[9E05]              	LES     DI,[THISSFT]
 22525                                  	;CLC ; 19/05/2019
 22526                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22527                                  	; 16/12/2022
 22528                                  	;clc
 22529 00003BCA C3                      	retn
 22530                                  
 22531                                  	; 16/12/2022
 22532                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22533                                  ;DOWRTJ:
 22534                                  	;JMP	short DOWRT
 22535                                  
 22536                                  ACC_ERRWJ:
 22537                                  	; 10/08/2018
 22538                                  	;JMP	SET_ACC_ERRW
 22539                                  	; 16/12/2022
 22540 00003BCB E9D3FD                  	jmp	SET_ACC_ERR_DS
 22541                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22542                                  	;jmp	SET_ACC_ERRW	
 22543                                  
 22544                                  TESTTAIL:
 22545 00003BCE 29D0                    	SUB     AX,DX
 22546 00003BD0 7609                    	JBE	short NOGROW
 22547 00003BD2 31D2                    	XOR     DX,DX
 22548                                  SETGRW:
 22549 00003BD4 A3[DE05]                	MOV	[GROWCNT],AX
 22550 00003BD7 8916[E005]              	MOV	[GROWCNT+2],DX
 22551                                  NOGROW:
 22552 00003BDB 58                      	POP     AX
 22553 00003BDC 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 22554 00003BE0 E85F11                  	call	FNDCLUS
 22555 00003BE3 72E6                    	JC	short ACC_ERRWJ
 22556 00003BE5 891E[BC05]              	MOV     [CLUSNUM],BX
 22557 00003BE9 8916[BA05]              	MOV     [LASTPOS],DX
 22558                                  
 22559 00003BED 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 22560 00003BEF 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 22561 00003BF1 E3C0                    	JCXZ    HAVSTART        ; See if no more data
 22562 00003BF3 51                      	PUSH    CX              ; No. of clusters short of first
 22563 00003BF4 89C1                    	MOV     CX,AX
 22564 00003BF6 E81413                  	call	ALLOCATE
 22565 00003BF9 59                      	POP     CX
 22566 00003BFA 72C3                    	JC	short WRTERR
 22567 00003BFC 8B16[BA05]              	MOV     DX,[LASTPOS]
 22568 00003C00 42                      	INC     DX
 22569 00003C01 49                      	DEC     CX
 22570 00003C02 7405                    	JZ	short NOSKIP
 22571 00003C04 E85B11                  	call	SKPCLP
 22572 00003C07 72C2                    	JC	short ACC_ERRWJ
 22573                                  NOSKIP:
 22574 00003C09 891E[BC05]              	MOV     [CLUSNUM],BX
 22575 00003C0D 8916[BA05]              	MOV     [LASTPOS],DX
 22576                                  DOWRT:
 22577 00003C11 833E[D205]00            	CMP     word [BYTCNT1],0
 22578 00003C16 7409                    	JZ	short WRTMID
 22579 00003C18 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22580 00003C1C E8D211                  	call	BUFWRT
 22581 00003C1F 72AA                    	JC	short ACC_ERRWJ
 22582                                  WRTMID:
 22583 00003C21 A1[D605]                	MOV     AX,[SECCNT]
 22584 00003C24 09C0                    	OR      AX,AX
 22585                                  	; 20/11/2022
 22586 00003C26 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 22587 00003C28 0106[C405]              	ADD     [SECPOS],AX
 22588                                  	; 19/05/2019
 22589                                  	; MSDOS 6.0
 22590 00003C2C 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 22591 00003C31 E81D12                  	call	NEXTSEC
 22592                                  	; 16/12/2022
 22593 00003C34 7295                    	JC	short ACC_ERRWJ
 22594                                  	;JC	short SET_ACC_ERRW	;M039
 22595 00003C36 C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 22596 00003C3B 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 22597 00003C3F 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22598 00003C43 8B0E[D605]              	MOV     CX,[SECCNT]
 22599                                  WRTLP:
 22600 00003C47 E83812                  	call	OPTIMIZE
 22601 00003C4A 7248                    	JC	short SET_ACC_ERRW
 22602                                  	; 16/12/2022
 22603                                  	;JC	short ACC_ERRWJ
 22604                                  
 22605                                  ;M039
 22606                                  ;       DI = Next physical cluster.
 22607                                  ;       AX = # sectors remaining.
 22608                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 22609                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22610                                  ;	     sectors, also termed an "Extent".)
 22611                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22612                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22613                                  ;
 22614                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22615                                  ;	are in Extent; they are being over-written.
 22616                                  
 22617 00003C4C 57                      	push    di
 22618 00003C4D 50                      	push    ax
 22619                                  
 22620                                  	; MSDOS 3.3
 22621                                  	; IBMDOS.COM (1987) - Offset 4497h
 22622                                  	;push	dx
 22623                                  	;push	bx
 22624                                  	;mov	al,[es:bp]
 22625                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 22626                                  	;mov	bx,cx
 22627                                  	;add	bx,dx	; (bx = Extent end)
 22628                                  
 22629                                  ;	DX = Extent start.
 22630                                  ;	BX = Extent end.
 22631                                  ;	AL = Drive #.
 22632                                  
 22633                                  	;call	SETVISIT
 22634                                  
 22635                                  ;wbufq1:
 22636                                  	;;or	byte [di+5],20h
 22637                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22638                                  	;;cmp	al,[di+4]	
 22639                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 22640                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 22641                                  	;;cmp	[di+6],dx
 22642                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 22643                                  	;jb	short wbufq2
 22644                                  	;;cmp	[di+6],bx
 22645                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 22646                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 22647                                  
 22648                                  	;; Buffer sector is in the Extent
 22649                                  
 22650                                  	;;mov	word [di+4],20FFh
 22651                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 22652                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 22653                                  	;				; .buf_flags, AH = 0, reset/clear
 22654                                  	;call	SCANPLACE
 22655                                  ;wbufq2:
 22656                                  	;call	SKIPVISIT
 22657                                  	;jnz	short wbufq1
 22658                                  	;pop	bx
 22659                                  	;pop	dx
 22660                                  
 22661                                          ; MSDOS 6.0
 22662 00003C4E E82D01                  	call	DskWrtBufPurge		;DS trashed.
 22663                                  
 22664                                  ;ASSUME DS:NOTHING
 22665                                  ;M039
 22666                                  	; MSDOS 3.3 & MSDOS 6.0
 22667                                  ;hkn; SS override for DMAADD and ALLOWED
 22668 00003C51 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 22669                                  	;mov	byte [ss:ALLOWED],38h
 22670 00003C56 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22671                                  
 22672                                  ;	put logic from DWRITE in-line here so we can modify it
 22673                                  ;	for DISK FULL conditions.
 22674                                  
 22675                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22676                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 22677                                  
 22678                                  	; 16/12/2022
 22679                                  	; MSDOS 3.3 (& MSDOS 5.0)
 22680                                  	;call	DWRITE
 22681                                  
 22682                                  ;DWRITE_OKAY:
 22683                                  
 22684                                  	; 16/12/2022
 22685                                  	; MSDOS 5.0 (& MSDOS 3.3)
 22686                                  	;pop     cx
 22687                                  	;pop     bx
 22688                                  	;push    ss
 22689                                  	;pop     ds
 22690                                  	;jc      short SET_ACC_ERRW
 22691                                  	;jcxz    WRTLAST
 22692                                  	;mov     dl, 0
 22693                                  	;inc     word [LASTPOS]
 22694                                  	;jmp     short WRTLP
 22695                                  
 22696                                  	; 16/12/2022
 22697                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22698                                  DWRITE_LUP:
 22699                                  	; 23/07/2019 - Retro DOS v3.2
 22700                                  
 22701                                  	; MSDOS 6.0
 22702 00003C5C E8D7FB                  	call	DSKWRITE
 22703 00003C5F 7417                    	jz	short DWRITE_OKAY
 22704                                  
 22705                                  ;;	int	3
 22706                                  
 22707 00003C61 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 22708 00003C63 7423                    	jz	short DWRITE_DISK_FULL
 22709                                  
 22710                                  	; 16/12/2022
 22711                                  
 22712                                  ;;hkn; SS override
 22713 00003C65 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 22714 00003C6B E8F7FB                  	call	HARDERRRW
 22715 00003C6E 3C01                    	CMP	AL,1		; Check for retry
 22716 00003C70 74EA                    	JZ	short DWRITE_LUP
 22717                                  
 22718                                  	; 16/12/2022
 22719                                  	; 23/07/2019
 22720                                  	;POP	CX ; *4*
 22721                                  	;POP	BX ; *5*
 22722                                  	;
 22723                                  	;push	ss
 22724                                  	;pop	ds
 22725                                  	;
 22726                                  
 22727                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22728                                  
 22729                                  	; 16/12/2022
 22730 00003C72 3C03                    	CMP	AL,3		; Check for FAIL
 22731 00003C74 F8                      	CLC
 22732 00003C75 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 22733 00003C77 F9                      	STC
 22734                                  
 22735                                  DWRITE_OKAY:
 22736                                  	; 16/12/2022
 22737                                  	; 23/07/2019
 22738                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22739 00003C78 59                      	POP	CX ; *4*
 22740 00003C79 5B                      	POP	BX ; *5*
 22741                                  
 22742                                  ;       CX = # sectors remaining.
 22743                                  ;       BX = Next physical cluster.
 22744                                  
 22745                                  ;hkn; SS override
 22746                                          ;Context DS
 22747                                  	; 16/12/2022
 22748                                  	;push	ss
 22749                                  	;pop	ds
 22750                                  
 22751                                  	; 16/12/2022
 22752 00003C7A 7218                    	jc	short SET_ACC_ERRW
 22753                                  
 22754                                  	; 16/12/2022
 22755 00003C7C 16                      	push	ss
 22756 00003C7D 1F                      	pop	ds
 22757                                  
 22758 00003C7E E317                    	JCXZ    WRTLAST
 22759                                  
 22760                                  	;MOV	DL,0
 22761 00003C80 30D2                    	xor	dl,dl ; 23/07/2019
 22762 00003C82 FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 22763 00003C86 EBBF                    	JMP     short WRTLP
 22764                                  
 22765                                  	; 23/07/2019 - Retro DOS v3.2
 22766                                  	; 09/08/2018
 22767                                  	; MSDOS 6.0
 22768                                  DWRITE_DISK_FULL:
 22769                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 22770                                  	; 16/12/2022
 22771 00003C88 16                      	push	ss
 22772 00003C89 1F                      	pop	ds
 22773 00003C8A 59                      	pop	cx		; unjunk stack
 22774 00003C8B 5B                      	pop	bx
 22775 00003C8C C606[0B06]01            	mov	byte [DISK_FULL],1
 22776                                  	;stc
 22777 00003C91 E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 22778                                  
 22779                                  	; 16/12/2022
 22780                                  SET_ACC_ERRW:
 22781 00003C94 E90AFD                  	jmp	SET_ACC_ERR_DS
 22782                                  
 22783                                  WRTLAST:
 22784 00003C97 A1[D405]                	MOV     AX,[BYTCNT2]
 22785 00003C9A 09C0                    	OR      AX,AX
 22786 00003C9C 7413                    	JZ	short FINWRT
 22787 00003C9E A3[D205]                	MOV     [BYTCNT1],AX
 22788 00003CA1 E8AD11                  	call	NEXTSEC
 22789 00003CA4 72EE                    	JC	short SET_ACC_ERRW
 22790 00003CA6 C706[CC05]0000          	MOV     word [BYTSECPOS],0
 22791 00003CAC E84211                  	call	BUFWRT
 22792 00003CAF 72E3                    	JC	short SET_ACC_ERRW
 22793                                  FINWRT:
 22794 00003CB1 C43E[9E05]              	LES     DI,[THISSFT]
 22795 00003CB5 A1[DE05]                	MOV     AX,[GROWCNT]
 22796 00003CB8 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 22797 00003CBC 09C0                    	OR      AX,AX
 22798 00003CBE 7502                    	JNZ	short UPDATE_size
 22799 00003CC0 E30F                    	JCXZ    SAMSIZ
 22800                                  UPDATE_size:
 22801                                  	;add	[es:di+11h],ax
 22802 00003CC2 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 22803                                  	;adc	[es:di+13h],cx
 22804 00003CC6 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 22805                                  
 22806                                  ; Make sure that all other SFT's see this growth also.
 22807                                  
 22808 00003CCA B80100                  	MOV     AX,1
 22809                                  ;if installed
 22810                                  	;Call	JShare + 14 * 4
 22811 00003CCD FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22812                                  ;else
 22813                                  ;	Call    ShSU
 22814                                  ;endif
 22815                                  
 22816                                  SAMSIZ:
 22817 00003CD1 E965FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 22818                                  
 22819                                  	; 16/12/2022
 22820                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22821                                  ;SET_ACC_ERRW:
 22822                                  	;jmp	SET_ACC_ERR_DS
 22823                                  
 22824                                  WRTEOF:
 22825 00003CD4 89C1                    	MOV     CX,AX
 22826 00003CD6 09D1                    	OR      CX,DX
 22827 00003CD8 746C                    	JZ	short KILLFIL
 22828 00003CDA 83E801                  	SUB     AX,1
 22829 00003CDD 83DA00                  	SBB     DX,0
 22830                                  
 22831                                  	; MSDOS 3.3
 22832                                  	;;div	word [es:bp+2]
 22833                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22834                                  	;;mov	cl,[es:bp+5]
 22835                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 22836                                  	;shr	ax,cl
 22837                                  
 22838                                  	; MSDOS 6.0
 22839 00003CE0 53                      	PUSH	BX
 22840                                  	;mov	bx,[es:bp+2]
 22841 00003CE1 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 22842 00003CE5 E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 22843 00003CE8 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 22844 00003CE9 89CA                    	MOV	DX,CX			      ;M039
 22845 00003CEB 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 22846 00003CEF E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 22847                                  
 22848 00003CF2 89C1                    	MOV     CX,AX
 22849 00003CF4 E84B10                  	call	FNDCLUS
 22850                                  SET_ACC_ERRWJ2:
 22851 00003CF7 729B                    	JC	short SET_ACC_ERRW
 22852                                  
 22853 00003CF9 E326                    	JCXZ    RELFILE
 22854 00003CFB E80F12                  	call	ALLOCATE
 22855                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 22856                                  	; 16/12/2022
 22857 00003CFE 7303                    	jnc	short UPDATE
 22858 00003D00 E9BCFE                  	JMP	WRTERR
 22859                                  UPDATE:
 22860 00003D03 C43E[9E05]              	LES	DI,[THISSFT]
 22861 00003D07 A1[CE05]                	MOV	AX,[BYTPOS]
 22862                                  	;mov	[es:di+11h],ax
 22863 00003D0A 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 22864 00003D0E A1[D005]                	MOV	AX,[BYTPOS+2]
 22865                                  	;mov	[es:di+13h],ax
 22866 00003D11 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 22867                                  ;
 22868                                  ; Make sure that all other SFT's see this growth also.
 22869                                  ;
 22870 00003D15 B80200                  	MOV     AX,2
 22871                                  ;if installed
 22872                                  	;Call	JShare + 14 * 4
 22873 00003D18 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22874                                  ;else
 22875                                  ;	Call    ShSU
 22876                                  ;endif
 22877 00003D1C 31C9                    	XOR     CX,CX
 22878 00003D1E E935FD                  	jmp	ADDREC
 22879                                  
 22880                                  	; 16/12/2022
 22881                                  ;WRTERRJ: 
 22882                                  	;JMP	WRTERR
 22883                                  
 22884                                  ;;;;;;;;;;;;;;;; 7/18/86
 22885                                  ;;;;;;;;;;;;;;;;
 22886                                  
 22887                                  RELFILE:
 22888                                  	; MSDOS 6.0
 22889 00003D21 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 22890 00003D22 C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 22891                                  	;cmp	dx,[es:di+19h]
 22892 00003D26 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 22893 00003D2A 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 22894                                  	;mov	[es:di+19h],0
 22895 00003D2C 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 22896                                  	;mov	dx,[es:di+0Bh]
 22897 00003D32 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 22898                                  	;mov	[es:di+35h],dx
 22899 00003D36 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 22900                                  SKIPRESET:                            		;AN002; BL
 22901 00003D3A 07                      	POP     ES                    		;AN002; BL
 22902                                  ;
 22903 00003D3B BAFFFF                  	MOV     DX,0FFFFH
 22904 00003D3E E87A12                  	call	RELBLKS
 22905                                  	; 16/12/2022
 22906                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22907 00003D41 73C0                    	jnc	short UPDATE
 22908                                  SET_ACC_ERRWJ:
 22909                                  	;JC	short SET_ACC_ERRWJ2
 22910                                  	;JMP	SHORT UPDATE
 22911                                  	; 16/12/2022
 22912 00003D43 E95BFC                  	jmp	SET_ACC_ERR_DS
 22913                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22914                                  	;JC	short SET_ACC_ERRWJ2
 22915                                  	;JMP	SHORT UPDATE
 22916                                  
 22917                                  KILLFIL:
 22918 00003D46 31DB                    	XOR     BX,BX
 22919 00003D48 06                      	PUSH    ES
 22920 00003D49 C43E[9E05]              	LES     DI,[THISSFT]
 22921                                  	;mov	[es:di+19h],bx
 22922 00003D4D 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 22923                                  	;mov	[es:di+35h],bx ; 04/05/2019
 22924 00003D51 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 22925                                  	;xchg	bx,[es:di+0Bh]
 22926 00003D55 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 22927 00003D59 07                      	POP	ES
 22928                                  
 22929 00003D5A 09DB                    	OR	BX,BX
 22930                                  	;JZ	short UPDATEJ
 22931                                  	; 16/12/2022
 22932 00003D5C 74A5                    	jz	short UPDATE
 22933                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22934                                  	;jz	short UPDATEJ
 22935                                  
 22936                                  ;; 10/23/86 FastOpen update
 22937 00003D5E 06                      	PUSH	ES              ; since first cluster # is 0
 22938 00003D5F 55                      	PUSH	BP              ; we must delete the old cache entry
 22939 00003D60 50                      	PUSH	AX
 22940 00003D61 51                      	PUSH	CX
 22941 00003D62 52                      	PUSH	DX
 22942 00003D63 C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 22943                                  	; 15/12/2022
 22944 00003D67 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 22945                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22946                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 22947 00003D6B 89D9                    	MOV	CX,BX                    ; first cluster #
 22948 00003D6D B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 22949 00003D6F E809EA                  	call	FastOpen_Update          ; call fastopen
 22950 00003D72 5A                      	POP	DX
 22951 00003D73 59                      	POP	CX
 22952 00003D74 58                      	POP	AX
 22953 00003D75 5D                      	POP	BP
 22954 00003D76 07                      	POP	ES
 22955                                  ;; 10/23/86 FastOpen update
 22956                                  
 22957 00003D77 E83F12                  	call	RELEASE
 22958 00003D7A 72C7                    	JC	short SET_ACC_ERRWJ
 22959                                  UPDATEJ:
 22960                                  	; 20/11/2022
 22961 00003D7C EB85                    	JMP	short UPDATE ; 10/08/2018
 22962                                  
 22963                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 22964                                  ;----------------------------------------------------------------------------
 22965                                  ;
 22966                                  ; Procedure Name : DskWrtBufPurge
 22967                                  ;
 22968                                  ; Inputs:
 22969                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22970                                  ;	     sectors, also termed an "Extent".)
 22971                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22972                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22973                                  ;
 22974                                  ; Function:
 22975                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22976                                  ;	are in Extent; they are being over-written.
 22977                                  ;
 22978                                  ; Outputs:
 22979                                  ;       (Same as Input.)
 22980                                  ; Uses:
 22981                                  ;       All registers except DS,AX,SI,DI preserved.
 22982                                  ;       SS override for all global variables.
 22983                                  ;----------------------------------------------------------------------------
 22984                                  ;M039: Created
 22985                                  
 22986                                  ;procedure   DskWrtBufPurge,NEAR
 22987                                  ;
 22988                                  ;ASSUME  DS:NOTHING
 22989                                  
 22990                                  ; 04/05/2019 - Retro DOS v4.0
 22991                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 22992                                  
 22993                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22994                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 22995                                  
 22996                                  DskWrtBufPurge:
 22997                                  	;SaveReg <bx,cx>
 22998 00003D7E 53                      	push	bx
 22999 00003D7F 51                      	push	cx
 23000                                  
 23001 00003D80 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23002 00003D85 89DE                    	mov	si,bx
 23003 00003D87 01D1                    	add	cx,dx
 23004 00003D89 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23005                                  
 23006                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23007                                  	;;mov	al,[es:bp+0]
 23008                                  	;mov	al,[es:bp+DPB.DRIVE]
 23009                                  	; 15/12/2022
 23010 00003D8C 268A4600                	mov	al,[es:bp]
 23011                                  
 23012                                  ;	BX:DX = Extent start.
 23013                                  ;	SI:CX = Extent end + 1.
 23014                                  ;	AL = Drive #
 23015                                  
 23016 00003D90 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23017 00003D96 7431                    	je	short nosc		; -no, jump.
 23018                                  
 23019                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23020                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23021                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23022                                  
 23023 00003D98 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23024 00003D9D 752A                    	jne	short nosc		; -no, jump.
 23025                                  
 23026 00003D9F 50                      	push    ax
 23027 00003DA0 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23028 00003DA4 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23029                                  
 23030                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23031                                  	;jbe	short sc5		; -yes, jump.
 23032                                  
 23033 00003DA9 39FE                    	cmp	si,di
 23034 00003DAB 7502                    	jne	short sc01
 23035 00003DAD 39C1                    	cmp	cx,ax
 23036                                  sc01: 
 23037 00003DAF 7617                    	jbe	short sc5	
 23038                                  
 23039 00003DB1 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23040 00003DB6 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23041                                  	
 23042                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23043                                  	;jae	short sc5		; -yes, jump.
 23044                                  
 23045 00003DB9 39FB                    	cmp	bx,di
 23046 00003DBB 7502                    	jne	short sc02
 23047 00003DBD 39C2                    	cmp	dx,ax
 23048                                  sc02:
 23049 00003DBF 7307                    	jnb	short sc5
 23050                                  
 23051 00003DC1 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23052                                  sc5:	
 23053 00003DC8 58                      	pop     ax
 23054                                  
 23055                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23056                                  ;	written.
 23057                                  
 23058                                  nosc:	
 23059 00003DC9 E82E1C                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23060                                  
 23061                                  _bufq:	
 23062                                  	;cmpo	al,[di+4]
 23063 00003DCC 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23064 00003DCF 7527                    	jne	short bufq5		; -no, jump.
 23065                                  
 23066                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23067                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23068                                  
 23069                                  	;cmp	bx,[di+8]
 23070 00003DD1 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23071 00003DD4 7503                    	jne	short bufq04
 23072                                  	;cmp	dx,[di+6]
 23073 00003DD6 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23074                                  bufq04:
 23075 00003DD9 771D                    	ja	short bufq5
 23076                                  
 23077                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23078                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23079                                  
 23080                                  	;cmp	si,[di+8]
 23081 00003DDB 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23082 00003DDE 7503                    	jne	short bufq05
 23083                                  	;cmp	cx,[di+6]
 23084 00003DE0 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23085                                  bufq05:
 23086 00003DE3 7613                    	jbe	short bufq5
 23087                                  
 23088                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23089                                  
 23090                                  	;test	byte [di+5],40h
 23091 00003DE5 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23092 00003DE9 7403                    	jz	short bufq4		; -no, jump.
 23093 00003DEB E87D1E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23094                                  bufq4:
 23095                                  	;mov	word [di+4],20FFh
 23096 00003DEE C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23097                                  
 23098 00003DF3 E8161C                  	call	SCANPLACE
 23099 00003DF6 EB02                    	jmp     short bufq6
 23100                                  bufq5: 
 23101 00003DF8 8B3D                    	mov     di,[di]
 23102                                  	;mov	di,[di+BUFFINFO.buf_next]
 23103                                  bufq6: 
 23104 00003DFA 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23105 00003DFF 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23106                                  	
 23107                                  	;RestoreReg <cx,bx>
 23108 00003E01 59                      	pop	cx
 23109 00003E02 5B                      	pop	bx
 23110 00003E03 C3                      	retn
 23111                                  
 23112                                  ;EndProc DskWrtBufPurge
 23113                                  
 23114                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23115                                  ;----------------------------------------------------------------------------
 23116                                  ;
 23117                                  ; Procedure Name : DIV32
 23118                                  ;
 23119                                  ; Inputs:
 23120                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23121                                  ; Function:
 23122                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23123                                  ; Outputs:
 23124                                  ;       CX:AX = quotient , DX= remainder
 23125                                  ; Uses:
 23126                                  ;       All registers except AX,CX,DX preserved.
 23127                                  ;----------------------------------------------------------------------------
 23128                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23129                                  
 23130                                  ; 04/05/2019 - Retro DOS v4.0
 23131                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23132                                  
 23133                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23134                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23135                                  
 23136                                  DIV32:
 23137 00003E04 81FB0002                	cmp	bx,512
 23138 00003E08 7515                    	jne	short div5
 23139                                  
 23140 00003E0A 89D1                    	mov	cx,dx
 23141 00003E0C 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23142 00003E0E 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23143 00003E12 88E0                    	mov	al,ah
 23144 00003E14 88CC                    	mov	ah,cl
 23145 00003E16 88E9                    	mov	cl,ch
 23146 00003E18 30ED                    	xor	ch,ch
 23147 00003E1A D1E9                    	shr	cx,1
 23148 00003E1C D1D8                    	rcr	ax,1
 23149 00003E1E C3                      	retn
 23150                                  div5:	
 23151 00003E1F 89C1                    	mov	cx,ax
 23152 00003E21 89D0                    	mov	ax,dx
 23153 00003E23 31D2                    	xor	dx,dx
 23154 00003E25 F7F3                    	div	bx              ; 0:AX/BX
 23155 00003E27 91                      	xchg	cx,ax
 23156 00003E28 F7F3                    	div	bx              ; DX:AX/BX
 23157 00003E2A C3                      	retn
 23158                                  
 23159                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23160                                  ;----------------------------------------------------------------------------
 23161                                  ;
 23162                                  ; Procedure Name : SHR32
 23163                                  ;
 23164                                  ; Inputs:
 23165                                  ;	DX:AX = 32 bit sector number
 23166                                  ; Function:
 23167                                  ;       Perform 32 bit shift right
 23168                                  ; Outputs:
 23169                                  ;	AX = cluster number
 23170                                  ;	ZF = 1 if no error
 23171                                  ;	   = 0 if error (cluster number > 64k)
 23172                                  ; Uses:
 23173                                  ;       DX,CX
 23174                                  ;---------------------------------------------------------------------------
 23175                                  ; M017	- SHR32 rewritten for better performance
 23176                                  ; M039	- Additional optimization
 23177                                  
 23178                                  ; 04/05/2019 - Retro DOS v4.0
 23179                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23180                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23181                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23182                                  
 23183                                  SHR32:
 23184                                  	;mov	cl,[es:bp+5]
 23185 00003E2B 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23186 00003E2F 30ED                    	xor	ch,ch	    ;ZF=1
 23187 00003E31 E306                    	jcxz	norota
 23188                                  
 23189                                  rotashft2:
 23190 00003E33 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23191 00003E35 D1D8                    	rcr	ax,1	    ;ZF not affected.
 23192 00003E37 E2FA                    	loop	rotashft2
 23193                                  norota:
 23194 00003E39 C3                      	retn
 23195                                  
 23196                                  ;============================================================================
 23197                                  ; DIR.ASM, MSDOS 6.0, 1991
 23198                                  ;============================================================================
 23199                                  ; 27/07/2018 - Retro DOS v3.0
 23200                                  ; 19/05/2019 - Retro DOS v4.0 
 23201                                  
 23202                                  ;	TITLE	DIR - Directory and path cracking
 23203                                  ;	NAME	Dir
 23204                                  
 23205                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23206                                  ;---------------------------------------------------------------------------
 23207                                  ;
 23208                                  ; Procedure Name : FINDENTRY,SEARCH
 23209                                  ;
 23210                                  ; Inputs:
 23211                                  ;	[THISDPB] set
 23212                                  ;	[SECCLUSPOS] = 0
 23213                                  ;	[DIRSEC] = Starting directory sector number
 23214                                  ;	[CLUSNUM] = Next cluster of directory
 23215                                  ;	[CLUSFAC] = Sectors/Cluster
 23216                                  ;	[NAME1] = Name to look for
 23217                                  ; Function:
 23218                                  ;	Find file name in disk directory.
 23219                                  ;	"?" matches any character.
 23220                                  ; Outputs:
 23221                                  ;	Carry set if name not found
 23222                                  ;	ELSE
 23223                                  ;	Zero set if attributes match (always except when creating)
 23224                                  ;	AH = Device ID (bit 7 set if not disk)
 23225                                  ;	[THISDPB] = Base of drive parameters
 23226                                  ;	DS = DOSGROUP
 23227                                  ;	ES = DOSGROUP
 23228                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23229                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23230                                  ;	[CURBUF] has directory record with match
 23231                                  ;	[NAME1] has file name
 23232                                  ;	[LASTENT] is entry number of the entry
 23233                                  ; All other registers destroyed.
 23234                                  ;----------------------------------------------------------------------------
 23235                                  
 23236                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23237                                  ;hkn; this point.
 23238                                  
 23239                                  SEARCH:
 23240                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23241                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23242                                  
 23243                                  	; 19/05/2019 - Retro DOS v4.0
 23244                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23245                                  
 23246                                  	; 27/07/2018 - Retro DOS v3.0
 23247                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23248                                  	; 15/03/2018 - Retro DOS v2.0
 23249                                  
 23250                                  	;entry	FindEntry
 23251                                  FINDENTRY:
 23252 00003E3A E84804                  	call	STARTSRCH
 23253 00003E3D A0[6B05]                	MOV	AL,[ATTRIB]
 23254                                  	;and	al,9Eh
 23255 00003E40 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23256                                  	;cmp	al,8
 23257 00003E42 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23258 00003E44 7503                    	JNZ	short NOTVOLSRCH	; No
 23259 00003E46 E87501                  	CALL	SETROOTSRCH		; Yes force search of root
 23260                                  NOTVOLSRCH:
 23261 00003E49 E80601                  	CALL	GETENTRY
 23262 00003E4C 7303                    	JNC	short SRCH
 23263 00003E4E E99500                  	JMP	SETESRET
 23264                                  
 23265                                  	;entry	Srch
 23266                                  SRCH:
 23267 00003E51 1E                      	PUSH	DS
 23268 00003E52 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23269                                  
 23270                                  ;	(DS:BX) = directory entry address
 23271                                  
 23272 00003E56 8A27                    	mov	ah,[BX]
 23273                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23274 00003E58 08E4                    	OR	AH,AH			; End of directory?
 23275 00003E5A 743A                    	JZ	short FREE
 23276                                  
 23277                                  ;hkn; SS override
 23278 00003E5C 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23279 00003E61 7433                    	JZ	short FREE
 23280                                  	;test	byte [bx+0Bh],8
 23281 00003E63 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23282                                  					; Volume ID file?
 23283 00003E67 7405                    	JZ	short CHKFNAM 		; NO
 23284                                  
 23285                                  ;hkn; SS override
 23286 00003E69 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 23287                                  CHKFNAM:
 23288                                  ;	Context ES
 23289 00003E6E 8CD6                    	MOV	SI,SS
 23290 00003E70 8EC6                    	MOV	ES,SI
 23291 00003E72 89DE                    	MOV	SI,BX
 23292                                  
 23293                                  ;hkn; NAME1 is in DOSDATA
 23294 00003E74 BF[4B05]                	MOV	DI,NAME1
 23295                                  ;;;;; 7/29/86
 23296                                  
 23297                                  ;hkn; SS override for NAME1
 23298 00003E77 36803E[4B05]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 23299 00003E7D 7506                    	JNZ	short NO_E5
 23300 00003E7F 36C606[4B05]05          	MOV	BYTE [SS:NAME1],05H
 23301                                  NO_E5:
 23302                                  ;;;;; 7/29/86
 23303 00003E85 E86100                  	CALL	MetaCompare
 23304 00003E88 7428                    	JZ	short FOUND
 23305 00003E8A 1F                      	POP	DS
 23306                                  
 23307                                  	;entry	NEXTENT
 23308                                  NEXTENT:
 23309 00003E8B C42E[8A05]              	LES	BP,[THISDPB]
 23310 00003E8F E86600                  	CALL	NEXTENTRY
 23311 00003E92 73BD                    	JNC	short SRCH
 23312 00003E94 EB50                    	JMP	SHORT SETESRET
 23313                                  
 23314                                  FREE:
 23315 00003E96 1F                      	POP	DS
 23316 00003E97 8B0E[4803]              	MOV	CX,[LASTENT]
 23317 00003E9B 3B0E[D805]              	CMP	CX,[ENTFREE]
 23318 00003E9F 7304                    	JAE	short TSTALL
 23319 00003EA1 890E[D805]              	MOV	[ENTFREE],CX
 23320                                  TSTALL:
 23321 00003EA5 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 23322                                  NEXTENTJ:
 23323 00003EA9 74E0                    	je	short NEXTENT 		; No - continue search
 23324 00003EAB 890E[DA05]              	MOV	[ENTLAST],CX
 23325 00003EAF F9                      	STC
 23326 00003EB0 EB34                    	JMP	SHORT SETESRET
 23327                                  
 23328                                  FOUND:
 23329                                  ; We have a file with a matching name. We must now consider the attributes:
 23330                                  ; ATTRIB	Action
 23331                                  ; ------	------
 23332                                  ; Volume_ID	Is Volume_ID in test?
 23333                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 23334                                  ;		If create then Is ATTRIB equal to test?
 23335                                  
 23336 00003EB2 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 23337 00003EB4 1F                      	POP	DS
 23338 00003EB5 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 23339                                  	;and	ah,9Eh
 23340 00003EB9 80E4DE                  	AND	AH,~attr_ignore
 23341                                  	;lea	si,[si+15]
 23342 00003EBC 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 23343                                  					; point to first cluster field
 23344                                  	;test	ch,8
 23345 00003EBF F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 23346 00003EC2 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 23347                                  	;test	ah,8
 23348 00003EC4 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 23349                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 23350                                  	; 16/12/2022
 23351 00003EC7 74C2                    	jz	short NEXTENT ; 19/05/2019
 23352                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23353                                  	;JZ	short NEXTENTJ
 23354 00003EC9 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 23355 00003ECB EB11                    	JMP	SHORT RETFF		; Found Volume ID
 23356                                  check_one_volume_id:
 23357                                  	;CMP	ah,8
 23358 00003ECD 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 23359                                  	;JZ	short NEXTENTJ		; Yes, continue search
 23360                                  	; 16/12/2022
 23361 00003ED0 74B9                    	je	short NEXTENT ; 19/05/2019
 23362                                  	;JZ	short NEXTENTJ
 23363 00003ED2 E8C403                  	CALL	MatchAttributes
 23364 00003ED5 7407                    	JZ	SHORT RETFF
 23365 00003ED7 F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 23366                                  	; 16/12/2022
 23367                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 23368 00003EDC 74AD                    	jz	short NEXTENT ; 19/05/2019
 23369                                  RETFF:
 23370 00003EDE C42E[8A05]              	LES	BP,[THISDPB]
 23371                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23372                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 23373                                  	; 15/12/2022
 23374 00003EE2 268A6600                	MOV	AH,[ES:BP]
 23375                                  SETESRET:
 23376 00003EE6 16                      	PUSH	SS
 23377 00003EE7 07                      	POP	ES
 23378 00003EE8 C3                      	retn
 23379                                  
 23380                                  ;----------------------------------------------------------------------------
 23381                                  ;
 23382                                  ; Procedure Name : MetaCompare
 23383                                  ;
 23384                                  ; Inputs:
 23385                                  ;	DS:SI -> 11 character FCB style name NO '?'
 23386                                  ;	    Typically this is a directory entry.  It MUST be in upper case
 23387                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 23388                                  ;	    Typically this is a FCB or SFT.  It MUST be in upper case
 23389                                  ; Function:
 23390                                  ;	Compare FCB style names allowing for ? match to any char
 23391                                  ; Outputs:
 23392                                  ;	Zero if match else NZ
 23393                                  ; Destroys CX,SI,DI all others preserved
 23394                                  ;----------------------------------------------------------------------------
 23395                                  
 23396                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23397                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 23398                                  
 23399                                  MetaCompare:
 23400 00003EE9 B90B00                  	MOV	CX,11
 23401                                  WILDCRD:
 23402 00003EEC F3A6                    	REPE	CMPSB
 23403 00003EEE 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 23404                                  CHECK_META:
 23405 00003EF0 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 23406 00003EF5 74F5                    	JZ	short WILDCRD
 23407                                  MetaRet:
 23408 00003EF7 C3                       	retn				; Zero set, Match
 23409                                  
 23410                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 23411                                  ;----------------------------------------------------------------------------
 23412                                  ;
 23413                                  ; Procedure Name : NEXTENTRY
 23414                                  ;
 23415                                  ; Inputs:
 23416                                  ;	Same as outputs of GETENTRY, above
 23417                                  ; Function:
 23418                                  ;	Update BX, and [LASTENT] for next directory entry.
 23419                                  ;	Carry set if no more.
 23420                                  ;----------------------------------------------------------------------------
 23421                                  
 23422                                  NEXTENTRY:
 23423                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23424                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 23425                                  
 23426                                  	; 19/05/2019 - Retro DOS v4.0
 23427                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 23428                                  
 23429                                  	; 27/07/2018 - Retro DOS v3.0
 23430                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 23431                                  	; 15/03/2018 - Retro DOS v2.0
 23432                                  
 23433 00003EF8 A1[4803]                	MOV	AX,[LASTENT]
 23434 00003EFB 3B06[DA05]              	CMP	AX,[ENTLAST]
 23435 00003EFF 7422                    	JZ	short NONE
 23436 00003F01 40                      	INC	AX
 23437                                  	;ADD	BX,32
 23438 00003F02 8D5F20                  	LEA	BX,[BX+32]
 23439 00003F05 39D3                    	CMP	BX,DX
 23440                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 23441                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 23442                                  	; 16/12/2022
 23443 00003F07 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 23444 00003F09 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 23445 00003F0D FEC3                    	INC	BL
 23446 00003F0F 3A1E[7705]              	CMP	BL,[CLUSFAC]
 23447 00003F13 7215                    	JB	short SAMECLUS
 23448 00003F15 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 23449 00003F19 E80A17                  	call	IsEOF
 23450 00003F1C 7305                    	JAE	short NONE
 23451                                  	; 23/07/2019
 23452 00003F1E 83FB02                  	CMP	BX,2
 23453                                  	;JB	short NONE
 23454                                  	;JMP	short GETENT
 23455                                  	; 16/12/2022
 23456 00003F21 7332                    	jnb	short GETENT
 23457                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23458                                  	;JB	short NONE
 23459                                  	;JMP	short GETENT
 23460                                  NONE:
 23461 00003F23 F9                      	STC
 23462 00003F24 C3                      	retn
 23463                                  HAVIT:
 23464 00003F25 A3[4803]                	MOV	[LASTENT],AX
 23465 00003F28 F8                      	CLC
 23466                                  nextentry_retn:
 23467 00003F29 C3                      	retn
 23468                                  SAMECLUS:
 23469 00003F2A 881E[7305]              	MOV	[SECCLUSPOS],BL
 23470 00003F2E A3[4803]                	MOV	[LASTENT],AX
 23471 00003F31 1E                      	PUSH	DS
 23472 00003F32 C53E[E205]              	LDS	DI,[CURBUF]
 23473                                  	; 19/05/2019
 23474                                  	; MSDOS 6.0
 23475                                  	;mov	dx,[di+8]
 23476 00003F36 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 23477                                  ;hkn; SS override
 23478 00003F39 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 23479                                  	;mov	dx,[di+6]
 23480 00003F3E 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 23481                                  	;inc	dx ; MSDOS 3.3
 23482                                  	; MSDOS 6.0
 23483 00003F41 83C201                  	ADD	DX,1				;AN000; >32mb
 23484 00003F44 368316[0706]00          	ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 23485                                  	; MSDOS 3.3 & MSDOS 6.0
 23486 00003F4A 1F                      	POP	DS
 23487 00003F4B E82AF8                  	call	FIRSTCLUSTER
 23488 00003F4E 31DB                    	XOR	BX,BX
 23489 00003F50 EB23                    	JMP	short SETENTRY
 23490                                  
 23491                                  ;----------------------------------------------------------------------------
 23492                                  ;
 23493                                  ; Procedure Name : GETENTRY
 23494                                  ;
 23495                                  ; Inputs:
 23496                                  ;	[LASTENT] has directory entry
 23497                                  ;	ES:BP points to drive parameters
 23498                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 23499                                  ; Function:
 23500                                  ;	Locates directory entry in preparation for search
 23501                                  ;	GETENT provides entry for passing desired entry in AX
 23502                                  ; Outputs:
 23503                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 23504                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 23505                                  ;	[LASTENT] = New directory entry number
 23506                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 23507                                  ;	Carry set if error (currently user FAILed to I 24)
 23508                                  ;----------------------------------------------------------------------------
 23509                                  
 23510                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23511                                  GETENTRY:
 23512                                  	; 27/07/2018 - Retro DOS v3.0
 23513 00003F52 A1[4803]                	MOV	AX,[LASTENT]
 23514                                  
 23515                                  	;entry	GETENT
 23516                                  GETENT:
 23517 00003F55 A3[4803]                	MOV	[LASTENT],AX
 23518                                  ;
 23519                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 23520                                  ; directory.
 23521                                  ;
 23522 00003F58 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 23523 00003F5A D3C0                    	rol	ax,cl			; keep hight order bits
 23524 00003F5C 89C2                    	mov	dx,ax
 23525                                  	; 19/05/2019 - Retro DOS v4.0
 23526                                  	;and	ax,0FFE0h
 23527                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23528                                  	;and	ax,~(32-1)		; mask off high order bits
 23529                                  	; 16/12/2022
 23530 00003F5E 24E0                    	and	al,0E0h ; ~31
 23531 00003F60 83E21F                  	and	dx,1Fh
 23532                                  	;and	dx,32-1			; mask off low order bits
 23533                                  ;
 23534                                  ; DX:AX contain the byte offset of the required directory entry from the
 23535                                  ; beginning of the directory. Convert this to a sector number. Round the
 23536                                  ; sector size down to a multiple of 32.
 23537                                  ;
 23538                                  	;mov	bx,[es:bp+2]
 23539 00003F63 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 23540 00003F67 80E3E0                  	and	bl,0E0h
 23541                                  	;AND	BL,255-31		; Must be multiple of 32
 23542 00003F6A F7F3                    	DIV	BX
 23543 00003F6C 89D3                    	MOV	BX,DX			; Position within sector
 23544 00003F6E 53                      	PUSH	BX
 23545 00003F6F E8ADF7                  	call	DIRREAD
 23546 00003F72 5B                      	POP	BX
 23547                                  	;retc
 23548 00003F73 72B4                    	jc	short nextentry_retn	
 23549                                  SETENTRY:
 23550 00003F75 8B16[E205]              	MOV	DX,[CURBUF]
 23551                                  	;add	dx,16 ; MSDOS 3.3
 23552                                  	;add	dx,20 ; MSDOS 6.0 
 23553 00003F79 83C214                  	ADD	DX,BUFINSIZ
 23554 00003F7C 01D3                    	ADD	BX,DX
 23555                                  	;add	dx,[es:bp+2]
 23556 00003F7E 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 23557 00003F82 C3                      	retn
 23558                                  
 23559                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 23560                                  ;----------------------------------------------------------------------------
 23561                                  ;
 23562                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 23563                                  ;
 23564                                  ; Inputs:
 23565                                  ;	BX cluster number of start of directory
 23566                                  ;	ES:BP Points to DPB
 23567                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 23568                                  ; Function:
 23569                                  ;	Set up a directory search
 23570                                  ; Outputs:
 23571                                  ;	[DIRSTART] = BX
 23572                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 23573                                  ;	Carry set if error (currently user FAILed to I 24)
 23574                                  ; destroys AX,DX,BX
 23575                                  ;----------------------------------------------------------------------------
 23576                                  
 23577                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23578                                  SETDIRSRCH:
 23579 00003F83 09DB                    	OR	BX,BX
 23580 00003F85 7437                    	JZ	short SETROOTSRCH
 23581 00003F87 891E[C205]              	MOV	[DIRSTART],BX
 23582                                  	;mov	al,[es:bp+4]
 23583 00003F8B 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 23584 00003F8F FEC0                    	INC	AL
 23585 00003F91 A2[7705]                	MOV	[CLUSFAC],AL
 23586                                  
 23587                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23588                                  	;SAVE	<SI>
 23589 00003F94 56                      	push	si
 23590                                  	;test	byte [FastOpenFlg],2
 23591 00003F95 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 23592 00003F9A 7507                    	JNZ	short UNP_OK
 23593                                  
 23594                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23595                                  	;invoke	UNPACK
 23596 00003F9C E89E16                  	call	UNPACK
 23597 00003F9F 7302                    	JNC	short UNP_OK
 23598                                  	;RESTORE <SI>
 23599 00003FA1 5E                      	pop	si
 23600                                  	;return
 23601 00003FA2 C3                      	retn
 23602                                  
 23603                                  UNP_OK:
 23604 00003FA3 893E[BC05]              	MOV	[CLUSNUM],DI
 23605 00003FA7 89DA                    	MOV	DX,BX
 23606 00003FA9 30DB                    	XOR	BL,BL
 23607 00003FAB 881E[7305]              	MOV	[SECCLUSPOS],BL
 23608                                  	;invoke	FIGREC
 23609 00003FAF E82F0F                  	call	FIGREC
 23610                                  	;RESTORE <SI>
 23611 00003FB2 5E                      	pop	si
 23612                                  	
 23613                                  	; 19/05/2019 - Retro DOS v4.0
 23614                                  
 23615                                  	; MSDOS 6.0
 23616                                  	;PUSH	DX			   ;AN000; >32mb
 23617                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 23618                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 23619                                  	;POP	DX			   ;AN000; >32mb
 23620                                  
 23621                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23622                                  	;push	dx
 23623                                  	;mov	dx,[HIGH_SECTOR]
 23624                                  	;mov	[DIRSEC+2],dx
 23625                                  	;pop	dx
 23626                                  	;MOV	[DIRSEC],dx
 23627                                  	; 16/12/2022
 23628 00003FB3 A1[0706]                	mov	ax,[HIGH_SECTOR]
 23629 00003FB6 A3[C005]                	mov	[DIRSEC+2],AX
 23630 00003FB9 8916[BE05]              	MOV	[DIRSEC],DX
 23631                                  
 23632                                  	; 16/12/2022
 23633                                  	; cf=0 (at the return of FIGREC)
 23634                                  	;CLC
 23635 00003FBD C3                      	retn
 23636                                  
 23637                                  	;entry	SETROOTSRCH
 23638                                  SETROOTSRCH:
 23639 00003FBE 31C0                    	XOR	AX,AX
 23640 00003FC0 A3[C205]                	MOV	[DIRSTART],AX
 23641 00003FC3 A2[7305]                	MOV	[SECCLUSPOS],AL
 23642 00003FC6 48                      	DEC	AX
 23643 00003FC7 A3[BC05]                	MOV	[CLUSNUM],AX
 23644                                  	;mov	ax,[es:bp+0Bh]
 23645 00003FCA 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 23646                                  	; 19/05/2019
 23647                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 23648                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 23649 00003FCE 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 23650 00003FD2 29D0                    	SUB	AX,DX
 23651 00003FD4 A2[7705]                	MOV	[CLUSFAC],AL
 23652 00003FD7 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 23653                                  	; MSDOS 6.0
 23654 00003FDB C706[C005]0000          	MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 23655 00003FE1 F8                      	CLC
 23656 00003FE2 C3                      	retn
 23657                                  
 23658                                  ;============================================================================
 23659                                  ; DIR2.ASM, MSDOS 6.0, 1991
 23660                                  ;============================================================================
 23661                                  ; 27/07/2018 - Retro DOS v3.0
 23662                                  ; 19/05/2019 - Retro DOS v4.0 
 23663                                  
 23664                                  ;	TITLE	DIR2 - Directory and path cracking
 23665                                  ;	NAME	Dir2
 23666                                  
 23667                                  ;Break	<GETPATH -- PARSE A WFP>
 23668                                  ;----------------------------------------------------------------------------
 23669                                  ;
 23670                                  ; Procedure Name : GETPATH
 23671                                  ;
 23672                                  ; Inputs:
 23673                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 23674                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 23675                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23676                                  ;		( = -1 if current dir not involved, else
 23677                                  ;		 Points to first char after last "/" of current dir part)
 23678                                  ;	[THISCDS] Points to CDS being used
 23679                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 23680                                  ;	[NoSetDir] set
 23681                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 23682                                  ; Function:
 23683                                  ;	Crack the path
 23684                                  ; Outputs:
 23685                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 23686                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 23687                                  ;	ID1 field of [THISCDS] updated appropriately
 23688                                  ;	[ATTRIB] = [SATTRIB]
 23689                                  ;	ES:BP Points to DPB
 23690                                  ;	Carry set if bad path
 23691                                  ;	   SI Points to path element causing failure
 23692                                  ;	   Zero set
 23693                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23694                                  ;	      start a search on the last directory
 23695                                  ;	      CL is zero if there is a bad name in the path
 23696                                  ;	      CL is non-zero if the name was simply not found
 23697                                  ;		 [ENTFREE] may have free spot in directory
 23698                                  ;		 [NAME1] is the name.
 23699                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23700                                  ;	   Zero reset
 23701                                  ;	      File in middle of path or bad name in path or attribute mismatch
 23702                                  ;		or path too long or malformed path
 23703                                  ;	ELSE
 23704                                  ;	   [CurBuf] = -1 if root directory
 23705                                  ;	   [CURBUF] contains directory record with match
 23706                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23707                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 23708                                  ;	   AH = device ID
 23709                                  ;	      bit 7 of AH set if device SI and BX
 23710                                  ;	      will point DOSGROUP relative The firclus
 23711                                  ;	      field of the device entry contains the device pointer
 23712                                  ;	   [NAME1] Has name looked for
 23713                                  ;	   If last element is a directory zero is set and:
 23714                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23715                                  ;	      are set up to start a search on it.
 23716                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23717                                  ;	      like that for a file (except for zero flag)
 23718                                  ;	   If last element is a file zero is reset
 23719                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23720                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23721                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 23722                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 23723                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 23724                                  ; DS preserved, Others destroyed
 23725                                  ;---------------------------------------------------------------------------
 23726                                  
 23727                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 23728                                  ;hkn; DS already set up at this point.
 23729                                  
 23730                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23731                                  GETPATH:
 23732                                  	;mov	word [CREATING],0E500h
 23733 00003FE3 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 23734                                  
 23735                                  ; Same as GetPath only CREATING and DELALL already set
 23736                                  
 23737                                  	;entry	GetPathNoSet
 23738                                  GetPathNoSet:
 23739                                  	;mov	byte [EXTERR_LOCUS],2	
 23740 00003FE9 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 23741 00003FEE C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 23742                                  
 23743                                  ; See if the input indicates a device that has already been detected. If so,
 23744                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 23745                                  
 23746 00003FF4 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 23747                                  	;cmp	word [DI+1],5C3Ah
 23748                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 23749 00003FF8 817D013A5C              	cmp	word [DI+1],':\'
 23750 00003FFD 7438                    	JZ	short CrackIt
 23751                                  
 23752                                  ; Let ChkDev find it in the device list
 23753                                  
 23754 00003FFF 83C703                  	ADD	DI,3
 23755                                  	; 18/08/2018
 23756                                  	;MOV	SI,DI			; let CHKDEV see the original name
 23757                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23758                                  	; 16/12/2022
 23759                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 23760 00004002 E8B000                  	CALL	CHKDEV
 23761 00004005 722E                    	JC	short InternalError
 23762                                  
 23763                                  Build_devJ:
 23764 00004007 A0[6D05]                	MOV	AL,[SATTRIB]
 23765 0000400A A2[6B05]                	MOV	[ATTRIB],AL
 23766                                  	;mov	byte [EXTERR_LOCUS],1
 23767 0000400D C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 23768                                  					; "finding" a char device
 23769                                  					; set LOCUS to Unknown. This makes
 23770                                  					; certain idiotic problems reported
 23771                                  					; by a certain 3 letter OEM go away.
 23772                                  
 23773                                  ; Take name in name1 and pack it back into where wfp_start points. This
 23774                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 23775                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 23776                                  ; wfp into the share set.
 23777                                  ;
 23778                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 23779                                  ; non-space seen +1.  This position is kept in DX.
 23780                                  
 23781                                  ;hkn; SS is DOSDATA
 23782 00004012 16                      	push	ss
 23783 00004013 07                      	pop	es
 23784                                  
 23785                                  ;hkn; NAME1 is in DOSDATA
 23786 00004014 BE[4B05]                	mov	si,NAME1
 23787 00004017 8B3E[B205]              	mov	di,[WFP_START]
 23788 0000401B 89FA                    	mov	dx,di
 23789 0000401D B90800                  	mov	cx,8			; 8 chars in device name
 23790                                  MoveLoop:
 23791 00004020 AC                      	lodsb
 23792 00004021 AA                      	stosb
 23793 00004022 3C20                    	cmp	al," "
 23794 00004024 7402                    	jz	short NoSave
 23795                                  
 23796 00004026 89FA                    	mov	dx,di
 23797                                  NoSave:
 23798 00004028 E2F6                    	loop	MoveLoop
 23799                                  
 23800                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 23801                                  ; at this point.
 23802                                  
 23803 0000402A 89D7                    	mov	di,dx
 23804 0000402C C60500                  	mov	byte [di],0		; end of string
 23805 0000402F E8D302                  	call	Build_device_ent	; Clears carry sets zero
 23806 00004032 FEC0                    	INC	AL			; reset zero
 23807 00004034 C3                      	retn
 23808                                  
 23809                                  InternalError:
 23810                                  InternalError_loop:
 23811 00004035 EBFE                    	JMP	short InternalError_loop	; freeze
 23812                                  
 23813                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 23814                                  
 23815                                  CrackIt:
 23816 00004037 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 23817 0000403B 83FEFF                  	CMP	SI,-1			; valid?
 23818 0000403E 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 23819 00004040 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 23820                                  LOOK_SING:
 23821                                  	;mov	byte [ATTRIB],16h
 23822 00004043 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 23823                                  					; Attributes to search through Dirs
 23824 00004048 C43E[A205]              	LES	DI,[THISCDS]
 23825 0000404C B8FFFF                  	MOV	AX,-1
 23826                                  	;mov	bx,[es:di+73]
 23827 0000404F 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 23828 00004053 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 23829                                  
 23830                                  ; AX = -1
 23831                                  ; BX = cluster number of current directory. THis number is -1 if the media
 23832                                  ;      has been uncertainly changed.
 23833                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 23834                                  ;      may be -1 if no current directory part has been used.
 23835                                  
 23836 00004057 39C6                    	CMP	SI,AX			; if Current directory is not part
 23837 00004059 7440                    	JZ	short NO_CURR_D		; then we must crack from root
 23838 0000405B 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 23839                                  
 23840                                  ; DOS 3.3  6/25/86
 23841 0000405D 743C                    	JZ	short NO_CURR_D		; no, crack form the root
 23842                                  	;test	byte [FastOpenFlg],1
 23843 0000405F F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 23844 00004064 7442                    	JZ	short GOT_SEARCH_CLUSTER	; no
 23845 00004066 06                      	PUSH	ES			; save registers
 23846 00004067 57                      	PUSH	DI
 23847 00004068 51                      	PUSH	CX
 23848 00004069 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 23849 0000406C 56                      	PUSH	SI
 23850 0000406D 53                      	PUSH	BX
 23851                                  
 23852 0000406E C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 23853 00004072 8B36[B205]              	MOV	SI,[WFP_START]
 23854                                  
 23855                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 23856 00004076 BB[300D]                	MOV	BX,FastOpenTable
 23857 00004079 BF[460D]                	MOV	DI,Dir_Info_Buff
 23858 0000407C B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 23859                                  	;mov	al,1
 23860 0000407F B001                    	MOV	AL,FONC_Look_up
 23861 00004081 1E                      	PUSH	DS
 23862 00004082 07                      	POP	ES
 23863                                  	;call	far [BX+2]
 23864 00004083 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 23865 00004086 7208                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 23866                                  					; Go to Got_Srch_cluster
 23867 00004088 803C00                  	CMP	BYTE [SI],0		;fastopen has current dir info?
 23868 0000408B 7404                    	JE	short GO_Chk_end	;yes. Go to got_search_cluster
 23869 0000408D F9                      	stc
 23870 0000408E EB01                    	jmp	short GO_Chk_end	;Go to No_Curr_D
 23871                                  GO_Chk_end1:
 23872 00004090 F8                      	clc
 23873                                  GO_Chk_end:				; restore registers
 23874 00004091 5B                      	POP	BX
 23875 00004092 5E                      	POP	SI
 23876 00004093 8F44FF                  	POP	word [SI-1]
 23877 00004096 59                      	POP	CX
 23878 00004097 5F                      	POP	DI
 23879 00004098 07                      	POP	ES
 23880 00004099 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 23881                                  
 23882                                  ; DOS 3.3  6/25/86
 23883                                  ;
 23884                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 23885                                  ; of path and go crack from root.
 23886                                  
 23887                                  NO_CURR_D:
 23888 0000409B 8B36[B205]              	MOV	SI,[WFP_START]
 23889 0000409F 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 23890 000040A2 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23891 000040A6 EB3C                    	JMP	short ROOTPATH
 23892                                  
 23893                                  ; We are able to crack from the current directory part. Go set up for search
 23894                                  ; of specified cluster.
 23895                                  
 23896                                  GOT_SEARCH_CLUSTER:
 23897 000040A8 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23898 000040AC E8D4FE                  	call	SETDIRSRCH
 23899                                  	;JC	short SETFERR
 23900                                  	;JMP	short FINDPATH
 23901                                  	; 16/12/2022
 23902 000040AF 7344                    	jnc	short FINDPATH ; 17/08/2018
 23903                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23904                                  	;JC	short SETFERR
 23905                                  	;JMP	short FINDPATH
 23906                                  SETFERR:
 23907 000040B1 30C9                    	XOR	CL,CL			; set zero
 23908 000040B3 F9                      	STC
 23909 000040B4 C3                      	retn
 23910                                  
 23911                                  ;---------------------------------------------------------------------------
 23912                                  ;
 23913                                  ; Procedure Name : ChkDev
 23914                                  ;
 23915                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 23916                                  ;   device.
 23917                                  ; Blasts CX,SI,DI,AX,BX
 23918                                  ;---------------------------------------------------------------------------
 23919                                  
 23920                                  CHKDEV:
 23921 000040B5 89FE                    	MOV	SI,DI
 23922 000040B7 8CD7                    	MOV	DI,SS
 23923 000040B9 8EC7                    	MOV	ES,DI
 23924                                  
 23925 000040BB BF[4B05]                	MOV	DI,NAME1
 23926 000040BE B90900                  	MOV	CX,9
 23927                                  TESTLOOP:
 23928 000040C1 E87F10                  	call	GETLET
 23929                                  
 23930 000040C4 3C2E                    	CMP	AL,'.'
 23931 000040C6 740E                    	JZ	short TESTDEVICE
 23932 000040C8 E8CE10                  	call	PATHCHRCMP
 23933 000040CB 7407                    	JZ	short NOTDEV
 23934 000040CD 08C0                    	OR	AL,AL
 23935 000040CF 7405                    	JZ	short TESTDEVICE
 23936                                  
 23937 000040D1 AA                      	STOSB
 23938 000040D2 E2ED                    	LOOP	TESTLOOP
 23939                                  NOTDEV:
 23940 000040D4 F9                      	STC
 23941 000040D5 C3                      	retn
 23942                                  
 23943                                  TESTDEVICE:
 23944 000040D6 83C102                  	ADD	CX,2
 23945 000040D9 B020                    	MOV	AL,' '
 23946 000040DB F3AA                    	REP	STOSB
 23947 000040DD 8CD0                    	MOV	AX,SS
 23948 000040DF 8ED8                    	MOV	DS,AX
 23949                                  	;call	DEVNAME
 23950                                  	;retn
 23951                                  	; 18/12/2022
 23952 000040E1 E9C201                  	jmp	DEVNAME
 23953                                  
 23954                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 23955                                  ;----------------------------------------------------------------------------
 23956                                  ;
 23957                                  ; Procedure Name : ROOTPATH,FINDPATH
 23958                                  ;
 23959                                  ; Inputs:
 23960                                  ;	Same as FINDPATH but,
 23961                                  ;	SI Points to asciz string of path which is assumed to start at
 23962                                  ;		the root (no leading '/').
 23963                                  ; Function:
 23964                                  ;	Search from root for path
 23965                                  ; Outputs:
 23966                                  ;	Same as FINDPATH but:
 23967                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 23968                                  ;	[NoSetDir] is ignored.
 23969                                  ;----------------------------------------------------------------------------
 23970                                  
 23971                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23972                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 23973                                  
 23974                                  ROOTPATH:
 23975 000040E4 E8D7FE                  	call	SETROOTSRCH
 23976 000040E7 803C00                  	CMP	BYTE [SI],0
 23977 000040EA 7509                    	JNZ	short FINDPATH
 23978                                  
 23979                                  ; Root dir specified
 23980 000040EC A0[6D05]                	MOV	AL,[SATTRIB]
 23981 000040EF A2[6B05]                	MOV	[ATTRIB],AL
 23982 000040F2 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 23983                                  					; (dir), clears carry.
 23984 000040F4 C3                      	retn
 23985                                  
 23986                                  ; Inputs:
 23987                                  ;	[ATTRIB] Set to get through directories
 23988                                  ;	[SATTRIB] Set to find last element
 23989                                  ;	ES:BP Points to DPB
 23990                                  ;	SI Points to asciz string of path (no leading '/').
 23991                                  ;	[SECCLUSPOS] = 0
 23992                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 23993                                  ;	[CLUSNUM] = Cluster # of next cluster
 23994                                  ;	[CLUSFAC] = Sectors per cluster
 23995                                  ;	[NoSetDir] set
 23996                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23997                                  ;		( = -1 if current dir not involved, else
 23998                                  ;		 Points to first char after last "/" of current dir part)
 23999                                  ;	[THISCDS] Points to CDS being used
 24000                                  ;	[CREATING] and [DELALL] set
 24001                                  ; Function:
 24002                                  ;	Parse path name
 24003                                  ; Outputs:
 24004                                  ;	ID1 field of [THISCDS] updated appropriately
 24005                                  ;	[ATTRIB] = [SATTRIB]
 24006                                  ;	ES:BP Points to DPB
 24007                                  ;	[THISDPB] = ES:BP
 24008                                  ;	Carry set if bad path
 24009                                  ;	   SI Points to path element causing failure
 24010                                  ;	   Zero set
 24011                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24012                                  ;	      start a search on the last directory
 24013                                  ;	      CL is zero if there is a bad name in the path
 24014                                  ;	      CL is non-zero if the name was simply not found
 24015                                  ;		 [ENTFREE] may have free spot in directory
 24016                                  ;		 [NAME1] is the name.
 24017                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24018                                  ;	   Zero reset
 24019                                  ;	      File in middle of path or bad name in path
 24020                                  ;		or path too long or malformed path
 24021                                  ;	ELSE
 24022                                  ;	   [CURBUF] contains directory record with match
 24023                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24024                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24025                                  ;	   [NAME1] Has name looked for
 24026                                  ;	   AH = device ID
 24027                                  ;	      bit 7 of AH set if device SI and BX
 24028                                  ;	      will point DOSGROUP relative The firclus
 24029                                  ;	      field of the device entry contains the device pointer
 24030                                  ;	   If last element is a directory zero is set and:
 24031                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24032                                  ;	      are set up to start a search on it,
 24033                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24034                                  ;	      like that for a file (except for zero flag)
 24035                                  ;	   If last element is a file zero is reset
 24036                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24037                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24038                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24039                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24040                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24041                                  ; Destroys all other registers
 24042                                  
 24043                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24044                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24045                                  
 24046                                      	;entry	FINDPATH
 24047                                  FINDPATH:
 24048 000040F5 06                      	PUSH	ES			; Save ES:BP
 24049 000040F6 56                      	PUSH	SI
 24050 000040F7 89F7                    	MOV	DI,SI
 24051 000040F9 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24052 000040FD 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24053 00004102 740E                    	JZ	short NOIDS		; No current dir part
 24054 00004104 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24055 00004108 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24056 0000410A C43E[A205]              	LES	DI,[THISCDS]
 24057                                  	;mov	[es:di+73],cx
 24058 0000410E 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 24059                                  NOIDS:
 24060                                  
 24061                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24062                                  ; character in the string. CX,DI may be destroyed.
 24063                                  ;
 24064                                  ;	invoke	NAMETRANS
 24065                                  ;	MOV	CL,AL
 24066                                  ;
 24067                                  ; The above is the slow method. The name has *already* been munged by
 24068                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24069                                  ; the name until ., \ or 0 is hit.
 24070                                  
 24071 00004112 8CD0                    	MOV	AX,SS
 24072 00004114 8EC0                    	MOV	ES,AX
 24073                                  
 24074                                  ;hkn; Name1 is in DOSDATA
 24075 00004116 BF[4B05]                	MOV	DI,NAME1
 24076 00004119 B82020                  	MOV	AX,'  ' ; 2020h
 24077 0000411C AA                      	STOSB
 24078 0000411D AB                      	STOSW
 24079 0000411E AB                      	STOSW
 24080 0000411F AB                      	STOSW
 24081 00004120 AB                      	STOSW
 24082 00004121 AB                      	STOSW
 24083                                  
 24084                                  ;hkn; Name1 is in DOSDATA
 24085 00004122 BF[4B05]                	MOV	DI,NAME1
 24086 00004125 30E4                    	XOR	AH,AH			; bits for CL
 24087                                  GetNam:
 24088                                  	; 19/05/2019 - Retro DOS v4.0
 24089                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24090                                  
 24091                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24092                                  	; 16/12/2022
 24093                                  	;inc	cl ; not required !	
 24094                                  	
 24095 00004127 AC                      	LODSB
 24096 00004128 3C2E                    	CMP	AL,'.'	; 2Eh
 24097 0000412A 7412                    	JZ	short _SetExt
 24098 0000412C 08C0                    	OR	AL,AL
 24099 0000412E 7424                    	JZ	short _GetDone
 24100 00004130 3C5C                    	CMP	AL,'\'	; 5Ch
 24101 00004132 7420                    	JZ	short _GetDone
 24102 00004134 3C3F                    	CMP	AL,'?'	; 3Fh
 24103 00004136 7503                    	JNZ	short StoNam
 24104 00004138 80CC01                  	OR	AH,1
 24105                                  StoNam: 
 24106 0000413B AA                      	STOSB
 24107 0000413C EBE9                    	JMP	short GetNam
 24108                                  _SetExt:
 24109 0000413E BF[5305]                	MOV	DI,NAME1+8
 24110                                  GetExt:
 24111 00004141 AC                      	LODSB
 24112 00004142 08C0                    	OR	AL,AL
 24113 00004144 740E                    	JZ	short _GetDone
 24114 00004146 3C5C                    	CMP	AL,'\'
 24115 00004148 740A                    	JZ	short _GetDone
 24116 0000414A 3C3F                    	CMP	AL,'?'
 24117 0000414C 7503                    	JNZ	short StoExt
 24118 0000414E 80CC01                  	OR	AH,1
 24119                                  StoExt: 
 24120 00004151 AA                      	STOSB
 24121 00004152 EBED                    	JMP	short GetExt
 24122                                  _GetDone:
 24123 00004154 4E                      	DEC	SI
 24124 00004155 88E1                    	MOV	CL,AH  ; ?*!
 24125 00004157 80C980                  	OR	CL,80H
 24126 0000415A 5F                      	POP	DI			; Start of this element
 24127 0000415B 07                      	POP	ES			; Restore ES:BP
 24128 0000415C 39FE                    	CMP	SI,DI
 24129 0000415E 7503                    	JNZ	short check_device
 24130 00004160 E9EA00                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24131                                  check_device:
 24132 00004163 56                      	PUSH	SI			; Start of next element
 24133 00004164 8A04                    	MOV	AL,[SI]
 24134 00004166 08C0                    	OR	AL,AL
 24135 00004168 7508                    	JNZ	short NOT_LAST
 24136                                  
 24137                                  ; for last element of the path switch to the correct search attributes
 24138                                  
 24139 0000416A 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24140 0000416E 883E[6B05]              	MOV	[ATTRIB],BH
 24141                                  
 24142                                  NOT_LAST:
 24143                                  
 24144                                  ; check name1 to see if we have a device...
 24145                                  
 24146 00004172 06                      	PUSH	ES			; Save ES:BP
 24147                                  
 24148                                  ;hkn; SS is DOSDATA
 24149                                  	;context ES
 24150 00004173 16                      	push	ss
 24151 00004174 07                      	pop	es
 24152 00004175 E82E01                  	call	DEVNAME 		; blast BX
 24153 00004178 07                      	POP	ES			; Restore ES:BP
 24154 00004179 720B                    	JC	short FindFile		; Not a device
 24155 0000417B 08C0                    	OR	AL,AL			; Test next char again
 24156 0000417D 7403                    	JZ	short GO_BDEV
 24157 0000417F E9CF00                  	JMP	FILEINPATH		; Device name in middle of path
 24158                                  
 24159                                  GO_BDEV:
 24160 00004182 5E                      	POP	SI			; Points to NUL at end of path
 24161 00004183 E981FE                  	JMP	Build_devJ
 24162                                  
 24163                                  FindFile:
 24164                                  ;;;; 7/28/86
 24165 00004186 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24166 0000418B 7505                    	JNZ	short NOE5		; no
 24167 0000418D C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24168                                  NOE5:
 24169                                  ;;;; 7/28/86
 24170 00004192 57                      	PUSH	DI			; Start of this element
 24171 00004193 06                      	PUSH	ES			; Save ES:BP
 24172 00004194 51                      	PUSH	CX			; CL return from NameTrans
 24173                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24174                                  
 24175 00004195 E89C02                  	CALL	LookupPath		; call fastopen to get dir entry
 24176 00004198 7303                    	JNC	short DIR_FOUND		; found dir entry
 24177                                  
 24178                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24179 0000419A E89DFC                  	call	FINDENTRY
 24180                                  DIR_FOUND:
 24181 0000419D 59                      	POP	CX
 24182 0000419E 07                      	POP	ES
 24183 0000419F 5F                      	POP	DI
 24184 000041A0 7303                    	JNC	short LOAD_BUF
 24185 000041A2 E9D100                  	JMP	BADPATHPOP
 24186                                  
 24187                                  LOAD_BUF:
 24188 000041A5 C53E[E205]              	LDS	DI,[CURBUF]
 24189                                  	;test	byte [bx+0Bh],10h
 24190 000041A9 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24191 000041AD 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24192 000041AF E99F00                  	JMP	FILEINPATH		; Error or end of path
 24193                                  
 24194                                  ; if we are not setting the directory, then check for end of string
 24195                                  
 24196                                  GO_NEXT:
 24197                                  ;hkn; SS override
 24198 000041B2 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24199 000041B8 7423                    	JZ	short SetDir
 24200 000041BA 89FA                    	MOV	DX,DI			; Save pointer to entry
 24201 000041BC 8CD9                    	MOV	CX,DS
 24202                                  
 24203                                  ;hkn; SS is DOSDATA
 24204                                  	;context DS
 24205 000041BE 16                      	push	ss
 24206 000041BF 1F                      	pop	ds
 24207 000041C0 5F                      	POP	DI			; Start of next element
 24208                                  	; 19/05/2019 - Retro DOS v4.0
 24209                                  	; MSDOS 6.0
 24210 000041C1 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24211 000041C6 740B                    	JZ	short _nofast			; the FastOpen
 24212 000041C8 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24213 000041CD 7404                    	JZ	short _nofast			; no
 24214 000041CF 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24215                                  _nofast:
 24216 000041D3 803D00                  	CMP	BYTE [DI],0
 24217                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24218                                  	;;JMP	_SETRET  ; retn		; Got it
 24219                                  	;retn	; 05/09/2018
 24220                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24221                                  	;jmp	_SETRET
 24222                                  	; 16/12/2022
 24223 000041D6 7421                    	jz	short _SETRET
 24224                                  
 24225                                  NEXT_ONE:
 24226 000041D8 57                      	PUSH	DI			; Put start of next element back on stack
 24227 000041D9 89D7                    	MOV	DI,DX
 24228 000041DB 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24229                                  SetDir:
 24230 000041DD 8B14                    	MOV	DX,[SI] 		; Dir_first
 24231                                  
 24232                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24233 000041DF 1E                      	PUSH	DS		      ; save [curbuf+2]
 24234                                  ;hkn; SS is DOSDATA
 24235 000041E0 16                      	push	ss
 24236 000041E1 1F                      	pop	ds		      ; set DS Dosgroup
 24237                                  	;test	byte [FastOpenFlg],2
 24238 000041E2 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24239 000041E7 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 24240 000041E9 89D3                    	MOV	BX,DX		      ; not found
 24241 000041EB 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 24242 000041EF 50                      	PUSH	AX		      ; save device id (AH)
 24243 000041F0 E890FD                  	call	SETDIRSRCH
 24244 000041F3 58                      	POP	AX		      ; restore device id (AH)
 24245 000041F4 83C402                  	ADD	SP,2		      ; pop ds in stack
 24246 000041F7 EB3E                    	JMP	short FAST_OPEN_SKIP
 24247                                  
 24248                                  	; 16/12/2022
 24249                                  _SETRET:
 24250 000041F9 C3                      	retn
 24251                                  
 24252                                  DO_NORMAL:
 24253 000041FA 1F                      	POP	DS			; DS = [curbuf + 2]
 24254                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24255                                  
 24256 000041FB 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 24257 000041FD 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 24258 000041FF 53                      	PUSH	BX
 24259 00004200 50                      	PUSH	AX
 24260 00004201 56                      	PUSH	SI
 24261 00004202 51                      	PUSH	CX
 24262                                  	;push	word [di+6]
 24263 00004203 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 24264                                  	; 19/05/2019
 24265                                  	; MSDOS 6.0
 24266                                  	;push	word [di+8]
 24267 00004206 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 24268 00004209 89D3                    	MOV	BX,DX
 24269                                  
 24270                                  ;hkn; SS is DOSDATA
 24271                                  	;context DS
 24272 0000420B 16                      	push	ss
 24273 0000420C 1F                      	pop	ds
 24274                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 24275 0000420D E873FD                  	call	SETDIRSRCH		; the entry sector buffer
 24276                                  	; 19/05/2019
 24277                                  	; MSDOS 6.0
 24278 00004210 8F06[0706]              	POP	word [HIGH_SECTOR]
 24279 00004214 5A                      	POP	DX
 24280 00004215 720A                    	JC	short SKIP_GETB
 24281                                  	;mov	byte [ALLOWED],18h
 24282 00004217 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 24283 0000421C 30C0                    	XOR	AL,AL
 24284                                  	;invoke	GETBUFFR		; Get the entry buffer back
 24285 0000421E E83E18                  	call	GETBUFFR
 24286                                  SKIP_GETB:
 24287 00004221 59                      	POP	CX
 24288 00004222 5E                      	POP	SI
 24289 00004223 58                      	POP	AX
 24290 00004224 5B                      	POP	BX
 24291 00004225 7305                    	JNC	short SET_THE_BUF
 24292 00004227 5F                      	POP	DI			; Start of next element
 24293 00004228 89FE                    	MOV	SI,DI			; Point with SI
 24294 0000422A EB21                    	JMP	SHORT _BADPATH
 24295                                  
 24296                                  SET_THE_BUF:
 24297 0000422C E855F5                  	call	SET_BUF_AS_DIR
 24298 0000422F 8B3E[E205]              	MOV	DI,[CURBUF]
 24299 00004233 01FE                    	ADD	SI,DI			; Get the offsets back
 24300 00004235 01FB                    	ADD	BX,DI
 24301                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24302                                  FAST_OPEN_SKIP:
 24303 00004237 5F                      	POP	DI			; Start of next element
 24304 00004238 E89D02                  	CALL	InsertPath		; insert dir entry info
 24305                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24306 0000423B 8A05                    	MOV	AL,[DI]
 24307 0000423D 08C0                    	OR	AL,AL
 24308 0000423F 74B8                    	JZ	short _SETRET		; At end
 24309 00004241 47                      	INC	DI			; Skip over "/"
 24310 00004242 89FE                    	MOV	SI,DI			; Point with SI
 24311 00004244 E8520F                  	call	PATHCHRCMP
 24312 00004247 7503                    	JNZ	short find_bad_name	; oops
 24313 00004249 E9A9FE                  	JMP	FINDPATH		; Next element
 24314                                  
 24315                                  find_bad_name:
 24316 0000424C 4E                      	DEC	SI			; Undo above INC to get failure point
 24317                                  _BADPATH:
 24318 0000424D 30C9                    	XOR	CL,CL			; Set zero
 24319 0000424F EB2C                    	JMP	SHORT BADPRET
 24320                                  
 24321                                  FILEINPATH:
 24322 00004251 5F                      	POP	DI			; Start of next element
 24323                                  
 24324                                  ;hkn; SS is DOSDATA
 24325                                  	;context DS			; Got to from one place with DS gone
 24326 00004252 16                      	push	ss
 24327 00004253 1F                      	pop	ds
 24328                                  
 24329                                  ; DOS 3.3 FastOpen
 24330                                  	;test	byte [FastOpenFlg],1
 24331 00004254 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 24332 00004259 740B                    	JZ	short NO_FAST		; device info to fastopen
 24333                                  	;test	byte [FastOpenFlg],2
 24334 0000425B F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24335 00004260 7404                    	JZ	short NO_FAST
 24336 00004262 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 24337                                  					 ; success
 24338                                  NO_FAST:
 24339                                  ; DOS 3.3 FastOpen
 24340 00004266 8A05                    	MOV	AL,[DI]
 24341 00004268 08C0                    	OR	AL,AL
 24342 0000426A 7404                    	JZ	short INCRET
 24343 0000426C 89FE                    	MOV	SI,DI			; Path too long
 24344 0000426E EB0D                    	JMP	SHORT BADPRET
 24345                                  
 24346                                  INCRET:
 24347                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24348                                  
 24349 00004270 E86502                  	CALL   InsertPath		; insert dir entry info
 24350                                  
 24351                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24352 00004273 FEC0                    	INC	AL			; Reset zero
 24353                                  	; 16/12/2022	
 24354                                  ;_SETRET:
 24355 00004275 C3                      	retn
 24356                                  
 24357                                  BADPATHPOP:
 24358 00004276 5E                      	POP	SI			; Start of next element
 24359 00004277 8A04                    	MOV	AL,[SI]
 24360 00004279 89FE                    	MOV	SI,DI			; Start of bad element
 24361 0000427B 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 24362                                  BADPRET:
 24363 0000427D A0[6D05]                	MOV	AL,[SATTRIB]
 24364 00004280 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 24365 00004283 F9                      	STC
 24366 00004284 C3                      	retn
 24367                                  
 24368                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 24369                                  ;---------------------------------------------------------------------------
 24370                                  ;
 24371                                  ; Procedure Name : STARTSRCH
 24372                                  ;
 24373                                  ; Inputs:
 24374                                  ;	[THISDPB] Set
 24375                                  ; Function:
 24376                                  ;	Set up a search for GETENTRY and NEXTENTRY
 24377                                  ; Outputs:
 24378                                  ;	ES:BP = Drive parameters
 24379                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 24380                                  ; Destroys ES,BP,AX
 24381                                  ;--------------------------------------------------------------------------
 24382                                  
 24383                                  STARTSRCH:
 24384 00004285 C42E[8A05]              	LES	BP,[THISDPB]
 24385 00004289 31C0                    	XOR	AX,AX
 24386 0000428B A3[4803]                	MOV	[LASTENT],AX
 24387 0000428E A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 24388 00004291 48                      	DEC	AX
 24389 00004292 A3[D805]                	MOV	[ENTFREE],AX
 24390 00004295 A3[DA05]                	MOV	[ENTLAST],AX
 24391 00004298 C3                      	retn
 24392                                  
 24393                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 24394                                  ;----------------------------------------------------------------------------
 24395                                  ; Procedure Name : MatchAttributes
 24396                                  ;
 24397                                  ; Input:    [Attrib] = attribute to search for
 24398                                  ;	    CH = found attribute
 24399                                  ; Output:   JZ <match>
 24400                                  ;	    JNZ <nomatch>
 24401                                  ; Registers modified: noneski
 24402                                  ;----------------------------------------------------------------------------
 24403                                  
 24404                                  MatchAttributes:
 24405 00004299 50                      	PUSH	AX
 24406                                  
 24407                                  ;hkn; SS override
 24408 0000429A 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 24409 0000429E F6D0                    	NOT	AL			; AL <- SearchSet'
 24410 000042A0 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 24411                                  	;and	al,16h
 24412 000042A2 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 24413                                  ;
 24414                                  ; the result is non-zero if an attribute is not in the search set
 24415                                  ; and in the found set and in the important set. This means that we do not
 24416                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 24417                                  ;
 24418 000042A4 58                      	POP	AX
 24419 000042A5 C3                      	retn
 24420                                  
 24421                                  ; 19/05/2019 - Retro DOS v4.0
 24422                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 24423                                  
 24424                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24425                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 24426                                  
 24427                                  ;Break <DevName - Look for name of device>
 24428                                  ;---------------------------------------------------------------------------
 24429                                  ;
 24430                                  ; Procedure Name : DevName
 24431                                  ;
 24432                                  ; Inputs:
 24433                                  ;	DS,ES:DOSDATA
 24434                                  ;	Filename in NAME1
 24435                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 24436                                  ; Function:
 24437                                  ;	Determine if file is in list of I/O drivers
 24438                                  ; Outputs:
 24439                                  ;	Carry set if not a device
 24440                                  ;	ELSE
 24441                                  ;	Zero flag set
 24442                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 24443                                  ;	     bits 0-4 set from low byte of attribute word
 24444                                  ;	DEVPT = DWORD pointer to Device header of device
 24445                                  ; BX destroyed, others preserved
 24446                                  ;---------------------------------------------------------------------------
 24447                                  
 24448                                  DEVNAME:
 24449                                  	; 28/07/2018 - Retro DOS v3.0
 24450                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 24451                                  
 24452 000042A6 56                      	PUSH	SI
 24453 000042A7 57                      	PUSH	DI
 24454 000042A8 51                      	PUSH	CX
 24455 000042A9 50                      	PUSH	AX
 24456                                  
 24457                                  ; E5 special code
 24458 000042AA FF36[4B05]              	PUSH	WORD [NAME1]
 24459 000042AE 803E[4B05]05            	CMP	byte [NAME1],5
 24460 000042B3 7505                    	JNZ	short NOKTR
 24461 000042B5 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 24462                                  NOKTR:
 24463                                  	;test	byte [ATTRIB],8
 24464 000042BA F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 24465                                  					; If looking for VOL id don't find devs
 24466 000042BF 7521                    	JNZ	short RET31
 24467                                  
 24468                                  ;hkn; NULDEV is in DOSDATA
 24469 000042C1 BE[4800]                	MOV	SI,NULDEV
 24470                                  LOOKIO:
 24471                                  	; 21/11/2022
 24472                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 24473                                  	; 17/12/2022
 24474                                  	;test	byte [si+5],80h
 24475 000042C4 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 24476                                  	;;test	word [si+4],8000h
 24477                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 24478 000042C8 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 24479 000042CA 89F0                    	MOV	AX,SI
 24480                                  	;add	si,10
 24481 000042CC 83C60A                  	ADD	SI,SYSDEV.NAME
 24482                                  
 24483                                  ;hkn; NAME1 is in DOSDATA
 24484 000042CF BF[4B05]                	MOV	DI,NAME1
 24485 000042D2 B90400                  	MOV	CX,4			; All devices are 8 letters
 24486 000042D5 F3A7                    	REPE	CMPSW			; Check for name in list
 24487 000042D7 89C6                    	MOV	SI,AX
 24488 000042D9 7415                    	JZ	short IOCHK		; Found it?
 24489                                  SKIPDEV:
 24490 000042DB C534                    	LDS	SI,[SI]			; Get address of next device
 24491 000042DD 83FEFF                  	CMP	SI,-1			; At end of list?
 24492 000042E0 75E2                    	JNZ	short LOOKIO
 24493                                  RET31:	
 24494 000042E2 F9                      	STC				; Not found
 24495                                  RETNV:	
 24496 000042E3 8CD1                    	MOV	CX,SS
 24497 000042E5 8ED9                    	MOV	DS,CX
 24498                                  
 24499 000042E7 8F06[4B05]              	POP	WORD [NAME1]
 24500 000042EB 58                      	POP	AX
 24501 000042EC 59                      	POP	CX
 24502 000042ED 5F                      	POP	DI
 24503 000042EE 5E                      	POP	SI
 24504 000042EF C3                      	RETN
 24505                                  
 24506                                  IOCHK:
 24507                                  ;hkn; SS override for DEVPT
 24508 000042F0 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 24509                                  	;mov	bh,[si+4]
 24510 000042F5 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 24511 000042F8 80CFC0                  	OR	BH,0C0h
 24512 000042FB 80E7DF                  	and	bh,0DFh
 24513                                  	;AND	BH,~(020h)		; Clears Carry
 24514 000042FE 368936[9A05]            	MOV	[SS:DEVPT],SI
 24515 00004303 EBDE                    	JMP	short RETNV
 24516                                  
 24517                                  ;BREAK <Build_device_ent - Make a Directory entry>
 24518                                  ;---------------------------------------------------------------------------
 24519                                  ; Procedure Name : Build_device_ent
 24520                                  ;
 24521                                  ; Inputs:
 24522                                  ;	[NAME1] has name
 24523                                  ;	BH is attribute field (supplied by DEVNAME)
 24524                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 24525                                  ; Function:
 24526                                  ;	Build a directory entry for a device at DEVFCB
 24527                                  ; Outputs:
 24528                                  ;	BX points to DEVFCB
 24529                                  ;	SI points to dir_first field
 24530                                  ;	AH = input BH
 24531                                  ;	AL = 0
 24532                                  ;	dir_first = DEVPT
 24533                                  ;	Zero Set, Carry Clear
 24534                                  ; DS,ES,BP preserved, others destroyed
 24535                                  ;--------------------------------------------------------------------------
 24536                                  
 24537                                  Build_device_ent:
 24538 00004305 B82020                  	MOV	AX,"  " ; 2020h
 24539                                  
 24540                                  ;hkn; DEVFCB is in DOSDATA
 24541 00004308 BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 24542                                  
 24543                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 24544                                  
 24545 0000430B AB                      	STOSW
 24546 0000430C AA                      	STOSB				; Blank out extent field
 24547                                  	;mov	al,40h
 24548 0000430D B040                    	MOV	AL,attr_device
 24549                                  
 24550                                  ;	Fill Dir_attr
 24551                                  
 24552 0000430F AA                      	STOSB				; Set attribute field
 24553 00004310 31C0                    	XOR	AX,AX
 24554 00004312 B90A00                  	MOV	CX,10
 24555                                  
 24556                                  ; Fill dir_pad
 24557                                  
 24558 00004315 F3AB                    	REP	STOSW			; Fill rest with zeros
 24559 00004317 E82CC8                  	call	DATE16
 24560                                  
 24561                                  ;hkn; DEVFCB is in DOSDATA
 24562 0000431A BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 24563 0000431D 92                      	XCHG	AX,DX
 24564                                  
 24565                                  ; Fill dir_time
 24566                                  
 24567 0000431E AB                      	STOSW
 24568 0000431F 92                      	XCHG	AX,DX
 24569                                  
 24570                                  ; Fill dir_date
 24571                                  
 24572 00004320 AB                      	STOSW
 24573 00004321 89FE                    	MOV	SI,DI			; SI points to dir_first field
 24574 00004323 A1[9A05]                	MOV	AX,[DEVPT]
 24575                                  
 24576                                  ; Fill dir_first
 24577                                  
 24578 00004326 AB                      	STOSW				; Dir_first points to device
 24579 00004327 A1[9C05]                	MOV	AX,[DEVPT+2]
 24580                                  ;
 24581                                  ; Fill dir_size_l
 24582                                  ;
 24583 0000432A AB                      	STOSW
 24584 0000432B 88FC                    	MOV	AH,BH			; Put device atts in AH
 24585                                  
 24586                                  ;hkn; DEVFCB is in DOSDATA
 24587 0000432D BB[4B05]                	MOV	BX,DEVFCB
 24588 00004330 30C0                    	XOR	AL,AL			; Set zero, clear carry
 24589 00004332 C3                      	retn
 24590                                  
 24591                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 24592                                  ;----------------------------------------------------------------------------
 24593                                  ;
 24594                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 24595                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 24596                                  ;   If invalid, reset original CDS to root.
 24597                                  ;
 24598                                  ;   Inputs:	ThisCDS points to CDS of interest
 24599                                  ;		SS:DI points to temp buffer
 24600                                  ;   Outputs:	The current directory string is validated on the appropriate
 24601                                  ;		    drive
 24602                                  ;		ThisDPB changed
 24603                                  ;		ES:DI point to CDS
 24604                                  ;		Carry set if error (currently user FAILed to I 24)
 24605                                  ;   Registers modified: all
 24606                                  ;----------------------------------------------------------------------------
 24607                                  
 24608                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24609                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 24610                                  
 24611                                  ValidateCDS:
 24612                                  	; 19/05/2019 - Retro DOS v4.0
 24613                                  	; 28/07/2018 - Retro DOS v3.0
 24614                                  
 24615                                     %define  Temp	[bp-2]	; word
 24616                                     %define  SaveCDS	[bp-6]	; dword
 24617                                     %define  SaveCDSL	[bp-6]	; word
 24618                                     %define  SaveCDSH	[bp-4]	; word
 24619                                  
 24620                                  	;Enter
 24621 00004333 55                      	push	bp
 24622 00004334 89E5                    	mov	bp,sp
 24623 00004336 83EC06                  	sub	sp,6
 24624                                  
 24625 00004339 897EFE                  	MOV	Temp,DI
 24626                                  
 24627                                  ;hkn; SS override
 24628 0000433C 36C536[A205]            	LDS	SI,[SS:THISCDS]
 24629 00004341 8976FA                  	MOV	SaveCDSL,SI
 24630 00004344 8C5EFC                  	MOV	SaveCDSH,DS
 24631                                  	;EnterCrit critDisk
 24632 00004347 E83ED0                  	call	ECritDisk
 24633                                  	; 21/11/2022
 24634                                  	;test	byte [SI+curdir.flags+1],80h
 24635                                  	;test	word [si+67],8000h
 24636                                  	; 17/12/2022
 24637                                  	;test	byte [SI+68],80h
 24638 0000434A F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 24639                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 24640 0000434E 7403                    	JZ	short _DoSplice
 24641 00004350 E99200                  	JMP	FatFail
 24642                                  _DoSplice:
 24643 00004353 30D2                    	XOR	DL,DL
 24644 00004355 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 24645                                  
 24646                                  ;hkn; SS is DOSDATA
 24647                                  	;Context ES
 24648 0000435A 16                      	push	ss
 24649 0000435B 07                      	pop	es
 24650                                  	;Invoke	FStrcpy
 24651 0000435C E8FBCE                  	call	FStrCpy
 24652 0000435F 8B76FE                  	MOV	SI,Temp
 24653                                  
 24654                                  ;hkn; SS is DOSDATA
 24655                                  	;Context DS
 24656 00004362 16                      	push	ss
 24657 00004363 1F                      	pop	ds	
 24658                                  	;Invoke	Splice
 24659 00004364 E8A32B                  	call	Splice
 24660                                  
 24661                                   ;hkn; SS is DOSDATA
 24662                                  	;Context DS			;   FatReadCDS (ThisCDS);
 24663 00004367 16                      	push	ss
 24664 00004368 1F                      	pop	ds
 24665 00004369 8816[4C03]              	MOV	[NoSetDir],DL
 24666 0000436D C43E[A205]              	LES	DI,[THISCDS]
 24667                                  	;SAVE	<BP>
 24668 00004371 55                      	push	bp
 24669                                  	;Invoke	FATREAD_CDS
 24670 00004372 E87A14                  	call	FATREAD_CDS	
 24671                                  	;RESTORE <BP>
 24672 00004375 5D                      	pop	bp
 24673 00004376 726D                    	JC	short FatFail
 24674                                  
 24675 00004378 C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 24676                                  	;cmp	word [si+73],-1
 24677 0000437C 837C49FF                	CMP	word [SI+curdir.ID],-1
 24678 00004380 7555                    	JNZ	short RestoreCDS
 24679                                  
 24680                                  ;hkn; SS is DOSDATA
 24681                                  	;Context ES
 24682 00004382 16                      	push	ss
 24683 00004383 07                      	pop	es
 24684                                  
 24685                                  ;hkn; SS override
 24686                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 24687 00004384 36FF36[B205]            	push	word [SS:WFP_START]
 24688                                  	;cmp	si,[bp-6]
 24689 00004389 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 24690 0000438C 750B                    	JNZ	short DoChdir
 24691                                  	;mov	di,[bp-2]
 24692 0000438E 8B7EFE                  	MOV	DI,Temp
 24693                                  
 24694                                  ;hkn; SS override
 24695 00004391 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 24696                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 24697 00004396 E8C1CE                  	call	FStrCpy
 24698                                  DoChdir:
 24699                                  ;hkn; SS is DOSDATA
 24700                                  	;Context DS
 24701 00004399 16                      	push	ss
 24702 0000439A 1F                      	pop	ds
 24703                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 24704 0000439B FF36[6D05]              	push	word [SATTRIB]
 24705 0000439F 55                      	push	bp
 24706                                  	;Invoke	DOS_ChDir
 24707 000043A0 E8B9EE                  	call	DOS_CHDIR
 24708                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 24709 000043A3 5D                      	pop	bp
 24710 000043A4 5B                      	pop	bx
 24711 000043A5 8F06[B205]              	pop	word [WFP_START]
 24712 000043A9 881E[6D05]              	MOV	[SATTRIB],BL
 24713 000043AD C576FA                  	LDS	SI,SaveCDS
 24714 000043B0 730F                    	JNC	short SetCluster	;	if (c == -1) {
 24715                                  
 24716                                  ;hkn; SS override for THISCDS
 24717 000043B2 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 24718 000043B7 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 24719 000043BC 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 24720 000043BE 884C03                  	MOV	[SI+3],CL		;	    }
 24721                                  SetCluster:
 24722                                  	;mov	word [si+73],0FFFFh
 24723 000043C1 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 24724 000043C6 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 24725                                  	; 21/11/2022
 24726                                  	;test	byte [si+curdir.flags+1],20h
 24727                                  	; 19/05/2019
 24728                                  	; MSDOS 6.0
 24729                                  	; 17/12/2022
 24730                                  	;test	byte [si+68],20h
 24731 000043CB F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 24732                                  	;;test	word [si+67],2000h
 24733                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 24734 000043CF 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 24735 000043D1 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 24736                                  _setdirclus:
 24737                                  	;mov	[si+73],cx
 24738 000043D4 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 24739                                  RestoreCDS:
 24740 000043D7 C47EFA                  	LES	DI,SaveCDS
 24741 000043DA 36893E[A205]            	MOV	[SS:THISCDS],DI
 24742 000043DF 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 24743 000043E4 F8                      	CLC
 24744                                  FatFail:
 24745                                  	;LeaveCrit critDisk
 24746 000043E5 E8BBCF                  	call	LCritDisk
 24747                                  
 24748                                  	;les	di,[bp-6]
 24749 000043E8 C47EFA                  	LES	DI,SaveCDS
 24750                                  	;Leave
 24751 000043EB 89EC                    	mov	sp,bp
 24752 000043ED 5D                      	pop	bp
 24753 000043EE C3                      	retn
 24754                                  
 24755                                  ; 28/07/2018 - Retro DOS v3.0
 24756                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 24757                                  
 24758                                  ;Break	<CheckThisDevice - Check for being a device>
 24759                                  ;---------------------------------------------------------------------------
 24760                                  ;
 24761                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 24762                                  ;   device specified. We will return carry if there is a device present. 
 24763                                  ;   The forms of devices we will recognize are:
 24764                                  ;
 24765                                  ;	[path]device
 24766                                  ;
 24767                                  ;   Note that the drive letter has *already* been removed. All other forms
 24768                                  ;   are not considered to be devices. If such a device is found we change
 24769                                  ;   the source pointer to point to the device component.
 24770                                  ;
 24771                                  ;   Inputs:	ES is DOSDATA
 24772                                  ;		DS:SI contains name
 24773                                  ;   Outputs:	ES is DOSDATA
 24774                                  ;		DS:SI point to name or device
 24775                                  ;		Carry flag set if device was found
 24776                                  ;		Carry flag reset otherwise
 24777                                  ;   Registers Modified: all except ES:DI, DS
 24778                                  ;----------------------------------------------------------------------------
 24779                                  
 24780                                  CheckThisDevice:
 24781 000043EF 57                      	push	di
 24782 000043F0 56                      	push	si
 24783 000043F1 89F7                    	MOV	DI,SI
 24784                                  
 24785                                  ; Check for presence of \dev\ (Dam multiplan!)
 24786                                  
 24787 000043F3 8A04                    	MOV	AL,[SI]
 24788 000043F5 E8A10D                  	call	PATHCHRCMP		; is it a path char?
 24789 000043F8 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 24790 000043FA 46                      	INC	SI			; simulate LODSB
 24791                                  
 24792                                  ; We have the leading path separator. Look for DEV part.
 24793                                  
 24794 000043FB AD                      	LODSW
 24795 000043FC 0D2020                  	OR	AX,2020h
 24796 000043FF 3D6465                  	cmp	ax,"de"
 24797                                  	;CMP	AX,"e"<< 8 + "d"
 24798 00004402 752D                    	JNZ	short NotDevice		; not "de", assume not device
 24799 00004404 AC                      	LODSB
 24800 00004405 0C20                    	OR	AL,20h
 24801 00004407 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 24802 00004409 7526                    	JNZ	short NotDevice
 24803 0000440B AC                      	LODSB
 24804 0000440C E88A0D                  	call	PATHCHRCMP		; do we have the last path separator?
 24805 0000440F 7520                    	JNZ	short NotDevice		; no. go for it.
 24806                                  
 24807                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 24808                                  ; SI and DevName may destroy DS.
 24809                                  
 24810                                  ParseDev:
 24811 00004411 1E                      	push	ds
 24812 00004412 56                      	push	si			; preserve the source pointer
 24813 00004413 E8C10C                  	call	NameTrans		; advance DS:SI
 24814 00004416 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 24815 00004419 F9                      	STC				; simulate a Carry return from DevName
 24816 0000441A 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 24817                                  
 24818                                  ;hkn; SS is DOSDATA
 24819 0000441C 16                      	push	ss
 24820 0000441D 1F                      	pop	ds
 24821                                  
 24822                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 24823                                  ;
 24824                                  ; SR;
 24825                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 24826                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 24827                                  ; old call set the volume attribute bit.
 24828                                  
 24829 0000441E A0[6D05]                	mov	al,[SATTRIB]
 24830 00004421 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 24831                                  
 24832                                  ; M026 - end
 24833                                  
 24834 00004424 E87FFE                  	call	DEVNAME
 24835                                  
 24836                                  SkipSearch:
 24837 00004427 5E                      	pop	si
 24838 00004428 1F                      	pop	ds
 24839                                  
 24840                                  ; SI points to the beginning of the potential device. If we have a device
 24841                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 24842                                  ; original value. At this point Carry set indicates FILE.
 24843                                  
 24844                                  CheckReturn:
 24845 00004429 5F                      	pop	di			; get original SI
 24846 0000442A 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 24847 0000442C 89FE                    	MOV	SI,DI
 24848                                  Check_Done:
 24849 0000442E 5F                      	pop	di
 24850 0000442F F5                      	CMC				; invert carry. Carry => device
 24851 00004430 C3                      	retn
 24852                                  NotDevice:
 24853 00004431 F9                      	STC
 24854 00004432 EBF5                    	JMP	short CheckReturn
 24855                                  
 24856                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 24857                                  ;-----------------------------------------------------------------------------
 24858                                  ;
 24859                                  ; Procedure Name : LookupPath
 24860                                  ;
 24861                                  ; Output  DS:SI -> path name,
 24862                                  ;	  ES:DI -> dir entry info buffer
 24863                                  ;	  ES:CX -> extended dir info buffer
 24864                                  ;
 24865                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 24866                                  ;			     FastOpen, DS:SI points to char just one after
 24867                                  ;			     the last char of path name which is fully or
 24868                                  ;			     partially found in FastOPen
 24869                                  ;	  carry flag set : FastOpen not in memory or path name not found
 24870                                  ;
 24871                                  ;----------------------------------------------------------------------------
 24872                                  
 24873                                  LookupPath:
 24874                                  ;	PUSH	AX
 24875                                  
 24876                                  ;hkn; SS override
 24877                                  	;test	byte [ss:FastOpenFlg],1
 24878 00004434 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 24879 0000443A 7503                    	JNZ	short FASTINST			    ; and this routine is
 24880                                  NOLOOK:
 24881 0000443C E99700                  	JMP	NOLOOKUP			    ; executed once
 24882                                  
 24883                                  FASTINST:
 24884                                  ;hkn; SS override
 24885                                  	;test	byte [ss:FastOpenFlg],8
 24886 0000443F 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 24887 00004445 75F5                    	JNZ	short NOLOOK			    ; yes
 24888                                  
 24889 00004447 BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 24890                                  
 24891                                  ;hkn; SS override
 24892 0000444A 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 24893 0000444F BF[460D]                	MOV	DI,Dir_Info_Buff
 24894 00004452 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24895 00004455 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 24896 00004457 1E                      	PUSH	DS
 24897 00004458 07                      	POP	ES
 24898                                  
 24899                                  ;hkn; SS override
 24900                                  	;call	far [bx+2]
 24901 00004459 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 24902 0000445C 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 24903                                  
 24904 0000445E 8D5CFE                  	LEA	BX,[SI-2]
 24905                                  
 24906                                  ;hkn; SS override
 24907 00004461 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 24908 00004466 745D                    	JZ	short NOTFOUND			    ; no
 24909                                  
 24910                                  	; 19/05/2019 - Retro DOS v4.0
 24911                                  
 24912                                  	; MSDOS 6.0				    ; fully or partially found
 24913 00004468 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 24914 0000446B 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 24915 0000446D 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 24916                                  
 24917                                  ;hkn; SS override for attrib/sattrib
 24918 0000446E 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 24919 00004473 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 24920 00004478 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 24921                                  	;mov	ch,[es:di+0Bh]
 24922 0000447D 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 24923 00004481 E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 24924                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 24925 00004484 59                      	POP	CX				    ;AN000;FO.;
 24926 00004485 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 24927                                  parfnd:
 24928                                  
 24929                                  ;hkn; SS override
 24930 00004487 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 24931 0000448C 89CB                    	MOV	BX,CX
 24932                                  	; MSDOS 6.0
 24933                                  	;mov	ax,[bx+7]
 24934 0000448E 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 24935                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 24936 00004491 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 24937 00004495 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 24938 00004498 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 24939                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24940                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 24941                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 24942 0000449C 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 24943 0000449F 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 24944                                  
 24945 000044A3 06                      	PUSH	ES				    ; save ES
 24946                                  ;hkn; SS override
 24947 000044A4 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 24948 000044A9 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 24949                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 24950 000044AC 07                      	POP	ES				    ; pop ES
 24951                                  ;SR;
 24952                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 24953                                  ;indicate it is not a root dir
 24954                                  
 24955 000044AD 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 24956 000044B4 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 24957 000044B9 89FB                    	MOV	BX,DI				    ; start of entry
 24958                                  	;lea	si,[di+1Ah]
 24959 000044BB 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 24960                                  						    ; dir_first field in the
 24961                                  						    ; dir entry
 24962                                  ;hkn; SS override for FastOpenFlg
 24963                                  	;or	byte [ss:FastOpenFlg],2
 24964 000044BE 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 24965                                  ;	POP	AX
 24966 000044C4 C3                      	RETN
 24967                                  NOTFOUND:
 24968 000044C5 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 24969 000044C8 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 24970 000044CA 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 24971                                  Partial_Success:
 24972                                  	;and	byte [SS:FastOpenFlg],0FBh
 24973 000044D0 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 24974                                  NOLOOKUP:
 24975                                  ;	POP	AX
 24976 000044D6 F9                      	STC
 24977 000044D7 C3                      	RETN
 24978                                  
 24979                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 24980                                  ;-----------------------------------------------------------------------------
 24981                                  ;
 24982                                  ; Procedure Name : InsertPath
 24983                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 24984                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 24985                                  ;	  DS = DOSDATA
 24986                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 24987                                  ;
 24988                                  ;-----------------------------------------------------------------------------
 24989                                  
 24990                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24991                                  
 24992                                  InsertPath:
 24993 000044D8 9C                      	PUSHF
 24994                                  ;hkn; SS override for FastOpenFlag
 24995                                  	;test	byte [SS:FastOpenFlg], 1
 24996 000044D9 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24997 000044DF 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 24998                                  	;test	byte [ss:FastOpenFlg],2
 24999 000044E1 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25000 000044E7 740D                    	JZ	short INSERT_DIR_INFO		; no
 25001                                  	;and	byte [ss:FastOpenFlg],0FDh
 25002 000044E9 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25003 000044EF 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25004 000044F4 EB5E                    	JMP	short GET_NEXT2
 25005                                  INSERT_DIR_INFO:				; save registers
 25006 000044F6 1E                      	PUSH	DS
 25007 000044F7 06                      	PUSH	ES
 25008 000044F8 53                      	PUSH	BX
 25009 000044F9 56                      	PUSH	SI
 25010 000044FA 57                      	PUSH	DI
 25011 000044FB 51                      	PUSH	CX
 25012 000044FC 50                      	PUSH	AX
 25013                                  
 25014                                  ;hkn; SS override
 25015 000044FD 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25016 00004502 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25017                                  	;mov	ax,[di+6]
 25018 00004505 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25019                                  	; MSDOS 6.0
 25020                                  	;mov	[ss:si+1],ax
 25021 00004508 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25022                                  	; 19/05/2019 - Retro DOS v4.0
 25023 0000450C 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25024                                  
 25025                                  ;hkn; SS is DOSDATA
 25026 0000450F 16                      	push	ss
 25027 00004510 1F                      	pop	ds
 25028                                  	; MSDOS 3.3	
 25029                                  	;;mov	[si+1],ax	
 25030                                  	;MOV	[SI+FEI.dirsec],AX
 25031                                  	; MSDOS 6.0
 25032                                  	;mov	[si+3],ax
 25033 00004511 894403                  	MOV	[SI+FEI.dirsec+2],AX  ;AN000;>32mb save high dir sector
 25034                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25035 00004514 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25036                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25037                                  	;mov	[si+3],ax ; MSDOS 3.3
 25038 00004517 894405                  	MOV	[SI+FEI.clusnum],AX
 25039                                  	; MSDOS 6.0
 25040 0000451A A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25041                                  	;mov	[si+7],ax
 25042 0000451D 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25043 00004520 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25044                                  	;mov	[si+9],ax
 25045 00004523 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25046                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25047 00004526 89D8                    	MOV	AX,BX
 25048                                  	;;add	di,16  ; MSDOS 3.3
 25049                                  	;add	di,20  ; MSDOS 6.0
 25050 00004528 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25051 0000452B 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25052                                  	;mov	cl,32
 25053 0000452D B120                    	MOV	CL,dir_entry.size
 25054 0000452F F6F1                    	DIV	CL
 25055                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25056 00004531 8804                    	mov	[si],al
 25057                                  
 25058 00004533 1E                      	PUSH	DS
 25059 00004534 07                      	POP	ES
 25060                                  
 25061 00004535 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25062 00004539 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25063                                  	;cmp	word [di+1Ah],0
 25064 0000453B 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25065                                  					; never insert info when file is empty
 25066 0000453F 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25067                                  
 25068 00004541 56                      	PUSH	SI			; ES:BX -> extended info
 25069 00004542 5B                      	POP	BX
 25070                                  
 25071                                  	;mov	al,2
 25072 00004543 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25073 00004545 BE[300D]                	MOV	SI,FastOpenTable
 25074                                  	;call	far [es:si+2]
 25075                                  	; 07/12/2022
 25076 00004548 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25077                                  
 25078 0000454C F8                      	CLC
 25079                                  SKIP_INSERT:
 25080 0000454D 58                      	POP	AX
 25081 0000454E 59                      	POP	CX			; restore registers
 25082 0000454F 5F                      	POP	DI
 25083 00004550 5E                      	POP	SI
 25084 00004551 5B                      	POP	BX
 25085 00004552 07                      	POP	ES
 25086 00004553 1F                      	POP	DS
 25087                                  GET_NEXT2:
 25088                                  	;or	[ss:FastOpenFlg],8
 25089 00004554 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25090                                  					; we got dir info from fastopen so
 25091                                  GET_NEXT_ELEMENT:
 25092 0000455A 9D                      	POPF
 25093 0000455B C3                      	RETN
 25094                                  
 25095                                  ;============================================================================
 25096                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25097                                  ;============================================================================
 25098                                  ; 17/07/2018 - Retro DOS v3.0
 25099                                  ; 30/04/2019 - Retro DOS v4.0
 25100                                  
 25101                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25102                                  
 25103                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25104                                  
 25105                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25106                                  
 25107                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25108                                  ;DEV001s:
 25109                                  ;		length of packets
 25110 0000455C 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25111                                  ;LenTab: db	22,14,22,13,15,14
 25112                                  
 25113                                  ;	Error Function
 25114                                  
 25115                                  CmdTab:
 25116 00004562 8604                    	DB	86h, DEVRD	; 0 input
 25117 00004564 8605                    	DB	86h, DEVRDND	; 1 input status
 25118 00004566 8708                    	DB	87h, DEVWRT	; 2 output
 25119 00004568 870A                    	DB	87h, DEVOST	; 3 output status
 25120 0000456A 8607                    	DB	86h, DEVIFL	; 4 input flush
 25121 0000456C 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25122                                  
 25123                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25124                                  
 25125                                  ;CmdTab:
 25126                                  ;	db	86h, 4
 25127                                  ;	db	86h, 5
 25128                                  ;	db	87h, 8
 25129                                  ;	db	87h, 10
 25130                                  ;	db	86h, 7
 25131                                  ;	db	86h, 5
 25132                                  
 25133                                  ;DEV001E:
 25134                                  
 25135                                  ; 30/04/2019 - Retro DOS v4.0
 25136                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25137                                  
 25138                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25139                                  ;----------------------------------------------------------------------------
 25140                                  ;
 25141                                  ; Procedure Name : IOFUNC
 25142                                  ;
 25143                                  ; Inputs:
 25144                                  ;	DS:SI Points to SFT
 25145                                  ;	AH is function code
 25146                                  ;		= 0 Input
 25147                                  ;		= 1 Input Status
 25148                                  ;		= 2 Output
 25149                                  ;		= 3 Output Status
 25150                                  ;		= 4 Flush
 25151                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25152                                  ;				   present.
 25153                                  ;	AL = character if output
 25154                                  ; Function:
 25155                                  ;	Perform indicated I/O to device or file
 25156                                  ; Outputs:
 25157                                  ;	AL is character if input
 25158                                  ;	If a status call
 25159                                  ;		zero set if not ready
 25160                                  ;		zero reset if ready (character in AL for input status)
 25161                                  ; For regular files:
 25162                                  ;	Input Status
 25163                                  ;		Gets character but restores position
 25164                                  ;		Zero set on EOF
 25165                                  ;	Input
 25166                                  ;		Gets character advances position
 25167                                  ;		Returns ^Z on EOF
 25168                                  ;	Output Status
 25169                                  ;		Always ready
 25170                                  ; AX altered, all other registers preserved
 25171                                  ;----------------------------------------------------------------------------
 25172                                  
 25173                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25174                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25175                                  
 25176                                  IOFUNC:
 25177 0000456E 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25178                                  					; DEVIOBUF
 25179 00004573 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25180 0000457A 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25181 00004581 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25182                                  	;test	byte [si+6],80h
 25183                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25184 00004585 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25185 00004589 7403                    	JZ	short IOTO22		;AN000;
 25186 0000458B E9A500                  	JMP	IOTOFILE		;AN000;
 25187                                  IOTO22:
 25188                                  	;test	word [si+5],80h
 25189                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25190 0000458E F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25191 00004592 7503                    	JNZ	short IOTO33		;AN000;
 25192 00004594 E99C00                  	JMP	IOTOFILE		;AN000;
 25193                                  IOTO33:
 25194 00004597 06                      	push	es ; * (MSDOS 6.21)
 25195 00004598 E810BF                  	call	save_world
 25196 0000459B 8CDA                    	MOV	DX,DS
 25197 0000459D 8CD3                    	MOV	BX,SS
 25198 0000459F 8EDB                    	MOV	DS,BX
 25199 000045A1 8EC3                    	MOV	ES,BX
 25200 000045A3 31DB                    	XOR	BX,BX
 25201 000045A5 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25202 000045A8 7503                    	jnz	short _no_sys_wait
 25203                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25204                                  	; 16/12/2022
 25205 000045AA 80CF04                  	or	bh,04h
 25206                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25207                                  				    ; It is up to device driver to carry out
 25208                                  				    ; appropriate action.
 25209                                  _no_sys_wait:
 25210 000045AD 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25211 000045B1 31DB                    	XOR	BX,BX
 25212 000045B3 881E[8903]              	MOV	[IOMED],BL
 25213                                  
 25214 000045B7 88E3                    	MOV	BL,AH		 	; get function
 25215 000045B9 2E8AA7[5C45]            	MOV	AH,[cs:BX+LenTab]
 25216 000045BE D1E3                    	SHL	BX,1
 25217 000045C0 2E8B8F[6245]            	MOV	CX,[cs:BX+CmdTab]
 25218 000045C5 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25219 000045C8 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25220 000045CC 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25221                                  
 25222 000045D0 8EDA                    	MOV	DS,DX
 25223 000045D2 E86D01                  	CALL	DEVIOCALL
 25224 000045D5 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25225 000045DA 21FF                    	and	di,di
 25226 000045DC 7834                    	js	short DevErr
 25227                                  OKDevIO:
 25228 000045DE 8CD0                    	MOV	AX,SS
 25229 000045E0 8ED8                    	MOV	DS,AX
 25230                                  
 25231                                  	;cmp	ch,5
 25232 000045E2 80FD05                  	CMP	CH,DEVRDND
 25233 000045E5 7506                    	JNZ	short DNODRD
 25234 000045E7 A0[8903]                	MOV	AL,[IORCHR]
 25235 000045EA A2[BC03]                	MOV	[DEVIOBUF],AL
 25236                                  
 25237                                  DNODRD: 
 25238 000045ED 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 25239 000045F1 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 25240                                  	;and	ah,2
 25241 000045F3 80E402                  	AND	AH,STBUI>>8
 25242                                  
 25243                                  QuickReturn:				;AN000; 2/13/KK
 25244 000045F6 E89BBE                  	call	restore_world
 25245 000045F9 07                      	pop	es ; * (MSDOS 6.21)
 25246                                  
 25247                                  	; SR;
 25248                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 25249                                  	; IoStatFail = -1 (set after return from the I24)
 25250                                  
 25251                                  	; MSDOS 6.0
 25252 000045FA 9C                      	pushf
 25253 000045FB 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 25254 000045FF 98                      	cbw				;sign extend to word
 25255 00004600 83F8FF                  	cmp	ax,-1
 25256 00004603 7507                    	jne	short not_fail_ret
 25257 00004605 36FE06[8300]            	inc	byte [ss:IoStatFail]
 25258 0000460A 9D                      	popf
 25259 0000460B C3                      	retn
 25260                                  
 25261                                  not_fail_ret:
 25262 0000460C 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 25263 00004610 9D                      	popf
 25264 00004611 C3                      	retn
 25265                                  
 25266                                  DevErr:
 25267 00004612 88CC                    	MOV	AH,CL
 25268 00004614 E8BB0D                  	call	CHARHARD
 25269 00004617 3C01                    	CMP	AL,1
 25270 00004619 7507                    	JNZ	short NO_RETRY
 25271 0000461B E876BE                  	call	restore_world
 25272                                  	; 12/05/2019
 25273 0000461E 07                      	pop	es ; * (MSDOS 6.21)		
 25274 0000461F E94CFF                  	JMP	IOFUNC	; 10/08/2018
 25275                                  
 25276                                  NO_RETRY:
 25277                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 25278                                  	; ready so that DOS doesn't get caught in a status loop when user 
 25279                                  	; simply wants to ignore the error.
 25280                                  	;
 25281                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 25282                                  	; should be checked by the caller on return
 25283                                  
 25284                                  					; SS override
 25285 00004622 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 25286                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 25287                                  
 25288                                  	; SR;
 25289                                  	; Check if user failed
 25290                                  
 25291                                  	; MSDOS 6.0
 25292 00004628 3C03                    	cmp	al,3
 25293 0000462A 7505                    	jnz	short not_fail
 25294 0000462C 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 25295                                  not_fail:
 25296 00004631 EBAB                    	JMP	short OKDevIO
 25297                                  
 25298                                  IOTOFILE:
 25299 00004633 08E4                    	OR	AH,AH
 25300 00004635 7421                    	JZ	short IOIN
 25301 00004637 FECC                    	DEC	AH
 25302 00004639 7405                    	JZ	short IOIST
 25303 0000463B FECC                    	DEC	AH
 25304 0000463D 7411                    	JZ	short IOUT
 25305                                  IOUT_retn:	; 18/12/2022
 25306 0000463F C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 25307                                  IOIST:
 25308                                  	;push	word [si+15h]
 25309 00004640 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 25310                                  	;push	word [si+17h]
 25311 00004643 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 25312 00004646 E80F00                  	CALL	IOIN
 25313                                  	;pop	word [si+17h]
 25314 00004649 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 25315                                  	;pop	word [si+15h]
 25316 0000464C 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 25317 0000464F C3                      	retn
 25318                                  IOUT:
 25319 00004650 E82500                  	CALL	SETXADDR
 25320 00004653 E850EF                  	call	DOS_WRITE
 25321                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 25322                                  	; 18/12/2022
 25323 00004656 EB54                    	jmp	RESTXADDR
 25324                                  ;IOUT_retn:
 25325                                  	;retn			; come crying to me when things don't
 25326                                  				; work ARR
 25327                                  IOIN:
 25328 00004658 E81D00                  	CALL	SETXADDR
 25329                                  					; SS override for DOS34_FLAG
 25330                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 25331                                  	;or	word [ss:DOS34_FLAG],40h
 25332                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25333                                  	; 16/12/2022
 25334 0000465B 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 25335 00004661 E819ED                  	CALL	DOS_READ
 25336                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 25337                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 25338                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25339                                  	; 16/12/2022
 25340 00004664 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 25341 0000466A 09C9                    	OR	CX,CX			; Check EOF
 25342 0000466C E83D00                  	CALL	RESTXADDR
 25343                                  					; SS override
 25344 0000466F 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 25345 00004673 75CA                    	jnz	short IOUT_retn	
 25346 00004675 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 25347 00004677 C3                      	retn
 25348                                  
 25349                                  SETXADDR:
 25350                                  					; SS override
 25351 00004678 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 25352                                  
 25353 0000467D 06                      	push	es ; * (MSDOS 6.21)
 25354                                  
 25355 0000467E E82ABE                  	call	save_world
 25356                                  					; SS override for DMAADD and THISSFT
 25357 00004681 36FF36[2C03]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 25358 00004686 36FF36[2E03]            	PUSH	WORD [SS:DMAADD+2]
 25359 0000468B 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 25360                                  
 25361 00004690 16                      	push	ss
 25362 00004691 1F                      	pop	ds
 25363                                  
 25364 00004692 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 25365 00004696 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 25366 0000469A 890E[2E03]              	MOV	[DMAADD+2],CX
 25367 0000469E 8B0E[8A03]              	MOV	CX,[IOXAD]
 25368 000046A2 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 25369 000046A6 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 25370 000046AA EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 25371                                  
 25372                                  RESTXADDR:
 25373 000046AC 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 25374 000046B0 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 25375 000046B4 8F06[2C03]              	POP	WORD [DMAADD]
 25376                                  
 25377 000046B8 E8D9BD                  	call	restore_world
 25378                                  
 25379 000046BB 07                      	pop	es ; * (MSDOS 6.21)
 25380                                  					; SS override
 25381                                  RESTRET:
 25382 000046BC 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 25383                                  
 25384                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 25385                                  ; 21/11/2022
 25386                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 25387                                  
 25388                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 25389                                  
 25390                                  ;----------------------------------------------------------------------------
 25391                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 25392                                  ;
 25393                                  ;	Dev_Open_SFT issues an open call to the device associated with
 25394                                  ;	the SFT.
 25395                                  ;
 25396                                  ;	ENTRY	(ES:DI) = SFT
 25397                                  ;	EXIT	none
 25398                                  ;	USES	all
 25399                                  ;----------------------------------------------------------------------------
 25400                                  
 25401                                  DEV_OPEN_SFT:
 25402 000046C1 06                      	push	es ; * (MSDOS 6.21)
 25403 000046C2 E8E6BD                  	call	save_world
 25404                                  	;mov	al,0Dh	
 25405 000046C5 B00D                    	MOV	AL,DEVOPN
 25406 000046C7 EB06                    	JMP	SHORT DO_OPCLS
 25407                                  
 25408                                  ;----------------------------------------------------------------------------
 25409                                  ; Procedure Name : DEV_CLOSE_SFT
 25410                                  ;
 25411                                  ; Inputs:
 25412                                  ;	ES:DI Points to SFT
 25413                                  ; Function:
 25414                                  ;	Issue a CLOSE call to the correct device
 25415                                  ; Outputs:
 25416                                  ;	None
 25417                                  ; ALL preserved
 25418                                  ;----------------------------------------------------------------------------
 25419                                  
 25420                                  DEV_CLOSE_SFT:
 25421 000046C9 06                      	push	es ; * (MSDOS 6.21)
 25422 000046CA E8DEBD                  	call	save_world
 25423                                  	;mov	al,0Eh	
 25424 000046CD B00E                    	MOV	AL,DEVCLS
 25425                                  
 25426                                  	; Main entry for device open and close. AL contains the function 
 25427                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 25428                                  	; open/close to block devices. This allows networks to function but 
 25429                                  	; does NOT hang up with bogus change-line code.
 25430                                  
 25431                                  	;entry	DO_OPCLS
 25432                                  DO_OPCLS:
 25433                                  	; Is the SFT for the net? If so, no action necessary.
 25434                                  
 25435                                  	; MSDOS 6.0
 25436                                  	;test	word [es:di+5],8000h
 25437                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 25438 000046CF 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25439 000046D4 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 25440 000046D6 30E4                    	XOR	AH,AH			; Unit
 25441                                  	;test	byte [es:di+5],80h
 25442 000046D8 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 25443                                  	;les	di,[es:di+7]
 25444 000046DD 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 25445 000046E1 7513                    	JNZ	short GOT_DEV_ADDR
 25446                                  
 25447                                  	; We are about to call device open/close on a block driver. If no 
 25448                                  	; sharing then just short circuit to done.
 25449                                  	
 25450                                  	; MSDOS 6.0
 25451                                  					; SS override
 25452 000046E3 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 25453 000046E9 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 25454                                  
 25455                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25456                                  	;mov	ah,[es:di+1]
 25457 000046EB 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 25458 000046EF 268A0D                  	mov	cl,[es:di]
 25459                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 25460                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 25461                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 25462 000046F2 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 25463                                  GOT_DEV_ADDR:				; ES:DI -> device
 25464                                  	;test	word [es:di+4],800h
 25465                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 25466 000046F6 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 25467 000046FB 7440                    	JZ	short OPCLS_DONE	; Device can't
 25468 000046FD 06                      	PUSH	ES
 25469 000046FE 1F                      	POP	DS
 25470 000046FF 89FE                    	MOV	SI,DI			; DS:SI -> device
 25471                                  
 25472                                  OPCLS_RETRY:
 25473                                  	;Context ES
 25474 00004701 16                      	push	ss
 25475 00004702 07                      	pop	es
 25476                                  					; DEVCALL is in DOSDATA
 25477 00004703 BF[5A03]                	MOV	DI,DEVCALL
 25478                                  
 25479 00004706 89FB                    	MOV	BX,DI
 25480 00004708 50                      	PUSH	AX
 25481                                  	;mov	al,13
 25482 00004709 B00D                    	MOV	AL,DOPCLHL
 25483 0000470B AA                      	STOSB				; Length
 25484 0000470C 58                      	POP	AX
 25485 0000470D 86E0                    	XCHG	AH,AL
 25486 0000470F AA                      	STOSB				; Unit
 25487 00004710 86E0                    	XCHG	AH,AL
 25488 00004712 AA                      	STOSB				; Command
 25489 00004713 26C7050000              	MOV	WORD [ES:DI],0		; Status
 25490 00004718 50                      	PUSH	AX			; Save Unit,Command
 25491                                  	;invoke	DEVIOCALL2
 25492 00004719 E82900                  	call	DEVIOCALL2
 25493                                  
 25494                                  	;mov	di,[es:bx+3]
 25495 0000471C 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 25496                                  	;test	di,8000h
 25497                                  	;jz	short OPCLS_DONEP	
 25498 00004720 21FF                    	and	di,di
 25499 00004722 7918                    	jns	short OPCLS_DONEP	; No error
 25500                                  	; 21/11/2022
 25501                                  	;test	word [si+4],8000h
 25502                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25503                                  	;test	word [si+5],80h
 25504 00004724 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25505 00004728 7404                    	JZ	short BLKDEV
 25506 0000472A B486                    	MOV	AH,86H			; Read error in data, Char dev
 25507 0000472C EB04                    	JMP	SHORT HRDERR
 25508                                  BLKDEV:
 25509 0000472E 88C8                    	MOV	AL,CL			; Drive # in AL
 25510 00004730 B406                    	MOV	AH,6			; Read error in data, Blk dev
 25511                                  HRDERR:
 25512                                  	;invoke	CHARHARD
 25513 00004732 E89D0C                  	call	CHARHARD
 25514 00004735 3C01                    	cmp	al,1
 25515 00004737 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 25516                                  					;  Note that FAIL is essentually IGNORED
 25517 00004739 58                      	POP	AX			; Get back Unit, Command
 25518 0000473A EBC5                    	JMP	short OPCLS_RETRY
 25519                                  OPCLS_DONEP:
 25520 0000473C 58                      	POP	AX			; Clean stack
 25521                                  OPCLS_DONE:
 25522 0000473D E854BD                  	call	restore_world
 25523 00004740 07                      	pop	es ; * (MSDOS 6.21)
 25524 00004741 C3                      	retn
 25525                                  
 25526                                  ; 30/04/2019 - Retro DOS v4.0
 25527                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 25528                                  
 25529                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25530                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 25531                                  
 25532                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 25533                                  ;----------------------------------------------------------------------------
 25534                                  ;**	DevIoCall  - Call Device
 25535                                  ;
 25536                                  ;	ENTRY	DS:SI Points to device SFT
 25537                                  ;		ES:BX Points to request data
 25538                                  ;	EXIT	DS:SI -> Device driver
 25539                                  ;	USES	DS:SI,AX
 25540                                  ;----------------------------------------------------------------------------
 25541                                  ;**	DevIoCall2 - Call Device
 25542                                  ;
 25543                                  ;	ENTRY	DS:SI Points to DPB
 25544                                  ;		ES:BX Points to request data
 25545                                  ;	EXIT	DS:SI -> Device driver
 25546                                  ;	USES	DS:SI,AX
 25547                                  ;----------------------------------------------------------------------------
 25548                                  
 25549                                  DEVIOCALL:
 25550                                  					; SS override for CALLSSEC, 
 25551                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 25552 00004742 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 25553                                  
 25554                                  	;entry	DEVIOCALL2
 25555                                  DEVIOCALL2:
 25556                                  	;EnterCrit critDevice
 25557 00004745 E875CC                  	call	ECritDevice
 25558                                  
 25559                                  	; MSDOS 6.0
 25560                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 25561                                  	;test	byte [si+5],80h
 25562 00004748 F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 25563 0000474C 7548                    	jnz	short chardev2		;AN000; >32mb no
 25564                                  
 25565                                  	; 16/12/2022
 25566                                  	; 22/11/2022
 25567 0000474E 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 25568 00004752 3C04                    	cmp	al,DEVRD	; 4
 25569 00004754 7408                    	je	short chkext	
 25570 00004756 3C08                    	cmp	al,DEVWRT	; 8
 25571 00004758 7404                    	je	short chkext
 25572 0000475A 3C09                    	cmp	al,DEVWRTV	; 9
 25573 0000475C 7538                    	jne	short chardev2
 25574                                  
 25575                                  	; 16/12/2022
 25576                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25577                                  	;;cmp	byte [es:bx+2],4
 25578                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 25579                                  	;JZ	short chkext		;AN000; >32mb   yes
 25580                                  	;;cmp	byte [es:bx+2],8
 25581                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 25582                                  	;JZ	short chkext		;AN000; >32mb   yes
 25583                                  	;;cmp	byte [es:bx+2],9
 25584                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 25585                                  	;				;AN000; >32mb write/verify ?
 25586                                  	;JNZ	short chardev2		;AN000; >32mb no
 25587                                  chkext:
 25588 0000475E E89900                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 25589 00004761 7255                    	JC	short dev_exit		;AN000;LB. done
 25590                                  
 25591                                  	;test	byte [si+4],2
 25592 00004763 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 25593 00004767 741D                    	JZ	short chksector		;AN000;>32mb   no
 25594 00004769 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 25595 0000476D 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 25596 00004771 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 25597 00004778 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 25598 0000477C 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 25599 00004780 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 25600 00004784 EB10                    	JMP	short chardev2		;AN000; >32mb
 25601                                  chksector:				;AN000; >32mb
 25602 00004786 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 25603 0000478C 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 25604                                  	;mov	word [es:bx+3],8107h
 25605 0000478E 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 25606                                  					;AN000; >32mb
 25607 00004794 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 25608                                  
 25609                                  chardev2:				;AN000;
 25610                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 25611                                  	; preserved
 25612                                  
 25613                                  	;mov	ax,[si+6]
 25614 00004796 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 25615 00004799 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25616 0000479D 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 25617 000047A2 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25618                                  
 25619                                  	;mov	ax,[si+8]
 25620 000047A7 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 25621 000047AA 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25622 000047AE 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25623                                  
 25624                                  	; MSDOS 6.0
 25625 000047B3 E84001                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 25626 000047B6 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 25627                                  
 25628                                  dev_exit:
 25629                                  	;LeaveCrit critDevice
 25630                                  	;call	LCritDevice
 25631                                  	;retn
 25632                                  	; 18/12/2022
 25633 000047B8 E91DCC                  	jmp	LCritDevice
 25634                                  
 25635                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 25636                                  ; 22/11/2022
 25637                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 25638                                  
 25639                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 25640                                  ;---------------------------------------------------------------------------
 25641                                  ;
 25642                                  ; Procedure Name : SETREAD, SETWRITE
 25643                                  ;
 25644                                  ; Inputs:
 25645                                  ;	DS:BX = Transfer Address
 25646                                  ;	CX = Record Count
 25647                                  ;	DX = Starting Record
 25648                                  ;	AH = Media Byte
 25649                                  ;	AL = Unit Code
 25650                                  ; Function:
 25651                                  ;	Set up the device call header at DEVCALL
 25652                                  ; Output:
 25653                                  ;	ES:BX Points to DEVCALL
 25654                                  ; No other registers effected
 25655                                  ;
 25656                                  ;---------------------------------------------------------------------------
 25657                                  
 25658                                  SETREAD:
 25659 000047BB 57                      	PUSH	DI
 25660 000047BC 51                      	PUSH	CX
 25661 000047BD 50                      	PUSH	AX
 25662 000047BE B104                    	MOV	CL,DEVRD ; mov cl,4
 25663                                  SETCALLHEAD:
 25664 000047C0 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 25665 000047C2 16                      	PUSH	SS
 25666 000047C3 07                      	POP	ES
 25667                                  					; DEVCALL is in DOSDATA
 25668 000047C4 BF[5A03]                	MOV	DI,DEVCALL
 25669                                  
 25670 000047C7 AA                      	STOSB				; length
 25671 000047C8 58                      	POP	AX			; 
 25672 000047C9 AA                      	STOSB				; Unit
 25673 000047CA 50                      	PUSH	AX
 25674 000047CB 88C8                    	MOV	AL,CL
 25675 000047CD AA                      	STOSB				; Command code
 25676 000047CE 31C0                    	XOR	AX,AX
 25677 000047D0 AB                      	STOSW				; Status
 25678 000047D1 83C708                  	ADD	DI,8			; Skip link fields
 25679 000047D4 58                      	POP	AX
 25680 000047D5 86E0                    	XCHG	AH,AL
 25681 000047D7 AA                      	STOSB				; Media byte
 25682 000047D8 86C4                    	XCHG	AL,AH
 25683 000047DA 50                      	PUSH	AX
 25684 000047DB 89D8                    	MOV	AX,BX
 25685 000047DD AB                      	STOSW
 25686                                  
 25687 000047DE 8CD8                    	MOV	AX,DS
 25688 000047E0 AB                      	STOSW				; Transfer addr
 25689                                  
 25690 000047E1 59                      	POP	CX			; Real AX
 25691 000047E2 58                      	POP	AX			; Real CX
 25692 000047E3 AB                      	STOSW				; Count
 25693                                  
 25694 000047E4 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 25695 000047E5 AB                      	STOSW				; Start
 25696 000047E6 91                      	XCHG	AX,CX
 25697 000047E7 87D1                    	XCHG	DX,CX
 25698 000047E9 5F                      	POP	DI
 25699                                  					; DEVCALL is in DOSDATA
 25700 000047EA BB[5A03]                	MOV	BX,DEVCALL
 25701 000047ED C3                      	retn
 25702                                  
 25703                                  	;entry	SETWRITE
 25704                                  SETWRITE:
 25705                                  
 25706                                  ; Inputs:
 25707                                  ;	DS:BX = Transfer Address
 25708                                  ;	CX = Record Count
 25709                                  ;	DX = Starting Record
 25710                                  ;	AH = Media Byte
 25711                                  ;	AL = Unit Code
 25712                                  ; Function:
 25713                                  ;	Set up the device call header at DEVCALL
 25714                                  ; Output:
 25715                                  ;	ES:BX Points to DEVCALL
 25716                                  ; No other registers effected
 25717                                  
 25718 000047EE 57                      	PUSH	DI
 25719 000047EF 51                      	PUSH	CX
 25720 000047F0 50                      	PUSH	AX
 25721 000047F1 B108                    	MOV	CL,DEVWRT ; mov cl,8
 25722 000047F3 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 25723 000047F8 EBC6                    	JMP	SHORT SETCALLHEAD
 25724                                  
 25725                                  ; 30/04/2019 - Retro DOS v4.0
 25726                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 25727                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25728                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 25729                                  
 25730                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 25731                                  ;---------------------------------------------------------------------------
 25732                                  ;
 25733                                  ; Procedure Name : RW_SC
 25734                                  ;
 25735                                  ; Inputs:
 25736                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 25737                                  ;	 [SC_STATUS]= SC validity status
 25738                                  ;	 [SEQ_SECTOR]= last sector read
 25739                                  ; Function:
 25740                                  ;	Read from or write through secondary cache
 25741                                  ; Output:
 25742                                  ;	ES:BX Points to DEVCALL
 25743                                  ;	carry clear, I/O is not done
 25744                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 25745                                  ;	carry set, I/O is done
 25746                                  ;
 25747                                  ;----------------------------------------------------------------------------
 25748                                  
 25749                                  RW_SC:
 25750                                  	; SS override for all variables used.
 25751                                  	
 25752 000047FA 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 25753 00004800 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 25754 00004802 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 25755 00004808 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 25756 0000480A 51                      	PUSH	CX			    ;AN000;LB.
 25757 0000480B 52                      	PUSH	DX			    ;AN000;LB. yes
 25758 0000480C 1E                      	PUSH	DS			    ;AN000;LB. save registers
 25759 0000480D 56                      	PUSH	SI			    ;AN000;LB.
 25760 0000480E 06                      	PUSH	ES			    ;AN000;LB.
 25761 0000480F 57                      	PUSH	DI			    ;AN000;LB.
 25762                                  
 25763 00004810 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 25764 00004815 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 25765 0000481B 7408                    	JZ	short doread		    ;AN000;LB. yes
 25766 0000481D E8C400                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 25767 00004820 E98E00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 25768                                  scexit4:				    ;AN000;
 25769 00004823 F8                      	CLC				    ;AN000;LB. I/O not done yet
 25770 00004824 C3                      	retn				    ;AN000;LB.
 25771                                  doread: 				    ;AN000;
 25772 00004825 E82601                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 25773 00004828 720A                    	JC	short readSC		    ;AN000;LB.
 25774 0000482A 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 25775 00004831 F9                      	STC				    ;AN000;LB. set carry
 25776 00004832 EB6B                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 25777                                  readSC: 				    ;AN000;
 25778 00004834 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 25779 00004838 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 25780 0000483D 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 25781 00004842 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 25782 00004847 83F800                  	CMP	AX,0			    ;AN000;LB. greater than 64K
 25783 0000484A 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 25784                                  chklow: 						
 25785 0000484C 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 25786 0000484F 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 25787 00004851 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 25788 00004858 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 25789 0000485C 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 25790                                  readsr:
 25791 00004860 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 25792 00004864 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 25793 00004868 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 25794 0000486C 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 25795                                  
 25796 00004870 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 25797 00004874 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 25798 00004878 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25799 0000487C 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 25800 00004880 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 25801 00004886 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 25802 0000488A 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 25803 0000488E 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 25804 00004892 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 25805 00004896 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 25806 0000489A 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 25807                                  saveseq2:				    ;AN000;
 25808 0000489E F8                      	CLC				    ;AN000;LB. clear carry
 25809                                  saveseq:				    ;AN000;	
 25810 0000489F 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 25811 000048A3 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 25812 000048A7 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 25813 000048AB 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 25814 000048AF EB01                    	JMP	short scexit 		    ;AN000;LB.	
 25815                                  scexit2:				    ;AN000;LB.
 25816 000048B1 F8                      	CLC				    ;AN000;LB.	clear carry
 25817                                  scexit: 				    ;AN000;		
 25818 000048B2 5F                      	POP	DI			    ;AN000;LB.
 25819 000048B3 07                      	POP	ES			    ;AN000;LB. restore registers
 25820 000048B4 5E                      	POP	SI			    ;AN000;LB.
 25821 000048B5 1F                      	POP	DS			    ;AN000;LB.
 25822 000048B6 5A                      	POP	DX			    ;AN000;LB.
 25823 000048B7 59                      	POP	CX			    ;AN000;LB.
 25824 000048B8 C3                      	retn				    ;AN000;LB.
 25825                                  
 25826                                  ;Break	<IN_SC -- check if in secondary cache>
 25827                                  ;--------------------------------------------------------------------------
 25828                                  ;
 25829                                  ; Procedure Name : IN_SC
 25830                                  ;
 25831                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25832                                  ;	   [CURSC_DRIVE]= current SC drive
 25833                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25834                                  ;	   [SC_CACHE_COUNT]= SC count
 25835                                  ;	   [HIGH_SECTOR]:DX= sector number
 25836                                  ; Function:
 25837                                  ;	Check if the sector is in secondary cache
 25838                                  ; Output:
 25839                                  ;	carry clear, in SC
 25840                                  ;	   CX= the index in the secondary cache
 25841                                  ;	carry set, not in SC
 25842                                  ;
 25843                                  ;---------------------------------------------------------------------------
 25844                                  
 25845                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25846                                  IN_SC:
 25847                                  	; SS override for all variables used
 25848 000048B9 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 25849 000048BD 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 25850 000048C2 751E                    	JNZ	short outrange2		    ;AN000;;LB. no
 25851 000048C4 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 25852 000048C8 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 25853 000048CA 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 25854 000048CF 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 25855 000048D4 83F800                  	CMP	AX,0			    ;AN000;;LB. greater than 64K
 25856 000048D7 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 25857 000048D9 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 25858 000048DE 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 25859 000048E0 F8                      	CLC				    ;AN000;;LB. clear carry
 25860                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 25861                                  	; 16/12/2022
 25862 000048E1 C3                      	retn	; 30/04/2019
 25863                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25864                                  	;jmp	short inexit
 25865                                  
 25866                                  outrange2:				    ;AN000;;LB. set carry
 25867 000048E2 F9                      	STC				    ;AN000;;LB.
 25868                                  inexit: 				    ;AN000;;LB.
 25869 000048E3 C3                      	retn				    ;AN000;;LB.
 25870                                  
 25871                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 25872                                  ;---------------------------------------------------------------------------
 25873                                  ;
 25874                                  ; Procedure Name : Invalidate_Sc
 25875                                  ;
 25876                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25877                                  ;	   [CURSC_DRIVE]= current SC drive
 25878                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25879                                  ;	   [SC_CACHE_COUNT]= SC count
 25880                                  ;	   [SC_STATUS]= SC status word
 25881                                  ;	   [HIGH_SECTOR]:DX= sector number
 25882                                  ;
 25883                                  ; Function:
 25884                                  ;	invalidate secondary cache if in there
 25885                                  ; Output:
 25886                                  ;	[SC_STATUS] is updated
 25887                                  ;---------------------------------------------------------------------------
 25888                                  
 25889                                  INVALIDATE_SC:
 25890                                  	; SS override for all variables used
 25891                                  
 25892 000048E4 E8D2FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 25893 000048E7 720C                    	JC	short outrange		    ;AN000;;LB. no
 25894 000048E9 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 25895 000048EC D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 25896 000048EE F7D0                    	NOT	AX			    ;AN000;;LB.
 25897 000048F0 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 25898                                  outrange:				    ;AN000;;LB.
 25899 000048F5 C3                      	retn				    ;AN000;;LB.
 25900                                  
 25901                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 25902                                  ; 22/11/2022
 25903                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 25904                                  
 25905                                  ;Break	<VIRREAD- virtually read data into buffer>
 25906                                  ;--------------------------------------------------------------------------
 25907                                  ;
 25908                                  ; Procedure Name : SC_FLAG
 25909                                  ;
 25910                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 25911                                  ;		     1, continuous sectors were read into SC
 25912                                  ; Function:
 25913                                  ;	   Move data from SC to buffer
 25914                                  ; Output:
 25915                                  ;	 carry clear, data is moved to buffer
 25916                                  ;	 carry set, bad sector or exceeds maximum sector
 25917                                  ;	   SC_FLAG =0
 25918                                  ;	   CALLSCNT=1
 25919                                  ;	   SC_STATUS= -1 if succeeded
 25920                                  ;     
 25921                                  ;		       0 if failed
 25922                                  ;--------------------------------------------------------------------------
 25923                                  
 25924                                  VIRREAD:
 25925                                  	; SS override for all variables used
 25926                                  
 25927 000048F6 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 25928 000048FC 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 25929 000048FE 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 25930 00004902 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 25931 00004906 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 25932 0000490A 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 25933 0000490E 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 25934 00004914 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 25935                                  
 25936                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 25937 0000491B 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 25938 00004921 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 25939 00004923 1E                      	PUSH	DS			    ;AN000;;LB.
 25940 00004924 56                      	PUSH	SI			    ;AN000;;LB.
 25941 00004925 06                      	PUSH	ES			    ;AN000;;LB.
 25942 00004926 57                      	PUSH	DI			    ;AN000;;LB.
 25943 00004927 52                      	PUSH	DX			    ;AN000;;LB.
 25944 00004928 51                      	PUSH	CX			    ;AN000;;LB.
 25945 00004929 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 25946 0000492B E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC t
 25947 0000492E 59                      	POP	CX
 25948 0000492F 5A                      	POP	DX			    ;AN000;;LB.
 25949 00004930 5F                      	POP	DI			    ;AN000;;LB.
 25950 00004931 07                      	POP	ES			    ;AN000;;LB.
 25951 00004932 5E                      	POP	SI			    ;AN000;;LB.
 25952 00004933 1F                      	POP	DS			    ;AN000;;LB.
 25953 00004934 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 25954                                  scerror:				    ;AN000;
 25955 00004936 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 25956 0000493D 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 25957 00004944 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 25958 0000494A F9                      	STC				    ;AN000;;LB. carry set
 25959 0000494B C3                      	retn				    ;AN000;;LB.
 25960                                  sc2end: 				    ;AN000;
 25961 0000494C F8                      	CLC				    ;AN000;;LB. carry clear
 25962 0000494D C3                      	retn				    ;AN000;;LB.
 25963                                  
 25964                                  ; 30/04/2019 - Retro  DOS v4.0
 25965                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 25966                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25967                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 25968                                  
 25969                                  ;Break	<SC2BUF- move data from SC to buffer>
 25970                                  ;----------------------------------------------------------------------------
 25971                                  ;
 25972                                  ; Procedure Name : SC2BUF
 25973                                  ;
 25974                                  ; Inputs:  [SC_STATUS] = SC validity status
 25975                                  ;	   [SC_SECTOR_SIZE] = request sector size
 25976                                  ;	   [SC_CACHE_PTR] = pointer to SC
 25977                                  ; Function:
 25978                                  ;	   Move data from SC to buffer
 25979                                  ; Output:
 25980                                  ;	   carry clear, in SC  and data is moved
 25981                                  ;	   carry set, not in SC and data is not moved
 25982                                  ;---------------------------------------------------------------------------
 25983                                  
 25984                                  SC2BUF:
 25985                                  	; SS override for all variables used
 25986 0000494E E868FF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 25987 00004951 7241                    	JC	short noSC		    ;AN000;LB. no
 25988 00004953 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 25989 00004956 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 25990 00004958 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 25991 0000495D 7435                    	JZ	short noSC		    ;AN000;LB. invalid
 25992                                  ;entry SC2BUF2
 25993                                  SC2BUF2:				    ;AN000;
 25994 0000495F 89C8                    	MOV	AX,CX			    ;AN000;LB. times index with
 25995 00004961 36F726[AD0D]            	MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 25996 00004966 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 25997 0000496B 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25998 00004970 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 25999 00004972 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26000 00004974 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26001 00004979 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26002 0000497E 368B0E[AD0D]            	MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26003 00004983 D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26004                                  ;entry MOVWORDS
 26005                                  MOVWORDS:				    ;AN000;
 26006 00004985 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26007 0000498B 7403                    	JZ	short nodd		    ;AN000;LB. no
 26008 0000498D D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26009 0000498F 66                      	DB	66H			    ;AN000;LB. use double word move
 26010                                  nodd:
 26011 00004990 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 26012 00004992 F8                      	CLC				    ;AN000;LB. clear carry
 26013 00004993 C3                      	retn				    ;AN000;LB. exit
 26014                                  noSC:					    ;AN000;
 26015 00004994 F9                      	STC				    ;AN000;LB. set carry
 26016                                  sexit:					    ;AN000;
 26017 00004995 C3                      	retn				    ;AN000;LB.
 26018                                  
 26019                                  ;============================================================================
 26020                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 26021                                  ;============================================================================
 26022                                  ; 29/07/2018 - Retro DOS v3.0
 26023                                  ; 19/05/2019 - Retro DOS v4.0
 26024                                  
 26025                                  ;	TITLE	MKNODE - Node maker
 26026                                  ;	NAME	MKNODE
 26027                                  
 26028                                  ;**	MKNODE.ASM
 26029                                  ;----------------------------------------------------------------------------
 26030                                  ;	Low level routines for making a new local file system node
 26031                                  ;	and filling in an SFT from a directory entry
 26032                                  ;
 26033                                  ;	BUILDDIR
 26034                                  ;	SETDOTENT
 26035                                  ;	MakeNode
 26036                                  ;	NEWENTRY
 26037                                  ;	FREEENT
 26038                                  ;	NEWDIR
 26039                                  ;	DOOPEN
 26040                                  ;	RENAME_MAKE
 26041                                  ;	CHECK_VIRT_OPEN
 26042                                  ;
 26043                                  ;	Revision history:
 26044                                  ;
 26045                                  ;	 AN000	version 4.0  Jan. 1988
 26046                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26047                                  
 26048                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26049                                  ;----------------------------------------------------------------------------
 26050                                  ;
 26051                                  ; Procedure Name : BUILDDIR,NEWDIR
 26052                                  ;
 26053                                  ; Inputs:
 26054                                  ;       ES:BP Points to DPB
 26055                                  ;       [THISSFT] Set if using NEWDIR entry point
 26056                                  ;               (used by ALLOCATE)
 26057                                  ;       [LASTENT] current last valid entry number in directory if no free
 26058                                  ;               entries
 26059                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26060                                  ; Function:
 26061                                  ;       Grow directory if no free entries and not root
 26062                                  ; Outputs:
 26063                                  ;       CARRY SET IF FAILURE
 26064                                  ;       ELSE
 26065                                  ;          AX entry number of new entry
 26066                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26067                                  ;               AX = first entry of new dir
 26068                                  ;       GETENT should be called to set [LASTENT]
 26069                                  ;
 26070                                  ;----------------------------------------------------------------------------
 26071                                  
 26072                                  ; 19/05/2019 - Retro DOS v4.0
 26073                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26074                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26075                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26076                                  
 26077                                  BUILDDIR:
 26078                                  	; 29/07/2018 - Retro DOS v3.0
 26079                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26080                                  
 26081 00004996 A1[D805]                        MOV     AX,[ENTFREE]
 26082 00004999 83F8FF                          CMP     AX,-1
 26083 0000499C 7402                            JZ	short CHECK_IF_ROOT
 26084 0000499E F8                              CLC
 26085 0000499F C3                              retn
 26086                                  
 26087                                  CHECK_IF_ROOT:
 26088 000049A0 833E[C205]00                    CMP     word [DIRSTART],0
 26089 000049A5 7502                            JNZ	short NEWDIR
 26090 000049A7 F9                              STC
 26091                                  builddir_retn:
 26092 000049A8 C3                              retn				; Can't grow root
 26093                                  
 26094                                  	;entry   NEWDIR
 26095                                  NEWDIR:        
 26096 000049A9 8B1E[C205]              	MOV     BX,[DIRSTART]
 26097 000049AD 09DB                            OR      BX,BX
 26098 000049AF 7405                            JZ	short NULLDIR
 26099 000049B1 E84006                  	call	GETEOF
 26100 000049B4 72F2                            jc	short builddir_retn	; Screw up
 26101                                  NULLDIR:
 26102 000049B6 B90100                          MOV     CX,1
 26103 000049B9 E85105                  	call	ALLOCATE
 26104 000049BC 72EA                            jc	short  builddir_retn
 26105 000049BE 8B16[C205]                      MOV     DX,[DIRSTART]
 26106 000049C2 09D2                            OR      DX,DX
 26107 000049C4 750D                            JNZ	short ADDINGDIR
 26108 000049C6 E8BAF5                  	call	SETDIRSRCH
 26109 000049C9 72DD                            jc	short  builddir_retn
 26110 000049CB C706[4803]FFFF                  MOV     word [LASTENT],-1
 26111 000049D1 EB2B                            JMP     SHORT GOTDIRREC
 26112                                  ADDINGDIR:
 26113 000049D3 53                              PUSH    BX
 26114 000049D4 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26115 000049D8 E84B0C                          call	IsEOF
 26116 000049DB 5B                              POP     BX
 26117 000049DC 7219                            JB	short NOTFIRSTGROW
 26118                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26119 000049DE 891E[BC05]                      MOV     [CLUSNUM],BX
 26120 000049E2 51                              PUSH    CX
 26121 000049E3 50                              PUSH    AX
 26122 000049E4 55                              PUSH    BP
 26123 000049E5 B401                            MOV     AH,1			; CLUSNUM update
 26124                                  	; 15/12/2022
 26125 000049E7 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26126                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26127                                  	;;mov	dl,[es:bp+0]
 26128                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26129 000049EB 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26130 000049EF 89DD                            MOV     BP,BX 			; CLUSNUM
 26131 000049F1 E887DD                  	call	FastOpen_Update
 26132 000049F4 5D                              POP     BP
 26133 000049F5 58                              POP     AX
 26134 000049F6 59                              POP     CX
 26135                                  
 26136                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26137                                  NOTFIRSTGROW:
 26138 000049F7 89DA                            MOV     DX,BX
 26139 000049F9 30DB                            XOR     BL,BL
 26140 000049FB E8E304                  	call	FIGREC
 26141                                  GOTDIRREC:
 26142                                  	;mov	cl,[es:bp+4]
 26143 000049FE 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26144 00004A02 FEC1                            INC     CL
 26145 00004A04 30ED                            XOR     CH,CH
 26146                                  ZERODIR:
 26147 00004A06 51                              PUSH    CX
 26148                                  	;mov	byte [ALLOWED],18h
 26149 00004A07 C606[4B03]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 26150 00004A0C B0FF                            MOV     AL,0FFH
 26151 00004A0E E84E10                          call	GETBUFFR
 26152 00004A11 7302                            JNC	short GET_SSIZE
 26153 00004A13 59                              POP     CX
 26154 00004A14 C3                              retn
 26155                                  
 26156                                  GET_SSIZE:
 26157                                  	;mov	cx,[es:bp+2]
 26158 00004A15 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26159 00004A19 06                              PUSH    ES
 26160 00004A1A C43E[E205]                      LES     DI,[CURBUF]
 26161                                  	;or	byte [es:di+5],4
 26162 00004A1E 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26163 00004A23 57                              PUSH    DI
 26164                                  	;;add	di,16	; MSDOS 3.3
 26165                                  	;add	di,20	; MSDOS 6.0	
 26166 00004A24 83C714                          ADD     DI,BUFINSIZ
 26167 00004A27 31C0                            XOR     AX,AX
 26168 00004A29 D1E9                            SHR     CX,1
 26169 00004A2B F3AB                            REP     STOSW
 26170 00004A2D 7301                            JNC	short EVENZ
 26171 00004A2F AA                              STOSB
 26172                                  EVENZ:
 26173 00004A30 5F                              POP     DI
 26174                                  
 26175                                  	; MSDOS 6.0
 26176 00004A31 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26177                                  					;LB. if already dirty		  ;AN000;
 26178 00004A36 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26179 00004A38 E82A12                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26180                                          
 26181                                  	;or	byte [es:di+5],40h
 26182 00004A3B 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26183                                  yesdirty7:
 26184 00004A40 07                              POP	ES
 26185 00004A41 59                              POP	CX
 26186                                  
 26187                                  	; 19/05/2019 - Retro DOS v4.0
 26188                                  
 26189                                  	; MSDOS 3.3
 26190                                  	;INC	DX
 26191                                  
 26192                                  	; MSDOS 6.0
 26193 00004A42 83C201                  	add	dx,1
 26194 00004A45 8316[0706]00            	adc	word [HIGH_SECTOR],0
 26195                                  
 26196 00004A4A E2BA                            LOOP    ZERODIR
 26197                                  
 26198 00004A4C A1[4803]                        MOV     AX,[LASTENT]
 26199 00004A4F 40                              INC     AX
 26200 00004A50 F8                              CLC
 26201 00004A51 C3                              retn
 26202                                  
 26203                                  ;--------------------------------------------------------------------------
 26204                                  ;
 26205                                  ; Procedure Name : SETDOTENT
 26206                                  ;
 26207                                  ; set up a . or .. directory entry for a directory.
 26208                                  ;
 26209                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 26210                                  ;               AX contains ". " or ".."
 26211                                  ;               DX contains first cluster of entry
 26212                                  ;
 26213                                  ;----------------------------------------------------------------------------
 26214                                  
 26215                                  SETDOTENT:
 26216                                  ;	Fill in name field
 26217 00004A52 AB                              STOSW
 26218 00004A53 B90400                          MOV     CX,4
 26219 00004A56 B82020                          MOV     AX,"  " ; 2020h
 26220 00004A59 F3AB                            REP     STOSW
 26221 00004A5B AA                              STOSB
 26222                                  
 26223                                  ;	Set up attribute
 26224                                  	;mov	al, 10h
 26225 00004A5C B010                            MOV     AL,attr_directory
 26226 00004A5E AA                              STOSB
 26227                                  
 26228                                  ;	Initialize time and date of creation
 26229 00004A5F 83C70A                          ADD     DI,10
 26230 00004A62 8B36[9E05]                      MOV     SI,[THISSFT]
 26231                                  	;mov	ax,[si+0Dh]
 26232 00004A66 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 26233 00004A69 AB                              STOSW
 26234                                  	;mov	ax,[si+0Fh]
 26235 00004A6A 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 26236 00004A6D AB                      	STOSW
 26237                                  
 26238                                  ;	Set up first cluster field
 26239 00004A6E 89D0                            MOV     AX,DX
 26240 00004A70 AB                              STOSW
 26241                                  
 26242                                  ;	0 file size
 26243 00004A71 31C0                            XOR     AX,AX
 26244 00004A73 AB                              STOSW
 26245 00004A74 AB                              STOSW
 26246 00004A75 C3                              retn
 26247                                  
 26248                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 26249                                  ;---------------------------------------------------------------------------
 26250                                  ;
 26251                                  ; Procedure Name : MakeNode
 26252                                  ;
 26253                                  ; Inputs:
 26254                                  ;       AL - attribute to create
 26255                                  ;       AH = 0 if it is ok to truncate a file already by this name
 26256                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 26257                                  ;               (AH ignored on dirs and devices)
 26258                                  ;
 26259                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 26260                                  ;               a name already existant is ALWAYS an error in these cases.
 26261                                  ;
 26262                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 26263                                  ;               terminated)
 26264                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 26265                                  ;               ( = -1 if current dir not involved, else
 26266                                  ;                Points to first char after last "/" of current dir part)
 26267                                  ;       [THISCDS] Points to CDS being used
 26268                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 26269                                  ; Function:
 26270                                  ;       Make a new node
 26271                                  ; Outputs:
 26272                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 26273                                  ;       CARRY SET IF ERROR
 26274                                  ;          AX = 1 A node by this name exists and is a directory
 26275                                  ;          AX = 2 A new node could not be created
 26276                                  ;          AX = 3 A node by this name exists and is a disk file
 26277                                  ;               (AH was NZ on input)
 26278                                  ;          AX = 4 Bad Path
 26279                                  ;               SI return from GetPath maintained
 26280                                  ;          AX = 5 Attribute mismatch
 26281                                  ;          AX = 6 Sharing Violation
 26282                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 26283                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 26284                                  ;       ELSE
 26285                                  ;          AX = 0 Disk Node
 26286                                  ;          AX = 3 Device Node (error in some cases)
 26287                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 26288                                  ;               containing new node.
 26289                                  ;          [CURBUF+2]:BX Points to entry
 26290                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 26291                                  ;          [THISSFT] is filled in
 26292                                  ;               sf_mode = unchanged.
 26293                                  ;          Attribute byte in entry is input AL
 26294                                  ; DS preserved, others destroyed
 26295                                  ;
 26296                                  ;-------------------------------------------------------------------------
 26297                                  
 26298                                  ; 19/05/2019 - Retro DOS v4.0
 26299                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 26300                                  
 26301                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26302                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 26303                                  
 26304                                  MakeNode:
 26305                                  	;mov	word [CREATING],0E5FFh
 26306 00004A76 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 26307 00004A7C 50                              PUSH    AX              ; Save AH value
 26308 00004A7D C606[4C03]00            	MOV	byte [NoSetDir],0
 26309 00004A82 A2[6D05]                	MOV	[SATTRIB],AL
 26310 00004A85 E861F5                  	call	GetPathNoSet
 26311 00004A88 88CA                            MOV     DL,CL           ; Save CL info
 26312 00004A8A 89C1                            MOV     CX,AX           ; Device ID to CH
 26313 00004A8C 58                              POP     AX              ; Get back AH
 26314 00004A8D 732E                            JNC	short make_exists ; File existed
 26315 00004A8F 7505                            JNZ	short make_err_4 ; Path bad
 26316 00004A91 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 26317 00004A94 7406                            JZ	short make_type	; Name simply not found, and no metas
 26318                                  make_err_4:
 26319 00004A96 B004                            MOV     AL,4            ; case 1 bad path
 26320                                  make_err_ret:
 26321 00004A98 30E4                            XOR     AH,AH
 26322 00004A9A F9                              STC
 26323                                  ;make_retn:	; 22/11/2022
 26324 00004A9B C3                              retn
 26325                                  
 26326                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 26327                                  RENAME_MAKE:
 26328                                  make_type:
 26329                                  ;Extended Open hooks
 26330                                  	; MSDOS 6.0
 26331                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 26332 00004A9C F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 26333 00004AA1 7411                    	JZ	short make_type2	;FT. no				;AN000;
 26334 00004AA3 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 26335                                  					;FT. set for extended open ;AN000;
 26336                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 26337 00004AA8 F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 26338 00004AAD 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 26339 00004AAF F9                      	STC				;FT. set carry			;AN000;
 26340 00004AB0 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 26341                                  	; 22/11/2022
 26342                                  make_retn:
 26343                                  	;return
 26344 00004AB3 C3                      	retn				;FT.				;AN000;
 26345                                  
 26346                                  ;	Extended Open hooks
 26347                                  
 26348                                  make_type2:
 26349 00004AB4 C43E[9E05]                      LES     DI,[THISSFT]
 26350 00004AB8 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 26351 00004ABA F9                              STC                     ; Not found
 26352 00004ABB EB5A                            JMP     short make_new
 26353                                  
 26354                                  ; The node exists. It may be either a device, directory or file:
 26355                                  ;   Zero set => directory
 26356                                  ;   High bit of CH on => device
 26357                                  ;   else => file
 26358                                  
 26359                                  make_exists:
 26360 00004ABD 7448                            JZ	short make_exists_dir
 26361 00004ABF B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 26362                                  	;test	byte [ATTRIB],18h
 26363 00004AC1 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 26364 00004AC6 753B                            JNZ	short make_err_ret_5
 26365                                  				; Cannot already exist as Disk or Device Node
 26366                                                                  ;       if making DIR or Volume ID
 26367 00004AC8 08ED                            OR      CH,CH
 26368 00004ACA 781A                            JS	short make_share ; No further checks on attributes if device
 26369 00004ACC 08E4                            OR      AH,AH
 26370 00004ACE 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 26371 00004AD0 51                              PUSH    CX              ; Save device ID
 26372 00004AD1 8E06[E405]                      MOV     ES,[CURBUF+2]
 26373                                  	;mov	ch,[es:bx+0Bh]
 26374 00004AD5 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 26375                                  	;test	ch,1
 26376 00004AD9 F6C501                  	test	CH,attr_read_only
 26377 00004ADC 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 26378 00004ADE E8B8F7                  	call	MatchAttributes
 26379 00004AE1 59                              POP     CX              ; Devid back in CH
 26380 00004AE2 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 26381 00004AE4 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 26382                                  make_share:
 26383 00004AE6 30E4                            XOR     AH,AH
 26384 00004AE8 50                              PUSH    AX              ; Save Disk or Device node
 26385 00004AE9 51                              PUSH    CX              ; Save Device ID
 26386 00004AEA 88EC                            MOV     AH,CH           ; Device ID to AH
 26387 00004AEC E84601                          CALL    DOOPEN          ; Fill in SFT for share check
 26388 00004AEF C43E[9E05]                      LES     DI,[THISSFT]
 26389 00004AF3 56                      	push	si
 26390 00004AF4 53                      	push	bx		; Save CURBUF pointers
 26391 00004AF5 E89629                  	call	ShareEnter
 26392 00004AF8 735A                            jnc	short MakeEndShare
 26393                                  
 26394                                  ; User failed request.
 26395 00004AFA 5B                      	pop	bx
 26396 00004AFB 5E                      	pop	si
 26397 00004AFC 59                      	pop	cx
 26398 00004AFD 58                      	pop	ax
 26399                                  
 26400                                  Make_Share_ret:
 26401 00004AFE B006                            MOV     AL,6
 26402 00004B00 EB96                            JMP	short make_err_ret
 26403                                  
 26404                                  make_err_ret_5P:
 26405 00004B02 59                              POP     CX              ; Get back device ID
 26406                                  make_err_ret_5:
 26407 00004B03 B005                            MOV     AL,5            ; Attribute mismatch
 26408                                          ; 22/11/2022
 26409 00004B05 EB91                    	JMP     short make_err_ret
 26410                                  
 26411                                  make_exists_dir:
 26412 00004B07 B001                            MOV     AL,1            ; exists as directory, always an error
 26413                                  	; 22/11/2022
 26414 00004B09 EB8D                    	JMP     short make_err_ret
 26415                                  
 26416                                  make_save:
 26417 00004B0B 50                              PUSH    AX              ; Save whether Disk or File
 26418 00004B0C 89C8                            MOV     AX,CX           ; Device ID to AH
 26419 00004B0E E87400                          CALL    NEWENTRY
 26420 00004B11 58                              POP     AX              ; 0 if Disk, 3 if File
 26421 00004B12 739F                            jnc	short make_retn
 26422 00004B14 B002                            MOV     AL,2            ; create failed case 2
 26423                                  make_save_retn:
 26424 00004B16 C3                              retn
 26425                                  
 26426                                  make_new:
 26427 00004B17 E8F1FF                          call    make_save
 26428 00004B1A 72FA                            jc	short make_save_retn	; case 2 fail
 26429                                  	;test	byte [ATTRIB],10h
 26430 00004B1C F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 26431 00004B21 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 26432                                  					; so don't tell the sharer about them
 26433 00004B23 50                      	push	ax
 26434 00004B24 53                      	push	bx
 26435 00004B25 56                      	push	si		
 26436 00004B26 E86529                          call	ShareEnter
 26437 00004B29 5E                      	pop	si
 26438 00004B2A 5B                      	pop	bx
 26439 00004B2B 58                      	pop	ax
 26440 00004B2C 73E8                    	jnc	short make_save_retn
 26441                                  
 26442                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 26443                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 26444                                  ; possible: delete the newly created directory entry and return share_error.
 26445                                  
 26446 00004B2E 50                              PUSH    AX
 26447 00004B2F C43E[E205]                      LES     DI,[CURBUF]
 26448                                  	;mov	byte [es:bx],0E5h
 26449 00004B33 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 26450                                  	
 26451                                  	; MSDOS 6.0
 26452                                  	;test	byte [es:di+5],40h
 26453 00004B37 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 26454                                  					;LB. if already dirty		  ;AN000;
 26455 00004B3C 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 26456                                  	; 22/11/2022
 26457 00004B3E E82411                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 26458                                  	;or	byte [es:di+5],40h
 26459 00004B41 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 26460                                  yesdirty8:
 26461 00004B46 C42E[8A05]                      LES     BP,[THISDPB]
 26462                                  	; 15/12/2022
 26463 00004B4A 268A4600                        mov	al,[ES:BP]
 26464                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26465                                  	;;mov	al,[es:bp+0]
 26466                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 26467 00004B4E E80C10                          call	FLUSHBUF		; write out buffer.
 26468 00004B51 58                              POP     AX
 26469 00004B52 EBAA                            jmp	short Make_Share_ret
 26470                                  
 26471                                  ; We have found an existing file. We have also entered it into the share set.
 26472                                  ; At this point we need to call newentry to correctly address the problem of
 26473                                  ; getting rid of old data (create an existing file) or creating a new
 26474                                  ; directory entry (create a new file). Unfortunately, this operation may
 26475                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 26476                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 26477                                  ; the share set now, do the operation and then reassert the share access.
 26478                                  ;
 26479                                  ; We are allowed to do this! There is no window! After all, we are in
 26480                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 26481                                  
 26482                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26483                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 26484                                  
 26485                                  MakeEndShare:
 26486 00004B54 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 26487 00004B58 31C0                            XOR     AX,AX
 26488 00004B5A E82BC8                  	call	ECritSFT
 26489 00004B5D 268705                  	xchg	AX,[ES:DI]
 26490                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 26491 00004B60 50                      	push	ax
 26492 00004B61 57                      	push	di
 26493 00004B62 06                      	push	es
 26494 00004B63 9C                              PUSHF
 26495 00004B64 E82229                          call	ShareEnd                ; remove sharing
 26496 00004B67 9D                              POPF
 26497 00004B68 07                      	pop	es
 26498 00004B69 5F                      	pop	di
 26499 00004B6A 268F05                          pop	word [ES:DI]	
 26500                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 26501 00004B6D E833C8                  	call	LCritSFT
 26502                                  	; 22/11/2022
 26503                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 26504 00004B70 5B                      	pop	bx
 26505 00004B71 5E                      	pop	si
 26506 00004B72 59                      	pop	cx
 26507 00004B73 58                      	pop	ax
 26508 00004B74 E894FF                          CALL    make_save
 26509                                  
 26510                                  ; If the user failed, we do not reenter into the sharing set.
 26511                                  
 26512 00004B77 729D                            jc	short make_save_retn	; bye if error
 26513 00004B79 50                      	push	ax
 26514 00004B7A 53                      	push	bx
 26515 00004B7B 56                      	push	si
 26516 00004B7C 9C                              PUSHF
 26517 00004B7D E80E29                          call	ShareEnter
 26518 00004B80 9D                              POPF
 26519 00004B81 5E                      	pop	si
 26520 00004B82 5B                      	pop	bx
 26521 00004B83 58                      	pop	ax
 26522                                  
 26523                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 26524                                  
 26525                                  makeendshare_retn:
 26526 00004B84 C3                              retn
 26527                                  
 26528                                  ;---------------------------------------------------------------------------
 26529                                  ;
 26530                                  ; Procedure Name : NEWENTRY
 26531                                  ;
 26532                                  ; Inputs:
 26533                                  ;       [THISSFT] set
 26534                                  ;       [THISDPB] set
 26535                                  ;       [LASTENT] current last valid entry number in directory if no free
 26536                                  ;               entries
 26537                                  ;       [VOLID] set if a volume ID was found during search
 26538                                  ;	Attrib Contains attributes for new file
 26539                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26540                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 26541                                  ;               NC means file existed (device)
 26542                                  ;               C  means file did not exist
 26543                                  ;       AH = Device ID byte
 26544                                  ;       If FILE
 26545                                  ;           [CURBUF+2]:BX points to start of directory entry
 26546                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26547                                  ;       If device
 26548                                  ;           DS:BX points to start of "fake" directory entry
 26549                                  ;           DS:SI points to dir_first of "fake" directory entry
 26550                                  ;               (has DWORD pointer to device header)
 26551                                  ; Function:
 26552                                  ;       Make a new directory entry
 26553                                  ;       If an old one existed it is truncated first
 26554                                  ; Outputs:
 26555                                  ;       Carry set if error
 26556                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 26557                                  ;               vol ID, user FAILed to I 24
 26558                                  ;       else
 26559                                  ;               outputs of DOOPEN
 26560                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 26561                                  ;
 26562                                  ;----------------------------------------------------------------------------
 26563                                  
 26564                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26565                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 26566                                  
 26567                                  NEWENTRY:
 26568 00004B85 C42E[8A05]                      LES     BP,[THISDPB]
 26569 00004B89 7316                            JNC	short EXISTENT	
 26570 00004B8B 803E[4A03]00                    CMP     byte [FAILERR],0
 26571 00004B90 F9                              STC
 26572 00004B91 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 26573 00004B93 E800FE                          CALL    BUILDDIR        ; Try to build dir
 26574 00004B96 72EC                            jc	short makeendshare_retn	; Failed
 26575 00004B98 E8BAF3                          call	GETENT          ; Point at that free entry
 26576 00004B9B 72E7                            jc	short makeendshare_retn	; Failed
 26577 00004B9D EB0E                            JMP     SHORT FREESPOT
 26578                                  
 26579                                  ERRRET3:
 26580 00004B9F F9                              STC
 26581                                  newentry_retn:
 26582 00004BA0 C3                              retn
 26583                                  
 26584                                  EXISTENT:
 26585 00004BA1 08E4                            OR      AH,AH           ; Check if file is I/O device
 26586 00004BA3 7903                            JNS	short NOT_DEV1
 26587 00004BA5 E98D00                          JMP     DOOPEN          ; If so, proceed with open
 26588                                  
 26589                                  NOT_DEV1:
 26590 00004BA8 E82C01                          call	FREEENT		; Free cluster chain
 26591 00004BAB 72F3                            jc	short newentry_retn ; Failed
 26592                                  FREESPOT:
 26593                                  	;test	byte [ATTRIB],8
 26594 00004BAD F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 26595 00004BB2 7407                            JZ	short NOTVOLID
 26596 00004BB4 803E[7B05]00                    CMP     BYTE [VOLID],0
 26597 00004BB9 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 26598                                  NOTVOLID:
 26599 00004BBB 8E06[E405]                      MOV     ES,[CURBUF+2]
 26600 00004BBF 89DF                            MOV     DI,BX
 26601                                  
 26602 00004BC1 BE[4B05]                        MOV     SI,NAME1
 26603                                  
 26604 00004BC4 B90500                          MOV     CX,5
 26605 00004BC7 F3A5                            REP     MOVSW
 26606 00004BC9 A4                              MOVSB                   ; Move name into dir entry
 26607 00004BCA A0[6B05]                	MOV	AL,[ATTRIB]
 26608 00004BCD AA                      	STOSB                   ; Attributes
 26609                                  
 26610                                  ;; File Tagging for Create DOS 4.00
 26611 00004BCE B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 26612                                  ;; File Tagging for Create DOS 4.00
 26613                                  
 26614 00004BD0 31C0                            XOR     AX,AX
 26615 00004BD2 F3AB                            REP     STOSW           ; Zero pad
 26616 00004BD4 E86FBF                          call	DATE16
 26617 00004BD7 92                              XCHG    AX,DX
 26618 00004BD8 AB                              STOSW                   ; dir_time
 26619 00004BD9 92                              XCHG    AX,DX
 26620 00004BDA AB                              STOSW                   ; dir_date
 26621 00004BDB 31C0                            XOR     AX,AX
 26622 00004BDD 57                              PUSH    DI              ; Correct SI input value
 26623                                  				; 	(recomputed for new buffer)
 26624 00004BDE AB                              STOSW                   ; Zero dir_first and size
 26625 00004BDF AB                              STOSW
 26626 00004BE0 AB                              STOSW
 26627                                  updnxt:
 26628 00004BE1 8B36[E205]              	MOV	SI,[CURBUF]
 26629                                  
 26630                                  	; 19/05/2019 - Retro DOS v4.0
 26631                                  
 26632                                  	; MSDOS 6.0
 26633 00004BE5 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26634                                  				;LB. if already dirty		  ;AN000;
 26635 00004BEA 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 26636 00004BEC E87610                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 26637                                          
 26638                                  	;or	byte [es:si+5],40h
 26639 00004BEF 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26640                                  yesdirty9:
 26641 00004BF4 C42E[8A05]                      LES     BP,[THISDPB]
 26642                                  	; 15/12/2022
 26643 00004BF8 268A4600                	MOV	AL,[ES:BP]
 26644                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26645                                  	;;mov	al,[es:bp+0]
 26646                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 26647 00004BFC 50                              PUSH    AX
 26648 00004BFD 53                              PUSH    BX
 26649                                  
 26650                                  ; If we have a file, we need to increment the open ref. count so that
 26651                                  ; we have some protection against invalid media changes if an Int 24
 26652                                  ; error occurs.
 26653                                  ; Do nothing for a device.
 26654                                  
 26655 00004BFE 06                      	push	es
 26656 00004BFF 57                      	push	di
 26657 00004C00 C43E[9E05]                      LES     DI,[THISSFT]
 26658                                  	;test	word [es:di+5],80h
 26659                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 26660 00004C04 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26661 00004C09 751A                            jnz	short GotADevice
 26662 00004C0B 1E                      	push	ds
 26663 00004C0C 53                      	push	bx
 26664 00004C0D C51E[8A05]                      LDS     BX,[THISDPB]
 26665                                  	;mov	[es:di+7],bx
 26666 00004C11 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 26667 00004C15 8CDB                            MOV     BX,DS
 26668                                  	;mov	[es:di+9],bx
 26669 00004C17 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 26670 00004C1B 5B                      	pop	bx
 26671 00004C1C 1F                      	pop	ds ; need to use DS for segment later on
 26672 00004C1D E8A1FA                  	call	DEV_OPEN_SFT    ; increment ref. count
 26673 00004C20 C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 26674                                  GotADevice:
 26675 00004C25 5F                      	pop	di
 26676 00004C26 07                      	pop	es
 26677                                  
 26678 00004C27 E8330F                          call	FLUSHBUF
 26679 00004C2A E8F900                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 26680 00004C2D 5B                              POP     BX
 26681 00004C2E 58                              POP     AX
 26682 00004C2F 5E                              POP     SI              ; Get SI input back
 26683 00004C30 88C4                            MOV     AH,AL           ; Get I/O driver number back
 26684 00004C32 7301                    	jnc	short DOOPEN    ; Failed
 26685 00004C34 C3                      	retn
 26686                                  	
 26687                                  ;NOTE FALL THROUGH
 26688                                  
 26689                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 26690                                  
 26691                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26692                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 26693                                  
 26694                                  ; DOOPEN
 26695                                  ;----------------------------------------------------------------------------
 26696                                  ;
 26697                                  ; Inputs:
 26698                                  ;       [THISDPB] points to DPB if file
 26699                                  ;       [THISSFT] points to SFT being used
 26700                                  ;       AH = Device ID byte
 26701                                  ;       If FILE
 26702                                  ;           [CURBUF+2]:BX points to start of directory entry
 26703                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26704                                  ;       If device
 26705                                  ;           DS:BX points to start of "fake" directory entry
 26706                                  ;           DS:SI points to dir_first of "fake" directory entry
 26707                                  ;               (has DWORD pointer to device header)
 26708                                  ; Function:
 26709                                  ;       Fill in SFT from dir entry
 26710                                  ; Outputs:
 26711                                  ;       CARRY CLEAR
 26712                                  ;       sf_ref_count and sf_mode fields not altered
 26713                                  ;       sf_flags high byte = 0
 26714                                  ;       sf_flags low byte = AH except
 26715                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 26716                                  ;       sf_attr sf_date sf_time sf_name set from entry
 26717                                  ;       sf_position = 0
 26718                                  ;       If device
 26719                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 26720                                  ;           sf_size = 0
 26721                                  ;       If file
 26722                                  ;           sf_firclus sf_size set from entry
 26723                                  ;           sf_devptr = [THISDPB]
 26724                                  ;           sf_cluspos = 0
 26725                                  ;           sf_lstclus = sf_firclus
 26726                                  ;           sf_dirsec sf_dirpos set
 26727                                  ; DS,SI,BX preserved, others destroyed
 26728                                  ;
 26729                                  ;----------------------------------------------------------------------------
 26730                                  
 26731                                  	;entry	DOOPEN
 26732                                  DOOPEN:
 26733                                  ;	Generate and store attribute
 26734                                  
 26735 00004C35 88E6                            MOV     DH,AH           ; AH to different place
 26736 00004C37 C43E[9E05]                      LES     DI,[THISSFT]
 26737                                  	;add	di,4
 26738 00004C3B 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 26739 00004C3E 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 26740                                                                  ;   attribute of 0 (for R/O testing etc).
 26741 00004C40 08F6                            OR      DH,DH           ; See if our assumption good.
 26742 00004C42 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 26743 00004C44 8E1E[E405]                      MOV     DS,[CURBUF+2]
 26744                                  	;mov	al,[BX+0Bh]
 26745 00004C48 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 26746                                  				; If file, get attrib from dir entry
 26747                                  DEV_SFT1:
 26748 00004C4B AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 26749                                  
 26750                                  ;	Generate and store flags word
 26751                                  
 26752 00004C4C 31C0                            XOR     AX,AX
 26753 00004C4E 88F0                            MOV     AL,DH
 26754                                  	;or	al,40h
 26755 00004C50 0C40                            OR      AL,devid_file_clean
 26756 00004C52 AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 26757                                  
 26758                                  ;	Generate and store device pointer
 26759                                  
 26760 00004C53 1E                              PUSH    DS
 26761                                  	;lds	ax,[bx+1Ah]
 26762 00004C54 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 26763 00004C57 08F6                            OR      DH,DH
 26764 00004C59 7805                            JS	short DEV_SFT2
 26765                                  
 26766                                  ;hkn; SS override
 26767 00004C5B 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 26768                                  DEV_SFT2:
 26769 00004C60 AB                              STOSW 			; store offset
 26770 00004C61 8CD8                            MOV     AX,DS
 26771 00004C63 1F                              POP     DS
 26772 00004C64 AB                      	STOSW			; store segment
 26773                                  				; ES:DI -> sf_firclus
 26774                                  
 26775                                  ;	Generate pointer to, generate and store first cluster 
 26776                                  ;	(irrelevant for devices)
 26777                                  
 26778 00004C65 56                              PUSH    SI              ; Save pointer to dir_first
 26779 00004C66 A5                              MOVSW                   ; dir_first -> sf_firclus
 26780                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 26781                                  
 26782                                  ;	Copy time/date of last modification
 26783                                  
 26784                                  	;sub	si,6
 26785 00004C67 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 26786                                  				; DS:SI->dir_time
 26787 00004C6A A5                              MOVSW                   ; dir_time -> sf_time
 26788                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 26789 00004C6B A5                              MOVSW                   ; dir_date -> sf_date
 26790                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 26791                                  
 26792                                  ;	Generate and store file size (0 for devices)
 26793                                  
 26794 00004C6C AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 26795 00004C6D AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 26796 00004C6E 89C1                            MOV     CX,AX           ; dir_size_l in CX
 26797 00004C70 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 26798 00004C71 08F6                            OR      DH,DH
 26799 00004C73 7904                            JNS	short FILE_SFT1
 26800 00004C75 31C0                            XOR     AX,AX
 26801 00004C77 89C1                            MOV     CX,AX           ; Devices are open ended
 26802                                  FILE_SFT1:
 26803 00004C79 91                              XCHG    AX,CX
 26804 00004C7A AB                              STOSW                   ; Low word of sf_size
 26805 00004C7B 91                              XCHG    AX,CX
 26806 00004C7C AB                              STOSW                   ; High word of sf_size
 26807                                                                  ; ES:DI -> sf_position
 26808                                  ; Initialize position to 0
 26809                                  
 26810 00004C7D 31C0                            XOR     AX,AX
 26811 00004C7F AB                              STOSW
 26812 00004C80 AB                              STOSW                   ; sf_position
 26813                                                                  ; ES:DI -> sf_cluspos
 26814                                  
 26815                                  ; Generate cluster optimizations for files
 26816                                  
 26817 00004C81 08F6                            OR      DH,DH
 26818 00004C83 7843                            JS	short DEV_SFT3
 26819 00004C85 AB                              STOSW                   ; sf_cluspos ; 19h
 26820                                  	;mov	ax,[bx+1Ah]
 26821 00004C86 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 26822                                  	; 19/05/2019
 26823                                  	; MSDOS 3.3
 26824                                  	;STOSW 			; sf_lstclus ; 1Bh
 26825                                  	; MSDOS 6.0
 26826 00004C89 57                              PUSH	DI              ;AN004; save dirsec offset
 26827                                  	;sub	di,1Bh
 26828 00004C8A 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 26829                                  	;mov	[es:di+35h],ax
 26830 00004C8D 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 26831 00004C91 5F                              POP	DI              ;AN004; restore dirsec offset
 26832                                  
 26833                                  ; DOS 3.3  FastOpen  6/13/86
 26834                                  
 26835 00004C92 1E                      	PUSH	DS
 26836                                  
 26837                                  ;hkn; SS is DOSDATA
 26838 00004C93 16                      	push	ss
 26839 00004C94 1F                      	pop	ds
 26840                                  	;test	byte [FastOpenFlg],4
 26841 00004C95 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 26842 00004C9A 7411                    	JZ	short Not_FastOpen
 26843                                  
 26844                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 26845 00004C9C BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 26846                                  
 26847                                  	;mov	ax,[si+1]
 26848 00004C9F 8B4401                          MOV     AX,[SI+FEI.dirsec]
 26849 00004CA2 AB                              STOSW                   ; sf_dirsec
 26850                                  	; MSDOS 6.0
 26851                                  	;mov	ax,[si+3]
 26852 00004CA3 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 26853                                  				;;; changed for >32mb
 26854 00004CA6 AB                              STOSW                   ; sf_dirsec
 26855                                  	; 19/08//2018
 26856 00004CA7 8A04                    	mov	al,[SI]
 26857                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 26858 00004CA9 AA                              STOSB                   ; sf_dirpos
 26859 00004CAA 1F                              POP	DS
 26860 00004CAB EB19                            JMP     short Next_Name
 26861                                  
 26862                                  ; DOS 3.3  FastOpen  6/13/86
 26863                                  
 26864                                  Not_FastOpen:
 26865                                          ;POP     DS		; normal path
 26866                                  
 26867                                  ;hkn; SS override
 26868                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 26869                                  	; 16/12/2022
 26870                                  	; 28/07/2019
 26871 00004CAD 8B36[E205]              	mov	si,[CURBUF]
 26872 00004CB1 1F                      	pop	ds
 26873                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26874                                  	;pop	ds
 26875                                  	;mov	si,[ss:CURBUF]
 26876                                  	
 26877                                  	;mov	ax,[si+6]
 26878 00004CB2 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 26879 00004CB5 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26880                                  	; 19/05/2019        
 26881                                  	; MSDOS 6.0
 26882                                  	;mov	ax,[si+8]
 26883 00004CB6 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 26884 00004CB9 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26885                                          
 26886 00004CBA 89D8                    	MOV     AX,BX
 26887                                  	;;add	si,16	; MSDOS 3.3	
 26888                                  	;add	si,20	; MSDOS 6.0
 26889 00004CBC 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 26890 00004CBF 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 26891                                          ;mov	cl,32
 26892 00004CC1 B120                    	MOV     CL,dir_entry.size
 26893 00004CC3 F6F1                            DIV     CL
 26894 00004CC5 AA                              STOSB                   ; sf_dirpos
 26895                                  Next_Name:
 26896 00004CC6 EB03                            JMP     SHORT FILE_SFT2
 26897                                  
 26898                                  DEV_SFT3:
 26899                                  	;add	di,7
 26900 00004CC8 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 26901                                  FILE_SFT2:
 26902                                  
 26903                                  ; Copy in the object's name
 26904                                  
 26905 00004CCB 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 26906 00004CCD B90B00                          MOV     CX,11
 26907 00004CD0 F3A4                            REP     MOVSB           ; sf_name
 26908 00004CD2 5E                              POP     SI              ; recover DS:SI -> dir_first
 26909                                  
 26910                                  ;hkn; SS is DOSDATA
 26911 00004CD3 16                              push	ss
 26912 00004CD4 1F                      	pop	ds
 26913 00004CD5 F8                              CLC
 26914 00004CD6 C3                              retn
 26915                                  
 26916                                  ;---------------------------------------------------------------------------
 26917                                  ;
 26918                                  ; Procedure Name : FREEENT
 26919                                  ;
 26920                                  ; Inputs:
 26921                                  ;       ES:BP -> DPB
 26922                                  ;       [CURBUF] Set
 26923                                  ;       [CURBUF+2]:BX points to directory entry
 26924                                  ;       [CURBUF+2]:SI points to above dir_first
 26925                                  ; Function:
 26926                                  ;       Free the cluster chain for the entry if present
 26927                                  ; Outputs:
 26928                                  ;       Carry set if error (currently user FAILed to I 24)
 26929                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 26930                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 26931                                  ;---------------------------------------------------------------------------
 26932                                  
 26933                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26934                                  FREEENT:
 26935 00004CD7 1E                              PUSH    DS
 26936 00004CD8 C53E[E205]                      LDS     DI,[CURBUF]
 26937 00004CDC 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 26938                                  	; 19/05/2019 - Retro DOS v4.0
 26939                                  	; MSDOS 6.0
 26940 00004CDE 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 26941                                  ;hkn; SS override
 26942 00004CE1 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 26943 00004CE6 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 26944 00004CE9 1F                              POP     DS
 26945 00004CEA 83F902                  	CMP	CX,2
 26946 00004CED 7235                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 26947                                  	;cmp	cx,[es:bp+0Dh]
 26948 00004CEF 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 26949 00004CF3 772F                            JA	short RET1	; Treat like zero length file (firclus mucked)
 26950 00004CF5 29FB                            SUB     BX,DI
 26951 00004CF7 53                              PUSH    BX              ; Save offset
 26952 00004CF8 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 26953 00004CFC 52                              PUSH    DX              ; Save sector number
 26954 00004CFD 89CB                            MOV     BX,CX
 26955 00004CFF E8B702                          call	RELEASE         ; Free any data allocated
 26956 00004D02 5A                              POP     DX
 26957 00004D03 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 26958 00004D07 7302                            JNC	short GET_BUF_BACK
 26959 00004D09 5B                              POP     BX
 26960                                  freeent_retn:
 26961 00004D0A C3                              retn			; Screw up
 26962                                  
 26963                                  GET_BUF_BACK:
 26964                                  	;mov	byte [ALLOWED],18h
 26965 00004D0B C606[4B03]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 26966 00004D10 30C0                            XOR     AL,AL
 26967 00004D12 E84A0D                  	call	GETBUFFR        ; Get sector back
 26968 00004D15 5B                              POP     BX              ; Get offset back
 26969 00004D16 72F2                            jc	short freeent_retn
 26970 00004D18 E869EA                  	call	SET_BUF_AS_DIR
 26971 00004D1B 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 26972 00004D1F 89DE                            MOV     SI,BX
 26973                                  	;add	si,1Ah
 26974 00004D21 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 26975                                  RET1:
 26976 00004D24 F8                              CLC
 26977 00004D25 C3                              retn
 26978                                  
 26979                                  ;---------------------------------------------------------------------------
 26980                                  ;
 26981                                  ; Procedure Name : CHECK_VIRT_OPEN
 26982                                  ;
 26983                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 26984                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 26985                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 26986                                  ; flag [VIRTUAL_OPEN].
 26987                                  ; No registers affected (including flags).
 26988                                  ; On input, [THISSFT] points to current SFT.
 26989                                  ;
 26990                                  ;---------------------------------------------------------------------------
 26991                                  
 26992                                  CHECK_VIRT_OPEN:
 26993 00004D26 50                      	PUSH    AX
 26994 00004D27 9F                              lahf                    ; preserve flags
 26995 00004D28 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 26996 00004D2D 7410                            JZ	short ALL_CLOSED
 26997 00004D2F C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 26998 00004D34 06                      	push	es
 26999 00004D35 57                      	push	di
 27000 00004D36 C43E[9E05]                      LES     DI,[THISSFT]
 27001 00004D3A E88CF9                          call	DEV_CLOSE_SFT
 27002 00004D3D 5F                      	pop	di
 27003 00004D3E 07                      	pop	es
 27004                                  
 27005                                  ALL_CLOSED:
 27006 00004D3F 9E                              sahf                    ; restore flags
 27007 00004D40 58                              POP     AX
 27008 00004D41 C3                              retn
 27009                                  
 27010                                  ;============================================================================
 27011                                  ; ROM.ASM, MSDOS 6.0, 1991
 27012                                  ;============================================================================
 27013                                  ; 29/07/2018 - Retro DOS v3.0
 27014                                  ; 20/05/2019 - Retro DOS v4.0
 27015                                  
 27016                                  ;	TITLE	ROM - Miscellaneous routines
 27017                                  ;	NAME	ROM
 27018                                  
 27019                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 27020                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 27021                                  ;
 27022                                  ;	SKPCLP
 27023                                  ;	FNDCLUS
 27024                                  ;	BUFSEC
 27025                                  ;	BUFRD
 27026                                  ;	BUFWRT
 27027                                  ;	NEXTSEC
 27028                                  ;	OPTIMIZE
 27029                                  ;	FIGREC
 27030                                  ;	ALLOCATE
 27031                                  ;	RESTFATBYT
 27032                                  ;	RELEASE
 27033                                  ;	RELBLKS
 27034                                  ;	GETEOF
 27035                                  ;
 27036                                  ;	Modification history:
 27037                                  ;
 27038                                  ;		Created: ARR 30 March 1983
 27039                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 27040                                  
 27041                                  ;Break   <FNDCLUS -- Skip over allocation units>
 27042                                  ;--------------------------------------------------------------------------
 27043                                  ;
 27044                                  ; Procedure Name : FNDCLUS
 27045                                  ;
 27046                                  ; Inputs:
 27047                                  ;       CX = No. of clusters to skip
 27048                                  ;       ES:BP = Base of drive parameters
 27049                                  ;       [THISSFT] point to SFT
 27050                                  ; Outputs:
 27051                                  ;       BX = Last cluster skipped to
 27052                                  ;       CX = No. of clusters remaining (0 unless EOF)
 27053                                  ;       DX = Position of last cluster
 27054                                  ;       Carry set if error (currently user FAILed to I 24)
 27055                                  ; DI destroyed. No other registers affected.
 27056                                  ;--------------------------------------------------------------------------
 27057                                  
 27058                                  ; 20/05/2019 - Retro DOS v4.0
 27059                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27060                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27061                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27062                                  
 27063                                  FNDCLUS:
 27064 00004D42 06                      	PUSH	ES
 27065 00004D43 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27066                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27067                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27068 00004D47 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27069                                  	;mov	dx,[es:di+19h]
 27070 00004D4B 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27071 00004D4F 09DB                    	OR	BX,BX
 27072 00004D51 7424                    	JZ	short NOCLUS
 27073                                  
 27074 00004D53 29D1                            SUB     CX,DX
 27075 00004D55 7308                            JNB	short FINDIT
 27076                                  
 27077 00004D57 01D1                            ADD     CX,DX
 27078 00004D59 31D2                            XOR     DX,DX
 27079                                  	;mov	bx,[es:di+0Bh]
 27080 00004D5B 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27081                                  FINDIT:
 27082 00004D5F 07                              POP	ES
 27083 00004D60 E313                    	JCXZ	RET9
 27084                                  
 27085                                  	;entry	SKPCLP
 27086                                  SKPCLP:
 27087 00004D62 E8D808                  	call	UNPACK
 27088 00004D65 7214                            jc	short fndclus_retn	; retc
 27089                                  
 27090                                  	; 09/09/2018
 27091                                  
 27092                                  	; MSDOS 3.3
 27093                                  	;push	bx
 27094                                  	;mov	bx,di
 27095                                  	;call	IsEOF
 27096                                  	;pop	bx	
 27097                                  	;jae	short RET9
 27098                                  
 27099                                  	; 20/05/2019 - Retro DOS v4.0
 27100                                  
 27101                                  	; MSDOS 6.0
 27102 00004D67 87DF                    	xchg	bx,di
 27103 00004D69 E8BA08                  	call	IsEOF
 27104 00004D6C 87DF                    	xchg	bx,di
 27105 00004D6E 7305                    	jae	short RET9
 27106                                  
 27107 00004D70 87DF                            XCHG    BX,DI
 27108 00004D72 42                              INC     DX
 27109                                  
 27110 00004D73 E2ED                    	LOOP	SKPCLP			; RMFS
 27111                                  RET9:	
 27112 00004D75 F8                      	CLC
 27113 00004D76 C3                              retn
 27114                                  NOCLUS:
 27115 00004D77 07                              POP	ES
 27116 00004D78 41                              INC	CX
 27117 00004D79 4A                              DEC	DX
 27118 00004D7A F8                              CLC
 27119                                  
 27120                                  fndclus_retn:
 27121 00004D7B C3                              retn
 27122                                  
 27123                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27124                                  ;--------------------------------------------------------------------------
 27125                                  ;
 27126                                  ; Procedure Name : BUFSEC
 27127                                  ;
 27128                                  ; Inputs:
 27129                                  ;       AH = priority of buffer
 27130                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27131                                  ;       ES:BP = Base of drive parameters
 27132                                  ;       [CLUSNUM] = Physical cluster number
 27133                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27134                                  ;       [BYTCNT1] = Size of transfer
 27135                                  ; Function:
 27136                                  ;       Insure specified sector is in buffer, flushing buffer before
 27137                                  ;       read if necessary.
 27138                                  ; Outputs:
 27139                                  ;       ES:DI = Pointer to buffer
 27140                                  ;       SI = Pointer to transfer address
 27141                                  ;       CX = Number of bytes
 27142                                  ;       [NEXTADD] updated
 27143                                  ;       [TRANS] set to indicate a transfer will occur
 27144                                  ;       Carry set if error (user FAILed to I 24)
 27145                                  ;--------------------------------------------------------------------------
 27146                                  
 27147                                  BUFSEC:
 27148 00004D7C 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27149 00004D80 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27150                                  	;mov	byte [ALLOWED],38h
 27151 00004D84 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27152 00004D89 E85501                          CALL    FIGREC
 27153 00004D8C E8D00C                  	call	GETBUFFR
 27154 00004D8F 72EA                            jc	short fndclus_retn
 27155                                  
 27156 00004D91 C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 27157 00004D96 8B36[B805]                      MOV     SI,[NEXTADD]
 27158 00004D9A 89F7                            MOV     DI,SI
 27159 00004D9C 8B0E[D205]                      MOV     CX,[BYTCNT1]
 27160 00004DA0 01CF                            ADD     DI,CX
 27161 00004DA2 893E[B805]                      MOV     [NEXTADD],DI
 27162 00004DA6 C43E[E205]                      LES     DI,[CURBUF]
 27163                                  	;or	byte [es:di+5],8
 27164 00004DAA 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 27165                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 27166                                  	;lea	di,[di+20] ; MSDOS 6.0
 27167 00004DAF 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 27168 00004DB2 033E[CC05]                      ADD     DI,[BYTSECPOS]
 27169 00004DB6 F8                              CLC
 27170 00004DB7 C3                              retn
 27171                                  
 27172                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 27173                                  
 27174                                  ;---------------------------------------------------------------------------
 27175                                  ;
 27176                                  ; Procedure Name : BUFRD
 27177                                  ;
 27178                                  ; Do a partial sector read via one of the system buffers
 27179                                  ; ES:BP Points to DPB
 27180                                  ; Carry set if error (currently user FAILed to I 24)
 27181                                  ;
 27182                                  ; DS - set to DOSDATA
 27183                                  ;
 27184                                  ;----------------------------------------------------------------------------
 27185                                  
 27186                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27187                                  	; 20/05/2019 - Retro DOS v4.0
 27188                                  BUFRD:
 27189 00004DB8 06                              PUSH	ES
 27190 00004DB9 31C0                            xor	ax, ax			; pre-read sector
 27191 00004DBB E8BEFF                          CALL    BUFSEC
 27192 00004DBE 7303                            JNC	short BUF_OK
 27193                                  
 27194                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 27195 00004DC0 07                              POP	ES
 27196 00004DC1 EB2B                            JMP     SHORT RBUFPLACED
 27197                                  
 27198                                  BUF_OK:
 27199 00004DC3 8CC3                            MOV     BX,ES
 27200 00004DC5 8E06[2E03]                      MOV     ES,[DMAADD+2]
 27201 00004DC9 8EDB                            MOV     DS,BX
 27202 00004DCB 87FE                    	XCHG    DI,SI
 27203 00004DCD D1E9                            SHR     CX,1
 27204                                  ;M039
 27205                                  	; MSDOS 3.3
 27206                                  	;JNC	short EVENRD
 27207                                  	;MOVSB
 27208                                  ;EVENRD:
 27209                                  	;REP     MOVSW
 27210                                  
 27211                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 27212                                  ;       DS:SI-> Source within Buffer.
 27213                                  ;       ES:DI-> Destination within Transfer memory block.
 27214                                  
 27215                                  	; MSDOS 6.0
 27216 00004DCF F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 27217                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27218                                  	;rep	movsb                   ;Copy last byte.
 27219                                  	; 16/12/2022
 27220 00004DD1 7301                    	jnc	short EVENRD ; **** 20/05/2019
 27221 00004DD3 A4                      	movsb ; ****
 27222                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27223                                  	;adc	cx,0
 27224                                  	;rep	movsb
 27225                                  ;M039
 27226                                  EVENRD: ; ****
 27227 00004DD4 07                              POP	ES
 27228                                  ;hkn; SS override
 27229 00004DD5 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 27230                                  	;;lea	bx,[di+16]
 27231                                  	;lea	bx,[di+20] ; MSDOS 6.0
 27232 00004DDA 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 27233 00004DDD 29DE                            SUB     SI,BX                   ; Position in buffer
 27234 00004DDF E8310C                          call	PLACEBUF
 27235                                  	;cmp	si,[es:bp+2]
 27236 00004DE2 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 27237 00004DE6 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 27238                                  ;M039
 27239                                  	; MSDOS 3.3
 27240                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27241                                                                          ;  even though it is MRU.
 27242                                          ; MSDOS 6.0
 27243 00004DE8 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 27244                                  ;M039					; chucking even though it is MRU.
 27245                                  
 27246                                  RBUFPLACEDC:
 27247 00004DED F8                              CLC
 27248                                  RBUFPLACED:
 27249 00004DEE 16                      	push	ss
 27250 00004DEF 1F                      	pop	ds
 27251 00004DF0 C3                              retn
 27252                                  
 27253                                  ;----------------------------------------------------------------------------
 27254                                  ;
 27255                                  ; Procedure : BUFWRT
 27256                                  ;
 27257                                  ; Do a partial sector write via one of the system buffers
 27258                                  ; ES:BP Points to DPB
 27259                                  ; Carry set if error (currently user FAILed to I 24)
 27260                                  ;
 27261                                  ; DS - set to DOSDATA
 27262                                  ;
 27263                                  ;----------------------------------------------------------------------------
 27264                                  
 27265                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27266                                  	; 20/05/2019 - Retro DOS v4.0
 27267                                  BUFWRT:
 27268 00004DF1 A1[C405]                        MOV     AX,[SECPOS]
 27269                                          ; MSDOS 6.0
 27270 00004DF4 83C001                  	ADD	AX,1            	; Set for next sector
 27271 00004DF7 A3[C405]                        MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 27272 00004DFA 8316[C605]00                    ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 27273 00004DFF A1[C605]                        MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 27274 00004E02 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 27275 00004E06 B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 27276 00004E08 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 27277 00004E0A 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 27278 00004E0C A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 27279                                  
 27280                                  	; MSDOS 3.3
 27281                                  	;INC	AX
 27282                                  	;MOV	[SECPOS],AX ; 09/09/2018
 27283                                  
 27284                                  	; 20/05/2019
 27285                                  	; MSDOS 3.3 & MSDOS 6.0
 27286 00004E0F 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 27287 00004E13 B001                            MOV     AL,1
 27288 00004E15 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 27289                                  _doread:
 27290 00004E17 30C0                            XOR     AL,AL
 27291                                  NOREAD:
 27292 00004E19 06                              PUSH	ES
 27293 00004E1A E85FFF                          CALL    BUFSEC
 27294 00004E1D 72A1                    	JC	short BUF_IO_FAIL
 27295 00004E1F 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 27296 00004E23 D1E9                            SHR     CX,1
 27297                                  ;M039
 27298                                  	; MSDOS 3.3
 27299                                  	;JNC	short EVENWRT ; 09/09/2018
 27300                                  	;MOVSB
 27301                                  ;EVENWRT:
 27302                                  	;REP	MOVSW
 27303                                  
 27304                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 27305                                  ;       DS:SI-> Source within Transfer memory block.
 27306                                  ;       ES:DI-> Destination within Buffer.
 27307                                  
 27308                                  	; MSDOS 6.0
 27309 00004E25 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 27310                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27311                                  	;rep	movsb                   ;Copy last byte.
 27312                                  	; 16/12/2022
 27313 00004E27 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 27314 00004E29 A4                      	movsb ; ****
 27315                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27316                                  	;adc	cx,0
 27317                                  	;rep	movsb
 27318                                  ;M039
 27319                                  EVENWRT: ; ****
 27320 00004E2A 07                              POP	ES
 27321                                  
 27322                                  ;hkn; SS override
 27323 00004E2B 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 27324                                  
 27325                                  	; MSDOS 6.0
 27326 00004E30 F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27327                                  					;LB. if already dirty		  ;AN000;
 27328 00004E34 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 27329 00004E36 E82C0E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27330                                  	
 27331                                  	;or	byte [bx+5],40h
 27332 00004E39 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27333                                  yesdirty10:
 27334                                  	;;lea	si,[bx+16]
 27335                                  	;lea	si,[bx+20] ; MSDOS 6.0
 27336 00004E3D 8D7714                          LEA     SI,[BX+BUFINSIZ]
 27337 00004E40 29F7                            SUB     DI,SI                   ; Position in buffer
 27338                                  ;M039
 27339                                  	; MSDOS 3.3
 27340                                  	;MOV	SI,DI
 27341                                  	;MOV	DI,BX
 27342                                  	;call	PLACEBUF
 27343                                  	;;cmp	si,[es:bp+2]
 27344                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27345                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 27346                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27347                                                                          ;  even though it is MRU.
 27348                                  	; MSDOS 6.0
 27349                                  	;cmp	di,[es:bp+2]
 27350 00004E42 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27351 00004E46 7205                            JB	short WBUFPLACED	; No, leave buf where it is
 27352 00004E48 36891E[6D00]                    MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 27353                                  					; chucking even though it is MRU.
 27354                                  ;M039
 27355                                  
 27356                                  WBUFPLACED:
 27357 00004E4D F8                              CLC
 27358 00004E4E 16                      	push	ss
 27359 00004E4F 1F                      	pop	ds
 27360 00004E50 C3                              retn
 27361                                  
 27362                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 27363                                  ;---------------------------------------------------------------------------
 27364                                  ;
 27365                                  ; Procedure Name : NEXTSEC
 27366                                  ;
 27367                                  ; Compute the next sector to read or write
 27368                                  ; ES:BP Points to DPB
 27369                                  ;
 27370                                  ;---------------------------------------------------------------------------
 27371                                  
 27372                                  NEXTSEC:
 27373 00004E51 F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 27374 00004E56 7426                            JZ	short CLRET
 27375                                  
 27376 00004E58 A0[7305]                        MOV     AL,[SECCLUSPOS]
 27377 00004E5B FEC0                            INC     AL
 27378                                  	;cmp	al,[es:bp+4]
 27379 00004E5D 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 27380 00004E61 7618                            JBE	short SAVPOS
 27381                                  
 27382 00004E63 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27383 00004E67 E8BC07                          call	IsEOF
 27384 00004E6A 7314                            JAE	short NONEXT
 27385                                  
 27386 00004E6C E8CE07                          call	UNPACK
 27387 00004E6F 720F                            JC	short NONEXT
 27388                                  clusgot:
 27389 00004E71 893E[BC05]                      MOV     [CLUSNUM],DI
 27390 00004E75 FF06[BA05]                      INC     word [LASTPOS]
 27391 00004E79 B000                            MOV     AL,0
 27392                                  SAVPOS:
 27393 00004E7B A2[7305]                        MOV     [SECCLUSPOS],AL
 27394                                  CLRET:
 27395 00004E7E F8                              CLC
 27396 00004E7F C3                              retn
 27397                                  NONEXT:
 27398 00004E80 F9                              STC
 27399 00004E81 C3                              retn
 27400                                  
 27401                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 27402                                  ;----------------------------------------------------------------------------
 27403                                  ;
 27404                                  ; Procedure Name : OPTIMIZE
 27405                                  ;
 27406                                  ; Inputs:
 27407                                  ;       BX = Physical cluster
 27408                                  ;       CX = No. of records
 27409                                  ;       DL = sector within cluster
 27410                                  ;       ES:BP = Base of drive parameters
 27411                                  ;       [NEXTADD] = transfer address
 27412                                  ; Outputs:
 27413                                  ;       AX = No. of records remaining
 27414                                  ;       BX = Transfer address
 27415                                  ;       CX = No. or records to be transferred
 27416                                  ;       DX = Physical sector address            (LOW)
 27417                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 27418                                  ;       DI = Next cluster
 27419                                  ;       [CLUSNUM] = Last cluster accessed
 27420                                  ;       [NEXTADD] updated
 27421                                  ;       Carry set if error (currently user FAILed to I 24)
 27422                                  ; ES:BP unchanged. Note that segment of transfer not set.
 27423                                  ;
 27424                                  ;---------------------------------------------------------------------------
 27425                                  
 27426                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27427                                  OPTIMIZE:
 27428 00004E82 52                      	PUSH    DX
 27429 00004E83 53                              PUSH    BX
 27430                                  	;mov	al,[es:bp+4]
 27431 00004E84 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 27432 00004E88 FEC0                            INC     AL              ; Number of sectors per cluster
 27433 00004E8A 88C4                            MOV     AH,AL
 27434 00004E8C 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 27435 00004E8E 89CA                            MOV     DX,CX
 27436                                  	;MOV	CX,0
 27437                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27438                                  	; 16/12/2022
 27439 00004E90 31C9                    	xor	cx,cx	; sub cx,cx
 27440                                  OPTCLUS:
 27441                                  ; AL has number of sectors available in current cluster
 27442                                  ; AH has number of sectors available in next cluster
 27443                                  ; BX has current physical cluster
 27444                                  ; CX has number of sequential sectors found so far
 27445                                  ; DX has number of sectors left to transfer
 27446                                  ; ES:BP Points to DPB
 27447                                  ; ES:SI has FAT pointer
 27448                                  
 27449                                  do_norm3:
 27450 00004E92 E8A807                          call	UNPACK
 27451 00004E95 7237                            JC	short OP_ERR
 27452                                  clusgot2:
 27453 00004E97 00C1                    	ADD	CL,AL
 27454 00004E99 80D500                          ADC     CH,0
 27455 00004E9C 39D1                            CMP     CX,DX
 27456 00004E9E 7333                            JAE	short BLKDON
 27457 00004EA0 88E0                            MOV     AL,AH
 27458 00004EA2 43                              INC     BX
 27459 00004EA3 39DF                            CMP     DI,BX
 27460 00004EA5 74EB                            JZ	short OPTCLUS
 27461 00004EA7 4B                              DEC     BX
 27462                                  FINCLUS:
 27463 00004EA8 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 27464 00004EAC 29CA                            SUB     DX,CX           ; Number of sectors still needed
 27465 00004EAE 52                              PUSH    DX
 27466 00004EAF 89C8                            MOV     AX,CX
 27467                                  	;mul	word[ES:BP+2]
 27468 00004EB1 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 27469                                  				; Number of sectors times sector size
 27470 00004EB5 8B36[B805]                      MOV     SI,[NEXTADD]
 27471 00004EB9 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 27472 00004EBB A3[B805]                        MOV     [NEXTADD],AX
 27473 00004EBE 58                              POP     AX              ; Number of sectors still needed
 27474 00004EBF 5A                              POP     DX              ; Starting cluster
 27475 00004EC0 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 27476 00004EC2 011E[BA05]                      ADD     [LASTPOS],BX
 27477 00004EC6 5B                              POP     BX              ; BL = sector position within cluster
 27478 00004EC7 E81700                  	call	FIGREC
 27479 00004ECA 89F3                            MOV     BX,SI
 27480 00004ECC F8                      	CLC
 27481 00004ECD C3                              retn
 27482                                  OP_ERR:
 27483 00004ECE 83C404                          ADD     SP,4
 27484 00004ED1 F9                      	STC
 27485 00004ED2 C3                              retn
 27486                                  BLKDON:
 27487 00004ED3 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 27488 00004ED5 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 27489 00004ED7 FECC                            DEC     AH              ; Adjust to mean position within cluster
 27490 00004ED9 8826[7305]                      MOV     [SECCLUSPOS],AH
 27491 00004EDD 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 27492 00004EDF EBC7                            JMP     SHORT FINCLUS
 27493                                  
 27494                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 27495                                  ;---------------------------------------------------------------------------
 27496                                  ;
 27497                                  ; Procedure Name : FIGREC
 27498                                  ;
 27499                                  ; Inputs:
 27500                                  ;       DX = Physical cluster number
 27501                                  ;       BL = Sector position within cluster
 27502                                  ;       ES:BP = Base of drive parameters
 27503                                  ; Outputs:
 27504                                  ;       DX = physical sector number           (LOW)
 27505                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 27506                                  ; No other registers affected.
 27507                                  ;
 27508                                  ;---------------------------------------------------------------------------
 27509                                  
 27510                                  	; 10/06/2019
 27511                                  	; 20/05/2019 - Retro DOS v4.0
 27512                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 27513                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27514                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 27515                                  FIGREC:
 27516 00004EE1 51                              PUSH    CX
 27517                                  	;mov	cl,[es:bp+5]
 27518 00004EE2 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 27519 00004EE6 4A                              DEC     DX
 27520 00004EE7 4A                              DEC     DX
 27521                                  
 27522                                  	; MSDOS 3.3
 27523                                  	;SHL	DX,CL
 27524                                  
 27525                                  ;hkn; SS override HIGH_SECTOR
 27526                                  	; MSDOS 6.0
 27527 00004EE8 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 27528 00004EEF 08C9                    	OR	CL,CL				;F.C. >32mb
 27529 00004EF1 740C                    	JZ	short noshift			;F.C. >32mb
 27530 00004EF3 30ED                    	XOR	CH,CH 				;F.C. >32mb
 27531                                  rotleft:					;F.C. >32mb
 27532 00004EF5 F8                      	CLC					;F.C. >32mb
 27533 00004EF6 D1D2                    	RCL	DX,1				;F.C. >32mb
 27534                                  	; 10/06/2019
 27535 00004EF8 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 27536 00004EFD E2F6                    	LOOP	rotleft				;F.C. >32mb
 27537                                  noshift:
 27538                                  	; MSDOS 3.3 & MSDOS 6.0
 27539 00004EFF 08DA                            OR      DL,BL
 27540                                  	;add	dx,[es:bp+0Bh]
 27541 00004F01 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 27542                                  	; MSDOS 6.0
 27543                                  	; 10/06/2019
 27544 00004F05 368316[0706]00                  ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 27545                                  	; MSDOS 3.3 & MSDOS 6.0        
 27546 00004F0B 59                      	POP     CX
 27547                                  figrec_retn:
 27548 00004F0C C3                              retn
 27549                                  
 27550                                  ; 20/05/2019 - Retro DOS v4.0
 27551                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 27552                                  
 27553                                  ; 30/07/2018 - Retro DOS v3.0
 27554                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 27555                                  
 27556                                  ;Break   <ALLOCATE -- Assign disk space>
 27557                                  ;---------------------------------------------------------------------------
 27558                                  ;
 27559                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 27560                                  ;
 27561                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 27562                                  ;   FAT-chained onto the end of the existing file.
 27563                                  ;
 27564                                  ;   The DPB contains the cluster # of the last free cluster allocated
 27565                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 27566                                  ;   numbered clusters, looking for the necessary free blocks.
 27567                                  ;
 27568                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 27569                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 27570                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 27571                                  ;
 27572                                  ;       If we get to the end of the disk without satisfaction:
 27573                                  ;
 27574                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 27575                                  ;               return (insufficient_disk_space)
 27576                                  ;           ELSE
 27577                                  ;               dpb_next_free = 2; start scan over from the beginning.
 27578                                  ;
 27579                                  ;   Note that there is no multitasking interlock. There is no race when
 27580                                  ;   examining the entrys in an in-core FAT block since there will be no
 27581                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 27582                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 27583                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 27584                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 27585                                  ;   satisfied. We can't allow another activation to think this cluster is
 27586                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 27587                                  ;   allocated.
 27588                                  ;
 27589                                  ;   Note that when we run out of space this algorithem will scan from
 27590                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 27591                                  ;   redundantly scanning the later part of the disk. This only happens when
 27592                                  ;   we run out of space, so sue me.
 27593                                  ;
 27594                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27595                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27596                                  ;                                                                          ;
 27597                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 27598                                  ;   explanation:
 27599                                  ;
 27600                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 27601                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 27602                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 27603                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 27604                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 27605                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 27606                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 27607                                  ;   the
 27608                                  ;           LOOP   findfre         ; alloc more if needed
 27609                                  ;   instruction when the first cluster is allocated to the nul file. The
 27610                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 27611                                  ;
 27612                                  ;   This method is obviously useless (because it is non-reentrant) for
 27613                                  ;   multitasking, and will have to be changed. Storing the required value on
 27614                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 27615                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 27616                                  ;   problems with INT 24 well.
 27617                                  ;
 27618                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27619                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27620                                  ;                                                                          ;
 27621                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 27622                                  ;               CX = No. of clusters to allocate
 27623                                  ;               ES:BP = Base of drive parameters
 27624                                  ;               [THISSFT] = Points to SFT
 27625                                  ;
 27626                                  ;       EXIT    'C' set if insufficient space
 27627                                  ;                 [FAILERR] can be tested to see the reason for failure
 27628                                  ;                 CX = max. no. of clusters that could be added to file
 27629                                  ;               'C' clear if space allocated
 27630                                  ;                 BX = First cluster allocated
 27631                                  ;                 FAT is fully updated
 27632                                  ;                 sf_FIRCLUS field of SFT set if file was null
 27633                                  ;
 27634                                  ;       USES    ALL but SI, BP
 27635                                  
 27636                                  ;callmagic  proc near
 27637                                  ;       push    ds                             ;push segment of routine 
 27638                                  ;       push    Offset MagicPatch              ;push offset for routine
 27639                                  ;       retf                                   ;simulate jmp far
 27640                                  ;                                              ;far return address is on
 27641                                  ;                                              ;stack, so far return from
 27642                                  ;                                              ;call will return this routine
 27643                                  ;callmagic  endp
 27644                                  
 27645                                  ALLOCATE:
 27646                                  	; 10/09/2018
 27647                                  ;BEGIN MAGICDRV MODIFICATIONS
 27648                                  ;
 27649                                  ;7/5/92 scottq
 27650                                  ;
 27651                                  ;This is the disk compression patch location which allows
 27652                                  ;the disk compression software to fail allocations if the
 27653                                  ;FAT would allows allocation, but the free space for compressed
 27654                                  ;data would not.
 27655                                  ;        
 27656                                  ;;;	call    far ptr MAGICPATCH
 27657                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 27658                                  ;;; but we do know the segment and offset of the routine
 27659                                  ;;; so simulate a far call to dosdata:magicpatch
 27660                                  ;;; note dosassume above, so DS -> dosdata
 27661                                  
 27662                                  	; MSDOS 6.0
 27663                                          ;clc				;clear carry so we fall through
 27664                                  	;				;if no patch is present
 27665                                  	;push	cs			;push segment for far return
 27666                                          ;call	callmagic		;this is a near call
 27667                                          ;jnc	short Regular_Allocate_Path
 27668                                  	;jmp	Disk_Full_Return
 27669                                  
 27670                                  ;Regular_Allocate_Path:
 27671                                  	; 20/05/2019 - Retro DOS v4.0
 27672                                  ;END MAGICDRV MODIFICATIONS
 27673                                  
 27674                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27675                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 27676                                  
 27677 00004F0D 53                              PUSH    BX                      ; save (bx)
 27678 00004F0E 31DB                            XOR     BX,BX
 27679 00004F10 E82A07                  	call	UNPACK
 27680 00004F13 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 27681 00004F17 5B                              POP     BX
 27682 00004F18 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 27683                                  
 27684 00004F1A 51                              PUSH    CX
 27685 00004F1B 53                              PUSH    BX
 27686                                  
 27687 00004F1C 89DA                            MOV     DX,BX
 27688                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 27689                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 27690 00004F1E 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 27691 00004F22 83FB02                          cmp     bx,2
 27692 00004F25 7709                            ja	short FINDFRE
 27693                                  
 27694                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 27695                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 27696                                  
 27697                                  ads1:
 27698                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 27699                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 27700 00004F27 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 27701 00004F2D BB0100                          mov     bx,1                    ; Counter next instruction so first
 27702                                                                          ;       cluster examined is 2
 27703                                  
 27704                                  ;   Scanning both forwards and backwards for a free cluster
 27705                                  ;
 27706                                  ;       (BX) = forwards scan pointer
 27707                                  ;       (CX) = clusters remaining to be allocated
 27708                                  ;       (DX) = current last cluster in file
 27709                                  ;       (TOS) = last cluster of file
 27710                                  
 27711                                  FINDFRE:
 27712 00004F30 43                              INC     BX
 27713                                  	;cmp	bx,[es:bp+0Dh]
 27714 00004F31 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 27715 00004F35 7757                    	ja	short ads7	; at end of disk
 27716 00004F37 E80307                          call	UNPACK          ; check out this cluster
 27717 00004F3A 722F                            jc	short ads4	; FAT error             [INTERR?]
 27718 00004F3C 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 27719                                  
 27720                                  ;   Have found a free cluster. Chain it to the file
 27721                                  ;
 27722                                  ;       (BX) = found free cluster #
 27723                                  ;       (DX) = current last cluster in file
 27724                                  
 27725                                  	;;mov	[es:bp+1Ch],bx
 27726                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 27727 00004F3E 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 27728 00004F42 92                              xchg    ax,dx           ; save (dx) in ax
 27729 00004F43 BA0100                          mov     dx,1            ; mark this free guy as "1"
 27730 00004F46 E84807                  	call	PACK            ; set special "temporary" mark
 27731 00004F49 7220                            jc	short ads4	; FAT error             [INTERR?]
 27732                                  	;;cmp	word [es:bp+1Eh],-1
 27733                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27734 00004F4B 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27735 00004F50 7404                            JZ	short NO_ALLOC	; No
 27736                                  	;;dec	word [es:bp+1Eh]
 27737                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 27738 00004F52 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 27739                                  NO_ALLOC:
 27740 00004F56 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 27741 00004F57 87DA                            XCHG    BX,DX
 27742 00004F59 89D0                            MOV     AX,DX
 27743 00004F5B E83307                  	call	PACK            ; link free cluster onto file
 27744                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 27745                                                                  ;    cluster 0 with FIRCLUS value.
 27746 00004F5E 720B                            jc	short ads4	; FAT error [INTERR?]
 27747 00004F60 93                              xchg    BX,AX           ; (BX) = last one we looked at
 27748 00004F61 89DA                            mov     dx,bx           ; (dx) = current end of file
 27749 00004F63 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 27750                                  
 27751                                  ;   We've successfully extended the file. Clean up and exit
 27752                                  ;
 27753                                  ;       (BX) = last cluster in file
 27754                                  
 27755 00004F65 BAFFFF                          MOV     DX,0FFFFH
 27756 00004F68 E82607                  	call	PACK            ; mark last cluster EOF
 27757                                  
 27758                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 27759                                  ;   2 whole bytes. Hope its worth it...
 27760                                  ;
 27761                                  ;       'C' set if error
 27762                                  ;       calling (BX) and (CX) pushed on stack
 27763                                  
 27764                                  ads4:   
 27765 00004F6B 5B                      	POP     BX
 27766 00004F6C 59                              POP     CX              ; Don't need this stuff since we're successful
 27767 00004F6D 729D                            jc	short figrec_retn
 27768 00004F6F E8CB06                          call	UNPACK          ; Get first cluster allocated for return
 27769                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 27770 00004F72 7298                            jc	short figrec_retn
 27771 00004F74 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 27772 00004F77 7293                            jc	short figrec_retn
 27773 00004F79 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 27774 00004F7B 09FF                            OR      DI,DI           ; clear 'C'
 27775 00004F7D 758D                    	jnz	short figrec_retn ; we were extending an existing file
 27776                                  
 27777                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 27778                                  ;   info
 27779                                  dofastk:
 27780                                  	; 20/05/2019
 27781                                  	; MSDOS 6.0
 27782                                  	;push	dx ; * MSDOS 6.0
 27783                                  	;;mov	dl,[es:bp+0]
 27784                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 27785                                  	;mov	dl,[es:bp]
 27786                                  
 27787                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27788                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 27789                                  	
 27790                                  	; 16/12/2022
 27791                                  	;push	dx ; *
 27792                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 27793                                  	; 15/12/2022
 27794                                  	;mov	dl,[es:bp]
 27795                                  	
 27796                                  	; MSDOS 3.3 & MSDOS 6.0
 27797 00004F7F 06                      	PUSH	ES
 27798 00004F80 C43E[9E05]              	LES     DI,[THISSFT]
 27799                                  	;mov	[es:di+0Bh],bx
 27800 00004F84 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 27801                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 27802                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 27803 00004F88 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 27804 00004F8C 07                      	POP	ES
 27805                                  	;retn
 27806                                  
 27807                                  	;pop	dx ; * MSDOS 6.0
 27808                                  
 27809                                  	; 16/12/2022
 27810                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27811                                  	;pop	dx ; *
 27812                                  
 27813 00004F8D C3                      	retn	
 27814                                  
 27815                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 27816                                  ;   of the disk...
 27817                                  
 27818                                  ads7:   
 27819 00004F8E 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 27820 00004F93 7592                    	jnz	short ads1	; start scan from front of disk
 27821                                  
 27822                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 27823                                  ;   the space back to the free list and tell the caller how much he could have
 27824                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 27825                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 27826                                  ;
 27827                                  ;       (CX) = clusters remaining to be allocated
 27828                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 27829                                  ;       (TOS+1) = # of clusters wanted to allocate
 27830                                  
 27831 00004F95 5B                              POP     BX              ; (BX) = last cluster of file
 27832 00004F96 BAFFFF                          MOV     DX,0FFFFH
 27833 00004F99 E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 27834 00004F9C 58                              POP     AX              ; No. of clusters requested
 27835                                                                  ; Don't "retc". We are setting Carry anyway,
 27836                                                                  ;   Alloc failed, so proceed with return CX
 27837                                                                  ;   setup.
 27838 00004F9D 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 27839 00004F9F E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 27840                                                                  ;   Alloc failed.
 27841                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 27842                                          ; MSDOS 6.0
 27843 00004FA2 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 27844 00004FA7 F9                              STC
 27845 00004FA8 C3                              retn
 27846                                  
 27847                                  ;-----------------------------------------------------------------------
 27848                                  ;
 27849                                  ; Procedure Name : RESTFATBYT
 27850                                  ;
 27851                                  ; SEE ALLOCATE CAVEAT
 27852                                  ;       Carry set if error (currently user FAILed to I 24)
 27853                                  ;-----------------------------------------------------------------------
 27854                                  
 27855                                  RESTFATBYT:
 27856 00004FA9 53                              PUSH    BX
 27857 00004FAA 52                              PUSH    DX
 27858 00004FAB 57                              PUSH    DI
 27859 00004FAC 31DB                            XOR     BX,BX
 27860 00004FAE 8B16[9605]                      MOV     DX,[FATBYT]
 27861 00004FB2 E8DC06                  	call	PACK
 27862 00004FB5 5F                              POP     DI
 27863 00004FB6 5A                              POP     DX
 27864 00004FB7 5B                              POP     BX
 27865                                  ; 16/12/2022
 27866                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27867                                  ;RELEASE_flush:
 27868 00004FB8 C3                      	retn
 27869                                  
 27870                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 27871                                  ;---------------------------------------------------------------------------
 27872                                  ;
 27873                                  ; Procedure Name : RELEASE
 27874                                  ;
 27875                                  ; Inputs:
 27876                                  ;       BX = Cluster in file
 27877                                  ;       ES:BP = Base of drive parameters
 27878                                  ; Function:
 27879                                  ;       Frees cluster chain starting with [BX]
 27880                                  ;       Carry set if error (currently user FAILed to I 24)
 27881                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 27882                                  ;
 27883                                  ;-----------------------------------------------------------------------------
 27884                                  
 27885                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27886                                  	; 20/05/2019 - Retro DOS v4.0
 27887                                  RELEASE:
 27888 00004FB9 31D2                            XOR     DX,DX
 27889                                  
 27890                                  	;entry	RELBLKS
 27891                                  RELBLKS:
 27892                                  
 27893                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 27894                                  ;   and free the rest in the chain.
 27895                                  
 27896 00004FBB E87F06                  	call	UNPACK
 27897 00004FBE 7224                    	jc	short RELEASE_flush
 27898 00004FC0 7422                    	jz	short RELEASE_flush
 27899 00004FC2 89F8                            MOV     AX,DI
 27900 00004FC4 52                              PUSH    DX
 27901 00004FC5 E8C906                  	call	PACK
 27902 00004FC8 5A                              POP     DX
 27903 00004FC9 7219                    	jc	short RELEASE_flush
 27904 00004FCB 09D2                            OR      DX,DX
 27905 00004FCD 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 27906                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 27907                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27908 00004FCF 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27909 00004FD4 7404                            JZ	short NO_DEALLOC	; No
 27910 00004FD6 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 27911                                  NO_DEALLOC:
 27912 00004FDA 89C3                            MOV     BX,AX
 27913 00004FDC 48                              dec     ax              ; check for "1"
 27914 00004FDD 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 27915 00004FDF E84406                  	call	IsEOF
 27916 00004FE2 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 27917                                  
 27918                                  	; 16/12/2022
 27919                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27920                                  ;%if 0
 27921                                  RELEASE_flush:
 27922                                  	; MSDOS 6.0
 27923 00004FE4 268A4600                	mov	al,[es:bp]
 27924                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 27925 00004FE8 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 27926 00004FE9 51                      	push	cx		;  them to be preserved.
 27927 00004FEA 06                      	push	es
 27928 00004FEB 55                      	push	bp
 27929 00004FEC E86E0B                  	call	FLUSHBUF	; commit buffers for this drive
 27930 00004FEF 5D                      	pop	bp
 27931 00004FF0 07                      	pop	es
 27932 00004FF1 59                      	pop	cx
 27933 00004FF2 5E                      	pop	si
 27934                                  ;%endif
 27935                                  RET12:
 27936 00004FF3 C3                      	retn
 27937                                  
 27938                                  ;Break	<GETEOF -- Find the end of a file>
 27939                                  ;------------------------------------------------------------------------
 27940                                  ;
 27941                                  ; Procedure Name : GETEOF
 27942                                  ;
 27943                                  ; Inputs:
 27944                                  ;       ES:BP Points to DPB
 27945                                  ;       BX = Cluster in a file
 27946                                  ;       DS = CS
 27947                                  ; Outputs:
 27948                                  ;       BX = Last cluster in the file
 27949                                  ;       Carry set if error (currently user FAILed to I 24)
 27950                                  ; DI destroyed. No other registers affected.
 27951                                  ;
 27952                                  ;--------------------------------------------------------------------------
 27953                                  
 27954                                  GETEOF:
 27955 00004FF4 E84606                  	call	UNPACK
 27956 00004FF7 72FA                            jc	short RET12
 27957 00004FF9 53                              PUSH    BX
 27958 00004FFA 89FB                            MOV     BX,DI
 27959 00004FFC E82706                  	call	IsEOF
 27960 00004FFF 5B                              POP     BX
 27961 00005000 73F1                            JAE     short RET12
 27962 00005002 89FB                            MOV     BX,DI
 27963 00005004 EBEE                            JMP     short GETEOF
 27964                                  
 27965                                  ;============================================================================
 27966                                  ; FCB.ASM, MSDOS 6.0, 1991
 27967                                  ;============================================================================
 27968                                  ; 30/07/2018 - Retro DOS v3.0
 27969                                  ; 20/05/2019 - Retro DOS v4.0
 27970                                  
 27971                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 27972                                  ;	NAME	FCB
 27973                                  
 27974                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 27975                                  ;		  filename characters
 27976                                  ;
 27977                                  ;	MakeFcb
 27978                                  ;	NameTrans
 27979                                  ;	PATHCHRCMP
 27980                                  ;	GetLet
 27981                                  ;	UCase
 27982                                  ;	GetLet3
 27983                                  ;	GetCharType
 27984                                  ;	TESTKANJ
 27985                                  ;	NORMSCAN
 27986                                  ;	DELIM
 27987                                  ;
 27988                                  ;	Revision history:
 27989                                  ;
 27990                                  ;		A000  version 4.00  Jan. 1988
 27991                                  ;	
 27992                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 27993                                  
 27994                                  TableLook	EQU	-1
 27995                                  
 27996                                  SCANSEPARATOR	EQU	1
 27997                                  DRVBIT		EQU	2
 27998                                  NAMBIT		EQU	4
 27999                                  EXTBIT		EQU	8
 28000                                  
 28001                                  ;----------------------------------------------------------------------------
 28002                                  ;
 28003                                  ; Procedure : MakeFcb
 28004                                  ;
 28005                                  ;----------------------------------------------------------------------------
 28006                                  
 28007                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28008                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 28009                                  MAKEFCB:
 28010                                  ;hkn; SS override
 28011 00005006 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 28012 0000500C 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 28013                                  	;test	al,2
 28014 0000500E A802                    	test	AL,DRVBIT	; Use current drive field if default?
 28015 00005010 7504                    	JNZ	short DEFDRV
 28016 00005012 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 28017                                  DEFDRV:
 28018 00005016 47                      	INC	DI
 28019 00005017 B90800                  	MOV	CX,8
 28020                                  	;test	al,4
 28021 0000501A A804                    	test	AL,NAMBIT	; Use current name fields as default?
 28022 0000501C 93                      	XCHG	AX,BX		; Save bits in BX
 28023 0000501D B020                    	MOV	AL," "
 28024 0000501F 7404                    	JZ	short FILLB	; If not, go fill with blanks
 28025 00005021 01CF                    	ADD	DI,CX
 28026 00005023 31C9                    	XOR	CX,CX		; Don't fill any
 28027                                  FILLB:
 28028 00005025 F3AA                    	REP	STOSB
 28029 00005027 B103                    	MOV	CL,3
 28030 00005029 F6C308                  	test	BL,EXTBIT	; Use current extension as default
 28031 0000502C 7404                    	JZ	short FILLB2
 28032 0000502E 01CF                    	ADD	DI,CX
 28033 00005030 31C9                    	XOR	CX,CX
 28034                                  FILLB2:
 28035 00005032 F3AA                    	REP	STOSB
 28036 00005034 91                      	XCHG	AX,CX		; Put zero in AX
 28037 00005035 AB                      	STOSW
 28038 00005036 AB                      	STOSW			; Initialize two words after to zero
 28039 00005037 83EF10                  	SUB	DI,16		; Point back at start
 28040                                  	;test	bl,1
 28041 0000503A F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 28042 0000503D 7409                    	JZ	short SKPSPC
 28043 0000503F E88D00                  	CALL	SCANB		; Peel off blanks and tabs
 28044 00005042 E82701                  	CALL	DELIM		; Is it a one-time-only delimiter?
 28045 00005045 7504                    	JNZ	short NOSCAN
 28046 00005047 46                      	INC	SI		; Skip over the delimiter
 28047                                  SKPSPC:
 28048 00005048 E88400                  	CALL	SCANB		; Always kill preceding blanks and tabs
 28049                                  NOSCAN:
 28050 0000504B E8F500                  	CALL	GETLET
 28051 0000504E 761E                    	JBE	short NODRV	; Quit if termination character
 28052 00005050 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 28053 00005053 7519                    	JNZ	short NODRV
 28054 00005055 46                      	INC	SI		; Skip over colon
 28055 00005056 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 28056 00005058 760F                    	JBE	short BADDRV	; Drive letter out of range
 28057                                  
 28058 0000505A 50                      	PUSH	AX
 28059 0000505B E8311B                  	call	GetVisDrv
 28060 0000505E 58                      	POP	AX
 28061 0000505F 730A                    	JNC	short HAVDRV
 28062                                  
 28063                                  	; 20/05/2019 - Retro DOS v4.0
 28064                                  	; MSDOS 6.0
 28065                                  ;hkn; SS override
 28066 00005061 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28067                                  					; if not FAT drive ;AN000;
 28068 00005067 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28069                                  BADDRV:
 28070 00005069 B2FF                    	MOV	DL,-1
 28071                                  HAVDRV:
 28072 0000506B AA                      	STOSB			; Put drive specifier in first byte
 28073 0000506C 46                      	INC	SI
 28074 0000506D 4F                      	DEC	DI		; Counteract next two instructions
 28075                                  NODRV:
 28076 0000506E 4E                      	DEC	SI		; Back up
 28077 0000506F 47                      	INC	DI		; Skip drive byte
 28078                                  
 28079                                  	;entry	NORMSCAN
 28080                                  NORMSCAN:
 28081 00005070 B90800                  	MOV	CX,8
 28082 00005073 E82700                  	CALL	GETWORD 	; Get 8-letter file name
 28083 00005076 803C2E                  	CMP	BYTE [SI],"."
 28084 00005079 7515                    	JNZ	short NODOT
 28085 0000507B 46                      	INC	SI		; Skip over dot if present
 28086                                  
 28087                                  	; MSDOS 6.0
 28088                                  ;hkn; SS override
 28089                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28090                                  	; 10/06/2019
 28091 0000507C 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28092 00005082 7406                    	JZ	short VOLOK				;AN000;
 28093 00005084 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28094 00005085 B90200                  	MOV	CX,2					;AN000;
 28095 00005088 EB03                    	JMP	SHORT contvol				;AN000;
 28096                                  VOLOK:
 28097 0000508A B90300                  	MOV	CX,3		; Get 3-letter extension
 28098                                  contvol:
 28099 0000508D E81300                  	CALL	MUSTGETWORD
 28100                                  NODOT:
 28101 00005090 88D0                    	MOV	AL,DL
 28102                                  
 28103                                  	; MSDOS 6.0
 28104                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28105                                  	; 18/12/2022
 28106 00005092 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28107                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28108                                  
 28109 00005098 C3                      	retn
 28110                                  
 28111                                  NONAM:
 28112 00005099 01CF                    	ADD	DI,CX
 28113 0000509B 4E                      	DEC	SI
 28114 0000509C C3                      	retn
 28115                                  
 28116                                  GETWORD:
 28117 0000509D E8A300                  	CALL	GETLET		
 28118 000050A0 76F7                    	JBE	short NONAM	; Exit if invalid character
 28119 000050A2 4E                      	DEC	SI
 28120                                  
 28121                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 28122                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 28123                                  
 28124                                  MUSTGETWORD:
 28125 000050A3 E89D00                  	CALL	GETLET
 28126                                  
 28127                                  ;	If spaceFlag is set then we allow spaces in a pathname
 28128                                  
 28129                                  ;IF NOT TABLELOOK
 28130                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 28131                                  ;ENDIF
 28132 000050A6 750C                    	JNZ	short MustCheckCX
 28133                                  
 28134                                  ;hkn; SS override
 28135 000050A8 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 28136 000050AE 7419                    	JZ	short FILLNAM
 28137 000050B0 3C20                    	CMP	AL," "
 28138 000050B2 7515                    	JNZ	short FILLNAM
 28139                                  
 28140                                  MustCheckCX:
 28141 000050B4 E3ED                    	JCXZ	MUSTGETWORD
 28142 000050B6 49                      	DEC	CX
 28143 000050B7 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 28144 000050B9 7504                    	JNZ	short NOSTAR
 28145 000050BB B03F                    	MOV	AL,"?"
 28146 000050BD F3AA                    	REP	STOSB
 28147                                  NOSTAR:
 28148 000050BF AA                      	STOSB
 28149 000050C0 3C3F                    	CMP	AL,"?"
 28150 000050C2 75DF                    	JNZ	short MUSTGETWORD
 28151 000050C4 80CA01                  	OR	DL,1		; Flag ambiguous file name
 28152 000050C7 EBDA                    	JMP	short MUSTGETWORD
 28153                                  FILLNAM:
 28154 000050C9 B020                    	MOV	AL," "
 28155 000050CB F3AA                    	REP	STOSB
 28156 000050CD 4E                      	DEC	SI
 28157 000050CE C3                      	retn
 28158                                  
 28159                                  SCANB:
 28160 000050CF AC                      	LODSB
 28161 000050D0 E8A100                  	CALL	SPCHK
 28162 000050D3 74FA                    	JZ	short SCANB
 28163 000050D5 4E                      	DEC	SI
 28164                                  scanb_retn:
 28165 000050D6 C3                      	retn
 28166                                  
 28167                                  ;----------------------------------------------------------------------------
 28168                                  ;
 28169                                  ; Procedure Name : NameTrans
 28170                                  ;
 28171                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 28172                                  ; allow spaces in pathnames
 28173                                  ;
 28174                                  ;   Inputs:	DS:SI points to start of path element
 28175                                  ;   Outputs:	Name1 has unpacked name, uppercased
 28176                                  ;		ES = DOSGroup
 28177                                  ;		DS:SI advanced after name
 28178                                  ;   Registers modified: DI,AX,DX,CX
 28179                                  ;
 28180                                  ;----------------------------------------------------------------------------
 28181                                  
 28182                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28183                                  	; 20/05/2019 - Retro DOS v4.0
 28184                                  NameTrans:
 28185                                  ;hkn; SS override
 28186 000050D7 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 28187 000050DD 16                      	push	ss
 28188 000050DE 07                      	pop	es
 28189                                  
 28190                                  ;hkn; NAME1 is in DOSDATA
 28191 000050DF BF[4B05]                	MOV	DI,NAME1
 28192 000050E2 57                      	PUSH	DI
 28193 000050E3 B82020                  	MOV	AX,'  '
 28194 000050E6 B90500                  	MOV	CX,5
 28195 000050E9 AA                      	STOSB
 28196 000050EA F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 28197 000050EC 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 28198 000050EE 88C2                    	MOV	DL,AL
 28199 000050F0 AA                      	STOSB
 28200 000050F1 5F                      	POP	DI
 28201                                  
 28202 000050F2 E87BFF                  	CALL	NORMSCAN
 28203                                  
 28204                                  ;hkn; SS override for NAME1
 28205 000050F5 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 28206 000050FB 75D9                    	jnz	short scanb_retn
 28207 000050FD 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 28208 00005103 C3                      	retn
 28209                                  
 28210                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 28211                                  ;============================================================================
 28212                                  
 28213                                  ; 20/05/2019 - Retro DOS v4.0
 28214                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28215                                  
 28216                                  ;If TableLook
 28217                                  
 28218                                  ;hkn; Table	SEGMENT
 28219                                  ;	PUBLIC	CharType
 28220                                  ;----------------------------------------------------------------------------
 28221                                  
 28222                                  ; Character type table for file name scanning
 28223                                  ; Table provides a mapping of characters to validity bits.
 28224                                  ; Four bits are provided for each character. Values 7Dh and above
 28225                                  ; have all bits set, so that part of the table is chopped off, and
 28226                                  ; the translation routine is responsible for screening these values.
 28227                                  ; The bit values are defined in DOSSYM.INC
 28228                                  
 28229                                  ;	      ; ^A and NUL
 28230                                  ;CharType:
 28231                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28232                                  ;	      ; ^C and ^B
 28233                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28234                                  ;	      ; ^E and ^D
 28235                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28236                                  ;	      ; ^G and ^F
 28237                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28238                                  ;	      ; TAB and BS
 28239                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28240                                  ;	      ; ^K and ^J
 28241                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28242                                  ;	      ; ^M and ^L
 28243                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28244                                  ;	      ; ^O and ^N
 28245                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28246                                  ;	      ; ^Q and ^P
 28247                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28248                                  ;	      ; ^S and ^R
 28249                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28250                                  ;	      ; ^U and ^T
 28251                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28252                                  ;	      ; ^W and ^V
 28253                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28254                                  ;	      ; ^Y and ^X
 28255                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28256                                  ;	      ; ESC and ^Z
 28257                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28258                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28260                                  ;	      ; ^_ and ^^
 28261                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28262                                  ;	      ; ! and SPACE
 28263                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 28264                                  ;	      ; # and "
 28265                                  ;	 db   LOW (NOT FFCB+FCHK)
 28266                                  ;	      ; $ - )
 28267                                  ;	 db   3 dup (0FFh)
 28268                                  ;	      ; + and *
 28269                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 28270                                  ;	      ; - and '
 28271                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 28272                                  ;	      ; / and .
 28273                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 28274                                  ;	      ; 0 - 9
 28275                                  ;	 db   5 dup (0FFh)
 28276                                  ;	      ; ; and :
 28277                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28278                                  ;	      ; = and <
 28279                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28280                                  ;	      ; ? and >
 28281                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28282                                  ;	      ; A - Z
 28283                                  ;	 db   13 dup (0FFh)
 28284                                  ;	      ; \ and [
 28285                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 28286                                  ;	      ; ^ and ]
 28287                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28288                                  ;	      ; _ - {
 28289                                  ;	 db   15 dup (0FFh)
 28290                                  ;	      ; } and |
 28291                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28292                                  
 28293                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 28294                                  ;					; character in the table
 28295                                  
 28296                                  ;FCHK	equ 1		; normal name char, no chks needed
 28297                                  ;FDELIM	equ 2		; is a delimiter
 28298                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 28299                                  ;FFCB	equ 8		; is valid in an FCB
 28300                                  
 28301                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28302                                  ;----------------------------------------------------------------------------
 28303                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 28304                                  
 28305                                  CharType: ; 63 bytes
 28306 00005104 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 28307 0000510C 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 28308 00005114 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 28309 0000511C FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 28310 00005124 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 28311 0000512C FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 28312 00005134 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 28313 0000513C FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 28314                                  
 28315                                  CharType_last equ ($ - CharType) * 2
 28316                                  
 28317                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 28318                                  ;----------------------------------------------------------------------------
 28319                                  ;CharType:
 28320                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28321                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28322                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28323                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28324                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 28325                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 28326                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28327                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 28328                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28329                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28330                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28331                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 28332                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28333                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28334                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28335                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 28336                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28337                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28338                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28339                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28340                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28341                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28342                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28343                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28344                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28345                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28346                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28347                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28348                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28349                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28350                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28351                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28352                                  
 28353                                  ;hkn; Table	ENDS
 28354                                  
 28355                                  ;ENDIF
 28356                                  
 28357                                  ; 20/05/2019 - Retro DOS v4.0
 28358                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 28359                                  
 28360                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28361                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 28362                                  
 28363                                  ;----------------------------------------------------------------------------
 28364                                  ;
 28365                                  ; Procedure Names : GetLet, UCase, GetLet3
 28366                                  ;
 28367                                  ; These routines take a character, convert it to upper case, and check
 28368                                  ; for delimiters.  Three different entry points:
 28369                                  ;	GetLet -  DS:[SI] = character to convert
 28370                                  ;	UCase  -  AL = character to convert
 28371                                  ;	GetLet3 - AL = character
 28372                                  ;		  [BX] = translation table to use
 28373                                  ;
 28374                                  ;	Exit (in all cases) : AL = upper case character
 28375                                  ;			      CY set if char is control char other than TAB
 28376                                  ;			      ZF set if char is a delimiter
 28377                                  ;	Uses : AX, flags
 28378                                  ;
 28379                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 28380                                  ; inline version.  Return with carry set is only possible in the inline
 28381                                  ; version. The table lookup version is the one in use.
 28382                                  ;
 28383                                  ;----------------------------------------------------------------------------
 28384                                  
 28385                                  ; This entry point has character at [SI]
 28386                                  
 28387                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 28388                                  GETLET:	
 28389 00005143 AC                      	LODSB
 28390                                  
 28391                                  ; This entry point has character in AL
 28392                                  
 28393                                  	;entry	UCase
 28394                                  UCase:	
 28395                                  	; 09/08/2018
 28396                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 28397                                  _UCase:
 28398 00005144 53                      	PUSH	BX
 28399 00005145 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 28400                                  
 28401                                  ; Convert the character in AL to upper case
 28402                                  
 28403                                  gl_0:
 28404 00005148 3C61                    	CMP	AL,"a"
 28405 0000514A 7214                    	JB	short gl_2	; Already upper case, go check type
 28406 0000514C 3C7A                    	CMP	AL,"z"
 28407 0000514E 7702                    	JA	short gl_1
 28408 00005150 2C20                    	SUB	AL,20H		; Convert to upper case
 28409                                  
 28410                                  ; Map European character to upper case
 28411                                  
 28412                                  gl_1:
 28413 00005152 3C80                    	CMP	AL,80H
 28414 00005154 720A                    	JB	short gl_2	; Not EuroChar, go check type
 28415 00005156 2C80                    	SUB	AL,80H		; translate to upper case with this index
 28416                                  
 28417                                  	; M048 - Start 
 28418                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 28419                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 28420                                  	; preserve it.
 28421                                  
 28422                                  	; 09/08/2018 - Retro DOS v3.0
 28423                                  	; MSDOS 3.3
 28424                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 28425                                  	;CS	XLAT
 28426                                  
 28427                                  	; 20/05/2019 - Retro DOS v4.0
 28428                                  
 28429                                  	; MSDOS 6.0
 28430 00005158 1E                      	push	ds
 28431                                  	;getdseg <ds>
 28432 00005159 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 28433 0000515E D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 28434 0000515F 1F                      	pop	ds
 28435                                  
 28436                                  	; M048 - End
 28437                                  
 28438                                  ; Now check the type
 28439                                  
 28440                                  ;If TableLook
 28441                                  gl_2:
 28442                                  	; 20/05/2019 - Retro DOS v4.0
 28443 00005160 50                      	PUSH	AX
 28444                                  
 28445                                  	; MSDOS 3.3
 28446                                  	;mov	bx,CharType
 28447                                  	;; 09/08/2018
 28448                                  	;;xlat	byte [cs:bx]
 28449                                  	;cs	xlat	
 28450                                  	
 28451                                  	; MSDOS 6.0
 28452 00005161 E81800                  	CALL	GetCharType	; returns type flags in AL
 28453                                  	
 28454                                  	;test	al,1	
 28455 00005164 A801                    	TEST	AL,FCHK 	; test for normal character
 28456 00005166 58                      	POP	AX
 28457 00005167 5B                      	POP	BX
 28458 00005168 C3                      	RETN
 28459                                  
 28460                                  ; This entry has character in AL and lookup table in BX
 28461                                  
 28462                                  	; MSDOS 6.0
 28463                                  ;	;entry GetLet3
 28464                                  GETLET3: ; 10/08/2018
 28465 00005169 53                      	PUSH	BX
 28466 0000516A EBDC                    	JMP	short gl_0
 28467                                  ;ELSE
 28468                                  ;
 28469                                  ;gl_2:
 28470                                  ;	POP	BX
 28471                                  ;	CMP	AL,"."
 28472                                  ;	retz
 28473                                  ;	CMP	AL,'"'
 28474                                  ;	retz
 28475                                  ;	CALL	PATHCHRCMP
 28476                                  ;	retz
 28477                                  ;	CMP	AL,"["
 28478                                  ;	retz
 28479                                  ;	CMP	AL,"]"
 28480                                  ;	retz
 28481                                  ;ENDIF
 28482                                  
 28483                                  ;---------------------------------------------------------------------
 28484                                  ;
 28485                                  ; DELIM - check if character is a delimiter
 28486                                  ;	Entry : AX = character to check
 28487                                  ;	Exit  : ZF set if character is not a delimiter
 28488                                  ;	Uses  : Flags
 28489                                  ;
 28490                                  ;--------------------------------------------------------------------
 28491                                  
 28492                                  	;entry	DELIM
 28493                                  DELIM:
 28494                                  ;IF TableLook
 28495                                  	; 20/05/2019 - Retro DOS v4.0
 28496 0000516C 50                      	PUSH	AX
 28497                                  
 28498                                  	; MSDOS 3.3
 28499                                  	;push	bx
 28500                                  	;mov	bx,CharType
 28501                                  	;;09/08/2018
 28502                                  	;;xlat	byte [cs:bx]
 28503                                  	;cs	xlat
 28504                                  	;pop	bx
 28505                                  
 28506                                  	; MSDOS 6.0
 28507 0000516D E80C00                  	CALL	GetCharType
 28508                                  	
 28509                                  	;test	al,2
 28510 00005170 A802                    	TEST	AL,FDELIM
 28511 00005172 58                      	POP	AX
 28512 00005173 C3                      	RETN
 28513                                  ;ELSE
 28514                                  ;	CMP	AL,":"
 28515                                  ;	retz
 28516                                  ;
 28517                                  ;	CMP	AL,"<"
 28518                                  ;	retz
 28519                                  ;	CMP	AL,"|"
 28520                                  ;	retz
 28521                                  ;	CMP	AL,">"
 28522                                  ;	retz
 28523                                  ;
 28524                                  ;	CMP	AL,"+"
 28525                                  ;	retz
 28526                                  ;	CMP	AL,"="
 28527                                  ;	retz
 28528                                  ;	CMP	AL,";"
 28529                                  ;	retz
 28530                                  ;	CMP	AL,","
 28531                                  ;	retz
 28532                                  ;ENDIF
 28533                                  
 28534                                  ;-------------------------------------------------------------------------
 28535                                  ;
 28536                                  ;  SPCHK - checks to see if a character is a space or equivalent
 28537                                  ;	Entry : AL = character to check
 28538                                  ;	Exit  : ZF set if character is a space
 28539                                  ;	Uses  : flags
 28540                                  ;
 28541                                  ;-------------------------------------------------------------------------
 28542                                  
 28543                                  	;entry SPCHK
 28544                                  SPCHK:
 28545                                  ;IF TableLook
 28546                                  	; 20/05/2019 - Retro DOS v4.0
 28547 00005174 50                      	PUSH	AX
 28548                                  
 28549                                  	; MSDOS 3.3
 28550                                  	;push	bx
 28551                                  	;mov	bx,CharType
 28552                                  	;; 09/08/2018
 28553                                  	;;xlat	byte [cs:bx]
 28554                                  	;cs	xlat
 28555                                  	;pop	bx
 28556                                  
 28557                                  	; MSDOS 6.0
 28558 00005175 E80400                  	CALL	GetCharType
 28559                                  	
 28560                                  	;test	al,4
 28561 00005178 A804                    	TEST	AL,FSPCHK
 28562 0000517A 58                      	POP	AX
 28563 0000517B C3                      	RETN
 28564                                  ;ELSE
 28565                                  ;	CMP	AL,9		; Filter out tabs too
 28566                                  ;	retz
 28567                                  ;; WARNING! " " MUST be the last compare
 28568                                  ;	CMP	AL," "
 28569                                  ;	return
 28570                                  ;ENDIF
 28571                                  
 28572                                  ;-------------------------------------------------------------------------
 28573                                  ;
 28574                                  ;  GetCharType - return flag bits indicating character type
 28575                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 28576                                  ;	defined above at label CharType.
 28577                                  ;
 28578                                  ;	Entry : AL = character to return type flags for
 28579                                  ;	Exit  : AL = type flags
 28580                                  ;	Uses  : AL, flags
 28581                                  ;
 28582                                  ;-------------------------------------------------------------------------
 28583                                  
 28584                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28585                                  
 28586                                  	; 20/05/2019 - Retro DOS v4.0
 28587                                  	; MSDOS 6.0
 28588                                  GetCharType:
 28589                                  	;cmp	al,7Eh
 28590 0000517C 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 28591 0000517E 7316                    	jae	short gct_90		; return standard value
 28592                                  
 28593 00005180 53                      	push	bx
 28594 00005181 BB[0451]                	mov	bx,CharType		; load lookup table
 28595 00005184 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 28596                                  	;xlat	cs:[bx] 		; get flags
 28597 00005186 2ED7                    	cs	xlat	
 28598 00005188 5B                      	pop	bx
 28599                                  
 28600                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 28601                                  ; we have to shift the flags down to the low nibble
 28602                                  
 28603 00005189 7308                    	jnc	short gct_80		; carry clear, no shift needed
 28604                                  
 28605 0000518B D0E8                    	shr	al,1			; we want high nibble, shift it down
 28606 0000518D D0E8                    	shr	al,1
 28607 0000518F D0E8                    	shr	al,1
 28608 00005191 D0E8                    	shr	al,1
 28609                                  gct_80:
 28610 00005193 240F                    	and	al,0Fh			; clear the unused nibble
 28611 00005195 C3                      	retn
 28612                                  gct_90:
 28613 00005196 B00F                    	mov	al,0Fh			; set all flags
 28614 00005198 C3                      	retn
 28615                                  
 28616                                  ;----------------------------------------------------------------------------
 28617                                  ;
 28618                                  ; Procedure : PATHCHRCMP
 28619                                  ;
 28620                                  ;----------------------------------------------------------------------------
 28621                                  
 28622                                  PATHCHRCMP:
 28623 00005199 3C2F                    	CMP	AL,'/'
 28624 0000519B 7606                    	JBE	short PathRet
 28625 0000519D 3C5C                    	CMP	AL,'\'
 28626 0000519F C3                      	retn
 28627                                  GotFor:
 28628 000051A0 B05C                    	MOV	AL,'\'
 28629 000051A2 C3                      	retn
 28630                                  PathRet:
 28631 000051A3 74FB                    	JZ	short GotFor
 28632 000051A5 C3                      	retn
 28633                                  
 28634                                  ;============================================================================
 28635                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 28636                                  ;============================================================================
 28637                                  ; 30/07/2018 - Retro DOS v3.0
 28638                                  ; 29/04/2019 - Retro DOS v4.0
 28639                                  
 28640                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 28641                                  
 28642                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 28643                                  
 28644                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 28645                                  ;	NAME	IBMCTRLC
 28646                                  
 28647                                  ;**	Low level routines for detecting special characters on CON input,
 28648                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 28649                                  ;	process termination code, and the INT 0 divide overflow handler.
 28650                                  ;
 28651                                  ;	FATAL
 28652                                  ;	FATAL1
 28653                                  ;	reset_environment
 28654                                  ;	DSKSTATCHK
 28655                                  ;	SPOOLINT
 28656                                  ;	STATCHK
 28657                                  ;	CNTCHAND
 28658                                  ;	DIVOV
 28659                                  ;	CHARHARD
 28660                                  ;	HardErr
 28661                                  ;
 28662                                  ;	Revision history:
 28663                                  ;
 28664                                  ;	    AN000	version 4.0   Jan 1988
 28665                                  ;	    A002	PTM    -- dir >lpt3 hangs
 28666                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 28667                                  ;
 28668                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 28669                                  ;	      flags register. In order to return to user normally DOS used to
 28670                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 28671                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 28672                                  ;
 28673                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 28674                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 28675                                  ;	      charhard.
 28676                                  
 28677                                  ; 29/04/2019 - Retro DOS v4.0
 28678                                  	; MSDOS 6.0
 28679                                  ;		public	LowInt23Addr		
 28680                                  LowInt23Addr: ;	LABEL	DWORD
 28681 000051A6 [E710]0000              	DW	LowInt23, 0
 28682                                  
 28683                                  ;		public	LowInt24Addr
 28684                                  LowInt24Addr: ;	LABEL	DWORD
 28685 000051AA [FB10]0000              	DW	LowInt24, 0
 28686                                  
 28687                                  ;		public	LowInt28Addr
 28688                                  LowInt28Addr: ;	LABEL	DWORD
 28689 000051AE [0F11]0000              	DW	LowInt28, 0
 28690                                  
 28691                                  ;Break	<Checks for ^C in CON I/O>
 28692                                  
 28693                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28694                                  ; 05/05/2019 - Retro DOS v4.0
 28695                                  
 28696                                  ;---------------------------------------------------------------------------
 28697                                  ;
 28698                                  ; Procedure Name : DSKSTATCHK
 28699                                  ;
 28700                                  ; Check for ^C if only one level in
 28701                                  ;
 28702                                  ;---------------------------------------------------------------------------
 28703                                  
 28704                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 28705                                  
 28706                                  DSKSTATCHK:        
 28707                                  	;CMP	BYTE [INDOS],1
 28708 000051B2 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 28709                                  	;retnz			; Do NOTHING
 28710                                  	; 16/12/2022
 28711 000051B8 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 28712                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28713                                  	;jz	short _RET37 ; dskstatchk1
 28714                                  	;retn
 28715                                  ;_RET37:
 28716                                  ;dskstatchk1:
 28717 000051BA 51                      	PUSH    CX
 28718 000051BB 06                              PUSH    ES
 28719 000051BC 53                              PUSH    BX
 28720 000051BD 1E                              PUSH    DS
 28721 000051BE 56                              PUSH    SI
 28722                                          
 28723                                  	;PUSH	CS
 28724                                          ;POP	ES
 28725                                          ;PUSH	CS
 28726                                          ;POP	DS
 28727                                  
 28728 000051BF 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 28729 000051C1 8EC3                    	MOV	ES,BX		; for deviocall2
 28730 000051C3 8EDB                    	MOV	DS,BX
 28731                                  
 28732                                  	; 16/12/2022
 28733                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28734                                  
 28735                                  	; 05/05/2019
 28736                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 28737                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 28738                                  	;mov	word [ss:DSKSTST],0
 28739                                  
 28740                                  	; 16/12/2022
 28741                                  	; 25/06/2019
 28742 000051C5 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 28743 000051CA C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 28744 000051CF C706[9503]0000          	mov	word [DSKSTST],0
 28745                                  
 28746 000051D5 BB[9203]                        MOV     BX,DSKSTCALL
 28747                                  
 28748                                  	;LDS	SI,[ss:BCON]
 28749                                          ; 25/062019
 28750 000051D8 C536[3200]              	lds	si,[BCON]
 28751                                  
 28752                                  ; 16/12/2022
 28753                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28754                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 28755                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 28756                                  ;	mov	word [ss:DSKSTST],0
 28757                                  ;	mov	bx,DSKSTCALL
 28758                                  ;	lds	si,[ss:BCON]
 28759                                  
 28760 000051DC E866F5                  	CALL	DEVIOCALL2
 28761                                   	; 15/03/2018
 28762                                  	;;test	word [ss:DSKSTST],200h
 28763                                          ;TEST	WORD [SS:DSKSTST],STBUI
 28764                                  	; 05/05/2019
 28765 000051DF 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 28766 000051E5 7408                    	jz	short _GotCh		; No characters available
 28767                                  
 28768 000051E7 30C0                            XOR     AL,AL                   ; Set zero
 28769                                  RET36:
 28770 000051E9 5E                              POP     SI
 28771 000051EA 1F                              POP     DS
 28772 000051EB 5B                              POP     BX
 28773 000051EC 07                              POP     ES
 28774 000051ED 59                              POP     CX
 28775                                  	; 16/12/2022
 28776                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28777                                  _RET37:
 28778 000051EE C3                              RETN
 28779                                  
 28780                                  _GotCh:
 28781 000051EF 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 28782                                  
 28783 000051F3 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 28784 000051F5 75F2                            JNZ     SHORT RET36
 28785 000051F7 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 28786 000051FD 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 28787 00005203 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 28788                                  	; 09/09/2018
 28789 00005208 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 28790 0000520F 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 28791 00005216 E82CF5                  	CALL	DEVIOCALL2              ; Eat the ^C
 28792 00005219 5E                              POP     SI
 28793 0000521A 1F                              POP     DS
 28794 0000521B 5B                              POP     BX                      ; Clean stack
 28795 0000521C 07                              POP     ES
 28796 0000521D 59                              POP     CX
 28797 0000521E E9D000                          JMP	CNTCHAND ; 10/08/2018
 28798                                  
 28799                                  	; 05/05/2019
 28800                                  NOSTOP:
 28801                                  	; MSDOS 6.0
 28802 00005221 3C10                    	CMP	AL,"P"-"@"
 28803 00005223 7509                    	JNZ	short check_next
 28804                                  				    	; SS override
 28805 00005225 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 28806 0000522B 7406                    	JZ	short INCHKJ		; no
 28807 0000522D C3                      	retn
 28808                                  check_next:
 28809                                  	;IF	NOT TOGLPRN
 28810                                  	;CMP	AL,"N"-"@"
 28811                                  	;JZ	short INCHKJ
 28812                                  	;ENDIF
 28813                                  
 28814 0000522E 3C03                    	CMP	AL,"C"-"@"
 28815 00005230 7401                    	JZ	short INCHKJ
 28816                                  check_end:
 28817 00005232 C3                      	retn
 28818                                  
 28819                                  	; MSDOS 3.3
 28820                                          ;CMP     AL,"P"-"@"  ; cmp al,16	
 28821                                          ;JZ	short INCHKJ
 28822                                  
 28823                                  	; 15/04/2018
 28824                                          ;;IF	NOT TOGLPRN
 28825                                          ;CMP	AL,"N"-"@"
 28826                                          ;JZ	SHORT INCHKJ
 28827                                          ;;ENDIF
 28828                                  	
 28829                                  	;CMP     AL,"C"-"@"  ; cmp al,3	
 28830                                          ;JZ	short INCHKJ
 28831                                  	;RETN
 28832                                  
 28833                                  	; 08/09/2018
 28834                                  INCHKJ:	; 10/08/2018
 28835 00005233 E9A500                  	JMP	INCHK
 28836                                  
 28837                                  ;----------------------------------------------------------------------------
 28838                                  ;
 28839                                  ; Procedure Name : SpoolInt
 28840                                  ;
 28841                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 28842                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 28843                                  ; the middle of an INT 24.
 28844                                  ;
 28845                                  ;----------------------------------------------------------------------------
 28846                                  
 28847                                  SPOOLINT:
 28848 00005236 9C                              PUSHF
 28849                                  	; 15/03/2018
 28850 00005237 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 28851 0000523D 7423                            JZ      SHORT POPFRET
 28852 0000523F 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 28853 00005245 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 28854                                  
 28855                                  	; 30/07/2018
 28856                                  
 28857                                  	; Note that we are going to allow an external program to issue system 
 28858                                  	; calls at this time. We MUST preserve IdleInt across this.
 28859                                  
 28860 00005247 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 28861                                  
 28862                                  	; 05/05/2019 - Retro DOS v4.0
 28863                                   
 28864                                  	; MSDOS 6.0
 28865 0000524C 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 28866 00005252 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 28867 00005254 CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 28868 00005256 EB05                    	jmp	short spool_ret_addr
 28869                                  
 28870                                  do_low_int28:
 28871                                  	;call	far [ss:LowInt28Addr]
 28872 00005258 2EFF1E[AE51]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 28873                                  
 28874                                  spool_ret_addr:
 28875                                  	;INT	int_spooler		; INT 28h
 28876                                  
 28877 0000525D 368F06[5803]            	POP	WORD [SS:IDLEINT]
 28878                                  POPFRET:
 28879 00005262 9D                              POPF
 28880                                  _RET18:  
 28881 00005263 C3                      	RETN
 28882                                  
 28883                                  ; 05/05/2019 - Retro DOS v4.0
 28884                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 28885                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28886                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 28887                                  
 28888                                  ;----------------------------------------------------------------------------
 28889                                  ;
 28890                                  ; Procedure Name : STATCHK
 28891                                  ;
 28892                                  ;----------------------------------------------------------------------------
 28893                                  
 28894                                  STATCHK:
 28895 00005264 E84BFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 28896                                                                          ; input redirection
 28897 00005267 53                              PUSH    BX
 28898 00005268 31DB                            XOR     BX,BX
 28899 0000526A E88CE4                          CALL	GET_IO_SFT
 28900 0000526D 5B                              POP     BX
 28901 0000526E 72F3                            JC      SHORT _RET18
 28902                                  
 28903 00005270 B401                            MOV     AH,1
 28904 00005272 E8F9F2                          CALL	IOFUNC
 28905 00005275 74BF                            JZ      SHORT SPOOLINT
 28906 00005277 3C13                            CMP     AL,'S'-'@'
 28907 00005279 75A6                            JNZ     SHORT NOSTOP
 28908                                  
 28909                                  	; 05/05/2019
 28910                                  	; MSDOS 6.0			; SS override
 28911 0000527B 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 28912 00005281 75AF                    	JNZ	short check_end		; AN000; yes
 28913                                  
 28914 00005283 30E4                            XOR     AH,AH
 28915 00005285 E8E6F2                          CALL	IOFUNC                  ; Eat Cntrl-S
 28916 00005288 EB4A                            JMP     SHORT PAUSOSTRT
 28917                                  PRINTOFF:
 28918                                  PRINTON:
 28919 0000528A 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 28920                                  
 28921                                  	; 30/07/2018 - Retro DOS v3.0
 28922 0000528F 53                      	PUSH	BX
 28923 00005290 BB0400                  	MOV	BX,4
 28924 00005293 E863E4                  	call	GET_IO_SFT
 28925 00005296 5B                      	POP	BX
 28926 00005297 72CA                    	jc	short _RET18
 28927 00005299 06                      	PUSH	ES
 28928 0000529A 57                      	PUSH	DI
 28929 0000529B 1E                      	PUSH	DS
 28930 0000529C 07                      	POP	ES
 28931 0000529D 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 28932                                  	;test	word [es:di+5],800h
 28933                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 28934                                  	; 05/05/2019
 28935 0000529F 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 28936 000052A4 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 28937                                  
 28938                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 28939                                  					; See if allowed
 28940 000052A6 50                      	push	ax
 28941 000052A7 B82611                  	mov	ax,1126h
 28942 000052AA CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 28943                                  			; Return: CF set on error, AX = error code
 28944                                  			; STACK unchanged
 28945 000052AC 58                      	pop	ax
 28946                                  
 28947 000052AD 730F                    	JNC	short NORM_PR 		; Echo is OK
 28948                                  
 28949                                  					; SS override
 28950 000052AF 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 28951                                  
 28952                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 28953                                  
 28954 000052B5 50                      	push    ax
 28955 000052B6 B82411                  	mov     ax,1124h
 28956 000052B9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 28957                                  			; ES:DI -> SFT, SS = DOS CS
 28958 000052BB 58                      	pop     ax
 28959                                  
 28960 000052BC EB10                    	JMP	SHORT RETP6
 28961                                  NORM_PR:
 28962 000052BE 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 28963 000052C4 7505                    	JNZ	short PRNOPN
 28964 000052C6 E800F4                  	call	DEV_CLOSE_SFT
 28965 000052C9 EB03                    	JMP	SHORT RETP6
 28966                                  PRNOPN:
 28967 000052CB E8F3F3                  	call	DEV_OPEN_SFT
 28968                                  RETP6:
 28969 000052CE 5F                      	POP	DI
 28970 000052CF 07                      	POP	ES
 28971                                  STATCHK_RETN:
 28972 000052D0 C3                              RETN
 28973                                  PAUSOLP:
 28974 000052D1 E862FF                          CALL    SPOOLINT
 28975                                  PAUSOSTRT:
 28976 000052D4 B401                            MOV     AH,1
 28977 000052D6 E895F2                          CALL	IOFUNC
 28978 000052D9 74F6                            JZ      SHORT PAUSOLP
 28979                                  INCHK:
 28980 000052DB 53                              PUSH    BX
 28981 000052DC 31DB                            XOR     BX,BX
 28982 000052DE E818E4                          CALL	GET_IO_SFT
 28983 000052E1 5B                              POP     BX
 28984 000052E2 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 28985 000052E4 30E4                            XOR     AH,AH
 28986 000052E6 E885F2                          CALL	IOFUNC
 28987                                  	; 30/07/2018
 28988                                  	; MSDOS 3.3
 28989                                          ;CMP	AL,'P'-'@' ;cmp al,16
 28990                                          ;JNZ	SHORT NOPRINT
 28991                                  
 28992                                  	;cmp	byte [SS:SCAN_FLAG],0
 28993                                  	;JZ	SHORT PRINTON	
 28994                                  	;mov	byte [ss:SCAN_FLAG],0
 28995                                  
 28996                                  	; 05/05/2019
 28997                                  	; MSDOS 6.0
 28998 000052E9 3C10                    	CMP	AL,"P"-"@"
 28999                                  	;;;;  7/14/86	ALT_Q key fix
 29000 000052EB 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 29001                                  ;NOPRINT:	
 29002                                  	;IF	NOT TOGLPRN
 29003                                  	;CMP	AL,"N"-"@"
 29004                                  	;JZ	short PRINTOFF
 29005                                  	;ENDIF
 29006 000052ED 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 29007                                  	;retnz
 29008 000052EF 75DF                    	jnz	short STATCHK_RETN
 29009                                  
 29010                                  	; !! NOTE: FALL THROUGH !!
 29011                                  
 29012                                  ;---------------------------------------------------------------------------
 29013                                  ;
 29014                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 29015                                  ;
 29016                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 29017                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 29018                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 29019                                  ; processing to continue; 2) the original interrupt return address to the code
 29020                                  ; that performed the function call in the first place. If the user CTRL-C
 29021                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 29022                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 29023                                  ; is simulated.
 29024                                  ;
 29025                                  ;---------------------------------------------------------------------------
 29026                                  
 29027                                  CNTCHAND:
 29028                                  	; MSDOS 6.0			; SS override
 29029                                  					; AN002; from RAWOUT
 29030                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 29031                                  	;JNZ	short around_deadlock 	; AN002;
 29032                                  
 29033                                  	; 05/05/2019 - Retro DOS v4.0
 29034 000052F1 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 29035 000052F7 7508                    	JNZ	short around_deadlock 	; AN002;
 29036                                  
 29037 000052F9 B003                            MOV     AL,3			; Display "^C"
 29038 000052FB E879C4                          CALL	BUFOUT
 29039 000052FE E814C3                          CALL	CRLF
 29040                                  around_deadlock:
 29041 00005301 16                              PUSH    SS
 29042 00005302 1F                              POP     DS
 29043 00005303 803E[5703]00                    CMP     BYTE [CONSWAP],0
 29044 00005308 7403                            JZ      SHORT NOSWAP
 29045 0000530A E856E0                          CALL	SWAPBACK
 29046                                  NOSWAP:
 29047 0000530D FA                      	CLI				; Prepare to play with stack
 29048 0000530E 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 29049 00005312 8B26[8405]              	MOV	SP,[USER_SP]
 29050 00005316 E87BB1                          CALL	restore_world       ; User registers now restored
 29051                                  
 29052                                  	; 30/07/2018 - Retro DOS v3.0 
 29053                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 29054                                          ; 14/03/2018 - Retro DOS v2.0
 29055                                  	;MOV	BYTE [CS:INDOS],0	
 29056                                          ;MOV	BYTE [CS:ERRORMODE],0
 29057                                          ;MOV	[CS:ConC_Spsave],SP
 29058                                  	;clc	;30/07/2018
 29059                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 29060                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 29061                                  			; Return: return via RETF 2 with CF set
 29062                                  			; DOS will abort program with errorlevel 0
 29063                                  			; else
 29064                                  			; interrupted DOS call continues
 29065                                  
 29066                                  	; 05/05/2019 - Retro DOS v4.0
 29067                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29068                                  
 29069                                  	; CS was used to address these variables. We have to use DOSDATA
 29070                                  	
 29071 00005319 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29072                                  			; (pop es, after 'call restore_world')	
 29073 0000531A 1E                      	push	ds
 29074                                  	;getdseg <ds>			; ds -> dosdata
 29075 0000531B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29076 00005320 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29077 00005325 C606[2003]00            	mov	byte [ERRORMODE],0
 29078 0000532A 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29079                                  	; User SP has changed because of push. Adjust for it
 29080 0000532E 8306[3203]02            	add	word [ConC_Spsave],2
 29081                                  
 29082 00005333 803E[1112]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29083 00005338 1F                       	pop	ds	; restore ds
 29084 00005339 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29085 0000533B F8                      	CLC				
 29086 0000533C CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29087 0000533E EB06                    	jmp	short ctrlc_ret_addr
 29088                                  
 29089                                  	; 05/05/2019
 29090                                  do_low_int23:
 29091 00005340 F8                      	clc
 29092 00005341 2EFF1E[A651]            	call	far [cs:LowInt23Addr]	
 29093                                  
 29094                                  	; 30/07/2018 
 29095                                  
 29096                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29097                                  
 29098                                  ; The user has returned to us. The circumstances we allow are:
 29099                                  ;
 29100                                  ;   IRET	We retry the operation by redispatching the system call
 29101                                  ;   CLC/RETF	POP the stack and retry
 29102                                  ;   ... 	Exit the current process with ^C exit
 29103                                  ;
 29104                                  ; User's may RETURN to us and leave interrupts on. 
 29105                                  ; Turn 'em off just to be sure
 29106                                  
 29107                                  ctrlc_ret_addr: ; 05/05/2019
 29108                                  
 29109 00005346 FA                      	CLI
 29110                                  
 29111                                  	; MSDOS 3.3 
 29112                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 29113                                  	;PUSHF				; and the flags (maybe new call)
 29114                                  	;POP	AX
 29115                                  
 29116                                  	; 05/05/2019
 29117                                  	; MSDOS 6.0
 29118                                  
 29119                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 29120                                  
 29121 00005347 50                      	push	ax
 29122 00005348 8CD8                    	mov	ax,ds
 29123                                  	;getdseg <ds>			; ds -> dosdata
 29124 0000534A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29125 0000534F A3[0A0D]                	mov	[TEMPSEG],ax
 29126 00005352 58                      	pop	ax
 29127 00005353 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 29128 00005356 9C                      	pushf				; and the flags (maybe new call)
 29129 00005357 58                      	pop	ax
 29130                                  
 29131                                  ; See if the input stack is identical to the output stack
 29132                                  
 29133                                  	; MSDOS 3.3
 29134                                  	;CMP	SP,[CS:ConC_Spsave]
 29135                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29136                                  
 29137                                  	; MSDOS 6.0
 29138 00005358 3B26[3203]              	CMP	SP,[ConC_Spsave]
 29139 0000535C 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29140                                  
 29141                                  ; Repeat the operation by redispatching the system call.
 29142                                  
 29143                                  ctrlc_repeat:
 29144                                  	; MSDOS 3.3
 29145                                  	;MOV	AX,[CS:USER_IN_AX]
 29146                                  	; 05/05/2019
 29147                                  	; MSDOS 6.0
 29148 0000535E A1[3A03]                	mov	ax,[USER_IN_AX]
 29149 00005361 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 29150                                  	; MSDOS 3.3 & MSDOS 6.0 
 29151                                  	;transfer COMMAND
 29152                                  COMMANDJ:
 29153 00005365 E9DFAF                  	JMP	COMMAND
 29154                                  
 29155                                  ; The current SP is NOT the same as the input SP. Presume that he 
 29156                                  ; RETF'd leaving some flags on the stack and examine the input
 29157                                  
 29158                                  ctrlc_try_new:
 29159 00005368 83C402                  	ADD	SP,2			; pop those flags
 29160                                  	;;test	ax,1
 29161                                  	;TEST	AX,f_Carry		; did he return with carry?
 29162 0000536B A801                    	test	al,f_Carry ; test al,1
 29163 0000536D 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 29164                                  
 29165                                  	; MSDOS 6.0
 29166 0000536F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 29167                                  
 29168                                  	; Well...  time to abort the user.  
 29169                                  	; Signal a ^C exit and use the EXIT system call..
 29170                                  
 29171                                  ctrlc_abort:
 29172                                  	; MSDOS 3.3
 29173                                          ;;MOV	AX,(EXIT SHL 8) + 0
 29174                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 29175                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 29176                                          ;transfer COMMAND	    ; give up by faking $EXIT
 29177                                  	;;JMP	SHORT COMMANDJ
 29178                                  	;JMP	COMMAND
 29179                                  
 29180                                  	; 05/05/2019 - Retro DOS v4.0
 29181                                  	; MSDOS 6.0
 29182 00005373 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 29183 00005376 1E                      	push	ds
 29184                                  	;getdseg <ds>			; ds -> dosdata
 29185 00005377 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 29186 0000537C C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 29187 00005381 1F                      	pop	ds
 29188                                  	;transfer COMMAND		; give up by faking $EXIT
 29189 00005382 EBE1                    	JMP	SHORT COMMANDJ
 29190                                  	;JMP	COMMAND
 29191                                  
 29192                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 29193                                  ;----------------------------------------------------------------------------
 29194                                  ;
 29195                                  ; Procedure Name : DIVOV
 29196                                  ;
 29197                                  ; Default handler for division overflow trap
 29198                                  ;
 29199                                  ;----------------------------------------------------------------------------
 29200                                  
 29201                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29202                                  DIVOV: 
 29203                                  	; 05/05/2019 - Retro DOS v4.0
 29204                                  	; 30/07/2018
 29205                                  	; 07/07/2018 - Retro DOS v3.0
 29206 00005384 BE[F109]                	mov	si,DIVMES
 29207 00005387 2E8B1E[040A]            	mov	bx,[cs:DivMesLen]
 29208                                  	;mov	ax,cs
 29209                                  	;mov	ss,ax
 29210                                  	; 05/05/2019
 29211                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 29212 0000538C 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 29213 00005391 BC[A007]                	mov     sp,AUXSTACK
 29214                                  	;call	RealDivOv ; MSDOS 3.3
 29215 00005394 E80200                  	call	_OUTMES ; MSDOS 6.0
 29216 00005397 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 29217                                  
 29218                                  ; 30/07/2018
 29219                                  
 29220                                  ; MSDOS 6.0
 29221                                  ;---------------------------------------------------------------------------
 29222                                  ;
 29223                                  ; Procedure Name : OutMes
 29224                                  ;
 29225                                  ;
 29226                                  ; OutMes: perform message output
 29227                                  ; Inputs:   SS:SI points to message
 29228                                  ;	    BX has message length
 29229                                  ; Outputs:  message to BCON
 29230                                  ;
 29231                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29232                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29233                                  ;NB. This procedure is called only from DIVOV. -SR
 29234                                  ;
 29235                                  ;---------------------------------------------------------------------------
 29236                                  
 29237                                  ;MSDOS 3.3
 29238                                  ;---------------------------------------------------------------------------
 29239                                  ; RealDivOv: perform actual divide overflow stuff.
 29240                                  ; Inputs:   none
 29241                                  ; Outputs:  message to BCON
 29242                                  ;---------------------------------------------------------------------------
 29243                                  
 29244                                  	; 05/05/2019 - Retro DOS v4.0
 29245                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 29246                                  
 29247                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29248                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 29249                                  
 29250                                  ;---------------------------------------------------------------------------
 29251                                  ;
 29252                                  ; Procedure Name : OutMes
 29253                                  ;
 29254                                  ; OutMes: perform message output
 29255                                  ; Inputs:   SS:SI points to message
 29256                                  ;	    BX has message length
 29257                                  ; Outputs:  message to BCON
 29258                                  ;
 29259                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29260                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29261                                  ;NB. This procedure is called only from DIVOV. -SR
 29262                                  ;
 29263                                  ;---------------------------------------------------------------------------
 29264                                  
 29265                                  	; 30/07/2018
 29266                                  	; MSDOS 6.0
 29267                                  _OUTMES:
 29268                                  	; MSDOS 3.3
 29269                                  ;RealDivOv:
 29270                                  	; 07/07/2018 - Retro DOS v3.0
 29271                                          ;Context ES
 29272 00005399 16                      	push	ss ; 05/05/2019
 29273                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 29274 0000539A 07                      	POP	ES
 29275                                          ;Context DS
 29276 0000539B 16                      	push	ss ; 05/05/2019	
 29277                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 29278 0000539C 1F                      	POP	DS
 29279 0000539D C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 29280 000053A2 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 29281 000053A7 C706[9503]0000                  MOV     WORD [DSKSTST],0
 29282                                  	; BX = [DivMesLen] = 19
 29283 000053AD 891E[A403]                      MOV     [DSKSTCNT],BX
 29284 000053B1 BB[9203]                        MOV     BX,DSKSTCALL
 29285 000053B4 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 29286                                  	; 08/09/2018
 29287                                  	;mov	[DEVIOBUF_PTR],si
 29288                                  	; MSDOS 6.0
 29289                                  					; CS is used for string, fill in 
 29290                                  					; segment address 
 29291 000053B8 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 29292                                  
 29293 000053BC C536[3200]                      LDS     SI,[BCON]
 29294 000053C0 E882F3                          CALL	DEVIOCALL2
 29295                                  
 29296                                  	;; 14/03/2018
 29297                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 29298                                  	;; 08/09/2018
 29299                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 29300                                          ;MOV	WORD [CS:DSKSTCNT],1
 29301                                          
 29302                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29303                                  
 29304                                  	; ES still points to DOSDATA. ES is
 29305                                  					; not destroyed by deviocall2. So use
 29306                                  					; ES override.
 29307                                  
 29308 000053C3 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 29309 000053CA 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 29310                                  
 29311 000053D1 C3                      	RETN
 29312                                  
 29313                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 29314                                  ;---------------------------------------------------------------------------
 29315                                  ;
 29316                                  ; Procedure Name : CHARHARD
 29317                                  ;
 29318                                  ;
 29319                                  ; Character device error handler
 29320                                  ; Same function as HARDERR
 29321                                  ;
 29322                                  ;---------------------------------------------------------------------------
 29323                                  
 29324                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29325                                  CHARHARD:
 29326                                  	; 05/05/2019 - Retro DOS v4.0
 29327                                  	; 30/07/2018
 29328                                  	; 08/07/2018 - Retro DOS v3.0
 29329                                  
 29330                                  	; MSDOS 6.0
 29331                                  		   			; M024 - start
 29332 000053D2 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 29333                                  	;jne	short @f		; Y: allow fail
 29334 000053D8 750B                    	jne	short chard1
 29335                                  
 29336 000053DA 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 29337                                  
 29338 000053DD 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 29339 000053E3 7503                    	jnz	short ctrlp		; Y: 
 29340                                  ;@@:
 29341                                  chard1:					; M024 - end
 29342                                  	; MSDOS 6.0 & MSDOS 3.3
 29343                                  
 29344                                  ; Character device error handler
 29345                                  ; Same function as HARDERR
 29346                                  
 29347                                  	;or	ah,38h
 29348 000053E5 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 29349                                  ctrlp:			; SS override for Allowed and EXITHOLD
 29350 000053E8 368826[4B03]            	mov	[SS:ALLOWED],ah
 29351                                  
 29352                                  	; 15/03/2018
 29353 000053ED 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 29354 000053F2 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 29355 000053F7 56                              PUSH    SI
 29356                                  	;and	di,0FFh
 29357 000053F8 81E7FF00                        AND     DI,STECODE
 29358 000053FC 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 29359 000053FE E86400                          CALL    FATALC
 29360 00005401 5E                              POP     SI
 29361                                  	;return
 29362 00005402 C3                              RETN
 29363                                  
 29364                                  ;---------------------------------------------------------------------------
 29365                                  ;
 29366                                  ; Procedure Name : HardErr
 29367                                  ;
 29368                                  ; Hard disk error handler. Entry conditions:
 29369                                  ;	DS:BX = Original disk transfer address
 29370                                  ;	DX = Original logical sector number
 29371                                  ;	CX = Number of sectors to go (first one gave the error)
 29372                                  ;	AX = Hardware error code
 29373                                  ;	DI = Original sector transfer count	
 29374                                  ;	ES:BP = Base of drive parameters
 29375                                  ;	[READOP] = 0 for read, 1 for write
 29376                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 29377                                  ; Output:
 29378                                  ;	[FAILERR] will be set if user responded FAIL
 29379                                  ;
 29380                                  ;--------------------------------------------------------------------------
 29381                                  
 29382                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29383                                  HARDERR:
 29384                                  	; 05/05/2019 - Retro DOS v4.0
 29385                                  	; 30/07/2018
 29386                                  	; 08/07/2018 - Retro DOS v3.0
 29387 00005403 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 29388                                          ;and	di,0FFh
 29389 00005404 81E7FF00                	AND     DI,STECODE              ; And off status bits
 29390                                          ;CMP	DI,WRECODE		; Write Protect Error?
 29391                                  	;cmp	di,0
 29392 00005408 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 29393 0000540B 750A                            JNZ     short NOSETWRPERR
 29394 0000540D 50                              PUSH    AX
 29395                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29396                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29397                                          ;;MOV	AL,[ES:BP+0]
 29398                                  	; 15/12/2022
 29399 0000540E 268A4600                	mov	al,[ES:BP]
 29400                                          	; 15/03/2018
 29401 00005412 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 29402 00005416 58                              POP     AX
 29403                                  NOSETWRPERR:
 29404 00005417 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 29405 00005419 01C2                            ADD     DX,AX                   ; First sector number to retry
 29406 0000541B 52                              PUSH    DX
 29407                                  	; 08/07/2018
 29408                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 29409 0000541C 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 29410 00005420 5A                              POP     DX
 29411 00005421 01C3                            ADD     BX,AX                   ; First address for retry
 29412 00005423 30E4                            XOR     AH,AH                   ; Flag disk section in error
 29413                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 29414 00005425 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 29415 00005429 721A                            JB      SHORT ERRINT
 29416 0000542B FEC4                            INC     AH                      ; Flag for FAT
 29417                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 29418                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 29419 0000542D 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 29420 00005431 7308                    	JAE	short TESTDIR 		; No
 29421                                  		 ; Err in FAT must force recomp of freespace
 29422                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 29423                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 29424 00005433 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 29425 00005439 EB0A                    	JMP	SHORT ERRINT
 29426                                  TESTDIR:
 29427 0000543B FEC4                            INC     AH
 29428                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 29429 0000543D 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 29430 00005441 7202                            JB      SHORT ERRINT
 29431 00005443 FEC4                            INC     AH                      ; Must be in data area
 29432                                  ERRINT:
 29433 00005445 D0E4                            SHL     AH,1                    ; Make room for read/write bit
 29434 00005447 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 29435                                  
 29436                                  	; 15/08/2018
 29437                                  					; SS override for allowed and EXITHOLD
 29438 0000544C 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 29439                                  
 29440                                          ;entry   FATAL
 29441                                  FATAL:
 29442                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29443                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29444                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 29445                                  	; 15/12/2022
 29446 00005451 268A4600                	MOV	AL,[ES:BP]        
 29447                                  
 29448                                  	;entry   FATAL1
 29449                                  FATAL1:  
 29450                                  	; 15/03/2018      
 29451 00005455 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 29452 0000545A 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 29453                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 29454                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 29455 0000545F 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 29456 00005463 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 29457                                  
 29458                                  	; DI has the INT-24-style extended error. We now map the error code 
 29459                                  	; for this into the normalized get extended error set by using the 
 29460                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 29461                                  	; the device returned codes and leave all others beyond the look up 
 29462                                  	; table alone.
 29463                                  
 29464                                  	; 08/07/2018 - Retro DOS v3.0
 29465                                  FATALC:
 29466 00005465 E89701                  	call	SET_I24_EXTENDED_ERROR
 29467                                  	;cmp	di,0Ch
 29468 00005468 83FF0C                  	CMP	DI,error_I24_gen_failure
 29469 0000546B 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 29470 0000546D BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 29471                                  					;  Only come via GetExtendedError
 29472                                  ;** ----------------------------------------------------------------
 29473                                  ;
 29474                                  ; Entry point used by REDIRector on Network I 24 errors.
 29475                                  ;
 29476                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 29477                                  ;
 29478                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 29479                                  ;     EXITHOLD set for restore of ES:BP.
 29480                                  ; ------------------------------------------------------------------
 29481                                  	;entry	NET_I24_ENTRY
 29482                                  NET_I24_ENTRY:
 29483                                  GOT_RIGHT_CODE:
 29484 00005470 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 29485 00005476 7404                            JZ	SHORT NoSetFail
 29486 00005478 B003                    	MOV	AL,3
 29487 0000547A EB6C                    	JMP	short FailRet
 29488                                  NoSetFail:
 29489 0000547C 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 29490 00005481 16                              PUSH	SS
 29491 00005482 07                              POP	ES
 29492                                      
 29493                                  	; Wango!!! We may need to free some user state info... In 
 29494                                  	; particular, we may have locked down a JFN for a user and he may 
 29495                                  	; NEVER return to us. Thus,we need to free it here and then 
 29496                                  	; reallocate it when we come back.
 29497                                  
 29498 00005483 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 29499 00005489 740C                    	JZ	short _NoFree
 29500 0000548B 1E                      	push	ds
 29501 0000548C 56                      	push	si
 29502 0000548D 36C536[AE05]            	LDS	SI,[SS:PJFN]
 29503 00005492 C604FF                  	MOV	BYTE [SI],0FFH
 29504 00005495 5E                      	pop	si
 29505 00005496 1F                      	pop	ds
 29506                                  
 29507                                  _NoFree:
 29508 00005497 FA                      	CLI
 29509                                  					; Prepare to play with stack
 29510 00005498 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 29511 0000549D 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 29512                                  
 29513                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29514                                  
 29515                                  	;; Extended Open hooks
 29516                                  					; AN000;IFS.I24 error disabled
 29517                                  	;test	byte [ss:EXTOPEN_ON],2
 29518 000054A2 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 29519 000054A8 7404                    	JZ	short i24yes		; AN000;IFS.no
 29520                                  faili24:				; AN000;
 29521 000054AA B003                    	MOV	AL,3			; AN000;IFS.fake fail
 29522 000054AC EB29                    	JMP	short passi24 		; AN000;IFS.exit
 29523                                  i24yes: 				; AN000;
 29524                                  	;; Extended Open hooks
 29525                                  
 29526 000054AE 368E16[8605]                    MOV     SS,[SS:USER_SS]
 29527 000054B3 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 29528                                  
 29529                                  	;;int	24h	
 29530                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 29531                                  					; must preserve ES
 29532                                  	; 05/05/2019
 29533 000054B8 26803E[1112]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 29534 000054BE 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 29535 000054C0 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 29536                                  					; must preserve ES
 29537 000054C2 EB05                    	jmp	short criterr_ret_addr
 29538                                  
 29539                                  do_low_int24:
 29540                                  	; 05/05/2019
 29541                                  	; MSDOS 6.0
 29542 000054C4 2EFF1E[AA51]            	call    far [cs:LowInt24Addr]
 29543                                  criterr_ret_addr:
 29544 000054C9 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 29545 000054CE 268C16[8605]                    MOV     [ES:USER_SS],SS
 29546 000054D3 8CC5                            MOV     BP,ES
 29547 000054D5 8ED5                            MOV     SS,BP
 29548                                  passi24:
 29549 000054D7 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 29550 000054DC 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 29551 000054E1 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 29552 000054E7 FB                              STI
 29553                                  FailRet:
 29554 000054E8 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 29555                                  	
 29556                                  	; 08/07/2018
 29557                                  
 29558                                  	; Triage the user's reply.
 29559                                  
 29560 000054ED 3C01                    	CMP	AL,1
 29561 000054EF 723D                    	JB	short CheckIgnore	; 0 => ignore
 29562 000054F1 7445                    	JZ	short CheckRetry	; 1 => retry
 29563 000054F3 3C03                    	CMP	AL,3			; 3 => fail
 29564 000054F5 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 29565                                  
 29566                                  	; The reply was fail. See if we are allowed to fail.
 29567                                  
 29568                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 29569                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 29570                                  	;test	byte [ss:ALLOWED],8
 29571 000054F7 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 29572 000054FD 7443                    	jz	short DoAbort	; No, do abort
 29573                                  DoFail:
 29574 000054FF B003                    	MOV	AL,3		; just in case...
 29575                                  				; AN000;EO. I24 error disabled
 29576                                  	; 05/05/2019
 29577                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 29578 00005501 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 29579 00005507 7505                    	jnz	short CleanUp 		; AN000;EO. no
 29580                                  	
 29581 00005509 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 29582                                  CleanUp:
 29583 0000550E 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 29584 00005514 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 29585                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29586                                  	;jnz	short CleanUp2
 29587                                  	;retn
 29588                                  	; 17/12/2022
 29589 0000551A 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 29590                                  CleanUp2:
 29591 0000551C 1E                      	push	ds
 29592 0000551D 56                      	push	si
 29593 0000551E 50                      	push	ax
 29594 0000551F 36A1[AA05]              	MOV	AX,[ss:SFN]
 29595 00005523 36C536[AE05]            	LDS	SI,[ss:PJFN]
 29596 00005528 8804                    	MOV	[SI],AL
 29597 0000552A 58                      	pop	ax
 29598 0000552B 5E                      	pop	si
 29599 0000552C 1F                      	pop	ds
 29600                                  Cleanup_retn:
 29601 0000552D C3                      	retn
 29602                                  
 29603                                  	; The reply was IGNORE. See if we are allowed to ignore.
 29604                                  
 29605                                  CheckIgnore:
 29606                                  	;test	byte [ss:ALLOWED],20h
 29607 0000552E 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 29608 00005534 74C9                    	jz	short DoFail			 ; No, do fail
 29609 00005536 EBD6                    	jmp	short CleanUp
 29610                                  
 29611                                  	; The reply was RETRY. See if we are allowed to retry.
 29612                                  
 29613                                  CheckRetry:
 29614                                  	;test	byte [ss:ALLOWED],10h
 29615 00005538 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 29616 0000553E 74BF                    	jz	short DoFail			; No, do fail
 29617 00005540 EBCC                    	JMP	short CleanUp
 29618                                  
 29619                                  	; The reply was ABORT.
 29620                                  DoAbort:
 29621 00005542 16                      	push	ss
 29622 00005543 1F                      	pop	ds
 29623                                  
 29624 00005544 803E[5703]00            	CMP	byte [CONSWAP],0
 29625 00005549 7403                    	JZ	short NOSWAP2
 29626 0000554B E815DE                  	call	SWAPBACK
 29627                                  NOSWAP2:
 29628                                  	; See if we are to truly abort. If we are in the process of aborting, 
 29629                                  	; turn this abort into a fail.
 29630                                  
 29631                                  	;test	[fAborting],0FFh
 29632                                  	;jnz	short DoFail
 29633                                  
 29634 0000554E 803E[5903]00            	cmp	byte [fAborting],0
 29635 00005553 75AA                    	JNZ	short DoFail
 29636                                  
 29637                                  	; Set return code
 29638                                  
 29639 00005555 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 29640 0000555A 30C0                    	XOR	AL,AL
 29641                                  
 29642                                  	; we are truly aborting the process. Go restore information from 
 29643                                  	; the PDB as necessary.
 29644                                  
 29645 0000555C E9990D                  	jmp	exit_inner
 29646                                  
 29647                                  ;** --------------------------------------------------------------------------
 29648                                  ;
 29649                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 29650                                  ; different, then an old-style return is performed. If they are the same,
 29651                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 29652                                  ; the source of the terminate addresses.
 29653                                  ;
 29654                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 29655                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 29656                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 29657                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 29658                                  ; flag that will indicate that if any abort code is seen, we just continue the
 29659                                  ; operation. In essence, we dis-allow the abort response.
 29660                                  ;
 29661                                  ; output:   none.
 29662                                  ; ----------------------------------------------------------------------------
 29663                                  
 29664                                  	;entry	reset_environment
 29665                                  	
 29666                                  reset_environment:
 29667                                  	; 30/07/2018 - Retro DOS v3.0
 29668                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 29669                                  
 29670                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 29671                                  
 29672 0000555F 1E                      	PUSH	DS			; save PDB of process
 29673                                  
 29674                                  	; There are no critical sections in force. Although we may enter 
 29675                                  	; here with critical sections locked down, they are no longer 
 29676                                  	; relevant. We may safely free all allocated resources.
 29677                                  
 29678 00005560 B482                    	MOV	AH,82h
 29679                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 29680                                  	;int	2Ah 	
 29681 00005562 CD2A                    	INT	int_IBM
 29682                                  
 29683                                  					; SS override
 29684 00005564 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 29685                                  
 29686                                  					; DOS 4.00 doesn't need it
 29687                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 29688                                  					; Allow REDIR to clear some stuff
 29689                                  					; On process exit.
 29690 0000556A B82211                  	mov     ax, 1122h
 29691 0000556D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 29692                                  			; SS = DOS CS
 29693                                  	;mov	al,22h	
 29694 0000556F B022                    	MOV	AL,int_terminate
 29695 00005571 E890B9                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 29696                                  
 29697 00005574 59                      	POP	CX			; get ThisPDB
 29698 00005575 06                      	push	es
 29699 00005576 53                      	push	bx			; save return address
 29700                                  
 29701 00005577 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 29702 0000557C 8EDB                    	MOV	DS,BX
 29703 0000557E A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 29704                                  
 29705                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 29706                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 29707                                  	; is not Exit_keep_process
 29708                                  	
 29709 00005581 39D8                    	CMP	AX,BX
 29710 00005583 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 29711 00005585 39CB                    	CMP	BX,CX
 29712 00005587 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 29713 00005589 50                      	PUSH	AX			; save parent
 29714                                  
 29715                                  					; SS override
 29716                                  	;cmp	byte [SS:EXIT_TYPE],3
 29717 0000558A 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 29718 00005590 7406                    	JZ	short reset_to_parent 	; keeping this process
 29719                                  
 29720                                  	; We are truly removing a process. Free all allocation blocks 
 29721                                  	; belonging to this PDB
 29722                                  
 29723                                  	;invoke	arena_free_process
 29724 00005592 E89B0D                  	call	arena_free_process
 29725                                  
 29726                                  	; Kill off remainder of this process. Close file handles and signal 
 29727                                  	; to relevant network folks that this process is dead. Remember that 
 29728                                  	; CurrentPDB is STILL the current process!
 29729                                  
 29730                                  	;invoke	DOS_ABORT
 29731 00005595 E8B6D9                  	call	DOS_ABORT
 29732                                  
 29733                                  reset_to_parent:
 29734                                  					; SS override
 29735 00005598 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 29736                                  
 29737                                  reset_return:				; come here for normal return
 29738                                  	;Context DS			; DS is used to refer to DOSDATA  
 29739 0000559D 16                      	push	ss
 29740 0000559E 1F                      	pop	ds	
 29741                                  
 29742 0000559F B0FF                    	MOV	AL,-1
 29743                                  
 29744                                  	; make sure that everything is clean In this case ignore any errors, 
 29745                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 29746                                  
 29747                                  	;EnterCrit critDisk
 29748 000055A1 E8E4BD                  	call	ECritDisk
 29749                                  	;invoke	FLUSHBUF
 29750 000055A4 E8B605                  	call	FLUSHBUF
 29751                                  	;LeaveCrit critDisk
 29752 000055A7 E8F9BD                  	call	LCritDisk
 29753                                  
 29754                                  	; Decrement open ref. count if we had done a virtual open earlier.
 29755                                  
 29756 000055AA E879F7                  	call	CHECK_VIRT_OPEN
 29757 000055AD FA                      	CLI
 29758 000055AE C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 29759 000055B3 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 29760 000055B8 C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 29761 000055BD 8F06[8005]              	POP	WORD [EXITHOLD]
 29762 000055C1 8F06[8205]              	POP	WORD [EXITHOLD+2]
 29763                                  
 29764                                  	; Snake into multitasking... Get stack from CurrentPDB person
 29765                                  
 29766 000055C5 8E1E[3003]              	MOV	DS,[CurrentPDB]
 29767 000055C9 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 29768 000055CD 8B262E00                	MOV	SP,[PDB.USER_STACK]
 29769                                  
 29770 000055D1 E8C0AE                  	call	restore_world
 29771                                  
 29772                                  	; 05/05/2019
 29773 000055D4 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 29774                                  
 29775                                  	; MSDOS 6.0
 29776 000055D5 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 29777 000055D6 8CD8                    	mov	ax,ds			; and not on stack.
 29778                                  	;getdseg <ds>			; ds -> dosdata
 29779 000055D8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 29780 000055DD A3[0A0D]                	mov	[TEMPSEG],ax
 29781 000055E0 58                      	pop	ax
 29782                                  					; set up ds to DOSDATA
 29783                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 29784 000055E1 A3[8405]                	mov	[USER_SP],ax
 29785                                  
 29786 000055E4 58                      	POP	AX			; suck off CS:IP of interrupt...
 29787 000055E5 58                      	POP	AX
 29788 000055E6 58                      	POP	AX
 29789                                  
 29790                                  ; M011 : BEGIN
 29791                                  
 29792                                  	; MSDOS 3.3
 29793                                  ;	MOV	AX,0F202h	; STI
 29794                                  
 29795                                  	; MSDOS 6.0
 29796 000055E7 9F                      	LAHF
 29797 000055E8 86E0                    	XCHG	AH,AL
 29798 000055EA 2402                    	AND	AL,2
 29799 000055EC B4F2                    	MOV	AH,0F2h
 29800                                  
 29801                                  ; M011 : END
 29802                                  
 29803                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29804 000055EE 50                      	PUSH	AX
 29805                                   
 29806                                  	;PUSH	word [CS:EXITHOLD+2]
 29807                                  	;PUSH	word [CS:EXITHOLD]
 29808                                  	
 29809                                  	; MSDOS 6.0
 29810 000055EF FF36[8205]              	PUSH	word [EXITHOLD+2]
 29811 000055F3 FF36[8005]              	PUSH	word [EXITHOLD]
 29812                                  
 29813                                  	;MOV	AX,[CS:USER_SP]
 29814                                  
 29815                                  	; MSDOS 6.0
 29816 000055F7 A1[8405]                	MOV	AX,[USER_SP]
 29817 000055FA 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 29818                                  
 29819 000055FE CF                      	IRET			; Long return back to user terminate address
 29820                                  
 29821                                  ;---------------------------------------------------------------------------
 29822                                  ;
 29823                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 29824                                  ;
 29825                                  ; This routine handles extended error codes.
 29826                                  ; Input : DI = error code from device
 29827                                  ; Output: All EXTERR fields are set
 29828                                  ;
 29829                                  ;--------------------------------------------------------------------------
 29830                                  
 29831                                  SET_I24_EXTENDED_ERROR:
 29832 000055FF 50                      	PUSH	AX
 29833                                  					; ErrMap24End is in DOSDATA
 29834 00005600 B8[BB0E]                	MOV	AX,ErrMap24End
 29835 00005603 2D[AB0E]                	SUB	AX,ErrMap24
 29836                                  					; Change to dosdata to access 
 29837                                  					; ErrMap24 and EXTERR -SR
 29838                                  	; 05/05/2019 - Retro DOS v4.0
 29839                                  	
 29840                                  	; MSDOS 6.0
 29841 00005606 1E                      	push	ds
 29842                                  	;getdseg <ds>			; ds ->dosdata
 29843 00005607 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29844                                  
 29845                                  	; AX is the index of the first unavailable error. Do not translate 
 29846                                  	; if greater or equal to AX.
 29847                                  
 29848 0000560C 39C7                    	CMP	DI,AX
 29849 0000560E 89F8                    	MOV	AX,DI
 29850 00005610 7306                    	JAE	short NoTrans
 29851                                  
 29852                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 29853 00005612 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 29854 00005616 30E4                    	XOR	AH,AH
 29855                                  NoTrans:
 29856                                  	;MOV	[CS:EXTERR],AX
 29857 00005618 A3[2403]                	mov	[EXTERR],AX
 29858 0000561B 1F                      	pop	ds
 29859                                  	;assume	ds:nothing
 29860 0000561C 58                      	POP	AX
 29861                                  
 29862                                  	; Now Extended error is set correctly. Translate it to get correct 
 29863                                  	; error locus class and recommended action.
 29864                                  
 29865 0000561D 56                      	PUSH	SI
 29866                                  					; ERR_TABLE_24 is in DOSCODE 
 29867 0000561E BE[5B0E]                	MOV	SI,ERR_TABLE_24
 29868 00005621 E8A3B0                  	call	CAL_LK			; Set other extended error fields
 29869 00005624 5E                      	POP	SI
 29870 00005625 C3                      	retn
 29871                                  
 29872                                  ;============================================================================
 29873                                  ; FAT.ASM, MSDOS 6.0, 1991
 29874                                  ;============================================================================
 29875                                  ; 30/07/2018 - Retro DOS v3.0
 29876                                  ; 20/05/2019 - Retro DOS v4.0
 29877                                  
 29878                                  ;	TITLE	FAT - FAT maintenance routines
 29879                                  ;	NAME	FAT
 29880                                  
 29881                                  ;**	FAT.ASM
 29882                                  ;----------------------------------------------------------------------------
 29883                                  ;	Low level local device routines for performing disk change sequence,
 29884                                  ;	setting cluster validity, and manipulating the FAT
 29885                                  ;
 29886                                  ;	IsEof
 29887                                  ;	UNPACK
 29888                                  ;	PACK
 29889                                  ;	MAPCLUSTER
 29890                                  ;	FATREAD_SFT
 29891                                  ;	FATREAD_CDS
 29892                                  ;	FAT_operation
 29893                                  ;
 29894                                  ;	Revision history:
 29895                                  ;
 29896                                  ;	  AN000  version Jan. 1988
 29897                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 29898                                  ;
 29899                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 29900                                  ;	       from CL0FATENTRY rather than disk.
 29901                                  
 29902                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 29903                                  
 29904                                  ;Break <IsEOF - check the quantity in BX for EOF>
 29905                                  ;----------------------------------------------------------------------------
 29906                                  ;
 29907                                  ; Procedure Name : IsEOF
 29908                                  ;
 29909                                  ; IsEOF - check the fat value in BX for eof.
 29910                                  ;
 29911                                  ;   Inputs:	ES:BP point to DPB
 29912                                  ;		BX has fat value
 29913                                  ;   Outputs:	JAE eof
 29914                                  ;   Registers modified: none
 29915                                  ;
 29916                                  ;---------------------------------------------------------------------------
 29917                                  
 29918                                  IsEOF:
 29919                                  	;cmp	word [es:bp+0Dh],0FF6h
 29920 00005626 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 29921 0000562C 730B                    	JAE	short EOF16			; yes, check for eof there
 29922                                  
 29923                                  ;J.K. 8/27/86
 29924                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 29925                                  ;of any media that has "F0"(Other) as a MediaByte.
 29926                                  ;Hopely, this does not create any side effect for those who may use any value
 29927                                  ;other than "FF8-FFF" as an EOF for their own file.
 29928                                  
 29929 0000562E 81FBF00F                	cmp	bx,0FF0h
 29930 00005632 7404                    	je	short IsEOF_other
 29931                                  
 29932 00005634 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 29933                                  IsEOF_other:
 29934 00005638 C3                      	retn
 29935                                  EOF16:
 29936 00005639 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 29937 0000563C C3                      	retn
 29938                                  
 29939                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 29940                                  
 29941                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 29942                                  ;---------------------------------------------------------------------------
 29943                                  ;
 29944                                  ; Procedur Name : UNPACK
 29945                                  ;
 29946                                  ; Inputs:
 29947                                  ;	BX = Cluster number (may be full 16-bit quantity)
 29948                                  ;	ES:BP = Base of drive parameters
 29949                                  ; Outputs:
 29950                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 29951                                  ;	Zero set means DI=0 (free cluster)
 29952                                  ;	Carry set means error (currently user FAILed to I 24)
 29953                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 29954                                  ;
 29955                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 29956                                  ;
 29957                                  ;----------------------------------------------------------------------------
 29958                                  	
 29959                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29960                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 29961                                  
 29962                                  	; 20/05/2019 - Retro DOS v4.0
 29963                                  UNPACK:
 29964                                  	; MSDOS 6.0			; M014 - Start
 29965 0000563D 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 29966 0000563F 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 29967 00005641 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 29968 00005645 09FF                    	or	di,di 			; return z if di=0
 29969 00005647 C3                      	retn				; done
 29970                                  up_cont:				; M014 - End
 29971                                  	; MSDOS 3.3 & MSDOS 6.0
 29972                                  	;cmp	bx,[es:bp+0Dh]
 29973 00005648 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 29974 0000564C 7726                    	JA	short HURTFAT
 29975 0000564E E8DC00                  	CALL	MAPCLUSTER
 29976 00005651 721E                    	jc	short _DoContext
 29977 00005653 8B3D                    	MOV	DI,[DI]
 29978 00005655 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 29979 00005657 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 29980 0000565B 81FEF60F                	CMP	SI,4096-10
 29981 0000565F 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 29982 00005661 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 29983 00005663 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 29984                                  High12:
 29985 00005665 D1EF                    	SHR	DI,1
 29986 00005667 D1EF                    	SHR	DI,1
 29987 00005669 D1EF                    	SHR	DI,1
 29988 0000566B D1EF                    	SHR	DI,1
 29989                                  Unpack12:
 29990 0000566D 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 29991                                  _DoContext:
 29992 00005671 16                      	PUSH	SS
 29993 00005672 1F                      	POP	DS
 29994 00005673 C3                      	retn
 29995                                  HURTFAT:
 29996                                  	;;mov	word [es:bp+1Eh],0FFFFh
 29997                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 29998 00005674 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 29999 0000567A 50                      	PUSH	AX
 30000 0000567B B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 30001                                  
 30002                                  ;hkn; SS override
 30003 0000567D 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 30004                                  ;
 30005                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 30006                                  ;
 30007 00005683 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 30008 00005686 E8C8FD                  	call	FATAL
 30009 00005689 3C03                    	CMP	AL,3
 30010 0000568B F8                      	CLC
 30011 0000568C 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 30012 0000568E F9                      	STC				; User said FAIL
 30013                                  OKU_RET:
 30014 0000568F 58                      	POP	AX
 30015                                  hurtfat_retn:
 30016 00005690 C3                      	retn
 30017                                  
 30018                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 30019                                  
 30020                                  ;Break	<PACK -- PACK FAT ENTRIES>
 30021                                  ;----------------------------------------------------------------------------
 30022                                  ;
 30023                                  ; Procedure Name : PACK
 30024                                  ;
 30025                                  ; Inputs:
 30026                                  ;	BX = Cluster number
 30027                                  ;	DX = Data
 30028                                  ;	ES:BP = Pointer to drive DPB
 30029                                  ; Outputs:
 30030                                  ;	The data is stored in the FAT at the given cluster.
 30031                                  ;	SI,DX,DI all destroyed
 30032                                  ;	Carry set means error (currently user FAILed to I 24)
 30033                                  ;	No other registers affected
 30034                                  ;
 30035                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 30036                                  ;
 30037                                  ;---------------------------------------------------------------------------
 30038                                  
 30039                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30040                                  	; 20/05/2019 - Retro DOS v4.0
 30041                                  PACK:
 30042                                  	; MSDOS 6.0			; M014 - start
 30043 00005691 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 30044 00005693 7505                    	jnz	short p_cont		; N: proceed with normal pack
 30045 00005695 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 30046 00005699 C3                      	retn				; done
 30047                                  p_cont:					; M014 - end
 30048                                  	; MSDOS 3.3 & MSDOS 6.0
 30049 0000569A E89000                  	CALL	MAPCLUSTER
 30050 0000569D 72D2                    	JC	short _DoContext
 30051 0000569F 8B35                    	MOV	SI,[DI]
 30052 000056A1 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 30053 000056A3 51                      	PUSH	CX			; move data to upper 12 bits
 30054 000056A4 B104                    	MOV	CL,4
 30055 000056A6 D3E2                    	SHL	DX,CL
 30056 000056A8 59                      	POP	CX
 30057 000056A9 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 30058 000056AC EB14                    	JMP	SHORT PACKIN
 30059                                  ALIGNED:
 30060                                  	;cmp	word [es:bp+0Dh],0FF6h
 30061 000056AE 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 30062 000056B4 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 30063 000056B6 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30064 000056BA 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30065 000056BE EB02                    	JMP	SHORT PACKIN		; MZ go store
 30066                                  Pack16:
 30067 000056C0 31F6                    	XOR	SI,SI			; MZ no original data
 30068                                  PACKIN:
 30069 000056C2 09D6                    	OR	SI,DX
 30070 000056C4 8935                    	MOV	[DI],SI
 30071                                  
 30072                                  ;hkn; SS override
 30073 000056C6 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30074                                  	; MSDOS 6.0
 30075 000056CB F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30076                                  					;LB. if already dirty		  ;AN000;
 30077 000056CF 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30078                                  	; 10/06/2019
 30079 000056D1 E89105                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30080                                  	
 30081                                  	;or	byte [si+5],40h
 30082 000056D4 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30083                                  yesdirty11:				;LB.				;AN000;
 30084                                  ;hkn; SS override
 30085 000056D8 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30086                                  ;hkn; SS is DOSDATA
 30087 000056DE 16                      	push	ss
 30088 000056DF 1F                      	pop	ds
 30089 000056E0 74AE                    	jz	short hurtfat_retn	; Carry clear
 30090 000056E2 50                      	PUSH	AX
 30091 000056E3 53                      	PUSH	BX
 30092 000056E4 51                      	PUSH	CX
 30093 000056E5 A1[8E05]                	MOV	AX,[CLUSSAVE]
 30094 000056E8 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30095                                  	;;add	si,16 ; MSDOS 3.3
 30096                                  	;add	si,20 ; MSDOS 6.0
 30097 000056EC 83C614                  	ADD	SI,BUFINSIZ
 30098 000056EF 8824                    	MOV	[SI],AH
 30099                                  ;hkn; SS is DOSDATA
 30100                                  	;Context DS
 30101 000056F1 16                      	push	ss
 30102 000056F2 1F                      	pop	ds
 30103                                  	
 30104 000056F3 50                      	PUSH	AX
 30105                                  	
 30106                                  	; MSDOS 6.0
 30107 000056F4 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 30108 000056F8 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 30109                                  
 30110                                  	; MSDOS 3.3 & MSDOS 6.0
 30111 000056FC 8B16[9005]              	MOV	DX,[CLUSSEC]
 30112 00005700 BE0100                  	MOV	SI,1
 30113 00005703 30C0                    	XOR	AL,AL
 30114 00005705 E85903                  	call	GETBUFFRB
 30115 00005708 58                      	POP	AX
 30116 00005709 721C                    	JC	short POPP_RET
 30117 0000570B C53E[E205]              	LDS	DI,[CURBUF]
 30118                                  	
 30119                                  	; MSDOS 6.0
 30120 0000570F F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 30121                                  					;LB. if already dirty		  ;AN000;
 30122 00005713 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 30123 00005715 E84D05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 30124                                  	
 30125                                  	;or	byte [di+5],40h
 30126 00005718 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 30127                                  yesdirty12:
 30128                                  	;;add	di,16
 30129                                  	;add	di,20 ; MSDOS 6.0
 30130 0000571C 83C714                  	ADD	DI,BUFINSIZ
 30131 0000571F 4F                      	DEC	DI
 30132                                  	;add	di,[es:bp+2]
 30133 00005720 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 30134 00005724 8805                    	MOV	[DI],AL
 30135 00005726 F8                      	CLC
 30136                                  POPP_RET:
 30137 00005727 16                      	PUSH	SS
 30138 00005728 1F                      	POP	DS
 30139 00005729 59                      	POP	CX
 30140 0000572A 5B                      	POP	BX
 30141 0000572B 58                      	POP	AX
 30142 0000572C C3                      	retn
 30143                                  
 30144                                  ; 31/07/2018 - Retro DOS v3.0
 30145                                  
 30146                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 30147                                  ;---------------------------------------------------------------------------
 30148                                  ;
 30149                                  ; Procedure Name : MAPCLUSTER
 30150                                  ;
 30151                                  ; Inputs:
 30152                                  ;	ES:BP Points to DPB
 30153                                  ;	BX Is cluster number
 30154                                  ; Function:
 30155                                  ;	Get a pointer to the cluster
 30156                                  ; Outputs:
 30157                                  ;	DS:DI Points to contents of FAT for given cluster
 30158                                  ;	DS:SI Points to start of buffer
 30159                                  ;	Zero Not set if cluster data is in high 12 bits of word
 30160                                  ;	Zero set if cluster data is in low 12 or 16 bits
 30161                                  ;	Carry set if failed.
 30162                                  ; SI is destroyed.
 30163                                  ;
 30164                                  ;---------------------------------------------------------------------------
 30165                                  
 30166                                  	; 20/05/2019 - Retro DOS v4.0
 30167                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 30168                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30169                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 30170                                  
 30171                                  MAPCLUSTER:
 30172                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 30173 0000572D C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 30174                                  	;SAVE	<AX,BX,CX,DX>
 30175 00005732 50                      	push	ax
 30176 00005733 53                      	push	bx
 30177 00005734 51                      	push	cx
 30178 00005735 52                      	push	dx
 30179 00005736 89D8                    	MOV	AX,BX			; AX = BX
 30180 00005738 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 30181 0000573E 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 30182 00005740 D1E8                    	SHR	AX,1			; AX = BX/2
 30183                                  Map16:	
 30184                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 30185 00005742 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 30186                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30187 00005744 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 30188 00005746 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 30189 00005748 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 30190                                  
 30191                                  ;IF FastDiv
 30192                                  ;
 30193                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 30194                                  ; case and apply a really fast algorithm to get the desired results
 30195                                  ;
 30196                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 30197                                  ; Fast method takes 39+20*4=119
 30198                                  ;
 30199                                  ; This saves a bunch.
 30200                                  
 30201 0000574C 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 30202 00005750 7510                    	jne	short _DoDiv		; 4  for no jump
 30203 00005752 89C2                    	MOV	DX,AX			; 2  get set for remainder
 30204 00005754 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 30205 00005758 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 30206                                  	; MDOS 3.3
 30207                                  	;shr	al,1	
 30208                                  	; MDOS 6.0
 30209 0000575A D1EF                    	shr	di,1			; 2
 30210 0000575C D0D8                    	rcr	al,1			; 2
 30211                                  	; MDOS 3.3 (& MSDOS 6.0)
 30212 0000575E 30E4                    	xor	ah,ah			; 3
 30213 00005760 EB04                    	jmp	short DivDone		; 16
 30214                                  _DoDiv:
 30215                                  ;ENDIF
 30216                                  	; MSDOS 3.3
 30217                                  	;xor	dx,dx
 30218                                  	; MSDOS 6.0
 30219 00005762 89FA                    	mov	dx,di			; 2
 30220                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 30221 00005764 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 30222                                  ;IF FastDiv
 30223                                  DivDone:
 30224                                  ;ENDIF
 30225                                  	;add	ax,[es:bp+6]
 30226 00005766 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 30227 0000576A 49                      	DEC	CX			; CX is sector size - 1
 30228                                  	;SAVE	<AX,DX,CX>
 30229 0000576B 50                      	push	ax
 30230 0000576C 52                      	push	dx
 30231 0000576D 51                      	push	cx
 30232 0000576E 89C2                    	MOV	DX,AX
 30233                                  
 30234                                  	; MSDOS 6.0
 30235 00005770 C706[0706]0000          	MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 30236                                  	; MDOS 3.3 (& MSDOS 6.0)
 30237 00005776 30C0                    	XOR	AL,AL
 30238 00005778 BE0100                  	MOV	SI,1
 30239                                  	;invoke	GETBUFFRB
 30240 0000577B E8E302                  	call	GETBUFFRB
 30241                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 30242 0000577E 59                      	pop	cx
 30243 0000577F 58                      	pop	ax
 30244 00005780 5A                      	pop	dx
 30245 00005781 7257                    	JC	short MAP_POP
 30246                                  
 30247 00005783 C536[E205]              	LDS	SI,[CURBUF]
 30248                                  	;;lea	di,[si+16]
 30249                                  	;lea	di,[si+20] ; MSDOS 6.0
 30250 00005787 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30251 0000578A 01C7                    	ADD	DI,AX
 30252 0000578C 39C8                    	CMP	AX,CX
 30253 0000578E 7537                    	JNZ	short MAPRET
 30254 00005790 8A05                    	MOV	AL,[DI]
 30255                                  	;Context DS		 	;hkn; SS is DOSDATA
 30256 00005792 16                      	push	ss
 30257 00005793 1F                      	pop	ds	
 30258 00005794 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 30259 00005798 A2[8E05]                	MOV	[CLUSSAVE],AL
 30260 0000579B 8916[9005]              	MOV	[CLUSSEC],DX
 30261                                  	; MSDOS 6.0
 30262 0000579F C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 30263 000057A5 42                      	INC	DX
 30264 000057A6 C706[0706]0000          	MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 30265                                  	; MDOS 3.3 (& MSDOS 6.0)
 30266 000057AC 30C0                    	XOR	AL,AL
 30267 000057AE BE0100                  	MOV	SI,1
 30268                                  	;invoke	GETBUFFRB
 30269 000057B1 E8AD02                  	call	GETBUFFRB
 30270 000057B4 7224                    	JC	short MAP_POP
 30271 000057B6 C536[E205]              	LDS	SI,[CURBUF]
 30272 000057BA 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30273 000057BD 8A05                    	MOV	AL,[DI]
 30274                                  	;Context DS			;hkn; SS is DOSDATA
 30275 000057BF 16                      	push	ss
 30276 000057C0 1F                      	pop	ds
 30277 000057C1 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 30278                                  
 30279                                  ;hkn; CLUSSAVE is in DOSDATA
 30280 000057C4 BF[8E05]                	MOV	DI,CLUSSAVE
 30281                                  MAPRET:
 30282                                  	;RESTORE <DX,CX,BX>
 30283 000057C7 5A                      	pop	dx
 30284 000057C8 59                      	pop	cx
 30285 000057C9 5B                      	pop	bx
 30286 000057CA 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 30287 000057CC 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 30288 000057D2 7302                    	JAE	short MapSet		; MZ no, set flags
 30289 000057D4 89D8                    	MOV	AX,BX
 30290                                  MapSet:
 30291 000057D6 A801                    	TEST	AL,1			; set zero flag if not on boundary
 30292                                  	;RESTORE <AX>
 30293 000057D8 58                      	pop	ax
 30294 000057D9 C3                      	retn
 30295                                  
 30296                                  MAP_POP:
 30297                                  	;RESTORE <DX,CX,BX,AX>
 30298 000057DA 5A                      	pop	dx
 30299 000057DB 59                      	pop	cx
 30300 000057DC 5B                      	pop	bx
 30301 000057DD 58                      	pop	ax
 30302                                  fatread_sft_retn: ; 17/12/2022
 30303 000057DE C3                      	retn
 30304                                  
 30305                                  ; 20/05/2019 - Retro DOS v4.0
 30306                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 30307                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30308                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 30309                                  
 30310                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 30311                                  ;----------------------------------------------------------------------------
 30312                                  ;
 30313                                  ; Procedure Name : FATREAD_SFT
 30314                                  ;
 30315                                  ; Inputs:
 30316                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 30317                                  ;		giving a NET SFT will produce system crashing results).
 30318                                  ;	DS DOSDATA
 30319                                  ; Function:
 30320                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 30321                                  ;	if disk changed.
 30322                                  ;	In other respects, same as FATREAD_CDS.
 30323                                  ;	(note ES:DI destroyed!)
 30324                                  ; Outputs:
 30325                                  ;	Carry set if error (currently user FAILed to I 24)
 30326                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 30327                                  ;	as far as invalidating curdir_ID is concerned.
 30328                                  ;	Since getting a true disk changed on this call is a screw up
 30329                                  ;	anyway, that's the way it goes.
 30330                                  ;
 30331                                  ;---------------------------------------------------------------------------
 30332                                  
 30333                                  FATREAD_SFT:
 30334 000057DF 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 30335                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30336                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30337                                  	; 15/12/2022
 30338 000057E3 268A4600                	mov	AL,[ES:BP]
 30339 000057E7 A2[7605]                	MOV	[THISDRV],AL
 30340 000057EA E88EAE                  	call	GOTDPB			;Set THISDPB
 30341                                  	;CALL	FAT_GOT_DPB
 30342                                  	; 17/12/2022
 30343 000057ED EB78                    	jmp	FAT_GOT_DPB
 30344                                  ;fatread_sft_retn:
 30345                                  	;retn
 30346                                  
 30347                                  ;----------------------------------------------------------------------------
 30348                                  ;
 30349                                  ; Procedure Name : FATREAD_CDS
 30350                                  ;
 30351                                  ; Inputs:
 30352                                  ;	DS:DOSDATA
 30353                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 30354                                  ;		giving a NET or NUL CDS will produce system crashing results).
 30355                                  ; Function:
 30356                                  ;	If disk may have been changed, media is determined and buffers are
 30357                                  ;	flagged invalid. If not, no action is taken.
 30358                                  ; Outputs:
 30359                                  ;	ES:BP = Drive parameter block
 30360                                  ;	THISDPB = ES:BP
 30361                                  ;	THISDRV set
 30362                                  ;	Carry set if error (currently user FAILed to I 24)
 30363                                  ; DS preserved , all other registers destroyed
 30364                                  ;
 30365                                  ;---------------------------------------------------------------------------
 30366                                  
 30367                                  	; 20/05/2019 - Retro DOS v4.0
 30368                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 30369                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30370                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 30371                                  
 30372                                  FATREAD_CDS:
 30373 000057EF 06                      	PUSH	ES
 30374 000057F0 57                      	PUSH	DI
 30375                                  	;les	bp,[es:di+45h]
 30376 000057F1 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 30377                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30378                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30379                                  	; 15/12/2022
 30380 000057F5 268A4600                	mov	AL,[ES:BP]
 30381 000057F9 A2[7605]                	MOV	[THISDRV],AL
 30382 000057FC E87CAE                  	call	GOTDPB			;Set THISDPB
 30383 000057FF E86500                  	CALL	FAT_GOT_DPB
 30384 00005802 5F                      	POP	DI			;Get back CDS pointer
 30385 00005803 07                      	POP	ES
 30386 00005804 72D8                    	jc	short fatread_sft_retn
 30387 00005806 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 30388                                  
 30389                                  ;	Media changed. We now need to find all CDS structures which use this
 30390                                  ;	DPB and invalidate their ID pointers.
 30391                                  
 30392                                  MED_CHANGE:
 30393 00005808 31C0                    	XOR	AX,AX
 30394 0000580A 48                      	DEC	AX			; AX = -1
 30395 0000580B 1E                      	PUSH	DS
 30396 0000580C 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 30397 00005810 30ED                    	XOR	CH,CH			; CX is number of structures
 30398                                  	;lds	si,[es:di+45h]
 30399 00005812 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 30400                                  
 30401                                  ;hkn; SS override
 30402                                  
 30403                                  ;	Find all CDSs with this DevPtr
 30404                                  ;
 30405                                  ;	(ax) = -1
 30406                                  ;	(ds:si) = DevPtr
 30407                                  
 30408 00005816 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 30409                                  frcd20: 
 30410                                  	;;test	word [es:di+43h],8000h
 30411                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 30412 0000581B 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 30413 00005820 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 30414                                  
 30415                                  	; MSDOS 3.3
 30416                                  	;push	es
 30417                                  	;push	di
 30418                                  	;les	di,[es:di+45h]
 30419                                  	;;les	di,[ES:DI+curdir.devptr]
 30420                                  	;call	POINTCOMP
 30421                                  	;pop	di
 30422                                  	;pop	es
 30423                                  	;jnz	short frcd25
 30424                                  
 30425                                  	; MSDOS 6.0
 30426 00005822 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 30427 00005826 7512                    	jne	short frcd25		; no match
 30428 00005828 8CDB                    	mov	bx,ds
 30429 0000582A 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 30430 0000582E 750A                    	jne	short frcd25		; CDS not for this drive
 30431                                  
 30432                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30433                                  	;test	[es:di+49h],ax
 30434 00005830 26854549                	test	[ES:DI+curdir.ID],AX
 30435 00005834 7404                    	JZ	short frcd25		; If root (0), leave root
 30436                                  	;mov	[es:di+49h],ax
 30437 00005836 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 30438                                  frcd25:	
 30439                                  	;;add	di,81  ; MSDOS 3.3
 30440                                  	;add	di,88  ; MSDOS 6.0	 
 30441 0000583A 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 30442 0000583D E2DC                    	LOOP	frcd20
 30443 0000583F 1F                      	POP	DS
 30444                                  NO_CHANGE:
 30445 00005840 C42E[8A05]              	LES	BP,[THISDPB]
 30446 00005844 F8                      	CLC
 30447 00005845 C3                      	retn
 30448                                  
 30449                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 30450                                  ;----------------------------------------------------------------------------
 30451                                  ;
 30452                                  ; Procedure Name : FAT_operation
 30453                                  ;
 30454                                  ;----------------------------------------------------------------------------
 30455                                  
 30456                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30457                                  
 30458                                  FAT_operation:
 30459                                  	; 31/07/2018 - Retro DOS v3.0
 30460                                  FATERR:
 30461                                  	;mov	word [es:bp+1Eh],-1
 30462                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 30463 00005846 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 30464                                  					; Err in FAT must force recomp of freespace
 30465                                  	;and	di,0FFh
 30466 0000584C 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 30467                                  	;mov	byte [ALLOWED],18h
 30468 00005850 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30469                                  	;mov	ah,1Ah
 30470 00005855 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 30471 00005857 A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 30472 0000585A E8F8FB                  	call	FATAL1
 30473 0000585D C42E[8A05]              	LES	BP,[THISDPB]
 30474 00005861 3C03                    	CMP	AL,3
 30475 00005863 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 30476 00005865 F9                      	STC				; User said FAIL
 30477 00005866 C3                      	retn
 30478                                  
 30479                                  FAT_GOT_DPB:
 30480                                  	;Context DS			;hkn; SS is DOSDATA
 30481 00005867 16                      	push	ss			
 30482 00005868 1F                      	pop	ds
 30483                                  	;mov	al,0Fh
 30484 00005869 B00F                    	MOV	AL,DMEDHL
 30485                                  	;mov	ah,[es:bp+1]
 30486 0000586B 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 30487 0000586F A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 30488 00005872 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 30489 00005877 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30490                                  	;;mov	al,[es:bp+16h]
 30491                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 30492 0000587D 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30493 00005881 A2[6703]                	MOV	[CALLMED],AL
 30494 00005884 06                      	PUSH	ES
 30495 00005885 1E                      	PUSH	DS
 30496                                  
 30497                                  ;hkn; DEVCALL is in DOSDATA
 30498 00005886 BB[5A03]                	MOV	BX,DEVCALL
 30499                                  	;;lds	si,[es:bp+12h]
 30500                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 30501 00005889 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 30502 0000588D 07                      	POP	ES			; ES:BX Points to call header
 30503 0000588E E8B4EE                  	call	DEVIOCALL2
 30504                                  	;Context DS		 	;hkn; SS is DOSDATA
 30505 00005891 16                      	push	ss
 30506 00005892 1F                      	pop	ds
 30507 00005893 07                      	POP	ES			; Restore ES:BP
 30508 00005894 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30509                                  	;test	di,8000h
 30510                                  	;jnz	short FATERR
 30511 00005898 09FF                    	or	di,di
 30512 0000589A 78AA                    	js	short FATERR		; have error
 30513 0000589C 30E4                    	XOR	AH,AH
 30514                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 30515                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 30516 0000589E 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 30517 000058A2 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 30518                                  ; See if we had changed volume id by creating one on the diskette
 30519 000058A5 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 30520 000058A9 7508                    	jnz	short CHECK_BYT
 30521 000058AB C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 30522 000058B0 E9A700                  	jmp	GOGETBPB		; Need to get device driver to read in
 30523                                  					; new volume label.
 30524                                  CHECK_BYT:
 30525 000058B3 0A26[6803]              	OR	AH,[CALLRBYT]
 30526                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30527                                  	;JMP	short NEWDSK
 30528                                  	; 17/12/2022
 30529 000058B7 7865                    	js	short NEWDSK
 30530                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30531                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30532                                  	;JMP	short NEWDSK
 30533                                  
 30534                                  CHECK_ZR:
 30535 000058B9 743C                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 30536 000058BB F8                      	CLC
 30537 000058BC C3                      	retn				; If Media not changed (NZ)
 30538                                  
 30539                                  DISK_CHNG_ERR:
 30540 000058BD 06                      	PUSH	ES
 30541 000058BE 55                      	PUSH	BP
 30542                                  	;;les	bp,[es:bp+12h]
 30543                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 30544 000058BF 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 30545                                  	;;test	word [es:bp+4],800h
 30546                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 30547 000058C3 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 30548 000058C8 5D                      	POP	BP
 30549 000058C9 07                      	POP	ES
 30550 000058CA 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 30551 000058CC 1E                      	PUSH	DS			; Save buffer pointer for ignore
 30552 000058CD 57                      	PUSH	DI
 30553 000058CE 16                      	push	ss			;hkn; SS is DOSDATA
 30554 000058CF 1F                      	pop	ds
 30555                                  	;mov	byte [ALLOWED],18h
 30556 000058D0 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30557 000058D5 06                      	PUSH	ES
 30558 000058D6 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 30559 000058DA 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 30560 000058DE 07                      	POP	ES
 30561 000058DF 893E[2803]              	MOV	[EXTERRPT],DI
 30562                                  	;mov	ax,0Fh
 30563 000058E3 B80F00                  	MOV	AX,error_I24_wrong_disk
 30564 000058E6 C606[7505]01            	MOV	byte [READOP],1		; Write
 30565                                  	;invoke	HARDERR
 30566 000058EB E815FB                  	call	HARDERR
 30567 000058EE 5F                      	POP	DI			; Get back buffer for ignore
 30568 000058EF 1F                      	POP	DS
 30569 000058F0 3C03                    	CMP	AL,3
 30570                                  FAIL_OPJ2:
 30571 000058F2 741D                    	JZ	short FAIL_OP
 30572 000058F4 E970FF                  	JMP	FAT_GOT_DPB		; Retry
 30573                                  
 30574                                  CHKBUFFDIRT:
 30575                                  	; 20/05/2019 - Retro DOS v4.0
 30576                                  
 30577                                  	; MSDOS 3.3
 30578                                  	;lds	di,[BUFFHEAD]
 30579                                  
 30580                                  	; MSDOS 6.0
 30581 000058F7 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 30582 000058FD 741F                    	je	short NEWDSK			; no, skip the check
 30583 000058FF E8F800                  	call	GETCURHEAD			; get pointer to first buffer
 30584                                  nbuffer:
 30585                                  	;cmp	al,[di+4]
 30586 00005902 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 30587 00005905 750E                    	jne	short lfnxt			; no, go for next buffer
 30588                                  	;test   byte [di+5],40h
 30589 00005907 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 30590 0000590B 7408                    	jz	short lfnxt			; no, go for next buffer
 30591                                  	;Context DS
 30592 0000590D 16                      	push	ss
 30593 0000590E 1F                      	pop	ds
 30594 0000590F F8                      	clc
 30595 00005910 C3                      	retn
 30596                                  
 30597                                  FAIL_OP:					; This label & code is here
 30598                                  	;Context DS				;  for reachability
 30599 00005911 16                      	push	ss
 30600 00005912 1F                      	pop	ds
 30601 00005913 F9                      	STC
 30602 00005914 C3                      	retn
 30603                                  
 30604                                  lfnxt:
 30605                                  	; 15/08/2018 - Retro DOS v3.0
 30606                                  	; MSDOS 3.3
 30607                                  	;lds	di,[di]
 30608                                  
 30609                                  	; 20/05/2019 - Retro DOS v4.0
 30610 00005915 8B3D                    	mov	di,[di]
 30611                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 30612                                  	
 30613                                  	; MSDOS 3.3
 30614                                  	;cmp	di,-1
 30615                                  	;jne	short nbuffer
 30616                                  	
 30617                                  	; MSDOS 6.0
 30618 00005917 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 30619 0000591C 75E4                    	jne	short nbuffer			; no, check this guy also
 30620                                  
 30621                                  ; If no dirty buffers, assume Media changed
 30622                                  NEWDSK:
 30623                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 30624                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30625 0000591E 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 30626                                  						;  recompute
 30627                                  	; MSDOS 3.3
 30628                                  	;call	SETVISIT
 30629                                  	; MSDOS 6.0
 30630 00005924 E8D300                  	call	 GETCURHEAD
 30631                                  nxbuffer:
 30632                                  	; MSDOS 3.3
 30633                                  	;or 	byte [di+5],20h
 30634                                  	; MSDOS 3.3 & MSDOS 6.0
 30635                                  	;cmp	[di+4],al
 30636 00005927 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 30637 0000592A 7510                    	jne	short lfnxt2
 30638                                  	;test	byte [di+5],40h
 30639 0000592C F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 30640 00005930 758B                    	jnz	short DISK_CHNG_ERR
 30641                                  	;mov	word [di+4],20FFh
 30642 00005932 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 30643 00005937 E8D200                  	call	SCANPLACE
 30644                                  	; MSDOS 6.0
 30645 0000593A EB02                    	jmp	short skpbuff
 30646                                  lfnxt2:
 30647 0000593C 8B3D                    	mov	di,[di]
 30648                                  	;mov	di,[di+BUFFINFO.buf_next]
 30649                                  skpbuff:
 30650                                  	; MSDOS 6.0
 30651 0000593E 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 30652 00005943 75E2                    	jne	short nxbuffer
 30653                                  
 30654 00005945 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 30655 0000594B 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 30656 0000594D 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 30657 00005952 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 30658 00005954 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 30659                                  ;lfnxt2:
 30660                                  	; MSDOS 3.3
 30661                                  	;call	SKIPVISIT
 30662                                  	;jnz	short nxbuffer
 30663                                  GOGETBPB:
 30664                                  	; MSDOS 3.3 & MSDOS 6.0
 30665                                  	;;lds	di,[es:bp+12h]
 30666                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 30667 0000595A 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 30668                                  	; 20/05/2019
 30669                                  	;test	word [di+4],2000h
 30670                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 30671 0000595E F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 30672 00005962 7510                    	JNZ	short GETFREEBUF
 30673                                  	;context DS	    		;hkn; SS is DOSDATA
 30674 00005964 16                      	push	ss
 30675 00005965 1F                      	pop	ds
 30676 00005966 BB0200                  	MOV	BX,2
 30677 00005969 E8D1FC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 30678                                  FAIL_OPJ:
 30679 0000596C 72A3                    	JC	short FAIL_OP
 30680 0000596E C53E[E205]              	LDS	DI,[CURBUF]
 30681 00005972 EB13                    	JMP	SHORT GOTGETBUF
 30682                                  
 30683                                  GETFREEBUF:
 30684 00005974 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 30685 00005975 55                      	PUSH	BP
 30686                                  	; MSDOS 3.3
 30687                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 30688                                  	; MSDOS 6.0
 30689 00005976 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 30690                                  ;hkn; SS override
 30691 00005978 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 30692 0000597D E87A00                  	call	GETCURHEAD		;LB.			  ;AN000;
 30693                                  	; MSDOS 3.3 & MSDOS 6.0
 30694 00005980 E84202                  	call	BUFWRITE
 30695 00005983 5D                      	POP	BP
 30696 00005984 07                      	POP	ES
 30697                                  	;JC	short FAIL_OPJ
 30698 00005985 728A                    	jc	short FAIL_OP
 30699                                  GOTGETBUF:
 30700                                  	;;add	di,16
 30701                                  	;add	di,20 ; MSDOS 6.0
 30702 00005987 83C714                  	ADD	DI,BUFINSIZ
 30703                                  
 30704                                  ;hkn; SS override
 30705 0000598A 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 30706                                  	;Context DS			;hkn; SS is DOSDATA
 30707 0000598F 16                      	push	ss
 30708 00005990 1F                      	pop	ds
 30709 00005991 893E[6803]              	MOV	[CALLXAD],DI
 30710                                  	;mov	al,16h
 30711 00005995 B016                    	MOV	AL,DBPBHL
 30712                                  	;mov	ah,[es:bp+1]
 30713 00005997 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 30714 0000599B A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 30715 0000599E C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 30716 000059A3 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30717                                  	;;mov	al,[es:bp+16h]
 30718                                  	;mov	al,[es:bp+17h]
 30719 000059A9 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30720 000059AD A2[6703]                	MOV	[CALLMED],AL
 30721 000059B0 06                      	PUSH	ES
 30722 000059B1 1E                      	PUSH	DS
 30723                                  	;;push	word [es:bp+14h]
 30724                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 30725 000059B2 26FF7615                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 30726                                  	;;push	word [es:bp+12h]
 30727                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 30728 000059B6 26FF7613                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 30729                                  
 30730                                  ;hkn; DEVCALL is in DOSDATA
 30731 000059BA BB[5A03]                	MOV	BX,DEVCALL
 30732 000059BD 5E                      	POP	SI
 30733 000059BE 1F                      	POP	DS			; DS:SI Points to device header
 30734 000059BF 07                      	POP	ES			; ES:BX Points to call header
 30735                                  	;invoke	DEVIOCALL2
 30736 000059C0 E882ED                  	call	DEVIOCALL2
 30737 000059C3 07                      	POP	ES			; Restore ES:BP
 30738                                  	;Context DS
 30739 000059C4 16                      	push	ss		 	;hkn; SS is DOSDATA
 30740 000059C5 1F                      	pop	ds
 30741 000059C6 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30742                                  	; MSDOS 3.3
 30743                                  	;test	di,8000h
 30744                                  	;jnz	short FATERRJ
 30745                                  	; MSDOS 6.0
 30746 000059CA 09FF                    	or	di,di
 30747 000059CC 7829                    	js	short FATERRJ 		; have error
 30748                                  	;;mov	al,[es:bp+16h]
 30749                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 30750 000059CE 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30751 000059D2 C536[6C03]              	LDS	SI,[CALLBPB]
 30752                                  	;;mov	word [es:bp+1Ch],0
 30753                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 30754 000059D6 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 30755                                  	;invoke	$SETDPB
 30756 000059DC E869B6                  	call	_$SETDPB
 30757                                  
 30758                                  ;hkn; SS override
 30759 000059DF 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 30760                                  	;mov	al,[es:bp+8]
 30761 000059E4 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 30762                                  
 30763                                  	; MSDOS 3.3
 30764                                  	;;mov	ah,[es:bp+0Fh]
 30765                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 30766                                  	;;mov	[DI-8],ax
 30767                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 30768                                  
 30769                                  	; MSDOS 6.0
 30770                                  	;mov	[di-0Ah],al
 30771 000059E8 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 30772                                  						;>32mb		  ;AN000;
 30773                                  	;mov	ax,[es:bp+0Fh]
 30774 000059EB 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 30775                                  	;mov	[di-9h],ax			  ;AC000;
 30776 000059EF 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 30777                                  					;>32mb Correct buffer info ;AC000;
 30778                                  	;Context DS			;hkn; SS is DOSDATA
 30779 000059F2 16                      	push	ss
 30780 000059F3 1F                      	pop	ds
 30781 000059F4 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 30782 000059F6 C3                      	retn
 30783                                  
 30784                                  FATERRJ: 
 30785 000059F7 E94CFE                  	JMP	FATERR
 30786                                  
 30787                                  ;============================================================================
 30788                                  ; STDBUF.ASM
 30789                                  ;============================================================================
 30790                                  ; Retro DOS v2.0 - 12/03/2018
 30791                                  
 30792                                  ;
 30793                                  ; Standard buffer management for MSDOS
 30794                                  ;
 30795                                  
 30796                                  ;.xlist
 30797                                  ;.xcref
 30798                                  ;INCLUDE STDSW.ASM
 30799                                  ;.cref
 30800                                  ;.list
 30801                                  
 30802                                  ;TITLE	STDBUF - MSDOS buffer management
 30803                                  ;NAME	STDBUF
 30804                                  
 30805                                  ;INCLUDE BUF.ASM
 30806                                  
 30807                                  ;============================================================================
 30808                                  ; BUF.ASM
 30809                                  ;============================================================================
 30810                                  ; 31/07/2018 - Retro DOS v3.0
 30811                                  ; Retro DOS v2.0 - 12/03/2018
 30812                                  ;
 30813                                  ; buffer management for MSDOS
 30814                                  ;
 30815                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 30816                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 30817                                  ;
 30818                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 30819                                  ;
 30820                                  ;SETVISIT:
 30821                                  ;	; 31/07/2018 - Retro DOS v3.0
 30822                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 30823                                  ;; Inputs:
 30824                                  ;;      None
 30825                                  ;; Function:
 30826                                  ;;      Set up a scan of I/O buffers
 30827                                  ;; Outputs:
 30828                                  ;;      All visit flags = 0
 30829                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 30830                                  ;;                    may cause a scan to stop in the middle leaving some
 30831                                  ;;                    visit flags set, and some not set.
 30832                                  ;;      DS:DI Points to [BUFFHEAD]
 30833                                  ;; No other registers altered
 30834                                  ;
 30835                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30836                                  ;	PUSH    AX
 30837                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 30838                                  ;	;mov	al,0DFh
 30839                                  ;	mov	al,~buf_visit
 30840                                  ;SETLOOP:
 30841                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 30842                                  ;	;and	[DI+5],al
 30843                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 30844                                  ;       LDS     DI,[DI]
 30845                                  ;       CMP     DI,-1
 30846                                  ;       JNZ     SHORT SETLOOP
 30847                                  ;       POP     AX ; 09/09/2018
 30848                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30849                                  ;SVISIT_RETN:
 30850                                  ;       RETN
 30851                                  ;
 30852                                  ;SKIPVISIT:
 30853                                  ;	; 31/07/2018 - Retro DOS v3.0
 30854                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 30855                                  ;
 30856                                  ;; Inputs:
 30857                                  ;;      DS:DI Points to a buffer
 30858                                  ;; Function:
 30859                                  ;;      Skip visited buffers
 30860                                  ;; Outputs:
 30861                                  ;;      DS:DI Points to next unvisited buffer
 30862                                  ;;      Zero is set if skip to LAST buffer
 30863                                  ;; No other registers altered
 30864                                  ;
 30865                                  ;       CMP     DI,-1
 30866                                  ;       ;retz
 30867                                  ;       JZ	SHORT SVISIT_RETN
 30868                                  ;
 30869                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 30870                                  ;       ;;;retnz
 30871                                  ;       ;;JNZ	SHORT SVISIT_RETN
 30872                                  ;
 30873                                  ;	;test	byte [di+5],20h
 30874                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 30875                                  ;	JNZ	short SKIPLOOP
 30876                                  ;	
 30877                                  ;	push	ax
 30878                                  ;	or	al,1
 30879                                  ;	pop	ax
 30880                                  ;	retn	
 30881                                  ;
 30882                                  ;SKIPLOOP:
 30883                                  ;	LDS     DI,[DI]
 30884                                  ;       JMP     SHORT SKIPVISIT
 30885                                  
 30886                                  ;============================================================================
 30887                                  ; BUF.ASM, MSDOS 6.0, 1991
 30888                                  ;============================================================================
 30889                                  ; 31/07/2018 - Retro DOS v3.0
 30890                                  ; 04/05/2019 - Retro DOS v4.0
 30891                                  
 30892                                  ;	TITLE	BUF - MSDOS buffer management
 30893                                  ;	NAME	BUF
 30894                                  
 30895                                  ;**	BUF.ASM - Low level routines for buffer cache management
 30896                                  ;
 30897                                  ;	GETCURHEAD
 30898                                  ;	ScanPlace
 30899                                  ;	PLACEBUF
 30900                                  ;	PLACEHEAD
 30901                                  ;	PointComp
 30902                                  ;	GETBUFFR
 30903                                  ;	GETBUFFRB
 30904                                  ;	FlushBuf
 30905                                  ;	BufWrite
 30906                                  ;	SET_RQ_SC_PARMS
 30907                                  ;
 30908                                  ;	Revision history:
 30909                                  ;
 30910                                  ;		AN000  version 4.00  Jan. 1988
 30911                                  ;		A004   PTM 3765 -- Disk reset failed
 30912                                  ;		M039 DB 10/17/90 - Disk write optimization
 30913                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 30914                                  
 30915                                  ;Break	<GETCURHEAD -- Get current buffer header>
 30916                                  ;----------------------------------------------------------------------------
 30917                                  ; Procedure Name : GetCurHead
 30918                                  ; Inputs:
 30919                                  ;	 No Inputs
 30920                                  ; Function:
 30921                                  ;	Returns the pointer to the first buffer in Queue
 30922                                  ;	and updates FIRST_BUFF_ADDR
 30923                                  ;       and invalidates LASTBUFFER (recency pointer)
 30924                                  ; Outputs:
 30925                                  ;	DS:DI = pointer to the first buffer in Queue
 30926                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 30927                                  ;       LASTBUFFER = -1
 30928                                  ; No other registers altered
 30929                                  ;----------------------------------------------------------------------------
 30930                                  
 30931                                  ; 04/05/2019 - Retro DOS v4.0
 30932                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 30933                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30934                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 30935                                  
 30936                                  GETCURHEAD:
 30937 000059FA 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 30938 000059FF 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 30939 00005A06 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 30940 00005A0B C3                      	retn
 30941                                  
 30942                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 30943                                  ;----------------------------------------------------------------------------
 30944                                  ; Procedure Name : ScanPlace
 30945                                  ; Inputs:
 30946                                  ;	Same as PLACEBUF
 30947                                  ; Function:
 30948                                  ;	Save scan location and call PLACEBUF
 30949                                  ; Outputs:
 30950                                  ;	DS:DI Points to saved scan location
 30951                                  ; All registers, except DS:DI, preserved.
 30952                                  ;----------------------------------------------------------------------------
 30953                                  ;M039: Rewritten to preserve registers.
 30954                                  
 30955                                  ;SCANPLACE:
 30956                                  ;	; 31/07/2018 - Retro DOS v3.0
 30957                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 30958                                  ;	push	es
 30959                                  ;	les	si,[di]
 30960                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 30961                                  ;	call	PLACEBUF
 30962                                  ;	push	es
 30963                                  ;	pop	ds
 30964                                  ;	mov	di,si
 30965                                  ;	pop	es
 30966                                  ;scanplace_retn:
 30967                                  ;	retn	
 30968                                  	
 30969                                  	; MSDOS 6.0
 30970                                  SCANPLACE:
 30971 00005A0C FF35                    	push	word [di]
 30972                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 30973 00005A0E E80200                  	call	PLACEBUF
 30974 00005A11 5F                      	pop	di
 30975 00005A12 C3                      	retn
 30976                                  
 30977                                  ;----------------------------------------------------------------------------
 30978                                  ; Procedure Name : PlaceBuf
 30979                                  ; Input:
 30980                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 30981                                  ; Function:
 30982                                  ;	Remove buffer from queue and re-insert it in proper place.
 30983                                  ; NO registers altered
 30984                                  ;----------------------------------------------------------------------------
 30985                                  
 30986                                  ;procedure PLACEBUF,NEAR
 30987                                  
 30988                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30989                                  	; 20/05/2019 - Retro DOS v4.0
 30990                                  PLACEBUF:
 30991                                  	; 31/07/2018 - Retro DOS v3.0
 30992                                  
 30993                                  	; MSDOS 6.0
 30994 00005A13 50                      	push	AX			;Save only regs we modify	;AN000;
 30995 00005A14 53                      	push	BX							;AN000;
 30996 00005A15 56                      	push	SI							;AN000;
 30997                                  	
 30998 00005A16 8B05                    	mov	ax,[di]
 30999                                  	;mov	ax,[di+BUFFINFO.buf_next]
 31000 00005A18 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 31001                                  	
 31002 00005A1D 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 31003 00005A1F 7420                    	je	short nret			;Yes, special case	;AN000;
 31004 00005A21 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 31005 00005A23 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 31006 00005A25 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 31007 00005A29 EB16                    	jmp	short nret 			;Continue with repositioning;AN000;
 31008                                  not_first:
 31009                                  	;mov	si,[di+2]
 31010 00005A2B 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 31011 00005A2E 8904                    	mov	[si],ax
 31012                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 31013 00005A30 96                      	xchg	si,ax
 31014                                  	;mov	[si+2],ax
 31015 00005A31 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 31016                                  	
 31017 00005A34 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 31018 00005A37 893C                    	mov	[si],di
 31019                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 31020 00005A39 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 31021 00005A3C 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 31022 00005A3F 891D                    	mov	[di],bx
 31023                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 31024                                  nret:									;AN000;
 31025 00005A41 5E                      	pop	SI							;AN000;
 31026 00005A42 5B                      	pop	BX							;AN000;
 31027 00005A43 58                      	pop	AX							;AN000;
 31028                                  									;AN000;
 31029                                  	;cmp	byte [di+4],0FFh
 31030 00005A44 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 31031 00005A48 7505                            jne	short pbx			; M039: -no, jump.
 31032 00005A4A 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 31033                                  pbx:	
 31034 00005A4F C3                      	retn								;AN000;
 31035                                  
 31036                                  	; 31/07/2018 - Retro DOS v3.0
 31037                                  
 31038                                  	; MSDOS 3.3
 31039                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31040                                  
 31041                                  ;PLACEBUF:
 31042                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31043                                  ;	
 31044                                  ;       CALL	save_world
 31045                                  ;       LES     CX,[DI]
 31046                                  ;       CMP     CX,-1           	; Buf is LAST?
 31047                                  ;       JZ      SHORT NRET		; Buffer already last
 31048                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 31049                                  ;       PUSH    DS
 31050                                  ;       POP     ES              	; Buf is ES:DI
 31051                                  ;	; 15/03/2018
 31052                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 31053                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 31054                                  ;       JNZ     SHORT BUFLOOP
 31055                                  ;       MOV     [SS:BUFFHEAD],CX
 31056                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 31057                                  ;       JMP     SHORT LOOKEND
 31058                                  ;BUFLOOP:
 31059                                  ;	; 31/07/2018
 31060                                  ;	mov	ax,ds
 31061                                  ;	mov	bx,si
 31062                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31063                                  ;       LDS     SI,[SI]
 31064                                  ;       CALL    POINTCOMP
 31065                                  ;       jnz	short BUFLOOP
 31066                                  ;	;
 31067                                  ;	mov	ds,ax
 31068                                  ;	mov	si,bx
 31069                                  ;	mov	[SI],cx
 31070                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 31071                                  ;	mov	[SI+2],bp
 31072                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 31073                                  ;LOOKEND:
 31074                                  ;	mov	ax,ds
 31075                                  ;	mov	bx,si
 31076                                  ;       LDS     SI,[SI]
 31077                                  ;       CMP     SI,-1
 31078                                  ;       jnz     short LOOKEND
 31079                                  ;GOTHEEND:
 31080                                  ;       mov	ds,ax
 31081                                  ;	mov	[BX],di
 31082                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 31083                                  ;       MOV     WORD [ES:DI],-1
 31084                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 31085                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 31086                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 31087                                  ;NRET:
 31088                                  ;       CALL	restore_world
 31089                                  ;	
 31090                                  ;	;cmp	byte [di+4],-1
 31091                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 31092                                  ;	jnz     short scanplace_retn
 31093                                  ;	call    PLACEHEAD
 31094                                  ;	retn
 31095                                  
 31096                                  ;EndProc PLACEBUF
 31097                                  
 31098                                  ;M039 - Removed PLACEHEAD.
 31099                                  ;----------------------------------------------------------------------------
 31100                                  ; places buffer at head
 31101                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 31102                                  ;	ONE IN THE LIST!!!!!!!
 31103                                  ; BUGBUG ---- this routine can be removed because it has only
 31104                                  ; BUGBUG ---- one instruction. This routine is called from
 31105                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 31106                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 31107                                  ; BUGBUG ---- But kept as it is for modularity
 31108                                  ;----------------------------------------------------------------------------
 31109                                  ;procedure   PLACEHEAD,NEAR
 31110                                  ;	mov	word ptr [BufferQueue], di
 31111                                  ;	ret
 31112                                  ;EndProc PLACEHEAD
 31113                                  ;M039
 31114                                  
 31115                                  ;----------------------------------------------------------------------------
 31116                                  ; Procedure Name : PLACEHEAD
 31117                                  ;
 31118                                  ; SAME AS PLACEBUF except places buffer at head
 31119                                  ;----------------------------------------------------------------------------
 31120                                  
 31121                                  	; MSDOS 3.3 (Retro DOS v3.0)
 31122                                  	; 05/09/2018
 31123                                  	; MSDOS 2.11 (Retro DOS v2.0)
 31124                                  ;PLACEHEAD:
 31125                                  ;	; 31/07/2018 - Retro DOS v3.0
 31126                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 31127                                  ;
 31128                                  ;       CALL	save_world
 31129                                  ;       PUSH	DS
 31130                                  ;       POP	ES
 31131                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31132                                  ;       LDS     SI,[SS:BUFFHEAD]
 31133                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 31134                                  ;	CALL    POINTCOMP
 31135                                  ;       JZ      SHORT GOTHEEND2
 31136                                  ;	MOV	[ES:DI],SI
 31137                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 31138                                  ;       MOV	[ES:DI+2],DS
 31139                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 31140                                  ;       MOV	[SS:BUFFHEAD],DI
 31141                                  ;       MOV	[SS:BUFFHEAD+2],ES
 31142                                  ;LOOKEND2:
 31143                                  ;       mov	ax,ds
 31144                                  ;	mov	bx,si
 31145                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31146                                  ;       LDS     SI,[SI]
 31147                                  ;       CALL    POINTCOMP
 31148                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 31149                                  ;       mov	ds,ax
 31150                                  ;	mov	word [bx],-1
 31151                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 31152                                  ;	mov	word [bx+2],-1
 31153                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 31154                                  ;GOTHEEND2:
 31155                                  ;      	call	restore_world
 31156                                  ;placehead_retn:
 31157                                  ;	retn
 31158                                  
 31159                                  ; 20/05/2019 - Retro DOS v4.0
 31160                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 31161                                  
 31162                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 31163                                  ;----------------------------------------------------------------------------
 31164                                  ;
 31165                                  ; Procedure Name : PointComp
 31166                                  ; Inputs:
 31167                                  ;         DS:SI & ES:DI
 31168                                  ; Function:
 31169                                  ;          Checks for ((SI==DI) && (ES==DS))
 31170                                  ;	   Assumes that pointers are normalized for the
 31171                                  ;	   same segment
 31172                                  ;
 31173                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 31174                                  ; DO NOT USE FOR < or >
 31175                                  ; No Registers altered
 31176                                  ;
 31177                                  ;----------------------------------------------------------------------------
 31178                                  
 31179                                  POINTCOMP:
 31180                                  	; 31/07/2018 - Retro DOS v3.0
 31181                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 31182 00005A50 39FE                    	CMP	SI,DI
 31183 00005A52 750A                    	jnz	short _ret_label	; return if nz
 31184                                  	;jnz	short placehead_retn 
 31185 00005A54 51                      	PUSH	CX
 31186 00005A55 52                      	PUSH	DX
 31187 00005A56 8CD9                    	MOV	CX,DS
 31188 00005A58 8CC2                    	MOV	DX,ES
 31189 00005A5A 39D1                    	CMP	CX,DX
 31190 00005A5C 5A                      	POP	DX
 31191 00005A5D 59                      	POP	CX
 31192                                  _ret_label:
 31193 00005A5E C3                      	retn
 31194                                  
 31195                                  ; 01/08/2018 - Retro DOS v3.0
 31196                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 31197                                  
 31198                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 31199                                  
 31200                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 31201                                  ;----------------------------------------------------------------------------
 31202                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 31203                                  ;	It gets the specified local sector into one of the I/O buffers
 31204                                  ;	and shuffles the queue
 31205                                  ; 
 31206                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31207                                  ;		       ELSE no pre-read
 31208                                  ;		(DX) = Desired physical sector number	      (LOW)
 31209                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31210                                  ;		(ES:BP) = Pointer to drive parameters
 31211                                  ;		ALLOWED set in case of INT 24
 31212                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31213                                  ;		'C' clear if OK
 31214                                  ;		CURBUF Points to the Buffer for the sector
 31215                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31216                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31217                                  ;----------------------------------------------------------------------------
 31218                                  
 31219                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 31220                                  ;----------------------------------------------------------------------------
 31221                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 31222                                  ;	It gets the specified sector into one of the I/O buffers
 31223                                  ;	and shuffles the queue. We need a special entry point so that
 31224                                  ;	we can read the alternate FAT sector if the first read fails, also
 31225                                  ;	so we can mark the buffer as a FAT sector.
 31226                                  ; 
 31227                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31228                                  ;		       ELSE no pre-read
 31229                                  ;		(DX) = Desired physical sector number	     (LOW)
 31230                                  ;		(SI) != 0
 31231                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31232                                  ;		(ES:BP) = Pointer to drive parameters
 31233                                  ;		ALLOWED set in case of INT 24
 31234                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31235                                  ;		'C' clear if OK
 31236                                  ;		CUR ddBUF Points to the Buffer for the sector
 31237                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31238                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31239                                  ;----------------------------------------------------------------------------
 31240                                  
 31241                                  	; 20/05/2019 - Retro DOS v4.0
 31242                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 31243                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31244                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 31245                                  GETBUFFR:
 31246 00005A5F 31F6                    	XOR	SI,SI
 31247                                  
 31248                                  ;	This entry point is called for FAT buffering with SI != 0
 31249                                  
 31250                                  GETBUFFRB:
 31251 00005A61 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 31252                                  	; 15/12/2022
 31253 00005A64 268A4600                	mov	al,[ES:BP]
 31254                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31255                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 31256 00005A68 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 31257                                  	; MSDOS 6.0
 31258                                  ;hkn; SS override
 31259 00005A6C 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 31260                                  
 31261                                  ;	See if this is the buffer that was most recently returned.
 31262                                  ;	A big performance win if it is.
 31263                                  
 31264 00005A71 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 31265 00005A74 7412                    	je	short getb5			; No
 31266                                  	;cmp	dx,[di+6]
 31267 00005A76 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31268 00005A79 750D                    	JNZ	short getb5			; Wrong sector
 31269                                  	
 31270                                  	; MSDOS 6.0
 31271                                  	;cmp	cx,[di+8]
 31272 00005A7B 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 31273 00005A7E 7508                    	JNZ	short getb5			; F.C. >32mb		;AN000;
 31274                                  	
 31275                                  	;cmp	al,[di+4]
 31276 00005A80 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31277                                  	;JZ	getb35				; Just asked for same buffer
 31278 00005A83 7503                    	jnz	short getb5
 31279                                  	;jmp	getb35
 31280                                  	; 17/12/2022
 31281                                  	; 28/07/2019
 31282 00005A85 E9C800                  	jmp	getb35x
 31283                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31284                                  	;jmp	getb35
 31285                                  
 31286                                  ;	It's not the buffer most recently returned. See if it's in the
 31287                                  ;	cache.
 31288                                  ;
 31289                                  ;	(cx:dx) = sector #
 31290                                  ;	(al) = drive #
 31291                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31292                                  ;	??? list may be incomplete ???
 31293                                  
 31294                                  getb5:	
 31295                                  	; MSDOS 3.3
 31296                                  	;lds	di,[SS:BUFFHEAD]
 31297                                  	; MSDOS 6.0
 31298 00005A88 E86FFF                  	CALL	GETCURHEAD			; get Q Head
 31299                                  getb10:	
 31300                                  	;cmp	dx,[di+6]
 31301 00005A8B 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31302 00005A8E 750D                    	jne	short getb12			; wrong sector lo
 31303                                  	
 31304                                  	; MSDOS 6.0
 31305                                  	;cmp	cx,[di+8]
 31306 00005A90 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 31307 00005A93 7508                    	jne	short getb12			; wrong sector hi
 31308                                  	
 31309                                  	;cmp	al,[di+4]
 31310 00005A95 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31311                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 31312 00005A98 7503                    	jne	short getb12
 31313 00005A9A E98D00                  	jmp	getb25
 31314                                  getb12:	
 31315                                  	; MSDOS 3.3
 31316                                  	;;mov	di,[DI]
 31317                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 31318                                  	;
 31319                                  	; 15/08/2018
 31320                                  	;lds	di,[di]
 31321                                  
 31322                                  	;cmp	di,-1 ; 0FFFFh
 31323                                  	;jne	short getb10
 31324                                  	;lds	di,[SS:BUFFHEAD]
 31325                                  
 31326                                  	; MSDOS 6.0
 31327 00005A9D 8B3D                    	mov	di,[di]
 31328                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 31329 00005A9F 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 31330 00005AA4 75E5                    	jne	short getb10			; no, continue looking
 31331                                  
 31332                                  ;	The requested sector is not available in the buffers. DS:DI now points
 31333                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 31334                                  ;	new sector into it.
 31335                                  ;
 31336                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 31337                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 31338                                  ;	him, we should take LRU. And the above lookup shouldn't be
 31339                                  ;	down a chain, but should be hashed.
 31340                                  ;
 31341                                  ;	(DS:DI) = first buffer in the queue
 31342                                  ;	(CX:DX) = sector # we want
 31343                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31344                                  
 31345                                  	; MSDOS 3.3 & MSDOS 6.0
 31346                                  ;hkn; SS override
 31347 00005AA6 51                      	PUSH	CX  ; MSDOS 6.0
 31348 00005AA7 56                      	push	si
 31349 00005AA8 52                      	push	dx
 31350 00005AA9 55                      	push	bp
 31351 00005AAA 06                      	push	es
 31352 00005AAB E81701                  	CALL	BUFWRITE			; Write out the dirty buffer
 31353 00005AAE 07                      	pop	es
 31354 00005AAF 5D                      	pop	bp
 31355 00005AB0 5A                      	pop	dx
 31356 00005AB1 5E                      	pop	si
 31357 00005AB2 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 31358                                  	;jc	short getbx			; if got hard error
 31359 00005AB7 7303                    	jnc	short getb13
 31360 00005AB9 E99E00                  	jmp	getbx
 31361                                  
 31362                                  getb13:
 31363                                  	; MSDOS 6.0
 31364 00005ABC E89301                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 31365                                  
 31366                                  ;	We're ready to read in the buffer, if need be. If the caller
 31367                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 31368                                  
 31369 00005ABF 30E4                    	XOR	AH,AH				; initial flags
 31370                                  ;hkn; SS override
 31371                                  	;test	byte [ss:PREREAD],0FFh
 31372                                  	;jnz	short getb20
 31373 00005AC1 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 31374 00005AC6 754A                    	JNZ	short getb20			; no, we're done
 31375                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 31376                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31377 00005AC8 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 31378 00005ACB B90100                  	MOV	CX,1
 31379 00005ACE 56                      	push	si
 31380 00005ACF 57                      	push	di
 31381 00005AD0 52                      	push	dx
 31382                                  	; MSDOS 6.0
 31383 00005AD1 06                      	push	es ; ***
 31384                                  
 31385                                  ; Note: As far as I can tell, all disk reads into buffers go through
 31386                                  ;	this point. -mrw 10/88
 31387                                  	
 31388 00005AD2 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 31389 00005AD8 7407                    	jz	short getb14
 31390 00005ADA 1E                      	push	ds ; **
 31391 00005ADB 53                      	push	bx ; *
 31392 00005ADC 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 31393                                  getb14:
 31394                                  ;M039: Eliminated redundant HMA code.
 31395                                  
 31396                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31397 00005AE1 09F6                    	OR	SI,SI			; FAT sector ?
 31398 00005AE3 7407                    	JZ	short getb15		
 31399                                  
 31400 00005AE5 E8A9DC                  	call	FATSECRD
 31401                                  	;mov	ah,2
 31402 00005AE8 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 31403                                  
 31404 00005AEA EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 31405                                  
 31406                                  getb15:
 31407 00005AEC E8CEDC                  	call	DREAD			; Buffer is marked free if read barfs
 31408 00005AEF B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 31409                                  getb17:
 31410                                  	; 17/12/2022	
 31411                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31412                                  ;%if 0
 31413                                  	; MSDOS 6.0							  ;I001
 31414 00005AF1 9C                      	pushf								  ;I001
 31415 00005AF2 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 31416 00005AF8 7411                    	jz	short not_in_hma	; no				  ;I001
 31417                                  	;mov	cx,[es:bp+2]
 31418 00005AFA 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 31419 00005AFE D1E9                    	shr	cx,1							  ;I001
 31420 00005B00 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 31421 00005B01 89DE                    	mov	si,bx							  ;I001
 31422 00005B03 5F                      	pop	di ; *							  ;I001
 31423 00005B04 07                      	pop	es ; **							  ;I001
 31424 00005B05 FC                      	cld								  ;I001
 31425 00005B06 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 31426 00005B07 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 31427 00005B09 06                      	push	es							  ;I001
 31428 00005B0A 1F                      	pop	ds							  ;I001
 31429                                  ;%endif
 31430                                  
 31431                                  ; 17/12/2022
 31432                                  %if 0
 31433                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31434                                  	; MSDOS 5.0
 31435                                  	pushf
 31436                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 31437                                  	jz	short not_in_hma	; no
 31438                                  	popf
 31439                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 31440                                  	shr	cx,1
 31441                                  	mov	si,bx
 31442                                  	pop	di ; *
 31443                                  	pop	es ; **
 31444                                  	cld
 31445                                  	rep	movsw
 31446                                  	push	es
 31447                                  	pop	ds
 31448                                  	jmp	short getb19 ; 27/11/2022
 31449                                  %endif
 31450                                  
 31451                                  not_in_hma:								  ;I001
 31452 00005B0B 9D                      	popf							 	  ;I001
 31453                                  getb19:
 31454 00005B0C 07                      	pop	es ; ***
 31455 00005B0D 5A                      	pop	dx
 31456 00005B0E 5F                      	pop	di
 31457 00005B0F 5E                      	pop	si
 31458 00005B10 7248                    	JC	short getbx
 31459                                  
 31460                                  ;	The buffer has the data setup in it (if we were to read)
 31461                                  ;	Setup the various buffer fields
 31462                                  ;
 31463                                  ;	(ds:di) = buffer address
 31464                                  ;	(es:bp) = DPB address
 31465                                  ;	(HIGH_SECTOR:DX) = sector #
 31466                                  ;	(ah) = BUF_FLAGS value
 31467                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 31468                                  
 31469                                  ;hkn; SS override
 31470                                  getb20:	; MSDOS 6.0
 31471 00005B12 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 31472                                  	;mov	[di+8],cx
 31473 00005B17 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 31474                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31475                                   	;mov	[di+6],dx
 31476 00005B1A 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 31477                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 31478                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 31479 00005B1D 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 31480                                  	;;mov	[di+0Ch],es
 31481                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 31482 00005B20 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 31483                                  	; 15/12/2022
 31484 00005B23 268A4600                	mov	al,[es:bp]
 31485                                  	;mov	al,[es:bp+0]
 31486                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31487                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 31488                                  	;mov	[di+4],ax
 31489 00005B27 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 31490                                  getb25:	
 31491                                  	; MSDOS 3.3
 31492                                  	;mov     ax,1
 31493                                  
 31494                                  	; MSDOS 6.0
 31495                                  	;mov	byte [di+0Ah],1
 31496 00005B2A C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 31497 00005B2E 31C0                    	XOR	AX,AX
 31498                                  
 31499                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31500 00005B30 09F6                    	OR	SI,SI				; FAT sector ?
 31501 00005B32 740B                    	JZ	short getb30
 31502                                  
 31503                                  	;mov	al,[es:bp+8]
 31504 00005B34 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 31505                                  	
 31506                                  	; MSDOS 6.0
 31507 00005B38 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 31508                                  	;mov	ax,[es:bp+0Fh]
 31509 00005B3B 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 31510                                  						;  sectors
 31511                                  	; MSDOS 3.3
 31512                                  	;;mov	ah,[es:bp+0Fh]
 31513                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31514                                  
 31515                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 31516                                  ;		is set
 31517                                  
 31518                                  getb30:	
 31519                                  	; MSDOS 6.0
 31520                                  	;mov	[di+0Bh],ax
 31521 00005B3F 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 31522                                  
 31523                                  	; MSDOS 3.3
 31524                                  	;;mov	[di+8],ax ; 15/08/2018	
 31525                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 31526                                  
 31527 00005B42 E8CEFE                  	CALL	PLACEBUF
 31528                                  
 31529                                  ;hkn; SS override for next 4
 31530                                  getb35: 
 31531                                  	; 17/12/2022
 31532                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31533                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 31534                                  	;MOV	[SS:CURBUF+2],DS
 31535                                  	;MOV	[SS:LastBuffer+2],DS
 31536                                  	;MOV	[SS:CURBUF],DI
 31537                                  	;MOV	[SS:LastBuffer],DI
 31538                                  	;CLC
 31539                                  
 31540                                  	; 17/12/2022
 31541                                  	; 07/12/2022
 31542                                  	; Retro DOS v4.0
 31543 00005B45 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 31544 00005B4A 36893E[1E00]            	mov	[ss:LastBuffer],di
 31545 00005B4F F8                      	clc
 31546                                  getb35x: ; 28/07/2019
 31547 00005B50 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 31548 00005B55 36893E[E205]            	MOV	[ss:CURBUF],di
 31549                                  
 31550                                  ;	Return with 'C' set appropriately
 31551                                  ;	(dx) = caller's original value
 31552                                  
 31553                                  getbx:	
 31554 00005B5A 16                      	push	ss
 31555 00005B5B 1F                      	pop	ds
 31556                                  	;retn
 31557                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31558                                  getbuffrb_retn:
 31559                                  ;flushbuf_retn:	; 17/12/2022
 31560 00005B5C C3                      	retn
 31561                                  
 31562                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 31563                                  ;----------------------------------------------------------------------------
 31564                                  ; Input:
 31565                                  ;	DS = DOSGROUP
 31566                                  ;	AL = Physical unit number local buffers only
 31567                                  ;	   = -1 for all units and all remote buffers
 31568                                  ; Function:
 31569                                  ;	Write out all dirty buffers for unit, and flag them as clean
 31570                                  ;	Carry set if error (user FAILed to I 24)
 31571                                  ;	    Flush operation completed.
 31572                                  ; DS Preserved, all others destroyed (ES too)
 31573                                  ;----------------------------------------------------------------------------
 31574                                  
 31575                                  	; 20/05/2019 - Retro DOS v4.0
 31576                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 31577                                  
 31578                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31579                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 31580                                  FLUSHBUF:
 31581                                  	; MSDOS 3.3
 31582                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 31583                                  	;lds	di,[BUFFHEAD]
 31584                                  
 31585                                  	; MSDOS 6.0
 31586 00005B5D E89AFE                  	call	GETCURHEAD
 31587                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31588 00005B60 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31589 00005B66 7508                    	jnz	short scan_buf_queue
 31590 00005B68 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 31591 00005B6E 7423                    	je	short end_scan
 31592                                  	
 31593                                  scan_buf_queue:
 31594 00005B70 E82900                  	call	CHECKFLUSH
 31595                                  	;push	ax  ; MSDOS 3.3
 31596                                  	; MSDOS 6.0
 31597                                  	;mov	ah,[di+4]
 31598 00005B73 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 31599 00005B76 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 31600 00005B7B 7408                    	je	short free_the_buf
 31601                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31602 00005B7D 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31603 00005B83 7405                    	jz	short dont_free_the_buf
 31604                                  	; MSDOS 3.3
 31605                                  	;;mov	al,[di+4]
 31606                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 31607                                  	;cmp	[SS:WPERR],al					;hkn;
 31608                                  	; 15/08/2018
 31609                                  	;jne	short dont_free_the_buf	
 31610                                  free_the_buf:
 31611                                  	; MSDOS 6.0 (& MSDOS 3.3)
 31612 00005B85 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 31613                                  dont_free_the_buf:
 31614                                  	;pop	ax  ; MSDOS 3.3 	   	
 31615                                  
 31616                                  	; MSDOS 3.3
 31617                                  	;mov	di,[DI]
 31618                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 31619                                  	;
 31620                                  	; 15/08/2018
 31621                                  	;lds	di,[di]
 31622                                  	;
 31623                                  	;cmp	di,-1 ; 0FFFFh
 31624                                  	;jnz	short scan_buf_queue 
 31625                                  	
 31626                                  	; MSDOS 6.0
 31627 00005B8A 8B3D                    	mov	di,[di]
 31628                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 31629 00005B8C 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 31630 00005B91 75DD                    	jne	short scan_buf_queue
 31631                                  
 31632                                  end_scan:
 31633 00005B93 16                      	push	ss
 31634 00005B94 1F                      	pop	ds
 31635                                  	; 01/08/2018 - Retro DOS v3.0
 31636                                  	;cmp	byte [FAILERR],0
 31637                                  	;jne	short bad_flush
 31638                                  	;retn
 31639                                  ;bad_flush:
 31640                                  	;stc
 31641                                  	;retn
 31642                                  
 31643                                  	; 17/12/2022
 31644                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31645                                  	; 01/08/2018 - Retro DOS v3.0
 31646 00005B95 803E[4A03]01            	cmp	byte [FAILERR],1
 31647 00005B9A F5                      	cmc
 31648                                  flushbuf_retn:
 31649 00005B9B C3                      	retn
 31650                                  	
 31651                                  	; 17/12/2022
 31652                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31653                                  	;cmp	byte [FAILERR],0
 31654                                  	;jne	short bad_flush
 31655                                  	;retn
 31656                                  ;bad_flush:
 31657                                  	;stc
 31658                                  	;retn
 31659                                  
 31660                                  ;----------------------------------------------------------------------------
 31661                                  ;
 31662                                  ; Procedure Name : CHECKFLUSH
 31663                                  ;
 31664                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 31665                                  ;	   DS:DI - pointer to buffer
 31666                                  ;
 31667                                  ; Function : Write out a buffer if it is dirty
 31668                                  ;
 31669                                  ; Carry set if problem (currently user FAILed to I 24)
 31670                                  ;
 31671                                  ;----------------------------------------------------------------------------
 31672                                  
 31673                                  CHECKFLUSH:
 31674                                  	; MSDOS 6.0
 31675 00005B9C B4FF                    	mov	ah, -1 ; 01/08/2018 Retro DOS v3.0
 31676                                  	;cmp	[di+4],ah
 31677 00005B9E 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 31678 00005BA1 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 31679 00005BA3 38C4                    	CMP	AH,AL			; 
 31680 00005BA5 7406                    	JZ	short DOBUFFER		; do this buffer
 31681                                  	;cmp	al,[di+4]
 31682 00005BA7 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31683 00005BAA F8                      	CLC
 31684 00005BAB 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 31685                                  DOBUFFER:
 31686                                  	;test	byte [di+5],40h
 31687 00005BAD F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31688 00005BB1 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 31689 00005BB3 50                      	PUSH	AX
 31690                                  	;push	word [di+4]
 31691 00005BB4 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 31692 00005BB7 E80B00                  	CALL	BUFWRITE
 31693 00005BBA 58                      	POP	AX
 31694 00005BBB 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 31695                                  	;and	ah,0BFh
 31696 00005BBD 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 31697                                  	;mov	[di+4],ax
 31698 00005BC0 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 31699                                  LEAVE_BUF:
 31700 00005BC3 58                      	POP	AX			; Search info
 31701                                  checkflush_retn:
 31702 00005BC4 C3                      	retn
 31703                                  
 31704                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 31705                                  ;----------------------------------------------------------------------------
 31706                                  ;
 31707                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 31708                                  ;
 31709                                  ;	ENTRY	DS:DI Points to the buffer
 31710                                  ;
 31711                                  ;	EXIT	Buffer marked free
 31712                                  ;		Carry set if error (currently user FAILed to I 24)
 31713                                  ;
 31714                                  ;	USES	All buf DS:DI
 31715                                  ;		HIGH_SECTOR
 31716                                  ;----------------------------------------------------------------------------
 31717                                  
 31718                                  	; 20/05/2019 - Retro DOS v4.0
 31719                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 31720                                  
 31721                                  
 31722                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31723                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 31724                                  
 31725                                  BUFWRITE:
 31726                                  	; 10/09/2018
 31727                                  	; 01/08/2018 - Retro DOS v3.0
 31728                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 31729 00005BC5 B8FF00                  	MOV	AX,00FFH
 31730                                  	;xchg	ax,[di+4]
 31731 00005BC8 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 31732 00005BCB 3CFF                    	CMP	AL,0FFH
 31733 00005BCD 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 31734                                  	;test	ah,40h
 31735 00005BCF F6C440                  	test	AH,buf_dirty
 31736 00005BD2 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 31737                                  	; MSDOS 6.0
 31738 00005BD4 E89400                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 31739                                  
 31740                                  ;hkn; SS override
 31741 00005BD7 363A06[2203]            	CMP	AL,[SS:WPERR]
 31742 00005BDC 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 31743                                  
 31744                                  ;hkn; SS override
 31745                                  	; MSDOS 6.0
 31746 00005BDE 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 31747                                  	
 31748                                  	;;les	bp,[di+10] ; MSDOS 3.3
 31749                                  	;les	bp,[di+13] ; MSDOS 6.0
 31750 00005BE2 C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 31751                                  	;;lea	bx,[di+16]
 31752                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31753 00005BE5 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 31754                                  	;mov	dx,[di+6]
 31755 00005BE8 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 31756                                  	
 31757                                  	; MSDOS 6.0
 31758                                  	;mov	cx,[di+8]
 31759 00005BEB 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 31760                                  
 31761                                  ;hkn; SS override
 31762 00005BEE 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 31763 00005BF3 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 31764                                  	; MSDOS 3.3
 31765                                  	;; mov	cx,[DI+8]
 31766                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 31767                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 31768 00005BF6 30ED                    	XOR	CH,CH
 31769                                  	;;mov	ah,ch ; MSDOS 3.3
 31770                                  
 31771                                  ;hkn; SS override for ALLOWED
 31772                                  	;mov	byte [SS:ALLOWED],18h
 31773 00005BF8 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 31774                                  	;test	byte [di+5],8
 31775                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 31776                                  	;test	ah,8
 31777 00005BFE F6C408                  	test	AH,buf_isDATA
 31778 00005C01 7406                    	JZ	short NO_IGNORE
 31779                                  	;or	byte [SS:ALLOWED],20h
 31780 00005C03 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 31781                                  NO_IGNORE:
 31782                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 31783                                  	; MSDOS 6.0
 31784                                  	;mov	ax,[di+11]
 31785 00005C09 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 31786                                  
 31787 00005C0C 57                      	PUSH	DI		; Save buffer pointer
 31788 00005C0D 31FF                    	XOR	DI,DI		; Indicate failure
 31789                                  
 31790 00005C0F 1E                      	push	ds ; *
 31791 00005C10 53                      	push	bx ; **
 31792                                  WRTAGAIN:
 31793 00005C11 57                      	push	di ; ***
 31794 00005C12 51                      	push	cx ; ****
 31795 00005C13 50                      	push	ax ; *****
 31796                                  	;MOV	CX,1
 31797                                  	; 17/12/2022
 31798                                  	; ch = 0
 31799 00005C14 B101                    	mov	cl,1 ; 24/07/2019
 31800                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31801                                  	;mov	cx,1
 31802 00005C16 53                      	push	bx ; ******
 31803 00005C17 52                      	push	dx ; *******
 31804 00005C18 1E                      	push	ds ; ********
 31805                                  
 31806                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 31807                                  
 31808                                  	; MSDOS 6.0
 31809 00005C19 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 31810 00005C1F 7418                    	jz	short NBUFFINHMA
 31811 00005C21 51                      	push	cx
 31812 00005C22 06                      	push	es
 31813 00005C23 89DE                    	mov	si,bx
 31814 00005C25 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 31815 00005C29 D1E9                    	shr	cx,1
 31816 00005C2B 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 31817 00005C30 89FB                    	mov	bx,di
 31818 00005C32 FC                      	cld
 31819 00005C33 F3A5                    	rep	movsw
 31820 00005C35 06                      	push	es
 31821 00005C36 1F                      	pop	ds
 31822 00005C37 07                      	pop	es
 31823 00005C38 59                      	pop	cx
 31824                                  NBUFFINHMA:
 31825 00005C39 E8E1DB                  	call	DWRITE		; Write out the dirty buffer
 31826 00005C3C 1F                      	pop	ds ; ********
 31827 00005C3D 5A                      	pop	dx ; *******
 31828 00005C3E 5B                      	pop	bx ; ******
 31829 00005C3F 58                      	pop	ax ; *****
 31830 00005C40 59                      	pop	cx ; ****
 31831 00005C41 5F                      	pop	di ; ***
 31832 00005C42 7201                    	JC	short NOSET
 31833 00005C44 47                      	INC	DI		; If at least ONE write succeedes, the operation
 31834                                  NOSET:				;	succeedes.
 31835 00005C45 01C2                    	ADD	DX,AX
 31836 00005C47 E2C8                    	LOOP	WRTAGAIN
 31837 00005C49 5B                      	pop	bx ; **
 31838 00005C4A 1F                      	pop	ds ; *
 31839 00005C4B 09FF                    	OR	DI,DI		; Clears carry
 31840 00005C4D 7501                    	JNZ	short BWROK	; At least one write worked
 31841 00005C4F F9                      	STC			; DI never got INCed, all writes failed.
 31842                                  BWROK:	
 31843 00005C50 5F                      	POP	DI
 31844 00005C51 C3                      	retn
 31845                                  
 31846                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 31847                                  ;----------------------------------------------------------------------------
 31848                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 31849                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 31850                                  ;	SC_DRIVE even if SC is disabled to save the testing
 31851                                  ;	code and time
 31852                                  ;
 31853                                  ;	ENTRY	ES:BP = drive parameter block
 31854                                  ;
 31855                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 31856                                  ;		[SC_DRIVE]= drive #
 31857                                  ;
 31858                                  ;	USES	Flags
 31859                                  ;----------------------------------------------------------------------------
 31860                                  
 31861                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31862                                  ; 04/05/2019 - Retro DOS v4.0
 31863                                  
 31864                                  SET_RQ_SC_PARMS:
 31865                                  ;hkn; SS override for all variables used in this procedure.
 31866 00005C52 50                      	push	ax
 31867                                  	;mov	ax,[es:bp+2]
 31868 00005C53 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 31869 00005C57 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 31870                                  	;;mov	al,[es:bp+0]
 31871                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31872                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 31873                                  	; 15/12/2022
 31874 00005C5B 268A4600                	mov	al,[ES:BP]
 31875 00005C5F 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 31876 00005C63 58                      	pop	ax
 31877                                  srspx:	
 31878 00005C64 C3                      	retn					;LB. return
 31879                                  
 31880                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 31881                                  ;----------------------------------------------------------------------------
 31882                                  ; Input:
 31883                                  ;	none
 31884                                  ; Function:
 31885                                  ;	increment dirty buffers count
 31886                                  ; Output:
 31887                                  ;	dirty buffers count is incremented
 31888                                  ;
 31889                                  ; All registers preserved
 31890                                  ;----------------------------------------------------------------------------
 31891                                  
 31892                                  INC_DIRTY_COUNT:
 31893                                  ;; BUGBUG  ---- remove this routine
 31894                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 31895 00005C65 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 31896 00005C6A C3                      	retn
 31897                                  
 31898                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 31899                                  ;----------------------------------------------------------------------------
 31900                                  ; Input:
 31901                                  ;	none
 31902                                  ; Function:
 31903                                  ;	decrement dirty buffers count
 31904                                  ; Output:
 31905                                  ;	dirty buffers count is decremented
 31906                                  ;
 31907                                  ; All registers preserved
 31908                                  ;----------------------------------------------------------------------------
 31909                                  
 31910                                  DEC_DIRTY_COUNT:
 31911 00005C6B 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 31912 00005C71 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 31913 00005C73 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 31914                                  					; error condition to underflow here? ;hkn;
 31915                                  ddcx:	
 31916 00005C78 C3                      	retn
 31917                                  
 31918                                  ;============================================================================
 31919                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 31920                                  ;============================================================================
 31921                                  ; 02/08/2018 - Retro DOS v3.0
 31922                                  ; 29/04/2019 - Retro DOS v4.0
 31923                                  
 31924                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 31925                                  
 31926                                  ; Pseudo EXEC system call for DOS
 31927                                  
 31928                                  ;	TITLE	MSPROC - process maintenance
 31929                                  ;	NAME	MSPROC
 31930                                  
 31931                                  ; =========================================================================
 31932                                  ;**	Process related system calls and low level routines for DOS 2.X.
 31933                                  ;	I/O specs are defined in DISPATCH.
 31934                                  ;
 31935                                  ;	$WAIT
 31936                                  ;	$EXEC
 31937                                  ;	$Keep_process
 31938                                  ;	Stay_resident
 31939                                  ;	$EXIT
 31940                                  ;	$ABORT
 31941                                  ;	abort_inner
 31942                                  ;
 31943                                  ;	Modification history:
 31944                                  ;
 31945                                  ;		Created: ARR 30 March 1983
 31946                                  ;		AN000	version 4.0 jan. 1988
 31947                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 31948                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 31949                                  ;
 31950                                  ;		M000	added support for loading programs into UMBs 7/9/90
 31951                                  ;
 31952                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 31953                                  ;		       dossym.inc. 7/30/90
 31954                                  ;		M005 - Support for EXE programs with out STACK segment and 
 31955                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 31956                                  ;		       stack is provided at the end of the program. Note that
 31957                                  ;		       only SP is changed.
 31958                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 31959                                  ;
 31960                                  ;		M028 - 4b04 implementation
 31961                                  ;
 31962                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 31963                                  ;			in memory block >= 64K, sp = 0. If memory block
 31964                                  ;			obtained is <64K, point sp at the end of the memory
 31965                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 31966                                  ;			added for a stack segment which may be needed if it
 31967                                  ;			is loaded in low memory situations.
 31968                                  ;
 31969                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 31970                                  ;
 31971                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 31972                                  ;			a bad environment if it reached 32767 bytes. Changed
 31973                                  ;			to allow 32768 bytes of environment.
 31974                                  ;
 31975                                  ;		M047 - Release the allocated UMB when we failed to load a 
 31976                                  ;		       COM file high. Also ensure that if the biggest block
 31977                                  ;		       into which we load the com file is less than 64K then
 31978                                  ;		       we provide atleast 256 bytes of stack to the user.
 31979                                  ;
 31980                                  ;		M050 - Made Lie table search CASE insensitive
 31981                                  ;
 31982                                  ;		M060 - Removed special version table from the kernal and
 31983                                  ;                      put it in a device drive which puts the address
 31984                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 31985                                  ;		       as a DWORD.
 31986                                  ;
 31987                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 31988                                  ;		       entry do not try to load low if there is no space in
 31989                                  ;		       UMBs.
 31990                                  ;
 31991                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 31992                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 31993                                  ;		       change return address to LeaveDos if AL=5.
 31994                                  ;
 31995                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 31996                                  ;                      controls building a version of MSDOS.SYS that only
 31997                                  ;                      runs programs from a fixed list (defined in the
 31998                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 31999                                  ;                      for details.  This feature is used to build a
 32000                                  ;                      "special" version of DOS that can be handed out to
 32001                                  ;                      OEM/ISV customers as part of a "service" disk.
 32002                                  ;
 32003                                  ; =========================================================================
 32004                                  
 32005                                  ;SAVEXIT  EQU  10
 32006                                  
 32007                                  ;BREAK	<$WAIT - return previous process error code>
 32008                                  ; =========================================================================
 32009                                  ;	$WAIT - Return previous process error code.
 32010                                  ;
 32011                                  ;	Assembler usage:
 32012                                  ;
 32013                                  ;	    MOV     AH, WaitProcess
 32014                                  ;	    INT     int_command
 32015                                  ;
 32016                                  ;	ENTRY	none
 32017                                  ;	EXIT	(ax) = exit code
 32018                                  ;	USES	all
 32019                                  ; =========================================================================
 32020                                  
 32021                                  	; 20/05/2019 - Retro DOS v4.0
 32022                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 32023                                  
 32024                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32025                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 32026                                  _$WAIT:
 32027                                  	; 02/08/2018 - Retro DOS v3.0
 32028                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 32029                                  
 32030 00005C79 31C0                    	xor	AX,AX
 32031 00005C7B 368706[3403]            	xchg	AX,[ss:exit_code]
 32032 00005C80 E901AA                  	jmp	SYS_RET_OK
 32033                                  
 32034                                  ; =========================================================================
 32035                                  ;BREAK <$exec - load/go a program>
 32036                                  ;	EXEC.ASM - EXEC System Call
 32037                                  ;
 32038                                  ;
 32039                                  ; Assembler usage:
 32040                                  ;	    lds     DX, Name
 32041                                  ;	    les     BX, Blk
 32042                                  ;	    mov     AH, Exec
 32043                                  ;	    mov     AL, FUNC
 32044                                  ;	    int     INT_COMMAND
 32045                                  ;
 32046                                  ;	AL  Function
 32047                                  ;	--  --------
 32048                                  ;	 0  Load and execute the program.
 32049                                  ;	 1  Load, create the program header but do not
 32050                                  ;	    begin execution.
 32051                                  ;	 3  Load overlay. No header created.
 32052                                  ;
 32053                                  ;	    AL = 0 -> load/execute program
 32054                                  ;
 32055                                  ;	    +---------------------------+
 32056                                  ;	    | WORD segment address of	|
 32057                                  ;	    | environment.		|
 32058                                  ;	    +---------------------------+
 32059                                  ;	    | DWORD pointer to ASCIZ	|
 32060                                  ;	    | command line at 80h	|
 32061                                  ;	    +---------------------------+
 32062                                  ;	    | DWORD pointer to default	|
 32063                                  ;	    | FCB to be passed at 5Ch	|
 32064                                  ;	    +---------------------------+
 32065                                  ;	    | DWORD pointer to default	|
 32066                                  ;	    | FCB to be passed at 6Ch	|
 32067                                  ;	    +---------------------------+
 32068                                  ;
 32069                                  ;	    AL = 1 -> load program
 32070                                  ;
 32071                                  ;	    +---------------------------+
 32072                                  ;	    | WORD segment address of	|
 32073                                  ;	    | environment.		|
 32074                                  ;	    +---------------------------+
 32075                                  ;	    | DWORD pointer to ASCIZ	|
 32076                                  ;	    | command line at 80h	|
 32077                                  ;	    +---------------------------+
 32078                                  ;	    | DWORD pointer to default	|
 32079                                  ;	    | FCB to be passed at 5Ch	|
 32080                                  ;	    +---------------------------+
 32081                                  ;	    | DWORD pointer to default	|
 32082                                  ;	    | FCB to be passed at 6Ch	|
 32083                                  ;	    +---------------------------+
 32084                                  ;	    | DWORD returned value of	|
 32085                                  ;	    | CS:IP			|
 32086                                  ;	    +---------------------------+
 32087                                  ;	    | DWORD returned value of	|
 32088                                  ;	    | SS:IP			|
 32089                                  ;	    +---------------------------+
 32090                                  ;
 32091                                  ;	    AL = 3 -> load overlay
 32092                                  ;
 32093                                  ;	    +---------------------------+
 32094                                  ;	    | WORD segment address where|
 32095                                  ;	    | file will be loaded.	|
 32096                                  ;	    +---------------------------+
 32097                                  ;	    | WORD relocation factor to |
 32098                                  ;	    | be applied to the image.	|
 32099                                  ;	    +---------------------------+
 32100                                  ;
 32101                                  ; Returns:
 32102                                  ;	    AX = error_invalid_function
 32103                                  ;	       = error_bad_format
 32104                                  ;	       = error_bad_environment
 32105                                  ;	       = error_not_enough_memory
 32106                                  ;	       = error_file_not_found
 32107                                  ; =========================================================================
 32108                                  ;
 32109                                  ;   Revision history:
 32110                                  ;
 32111                                  ;	 A000	version 4.00  Jan. 1988
 32112                                  ;
 32113                                  ; =========================================================================
 32114                                  
 32115                                  Exec_Internal_Buffer		EQU	OPENBUF
 32116                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 32117                                  
 32118                                  ; =========================================================================
 32119                                  
 32120                                  ;IF1		; warning message on buffers
 32121                                  ;%out	Please make sure that the following are contiguous and of the
 32122                                  ;%out	following sizes:
 32123                                  ;%out
 32124                                  ;%out	OpenBuf     128
 32125                                  ;%out	RenBuf	    128
 32126                                  ;%out	SearchBuf    53
 32127                                  ;%out	DummyCDS    curdirLen
 32128                                  ;ENDIF
 32129                                  
 32130                                  ; =========================================================================
 32131                                  
 32132                                  ; =========================================================================
 32133                                  ;
 32134                                  ; =========================================================================
 32135                                  
 32136                                  	; 20/05/2019 - Retro DOS v4.0
 32137                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 32138                                  
 32139                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32140                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 32141                                  	
 32142                                  _$EXEC:
 32143                                  	; 02/08/2018 - Retro DOS v3.0
 32144                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 32145                                  
 32146                                  EXEC001S:
 32147                                  	;LocalVar    Exec_Blk		,DWORD
 32148                                  	;LocalVar    Exec_Func		,BYTE
 32149                                  	;LocalVar    Exec_Load_High	,BYTE
 32150                                  	;LocalVar    Exec_FH		,WORD
 32151                                  	;LocalVar    Exec_Rel_Fac	,WORD
 32152                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 32153                                  	;LocalVar    Exec_Environ	,WORD
 32154                                  	;LocalVar    Exec_Size		,WORD
 32155                                  	;LocalVar    Exec_Load_Block	,WORD
 32156                                  	;LocalVar    Exec_DMA		,WORD
 32157                                  	;LocalVar    ExecNameLen 	,WORD
 32158                                  	;LocalVar    ExecName		,DWORD
 32159                                  	;
 32160                                  	;LocalVar    Exec_DMA_Save	,WORD
 32161                                  	;LocalVar    Exec_NoStack	,BYTE
 32162                                  
 32163                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32164                                  	;%define	Exec_Blk	dword [bp-4]
 32165                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 32166                                  	%define		Exec_BlkL	word [bp-4]	
 32167                                  	%define		Exec_BlkH	word [bp-2]
 32168                                  	%define		Exec_Func	byte [bp-5]
 32169                                  	%define		Exec_Load_High	byte [bp-6]
 32170                                  	%define		Exec_FH		word [bp-8]
 32171                                  	%define		Exec_Rel_Fac	word [bp-10]
 32172                                  	%define		Exec_Res_Len_Para word [bp-12]
 32173                                  	%define		Exec_Environ	word [bp-14]
 32174                                  	%define		Exec_Size	word [bp-16]
 32175                                  	%define		Exec_Load_Block	word [bp-18]
 32176                                  	%define		Exec_DMA	word [bp-20]
 32177                                  	%define		ExecNameLen	word [bp-22]
 32178                                  	;%define	ExecName	dword [bp-26]
 32179                                  	%define		ExecName	[bp-26] ; 09/08/2018
 32180                                  	%define		ExecNameL	word [bp-26]	
 32181                                  	%define		ExecNameH	word [bp-24]
 32182                                  	; MSDOS 6.0
 32183                                  	%define		Exec_DMA_Save	word [bp-28]
 32184                                  	%define		Exec_NoStack	byte [bp-29]
 32185                                  	
 32186                                  	; ==================================================================
 32187                                  	; validate function
 32188                                  	; ==================================================================
 32189                                  		      	
 32190                                  	; M068 - Start
 32191                                  	;
 32192                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 32193                                  	; possibility that the count may not be decremented all the way to
 32194                                  	; 0. A typical case is if the program for which we intended to keep 
 32195                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 32196                                  	; calls), exits pre-maturely due to error conditions.
 32197                                  
 32198                                  	; MSDOS 6.0
 32199 00005C83 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 32200                                  
 32201                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 32202                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 32203                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 32204                                  
 32205 00005C89 3C05                    	cmp	al,5			; Q: is this ExecReady call
 32206                                  	;jne	short @f
 32207 00005C8B 7505                    	jne	short Exec_@f		; N: continue
 32208                                  					; Y: change ret addr. to LeaveDos.
 32209 00005C8D 59                      	pop	cx			; Note CX is not input to ExecReady
 32210 00005C8E B9[4C04]                	mov	cx,LeaveDOS
 32211 00005C91 51                      	push	cx
 32212                                  ;@@:
 32213                                  Exec_@f:
 32214                                  	; M068 - End
 32215                                  	
 32216                                  	;Enter
 32217                                  
 32218 00005C92 55                      	push	bp
 32219 00005C93 89E5                    	mov	bp,sp
 32220                                  	;;sub	sp,26	; MSDOS 3.3
 32221                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 32222                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 32223                                  	; 17/12/2022
 32224                                  	; 20/05/2019
 32225 00005C95 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 32226                                  
 32227                                  	; MSDOS 6.0
 32228 00005C98 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 32229                                  					; M030
 32230 00005C9A 7614                    	jna	short Exec_Check_2
 32231                                  
 32232                                  	; MSDOS 3.3
 32233                                  	;cmp	AL,3
 32234                                  	;jna	short Exec_Check_2
 32235                                  
 32236                                  Exec_Bad_Fun:
 32237 00005C9C 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 32238                                  					; Extended Error Locus	;smr;SS Override
 32239                                  	;mov	al,1
 32240 00005CA2 B001                    	mov	al,error_invalid_function
 32241                                  
 32242                                  Exec_Ret_Err:
 32243                                  	;Leave
 32244 00005CA4 89EC                    	mov	sp,bp
 32245 00005CA6 5D                      	pop	bp
 32246                                  	;transfer SYS_RET_ERR
 32247 00005CA7 E9E3A9                  	jmp	SYS_RET_ERR
 32248                                  
 32249                                  	; MSDOS 6.0
 32250                                  ExecReadyJ:
 32251 00005CAA E80318                  	call	ExecReady		; M028
 32252 00005CAD E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 32253                                  
 32254                                  Exec_Check_2:
 32255 00005CB0 3C02                    	cmp	AL,2			
 32256 00005CB2 74E8                    	je	short Exec_Bad_Fun
 32257                                  
 32258                                  	; MSDOS 6.0
 32259 00005CB4 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 32260 00005CB6 74E4                    	je	short Exec_Bad_Fun
 32261                                  	
 32262 00005CB8 3C05                    	cmp	al,5			; M028 ; M030
 32263 00005CBA 74EE                    	je	short ExecReadyJ	; M028
 32264                                  
 32265                                  	;mov	[bp-4],bx
 32266 00005CBC 895EFC                  	mov	Exec_BlkL,BX		; stash args
 32267                                  	;mov	[bp-2],es
 32268 00005CBF 8C46FE                  	mov	Exec_BlkH,ES
 32269                                  	;mov	[bp-5],al
 32270 00005CC2 8846FB                  	mov	Exec_Func,AL
 32271                                  	;mov	byte [bp-6],0
 32272 00005CC5 C646FA00                	mov	Exec_Load_High,0
 32273                                  
 32274                                  	;mov	[bp-26],dx
 32275 00005CC9 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 32276                                  	;mov	[bp-24],ds
 32277 00005CCC 8C5EE8                  	mov	ExecNameH,DS
 32278 00005CCF 89D6                    	mov	SI,DX			; move pointer to convenient place
 32279                                  	;invoke	DStrLen
 32280 00005CD1 E89DB5                  	call	DStrLen
 32281                                  	;mov	[bp-22],cx
 32282 00005CD4 894EEA                  	mov	ExecNameLen,CX		; save length
 32283                                  
 32284                                  	; MSDOS 6.0
 32285 00005CD7 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 32286 00005CDB 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 32287                                  
 32288 00005CDF 30C0                    	xor	AL,AL			; open for reading
 32289 00005CE1 55                      	push	BP
 32290                                  
 32291                                  	; MSDOS 6.0
 32292                                  	;or	byte [ss:DOS_FLAG],1
 32293 00005CE2 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 32294                                  					; the redir that this open call is
 32295                                  					; due to an exec.
 32296                                  
 32297                                  	;invoke	$OPEN			; is the file there?
 32298 00005CE8 E80B13                  	call	_$OPEN
 32299                                  
 32300                                  	; MSDOS 6.0
 32301 00005CEB 9C                      	pushf
 32302                                  	; 02/06/2019
 32303                                  	;and	byte [ss:DOS_FLAG],0FEh
 32304 00005CEC 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 32305 00005CF2 9D                      	popf
 32306                                  
 32307 00005CF3 5D                      	pop	BP
 32308                                  
 32309                                  	; MSDOS 3.3 & MSDOS 6.0
 32310 00005CF4 72AE                    	jc	short Exec_Ret_Err
 32311                                  
 32312                                  	;mov	[bp-8],ax
 32313 00005CF6 8946F8                  	mov	Exec_FH,AX
 32314 00005CF9 89C3                    	mov	BX,AX
 32315 00005CFB 30C0                    	xor	AL,AL
 32316                                  	;invoke	$Ioctl
 32317 00005CFD E8FAC5                  	call	_$IOCTL
 32318 00005D00 7207                    	jc	short Exec_BombJ
 32319                                  
 32320                                  	;test	dl,80h
 32321 00005D02 F6C280                  	test	DL,devid_ISDEV
 32322 00005D05 740A                    	jz	short Exec_Check_Environ
 32323                                  
 32324                                  	;mov	al,2
 32325 00005D07 B002                    	mov	AL,error_file_not_found
 32326                                  Exec_BombJ:
 32327 00005D09 E9CA00                  	jmp	Exec_Bomb
 32328                                  
 32329                                  BadEnv:
 32330                                  	;mov	al,0Ah
 32331 00005D0C B00A                    	mov	AL,error_bad_environment
 32332 00005D0E E9C500                  	jmp	Exec_Bomb
 32333                                  
 32334                                  Exec_Check_Environ:
 32335                                  	;mov	word [bp-18],0
 32336 00005D11 C746EE0000              	mov	Exec_Load_Block,0
 32337                                  	;mov	word [bp-14],0
 32338 00005D16 C746F20000              	mov	Exec_Environ,0
 32339                                  					; overlays... no environment
 32340                                  	;test	byte [bp-5],2
 32341 00005D1B F646FB02                	test	Exec_Func,exec_func_overlay
 32342 00005D1F 7552                    	jnz	short Exec_Read_Header
 32343                                  
 32344                                  	;lds	si,[bp-4]
 32345 00005D21 C576FC                  	lds	SI,Exec_Blk		; get block
 32346 00005D24 8B04                    	mov	ax,[SI]
 32347                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 32348 00005D26 09C0                    	or	AX,AX
 32349 00005D28 750C                    	jnz	short Exec_Scan_Env
 32350                                  
 32351 00005D2A 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 32352                                  	;mov	ax,[44]
 32353 00005D2F A12C00                  	mov	AX,[PDB.ENVIRON]
 32354                                  
 32355                                  ; MSDOS 6.0
 32356                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 32357                                  ;
 32358                                  ; Exec_environ is being correctly initialized after the environment has been
 32359                                  ; allocated and copied form the parent's env. It must not be initialized here.
 32360                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 32361                                  ; parent's environment.
 32362                                  ;	mov	Exec_Environ,AX
 32363                                  ;
 32364                                  ;----------------------------------------------------------------------------
 32365                                  
 32366                                  	;mov	[bp-14],ax
 32367                                  	;mov	Exec_Environ,ax
 32368                                  
 32369 00005D32 09C0                    	or	AX,AX
 32370 00005D34 743D                    	jz	short Exec_Read_Header
 32371                                  
 32372                                  Exec_Scan_Env:
 32373 00005D36 8EC0                    	mov	ES,AX
 32374 00005D38 31FF                    	xor	DI,DI
 32375                                  	;mov	cx,7FFFh ; MSDOS 3.3
 32376 00005D3A B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 32377 00005D3D 30C0                    	xor	AL,AL
 32378                                  
 32379                                  Exec_Get_Environ_Len:
 32380 00005D3F F2AE                    	repnz	scasb			; find that nul byte
 32381 00005D41 75C9                    	jnz	short BadEnv
 32382                                  
 32383 00005D43 49                      	dec	CX			; Dec CX for the next nul byte test
 32384 00005D44 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 32385                                  
 32386 00005D46 AE                      	scasb				; is there another nul byte?
 32387 00005D47 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 32388                                  
 32389 00005D49 57                      	push	DI
 32390                                  	;lea	bx,[DI+11h]
 32391 00005D4A 8D5D11                  	lea	BX,[DI+0Fh+2]
 32392                                  	;add	bx,[bp-22]
 32393 00005D4D 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 32394                                  					; remember argv[0] length
 32395                                  					; round up and remember argc
 32396 00005D50 B104                    	mov	CL,4
 32397 00005D52 D3EB                    	shr	BX,CL			; number of paragraphs needed
 32398 00005D54 06                      	push	ES
 32399                                  	;invoke	$Alloc			; can we get the space?
 32400 00005D55 E84406                  	call	_$ALLOC
 32401 00005D58 1F                      	pop	DS
 32402 00005D59 59                      	pop	CX
 32403                                  
 32404                                  	;jnc	short Exec_Save_Environ
 32405                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 32406                                  	; 17/12/2022
 32407 00005D5A 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 32408                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32409                                  	;jnc	short Exec_Save_Environ
 32410                                  	;jmp	SHORT Exec_No_Mem
 32411                                  
 32412                                  Exec_Save_Environ:
 32413 00005D5C 8EC0                    	mov	ES,AX
 32414                                  	;mov	[bp-14],ax
 32415 00005D5E 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 32416 00005D61 31F6                    	xor	SI,SI
 32417 00005D63 89F7                    	mov	DI,SI
 32418 00005D65 F3A4                    	rep	movsb			; copy the environment
 32419 00005D67 B80100                  	mov	AX,1
 32420 00005D6A AB                      	stosw
 32421                                  	;lds	si,[bp-26]
 32422 00005D6B C576E6                  	lds	SI,ExecName
 32423                                  	;mov	cx,[bp-22]
 32424 00005D6E 8B4EEA                  	mov	CX,ExecNameLen
 32425 00005D71 F3A4                    	rep	movsb
 32426                                  
 32427                                  Exec_Read_Header:
 32428                                  	; We read in the program header into the above data area and
 32429                                  	; determine where in this memory the image will be located.
 32430                                  
 32431                                  	;Context DS
 32432 00005D73 16                      	push	ss
 32433 00005D74 1F                      	pop	ds
 32434                                  	;mov	cx,26
 32435 00005D75 B91A00                  	mov	CX,exec_header_len	; header size
 32436 00005D78 BA[C80F]                	mov	DX,exec_signature
 32437 00005D7B 06                      	push	ES
 32438 00005D7C 1E                      	push	DS
 32439 00005D7D E88304                  	call	ExecRead
 32440 00005D80 1F                      	pop	DS
 32441 00005D81 07                      	pop	ES
 32442 00005D82 7250                    	jc	short Exec_Bad_File
 32443                                  
 32444 00005D84 09C0                    	or	AX,AX
 32445 00005D86 744C                    	jz	short Exec_Bad_File
 32446                                  	;cmp	ax,26
 32447 00005D88 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 32448 00005D8B 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 32449                                  
 32450 00005D8D F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 32451 00005D93 7504                    	jnz	short Exec_Check_Sig
 32452                                  
 32453                                  	;mov	byte [bp-6],0FFh
 32454 00005D95 C646FAFF                	mov	Exec_Load_High,-1
 32455                                  
 32456                                  Exec_Check_Sig:
 32457 00005D99 A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 32458                                  	;cmp	ax,5A4Dh ; 'MZ'
 32459 00005D9C 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 32460 00005D9F 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32461                                  
 32462                                  	;cmp	ax,4D5Ah ; 'ZM'
 32463 00005DA1 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 32464 00005DA4 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32465                                  
 32466                                  Exec_Com_Filej:
 32467 00005DA6 E9E901                  	jmp	Exec_Com_File
 32468                                  
 32469                                  	; We have the program header... determine memory requirements
 32470                                  
 32471                                  Exec_Save_Start:
 32472 00005DA9 A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 32473 00005DAC B105                    	mov	CL,5			; convert to paragraphs
 32474 00005DAE D3E0                    	shl	AX,CL
 32475 00005DB0 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 32476                                  	;mov	[bp-12],ax
 32477 00005DB4 8946F4                  	mov	Exec_Res_Len_Para,AX
 32478                                  
 32479                                  		; Do we need to allocate memory?
 32480                                  		; Yes if function is not load-overlay
 32481                                  
 32482                                  	;test	byte [bp-5],2
 32483 00005DB7 F646FB02                	test	Exec_Func,exec_func_overlay
 32484 00005DBB 7445                    	jz	short Exec_Allocate	; allocation of space
 32485                                  
 32486                                  		; get load address from block
 32487                                  
 32488                                  	;les	di,[bp-4]
 32489 00005DBD C47EFC                  	les	DI,Exec_Blk
 32490 00005DC0 268B05                  	mov	ax,[es:di]
 32491                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 32492                                  	;mov	[bp-20],ax
 32493 00005DC3 8946EC                  	mov	Exec_DMA,AX
 32494                                  
 32495                                  	; 17/12/2022
 32496                                  	;;mov	ax,[es:di+2]
 32497                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 32498                                  	;;mov	[bp-10],ax
 32499                                  	;mov	Exec_Rel_Fac,AX
 32500                                  
 32501                                  	; 17/12/2022
 32502                                  	; 30/11/2022 (!most proper code!)
 32503                                  	;mov	dx,[es:di+2]
 32504 00005DC6 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 32505                                  	;mov	[bp-10],dx
 32506 00005DCA 8956F6                  	mov	Exec_Rel_Fac,dx
 32507                                  	; ax = Exec_DMA
 32508 00005DCD E9DE00                  	jmp	Exec_Find_Res
 32509                                  
 32510                                  ; 17/12/2022
 32511                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32512                                  ; 27/09/2023
 32513                                  %if 0
 32514                                  	; 02/06/2019 - Retro DOS v4.0
 32515                                  	;mov	ax,[bp-20]  ; *+*
 32516                                  	mov	AX,Exec_DMA ; *+*
 32517                                  	; 10/08/2018
 32518                                  	jmp	Exec_Find_Res		; M000
 32519                                  %endif
 32520                                  
 32521                                  Exec_No_Mem:
 32522                                  	;mov	al,8
 32523 00005DD0 B008                    	mov	AL,error_not_enough_memory
 32524 00005DD2 EB02                    	jmp	short Exec_Bomb
 32525                                  
 32526                                  Exec_Bad_File:
 32527                                  	;mov	al,0Bh
 32528 00005DD4 B00B                    	mov	AL,error_bad_format
 32529                                  
 32530                                  Exec_Bomb:
 32531                                  	;mov	bx,[bp-8]
 32532 00005DD6 8B5EF8                  	mov	BX,Exec_FH
 32533 00005DD9 E84004                  	call	Exec_Dealloc
 32534                                  	;LeaveCrit CritMem
 32535 00005DDC E8C4B5                  	call	LCritMEM
 32536                                  	;save	<AX,BP>
 32537 00005DDF 50                      	push	ax
 32538 00005DE0 55                      	push	bp
 32539                                  	;invoke	$CLOSE
 32540 00005DE1 E83E0A                  	call	_$CLOSE
 32541                                  	;restore <BP,AX>
 32542 00005DE4 5D                      	pop	bp
 32543 00005DE5 58                      	pop	ax
 32544 00005DE6 E9BBFE                  	jmp	Exec_Ret_Err
 32545                                  
 32546                                  Exec_Chk_Mem: 
 32547                                  
 32548                                  ; 17/12/2022
 32549                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32550                                  ;%if 0
 32551                                  	; MSDOS 6.0    			; M063 - Start
 32552                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32553                                  	; 10/06/2019
 32554 00005DE9 A0[0203]                	mov	al,[AllocMethod]
 32555                                  	;mov	bl,[ss:ALLOCMSAVE]
 32556 00005DEC 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 32557                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 32558 00005DF0 881E[0203]              	mov	[AllocMethod],bl
 32559                                  	
 32560 00005DF4 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32561 00005DF7 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32562                                  	;				; N: continue
 32563                                  	;
 32564 00005DF9 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32565 00005DFB 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 32566                                  	; 02/06/2019
 32567                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32568 00005DFD A1[8A00]                	mov	ax,[SAVE_AX]
 32569                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 32570                                  					; M063 - End
 32571 00005E00 EB2B                    	jmp	short Exec_Norm_Alloc1
 32572                                  ;%endif
 32573                                  
 32574                                  ; 17/12/2022
 32575                                  %if 0
 32576                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32577                                  	; MSDOS 6.0    			; M063 - Start
 32578                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32579                                  	mov	bl,[ss:ALLOCMSAVE]
 32580                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32581                                  
 32582                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32583                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32584                                  	;				; N: continue
 32585                                  	;
 32586                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32587                                  	jz	short Exec_No_Mem	; N: no memory 
 32588                                  
 32589                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32590                                  	jmp	short Exec_Norm_Alloc	;    Try again
 32591                                  					; M063 - End
 32592                                  %endif
 32593                                  
 32594                                  Exec_Allocate:
 32595                                  	; 09/09/2018
 32596                                  
 32597                                  	; M005 - START
 32598                                  	; If there is no STACK segment for this exe file and if this
 32599                                  	; not an overlay and the resident size is less than 64K - 
 32600                                  	; 256 bytes we shall add 256 bytes to the programs 
 32601                                  	; resident memory requirement and set Exec_SP to this value.
 32602                                  	
 32603                                  	; 17/12/2022
 32604 00005E02 29DB                    	sub	bx,bx ; 0	
 32605                                  
 32606                                  	; MSDOS 6.0
 32607                                  	;;mov	byte [bp-29],0
 32608                                  	;mov	Exec_NoStack,0
 32609                                  	; 17/12/2022
 32610 00005E04 885EE3                  	mov	Exec_NoStack,bl ; 0
 32611 00005E07 391E[D60F]              	cmp	[exec_SS],bx ; 0
 32612                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 32613 00005E0B 7511                    	jne	short ea1		; Y: continue normal processing
 32614 00005E0D 391E[D80F]              	cmp	[exec_SP],bx ; 0
 32615                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 32616 00005E11 750B                    	jne	short ea1		; Y: continue normal processing
 32617                                  
 32618                                  	;inc	byte [bp-29]
 32619 00005E13 FE46E3                  	inc	Exec_NoStack
 32620 00005E16 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 32621 00005E19 7303                    	jae	short ea1		; Y: don't set Exec_SP
 32622                                  
 32623 00005E1B 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 32624                                  ea1:
 32625                                  	; M005 - END
 32626                                  
 32627                                  	; MSDOS 6.0			; M000 - start
 32628                                  	; 20/05/2019
 32629                                  	; (ds = ss = DOSDATA)
 32630 00005E1E F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 32631                                  					; Q: is the alloc strat high_first
 32632 00005E23 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 32633                                  					; Y: set high_only bit
 32634 00005E25 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 32635                                  					; M000 - end
 32636                                  Exec_Norm_Alloc:
 32637 00005E2A A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 32638                                  Exec_Norm_Alloc1:	; 02/06/2019
 32639                                  					; M000: attempt at allocating memory
 32640                                  	; MSDOS 3.3
 32641                                  	;push	ax			; M000
 32642                                  
 32643 00005E2D BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 32644 00005E30 1E                      	push	DS
 32645                                  	;invoke	$Alloc			; should have carry set and BX has max
 32646 00005E31 E86805                  	call	_$ALLOC
 32647 00005E34 1F                      	pop	DS
 32648                                  
 32649                                  	; MSDOS 6.0
 32650 00005E35 A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 32651                                  	; MSDOS 3.3
 32652                                  	;pop	ax			; M000
 32653                                  
 32654 00005E38 83C010                  	add	AX,10h			; room for header
 32655 00005E3B 83FB11                  	cmp	BX,11h			; enough room for a header
 32656                                  	; MSDOS 6.0
 32657 00005E3E 72A9                    	jb	short Exec_Chk_Mem	; M000
 32658                                  	; MSDOS 3.3	
 32659                                  	;jb	short Exec_No_Mem
 32660                                  
 32661 00005E40 39D8                    	cmp	AX,BX			; is there enough for bare image?
 32662                                  	; MSDOS 6.0
 32663 00005E42 77A5                    	ja	short Exec_Chk_Mem	; M000
 32664                                  	; MSDOS 3.3
 32665                                  	;ja	short Exec_No_Mem
 32666                                  
 32667                                  	;test	byte [bp-6],0FFh
 32668 00005E44 F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 32669 00005E48 7518                    	jnz	short Exec_BX_Max	; use max
 32670                                  
 32671                                  	; 09/09/2018
 32672                                  
 32673 00005E4A 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 32674                                  	; MSDOS 6.0
 32675 00005E4E 7299                    	jc	short Exec_Chk_Mem		; M000
 32676                                  	; MSDOS 3.3
 32677                                  	;jc	short Exec_No_Mem
 32678                                  
 32679 00005E50 39D8                    	cmp	AX,BX			; enough space?
 32680                                  	; MSDOS 6.0
 32681 00005E52 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 32682                                  	; MSDOS 3.3
 32683                                  	;ja	short Exec_No_Mem
 32684                                  
 32685 00005E54 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 32686 00005E58 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 32687 00005E5C 7204                    	jc	short Exec_BX_Max
 32688                                  
 32689 00005E5E 39D8                    	cmp	AX,BX
 32690 00005E60 7602                    	jbe	short Exec_Got_Block
 32691                                  
 32692                                  Exec_BX_Max:
 32693 00005E62 89D8                    	mov	AX,BX
 32694                                  
 32695                                  Exec_Got_Block:
 32696                                  	; 03/08/2018 - Retro DOS v3.0
 32697                                  
 32698 00005E64 1E                      	push	DS
 32699 00005E65 89C3                    	mov	BX,AX
 32700                                  	;mov	[bp-16],bx
 32701 00005E67 895EF0                  	mov	Exec_Size,BX
 32702                                  	;invoke	$Alloc			; get the space
 32703 00005E6A E82F05                  	call	_$ALLOC
 32704 00005E6D 1F                      	pop	DS
 32705                                  	; MSDOS 6.0
 32706                                  	;jc	short Exec_Chk_Mem	; M000
 32707                                  	; MSDOS 3.3
 32708                                  	;;jc	short Exec_No_Mem
 32709                                  	; 20/05/2019
 32710 00005E6E 7303                    	jnc	short ea0
 32711 00005E70 E976FF                  	jmp	Exec_Chk_Mem
 32712                                  ea0:
 32713                                  	; MSDOS 6.0
 32714 00005E73 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 32715 00005E77 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 32716                                  
 32717                                  ;M029; Begin changes
 32718                                  ; This code does special handling for programs with no stack segment. If so,
 32719                                  ;check if the current block is larger than 64K. If so, we do not modify
 32720                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 32721                                  ;case Exec_SS is not changed.
 32722                                  
 32723                                  	; MSDOS 6.0
 32724                                  	;cmp	byte [bp-29],0
 32725 00005E7B 807EE300                	cmp	Exec_NoStack,0
 32726                                  	;je	@f
 32727 00005E7F 7412                    	je	short ea2
 32728                                  
 32729 00005E81 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 32730                                  	;jae	@f			; Y: Exec_SP = 0
 32731 00005E85 730C                    	jae	short ea2
 32732                                  
 32733                                  ;Make Exec_SP point at the top of the memory block
 32734                                  
 32735 00005E87 B104                    	mov	cl,4
 32736 00005E89 D3E3                    	shl	bx,cl			; get byte offset
 32737 00005E8B 81EB0001                	sub	bx,100h			; take care of PSP
 32738 00005E8F 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 32739                                  ea2:
 32740                                  ;@@:
 32741                                  ;M029; end changes
 32742                                  
 32743                                  	;mov	[bp-18],ax
 32744 00005E93 8946EE                  	mov	Exec_Load_Block,AX
 32745 00005E96 83C010                  	add	AX,10h
 32746                                  	;test	byte [bp-6],0FFh
 32747 00005E99 F646FAFF                	test	Exec_Load_High,-1
 32748 00005E9D 7409                    	jz	short Exec_Use_AX	; use ax for load info
 32749                                  
 32750                                  	;add	ax,[bp-16]
 32751 00005E9F 0346F0                  	add	AX,Exec_Size		; go to end
 32752                                  	;sub	ax,[bp-12]
 32753 00005EA2 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 32754 00005EA5 83E810                  	sub	AX,10h			; drop off pdb
 32755                                  
 32756                                  Exec_Use_AX:
 32757                                  	;mov	[bp-10],ax
 32758 00005EA8 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 32759                                  	;mov	[bp-20],ax
 32760 00005EAB 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 32761                                  
 32762                                  	; Determine the location in the file of the beginning of
 32763                                  	; the resident
 32764                                  
 32765                                  ; 17/12/2022
 32766                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32767                                  ;%if 0
 32768                                  
 32769                                  Exec_Find_Res:
 32770                                  	; MSDOS 6.0
 32771                                  	;;mov	dx,[bp-20]
 32772                                  	;mov	DX,Exec_DMA ; *+*
 32773                                  	;;mov	[bp-28],dx
 32774                                  	;mov	Exec_DMA_Save,DX
 32775                                  
 32776                                  	; 17/12/2022
 32777                                  	; AX = Exec_DMA
 32778                                  
 32779                                  	; 02/06/2019 - Retro DOS v4.0
 32780                                  	;mov	[bp-28],ax ; *+*
 32781 00005EAE 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 32782                                  
 32783                                  ;%endif
 32784                                  
 32785                                  ; 17/12/2022
 32786                                  %if 0
 32787                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32788                                  Exec_Find_Res:
 32789                                  	;mov	dx,[bp-20]
 32790                                  	mov	DX,Exec_DMA ; *+*
 32791                                  	;mov	[bp-28],dx
 32792                                  	mov	Exec_DMA_Save,DX
 32793                                  %endif
 32794                                  
 32795                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32796 00005EB1 8B16[D00F]              	mov	DX,[exec_par_dir]
 32797 00005EB5 52                      	push	DX
 32798 00005EB6 B104                    	mov	CL,4
 32799 00005EB8 D3E2                    	shl	DX,CL			; low word of location
 32800 00005EBA 58                      	pop	AX
 32801 00005EBB B10C                    	mov	CL,12
 32802 00005EBD D3E8                    	shr	AX,CL			; high word of location
 32803 00005EBF 89C1                    	mov	CX,AX			; CX <- high
 32804                                  
 32805                                  		; Read in the resident image (first, seek to it)
 32806                                  	;mov	bx,[bp-8]
 32807 00005EC1 8B5EF8                  	mov	BX,Exec_FH
 32808 00005EC4 1E                      	push	DS
 32809 00005EC5 30C0                    	xor	AL,AL
 32810                                  	;invoke	$Lseek			; Seek to resident
 32811 00005EC7 E8D40A                  	call	_$LSEEK
 32812 00005ECA 1F                      	pop	DS
 32813 00005ECB 7303                    	jnc	short Exec_Big_Read
 32814                                  
 32815 00005ECD E906FF                  	jmp	Exec_Bomb
 32816                                  
 32817                                  Exec_Big_Read:				; Read resident into memory
 32818                                  	;mov	bx,[bp-12]
 32819 00005ED0 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 32820 00005ED3 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 32821 00005ED7 7203                    	jb	short Exec_Read_OK
 32822                                  
 32823 00005ED9 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 32824                                  
 32825                                  Exec_Read_OK:
 32826                                  	;sub	[bp-12],bx
 32827 00005EDC 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 32828 00005EDF 53                      	push	BX
 32829 00005EE0 B104                    	mov	CL,4
 32830 00005EE2 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 32831 00005EE4 89D9                    	mov	CX,BX			; Count in correct register
 32832 00005EE6 1E                      	push	DS
 32833                                  	;mov	ds,[bp-20]
 32834 00005EE7 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 32835                                  
 32836 00005EEA 31D2                    	xor	DX,DX
 32837 00005EEC 51                      	push	CX			; Save our count
 32838 00005EED E81303                  	call	ExecRead
 32839 00005EF0 59                      	pop	CX			; Get old count to verify
 32840 00005EF1 1F                      	pop	DS
 32841 00005EF2 7248                    	jc	short Exec_Bad_FileJ
 32842                                  
 32843 00005EF4 39C1                    	cmp	CX,AX			; Did we read enough?
 32844 00005EF6 5B                      	pop	BX			; Get paragraph count back
 32845 00005EF7 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 32846                                  
 32847                                  	; The read did not match the request. If we are off by 512
 32848                                  	; bytes or more then the header lied and we have an error.
 32849                                  
 32850 00005EF9 29C1                    	sub	CX,AX
 32851 00005EFB 81F90002                	cmp	CX,512
 32852 00005EFF 733B                    	jae	short Exec_Bad_FileJ
 32853                                  
 32854                                  	; We've read in CX bytes... bump DTA location
 32855                                  
 32856                                  ExecCheckEnd:
 32857                                  	;add	[bp-20],bx
 32858 00005F01 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 32859                                  	;test	word [bp-12],0FFFFh
 32860 00005F04 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 32861 00005F09 75C5                    	jnz	short Exec_Big_Read
 32862                                  
 32863                                  	; The image has now been read in. We must perform relocation
 32864                                  	; to the current location.
 32865                                  
 32866                                  exec_do_reloc:
 32867                                  	;mov	cx,[bp-10]
 32868 00005F0B 8B4EF6                  	mov	CX,Exec_Rel_Fac
 32869 00005F0E A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 32870 00005F11 01C8                    	add	AX,CX			; and relocate him
 32871 00005F13 A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 32872                                  
 32873 00005F16 A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 32874 00005F19 A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 32875                                  
 32876 00005F1C C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 32877 00005F20 A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 32878 00005F23 8CC0                    	mov	AX,ES			; rms;NSS
 32879 00005F25 01C8                    	add	AX,CX			; relocated...
 32880 00005F27 A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 32881                                  
 32882 00005F2A 31C9                    	xor	CX,CX
 32883 00005F2C 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 32884                                  	;mov	bx,[bp-8]
 32885 00005F30 8B5EF8                  	mov	BX,Exec_FH
 32886 00005F33 1E                      	push	DS
 32887 00005F34 31C0                    	xor	AX,AX
 32888                                  	;invoke	$Lseek
 32889 00005F36 E8650A                  	call	_$LSEEK
 32890 00005F39 1F                      	pop	DS
 32891 00005F3A 7303                    	jnc	short exec_get_entries
 32892                                  
 32893                                  Exec_Bad_FileJ:
 32894 00005F3C E995FE                  	jmp	Exec_Bad_File
 32895                                  
 32896                                  exec_get_entries:
 32897 00005F3F 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 32898                                  
 32899                                  exec_read_reloc:
 32900 00005F43 52                      	push	DX
 32901                                  	;mov	dx,OPENBUF
 32902 00005F44 BA[BE03]                	mov	DX,Exec_Internal_Buffer
 32903                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 32904                                  	;mov	cx,396 ; MSDOS 6.0
 32905 00005F47 B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 32906 00005F4A 1E                      	push	DS
 32907 00005F4B E8B502                  	call	ExecRead
 32908 00005F4E 07                      	pop	ES
 32909 00005F4F 5A                      	pop	DX
 32910 00005F50 72EA                    	jc	short Exec_Bad_FileJ
 32911                                  
 32912                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 32913                                  	;mov	cx,99 ;  MSDOS 6.0
 32914 00005F52 B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 32915                                  					; Pointer to byte location in header
 32916                                  	;mov	di,OPENBUF
 32917 00005F55 BF[BE03]                	mov	DI,Exec_Internal_Buffer
 32918                                  	;mov	si,[bp-10]
 32919 00005F58 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 32920                                  
 32921                                  exec_reloc_one:
 32922 00005F5B 09D2                    	or	DX,DX			; Any more entries?
 32923 00005F5D 7416                    	jz	short Exec_Set_PDBJ
 32924                                  
 32925                                  exec_get_addr:
 32926 00005F5F 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 32927 00005F62 8CD8                    	mov	AX,DS			; Relocate address of item
 32928                                  
 32929                                  	; MSDOS 6.0
 32930                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 32931                                  	;add	ax,[bp-28]
 32932 00005F64 0346E4                  	add	AX,Exec_DMA_Save
 32933                                  
 32934 00005F67 8ED8                    	mov	DS,AX
 32935 00005F69 0137                    	add	[BX],SI
 32936 00005F6B 83C704                  	add	DI,4
 32937 00005F6E 4A                      	dec	DX
 32938 00005F6F E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 32939                                  
 32940                                  	; We've exhausted a single buffer's worth. Read in the next
 32941                                  	; piece of the relocation table.
 32942                                  
 32943 00005F71 06                      	push	ES
 32944 00005F72 1F                      	pop	DS
 32945 00005F73 EBCE                    	jmp	short exec_read_reloc
 32946                                  
 32947                                  Exec_Set_PDBJ:
 32948                                  	; MSDOS 6.0
 32949                                  	
 32950                                  	; We now determine if this is a buggy exe packed file and if 
 32951                                  	; so we patch in the right code. Note that fixexepatch will
 32952                                  	; point to a ret if dos loads low. The load segment as 
 32953                                  	; determined above will be in exec_dma_save
 32954                                  	
 32955 00005F75 06                      	push	es
 32956 00005F76 50                      	push	ax			; M030
 32957 00005F77 51                      	push	cx			; M030
 32958                                  	;mov	es,[bp-28]
 32959 00005F78 8E46E4                  	mov	es,Exec_DMA_Save
 32960 00005F7B 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 32961 00005F7F 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 32962 00005F84 36FF16[1212]            	call	word [ss:FixExePatch]
 32963                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32964                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 32965                                  	;call	word [ss:Rational386PatchPtr]
 32966 00005F89 59                      	pop	cx			; M030
 32967 00005F8A 58                      	pop	ax			; M030
 32968 00005F8B 07                      	pop	es
 32969                                  
 32970 00005F8C E9DE00                  	jmp	Exec_Set_PDB
 32971                                  
 32972                                  Exec_No_Memj:
 32973 00005F8F E93EFE                  	jmp	Exec_No_Mem
 32974                                  
 32975                                  	; we have a .COM file. First, determine if we are merely
 32976                                  	; loading an overlay.
 32977                                  
 32978                                  Exec_Com_File:
 32979                                  	;test	byte [bp-5],2
 32980 00005F92 F646FB02                	test	Exec_Func,exec_func_overlay
 32981 00005F96 742D                    	jz	short Exec_Alloc_Com_File
 32982                                  	;lds	si,[bp-4]
 32983 00005F98 C576FC                  	lds	SI,Exec_Blk		; get arg block
 32984 00005F9B AD                      	lodsw				; get load address
 32985                                  	;mov	[bp-20],ax
 32986 00005F9C 8946EC                  	mov	Exec_DMA,AX
 32987 00005F9F B8FFFF                  	mov	AX,0FFFFh
 32988 00005FA2 EB63                    	jmp	short Exec_Read_Block	; read it all!
 32989                                  
 32990                                  Exec_Chk_Com_Mem:			
 32991                                  	; MSDOS 6.0	     		; M063 - Start
 32992 00005FA4 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32993 00005FA8 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 32994 00005FAD 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32995 00005FB2 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32996 00005FB5 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 32997                                  					; N: continue
 32998                                  	
 32999 00005FB7 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33000 00005FB9 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 33001                                  	
 33002                                  	;mov	ax,[bp-18]
 33003 00005FBB 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 33004 00005FBE 31DB                    	xor	bx,bx			; M047: bx => free arena
 33005 00005FC0 E87502                  	call	ChangeOwner		; M047: free this block
 33006                                  	
 33007 00005FC3 EB0E                    	jmp	short Exec_Norm_Com_Alloc
 33008                                  					; M063 - End
 33009                                  	
 33010                                  	; We must allocate the max possible size block (ick!)
 33011                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 33012                                  	; size of block.
 33013                                  
 33014                                  Exec_Alloc_Com_File:
 33015                                  	; MSDOS 6.0			; M000 -start
 33016 00005FC5 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 33017                                  					; Q: is the alloc strat high_first
 33018 00005FCB 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 33019                                  					; Y: set high_only bit
 33020 00005FCD 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 33021                                  					; M000 - end
 33022                                  Exec_Norm_Com_Alloc:			; M000
 33023                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33024 00005FD3 BBFFFF                  	mov	BX,0FFFFh
 33025                                  	;invoke	$Alloc			; largest piece available as error
 33026 00005FD6 E8C303                  	call	_$ALLOC
 33027 00005FD9 09DB                    	or	BX,BX
 33028                                  	; MSDOS 6.0
 33029 00005FDB 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 33030                                  	; MSDOS 3.3
 33031                                  	;jz	short Exec_No_Memj
 33032                                  
 33033                                  	;mov	[bp-16],bx
 33034 00005FDD 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 33035 00005FE0 53                      	push	BX
 33036                                  	;invoke	$ALLOC			; largest piece available
 33037 00005FE1 E8B803                  	call	_$ALLOC
 33038 00005FE4 5B                      	pop	BX			; get size of block...
 33039                                  	;mov	[bp-18],ax
 33040 00005FE5 8946EE                  	mov	Exec_Load_Block,AX
 33041                                  
 33042 00005FE8 83C010                  	add	AX,10h			; increment for header
 33043                                  	;mov	[bp-20],ax
 33044 00005FEB 8946EC                  	mov	Exec_DMA,AX
 33045                                  
 33046 00005FEE 31C0                    	xor	AX,AX			; presume 64K read...
 33047 00005FF0 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 33048 00005FF4 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 33049                                  
 33050 00005FF6 89D8                    	mov	AX,BX			; convert size to bytes
 33051 00005FF8 B104                    	mov	CL,4
 33052 00005FFA D3E0                    	shl	AX,CL
 33053                                  	; 17/12/2022
 33054                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33055                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 33056                                  	; MSDOS 5.0
 33057                                  	;cmp	AX,100h   
 33058                                  	; 02/06/2019 - Retro DOS v4.0
 33059                                  	; MSDOS 6.0
 33060                                          ; 17/12/2022
 33061 00005FFC 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 33062 00005FFF 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33063                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 33064                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 33065                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33066                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 33067                                  
 33068                                  					; M047: size of the block is < 64K
 33069 00006001 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 33070                                  
 33071                                  Exec_Read_Com:
 33072                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33073 00006004 2D0001                  	sub	AX,100h 		; remember size of psp
 33074                                  Exec_Read_Block:
 33075 00006007 50                      	push	AX			; save number to read
 33076                                  	;mov	bx,[bp-8]
 33077 00006008 8B5EF8                  	mov	BX,Exec_FH		; of com file
 33078 0000600B 31C9                    	xor	CX,CX			; but seek to 0:0
 33079 0000600D 89CA                    	mov	DX,CX
 33080 0000600F 31C0                    	xor	AX,AX			; seek relative to beginning
 33081                                  	;invoke	$Lseek			; back to beginning of file
 33082 00006011 E88A09                  	call	_$LSEEK
 33083 00006014 59                      	pop	CX			; number to read
 33084                                  	;mov	ds,[bp-20]
 33085 00006015 8E5EEC                  	mov	DS,Exec_DMA
 33086 00006018 31D2                    	xor	DX,DX
 33087 0000601A 51                      	push	CX
 33088 0000601B E8E501                  	call	ExecRead
 33089 0000601E 5E                      	pop	SI			; get number of bytes to read
 33090 0000601F 7303                    	jnc	short OkRead
 33091 00006021 E9B0FD                  	jmp	Exec_Bad_File
 33092                                  
 33093                                  	; 10/09/2018
 33094                                  OkRead:
 33095 00006024 39F0                    	cmp	AX,SI			; did we read them all?
 33096                                  	; MSDOS 6.0
 33097                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 33098                                  	; MSDOS 3.3
 33099                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 33100 00006026 7503                    	jne	short OkRead2
 33101 00006028 E979FF                  	jmp	Exec_Chk_Com_Mem
 33102                                  OkRead2:
 33103                                  	; MSDOS 6.0
 33104 0000602B 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 33105 00006030 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 33106                                  
 33107                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33108                                  	;test	byte [bp-5],2
 33109 00006035 F646FB02                	test	Exec_Func,exec_func_overlay
 33110 00006039 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 33111                                  
 33112                                  	;mov	ax,[bp-20]
 33113 0000603B 8B46EC                  	mov	AX,Exec_DMA
 33114 0000603E 83E810                  	sub	AX,10h
 33115 00006041 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 33116 00006045 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 33117                                  
 33118                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 33119                                  	; of 0 on stack.
 33120                                  
 33121 0000604C 81C6FE00                	add	SI,0FEh 		; make room for stack
 33122                                  
 33123                                  	; MSDOS 6.0
 33124 00006050 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 33125 00006053 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 33126 00006055 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 33127                                  
 33128                                  Exec_St_Ok:
 33129                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33130 00006059 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 33131 0000605E 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 33132 00006062 8ED8                    	mov	DS,AX
 33133 00006064 C7040000                	mov	WORD [SI],0		; 0 for return
 33134                                  
 33135                                  	; MSDOS 6.0
 33136                                  
 33137                                  	; M068
 33138                                  	;
 33139                                  	; We now determine if this is a Copy Protected App. If so the 
 33140                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 33141                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 33142                                  
 33143 00006068 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 33144                                  
 33145                                  Exec_Set_PDB:
 33146                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33147                                  	;mov	bx,[bp-8]
 33148 0000606D 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 33149 00006070 E8A901                  	call	Exec_Dealloc
 33150 00006073 55                      	push	BP
 33151                                  	;invoke	$Close			; release the jfn
 33152 00006074 E8AB07                  	call	_$CLOSE
 33153 00006077 5D                      	pop	BP
 33154 00006078 E89301                  	call	Exec_Alloc
 33155                                  	;test	byte [bp-5],2
 33156 0000607B F646FB02                	test	Exec_Func,exec_func_overlay
 33157 0000607F 743A                    	jz	short Exec_Build_Header
 33158                                  
 33159                                  	; MSDOS 6.0
 33160 00006081 E8C201                  	call	Scan_Execname
 33161 00006084 E8D601                  	call	Scan_Special_Entries
 33162                                  ;SR;
 33163                                  ;The current lie strategy uses the PSP to store the lie version. However,
 33164                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 33165                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 33166                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 33167                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 33168                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 33169                                  ;issues the version check, it gets the lie version until the next overlay
 33170                                  ;call is issued.
 33171                                  
 33172 00006087 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 33173 0000608D 7426                    	je	short norm_ovl		;yes, no special handling
 33174 0000608F 56                      	push	si
 33175 00006090 06                      	push	es
 33176 00006091 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 33177                                  	 
 33178                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 33179 00006096 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 33180 0000609A 7411                    	je	short sysinit_done	;no, Sysinit is finished
 33181                                  	
 33182 0000609C 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 33183 000060A1 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 33184 000060A6 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 33185                                  		;;; PDB.VERSION
 33186 000060AB EB06                    	jmp	short setver_done
 33187                                  sysinit_done:
 33188 000060AD 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 33189                                  setver_done:
 33190 000060B3 07                      	pop	es
 33191 000060B4 5E                      	pop	si
 33192                                  norm_ovl:
 33193                                  	;leave
 33194 000060B5 89EC                    	mov	sp,bp		
 33195 000060B7 5D                      	pop	bp
 33196                                  
 33197                                  	;transfer SYS_RET_OK		; overlay load -> done
 33198 000060B8 E9C9A5                  	jmp	SYS_RET_OK
 33199                                  
 33200                                  Exec_Build_Header:
 33201                                  	;mov	dx,[bp-18]
 33202 000060BB 8B56EE                  	mov	DX,Exec_Load_Block
 33203                                  					; assign the space to the process
 33204                                  	;mov	si,1
 33205 000060BE BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 33206                                  	;mov	ax,[bp-14]
 33207 000060C1 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 33208 000060C4 09C0                    	or	AX,AX
 33209 000060C6 7405                    	jz	short No_Owner		; no environment
 33210                                  
 33211 000060C8 48                      	dec	AX			; point to header
 33212 000060C9 8ED8                    	mov	DS,AX
 33213 000060CB 8914                    	mov	[SI],DX 		; assign ownership
 33214                                  No_Owner:
 33215                                  	;mov	ax,[bp-18]
 33216                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 33217                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 33218                                  	; 17/12/2022
 33219 000060CD 89D0                    	mov	ax,dx ; 06/06/2019
 33220                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 33221                                  	
 33222 000060CF 48                      	dec	AX
 33223 000060D0 8ED8                    	mov	DS,AX			; point to header
 33224 000060D2 8914                    	mov	[SI],DX 		; assign ownership
 33225                                  
 33226                                  	; MSDOS 6.0
 33227 000060D4 1E                      	push	DS			;AN000;MS. make ES=DS
 33228 000060D5 07                      	pop	ES			;AN000;MS.
 33229                                  	;mov	di,8
 33230 000060D6 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 33231 000060D9 E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 33232                                  					;	   ds:si->name, cx=name length
 33233 000060DC 51                      	push	CX			;AN007;;MS. save for fake version
 33234 000060DD 56                      	push	SI			;AN007;;MS. save for fake version
 33235                                  
 33236                                  MoveName:				;AN000;
 33237 000060DE AC                      	lodsb				;AN000;;MS. get char
 33238 000060DF 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 33239 000060E1 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 33240                                  					;AN000;
 33241 000060E3 AA                      	stosb				;AN000;;MS. move char
 33242                                  					; MSKK bug fix - limit length copied
 33243 000060E4 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 33244 000060E7 7302                    	jae	short Mem_Done		; jump if so
 33245                                  	;
 33246 000060E9 E2F3                    	loop	MoveName		;AN000;;MS. continue
 33247                                  Mem_Done:				;AN000;
 33248 000060EB 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 33249                                  	;cmp	di,16
 33250 000060ED 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 33251 000060F0 7301                    	jae	short Fill8		;AN000;MS.
 33252                                  	
 33253 000060F2 AA                      	stosb				;AN000;MS.
 33254                                  	
 33255                                  Fill8:					;AN000;
 33256 000060F3 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 33257 000060F4 59                      	pop	CX			;AN007;MS.
 33258                                  	
 33259 000060F5 E86501                  	call	Scan_Special_Entries	;AN007;MS.
 33260                                  
 33261                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33262 000060F8 52                      	push	DX
 33263                                  	;mov	si,[bp-16]
 33264 000060F9 8B76F0                  	mov	SI,Exec_Size
 33265 000060FC 01D6                    	add	SI,DX
 33266                                  	;Invoke	$Dup_PDB		; ES is now PDB
 33267 000060FE E80EB0                  	call	_$DUP_PDB
 33268 00006101 5A                      	pop	DX
 33269                                  
 33270                                  	;push	word [bp-14]
 33271 00006102 FF76F2                  	push	Exec_Environ
 33272                                  	;pop	WORD [ES:2Ch]
 33273 00006105 268F062C00              	pop	word [ES:PDB.ENVIRON]
 33274                                  
 33275                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 33276                                  					; version number in PSP
 33277 0000610A 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 33278 0000610F 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 33279                                  		; PDB.VERSION
 33280                                  
 33281                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 33282                                  	;lds	si,[bp-4]
 33283 00006114 C576FC                  	lds	SI,Exec_Blk		; get the block
 33284 00006117 1E                      	push	DS			; save its location
 33285 00006118 56                      	push	SI
 33286                                  	;lds	si,[si+6]
 33287 00006119 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 33288                                  
 33289                                  	; DS points to user space 5C FCB
 33290                                  
 33291 0000611C B90C00                  	mov	CX,12			; copy drive, name and ext
 33292 0000611F 51                      	push	CX
 33293 00006120 BF5C00                  	mov	DI,5Ch
 33294 00006123 8A1C                    	mov	BL,[SI]
 33295 00006125 F3A4                    	rep	movsb
 33296                                  
 33297                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 33298                                  
 33299 00006127 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 33300 00006129 AB                      	stosw
 33301 0000612A AB                      	stosw
 33302                                  
 33303                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 33304                                  
 33305 0000612B 59                      	pop	CX
 33306 0000612C 5E                      	pop	SI			; get block
 33307 0000612D 1F                      	pop	DS
 33308 0000612E 1E                      	push	DS			; save (again)
 33309 0000612F 56                      	push	SI
 33310                                  	;lds	si,[si+0Ah]
 33311 00006130 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 33312                                  
 33313                                  	; DS points to user space 6C FCB
 33314                                  
 33315 00006133 8A3C                    	mov	BH,[SI] 		; do same as above
 33316 00006135 F3A4                    	rep	movsb
 33317 00006137 AB                      	stosw
 33318 00006138 AB                      	stosw
 33319 00006139 5E                      	pop	SI			; get block (last time)
 33320 0000613A 1F                      	pop	DS
 33321                                  	;ld	si,[si+2]
 33322 0000613B C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 33323                                  
 33324                                  	; DS points to user space 80 command line
 33325                                  
 33326 0000613E 80C980                  	or	CL,80h
 33327 00006141 89CF                    	mov	DI,CX
 33328 00006143 F3A4                    	rep	movsb			; Wham!
 33329                                  
 33330                                  	; Process BX into default AX (validity of drive specs on args).
 33331                                  	; We no longer care about DS:SI.
 33332                                  
 33333 00006145 FEC9                    	dec	CL			; get 0FFh in CL
 33334 00006147 88F8                    	mov	AL,BH
 33335 00006149 30FF                    	xor	BH,BH
 33336                                  	;invoke	GetVisDrv
 33337 0000614B E8410A                  	call	GetVisDrv
 33338 0000614E 7302                    	jnc	short Exec_BL
 33339                                  
 33340 00006150 88CF                    	mov	BH,CL
 33341                                  
 33342                                  Exec_BL:
 33343 00006152 88D8                    	mov	AL,BL
 33344 00006154 30DB                    	xor	BL,BL
 33345                                  	;invoke	GetVisDrv
 33346 00006156 E8360A                  	call	GetVisDrv
 33347 00006159 7302                    	jnc	short Exec_Set_Return
 33348                                  
 33349 0000615B 88CB                    	mov	BL,CL
 33350                                  
 33351                                  Exec_Set_Return:
 33352                                  	;invoke	Get_User_Stack			; get his return address
 33353 0000615D E86AA3                  	call	Get_User_Stack
 33354                                  
 33355                                  	;push	word [si+14h]
 33356 00006160 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33357                                  	;push	word [si+12h]
 33358 00006163 FF7412                  	push	word [SI+user_env.user_IP]
 33359                                  	;push	word [si+14h]
 33360 00006166 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33361                                  	;push	word [si+12h]
 33362 00006169 FF7412                  	push	word [SI+user_env.user_IP]
 33363                                  	;pop	word [ES:0Ah]
 33364 0000616C 268F060A00              	pop	WORD [ES:PDB.EXIT]
 33365                                  	;pop	word [ES:0Ch]
 33366 00006171 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 33367                                  
 33368 00006176 31C0                    	xor	AX,AX
 33369 00006178 8ED8                    	mov	DS,AX
 33370                                  					; save them where we can get them
 33371                                  					; later when the child exits.
 33372                                  	;pop	word [88h]
 33373 0000617A 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 33374                                  	;pop	word [90h]
 33375 0000617E 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 33376                                  
 33377 00006182 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 33378 00006189 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 33379 0000618E 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 33380                                  
 33381                                  	;test	byte [bp-5],1
 33382 00006193 F646FB01                	test	Exec_Func,exec_func_no_execute
 33383 00006197 7427                    	jz	short exec_go
 33384                                  
 33385 00006199 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 33386                                  	;les	di,[bp-4]
 33387 0000619E C47EFC                  	les	DI,Exec_Blk		; and block for return
 33388                                  	;mov	[es:di+10h],ds
 33389 000061A1 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 33390                                  
 33391 000061A5 4E                      	dec	SI			; 'push' default AX
 33392 000061A6 4E                      	dec	SI
 33393 000061A7 891C                    	mov	[SI],BX 		; save default AX reg
 33394                                  	;mov	[es:di+0Eh], si
 33395 000061A9 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 33396                                  
 33397 000061AD 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 33398                                  	;mov	[es:di+14h],ds
 33399 000061B2 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 33400                                  	;mov	[es:di+12h],ax
 33401 000061B6 26894512                	mov	[ES:DI+EXEC1.IP],AX
 33402                                  	
 33403                                  	;leave
 33404 000061BA 89EC                    	mov	sp,bp
 33405 000061BC 5D                      	pop	bp	
 33406                                  
 33407                                  	;transfer SYS_RET_OK
 33408 000061BD E9C4A4                  	jmp	SYS_RET_OK
 33409                                  
 33410                                  exec_go:
 33411 000061C0 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 33412 000061C5 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 33413 000061CA 8CC0                    	mov	AX,ES
 33414                                  
 33415                                  	; MSDOS 6.0
 33416 000061CC 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 33417 000061D2 741A                    	je	short Xfer_To_User	; N: transfer control to user
 33418                                  
 33419 000061D4 1E                      	push	ds			; Y: control must go to low mem stub
 33420                                  		
 33421 000061D5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 33422                                  					;    control to user 
 33423 000061DA 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 33424                                  					; M004: Set bit to signal int 21
 33425                                  					; ah = 25 & ah= 49. See dossym.inc 
 33426                                  					; under TAG M003 & M009 for 
 33427                                  					; explanation
 33428 000061DF 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 33429                                  					; M068: going to be turned OFF.
 33430                                  	
 33431 000061E3 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 33432 000061E5 1F                      	pop	ds
 33433                                  	
 33434 000061E6 50                      	push	ax			; ret far into the low mem stub
 33435 000061E7 B8[1511]                	mov	ax,disa20_xfer
 33436 000061EA 50                      	push	ax
 33437 000061EB 8CC0                    	mov	AX,ES			; restore ax
 33438 000061ED CB                      	retf
 33439                                  
 33440                                  Xfer_To_User:
 33441                                  	; DS:SI points to entry point
 33442                                  	; AX:DI points to initial stack
 33443                                  	; DX has PDB pointer
 33444                                  	; BX has initial AX value
 33445                                  
 33446 000061EE FA                      	cli
 33447                                  	; 15/08/2018
 33448 000061EF 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 33449                                  
 33450 000061F5 8ED0                    	mov	SS,AX			; set up user's stack
 33451 000061F7 89FC                    	mov	SP,DI			; and SP
 33452 000061F9 FB                      	sti
 33453                                  
 33454 000061FA 1E                      	push	DS			; fake long call to entry
 33455 000061FB 56                      	push	SI
 33456 000061FC 8EC2                    	mov	ES,DX			; set up proper seg registers
 33457 000061FE 8EDA                    	mov	DS,DX
 33458 00006200 89D8                    	mov	AX,BX			; set up proper AX
 33459                                  
 33460 00006202 CB                      	retf
 33461                                  
 33462                                  ; 04/08/2018 - Retro DOS v3.0
 33463                                  
 33464                                  ;----------------------------------------------------------------------------
 33465                                  ;
 33466                                  ;----------------------------------------------------------------------------
 33467                                  
 33468                                  ExecRead:
 33469 00006203 E81600                  	CALL	Exec_Dealloc
 33470                                  	;mov	bx,[bp-8]
 33471 00006206 8B5EF8                  	MOV	bx,Exec_FH
 33472                                  
 33473 00006209 55                      	PUSH	BP
 33474 0000620A E82607                  	call	_$READ
 33475 0000620D 5D                      	POP	BP
 33476                                  
 33477                                  	;CALL	Exec_Alloc
 33478                                  	;retn
 33479                                  	; 18/12/2022
 33480                                  	;jmp	short Exec_Alloc
 33481                                  
 33482                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 33483                                  
 33484                                  ;----------------------------------------------------------------------------
 33485                                  ;
 33486                                  ;----------------------------------------------------------------------------
 33487                                  
 33488                                  Exec_Alloc:
 33489 0000620E 53                      	push	BX
 33490                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33491                                  	; 20/05/2019 - Retro DOS v4.0
 33492                                  	; MSDOS 6.0
 33493 0000620F 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 33494 00006214 E81000                  	call	ChangeOwners
 33495 00006217 E889B1                  	call	LCritMEM
 33496 0000621A 5B                      	pop	BX
 33497 0000621B C3                      	retn
 33498                                  
 33499                                  ;----------------------------------------------------------------------------
 33500                                  ;
 33501                                  ;----------------------------------------------------------------------------
 33502                                  
 33503                                  Exec_Dealloc:
 33504 0000621C 53                      	push	BX
 33505                                  	;mov	bx,0
 33506 0000621D 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 33507 0000621F E866B1                  	call	ECritMEM
 33508 00006222 E80200                  	call	ChangeOwners
 33509 00006225 5B                      	pop	BX
 33510 00006226 C3                      	retn
 33511                                  
 33512                                  ; 18/12/2022
 33513                                  %if 0
 33514                                  ;----------------------------------------------------------------------------
 33515                                  ;
 33516                                  ;----------------------------------------------------------------------------
 33517                                  
 33518                                  Exec_Alloc:
 33519                                  	push	BX
 33520                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33521                                  	; 20/05/2019 - Retro DOS v4.0
 33522                                  	; MSDOS 6.0
 33523                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 33524                                  	call	ChangeOwners
 33525                                  	call	LCritMEM
 33526                                  	pop	BX
 33527                                  	retn
 33528                                  
 33529                                  %endif
 33530                                  
 33531                                  ;----------------------------------------------------------------------------
 33532                                  ;
 33533                                  ;----------------------------------------------------------------------------
 33534                                  
 33535                                  ChangeOwners:
 33536 00006227 9C                      	pushf
 33537 00006228 50                      	push	AX
 33538                                  	;mov	ax,[bp-14]
 33539 00006229 8B46F2                  	mov	AX,Exec_Environ
 33540 0000622C E80900                  	call	ChangeOwner
 33541                                  	;mov	ax,[bp-18]
 33542 0000622F 8B46EE                  	mov	AX,Exec_Load_Block
 33543 00006232 E80300                  	call	ChangeOwner
 33544 00006235 58                      	pop	AX
 33545 00006236 9D                      	popf
 33546                                  chgown_retn:
 33547 00006237 C3                      	retn
 33548                                  
 33549                                  ;----------------------------------------------------------------------------
 33550                                  ;
 33551                                  ;----------------------------------------------------------------------------
 33552                                  
 33553                                  ChangeOwner:
 33554 00006238 09C0                    	or	AX,AX			; is area allocated?
 33555 0000623A 74FB                    	jz	short chgown_retn	; no, do nothing
 33556 0000623C 48                      	dec	AX
 33557 0000623D 1E                      	push	DS
 33558 0000623E 8ED8                    	mov	DS,AX
 33559 00006240 891E0100                	mov	[ARENA.OWNER],BX
 33560 00006244 1F                      	pop	DS
 33561 00006245 C3                      	retn
 33562                                  
 33563                                  ;----------------------------------------------------------------------------
 33564                                  ;
 33565                                  ;----------------------------------------------------------------------------
 33566                                  
 33567                                  ; 20/05/2019 - Retro DOS v4.0
 33568                                  
 33569                                  	; MSDOS 6.0
 33570                                  Scan_Execname:
 33571 00006246 C576E6                  	lds	SI,ExecName		; DS:SI points to name
 33572                                  Scan_Execname1:				; M028
 33573                                  Save_Begin:				;
 33574 00006249 89F1                    	mov	CX,SI			; CX= starting addr
 33575                                  Scan0:					;
 33576 0000624B AC                      	lodsb				; get char
 33577                                  
 33578 0000624C 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 33579 0000624E 74F9                    	jz	short Save_Begin	; yes, save si
 33580 00006250 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 33581 00006252 74F5                    	jz	short Save_Begin	; yes, save si
 33582 00006254 3C00                    	cmp	AL,0			; is end of name
 33583 00006256 75F3                    	jnz	short Scan0		; no, continue scanning
 33584 00006258 29CE                    	sub	SI,CX			; get name's length
 33585 0000625A 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 33586                                  
 33587 0000625C C3                      	retn
 33588                                  
 33589                                  ;----------------------------------------------------------------------------
 33590                                  ;
 33591                                  ;----------------------------------------------------------------------------
 33592                                  
 33593                                  ; 20/05/2019 - Retro DOS v4.0
 33594                                  
 33595                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33596                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 33597                                  
 33598                                  	; MSDOS 6.0
 33599                                  
 33600                                  Scan_Special_Entries:
 33601                                  
 33602 0000625D 49                      	dec	CX			; cx= name length
 33603                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 33604                                  					;reset to current version
 33605                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 33606                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 33607                                  	;mov	word [ss:SPECIAL_VERSION],5
 33608                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 33609                                  
 33610                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 33611 0000625E 36C706[BD0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 33612                                  				; 1506h for Retro DOS v4.0 (MSDOS 6.21)
 33613                                  ;***	call	Reset_Version
 33614                                  
 33615                                  ;M060	push	SS
 33616                                  ;M060	pop	ES
 33617                                  
 33618 00006265 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 33619 0000626A 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 33620 0000626C 09F8                    	or	AX,DI			;M060; be sure the table exists
 33621 0000626E 7427                    	jz	short End_List		;M060; If ZR then no table
 33622                                  
 33623                                  GetEntries:
 33624 00006270 268A05                  	mov	AL,[ES:DI]		; end of list
 33625 00006273 08C0                    	or	AL,AL
 33626 00006275 7420                    	jz	short End_List		; yes
 33627                                  
 33628 00006277 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 33629 0000627C 38C8                    	cmp	AL,CL			; same length ?
 33630 0000627E 751B                    	jnz	short SkipOne 		; no
 33631                                  
 33632 00006280 47                      	inc	DI			; es:di -> special name
 33633 00006281 51                      	push	CX			; save length and name addr
 33634 00006282 56                      	push	SI
 33635                                  
 33636                                  ; M050 - BEGIN
 33637                                  
 33638 00006283 50                      	push	ax			; save len
 33639                                  sse_next_char:
 33640 00006284 AC                      	lodsb
 33641 00006285 E8BCEE                  	call	UCase
 33642 00006288 AE                      	scasb
 33643 00006289 750D                    	jne	short Not_Matched
 33644 0000628B E2F7                    	loop	sse_next_char
 33645                                  	
 33646                                  ;	repz	cmpsb			; same name ?
 33647                                  ;	jnz	short Not_Matched	; no
 33648                                  
 33649 0000628D 58                      	pop	ax			; take len off the stack
 33650                                  
 33651                                  ; M050 - END
 33652                                  
 33653 0000628E 268B05                  	mov	AX,[ES:DI]		; get special version
 33654 00006291 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 33655                                  
 33656                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 33657                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 33658                                  
 33659 00006295 5E                      	pop	SI
 33660 00006296 59                      	pop	CX
 33661                                  	; 18/12/2022
 33662                                  	;jmp	SHORT End_List
 33663                                  
 33664                                  	; 18/12/2022
 33665                                  End_List:
 33666 00006297 C3                      	retn
 33667                                  
 33668                                  Not_Matched:
 33669 00006298 58                      	pop	ax			; get len from stack ; M050
 33670 00006299 5E                      	pop	SI			; restore si,cx
 33671 0000629A 59                      	pop	CX
 33672                                  
 33673                                  SkipOne:
 33674 0000629B 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 33675 000062A0 30E4                    	xor	AH,AH			; position to next entry
 33676 000062A2 01C7                    	add	DI,AX
 33677                                  
 33678 000062A4 83C703                  	add	DI,3			; DI -> next entry length
 33679                                  ;***	add	DI,4			; DI -> next entry length
 33680                                  
 33681 000062A7 EBC7                    	jmp	short GetEntries
 33682                                  
 33683                                  	; 18/12/2022
 33684                                  ;End_List:
 33685                                  	;retn
 33686                                  
 33687                                  ; 04/08/2018 - Retro DOS v3.0
 33688                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 33689                                  
 33690                                  ;----------------------------------------------------------------------------
 33691                                  ;SUBTTL Terminate and stay resident handler
 33692                                  ;
 33693                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 33694                                  ;	    truncate the current block.
 33695                                  ;
 33696                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 33697                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 33698                                  ;	    and restoring the vectors.
 33699                                  ;
 33700                                  ;----------------------------------------------------------------------------
 33701                                  
 33702                                  	; 20/05/2019 - Retro DOS v4.0
 33703                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 33704                                  
 33705                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33706                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 33707                                  
 33708                                  _$KEEP_PROCESS:
 33709 000062A9 50                      	push	AX			; keep exit code around
 33710                                  	;mov	byte [SS:EXIT_TYPE],3
 33711 000062AA 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 33712 000062B0 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 33713 000062B5 83FA06                  	cmp	DX,6h			; keep enough space around for system
 33714 000062B8 7303                    	jae	short Keep_Shrink	; info
 33715                                  
 33716 000062BA BA0600                  	mov	DX,6h
 33717                                  
 33718                                  Keep_Shrink:
 33719 000062BD 89D3                    	mov	BX,DX
 33720 000062BF 53                      	push	BX
 33721 000062C0 06                      	push	ES
 33722 000062C1 E82E02                  	call	_$SETBLOCK		; ignore return codes.
 33723 000062C4 1F                      	pop	DS
 33724 000062C5 5B                      	pop	BX
 33725 000062C6 7207                    	jc	short Keep_Done		; failed on modification
 33726                                  
 33727 000062C8 8CD8                    	mov	AX,DS
 33728 000062CA 01D8                    	add	AX,BX
 33729                                  	;mov	[2],ax
 33730 000062CC A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 33731                                  
 33732                                  Keep_Done:
 33733 000062CF 58                      	pop	AX
 33734 000062D0 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 33735                                  
 33736                                  ;----------------------------------------------------------------------------
 33737                                  ;
 33738                                  ;----------------------------------------------------------------------------
 33739                                  
 33740                                  STAY_RESIDENT:
 33741                                  	;mov	ax,3100h
 33742 000062D2 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 33743 000062D5 83C20F                  	add	DX,15
 33744 000062D8 D1DA                    	rcr	DX,1
 33745 000062DA B103                    	mov	CL,3
 33746 000062DC D3EA                    	shr	DX,CL
 33747                                  
 33748 000062DE E966A0                  	jmp	COMMAND
 33749                                  
 33750                                  ;----------------------------------------------------------------------------
 33751                                  ;SUBTTL $EXIT - return to parent process
 33752                                  ;   Assembler usage:
 33753                                  ;	    MOV     AL, code
 33754                                  ;	    MOV     AH, Exit
 33755                                  ;	    INT     int_command
 33756                                  ;   Error return:
 33757                                  ;	    None.
 33758                                  ;
 33759                                  ;----------------------------------------------------------------------------
 33760                                  
 33761                                  	; 20/05/2019 - Retro DOS v4.0
 33762                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 33763                                  
 33764                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33765                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 33766                                  _$EXIT:
 33767                                  	; 04/08/2018 - Retro DOS v3.0
 33768                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 33769 000062E1 30E4                    	xor	AH,AH
 33770 000062E3 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 33771 000062E8 08E4                    	or	AH,AH
 33772                                  	;mov	BYTE [SS:EXIT_TYPE],0
 33773 000062EA 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 33774 000062F0 7406                    	jz	short exit_inner
 33775                                  	;mov	BYTE [SS:EXIT_TYPE],1
 33776 000062F2 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 33777                                  
 33778                                  	;entry	Exit_inner
 33779                                  exit_inner:
 33780 000062F8 E8CFA1                  	call	Get_User_Stack		;PBUGBUG
 33781                                  
 33782 000062FB 36FF36[3003]            	push	word [ss:CurrentPDB]
 33783                                  	;pop	word [si+14h]
 33784 00006300 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 33785 00006303 EB08                    	jmp	short abort_inner
 33786                                  
 33787                                  ;BREAK <$ABORT -- Terminate a process>
 33788                                  ;----------------------------------------------------------------------------
 33789                                  ; Inputs:
 33790                                  ;	user_CS:00 must point to valid program header block
 33791                                  ; Function:
 33792                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 33793                                  ;	to the terminate address
 33794                                  ; Returns:
 33795                                  ;	TO THE TERMINATE ADDRESS
 33796                                  ;----------------------------------------------------------------------------
 33797                                  
 33798                                  _$ABORT:
 33799 00006305 30C0                    	xor	AL,AL
 33800                                  	;mov	byte [SS:EXIT_TYPE],0
 33801                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 33802 00006307 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 33803                                  
 33804                                  	; abort_inner must have AL set as the exit code! The exit type
 33805                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 33806                                  	; to be correct as the one that is terminating.
 33807                                  
 33808                                  abort_inner:
 33809 0000630D 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 33810 00006312 36A3[3403]              	mov	[SS:exit_code],AX
 33811 00006316 E8B1A1                  	call	Get_User_Stack
 33812                                  
 33813                                  	;mov	ds,[si+14h]
 33814 00006319 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 33815 0000631C 31C0                    	xor	AX,AX
 33816 0000631E 8EC0                    	mov	ES,AX
 33817                                  	;mov	si,10
 33818 00006320 BE0A00                  	mov	SI,SAVEXIT
 33819                                  	;mov	di,88h
 33820 00006323 BF8800                  	mov	DI,addr_int_terminate
 33821 00006326 A5                      	movsw
 33822 00006327 A5                      	movsw
 33823 00006328 A5                      	movsw
 33824 00006329 A5                      	movsw
 33825 0000632A A5                      	movsw
 33826 0000632B A5                      	movsw
 33827 0000632C E930F2                  	jmp	reset_environment
 33828                                  
 33829                                  ;----------------------------------------------------------------------------
 33830                                  ;
 33831                                  ; fixexepatch will point to this is DOS loads low. 
 33832                                  ;
 33833                                  ;----------------------------------------------------------------------------
 33834                                  ; MSDOS 6.0
 33835                                  
 33836                                  ; 29/04/2019 - Retro DOS v4.0
 33837                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 33838                                  
 33839                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33840                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 33841                                  
 33842                                  RetExePatch: ; proc near
 33843                                  	
 33844 0000632F C3                      	retn
 33845                                  
 33846                                  ;============================================================================
 33847                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 33848                                  ;============================================================================
 33849                                  ; 04/08/2018 - Retro DOS v3.0
 33850                                  ; 14/05/2019 - Retro DOS v4.0
 33851                                  
 33852                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 33853                                  
 33854                                  ;**
 33855                                  ;	Microsoft Confidential
 33856                                  ;	Copyright (C) Microsoft Corporation 1991
 33857                                  ;	All Rights Reserved.
 33858                                  ;
 33859                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 33860                                  ;	I/O specs are defined in DISPATCH.
 33861                                  ;
 33862                                  ;	$ALLOC
 33863                                  ;	$SETBLOCK
 33864                                  ;	$DEALLOC
 33865                                  ;	$AllocOper
 33866                                  ;	arena_free_process
 33867                                  ;	arena_next
 33868                                  ;	check_signature
 33869                                  ;	Coalesce
 33870                                  ;
 33871                                  ;	Modification history:
 33872                                  ;
 33873                                  ;	    Created: ARR 30 March 1983
 33874                                  ;
 33875                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 33876                                  ;		      M003 - added support for link/unlink UMBs from
 33877                                  ;			     DOS arena chain. 7/18/90
 33878                                  ;		      M009 - Added error returns invalid function and 
 33879                                  ;			     arena trashed in set link state call.
 33880                                  ;		      M010 - Release UMB arenas allocated to current PDB
 33881                                  ;			     if UMB_HEAD is initialized.
 33882                                  ;
 33883                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 33884                                  ;			     support. Please see under M009 in 
 33885                                  ;			     ..\inc\dossym.inc. 8/31/90.
 33886                                  ;
 33887                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 33888                                  ;			     sure that umb_head arena is valid and also make
 33889                                  ;			     sure that the previous arena is pointing to 
 33890                                  ;			     umb_head.
 33891                                  ;
 33892                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 33893                                  ;			     set allloc strategy.
 33894                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 33895                                  ;			     bx in AllocSetStrat.
 33896                                  ;
 33897                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 33898                                  ;			     a bit to indicate to dos dispatcher to turn
 33899                                  ;			     a20 off before iret. See M016.
 33900                                  ;
 33901                                  
 33902                                  ;	BREAK	<memory allocation utility routines>
 33903                                  
 33904                                  
 33905                                  ; 15/04/2018 - Retro DOS v2.0
 33906                                  ;----------------------------------------------------------------------------
 33907                                  ; xenix memory calls for MSDOS
 33908                                  ;
 33909                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 33910                                  ; arena_owner_system are all equal to zero and are contained in DI.
 33911                                  ;
 33912                                  ;INCLUDE DOSSEG.ASM
 33913                                  
 33914                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 33915                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 33916                                  
 33917                                  ;.xlist
 33918                                  ;.xcref
 33919                                  ;INCLUDE DOSSYM.ASM
 33920                                  ;INCLUDE DEVSYM.ASM
 33921                                  ;.cref
 33922                                  ;.list
 33923                                  
 33924                                  ;TITLE ALLOC.ASM - memory arena manager
 33925                                  ;NAME Alloc
 33926                                  
 33927                                  ;SUBTTL memory allocation utility routines
 33928                                  ;PAGE
 33929                                  ;
 33930                                  ; arena data
 33931                                  ;
 33932                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 33933                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 33934                                  ;       i_need  FirstArena,WORD         ; first free block found
 33935                                  ;       i_need  BestArena,WORD          ; best free block found
 33936                                  ;       i_need  LastArena,WORD          ; last free block found
 33937                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 33938                                  
 33939                                  ;**	Arena_Free_Process
 33940                                  ;----------------------------------------------------------------------------
 33941                                  ;	Free all arena blocks allocated to a prOcess
 33942                                  ;
 33943                                  ;	ENTRY	(bx) = PID of process
 33944                                  ;	EXIT	none
 33945                                  ;	USES	????? BUGBUG
 33946                                  ;----------------------------------------------------------------------------
 33947                                  
 33948                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33949                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 33950                                  
 33951                                  arena_free_process:
 33952                                  	; 14/05/2019 - Retro DOS v4.0
 33953                                  	; 04/08/2018 - Retro DOS v3.0
 33954 00006330 36A1[2400]                      MOV	AX,[SS:arena_head]
 33955                                  arena_free_process_start:
 33956 00006334 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 33957                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 33958 00006337 E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 33959                                  
 33960                                  arena_free_process_loop:
 33961                                          ;retc
 33962 0000633A 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 33963 0000633C 06                      	PUSH    ES
 33964 0000633D 1F                              POP     DS
 33965                                  	;cmp	[1],bx 
 33966 0000633E 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 33967 00006342 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 33968                                  	;mov	[1],di
 33969 00006344 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 33970                                  
 33971                                  arena_free_next:
 33972                                  	;cmp	byte [di],5Ah ;'Z'
 33973 00006348 803D5A                          CMP     BYTE [DI],arena_signature_end
 33974                                                                          ; end of road, Jack?
 33975                                          ;retz				; never come back no more
 33976                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 33977                                  	; 14/05/2019
 33978                                  	; MSDOS 6.0
 33979 0000634B 7405                    	jz	short arena_chk_umbs
 33980                                          
 33981 0000634D E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 33982 00006350 EBE8                            JMP     SHORT arena_free_process_loop
 33983                                  
 33984                                  	; MSDOS 6.0
 33985                                  arena_chk_umbs:				; M010 - Start
 33986                                  	; 20/05/2019
 33987 00006352 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 33988 00006356 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 33989 00006359 741E                    	je	short ret_label		; N: we're done
 33990                                  	
 33991 0000635B 8CDF                    	mov	di,ds			; di = last arena
 33992 0000635D 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 33993 0000635F 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 33994 00006361 EBD1                    	jmp	short arena_free_process_start
 33995                                  					; M010 - End
 33996                                  ;AFP_RETN:
 33997                                  ;	RETN
 33998                                  
 33999                                  ;	BREAK	<Arena Helper Routines>
 34000                                  
 34001                                  ;**	Arena_Next - Find Next item in Arena
 34002                                  ;----------------------------------------------------------------------------
 34003                                  ;	ENTRY	DS - pointer to block head
 34004                                  ;		(di) = 0
 34005                                  ;	EXIT	AX,ES - pointers to next head
 34006                                  ;		'C' set iff arena damaged
 34007                                  ;----------------------------------------------------------------------------
 34008                                  
 34009                                  arena_next:
 34010 00006363 8CD8                            MOV     AX,DS                   ; AX <- current block
 34011 00006365 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 34012 00006369 40                              INC     AX                      ; remember that header!
 34013                                  
 34014                                  ;       fall into check_signature and return
 34015                                  ;
 34016                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 34017                                  ;       RETN
 34018                                  
 34019                                  ;**	Check_Signature - Check Memory Block Signature
 34020                                  ;----------------------------------------------------------------------------
 34021                                  ;	ENTRY	(AX) = address of block header
 34022                                  ;		(di) = 0
 34023                                  ;	EXIT	 ES = AX
 34024                                  ;		'C' clear if signature good
 34025                                  ;		'C' set if signature bad
 34026                                  ;	USES	ES, Flags
 34027                                  ;----------------------------------------------------------------------------
 34028                                  
 34029                                  check_signature:        
 34030                                  
 34031 0000636A 8EC0                    	MOV     ES,AX                   ; ES <- AX
 34032                                  	;cmp	byte [es:di],4Dh ; 'M'
 34033 0000636C 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 34034                                                                          ; IF next signature = not_end THEN
 34035 00006370 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 34036                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 34037 00006372 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 34038                                                                          ; IF next signature = end then
 34039 00006376 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 34040 00006378 F9                              STC                             ; set error
 34041                                  ret_label: ; MSDOS 6.0
 34042                                  AFP_RETN:
 34043                                   	; Retro DOS v2.0 - 05/03/2018
 34044                                  check_signature_ok:
 34045                                  COALESCE_RETN:
 34046 00006379 C3                      	RETN
 34047                                  
 34048                                  ;**	Coalesce - Combine free blocks ahead with current block
 34049                                  ;----------------------------------------------------------------------------
 34050                                  ;	Coalesce adds the block following the argument to the argument block,
 34051                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 34052                                  ;	some callers (such as $setblock) use it to join a free block to it's
 34053                                  ;	preceeding allocated block.
 34054                                  ;
 34055                                  ;	ENTRY	(ds) = pointer to the head of a free block
 34056                                  ;		(di) = 0
 34057                                  ;	EXIT	'C' clear if OK
 34058                                  ;		  (ds) unchanged, this block updated
 34059                                  ;		  (ax) = address of next block, IFF not at end
 34060                                  ;		'C' set if arena trashed
 34061                                  ;	USES	(cx)
 34062                                  ;----------------------------------------------------------------------------
 34063                                          
 34064                                  Coalesce:
 34065                                  	;cmp	byte [di],5Ah ; 'Z'
 34066 0000637A 803D5A                  	CMP     BYTE [DI],arena_signature_end
 34067                                                                          ; IF current signature = END THEN
 34068                                          ;retz				;   GOTO ok
 34069 0000637D 74FA                            jz	short COALESCE_RETN
 34070 0000637F E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 34071                                          ;retc				; IF no error THEN GOTO check
 34072 00006382 72F5                    	jc	short COALESCE_RETN
 34073                                  
 34074                                  coalesce_check:
 34075                                  	;cmp	[es:1],di
 34076 00006384 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 34077                                          ;retnz				; IF next block isnt free THEN return
 34078 00006389 75EE                            JNZ	SHORT COALESCE_RETN
 34079                                  	;mov	cx,[ES:3]
 34080 0000638B 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 34081 00006390 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 34082                                          ;ADD	[3],CX
 34083 00006391 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 34084 00006395 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 34085 00006398 880D                            MOV     [DI],CL
 34086 0000639A EBDE                            JMP     SHORT Coalesce		; try again
 34087                                  
 34088                                  ; 04/08/2018 - Retro DOS v3.0
 34089                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 34090                                  
 34091                                  ;	BREAK  <$Alloc - allocate space in memory>
 34092                                  
 34093                                  ; MSDOS 6.0
 34094                                  ;----------------------------------------------------------------------------
 34095                                  ;**	$Alloc - Allocate Memory Space
 34096                                  ;
 34097                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 34098                                  ;	Alloc returns a pointer to a free block of memory that
 34099                                  ;	has the requested size in paragraphs.
 34100                                  ;
 34101                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 34102                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 34103                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 34104                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 34105                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 34106                                  ;
 34107                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 34108                                  ;	starts from arena_head.
 34109                                  ;
 34110                                  ;	Assembler usage:
 34111                                  ;           MOV     BX,size
 34112                                  ;           MOV     AH,Alloc
 34113                                  ;           INT     21h
 34114                                  ;
 34115                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 34116                                  ;	so that we start searching the arena at it's first non-trivial free
 34117                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 34118                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 34119                                  ;	doesn't have too many memory objects in it beyond the first free one.
 34120                                  ;	verify that this is true; if so, this can stay as is
 34121                                  ;
 34122                                  ;	ENTRY	(bx) = requested size, in bytes
 34123                                  ;		(DS) = (ES) = DOSGROUP
 34124                                  ;	EXIT	'C' clear if memory allocated
 34125                                  ;		  (ax:0) = address of requested memory
 34126                                  ;		'C' set if request failed
 34127                                  ;		  (AX) = error_not_enough_memory
 34128                                  ;		    (bx) = max size we could have allocated
 34129                                  ;		  (ax) = error_arena_trashed
 34130                                  ;	USES	All
 34131                                  ;----------------------------------------------------------------------------
 34132                                  
 34133                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34134                                  ;----------------------------------------------------------------------------
 34135                                  ;SUBTTL $Alloc - allocate space in memory
 34136                                  ;
 34137                                  ;   Assembler usage:
 34138                                  ;           MOV     BX,size
 34139                                  ;           MOV     AH,Alloc
 34140                                  ;           INT     21h
 34141                                  ;         AX:0 is pointer to allocated memory
 34142                                  ;         BX is max size if not enough memory
 34143                                  ;
 34144                                  ;   Description:
 34145                                  ;           Alloc returns  a  pointer  to  a  free  block of
 34146                                  ;       memory that has the requested  size  in  paragraphs.
 34147                                  ;
 34148                                  ;   Error return:
 34149                                  ;           AX = error_not_enough_memory
 34150                                  ;              = error_arena_trashed
 34151                                  ;----------------------------------------------------------------------------
 34152                                  
 34153                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 34154                                  
 34155                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34156                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 34157                                  
 34158                                  _$ALLOC:
 34159                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 34160                                  	; 14/05/2019 - Retro DOS v4.0
 34161                                  	; 04/08/2018 - Retro DOS v3.0
 34162                                  	;EnterCrit critMem
 34163 0000639C E8E9AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34164                                  
 34165                                  ; 17/12/2022
 34166                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34167                                  ;%if 0
 34168                                  	; 14/05/2019
 34169 0000639F 16                      	push	ss
 34170 000063A0 1F                      	pop	ds
 34171                                  
 34172                                  	; MSDOS 6.0
 34173                                  	;mov	ax,[ss:arena_head]
 34174                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34175                                  
 34176 000063A1 A1[2400]                	mov	ax,[arena_head]
 34177 000063A4 A3[8E00]                	mov	[START_ARENA],ax			
 34178                                  	
 34179                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34180 000063A7 F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 34181                                  					; Q: should we start scanning from 
 34182                                  					;    UMB's
 34183 000063AC 740D                    	jz	short norm_alloc	; N: scan from arena_head
 34184                                  		
 34185                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34186                                  	;cmp	word [UMB_HEAD],-1
 34187                                  	;je	short norm_alloc	; N: scan from arena_head
 34188                                  
 34189                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34190 000063AE F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 34191 000063B3 7406                    	jz	short norm_alloc	; N: scan from arena_head
 34192                                  	
 34193                                  	;mov	ax,[ss:UMB_HEAD]
 34194                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34195 000063B5 A1[8C00]                	mov	ax,[UMB_HEAD]
 34196 000063B8 A3[8E00]                	mov	[START_ARENA],ax
 34197                                  					; M000 - end
 34198                                  norm_alloc:
 34199 000063BB 31C0                            XOR     AX,AX
 34200 000063BD 89C7                            MOV     DI,AX
 34201                                  	; 15/03/2018
 34202                                          ;MOV	[SS:FirstArena],AX	; init the options
 34203                                          ;MOV	[SS:BestArena],AX
 34204                                          ;MOV	[SS:LastArena],AX
 34205                                  	; 14/05/2019
 34206 000063BF A3[4003]                	MOV	[FirstArena],AX		; init the options
 34207 000063C2 A3[4203]                        MOV	[BestArena],AX
 34208 000063C5 A3[4403]                        MOV	[LastArena],AX
 34209 000063C8 50                              PUSH    AX                      ; alloc_max <- 0
 34210                                  	; 04/08/2018
 34211                                  start_scan:
 34212                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34213                                  	;MOV	AX,[arena_head]
 34214                                  
 34215                                  	; 14/05/2019	
 34216                                  	; MSDOS 6.0
 34217                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34218 000063C9 A1[8E00]                	mov	ax,[START_ARENA]
 34219                                  
 34220                                  	; 27/09/2023 (BugFix) (*) 
 34221                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 34222                                  start_scan_x:
 34223                                  
 34224 000063CC E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 34225 000063CF 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 34226                                  
 34227                                  ;%endif
 34228                                  
 34229                                  ; 17/12/2022
 34230                                  %if 0
 34231                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34232                                  
 34233                                  	; MSDOS 6.0
 34234                                  	mov	ax,[ss:arena_head]
 34235                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34236                                  
 34237                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34238                                  					; Q: should we start scanning from 
 34239                                  					;    UMB's
 34240                                  	jz	short norm_alloc	; N: scan from arena_head
 34241                                  		
 34242                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34243                                  	;je	short norm_alloc	; N: scan from arena_head
 34244                                  
 34245                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34246                                  	jz	short norm_alloc	; N: scan from arena_head
 34247                                  	
 34248                                  	mov	ax,[ss:UMB_HEAD]
 34249                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34250                                  					; M000 - end
 34251                                  norm_alloc:
 34252                                          XOR     AX,AX
 34253                                          MOV     DI,AX
 34254                                  	; 15/03/2018
 34255                                  	MOV	[SS:FirstArena],AX	; init the options
 34256                                  	MOV	[SS:BestArena],AX
 34257                                  	MOV	[SS:LastArena],AX
 34258                                          PUSH    AX                      ; alloc_max <- 0
 34259                                  	; 04/08/2018
 34260                                  start_scan:
 34261                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34262                                  	; 14/05/2019	
 34263                                  	; MSDOS 6.0
 34264                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34265                                  	CALL    check_signature         ; ES <- AX, carry set if error
 34266                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 34267                                  %endif
 34268                                  
 34269                                  alloc_scan:
 34270 000063D1 06                              PUSH    ES
 34271 000063D2 1F                              POP     DS                      ; DS <- ES
 34272 000063D3 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 34273 000063D7 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 34274                                  
 34275                                  alloc_next:
 34276                                  	; MSDOS 6.0			; M000 - start 
 34277 000063D9 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34278 000063DF 741C                    	jz	short norm_strat	; N: see if we reached last arena
 34279                                  	
 34280 000063E1 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 34281                                  					; Q: is alloc strategy high_first
 34282 000063E7 7414                    	jz	short norm_strat	; N: see if we reached last arena
 34283 000063E9 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 34284 000063ED 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 34285                                  					;    arena_head
 34286 000063F2 7509                    	jne	short norm_strat	; N: see if we reached last arena
 34287 000063F4 8CD8                    	mov	ax,ds			; ax = current block
 34288 000063F6 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 34289 000063FB EB03                    	jmp	short alloc_chk_end
 34290                                  
 34291                                  norm_strat:
 34292                                  	;cmp	byte [di],5Ah ; 'Z'
 34293 000063FD 803D5A                          CMP     BYTE [DI],arena_signature_end
 34294                                                                          ; IF current block is last THEN
 34295                                  alloc_chk_end:
 34296 00006400 740E                            JZ      SHORT alloc_end		;   GOTO end
 34297 00006402 E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 34298 00006405 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 34299                                  
 34300                                  alloc_err:
 34301 00006407 58                              POP     AX
 34302                                  
 34303                                  alloc_trashed:
 34304                                  	;LeaveCrit critMem
 34305 00006408 E898AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 34306                                          ;error	error_arena_trashed
 34307                                  	;mov	al,7
 34308 0000640B B007                    	MOV	AL,error_arena_trashed
 34309                                  alloc_errj:
 34310 0000640D E97DA2                  	JMP	SYS_RET_ERR
 34311                                  
 34312                                  alloc_end:
 34313                                  	; 18/05/2019
 34314 00006410 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 34315 00006416 7403                    	jz	short alloc_chk 
 34316 00006418 E98400                  	jmp	alloc_do_split
 34317                                  
 34318                                  alloc_chk:
 34319                                  	; MSDOS 6.0
 34320 0000641B 36A1[2400]              	mov	ax,[ss:arena_head]
 34321 0000641F 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 34322 00006424 740E                    	je	short alloc_fail	; Y: not enough memory
 34323                                  					; N:
 34324                                  					; Q: is the alloc strat HIGH_ONLY
 34325 00006426 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 34326 0000642C 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 34327                                  	
 34328 0000642E 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 34329                                  	; 27/09/2023 (*)
 34330 00006432 EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 34331                                  	;jmp	short start_scan
 34332                                  					; M000 - end
 34333                                  
 34334                                  alloc_fail:
 34335                                          ;invoke Get_User_Stack
 34336 00006434 E893A0                          CALL	Get_User_Stack
 34337 00006437 5B                      	POP     BX
 34338                                          ;MOV	[SI].user_BX,BX
 34339                                  	;MOV	[SI+2],BX
 34340 00006438 895C02                  	mov	[SI+user_env.user_BX],bx
 34341                                  	;LeaveCrit critMem
 34342 0000643B E865AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34343                                  	;error	error_not_enough_memory
 34344                                  	;mov	al,8
 34345 0000643E B008                    	MOV	AL,error_not_enough_memory
 34346                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34347 00006440 EBCB                    	jmp	short alloc_errj
 34348                                  	;JMP	SYS_RET_ERR
 34349                                  
 34350                                  alloc_free:
 34351 00006442 E835FF                          CALL    Coalesce		; add following free block to current
 34352 00006445 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 34353 00006447 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34354 0000644B 5A                              POP     DX                      ; check for max found size
 34355 0000644C 39D1                            CMP     CX,DX
 34356 0000644E 7602                            JNA     SHORT alloc_test
 34357 00006450 89CA                            MOV     DX,CX
 34358                                  
 34359                                  alloc_test:
 34360 00006452 52                              PUSH    DX
 34361 00006453 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 34362 00006455 7782                    	JA      SHORT alloc_next	;   GOTO next
 34363                                  
 34364                                  	; 15/03/2018
 34365 00006457 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 34366 0000645D 7505                    	JNZ	SHORT alloc_best
 34367 0000645F 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 34368                                  alloc_best:
 34369 00006464 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 34370 0000646A 740E                            JZ      SHORT alloc_make_best	; initial best
 34371 0000646C 06                              PUSH	ES
 34372 0000646D 368E06[4203]                    MOV     ES,[SS:BestArena]
 34373 00006472 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 34374 00006477 07                              POP	ES
 34375 00006478 7605                            JBE     SHORT alloc_last
 34376                                  alloc_make_best:
 34377 0000647A 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 34378                                  alloc_last:
 34379 0000647F 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 34380 00006484 E952FF                          JMP     alloc_next
 34381                                  ;
 34382                                  ; split the block high
 34383                                  ;
 34384                                  alloc_do_split_high:
 34385 00006487 368E1E[4403]                    MOV     DS,[SS:LastArena]
 34386 0000648C 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34387 00006490 29D9                            SUB     CX,BX
 34388 00006492 8CDA                            MOV     DX,DS
 34389 00006494 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 34390 00006496 01CA                            ADD     DX,CX                   ; point to next block
 34391 00006498 8EC2                            MOV     ES,DX                   ; no decrement!
 34392 0000649A 49                              DEC     CX
 34393 0000649B 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 34394 0000649D EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 34395                                  ;
 34396                                  ; we have scanned memory and have found all appropriate blocks
 34397                                  ; check for the type of allocation desired; first and best are identical
 34398                                  ; last must be split high
 34399                                  ;
 34400                                  alloc_do_split:
 34401                                  
 34402                                  ; 17/12/2022
 34403                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34404                                  ;%if 0
 34405                                  	; 14/05/2019
 34406                                  	; MSDOS 6.0			; M000 - start
 34407                                  	;xor	cx,cx
 34408 0000649F 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 34409                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34410 000064A4 80E13F                  	and	cl,3Fh
 34411                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34412 000064A7 80F901                  	cmp	cl,BEST_FIT
 34413 000064AA 77DB                    	ja	short alloc_do_split_high
 34414                                  ;%endif
 34415                                  
 34416                                  	; 17/12/2022
 34417                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34418                                  	; MSDOS 6.0 & MSDOS 5.0
 34419                                  	;xor	cx,cx
 34420                                  	;mov	cl,[ss:AllocMethod]
 34421                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34422                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34423                                  	;ja	short alloc_do_split_high
 34424                                  
 34425                                  	; 15/03/2018
 34426                                          ;;CMP	BYTE [SS:AllocMethod], 1
 34427                                  	; 04/08/2018
 34428                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 34429                                          ;JA	SHORT alloc_do_split_high
 34430                                          
 34431 000064AC 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 34432 000064B1 7205                    	JB      SHORT alloc_get_size
 34433 000064B3 368E1E[4203]            	MOV     DS,[SS:BestArena]
 34434                                  
 34435                                  alloc_get_size:
 34436 000064B8 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34437 000064BC 29D9                            SUB     CX,BX                   ; get room left over
 34438 000064BE 8CD8                            MOV     AX,DS
 34439 000064C0 89C2                            MOV     DX,AX                   ; save for owner setting
 34440 000064C2 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 34441 000064C4 01D8                            ADD     AX,BX
 34442 000064C6 40                              INC     AX                      ; remember the header
 34443 000064C7 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 34444 000064C9 49                              DEC     CX                      ; CX <- size of split block
 34445                                  alloc_set_sizes:
 34446 000064CA 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 34447 000064CE 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 34448                                  	;mov	bl,4Dh ; 'M'
 34449 000064D3 B34D                            MOV     BL,arena_signature_normal
 34450 000064D5 861D                            XCHG    BL,[DI]			; current signature <- 4D
 34451 000064D7 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 34452 000064DA 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34453                                  
 34454                                  alloc_set_owner:
 34455 000064DF 8EDA                            MOV     DS,DX
 34456 000064E1 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 34457 000064E5 A30100                          MOV     [ARENA.OWNER],AX
 34458 000064E8 8CD8                            MOV     AX,DS
 34459 000064EA 40                              INC     AX
 34460 000064EB 5B                              POP     BX
 34461                                  	;LeaveCrit critMem
 34462 000064EC E8B4AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34463                                  	
 34464                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34465                                  alloc_ok:
 34466                                          ;transfer SYS_RET_OK
 34467 000064EF E992A1                  	JMP	SYS_RET_OK
 34468                                  
 34469                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 34470                                  
 34471                                  ; MSDOS 6.0
 34472                                  ;----------------------------------------------------------------------------
 34473                                  ;**	$SETBLOCK - Change size of an Allocated Block
 34474                                  ;
 34475                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 34476                                  ;	any following free space onto this block; then we try to trim the
 34477                                  ;	block down to the size requested.
 34478                                  ;
 34479                                  ;	Note that if the guy wants to grow the block but that growth fails,
 34480                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 34481                                  ;	Thus the maximum-size-possible value that we return has already
 34482                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 34483                                  ;
 34484                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 34485                                  ;		finish it's work. For this reason we build the allocsf
 34486                                  ;		structure on the frame, to make us compatible with $ALLOCs
 34487                                  ;		code.
 34488                                  ;
 34489                                  ;	ENTRY	(es) = segment of old block
 34490                                  ;		(bx) = newsize
 34491                                  ;		(ah) = SETBLOCK
 34492                                  ;
 34493                                  ;	EXIT	'C' clear if OK
 34494                                  ;		'C' set if error
 34495                                  ;		  (ax) = error_invalid_block
 34496                                  ;		       = error_arena_trashed
 34497                                  ;		       = error_not_enough_memory
 34498                                  ;		       = error_invalid_function
 34499                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 34500                                  ;	USES	???? BUGBUG
 34501                                  ;----------------------------------------------------------------------------
 34502                                  
 34503                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34504                                  ;----------------------------------------------------------------------------
 34505                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 34506                                  ;
 34507                                  ;   Assembler usage:
 34508                                  ;           MOV     ES,block
 34509                                  ;           MOV     BX,newsize
 34510                                  ;           MOV     AH,setblock
 34511                                  ;           INT     21h
 34512                                  ;         if setblock fails for growing, BX will have the maximum
 34513                                  ;         size possible
 34514                                  ;   Error return:
 34515                                  ;           AX = error_invalid_block
 34516                                  ;              = error_arena_trashed
 34517                                  ;              = error_not_enough_memory
 34518                                  ;              = error_invalid_function
 34519                                  ;----------------------------------------------------------------------------
 34520                                  
 34521                                  _$SETBLOCK:        
 34522                                  	; 04/08/2018 - Retro DOS v3.0
 34523                                  	;EnterCrit   critMem
 34524 000064F2 E893AE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34525                                  
 34526 000064F5 BF0000                  	MOV     DI,ARENA.SIGNATURE
 34527 000064F8 8CC0                            MOV     AX,ES
 34528 000064FA 48                              DEC     AX
 34529 000064FB E86CFE                          CALL    check_signature
 34530 000064FE 7303                            JNC     SHORT setblock_grab
 34531                                  
 34532                                  setblock_bad:
 34533 00006500 E905FF                          JMP     alloc_trashed
 34534                                  
 34535                                  setblock_grab:
 34536 00006503 8ED8                            MOV     DS,AX
 34537 00006505 E872FE                          CALL    Coalesce
 34538 00006508 72F6                            JC      SHORT setblock_bad
 34539 0000650A 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34540 0000650E 51                              PUSH    CX
 34541 0000650F 39CB                            CMP     BX,CX
 34542 00006511 76A5                            JBE     SHORT alloc_get_size
 34543 00006513 E91EFF                          JMP     alloc_fail
 34544                                  
 34545                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 34546                                  
 34547                                  ; MSDOS 6.0
 34548                                  ;----------------------------------------------------------------------------
 34549                                  ;**	$DEALLOC - Free Heap Memory
 34550                                  ;
 34551                                  ;	ENTRY	(es) = address of item
 34552                                  ;
 34553                                  ;	EXIT	'C' clear of OK
 34554                                  ;		'C' set if error
 34555                                  ;		  (AX) = error_invalid_block
 34556                                  ;	USES	???? BUGBUG
 34557                                  
 34558                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34559                                  ;----------------------------------------------------------------------------
 34560                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 34561                                  ;
 34562                                  ;   Assembler usage:
 34563                                  ;           MOV     ES,block
 34564                                  ;           MOV     AH,dealloc
 34565                                  ;           INT     21h
 34566                                  ;
 34567                                  ;   Error return:
 34568                                  ;           AX = error_invalid_block
 34569                                  ;              = error_arena_trashed
 34570                                  ;---------------------------------------------------------------------------- 
 34571                                  
 34572                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34573                                  _$DEALLOC:
 34574                                  	; 14/05/2019 - Retro DOS v4.0    
 34575                                  	; 04/08/2018 - Retro DOS v3.0
 34576                                  	;EnterCrit   critMem
 34577 00006516 E86FAE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34578                                  
 34579                                  	; MSDOS 6.0			; M016, M068 - Start
 34580 00006519 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 34581                                  					; Q: was the previous call an int 21
 34582                                  					;    exec call
 34583 0000651F 740E                    	jz	short deallocate	; N: continue
 34584 00006521 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 34585 00006527 7506                    	jne	short deallocate	; N: continue
 34586 00006529 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 34587                                  deallocate:				; M016, M068 - End
 34588 0000652F BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 34589 00006532 8CC0                            MOV     AX,ES
 34590 00006534 48                              DEC     AX
 34591 00006535 E832FE                          CALL    check_signature
 34592 00006538 720A                            JC      SHORT dealloc_err
 34593 0000653A 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34594                                  	;LeaveCrit critMem
 34595 0000653F E861AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34596                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34597                                          ;transfer SYS_RET_OK
 34598                                  dealloc_ok:
 34599 00006542 EBAB                    	jmp	short alloc_ok
 34600                                  	;JMP	SYS_RET_OK
 34601                                  
 34602                                  dealloc_err:
 34603                                  	;LeaveCrit critMem
 34604 00006544 E85CAE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34605                                          ;error	error_invalid_block
 34606                                  	;mov	al,9
 34607 00006547 B009                    	MOV	AL,error_invalid_block
 34608                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34609                                  dealloc_errj:
 34610                                  AllocOperErrj:	; 17/12/2022
 34611 00006549 E941A1                  	JMP	SYS_RET_ERR
 34612                                  
 34613                                  ;	BREAK $AllocOper - get/set allocation mechanism
 34614                                  
 34615                                  ; MSDOS 6.0
 34616                                  ;----------------------------------------------------------------------------
 34617                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 34618                                  ;
 34619                                  ;	Assembler usage:
 34620                                  ;           MOV     AH,AllocOper
 34621                                  ;           MOV     BX,method
 34622                                  ;           MOV     AL,func
 34623                                  ;           INT     21h
 34624                                  ;
 34625                                  ;	ENTRY	
 34626                                  ;		(al) = 0
 34627                                  ;		  Get allocation Strategy in (ax)
 34628                                  ;
 34629                                  ;		(al) = 1, (bx) = method = zw0000xy
 34630                                  ;		  Set allocation strategy.
 34631                                  ;		   w  = 1  => HIGH_ONLY
 34632                                  ;		   z  = 1  => HIGH_FIRST
 34633                                  ;		   xy = 00 => FIRST_FIT
 34634                                  ;		      = 01 => BEST_FIT
 34635                                  ;		      = 10 => LAST_FIT
 34636                                  ;
 34637                                  ;		(al) = 2
 34638                                  ;		  Get UMB link state in (al)
 34639                                  ;
 34640                                  ;		(al) = 3
 34641                                  ;		  Set UMB link state
 34642                                  ;		   (bx) = 0 => Unlink UMBs
 34643                                  ;		   (bx) = 1 => Link UMBs
 34644                                  ;
 34645                                  ;
 34646                                  ;	EXIT	'C' clear if OK
 34647                                  ;
 34648                                  ;		 if (al) = 0
 34649                                  ;		  (ax) = existing method
 34650                                  ;		 if (al) = 1
 34651                                  ;		  Sets allocation strategy
 34652                                  ;		 if (al) = 2
 34653                                  ;		  (al) = 0 => UMBs not linked
 34654                                  ;		  (al) = 1 => UMBs linked in
 34655                                  ;		 if (al) = 3
 34656                                  ;		  Links/Unlinks the UMBs into DOS chain
 34657                                  ;
 34658                                  ;		'C' set if error
 34659                                  ;		  AX = error_invalid_function
 34660                                  ;
 34661                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 34662                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 34663                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 34664                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 34665                                  ;		    arena' if an arena sig is damaged.
 34666                                  ;----------------------------------------------------------------------------
 34667                                  
 34668                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34669                                  ;----------------------------------------------------------------------------
 34670                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 34671                                  ;
 34672                                  ;   Assembler usage:
 34673                                  ;           MOV     AH,AllocOper
 34674                                  ;           MOV     BX,method
 34675                                  ;           MOV     AL,func
 34676                                  ;           INT     21h
 34677                                  ;
 34678                                  ;   Error return:
 34679                                  ;           AX = error_invalid_function
 34680                                  ;----------------------------------------------------------------------------
 34681                                  
 34682                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34683                                  _$ALLOCOPER:
 34684                                  	; 14/05/2019 - Retro DOS v4.0
 34685                                  	; MSDOS 6.0
 34686 0000654C 08C0                    	or	al,al ; 0
 34687 0000654E 741E                    	jz	short AllocGetStrat
 34688                                  	; 17/12/2022
 34689                                  	;cmp	al,1
 34690                                  	;jz	short AllocSetStrat
 34691                                  
 34692                                  	; 01/12/2022
 34693                                  	;cmp	al, 2
 34694                                  	;jb	short AllocSetStrat
 34695                                  	;ja	short AllocSetLink
 34696                                  	;;jmp	short AllocGetLink
 34697                                  ;AllocGetLink:
 34698                                  	; MSDOS 6.0
 34699                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 34700                                  	;and 	al,LINKSTATE		
 34701                                  	;;transfer SYS_RET_OK
 34702                                  	;jmp	SYS_RET_OK
 34703                                  
 34704 00006550 3C02                    	cmp	al,2
 34705                                  	; 17/12/2022
 34706 00006552 7223                    	jb	short AllocSetStrat ; al = 1
 34707 00006554 7432                    	je	short AllocGetLink
 34708                                  
 34709                                  	;cmp	al,2
 34710                                  	;jz	short AllocGetLink
 34711 00006556 3C03                    	cmp	al,3
 34712 00006558 7436                    	jz	short AllocSetLink
 34713                                  
 34714                                  	; 15/04/2018
 34715                                  	;CMP	AL,1
 34716                                          ;JB	SHORT AllocOperGet
 34717                                          ;JZ	SHORT AllocOperSet
 34718                                  
 34719                                  AllocOperError:
 34720                                  	; 04/08/2018 - Retro DOS v3.0
 34721                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 34722                                  	;mov	byte [ss:EXTERR_LOCUS],5
 34723 0000655A 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34724                                  	;error	error_invalid_function
 34725                                  	;mov	al,1
 34726 00006560 B001                    	MOV	AL,error_invalid_function
 34727                                  	; 17/12/2022
 34728                                  ;AllocOperErrj:
 34729                                  	;JMP	SYS_RET_ERR
 34730                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34731                                  	;jmp	short dealloc_errj
 34732                                  	; 17/12/2022
 34733 00006562 EBE5                    	jmp	short AllocOperErrj
 34734                                  
 34735                                  AllocArenaError:
 34736                                  	; MSDOS 6.0
 34737 00006564 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34738                                  					; M009: Extended Error Locus
 34739                                  	;error	error_arena_trashed	; M009:
 34740                                  	;mov	al,7
 34741 0000656A B007                    	MOV	AL,error_arena_trashed
 34742                                  	;JMP	SYS_RET_ERR
 34743 0000656C EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 34744                                  
 34745                                  AllocGetStrat: 
 34746                                  	; MSDOS 6.0
 34747                                  AllocOperGet:
 34748 0000656E 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 34749 00006572 30E4                            XOR     AH,AH
 34750                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34751                                  	;transfer SYS_RET_OK
 34752                                  AllocOperOk:
 34753                                  	; 17/12/2022
 34754                                  	;jmp	short dealloc_ok
 34755 00006574 E90DA1                  	JMP	SYS_RET_OK
 34756                                  
 34757                                  AllocSetStrat: 
 34758                                  	; 14/05/2019
 34759                                  	; MSDOS 6.0
 34760 00006577 53                      	push	bx			; M000 - start
 34761                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34762                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 34763                                  	; 17/12/2022
 34764 00006578 80E33F                  	and	bl,3Fh
 34765 0000657B 83FB02                  	cmp	bx,2			; BX must be 0-2
 34766                                  	;cmp	bl,2
 34767 0000657E 5B                      	pop	bx			; M000 - end
 34768 0000657F 77D9                    	ja	short AllocOperError
 34769                                  
 34770                                  AllocOperSet:
 34771 00006581 36881E[0203]                    MOV     [SS:AllocMethod],BL
 34772                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34773                                  	;transfer SYS_RET_OK
 34774                                  AllocOperOkj:
 34775 00006586 EBEC                    	jmp	short AllocOperOk
 34776                                  	;JMP	SYS_RET_OK
 34777                                  
 34778                                  AllocGetLink:
 34779                                  	; MSDOS 6.0
 34780 00006588 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 34781                                  	;and	al,1
 34782 0000658C 2401                    	and 	al,LINKSTATE		
 34783                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34784                                  	;transfer SYS_RET_OK
 34785                                  AllocOperOkj2:
 34786                                  	; 17/12/2022
 34787 0000658E EBE4                    	jmp	short AllocOperOk
 34788                                  	;jmp	short AllocOperOkj
 34789                                  	;;JMP	SYS_RET_OK
 34790                                  
 34791                                  AllocSetLink:
 34792                                  	; MSDOS 6.0			; M009 - start
 34793 00006590 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 34794 00006595 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 34795 00006598 74C0                    	je	short AllocOperError	; N: error
 34796                                  					; Y: continue
 34797                                  					; M009 - end
 34798 0000659A 83FB01                  	cmp	bx,1			
 34799 0000659D 7204                    	jb	short UnlinkUmbs
 34800 0000659F 741C                    	jz	short LinkUmbs
 34801                                  	
 34802 000065A1 EBB7                    	jmp	short AllocOperError
 34803                                  	
 34804                                  UnlinkUmbs:
 34805                                  	;test	byte [ss:UMBFLAG],1
 34806 000065A3 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 34807 000065A9 7410                    	jz	short unlinked		; Y: return 
 34808                                  	
 34809 000065AB E82900                  	call	GetLastArena		; get arena before umb_head in DS
 34810 000065AE 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 34811                                  	
 34812                                  					; make it last
 34813 000065B0 C60600005A              	mov	byte [0],arena_signature_end
 34814                                  	
 34815                                  	;and	byte [ss:UMBFLAG],0FEh
 34816 000065B5 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 34817                                  	
 34818                                  unlinked:
 34819                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34820                                  	;transfer SYS_RET_OK
 34821                                  	; 17/12/2022
 34822 000065BB EBB7                    	jmp	short AllocOperOk
 34823                                  	;jmp	short AllocOperOkj2
 34824                                  	;;JMP	SYS_RET_OK
 34825                                  
 34826                                  LinkUmbs:
 34827 000065BD 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 34828 000065C3 7510                    	jnz	short linked		; Y: return
 34829                                  	
 34830 000065C5 E80F00                  	call	GetLastArena		; get arena before umb_head
 34831 000065C8 729A                    	jc	short AllocArenaError	; M009: arena trashed
 34832                                  	
 34833                                  					; make it normal. M061: ds points to
 34834                                  					; arena before umb_head
 34835 000065CA C60600004D              	mov	byte [0],arena_signature_normal
 34836                                  	
 34837 000065CF 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 34838                                  linked:
 34839                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34840                                  	;transfer SYS_RET_OK
 34841                                  	; 17/12/2022
 34842 000065D5 EB9D                    	jmp	short AllocOperOk
 34843                                  	;jmp	short unlinked
 34844                                  	;;JMP	SYS_RET_OK
 34845                                  
 34846                                  ; MSDOS 6.0
 34847                                  ;--------------------------------------------------------------------------
 34848                                  ; Procedure Name : GetLastArena		-  M003
 34849                                  ;
 34850                                  ; Inputs	 : cx = umb_head
 34851                                  ;
 34852                                  ;
 34853                                  ; Outputs	 : If UMBs are linked
 34854                                  ;			ES = umb_head
 34855                                  ;			DS = arena before umb_head
 34856                                  ;		   else
 34857                                  ;			DS = last arena
 34858                                  ;			ES = next arena. will be umb_head if NC.
 34859                                  ;
 34860                                  ;		   CY if error
 34861                                  ;
 34862                                  ; Uses		 : DS, ES, DI, BX
 34863                                  ;--------------------------------------------------------------------------
 34864                                  
 34865                                  ; 14/05/2019 - Retro DOS v4.0
 34866                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 34867                                  
 34868                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34869                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 34870                                  	
 34871                                  GetLastArena:
 34872 000065D7 50                      	push	ax			; save ax
 34873                                  
 34874 000065D8 36A1[2400]              	mov	ax,[ss:arena_head]
 34875 000065DC 8EC0                    	mov	es,ax			; es = arena_head
 34876 000065DE 31FF                    	xor	di,di
 34877                                  
 34878 000065E0 26803D5A                	cmp     byte [es:di],arena_signature_end
 34879                                  					; Q: is this the last arena
 34880 000065E4 7419                    	je	short GLA_done		; Y: return last arena in ES		
 34881                                  					
 34882                                  GLA_next:
 34883 000065E6 8ED8                    	mov	ds,ax
 34884 000065E8 E878FD                  	call	arena_next		; ax, es -> next arena
 34885                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34886                                  	;jc	short GLA_err
 34887                                  	; 17/12/2022
 34888 000065EB 7228                    	jc	short GLA_err2
 34889                                  
 34890 000065ED 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 34891 000065F3 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 34892                                  					;    umb_head
 34893                                  					; N: terminating condition is 05Ah
 34894                                  
 34895 000065F5 26803D5A                	cmp     byte [es:di],arena_signature_end
 34896                                  					; Q: is this the last arena
 34897 000065F9 EB02                    	jmp	short GLA_@f
 34898                                  GLA_chkumb:
 34899 000065FB 39C8                    	cmp	ax,cx			; Q: is this umb_head
 34900                                  GLA_@f:
 34901 000065FD 75E7                    	jne	short GLA_next		; N: get next arena
 34902                                  
 34903                                  GLA_done:
 34904                                  					; M061 - Start
 34905 000065FF 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 34906 00006605 750B                    	jnz	short GLA_ret		; Y: we're done
 34907                                  					; N: let us confirm that the next 
 34908                                  					;    arena is umb_head
 34909 00006607 8ED8                    	mov	ds,ax
 34910 00006609 E857FD                  	call	arena_next		; ax, es -> next arena
 34911                                  	;jc	short GLA_err
 34912 0000660C 7207                    	jc	short GLA_err2
 34913 0000660E 39C8                    	cmp	ax,cx			; Q: is this umb_head
 34914 00006610 7502                    	jne	short GLA_err		; N: error
 34915                                  					; M061 - End
 34916                                  GLA_ret:
 34917                                  	; 17/12/2022				
 34918                                  	;clc
 34919                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34920                                  	;clc
 34921 00006612 58                      	pop	ax			; M061
 34922 00006613 C3                      	retn				; M061
 34923                                  
 34924                                  GLA_err:
 34925 00006614 F9                      	stc				; M061
 34926                                  GLA_err2:
 34927 00006615 58                      	pop	ax
 34928 00006616 C3                      	retn
 34929                                  
 34930                                  ;============================================================================
 34931                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 34932                                  ;============================================================================
 34933                                  ; 04/08/2018 - Retro DOS v3.0
 34934                                  
 34935                                  ;	TITLE SRVCALL - Server DOS call
 34936                                  ;	NAME  SRVCALL
 34937                                  
 34938                                  ;**	SRVCALL.ASM - Server DOS call functions
 34939                                  ;
 34940                                  ;
 34941                                  ;	$ServerCall
 34942                                  ;
 34943                                  ;	Modification history:
 34944                                  ;
 34945                                  ;	    Created: ARR 08 August 1983
 34946                                  
 34947                                  ;AsmVars <Installed>
 34948                                  
 34949                                  ;include dpl.asm
 34950                                  
 34951                                  ;Installed = TRUE
 34952                                  
 34953                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 34954                                  ; ---------------------------------------------------------------------------
 34955                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34956                                  
 34957                                  ;BREAK <ServerCall -- Server DOS call>
 34958                                  
 34959                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 34960                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 34961                                  
 34962                                  ;hkn; TABLE	SEGMENT
 34963                                  ;Public SRVC001S,SRVC001E
 34964                                  ;SRVC001S label byte
 34965                                  
 34966                                  SRVC001S:
 34967                                  
 34968 00006617 [1B66]                  SERVERTAB:	dw	SERVER_DISP
 34969 00006619 [6D66]                  SERVERLEAVE:	dw	SERVERRETURN
 34970 0000661B 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 34971 0000661C [D566]                  		dw	SRV_CALL	; 0
 34972 0000661E [6E66]                  		dw	COMMIT_ALL	; 1
 34973 00006620 [A466]                  		dw	CLOSE_NAME	; 2
 34974 00006622 [AF66]                  		dw	CLOSE_UID	; 3
 34975 00006624 [B666]                  		dw	CLOSE_UID_PID	; 4
 34976 00006626 [BD66]                  		dw	GET_LIST	; 5
 34977 00006628 [1667]                  		dw	GET_DOS_DATA	; 6
 34978 0000662A [3A67]                  		dw	SPOOL_OPER	; 7
 34979 0000662C [3A67]                  		dw	SPOOL_OPER	; 8
 34980 0000662E [3A67]                  		dw	SPOOL_OPER	; 9
 34981 00006630 [4667]                  		dw	_$SetExtendedError  ; 10
 34982                                  
 34983                                  SERVER_DISP_END:  ;  LABEL BYTE
 34984                                  
 34985                                  ;SRVC001E label byte
 34986                                  
 34987                                  SRVC001E:
 34988                                  
 34989                                  ;hkn; TABLE	ENDS
 34990                                  
 34991                                  ;----------------------------------------------------------------------------
 34992                                  ;
 34993                                  ; Procedure Name : $ServerCall
 34994                                  ;
 34995                                  ; Inputs:
 34996                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 34997                                  ; Function:
 34998                                  ;	AL=0	Server DOS call
 34999                                  ;	AL=1	Commit All files
 35000                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 35001                                  ;	AL=3	Close all files for DPL_UID
 35002                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 35003                                  ;	AL=5	Get open file list entry
 35004                                  ;		    IN: BX File Index
 35005                                  ;			CX User Index
 35006                                  ;		    OUT:ES:DI -> Name
 35007                                  ;			BX = UID
 35008                                  ;		    CX = # locked blocks held by this UID
 35009                                  ;	AL=6	Get DOS data area
 35010                                  ;		    OUT: DS:SI -> Start
 35011                                  ;			CX size in bytes of swap if indos
 35012                                  ;			DX size in bytes of swap always
 35013                                  ;	AL=7	Get truncate flag
 35014                                  ;	AL=8	Set truncate flag
 35015                                  ;	AL=9	Close all spool files
 35016                                  ;	AL=10	SetExtendedError
 35017                                  ;
 35018                                  ;----------------------------------------------------------------------------
 35019                                  
 35020                                  _$ServerCall:
 35021                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35022                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 35023                                  	; 10/06/2019
 35024                                  	; 29/04/2019 - Retro DOS v4.0
 35025                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 35026                                  
 35027                                  	; 05/08/2018 - Retro DOS v3.0
 35028                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 35029 00006632 3C07                    	CMP	AL,7
 35030 00006634 7204                    	JB	short SET_STUFF
 35031 00006636 3C09                    	CMP	AL,9
 35032 00006638 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 35033                                  SET_STUFF:
 35034 0000663A 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 35035                                  	;mov	bx,[si+12h]
 35036 0000663C 8B5C12                  	MOV	BX,[SI+DPL.UID]
 35037                                  
 35038                                  	; MSDOS 6.0
 35039                                  ;SR;
 35040                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 35041                                  ; of USER_ID
 35042                                  
 35043 0000663F 36F606[3010]01          	test	byte [SS:IsWin386],1
 35044 00006645 7505                    	jnz	short skip_win386
 35045                                  
 35046                                  ;hkn; SS override for user_id and proc_id
 35047                                  	; 15/08/2018
 35048 00006647 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 35049                                  
 35050                                  skip_win386:
 35051 0000664C 8B5C14                  	MOV	BX,[SI+DPL.PID]
 35052 0000664F 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 35053                                  NO_SET_ID:
 35054                                  	; 10/06/2019 - Retro DOS v4.0
 35055 00006654 2EFF36[1966]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 35056 00006659 2EFF36[1766]            	PUSH	word [cS:SERVERTAB]	; push table address
 35057 0000665E 50                      	PUSH	AX
 35058 0000665F E836AC                  	call	TableDispatch
 35059                                  
 35060                                  ;hkn; SS override
 35061                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 35062 00006662 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35063                                  	;error	error_invalid_function
 35064                                  	;mov	al,1
 35065 00006668 B001                    	MOV	AL,error_invalid_function
 35066                                  servercall_error:
 35067 0000666A E920A0                  	JMP	SYS_RET_ERR
 35068                                  
 35069                                  SERVERRETURN:
 35070 0000666D C3                      	retn
 35071                                  
 35072                                  ; Commit - iterate through the open file list and make sure that the
 35073                                  ; directory entries are correctly updated.
 35074                                  
 35075                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35076                                  COMMIT_ALL:
 35077 0000666E 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 35078 00006670 16                      	push	ss
 35079 00006671 1F                      	pop	ds
 35080 00006672 E813AD                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 35081                                  CommitLoop:
 35082 00006675 53                      	push	bx
 35083 00006676 E82401                  	call	SFFromSFN
 35084 00006679 7222                    	JC	short CommitDone
 35085 0000667B 26833D00                	cmp	word [es:di],0
 35086                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 35087                                  					; if (ThisSFT->refcount != 0)
 35088 0000667F 7418                    	JZ	short CommitNext
 35089                                  	;cmp	word [es:di],0FFFFh ; -1
 35090 00006681 26833DFF                	cmp	word [ES:DI],sf_busy
 35091                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 35092                                  					; BUSY SFTs have god knows what
 35093 00006685 7412                    	JZ	short CommitNext	;   in them.
 35094                                  	; 17/12/2022
 35095 00006687 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 35096                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 35097 0000668C 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 35098                                  					;	doesn't deadlock
 35099 0000668E 893E[9E05]              	MOV	[THISSFT],DI
 35100 00006692 8C06[A005]              	MOV	[THISSFT+2],ES
 35101 00006696 E876CA                  	call	DOS_COMMIT		;	DOSCommit ();
 35102                                  CommitNext:
 35103 00006699 5B                      	pop	bx
 35104 0000669A 43                      	INC	BX
 35105 0000669B EBD8                    	JMP	short CommitLoop
 35106                                  CommitDone:
 35107 0000669D E803AD                  	call	LCritSFT
 35108 000066A0 5B                      	pop	bx
 35109                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35110                                  Commit_Ok:
 35111 000066A1 E9E09F                  	jmp	SYS_RET_OK
 35112                                  	
 35113                                  
 35114                                  CLOSE_NAME:
 35115                                  
 35116                                  ;if installed
 35117                                  
 35118                                  ;hkn; SS override
 35119                                  	;call	far [ss:MFTcloN]
 35120 000066A4 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 35121                                  ;else
 35122                                  ;	Call	MFTcloN
 35123                                  ;endif
 35124                                  
 35125                                  CheckReturns:
 35126 000066A9 7202                    	JC	short func_err
 35127                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35128                                  	;transfer SYS_RET_OK
 35129                                  Commit_Okj:
 35130 000066AB EBF4                    	jmp	short Commit_Ok
 35131                                  	;jmp	SYS_RET_OK
 35132                                  
 35133                                  func_err:
 35134                                  	;transfer SYS_RET_ERR
 35135                                  	;jmp	SYS_RET_ERR
 35136 000066AD EBBB                    	jmp	short servercall_error
 35137                                  
 35138                                  CLOSE_UID:
 35139                                  
 35140                                  ;if installed
 35141                                  ;hkn; SS override
 35142                                  	;call	far [ss:MFTclU]
 35143 000066AF 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 35144                                  ;else
 35145                                  ;	Call	MFTclU
 35146                                  ;endif
 35147 000066B4 EBF3                    	JMP	short CheckReturns
 35148                                  
 35149                                  CLOSE_UID_PID:
 35150                                  
 35151                                  ;if installed
 35152                                  ;hkn; SS override
 35153                                  	;call	far [ss:MFTCloseP]
 35154 000066B6 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 35155                                  ;else
 35156                                  ;	Call	MFTCloseP
 35157                                  ;endif
 35158 000066BB EBEC                    	JMP	short CheckReturns
 35159                                  
 35160                                  GET_LIST:
 35161                                  
 35162                                  ;if installed
 35163                                  ;hkn; SS override
 35164                                  	;call	far [ss:MFT_get]
 35165 000066BD 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 35166                                  ;else
 35167                                  ;	Call	MFT_get
 35168                                  ;endif
 35169 000066C2 72E9                    	JC	short func_err
 35170 000066C4 E8039E                  	call	Get_User_Stack
 35171                                  	;mov	[si+2],bx
 35172 000066C7 895C02                  	MOV	[SI+user_env.user_BX],BX
 35173                                  	;mov	[si+10],di
 35174 000066CA 897C0A                  	MOV	[SI+user_env.user_DI],DI
 35175                                  	;mov	[si+16],es
 35176 000066CD 8C4410                  	MOV	[SI+user_env.user_ES],ES
 35177                                  SetCXOK:
 35178                                  	;mov	[si+4],cx
 35179 000066D0 894C04                  	MOV	[SI+user_env.user_CX],CX
 35180                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35181                                  	;transfer SYS_RET_OK
 35182                                  Commit_Okj2:
 35183                                  	; 17/12/2022
 35184 000066D3 EBCC                    	jmp	short Commit_Ok
 35185                                  	;jmp	short Commit_Okj
 35186                                  	;;jmp	SYS_RET_OK
 35187                                  
 35188                                  SRV_CALL:
 35189 000066D5 58                      	POP	AX			; get rid of call to $srvcall
 35190 000066D6 1E                      	push	ds
 35191 000066D7 56                      	push	si
 35192 000066D8 E8EF9D                  	call	Get_User_Stack
 35193 000066DB 5F                      	pop	di
 35194 000066DC 07                      	pop	es
 35195                                  
 35196                                  ; DS:SI point to stack
 35197                                  ; ES:DI point to DPL
 35198                                  
 35199 000066DD E897AB                  	call	XCHGP
 35200                                  
 35201                                  ; DS:SI point to DPL
 35202                                  ; ES:DI point to stack
 35203                                  ;
 35204                                  ; We now copy the registers from DPL to save stack
 35205                                  
 35206 000066E0 56                      	push	si
 35207 000066E1 B90600                  	MOV	CX,6
 35208 000066E4 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 35209 000066E6 47                      	INC	DI
 35210 000066E7 47                      	INC	DI			; Skip user_BP
 35211 000066E8 A5                      	MOVSW				; DS
 35212 000066E9 A5                      	MOVSW				; ES
 35213 000066EA 5E                      	pop	si			; DS:SI -> DPL
 35214 000066EB 8B04                    	mov	ax,[SI]
 35215                                  	;MOV	AX,[SI+DPL.AX]
 35216                                  	;mov	bx,[si+2]
 35217 000066ED 8B5C02                  	MOV	BX,[SI+DPL.BX]
 35218                                  	;mov	cx,[si+4]
 35219 000066F0 8B4C04                  	MOV	CX,[SI+DPL.CX]
 35220                                  	;mov	dx,[si+6]
 35221 000066F3 8B5406                  	MOV	DX,[SI+DPL.DX]
 35222                                  	;mov	di,[si+10]
 35223 000066F6 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 35224                                  	;mov	es,[si+14]
 35225 000066F9 8E440E                  	MOV	ES,[SI+DPL.ES]
 35226                                  	;push	word [si+8]
 35227 000066FC FF7408                  	PUSH	word [SI+DPL.SI]
 35228                                  	;mov	ds,[si+12]
 35229 000066FF 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 35230 00006702 5E                      	POP	SI
 35231                                  
 35232                                  ;hkn; SS override for next 3
 35233 00006703 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 35234 00006708 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 35235 0000670D 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 35236 00006713 E9B19C                  	jmp	REDISP
 35237                                  
 35238                                  GET_DOS_DATA:
 35239 00006716 16                      	push	ss
 35240 00006717 07                      	pop	es
 35241 00006718 BF[2003]                	MOV     DI,SWAP_START
 35242 0000671B B9[AC0A]                	MOV     CX,SWAP_END
 35243 0000671E BA[3A03]                	MOV     DX,SWAP_ALWAYS
 35244 00006721 29F9                    	SUB     CX,DI
 35245 00006723 29FA                    	SUB     DX,DI
 35246 00006725 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 35247 00006727 83D100                  	ADC     CX,0                    ; div by 2 + round up
 35248 0000672A D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 35249 0000672C E89B9D                  	call	Get_User_Stack
 35250                                  	;mov	[si+14],es
 35251 0000672F 8C440E                  	MOV     [SI+user_env.user_DS],ES
 35252                                  	;mov	[si+8],di
 35253 00006732 897C08                  	MOV     [SI+user_env.user_SI],DI
 35254                                  	;mov	[si+6],dx
 35255 00006735 895406                  	MOV     [SI+user_env.user_DX],DX
 35256 00006738 EB96                    	JMP	short SetCXOK
 35257                                  
 35258                                  SPOOL_OPER:
 35259                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 35260                                  
 35261 0000673A 50                      	push    ax
 35262 0000673B B82511                  	mov     ax,1125h
 35263 0000673E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 35264                                  			; STACK: WORD subfunction
 35265                                  			; Return: CF set on error, AX = error code
 35266                                  			; STACK unchanged
 35267 00006740 5B                      	pop	bx
 35268                                  	; 17/12/2022
 35269                                  	;JC	short func_err2
 35270 00006741 7390                    	jnc	short Commit_Okj2
 35271                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35272                                  	;;jmp	SYS_RET_OK
 35273                                  	;jmp	short Commit_Okj2
 35274                                  	
 35275                                  func_err2:
 35276 00006743 E9479F                  	jmp	SYS_RET_ERR
 35277                                  
 35278                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 35279                                  ;--------------------------------------------------------------------------
 35280                                  ;
 35281                                  ; Procedure Name : $SetExtendedError
 35282                                  ;
 35283                                  ; $SetExtendedError takes extended error information and loads it up for the
 35284                                  ; next extended error call.  This is used by interrupt-level proccessors to
 35285                                  ; mask their actions.
 35286                                  ;
 35287                                  ;   Inputs: DS:SI points to DPL which contains all registers
 35288                                  ;   Outputs: none
 35289                                  ;
 35290                                  ;---------------------------------------------------------------------------
 35291                                  
 35292                                  _$SetExtendedError:
 35293                                  
 35294                                  ;hkn; SS override for all variables used
 35295                                  
 35296 00006746 8B04                    	mov	ax,[si]
 35297                                  	;MOV	AX,[SI+DPL.AX]
 35298 00006748 36A3[2403]              	MOV	[SS:EXTERR],AX
 35299                                  	;mov	ax,[si+10]
 35300 0000674C 8B440A                  	MOV	AX,[SI+DPL.DI]
 35301 0000674F 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 35302                                  	;mov	ax,[si+14]
 35303 00006753 8B440E                  	MOV	AX,[SI+DPL.ES]
 35304 00006756 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 35305                                  	;mov	ax,[si+2]
 35306 0000675A 8B4402                  	MOV	AX,[SI+DPL.BX]
 35307 0000675D 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 35308                                  	;mov	ax,[si+4]
 35309 00006761 8B4404                  	MOV	AX,[SI+DPL.CX]
 35310 00006764 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 35311 00006769 C3                      	retn
 35312                                  
 35313                                  ;============================================================================
 35314                                  ; UTIL.ASM, MSDOS 6.0, 1991
 35315                                  ;============================================================================
 35316                                  ; 05/08/2018 - Retro DOS v3.0
 35317                                  ; 05/05/2019 - Retro DOS v4.0
 35318                                  
 35319                                  ;**	Handle related utilities for MSDOS 2.X.
 35320                                  ;----------------------------------------------------------------------------
 35321                                  ;	pJFNFromHandle	written
 35322                                  ;	SFFromHandle	written
 35323                                  ;	SFFromSFN	written
 35324                                  ;	JFNFree 	written
 35325                                  ;	SFNFree 	written
 35326                                  ;
 35327                                  ;	Modification history:
 35328                                  ;
 35329                                  ;	    Created: MZ 1 April 1983
 35330                                  ;----------------------------------------------------------------------------
 35331                                  
 35332                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 35333                                  
 35334                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 35335                                  ;----------------------------------------------------------------------------
 35336                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 35337                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 35338                                  ;
 35339                                  ;	NOTE:
 35340                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35341                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 35342                                  ;
 35343                                  ;	ENTRY	(bx) = handle
 35344                                  ;	EXIT	'C' clear if ok
 35345                                  ;		  (es:di) = address of JFN value
 35346                                  ;		'C' set if error
 35347                                  ;		  (ax) = error code
 35348                                  ;	USES	AX, DI, ES, Flags
 35349                                  ;----------------------------------------------------------------------------
 35350                                  
 35351                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35352                                  
 35353                                  pJFNFromHandle:
 35354                                  	; 05/05/2019 - Retro DOS v4.0
 35355                                  	;getdseg <es>			; es -> dosdata
 35356 0000676A 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35357                                  	
 35358                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 35359 0000676F 268E06[3003]            	mov	es,[es:CurrentPDB]
 35360                                  
 35361                                  	;cmp	bx,[ES:32h]
 35362 00006774 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 35363 00006779 7204                    	JB	short pjfn10		; no, get offset
 35364                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 35365                                  	;mov	al,6
 35366 0000677B B006                    	MOV     AL,error_invalid_handle ; appropriate error
 35367                                  ReturnCarry:
 35368 0000677D F9                      	STC                             ; signal error
 35369 0000677E C3                      	retn				; go back
 35370                                  pjfn10: 
 35371                                  	;les	di,[es:34h]
 35372 0000677F 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 35373 00006784 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 35374                                  	;clc
 35375                                  pJFNFromHandle_error:
 35376 00006786 C3                      	retn
 35377                                  
 35378                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 35379                                  ;----------------------------------------------------------------------------
 35380                                  ;
 35381                                  ; Procedure Name : SFFromHandle
 35382                                  ;
 35383                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 35384                                  ;
 35385                                  ;   Input:      BX has handle
 35386                                  ;   Output:     Carry Set
 35387                                  ;                   AX has error code
 35388                                  ;               Carry Reset
 35389                                  ;                   ES:DI has pointer to SF entry
 35390                                  ;   Registers modified: If error, AX,ES, else ES:DI
 35391                                  ; NOTE:
 35392                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35393                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35394                                  ;
 35395                                  ;----------------------------------------------------------------------------
 35396                                  
 35397                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35398                                  
 35399                                  SFFromHandle:
 35400 00006787 E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 35401                                  	;retc				; return if error
 35402 0000678A 72FA                    	jc	short pJFNFromHandle_error
 35403 0000678C 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 35404                                  	;JNZ	short GetSF		; nope, suck out SF
 35405                                  	;;mov	al,6
 35406                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35407                                  	;jmp	short ReturnCarry	; signal it
 35408                                  	; 17/12/2022
 35409                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35410 00006790 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 35411                                  	;JNZ	short GetSF		; nope, suck out SF
 35412                                  	;;mov	al,6
 35413                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35414                                  	;jmp	short ReturnCarry	; signal it
 35415                                  GetSF:
 35416 00006792 53                      	push	bx			; save handle
 35417 00006793 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 35418 00006796 30FF                    	XOR     BH,BH                   ; ignore upper half
 35419 00006798 E80200                  	CALL    SFFromSFN               ; get real sf spot
 35420 0000679B 5B                      	pop	bx			; restore
 35421 0000679C C3                      	retn                        	; say goodbye
 35422                                  
 35423                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 35424                                  
 35425                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 35426                                  ;----------------------------------------------------------------------------
 35427                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 35428                                  ;	is more than just a simple index instruction because the SF table
 35429                                  ;	can be made up of multiple pieces chained together. We follow the
 35430                                  ;	chain to the right piece and then do the index operation.
 35431                                  ;
 35432                                  ;   NOTE:
 35433                                  ;	This routine is called from SFFromHandle which is called
 35434                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35435                                  ;
 35436                                  ;	ENTRY	BX has SF index
 35437                                  ;	EXIT	'C' clear if OK
 35438                                  ;		  ES:DI points to SF entry
 35439                                  ;		'C' set if index too large
 35440                                  ;	USES	BX, DI, ES
 35441                                  ;----------------------------------------------------------------------------
 35442                                  
 35443                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35444                                  
 35445                                  SFFromSFN:
 35446                                  	; 05/05/2019 - Retro DOS v4.0
 35447                                  	;getdseg <es>			; es -> dosdata
 35448 0000679D 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35449                                  
 35450                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 35451 000067A2 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 35452                                  sfsfn5:	
 35453                                  	;cmp	bx,[es:di+4]
 35454 000067A7 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 35455 000067AB 720E                    	JB	short sfsfn7		; yes, go grab it
 35456                                  	;sub	bx,[es:di+4]
 35457 000067AD 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 35458 000067B1 26C43D                  	les	di,[es:di] ; 14/08/2018
 35459                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 35460 000067B4 83FFFF                  	CMP     DI,-1                   ; end of tables?
 35461 000067B7 75EE                    	JNZ	short sfsfn5		; no, try again
 35462 000067B9 F9                      	STC
 35463 000067BA C3                      	retn				; return with error, not found
 35464                                  sfsfn7:
 35465 000067BB 50                      	push	ax
 35466                                  	;mov	ax,53 ; MSDOS 3.3
 35467                                  	;mov	ax,59 ; MSDOS 6.0
 35468                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 35469                                  	
 35470                                  	; 17/12/2022
 35471 000067BC B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 35472                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35473                                  	;mov	ax,SF_ENTRY.size ; 59
 35474                                  	
 35475 000067BE F6E3                    	MUL	BL			; (ax) = offset into this SF block
 35476 000067C0 01C7                    	ADD	DI,AX			; add base of SF block
 35477 000067C2 58                      	pop	ax
 35478                                  	;add	di,6
 35479 000067C3 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 35480 000067C6 C3                      	retn				; return with 'C' clear
 35481                                  
 35482                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 35483                                  
 35484                                  ;**	JFNFree - Find a Free JFN Slot
 35485                                  ;----------------------------------------------------------------------------
 35486                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 35487                                  ;
 35488                                  ;	ENTRY	(ss) = DOSDATA
 35489                                  ;	EXIT	'C' clear if OK
 35490                                  ;		  (bx) = new handle
 35491                                  ;		  (es:di) = pointer to JFN slot
 35492                                  ;		'C' set if error
 35493                                  ;		  (al) = error code
 35494                                  ;	USES	bx, di, es, flags
 35495                                  ;----------------------------------------------------------------------------
 35496                                  
 35497                                  JFNFree:
 35498 000067C7 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 35499                                  jfnf1:	
 35500 000067C9 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 35501 000067CC 7209                    	JC	short jfnf5		; no more handles
 35502 000067CE 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 35503 000067D2 7405                    	je	short jfnfx		; yes, carry is clear
 35504 000067D4 43                      	INC     BX                      ; no, next handle
 35505 000067D5 EBF2                    	JMP	short jfnf1		; and try again
 35506                                  
 35507                                  	; Error. 'C' set
 35508                                  jfnf5:	
 35509                                  	;mov	al,4
 35510 000067D7 B004                    	MOV	AL,error_too_many_open_files
 35511                                  jfnfx:	
 35512 000067D9 C3                      	retn				; bye
 35513                                  
 35514                                  ;	BREAK <SFNFree - Allocate a free SFN>
 35515                                  
 35516                                  ;**	SFNFree - Allocate a Free SFN/SFT
 35517                                  ;----------------------------------------------------------------------------
 35518                                  ;	SFNFree scans through the sf table looking for a free entry
 35519                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 35520                                  ;
 35521                                  ;	The problem is that we want to mark the SFT busy so that other threads
 35522                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 35523                                  ;	we can't just mark it busy because we may get blown out of our open
 35524                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 35525                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 35526                                  ;	an SFT with this value we look to see if it belongs to this user
 35527                                  ;	and process.  If it does belong to us then it must be an orphan
 35528                                  ;	and we reclaim it.
 35529                                  ;
 35530                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 35531                                  ;		over and over, but we could at least set a high water mark...
 35532                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 35533                                  ;		even though this is not a frequently called routine - jgl
 35534                                  ;
 35535                                  ;	ENTRY	(ss) = DOSDATA
 35536                                  ;	EXIT	'C' clear if no error
 35537                                  ;		  (bx) = SFN
 35538                                  ;		  (es:di) = pointer to SFT
 35539                                  ;		  es:[di].SFT_REF_COUNT = -1
 35540                                  ;		'C' set if error
 35541                                  ;		  (al) = error code
 35542                                  ;	USES	bx, di, es, Flags
 35543                                  ;----------------------------------------------------------------------------
 35544                                  
 35545                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35546                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 35547                                  
 35548                                  SFNFree:
 35549                                  	; 12/08/2018
 35550                                  	; 05/08/2018 - Retro DOS v3.0
 35551                                  	;
 35552                                  	; MSDOS 6.0
 35553 000067DA 50                      	push	ax
 35554 000067DB 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 35555                                  sfnf5:	
 35556 000067DD 53                      	push	bx
 35557 000067DE E8BCFF                  	call	SFFromSFN		; get the potential handle
 35558 000067E1 5B                      	pop	bx
 35559 000067E2 723A                    	jc	short sfnf95		; no more free SFNs
 35560 000067E4 26833D00                	cmp	word [ES:DI],0
 35561                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 35562 000067E8 741D                    	je	short sfnf20			; yep, got one
 35563                                  	
 35564                                  	;cmp	word [es:di],0FFFFh ; -1
 35565 000067EA 26833DFF                	cmp	word [ES:DI],sf_busy
 35566                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35567 000067EE 7403                    	je	short sfnf10		; special busy mark
 35568                                  sfnf7:	
 35569 000067F0 43                      	inc	bx			; try the next one
 35570 000067F1 EBEA                    	jmp	short sfnf5
 35571                                  
 35572                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 35573                                  ;	it was abandoned during a earlier call and we can use it.
 35574                                  ;
 35575                                  ;	(bx)	= SFN
 35576                                  ;	(es:di) = pointer to SFT
 35577                                  ;	(TOS)	= caller's (ax)
 35578                                  
 35579                                  sfnf10:	
 35580 000067F3 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35581                                  	;cmp	[es:di+2Fh],ax
 35582 000067F7 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 35583 000067FB 75F3                    	jnz	short sfnf7		; not ours
 35584 000067FD 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35585                                  	;cmp	[es:di+31h],ax
 35586 00006801 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 35587 00006805 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 35588                                  
 35589                                  ;	We have an SFT to allocate
 35590                                  ;
 35591                                  ;	(bx)	= SFN
 35592                                  ;	(es:di) = pointer to SFT
 35593                                  ;	(TOS)	= caller's (ax)
 35594                                  
 35595                                  sfnf20:
 35596                                  	; cf = 0 ;; Retro DOS v3.0
 35597                                  
 35598                                  	;mov	word [es:di],0FFFFh
 35599 00006807 26C705FFFF              	mov	word [ES:DI],sf_busy
 35600                                  					; make sure that this is allocated
 35601                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35602                                  
 35603 0000680C 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35604                                  	;mov	[es:di+2Fh],ax
 35605 00006810 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 35606 00006814 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35607                                  	;mov	[es:di+31h],ax
 35608 00006818 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 35609                                  sfnf21: ;; Retro DOS v3.0
 35610                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35611                                  	;pop	ax
 35612                                  	;;clc
 35613                                  	;retn				; return with no error
 35614                                  	; 17/12/2022
 35615 0000681C 58                      	pop	ax
 35616                                  	;clc
 35617 0000681D C3                      	retn
 35618                                  
 35619                                  ;**	Error - no more free SFNs
 35620                                  ;
 35621                                  ;	'C' set
 35622                                  ;	(TOS) = saved ax
 35623                                  
 35624                                  sfnf95: 
 35625 0000681E 58                      	pop	ax
 35626                                  	;mov	al,4
 35627 0000681F B004                    	mov	al,error_too_many_open_files
 35628 00006821 C3                      	retn				; return with 'C' and error
 35629                                  
 35630                                  ;============================================================================
 35631                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 35632                                  ;============================================================================
 35633                                  ; 13/07/2018 - Retro DOS v3.0
 35634                                  ; 20/05/2019 - Retro DOS v4.0
 35635                                  
 35636                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 35637                                  
 35638                                  ;	BREAK <$Close - return a handle to the system>
 35639                                  ;----------------------------------------------------------------------------
 35640                                  ;
 35641                                  ;**	$Close - Close a file Handle
 35642                                  ;
 35643                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 35644                                  ;		path
 35645                                  ;
 35646                                  ;	Assembler usage:
 35647                                  ;	    MOV     BX, handle
 35648                                  ;	    MOV     AH, Close
 35649                                  ;	    INT     int_command
 35650                                  ;
 35651                                  ;	ENTRY	(bx) = handle
 35652                                  ;	EXIT	<normal INT21 return convention>
 35653                                  ;	USES	all
 35654                                  ;
 35655                                  ;----------------------------------------------------------------------------
 35656                                  
 35657                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35658                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 35659                                  
 35660                                  _$CLOSE:
 35661                                  ;	Grab the SFT pointer from the JFN.
 35662                                  
 35663 00006822 E85A02                  	call	CheckOwner		; get system file entry
 35664 00006825 722B                    	jc	short CloseError	; error return
 35665 00006827 16                      	push	ss
 35666 00006828 1F                      	pop	ds			; For DOS_CLOSE
 35667 00006829 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35668 0000682D 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35669                                  
 35670                                  ; DS:SI point to JFN table entry.
 35671                                  ; ES:DI point to SFT
 35672                                  ;
 35673                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 35674                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 35675                                  ; If the file was not a net FCB, we free the JFN too.
 35676                                  
 35677                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 35678 00006831 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 35679 00006835 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 35680                                  	;mov	al,[ES:DI+2]
 35681 00006837 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 35682                                  	;and	al,0F0h
 35683 0000683B 24F0                    	AND	AL,SHARING_MASK
 35684                                  	;cmp	al,70h
 35685 0000683D 3C70                    	CMP	AL,SHARING_NET_FCB
 35686 0000683F 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 35687                                  
 35688                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 35689                                  ; -1.
 35690                                  
 35691                                  FreeJFN:
 35692 00006841 E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 35693 00006844 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 35694                                  PostFree:
 35695                                  
 35696                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 35697                                  
 35698 00006848 E86FC7                  	call	DOS_CLOSE
 35699                                  
 35700                                  ; DOS_Close may return an error. If we see such an error, we report it but
 35701                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 35702                                  
 35703 0000684B 7205                    	JC	short CloseError
 35704                                  	;mov	ah,3Eh
 35705 0000684D B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 35706                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35707                                  CloseOk:
 35708 0000684F E9329E                  	jmp	SYS_RET_OK
 35709                                  CloseError:
 35710 00006852 E9389E                  	jmp	SYS_RET_ERR
 35711                                  
 35712                                  ;	BREAK <$Commit - commit the file>
 35713                                  ;----------------------------------------------------------------------------
 35714                                  ;
 35715                                  ;**	$Commit - Commit a File
 35716                                  ;
 35717                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 35718                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 35719                                  ;	the directory entry, etc., so this commit is pretty useless. check
 35720                                  ;	and fix this!! jgl
 35721                                  ;
 35722                                  ;	Assembler usage:
 35723                                  ;	    MOV     BX, handle
 35724                                  ;	    MOV     AH, Commit
 35725                                  ;	    INT     int_command
 35726                                  ;
 35727                                  ;	ENTRY	(bx) = handle
 35728                                  ;	EXIT	none
 35729                                  ;	USES	all
 35730                                  ;;----------------------------------------------------------------------------
 35731                                  
 35732                                  _$COMMIT:
 35733                                  ;	Grab the SFT pointer from the JFN.
 35734                                  
 35735 00006855 E82702                  	call	CheckOwner		; get system file entry
 35736 00006858 7213                    	JC	short CommitError	; error return
 35737 0000685A 16                      	push	ss
 35738 0000685B 1F                      	pop	ds			; For DOS_COMMIT
 35739 0000685C 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35740 00006860 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35741                                  
 35742                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 35743                                  ;
 35744                                  ;	ES:DI point to SFT
 35745                                  
 35746 00006864 E8A8C8                  	call	DOS_COMMIT
 35747 00006867 7204                    	JC	short CommitError
 35748                                  	; 07/12/2022
 35749                                  	;jc	short CloseError
 35750                                  	;mov	ah,68h
 35751 00006869 B468                    	MOV	AH,COMMIT
 35752                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35753                                  	;jmp	SYS_RET_OK
 35754                                  CommitOk:
 35755 0000686B EBE2                    	jmp	short CloseOk	
 35756                                  
 35757                                  CommitError:
 35758                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35759                                  	;jmp	SYS_RET_ERR
 35760 0000686D EBE3                    	jmp	short CloseError
 35761                                  
 35762                                  ;	BREAK <$ExtHandle - extend handle count>
 35763                                  
 35764                                  ;**	$ExtHandle - Extend Handle Count
 35765                                  ;----------------------------------------------------------------------------
 35766                                  ;	Assembler usage:
 35767                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 35768                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 35769                                  ;	    INT     int_command 		 busy )
 35770                                  ;
 35771                                  ;	ENTRY	(bx) = new number of handles
 35772                                  ;	EXIT	'C' clear if OK
 35773                                  ;		'C' set iff err
 35774                                  ;		  (ax) = error code
 35775                                  ;			 AX = error_not_enough_memory
 35776                                  ;			      error_too_many_open_files
 35777                                  ;	USES	all
 35778                                  ;----------------------------------------------------------------------------
 35779                                  
 35780                                  _$ExtHandle:
 35781 0000686F 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 35782                                  	;cmp	bx,20
 35783 00006871 83FB14                  	CMP	BX,FILPERPROC
 35784 00006874 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 35785 00006876 BB1400                  	MOV	BX,FILPERPROC
 35786                                  exth2:	
 35787 00006879 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 35788                                  	;mov	cx,[ES:32h]
 35789 0000687E 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 35790 00006883 39CB                    	CMP	BX,CX			; the requested == current
 35791 00006885 7455                    	JE	short ok_done 		; yes and exit
 35792 00006887 7722                    	JA	short larger		; go allocate new table
 35793                                  
 35794                                  ;	We're going to shrink the # of handles available
 35795                                  
 35796 00006889 BD0100                  	MOV	BP,1			; shrink
 35797                                  	;mov	ds,[ES:36h]
 35798 0000688C 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 35799 00006891 89DE                    	MOV	SI,BX			;
 35800 00006893 29D9                    	SUB	CX,BX			; get difference
 35801                                  
 35802                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 35803                                  chck_handles:
 35804 00006895 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 35805 00006898 753D                    	JNZ	short too_many_files	; status
 35806 0000689A 46                      	INC	SI
 35807 0000689B E2F8                    	LOOP	chck_handles
 35808 0000689D 83FB14                  	CMP	BX,FILPERPROC		; = 20
 35809 000068A0 7709                    	JA	short larger		; no
 35810                                  
 35811 000068A2 BD0200                  	MOV	BP,2			; psp
 35812                                  	;mov	di,24
 35813 000068A5 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 35814 000068A8 53                      	PUSH	BX
 35815 000068A9 EB1D                    	JMP	short movhandl
 35816                                  
 35817                                  larger:
 35818 000068AB 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 35819 000068AE 747F                    	JZ	short invalid_func	; 10/08/2018
 35820 000068B0 F8                      	CLC
 35821 000068B1 53                      	PUSH	BX			; save requested number
 35822 000068B2 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 35823 000068B5 B104                    	MOV	CL,4
 35824                                  	;ror	bx,cl			; MSDOS 3.3
 35825 000068B7 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 35826 000068B9 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 35827                                  
 35828 000068BD 55                      	PUSH	BP
 35829 000068BE E8DBFA                  	call	_$ALLOC			; allocate memory
 35830 000068C1 5D                      	POP	BP
 35831 000068C2 7266                    	JC	short no_memory		; not enough meory
 35832                                  
 35833 000068C4 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 35834 000068C6 31FF                    	XOR	DI,DI
 35835                                  movhandl:
 35836 000068C8 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 35837                                  
 35838 000068CD F7C50300                	test	BP,3			; enlarge ?
 35839 000068D1 740C                    	JZ	short enlarge 		; yes
 35840 000068D3 59                      	POP	CX			; cx = the amount you shrink
 35841 000068D4 51                      	PUSH	CX
 35842 000068D5 EB0C                    	JMP	short copy_hand
 35843                                  
 35844                                  ;	Done.  'C' clear
 35845                                  
 35846                                  ; 17/12/2022
 35847                                  ;ok_done:
 35848                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35849                                  ;	;jmp	short CommitOk
 35850                                  ;	; 17/12/2022
 35851                                  ;	jmp	SYS_RET_OK
 35852                                  
 35853                                  too_many_files:
 35854                                  	;mov	al,4
 35855 000068D7 B004                    	MOV	AL,error_too_many_open_files
 35856                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35857                                  	;jmp	SYS_RET_ERR
 35858                                  CommitErrorj:
 35859                                  	;jmp	short CommitError
 35860                                  	; 17/12/2022
 35861 000068D9 E9B19D                  	jmp	SYS_RET_ERR
 35862                                  
 35863                                  ; 17/12/2022 
 35864                                  ok_done:
 35865                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35866                                  	;jmp	short CommitOk
 35867                                  	; 17/12/2022
 35868 000068DC E9A59D                  	jmp	SYS_RET_OK
 35869                                  
 35870                                  enlarge:
 35871                                  	;mov	cx,[32h]
 35872 000068DF 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 35873                                  copy_hand:
 35874 000068E3 89CA                    	MOV	DX,CX
 35875                                  	;lds	si,[34h]
 35876 000068E5 C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 35877 000068E9 F3A4                    	REP	MOVSB			; copy infomation to new table
 35878 000068EB 59                      	POP	CX			; get new number of handles
 35879 000068EC 51                      	PUSH	CX			; save it again
 35880 000068ED 29D1                    	SUB	CX,DX			; get the difference
 35881 000068EF B0FF                    	MOV	AL,-1			; set availability to handles
 35882 000068F1 F3AA                    	REP	STOSB
 35883 000068F3 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 35884                                  	;cmp	word [34h],0
 35885 000068F8 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 35886 000068FD 750D                    	JNZ	short update_info	; yes, go update PDB entries
 35887 000068FF 55                      	PUSH	BP
 35888 00006900 1E                      	PUSH	DS			; save old table segment
 35889 00006901 06                      	PUSH	ES			; save new table segment
 35890 00006902 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 35891 00006906 E80DFC                  	call	_$DEALLOC		; deallocate old table meomory
 35892 00006909 07                      	POP	ES			; restore new table segment
 35893 0000690A 1F                      	POP	DS			; restore old table segment
 35894 0000690B 5D                      	POP	BP
 35895                                  
 35896                                  update_info:
 35897 0000690C F7C50200                	test	BP,2			; psp?
 35898 00006910 7408                    	JZ	short non_psp 		; no
 35899                                  	;mov	word [34h],18h ; 24
 35900 00006912 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 35901 00006918 EB06                    	JMP	short final
 35902                                  non_psp:
 35903                                  	;mov	word [34h],0
 35904 0000691A C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 35905                                  final:
 35906                                  	;mov	[36h],es	
 35907 00006920 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 35908                                  	;pop	word [32h]
 35909 00006924 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 35910                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35911                                  	;jmp	SYS_RET_OK
 35912                                  ok_done_j:
 35913 00006928 EBB2                    	jmp	short ok_done
 35914                                  
 35915                                  no_memory:
 35916 0000692A 5B                      	POP	BX			; clean stack
 35917                                  	;mov	al,8
 35918 0000692B B008                    	MOV	AL,error_not_enough_memory
 35919                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35920                                  	;jmp	SYS_RET_ERR
 35921                                  CommitErrorj2:
 35922 0000692D EBAA                    	jmp	short CommitErrorj
 35923                                  
 35924                                  invalid_func:
 35925                                  	;mov	al,1
 35926 0000692F B001                    	MOV	AL,error_invalid_function
 35927                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35928                                  	;jmp	SYS_RET_ERR
 35929                                  CommitErrorj3:
 35930                                  	;jmp	short CommitErrorj2
 35931                                  	; 17/12/2022
 35932 00006931 EBA6                    	jmp	short CommitErrorj
 35933                                  
 35934                                  ; 20/05/2019 - Retro DOS v4.0
 35935                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 35936                                  
 35937                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35938                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 35939                                  
 35940                                  ;	BREAK <$READ - Read from a file handle>
 35941                                  ;----------------------------------------------------------------------------
 35942                                  ;
 35943                                  ;**	$Read - Read from a File Handle
 35944                                  ;
 35945                                  ;   Assembler usage:
 35946                                  ;
 35947                                  ;	LDS	DX, buf
 35948                                  ;	MOV	CX, count
 35949                                  ;	MOV	BX, handle
 35950                                  ;	MOV	AH, Read
 35951                                  ;	INT	int_command
 35952                                  ;	  AX has number of bytes read
 35953                                  ;
 35954                                  ;	ENTRY	(bx) = file handle
 35955                                  ;		(cx) = byte count
 35956                                  ;		(ds:dx) = buffer address
 35957                                  ;	EXIT	Through system call return so that to user:
 35958                                  ;		  'C' clear if OK
 35959                                  ;		    (ax) = bytes read
 35960                                  ;		  'C' set if error
 35961                                  ;		    (ax) = error code
 35962                                  ;
 35963                                  ;----------------------------------------------------------------------------
 35964                                  
 35965                                  _$READ:
 35966 00006933 BE[7D33]                	MOV	SI,DOS_READ
 35967                                  ReadDo:
 35968 00006936 E831FE                  	call	pJFNFromHandle
 35969 00006939 7208                    	JC	short ReadError
 35970                                  
 35971 0000693B 268A05                  	MOV	AL,[ES:DI]
 35972 0000693E E83E01                  	call	CheckOwner		; get the handle
 35973 00006941 7303                    	JNC	short ReadSetup		; no errors do the operation
 35974                                  
 35975                                  ;	Have an error. 'C' set
 35976                                  
 35977                                  ReadError:
 35978                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35979                                  	;;jmp	SYS_RET_ERR		; go to error traps
 35980                                  	;jmp	short CommitErrorj3
 35981                                  	; 17/12/2022
 35982 00006943 E9479D                  	jmp	SYS_RET_ERR
 35983                                  
 35984                                  ReadSetup:
 35985 00006946 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 35986 0000694B 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 35987                                  	; 20/05/2019 - Retro DOS v4.0
 35988                                  	; MSDOS 6.0 
 35989                                  ;; Extended Open
 35990                                  	;test	byte [es:di+3],20h
 35991 00006950 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 35992                                  						 ;AN000;;EO. need i24
 35993 00006955 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 35994 00006957 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 35995                                  					;AN000;;EO. set it off;smr;SS Override
 35996                                  needi24:				;AN000;
 35997                                  ;; Extended Open
 35998 0000695D 36FF36[2C03]            	push	word [SS:DMAADD]
 35999 00006962 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 36000                                  
 36001                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36002                                  
 36003                                  	; 26/07/2019
 36004                                  
 36005                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36006                                  	;
 36007                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 36008                                  	; there is not another caller; it is better to put the code in this proc
 36009                                   	; here instead of calling it as a subroutine; but I have modified code
 36010                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 36011                                  
 36012                                  	; MSDOS 6.0
 36013 00006967 E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 36014                                  	
 36015                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36016                                  	; MSDOS 3.3
 36017                                  	;MOV	BX,DX			; copy offset
 36018                                  	;push	cx			; don't stomp on count
 36019                                  	;MOV	CL,4			; bits to shift bytes->para
 36020                                  	;SHR	BX,CL			; get number of paragraphs
 36021                                  	;pop	cx			; get count back
 36022                                  	;MOV	AX,DS			; get original segment
 36023                                  	;ADD	AX,BX			; get new segment
 36024                                  	;MOV	DS,AX			; in seg register
 36025                                  	;AND	DX,0Fh			; normalize offset
 36026                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36027                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36028                                  						;smr;SS Override
 36029                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36030                                  	
 36031 0000696A 16                      	push	ss			; go for DOS addressability
 36032 0000696B 1F                      	pop	ds
 36033                                  
 36034 0000696C FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 36035                                  
 36036 0000696E 8F06[2E03]              	pop	word [DMAADD+2]
 36037 00006972 8F06[2C03]              	pop	word [DMAADD]
 36038                                  	;JNC	short READ_OK		;AN002;
 36039                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 36040                                  	; 17/12/2022
 36041 00006976 72CB                    	jc	short ReadError
 36042                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36043                                  	;jnc	short READ_OK		;AN002;
 36044                                  	;jmp	short ReadError
 36045                                  
 36046                                  READ_OK:
 36047 00006978 89C8                    	MOV	AX,CX			; get correct return in correct reg
 36048                                  Read_Okj:
 36049                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36050                                  	;;jmp	SYS_RET_OK		; successful return
 36051                                  	;jmp	short ok_done_j
 36052                                  	; 17/12/2022
 36053 0000697A E9079D                  	jmp	SYS_RET_OK
 36054                                  
 36055                                  ; 13/07/2018 - Retro DOS v3.0
 36056                                  
 36057                                  ;----------------------------------------------------------------------------
 36058                                  
 36059                                  ;   Input: DS:DX points to user's buffer addr
 36060                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 36061                                  ;   Output: [DMAADD] set
 36062                                  
 36063                                  ; 20/05/2019 - Retro DOS v4.0
 36064                                  ; 26/07/2019
 36065                                  ;	; MSDOS 6.0
 36066                                  ;Align_Buffer:
 36067                                  ;	MOV	BX,DX			; copy offset
 36068                                  ;	push	cx			; don't stomp on count
 36069                                  ;	MOV	CL,4			; bits to shift bytes->para
 36070                                  ;	SHR	BX,CL			; get number of paragraphs
 36071                                  ;	pop	cx			; get count back
 36072                                  ;	MOV	AX,DS			; get original segment
 36073                                  ;	ADD	AX,BX			; get new segment
 36074                                  ;	MOV	DS,AX			; in seg register
 36075                                  ;	AND	DX,0Fh			; normalize offset
 36076                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36077                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36078                                  ;						;smr;SS Override
 36079                                  ;	retn
 36080                                  
 36081                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36082                                  Align_Buffer:
 36083 0000697D 89D3                    	MOV	BX,DX			; copy offset
 36084 0000697F 51                      	push	cx			; don't stomp on count
 36085 00006980 B104                    	MOV	CL,4			; bits to shift bytes->para
 36086 00006982 D3EB                    	SHR	BX,CL			; get number of paragraphs
 36087 00006984 59                      	pop	cx			; get count back
 36088 00006985 8CD8                    	MOV	AX,DS			; get original segment
 36089 00006987 01D8                    	ADD	AX,BX			; get new segment
 36090 00006989 8ED8                    	MOV	DS,AX			; in seg register
 36091 0000698B 83E20F                  	AND	DX,0Fh			; normalize offset
 36092 0000698E 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36093 00006993 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36094                                  						;smr;SS Override
 36095 00006998 C3                      	retn
 36096                                  
 36097                                  ; 20/05/2019 - Retro DOS v4.0
 36098                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 36099                                  
 36100                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36101                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 36102                                  
 36103                                  ;BREAK <$WRITE - write to a file handle>
 36104                                  ;----------------------------------------------------------------------------
 36105                                  ;
 36106                                  ;   Assembler usage:
 36107                                  ;	    LDS     DX, buf
 36108                                  ;	    MOV     CX, count
 36109                                  ;	    MOV     BX, handle
 36110                                  ;	    MOV     AH, Write
 36111                                  ;	    INT     int_command
 36112                                  ;	  AX has number of bytes written
 36113                                  ;   Errors:
 36114                                  ;	    AX = write_invalid_handle
 36115                                  ;	       = write_access_denied
 36116                                  ;
 36117                                  ;   Returns in register AX
 36118                                  ;
 36119                                  ;----------------------------------------------------------------------------
 36120                                  
 36121                                  _$WRITE:
 36122 00006999 BE[A635]                	MOV	SI,DOS_WRITE
 36123 0000699C EB98                    	JMP	short ReadDo
 36124                                  
 36125                                  ;BREAK <$LSEEK - move r/w pointer>
 36126                                  ;----------------------------------------------------------------------------
 36127                                  ;
 36128                                  ;   Assembler usage:
 36129                                  ;	    MOV     DX, offsetlow
 36130                                  ;	    MOV     CX, offsethigh
 36131                                  ;	    MOV     BX, handle
 36132                                  ;	    MOV     AL, method
 36133                                  ;	    MOV     AH, LSeek
 36134                                  ;	    INT     int_command
 36135                                  ;	  DX:AX has the new location of the pointer
 36136                                  ;   Error returns:
 36137                                  ;	    AX = error_invalid_handle
 36138                                  ;	       = error_invalid_function
 36139                                  ;   Returns in registers DX:AX
 36140                                  ;
 36141                                  ;----------------------------------------------------------------------------
 36142                                  
 36143                                  ; 21/05/2019 - Retro DOS v4.0
 36144                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 36145                                  
 36146                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36147                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 36148                                  
 36149                                  _$LSEEK:
 36150 0000699E E8DE00                  	call	CheckOwner		; get system file entry
 36151                                  
 36152                                  	; 17/12/2022
 36153                                  ;LSeekError:
 36154                                  	;JNC	short CHKOWN_OK		;AN002;
 36155                                  	;JMP	short ReadError		;AN002; error return
 36156                                  	; 17/12/2022
 36157                                  	; 02/06/2019
 36158 000069A1 72A0                    	jc	short ReadError
 36159                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36160                                  	;JNC	short CHKOWN_OK		;AN002;
 36161                                  	;JMP	short ReadError		;AN002; error return
 36162                                  
 36163                                  CHKOWN_OK:
 36164                                  					;AN002;
 36165 000069A3 3C02                    	CMP	AL,2			; is the seek value correct?
 36166 000069A5 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 36167                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 36168 000069A7 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36169                                  					;smr;SS Override
 36170                                  	;mov	al,1
 36171 000069AD B001                    	mov	al,error_invalid_function ; invalid method
 36172                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36173                                  LSeekError2:
 36174 000069AF EB92                    	jmp	short ReadError
 36175                                  
 36176                                  LSeekDisp:
 36177 000069B1 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 36178 000069B3 720A                    	JB	short LSeekStore	; just store CX:DX
 36179 000069B5 771B                    	JA	short LSeekEOF		; seek from end of file
 36180                                  	;add	dx,[es:di+21]
 36181 000069B7 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 36182                                  	;adc	cx,[es:di+23]
 36183 000069BB 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 36184                                  LSeekStore:
 36185 000069BF 89C8                    	MOV	AX,CX			; AX:DX
 36186 000069C1 92                      	XCHG	AX,DX			; DX:AX is the correct value
 36187                                  LSeekSetpos:
 36188                                  	;mov	[es:di+21],ax
 36189 000069C2 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 36190                                  	;mov	[es:di+23],dx
 36191 000069C6 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 36192 000069CA E8FD9A                  	call	Get_User_Stack
 36193                                  	;mov	[si+6],dx
 36194 000069CD 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 36195                                  	;jmp	SYS_RET_OK		; successful return
 36196                                  	; 25/06/2019
 36197                                  	;jmp	SYS_RET_OK_clc
 36198                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36199                                  	;jmp	SYS_RET_OK_clc
 36200                                  LSeekOk:
 36201 000069D0 EBA8                    	jmp     short Read_Okj
 36202                                  
 36203                                  LSeekEOF:
 36204                                  	;;test	word [es:di+5],8000h
 36205                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36206                                  	; 21/05/2019 - Retro DOS v4.0
 36207 000069D2 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 36208 000069D7 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 36209                                  LOCAL_LSeek:
 36210                                  	;add	dx,[es:di+17]
 36211 000069D9 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 36212                                  	;adc	cx,[es:di+19]
 36213 000069DD 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 36214 000069E1 EBDC                    	JMP	short LSeekStore	; go and set the position
 36215                                  
 36216                                  Check_LSeek_Mode:
 36217                                  	;;test	word [es:di+2],8000h
 36218                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 36219                                  	; 21/05/2019
 36220 000069E3 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 36221 000069E8 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 36222                                  	;mov	ax,[es:di+2]
 36223 000069EA 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 36224                                  	;and	ax, 0F0h
 36225 000069EE 25F000                  	AND	AX,SHARING_MASK
 36226                                  	;cmp	ax,40h
 36227 000069F1 83F840                  	CMP	AX,SHARING_DENY_NONE
 36228 000069F4 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 36229                                  	;cmp	ax,30h
 36230 000069F6 83F830                  	CMP	AX,SHARING_DENY_READ
 36231 000069F9 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 36232                                  NET_LSEEK:
 36233                                  ;	JMP	short LOCAL_LSeek
 36234                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 36235                                  	;CallInstall Net_Lseek,MultNET,33
 36236                                  	;JNC	short LSeekSetPos
 36237                                  
 36238 000069FB B82111                  	mov     ax,1121h
 36239 000069FE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 36240                                  			; CX:DX = offset (in bytes) from end
 36241                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 36242                                  			; SS = DOS CS
 36243                                  			; Return: CF set on error
 36244                                  			; CF clear if successful, DX:AX = new file position
 36245 00006A00 73C0                    	jnb     short LSeekSetpos
 36246                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36247                                  	;jmp	SYS_RET_ERR
 36248                                  ;LSeekError3:
 36249                                  	; 17/12/2022
 36250                                  LSeekError:
 36251                                  	;jmp	short LSeekError2
 36252                                  DupErr:	; 17/12/2022
 36253 00006A02 E9889C                  	jmp	SYS_RET_ERR
 36254                                  
 36255                                  ;BREAK <FileTimes - modify write times on a handle>
 36256                                  ;----------------------------------------------------------------------------
 36257                                  ;
 36258                                  ;   Assembler usage:
 36259                                  ;	    MOV AH, FileTimes (57H)
 36260                                  ;	    MOV AL, func
 36261                                  ;	    MOV BX, handle
 36262                                  ;	; if AL = 1 then then next two are mandatory
 36263                                  ;	    MOV CX, time
 36264                                  ;	    MOV DX, date
 36265                                  ;	    INT 21h
 36266                                  ;	; if AL = 0 then CX/DX has the last write time/date
 36267                                  ;	; for the handle.
 36268                                  ;
 36269                                  ;	AL=02		 get extended attributes
 36270                                  ;	   BX=handle
 36271                                  ;	   CX=size of buffer (0, return max size )
 36272                                  ;	   DS:SI query list (si=-1, selects all EA)
 36273                                  ;	   ES:DI buffer to hold EA list
 36274                                  ;
 36275                                  ;	AL=03		 get EA name list
 36276                                  ;	   BX=handle
 36277                                  ;	   CX=size of buffer (0, return max size )
 36278                                  ;	   ES:DI buffer to hold name list
 36279                                  ;
 36280                                  ;	AL=04		 set extended attributes
 36281                                  ;	   BX=handle
 36282                                  ;	   ES:DI buffer of EA list
 36283                                  ;
 36284                                  ;
 36285                                  ;   Error returns:
 36286                                  ;	    AX = error_invalid_function
 36287                                  ;	       = error_invalid_handle
 36288                                  ;
 36289                                  ;----------------------------------------------------------------------------
 36290                                  
 36291                                  ; 21/05/2019 - Retro DOS v4.0
 36292                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 36293                                  
 36294                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36295                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 36296                                  
 36297                                  _$FILE_TIMES:
 36298                                  	; 13/07/2018 - Retro DOS v3.0
 36299                                  
 36300                                  	; MSDOS 3.3
 36301                                  	;cmp	al,2			; correct subfunction ?
 36302                                  	;jb	short ft1
 36303                                  
 36304                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 36305                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36306                                  						;SS Overr
 36307                                  	;;mov	al,1
 36308                                  	;mov	al,error_invalid_function ; give bad return
 36309                                  	;jmp	SYS_RET_ERR
 36310                                  
 36311                                  	; MSDOS 6.0
 36312 00006A05 3C02                    	cmp	al,2			; correct subfunction ?
 36313 00006A07 7340                    	jae	short inval_func
 36314                                  ;ft1:
 36315 00006A09 E87300                  	call	CheckOwner		; get sft
 36316                                  	; 17/12/2022
 36317 00006A0C 72F4                    	jc	short LSeekError	; bad handle
 36318                                  
 36319 00006A0E 08C0                    	or	al,al			; get time/date ?
 36320 00006A10 7515                    	jnz	short ft_set_time
 36321                                  
 36322                                  ;------ here we get the time & date from the sft for the user
 36323                                  
 36324 00006A12 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 36325                                  	;mov	cx,[es:di+13]
 36326 00006A13 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 36327                                  	;mov	dx,[es:di+15]
 36328 00006A17 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 36329 00006A1B FB                      	sti
 36330 00006A1C E8AB9A                  	call	Get_User_Stack
 36331                                  	;mov	[si+4],cx
 36332 00006A1F 894C04                  	mov	[si+user_env.user_CX],cx
 36333                                  	;mov	[si+6],dx
 36334 00006A22 895406                  	mov	[si+user_env.user_DX],dx
 36335 00006A25 EB1F                    	jmp	short ok_ret
 36336                                  
 36337                                  ;------ here we set the time in sft
 36338                                  
 36339                                  ft_set_time:
 36340 00006A27 E85EA9                  	call    ECritSFT
 36341                                  	;mov	[es:di+13],cx
 36342 00006A2A 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 36343                                  	;mov	[es:di+15],dx
 36344 00006A2E 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 36345                                  
 36346 00006A32 31C0                    	xor	ax, ax
 36347 00006A34 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 36348                                  
 36349                                  ;------ set the flags in SFT entry
 36350                                  	;and	word [es:di+5],0FFBFh
 36351                                  	; 18/12/2022
 36352                                  	;and	byte [es:di+5],0BFh
 36353 00006A39 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 36354                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 36355                                  							; mark file as dirty
 36356                                  	;or	word [es:di+5],4000h
 36357                                  	; 17/12/2022
 36358                                  	;or	byte [es:di+6],40h
 36359 00006A3E 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 36360                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 36361                                  							; ask close not to
 36362                                  							;   bother about date
 36363                                  							;   and time
 36364 00006A43 E85DA9                  	call	LCritSFT
 36365                                  ok_ret:
 36366                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36367                                  	; 17/12/2022
 36368 00006A46 E93B9C                  	jmp	SYS_RET_OK
 36369                                  	;jmp	short LSeekOk
 36370                                  
 36371                                  inval_func:
 36372                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36373 00006A49 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36374                                  						;SS Overr
 36375                                  	;mov	al,1
 36376 00006A4F B001                    	mov	al,error_invalid_function ; give bad return
 36377                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36378                                  ft_error:
 36379                                  	;;jmp	SYS_RET_ERR
 36380                                  	;jmp	short LSeekError3
 36381                                  	; 17/12/2022
 36382 00006A51 EBAF                    	jmp	short LSeekError
 36383                                  
 36384                                  ; 21/05/2019 - Retro DOS v4.0
 36385                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 36386                                  
 36387                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36388                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 36389                                  
 36390                                  ;BREAK <$DUP - duplicate a jfn>
 36391                                  ;----------------------------------------------------------------------------
 36392                                  ;
 36393                                  ;   Assembler usage:
 36394                                  ;	    MOV     BX, fh
 36395                                  ;	    MOV     AH, Dup
 36396                                  ;	    INT     int_command
 36397                                  ;	  AX has the returned handle
 36398                                  ;   Errors:
 36399                                  ;	    AX = dup_invalid_handle
 36400                                  ;	       = dup_too_many_open_files
 36401                                  ;
 36402                                  ;----------------------------------------------------------------------------
 36403                                  
 36404                                  _$DUP:
 36405 00006A53 89D8                    	MOV	AX,BX			; save away old handle in AX
 36406 00006A55 E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 36407                                  DupErrorCheck:
 36408 00006A58 72A8                    	JC	short DupErr		; nope, bye
 36409 00006A5A 06                      	push	es
 36410 00006A5B 57                      	push	di			; save away SFT
 36411 00006A5C 5E                      	pop	si			; into convenient place DS:SI
 36412 00006A5D 1F                      	pop	ds
 36413 00006A5E 93                      	XCHG	AX,BX			; get back old handle
 36414 00006A5F E81D00                  	call	CheckOwner		; get sft in ES:DI
 36415 00006A62 729E                    	JC	short DupErr		; errors go home
 36416 00006A64 E861C0                  	call	DOS_Dup_Direct
 36417 00006A67 E800FD                  	call	pJFNFromHandle		; get pointer
 36418 00006A6A 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 36419 00006A6D 881C                    	MOV	[SI],BL			; stuff in new SFT
 36420                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36421                                  	;jmp	SYS_RET_OK		; and go home
 36422 00006A6F EBD5                    	jmp	short ok_ret
 36423                                  
 36424                                  	; 17/12/2022
 36425                                  ;DupErr:
 36426                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36427                                  	;;jmp	SYS_RET_ERR
 36428                                  	;jmp	short ft_error
 36429                                  
 36430                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 36431                                  ;----------------------------------------------------------------------------
 36432                                  ;
 36433                                  ;   Assembler usage:
 36434                                  ;	    MOV     BX, fh
 36435                                  ;	    MOV     CX, newfh
 36436                                  ;	    MOV     AH, Dup2
 36437                                  ;	    INT     int_command
 36438                                  ;   Error returns:
 36439                                  ;	    AX = error_invalid_handle
 36440                                  ;
 36441                                  ;----------------------------------------------------------------------------
 36442                                  
 36443                                  _$DUP2:
 36444 00006A71 53                      	push	bx
 36445 00006A72 51                      	push	cx			; save source
 36446 00006A73 89CB                    	MOV	BX,CX			; get one to close
 36447 00006A75 E8AAFD                  	call	_$CLOSE			; close destination handle
 36448 00006A78 5B                      	pop	bx
 36449 00006A79 58                      	pop	ax			; old in AX, new in BX
 36450 00006A7A E8EDFC                  	call	pJFNFromHandle		; get pointer
 36451 00006A7D EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 36452                                  
 36453                                  ;Break	<CheckOwner - verify ownership of handles from server>
 36454                                  ;----------------------------------------------------------------------------
 36455                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 36456                                  ;   process without the process knowing it (delete/rename of open files, for
 36457                                  ;   example), it is possible for the redirector to issue a call to a handle
 36458                                  ;   that it soes not rightfully own. We check here to make sure that the
 36459                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 36460                                  ;   SFFromHandle to really make sure that the SFT is good.
 36461                                  ;
 36462                                  ;	ENTRY	BX has the handle
 36463                                  ;		User_ID is the current user
 36464                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 36465                                  ;		Carry Set => AX has error code
 36466                                  ;	USES	none
 36467                                  ;----------------------------------------------------------------------------
 36468                                  
 36469                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36470                                  	; 21/05/2019 - Retro DOS v4.0
 36471                                  CheckOwner:
 36472                                  	; 13/07/2018 - Retro DOS v3.0
 36473                                  
 36474 00006A7F E805FD                  	call	SFFromHandle
 36475 00006A82 721B                    	jc	short co_ret_label	; retc
 36476                                  
 36477 00006A84 50                      	push	ax
 36478                                  
 36479                                  	; MSDOS 6.0
 36480                                  
 36481                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 36482                                  ;SR; are shared across multiple VMs in win386.
 36483                                  
 36484 00006A85 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 36485 00006A8B 7404                    	jz	short no_win386		;win386 is not present
 36486 00006A8D 31C0                    	xor	ax,ax			;set the zero flag
 36487 00006A8F EB08                    	jmp	short _skip_win386	
 36488                                  
 36489                                  no_win386:
 36490 00006A91 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 36491                                  	;cmp	ax,[es:di+47]
 36492 00006A95 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 36493                                  
 36494                                  _skip_win386:
 36495 00006A99 58                      	pop	ax
 36496                                  	
 36497                                  	; 17/12/2022
 36498 00006A9A 7403                    	jz	short co_ret_label
 36499                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36500                                  	;jnz	short CheckOwner_err
 36501                                  	;retn
 36502                                  	
 36503                                  CheckOwner_err:
 36504                                  	;mov	al,6
 36505 00006A9C B006                    	mov	al,error_invalid_handle
 36506 00006A9E F9                      	stc
 36507                                  
 36508                                  co_ret_label:
 36509 00006A9F C3                      	retn
 36510                                  
 36511                                  ;============================================================================
 36512                                  ; MACRO.ASM, MSDOS 6.0, 1991
 36513                                  ;============================================================================
 36514                                  ; Retro	DOS v3.0 - 11/07/2018
 36515                                  ; 21/05/2019 - Retro DOS v4.0
 36516                                  
 36517                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 36518                                  ;	NAME	MACRO
 36519                                  
 36520                                  ;	Microsoft Confidential
 36521                                  ;	Copyright (C) Microsoft Corporation 1991
 36522                                  ;	All Rights Reserved.
 36523                                  
 36524                                  ;**	MACRO.ASM
 36525                                  ;
 36526                                  ;	$AssignOper
 36527                                  ;	FIND_DPB
 36528                                  ;	InitCDS
 36529                                  ;	$UserOper
 36530                                  ;	GetVisDrv
 36531                                  ;	GetThisDrv
 36532                                  ;	GetCDSFromDrv
 36533                                  ;
 36534                                  ;   Revision history:
 36535                                  ;
 36536                                  ;	Created: MZ 4 April 1983
 36537                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 36538                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 36539                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 36540                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 36541                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 36542                                  ;				    aliasing.
 36543                                  ;
 36544                                  ;   MSDOS performs several types of name translation. First, we maintain for
 36545                                  ;   each valid drive letter the text of the current directory on that drive.
 36546                                  ;   For invalid drive letters, there is no current directory so we pretend to
 36547                                  ;   be at the root. A current directory is either the raw local directory
 36548                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 36549                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 36550                                  ;
 36551                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 36552                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 36553                                  ;   this and all * are expanded into ?'s.
 36554                                  ;
 36555                                  ;   The second part of name translation involves subtree aliasing. A list of
 36556                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 36557                                  ;   the previous 'canonicalization' are then examined to see if any of the
 36558                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 36559                                  ;   replaced with the other subtree in the pair.
 36560                                  ;
 36561                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 36562                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 36563                                  ;   The output of the previous translation is examined to see if any of the
 36564                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 36565                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 36566                                  ;   'mount' one device under another.
 36567                                  ;
 36568                                  ;   The final form of name translation involves the mapping of a user's
 36569                                  ;   logical drive number into the internal physical drive. This is
 36570                                  ;   accomplished by converting the drive number into letter:CON, performing
 36571                                  ;   the above translation and then converting the character back into a drive
 36572                                  ;   number.
 36573                                  ;
 36574                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 36575                                  ;   take a path and form the real text of the pathname with all . and ..
 36576                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 36577                                  ;   TransPath.
 36578                                  ;
 36579                                  ;	A000	version 4.00  Jan. 1988
 36580                                  
 36581                                  ;Installed = TRUE
 36582                                  
 36583                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 36584                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 36585                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 36586                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 36587                                  ;					; current drive)
 36588                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 36589                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 36590                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 36591                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 36592                                  ;	I_need	MYNAME,16		; machine name
 36593                                  ;	I_need	MYNUM,WORD		; machine number
 36594                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 36595                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 36596                                  ;	I_need	DrvErr,BYTE		; drive error
 36597                                  
 36598                                  ;BREAK <$AssignOper -- Set up a Macro>
 36599                                  ;----------------------------------------------------------------------------
 36600                                  ; Inputs:
 36601                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 36602                                  ;	AL = 01 set assign mode 		    (SetMode)
 36603                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 36604                                  ;	AL = 03 Define Macro (attch start)
 36605                                  ;	    BL = Macro type
 36606                                  ;	       = 0 alias
 36607                                  ;	       = 1 file/device
 36608                                  ;	       = 2 drive
 36609                                  ;	       = 3 Char device -> network
 36610                                  ;	       = 4 File device -> network
 36611                                  ;	    DS:SI -> ASCIZ source name
 36612                                  ;	    ES:DI -> ASCIZ destination name
 36613                                  ;	AL = 04 Cancel Macro
 36614                                  ;	    DS:SI -> ASCIZ source name
 36615                                  ;	AL = 05 Modified get attach list entry
 36616                                  ;	AL = 06 Get ifsfunc item
 36617                                  ;	AL = 07 set in_use of a drive's CDS
 36618                                  ;	     DL = drive number, 0=default  0=A,,
 36619                                  ;	AL = 08 reset in_use of a drive's CDS
 36620                                  ;	     DL = drive number, 0=A, 1=B,,,
 36621                                  ; Function:
 36622                                  ;	Do macro stuff
 36623                                  ; Returns:
 36624                                  ;	Std Xenix style error return
 36625                                  ;----------------------------------------------------------------------------
 36626                                  
 36627                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36628                                  	; 21/05/2019 - Retro DOS v4.0
 36629                                  _$AssignOper:
 36630                                  	; MSDOS 6.0
 36631 00006AA0 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 36632 00006AA2 7525                    	JNZ	short chk08		      ; no			;AN000;
 36633                                  srinuse:								;AN000;
 36634 00006AA4 50                      	PUSH	AX			      ; save al 		;AN000;
 36635 00006AA5 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 36636 00006AA7 E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 36637 00006AAA 58                      	POP	AX			      ; 			;AN000;
 36638 00006AAB 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 36639                                  	;cmp	word [si+45h],0
 36640 00006AAD 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 36641 00006AB1 7410                    	JZ	short baddrv		      ;     no			;AN000;
 36642 00006AB3 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 36643 00006AB5 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 36644                                  	;or	word [si+43h],4000h
 36645                                  	; 17/12/2022
 36646                                  	;or	byte [si+44h],40h
 36647 00006AB7 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36648                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 36649 00006ABB EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 36650                                  resetdrv:
 36651                                  	;and	word [si+43h],0BFFFh									;AN000;
 36652                                  	; 18/12/2022
 36653 00006ABD 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 36654                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 36655 00006AC1 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 36656                                  
 36657                                  	; 17/12/2022
 36658                                  baddrv: 								;AN000;
 36659 00006AC3 B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 36660                                  
 36661                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36662                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 36663                                  	; 17/12/2022
 36664                                  	; 21/05/2019
 36665                                  ASS_ERR:
 36666 00006AC6 E9C49B                  	jmp	SYS_RET_ERR
 36667                                  
 36668                                  chk08:									;AN000;
 36669 00006AC9 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 36670 00006ACB 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 36671                                  
 36672                                    ;IF	NOT INSTALLED
 36673                                  	;transfer NET_ASSOPER
 36674                                    ;ELSE
 36675                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36676 00006ACD 50                      	PUSH	AX
 36677                                  	;mov	ax,111Eh
 36678                                  	;MOV	AX,(MultNET SHL 8) OR 30
 36679 00006ACE B81E11                  	mov	ax,(MultNET*256)+30
 36680 00006AD1 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 36681                                  			; SS = DOS CS
 36682                                  			; STACK: WORD function to execute
 36683                                  			; Return: CF set on error, AX = error code
 36684                                  			; STACK unchanged
 36685 00006AD3 5B                      	POP	BX			; Don't zap error code in AX
 36686 00006AD4 72F0                    	JC	short ASS_ERR
 36687                                  okdone:
 36688 00006AD6 E9AB9B                  	jmp	SYS_RET_OK
 36689                                  
 36690                                  	; 17/12/2022
 36691                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36692                                  ;ASS_ERR:
 36693                                  	;jmp	SYS_RET_ERR
 36694                                  
 36695                                    ;ENDIF
 36696                                  
 36697                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 36698                                  ;----------------------------------------------------------------------------
 36699                                  ;**	FIND_DPB - Find a DPB from a Drive #
 36700                                  ;
 36701                                  ;	ENTRY	AL has drive number A = 0
 36702                                  ;	EXIT	'C' set
 36703                                  ;		    No DPB for this drive number
 36704                                  ;		'C' clear
 36705                                  ;		    DS:SI points to DPB for drive
 36706                                  ;	USES	SI, DS, Flags
 36707                                  ;----------------------------------------------------------------------------
 36708                                  
 36709                                  	; 21/05/2019 - Retro DOS v4.0
 36710                                  FIND_DPB:
 36711 00006AD9 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 36712                                  fdpb5:	
 36713 00006ADE 83FEFF                  	CMP	SI,-1
 36714 00006AE1 7409                    	JZ	short fdpb10
 36715 00006AE3 3A04                    	cmp	al,[si]
 36716                                  	;CMP	AL,[SI+DPB.DRIVE]
 36717 00006AE5 7406                    	jz	short ret_label15	; Carry clear (retz)
 36718                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 36719                                  	;lds	si,[si+19h] ; MSDOS 6.0
 36720 00006AE7 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 36721 00006AEA EBF2                    	JMP	short fdpb5
 36722                                  fdpb10:	
 36723 00006AEC F9                      	STC
 36724                                  ret_label15:
 36725 00006AED C3                      	retn
 36726                                  
 36727                                  ;	Break <InitCDS - set up an empty CDS>
 36728                                  ;----------------------------------------------------------------------------
 36729                                  ;**	InitCDS - Setup an Empty CDS
 36730                                  ;
 36731                                  ;	ENTRY	ThisCDS points to CDS
 36732                                  ;		AL has uppercase drive letter
 36733                                  ;	EXIT	ThisCDS is now empty
 36734                                  ;		(ES:DI) = CDS
 36735                                  ;		'C' set if no DPB associated with drive
 36736                                  ;	USES	AH,ES,DI, Flags
 36737                                  ;----------------------------------------------------------------------------
 36738                                  
 36739                                  ; 21/05/2019 - Retro DOS v4.0
 36740                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 36741                                  
 36742                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36743                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 36744                                  
 36745                                  InitCDS:
 36746                                  	; 19/08/2018
 36747                                  	; 05/08/2018 - Retro DOS v3.0
 36748                                  	; MSDOS 6.0
 36749 00006AEE 50                      	push	ax			; save (AL) for caller
 36750 00006AEF 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 36751                                  	;mov	word [es:di+67],0
 36752 00006AF4 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 36753 00006AFA 2C40                    	SUB	AL,"A"-1                ; A = 1
 36754 00006AFC 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 36755 00006B01 7236                    	JC	short icdsx		; Drive does not map a physical drive
 36756 00006B03 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 36757 00006B04 50                      	PUSH	AX			; save drive number for later
 36758 00006B05 0441                    	add	al,"A"
 36759 00006B07 B43A                    	MOV	AH,':'
 36760 00006B09 268905                  	mov	[ES:DI],ax
 36761                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 36762                                  	;mov	ax,"\"
 36763                                  	;mov	[es:di+2],ax
 36764                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 36765 00006B0C 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 36766                                  	;or	word [es:di+67],4000h
 36767                                  	;or	byte [es:di+68],40h
 36768 00006B12 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36769 00006B17 29C0                    	sub	ax,ax
 36770                                  	;MOV	[es:di+73],ax ; 0
 36771 00006B19 26894549                	MOV	[ES:DI+curdir.ID],ax
 36772                                  	;mov	[es:di+75],ax ; 0
 36773 00006B1D 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 36774 00006B21 B002                    	mov	al,2
 36775                                  	;mov	[es:di+79],aX ; 2
 36776 00006B23 2689454F                	MOV	[ES:DI+curdir.end],ax
 36777 00006B27 58                      	POP	AX			; (al) = drive number
 36778 00006B28 1E                      	push	ds
 36779 00006B29 56                      	push	si
 36780 00006B2A E8ACFF                  	call	FIND_DPB
 36781 00006B2D 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 36782                                  	;mov	[es:di+69],si
 36783 00006B2F 26897545                	MOV	[ES:DI+curdir.devptr],SI
 36784                                  	;mov	[es:di+71],ds
 36785 00006B33 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 36786                                  icds5:	
 36787 00006B37 5E                      	pop	si
 36788 00006B38 1F                      	pop	ds
 36789                                  icdsx:	
 36790 00006B39 58                      	pop	ax
 36791                                  RET45:
 36792 00006B3A C3                      	retn
 36793                                  
 36794                                  ;Break <$UserOper - get/set current user ID (for net)>
 36795                                  ;----------------------------------------------------------------------------
 36796                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 36797                                  ;	maintain this string and do no verifications.
 36798                                  ;
 36799                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 36800                                  ;				      4-printer-set-flags,5-printer-get-flags)
 36801                                  ;		DS:DX is user string pointer (calls 1,2)
 36802                                  ;		ES:DI is user buffer (call 3)
 36803                                  ;		BX is assign index (calls 2,3,4,5)
 36804                                  ;		CX is user number (call 1)
 36805                                  ;		DX is flag word (call 4)
 36806                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 36807                                  ;			and user CX is set to the user number
 36808                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 36809                                  ;		If AL = 5 then DX is flag word
 36810                                  ;----------------------------------------------------------------------------
 36811                                  
 36812                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36813                                  	; 21/05/2019 - Retro DOS v4.0
 36814                                  _$UserOper:
 36815                                  	; 05/08/2018 - Retro DOS v3.0
 36816                                  	; MSDOS 6.0 (& MSDOS 3.3)
 36817 00006B3B 50                      	PUSH	AX
 36818 00006B3C 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 36819 00006B3E 58                      	POP	AX
 36820 00006B3F 7211                    	JB	short UserGet 		; return to user the string
 36821 00006B41 742E                    	JZ	short UserSet 		; set the current user
 36822 00006B43 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 36823 00006B45 763D                    	JBE	short UserPrint		; yep
 36824                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36825 00006B47 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 36826                                  					; Extended Error Locus
 36827                                  	;error	error_invalid_function	; not 0,1,2,3
 36828                                  	;mov	al,1
 36829 00006B4D B001                    	MOV	AL,error_invalid_function
 36830                                  useroper_error:
 36831                                  	; 17/12/2022
 36832                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36833 00006B4F E93B9B                  	JMP	SYS_RET_ERR
 36834                                  	;jmp	short ASS_ERR
 36835                                  
 36836                                  UserGet:
 36837                                  ; Transfer MYNAME to DS:DX
 36838                                  ; Set Return CX to MYNUM
 36839 00006B52 1E                      	PUSH	DS			; switch registers
 36840 00006B53 07                      	POP	ES
 36841 00006B54 89D7                    	MOV	DI,DX			; destination
 36842 00006B56 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 36843 00006B5B E86C99                  	call	Get_User_Stack
 36844                                  	;mov	[si+4],cx
 36845 00006B5E 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 36846 00006B61 16                      	push	ss			; point to DOSDATA
 36847 00006B62 1F                      	pop	ds
 36848 00006B63 BE[0503]                	MOV	SI,MYNAME		; point source to user string
 36849                                  UserMove:
 36850 00006B66 B90F00                  	MOV	CX,15
 36851 00006B69 F3A4                    	REP	MOVSB			; blam.
 36852 00006B6B 31C0                    	XOR	AX,AX			; 16th byte is 0
 36853 00006B6D AA                      	STOSB
 36854                                  UserBye:
 36855 00006B6E E9139B                  	jmp	SYS_RET_OK		; no errors here
 36856                                  
 36857                                  UserSet:
 36858                                  ; Transfer DS:DX to MYNAME
 36859                                  ; CX to MYNUM
 36860 00006B71 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 36861 00006B76 89D6                    	MOV	SI,DX			; user space has source
 36862 00006B78 16                      	push	ss
 36863 00006B79 07                      	pop	es
 36864 00006B7A BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 36865 00006B7D 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 36866 00006B82 EBE2                    	JMP	short UserMove
 36867                                  
 36868                                  UserPrint:
 36869                                  
 36870                                    ;IF NOT Installed
 36871                                    ;	transfer PRINTER_GETSET_STRING
 36872                                    ;ELSE
 36873 00006B84 50                      	PUSH	AX
 36874                                  	;mov	ax,111Fh
 36875                                  	;MOV	AX,(MultNET SHL 8) OR 31
 36876 00006B85 B81F11                  	mov	ax,(MultNET<<8)|31
 36877 00006B88 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 36878                                  			; STACK: WORD function
 36879                                  			; Return: CF set on error, AX = error code
 36880                                  			; STACK unchanged
 36881 00006B8A 5A                      	POP	DX			; Clean stack
 36882                                  	;JNC	short OKPA
 36883 00006B8B 73E1                    	jnc	short UserBye ; 21/05/2019
 36884                                  	; 17/12/2022
 36885 00006B8D EBC0                    	jmp	short useroper_error
 36886                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36887                                  	;jnb     short OKPA
 36888                                  	;jmp     short useroper_error
 36889                                  
 36890                                  	; 17/12/2022
 36891                                  ;OKPA:
 36892                                  ;	jmp	short UserBye
 36893                                  
 36894                                    ;ENDIF
 36895                                  
 36896                                  
 36897                                  ;Break	<GetVisDrv - return visible drive>
 36898                                  ;----------------------------------------------------------------------------
 36899                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 36900                                  ;
 36901                                  ;   Inputs:	AL has drive identifier (0=default)
 36902                                  ;   Outputs:	Carry Set - invalid drive/macro
 36903                                  ;		Carry Clear - AL has physical drive (0=A)
 36904                                  ;		    ThisCDS points to CDS
 36905                                  ;   Registers modified: AL
 36906                                  ;----------------------------------------------------------------------------
 36907                                  
 36908                                  	; 21/05/2019 - Retro DOS v4.0
 36909                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 36910                                  
 36911                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36912                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 36913                                  GetVisDrv:
 36914                                  	; 05/08/2018 - Retro DOS v3.0
 36915                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 36916 00006B8F E81900                  	CALL	GETTHISDRV		; get inuse drive
 36917 00006B92 72A6                    	jc	short RET45
 36918 00006B94 1E                      	push	ds
 36919 00006B95 56                      	push	si
 36920 00006B96 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 36921                                  	;test	word [si+67],2000h
 36922                                  	; 17/12/2022
 36923                                  	;test	byte [si+68],20h
 36924 00006B9B F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 36925                                  	;TEST	word [SI+curdir.flags],curdir_splice
 36926 00006B9F 5E                      	pop	si
 36927 00006BA0 1F                      	pop	ds
 36928 00006BA1 7497                    	jz	short RET45		; if not spliced, return OK
 36929                                  	; MSDOS 6.0
 36930                                  	;mov	byte [ss:DrvErr],0Fh
 36931 00006BA3 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 36932 00006BA9 F9                      	STC				; signal error
 36933 00006BAA C3                      	retn
 36934                                  
 36935                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 36936                                  ;----------------------------------------------------------------------------
 36937                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 36938                                  ;	macro pointer
 36939                                  ;
 36940                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 36941                                  ;   Outputs:
 36942                                  ;		Carry Set - invalid drive/macro
 36943                                  ;		Carry Clear - AL has physical drive (0=A)
 36944                                  ;		   ThisCDS points to macro
 36945                                  ;   Registers modified: AL
 36946                                  ;----------------------------------------------------------------------------
 36947                                  
 36948                                  	; 21/05/2019 - Retro DOS v4.0
 36949                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 36950                                  
 36951                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36952                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 36953                                  GETTHISDRV:
 36954                                  	; 05/08/2018
 36955                                  	; 12/07/2018 - Retro DOS v3.0
 36956                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 36957                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36958 00006BAB 08C0                    	OR	AL,AL			; are we using default drive?
 36959 00006BAD 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 36960 00006BAF 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 36961                                  	;INC	ax			; Counteract next instruction
 36962                                  	; 04/09/2018
 36963                                  	;inc	al
 36964                                  	; 07/12/2022
 36965 00006BB3 40                      	inc	ax
 36966                                  GTD10:	
 36967                                  	;DEC	AX
 36968                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36969 00006BB4 48                      	dec	ax			; 0 = A
 36970                                  	;dec	al
 36971 00006BB5 1E                      	PUSH	DS			; save world
 36972 00006BB6 56                      	PUSH	SI
 36973                                  	;mov	byte [ss:EXTERR_LOCUS],2
 36974 00006BB7 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 36975 00006BBD 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 36976 00006BC3 7420                    	JZ	SHORT GTD20		; Logical
 36977 00006BC5 50                      	PUSH	AX
 36978 00006BC6 06                      	PUSH	ES
 36979 00006BC7 57                      	PUSH	DI
 36980 00006BC8 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 36981                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 36982 00006BCF 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 36983 00006BD4 0441                    	ADD	AL,'A'
 36984 00006BD6 E815FF                  	CALL	InitCDS			; InitCDS(c);
 36985                                  	;test	word [es:di+67],4000h
 36986                                  	; 17/12/2022
 36987                                  	;test	byte [es:di+68],40h
 36988 00006BD9 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36989                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 36990 00006BDE 5F                      	POP	DI
 36991 00006BDF 07                      	POP	ES
 36992 00006BE0 58                      	POP	AX
 36993 00006BE1 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 36994 00006BE3 EB18                    	JMP	SHORT GTDX		; carry clear
 36995                                  GTD20:
 36996 00006BE5 E81800                  	CALL	GetCDSFromDrv
 36997 00006BE8 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 36998                                  	;test	word [si+43h],4000h
 36999                                  	; 17/12/2022
 37000                                  	;test	byte [si+44h],40h
 37001 00006BEA F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37002                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 37003 00006BEE 750D                    	JNZ	SHORT GTDX		; carry clear
 37004                                  GTD30:	
 37005                                  	; 21/05/2019
 37006                                  	; MSDOS 6.0
 37007 00006BF0 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 37008 00006BF2 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 37009                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 37010 00006BF6 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 37011 00006BFC F9                      	STC
 37012                                  GTDX:	
 37013 00006BFD 5E                      	POP	SI			; restore world
 37014 00006BFE 1F                      	POP	DS
 37015 00006BFF C3                      	RETN
 37016                                   
 37017                                  
 37018                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 37019                                  ;----------------------------------------------------------------------------
 37020                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 37021                                  ;	pointer, returning an error if the drive number is greater than the
 37022                                  ;	number of CDS's
 37023                                  ;
 37024                                  ;   Inputs:	AL is physical unit # A=0...
 37025                                  ;   Outputs:	Carry Set if Bad Drive
 37026                                  ;		Carry Clear
 37027                                  ;		    DS:SI -> CDS
 37028                                  ;		    [THISCDS] = DS:SI
 37029                                  ;   Registers modified: DS,SI
 37030                                  ;----------------------------------------------------------------------------
 37031                                  
 37032                                  	; 21/05/2019 - Retro DOS v4.0
 37033                                  GetCDSFromDrv:
 37034 00006C00 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 37035 00006C05 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 37036 00006C07 F9                      	STC				; signal error
 37037 00006C08 C3                      	RETN				; bye
 37038                                  GetCDS:
 37039 00006C09 53                      	PUSH	BX
 37040 00006C0A 50                      	PUSH	AX
 37041 00006C0B 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 37042                                  	;mov	bl,81 ; MSDOS 3.3
 37043                                  	;mov	bl,88 ; MSDOS 6.0 
 37044 00006C10 B358                    	MOV	BL,curdir.size		; size in convenient spot
 37045 00006C12 F6E3                    	MUL	BL			; get net offset
 37046 00006C14 01C6                    	ADD	SI,AX			; convert to true pointer
 37047 00006C16 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 37048 00006C1B 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 37049 00006C20 58                      	POP	AX
 37050 00006C21 5B                      	POP	BX
 37051 00006C22 F8                      	CLC				; no error
 37052 00006C23 C3                      	RETN				; bye!
 37053                                  
 37054                                  ;============================================================================
 37055                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 37056                                  ;============================================================================
 37057                                  ; Retro	DOS v3.0 - 12/07/2018
 37058                                  ; 22/05/2019 - Retro DOS v4.0
 37059                                  
 37060                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 37061                                  ;----------------------------------------------------------------------------
 37062                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 37063                                  ;       gritty substitution.
 37064                                  ;
 37065                                  ;   Inputs:     DS:DX - pointer to FCB
 37066                                  ;               ES:DI - point to destination
 37067                                  ;   Outputs:    Carry Set - invalid path in final map
 37068                                  ;               Carry Clear - FCB has been mapped into ES:DI
 37069                                  ;                   Sattrib is set from possibly extended FCB
 37070                                  ;                   ExtFCB set if extended FCB found
 37071                                  ;   Registers modified: most
 37072                                  ;----------------------------------------------------------------------------
 37073                                  
 37074                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37075                                  TransFCB:
 37076                                  	; 22/05/2019 - Retro DOS v4.0
 37077                                  	; 12/07/2018 - Retro DOS v3.0
 37078                                  	;LocalVar FCBTmp,16
 37079                                  	;ENTER
 37080 00006C24 55                      	push	bp
 37081 00006C25 89E5                    	mov	bp,sp
 37082                                  	;sub	sp,15	; MSDOS 3.3
 37083 00006C27 83EC10                  	sub	sp,16	; MSDOS 6.0
 37084 00006C2A 16                      	push	ss
 37085 00006C2B 07                      	pop	es
 37086 00006C2C 06                      	push	es
 37087 00006C2D 57                      	push	di
 37088                                  	;lea	di,[bp-15] ; MSDOS 3.3
 37089                                  	;LEA	DI,FCBTmp 
 37090 00006C2E 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 37091 00006C31 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 37092 00006C37 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 37093 00006C3D E8A2B0                  	call	GetExtended             ; get FCB, extended or not
 37094                                  	; 06/12/2022
 37095 00006C40 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 37096 00006C42 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 37097 00006C45 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 37098 00006C49 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 37099                                  GetDrive:
 37100 00006C4F AC                      	lodsb				; get drive byte
 37101 00006C50 E858FF                  	call	GETTHISDRV
 37102 00006C53 722A                    	jc	short BadPack
 37103 00006C55 E87403                  	call	TextFromDrive           ; convert 0-based drive to text
 37104                                  
 37105                                  ; Scan the source to see if there are any illegal chars
 37106                                  
 37107                                  	;mov	bx,CharType		; load lookup table
 37108 00006C58 B90B00                  	mov	cx,11
 37109 00006C5B 56                      	push	si			; back over name, ext
 37110                                  FCBScan:
 37111 00006C5C AC                      	lodsb				; get a byte
 37112                                  	
 37113                                  	; 09/08/2018
 37114                                  	;;xlat	byte [es:bx]
 37115                                  	;es	xlat
 37116                                  
 37117                                  	; 22/05/2019 - Retro DOS v4.0	
 37118 00006C5D E81CE5                  	call	GetCharType		; get flags
 37119                                  
 37120                                  	;test	al,8	
 37121 00006C60 A808                    	test	al,FFCB
 37122 00006C62 741B                    	jz	short BadPack
 37123                                  NextCh: 
 37124 00006C64 E2F6                    	loop	FCBScan
 37125 00006C66 5E                      	pop	si
 37126 00006C67 89FB                    	mov	bx,di
 37127 00006C69 E8CEB4                  	call	PackName                ; crunch the path
 37128 00006C6C 5F                      	pop	di			; get original destination
 37129 00006C6D 07                      	pop	es
 37130 00006C6E 16                      	push	ss			; get DS addressability
 37131 00006C6F 1F                      	pop	ds
 37132                                  	;lea	si,[bp-15] ; MSDOS 3.3
 37133                                  	;LEA	SI,FCBTmp		; point at new pathname
 37134 00006C70 8D76F0                  	lea	si,[bp-16]
 37135 00006C73 803F00                  	cmp	byte [bx],0
 37136 00006C76 7407                    	jz	short BadPack
 37137 00006C78 55                      	push	bp
 37138 00006C79 E80E00                  	call	TransPathSet            ; convert the path
 37139 00006C7C 5D                      	pop	bp
 37140 00006C7D 7303                    	jnc	short FCBRet		; bye with transPath error code
 37141                                  BadPack:
 37142 00006C7F F9                      	STC
 37143                                  	;mov	al,3
 37144 00006C80 B003                    	MOV     AL,error_path_not_found
 37145                                  FCBRet: 
 37146                                  	;LEAVE
 37147 00006C82 89EC                    	mov	sp,bp
 37148 00006C84 5D                      	pop	bp
 37149                                  TransPath_retn:
 37150 00006C85 C3                      	retn
 37151                                  
 37152                                  ; 12/07/2018 - Retro DOS v3.0
 37153                                  
 37154                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 37155                                  ;----------------------------------------------------------------------------
 37156                                  ;
 37157                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 37158                                  ;       substitution, insertion of current directory and fixing . and ..
 37159                                  ;       entries. Perform splicing. Allow input string to match splice
 37160                                  ;       exactly.
 37161                                  ;
 37162                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 37163                                  ;       matches splice.
 37164                                  ;
 37165                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 37166                                  ;
 37167                                  ;   The following anomalous behaviour is required:
 37168                                  ;
 37169                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 37170                                  ;       Paths on devices are ignored. (truncate to 0-length)
 37171                                  ;       Raw net I/O sets ThisCDS => NULL.
 37172                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 37173                                  ;
 37174                                  ;   Other behaviour:
 37175                                  ;
 37176                                  ;       ThisCDS set up.
 37177                                  ;       FatRead done on local CDS.
 37178                                  ;       ValidateCDS done on local CDS.
 37179                                  ;
 37180                                  ;   Brief flowchart:
 37181                                  ;
 37182                                  ;       if fSharing then
 37183                                  ;           set up DummyCDS (ThisCDS)
 37184                                  ;           canonicalize (sets cMeta)
 37185                                  ;           splice
 37186                                  ;           fatRead
 37187                                  ;           return
 37188                                  ;       if \\ or d:\\ lead then
 37189                                  ;           set up null CDS (ThisCDS)
 37190                                  ;           canonicalize (sets cMeta)
 37191                                  ;           return
 37192                                  ;       if device then
 37193                                  ;           set up dummyCDS (ThisCDS)
 37194                                  ;           canonicalize (sets cMeta)
 37195                                  ;           return
 37196                                  ;       if file then
 37197                                  ;           getCDS (sets (ThisCDS) from name)
 37198                                  ;           validateCDS (may reset current dir)
 37199                                  ;           Copy current dir
 37200                                  ;           canonicalize (set cMeta)
 37201                                  ;           splice
 37202                                  ;           generate correct CDS (ThisCDS)
 37203                                  ;           if local then
 37204                                  ;               fatread
 37205                                  ;           return
 37206                                  ;
 37207                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37208                                  ;               DI - point to buffer in DOSDATA
 37209                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37210                                  ;                   syntax, etc. or user FAILed to I 24.
 37211                                  ;               WFP_Start - points to beginning of buffer
 37212                                  ;               Curr_Dir_End - points to end of current dir in path
 37213                                  ;               DS - DOSDATA
 37214                                  ;   Registers modified: most
 37215                                  ;
 37216                                  ;----------------------------------------------------------------------------
 37217                                  
 37218                                  ; 22/05/2019
 37219                                  ; 13/05/2019 - Retro DOS v4.0
 37220                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 37221                                  
 37222                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37223                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 37224                                  
 37225                                  TransPath:
 37226 00006C86 30C0                    	XOR     AL,AL
 37227 00006C88 EB02                    	JMP     SHORT SetSplice
 37228                                  TransPathSet:
 37229 00006C8A B0FF                    	MOV     AL,-1
 37230                                  SetSplice:
 37231 00006C8C 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 37232 00006C90 B0FF                    	MOV     AL,-1
 37233                                  TransPathNoSet:
 37234 00006C92 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 37235 00006C96 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 37236 00006C9C 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 37237 00006CA1 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 37238 00006CA8 16                      	push	ss
 37239 00006CA9 07                      	pop	es
 37240                                  	;lea	bp,[di+134]
 37241 00006CAA 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 37242                                  ;
 37243                                  ; if this is through the server dos call, fsharing is set. We set up a
 37244                                  ; dummy cds and let the operation go.
 37245                                  ;
 37246 00006CAE 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 37247 00006CB4 7435                    	JZ	short CheckUNC		; skip to UNC check
 37248                                  ;
 37249                                  ; ES:DI point to buffer
 37250                                  ;
 37251 00006CB6 E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 37252 00006CB9 E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 37253 00006CBC 722A                    	jc	short NoPath
 37254 00006CBE E80B03                  	CALL	TextFromDrive		; drop in new
 37255 00006CC1 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 37256 00006CC4 E83401                  	CALL	Canonicalize            ; copy and canonicalize
 37257 00006CC7 72BC                    	jc	short TransPath_retn	; errors
 37258                                  ;
 37259                                  ; Perform splices for net guys.
 37260                                  ;
 37261 00006CC9 16                      	push	ss
 37262 00006CCA 1F                      	pop	ds
 37263 00006CCB 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 37264 00006CCF F606[7105]FF            	TEST	byte [FSPLICE],-1
 37265 00006CD4 7403                    	JZ	short NoServerSplice
 37266 00006CD6 E83102                  	CALL    Splice
 37267                                  NoServerSplice:
 37268 00006CD9 16                      	push	ss
 37269 00006CDA 1F                      	pop	ds                      ; for FATREAD
 37270 00006CDB C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 37271 00006CDF E8A6A6                  	call	ECritDisk
 37272 00006CE2 E80AEB                  	call	FATREAD_CDS
 37273 00006CE5 E8BBA6                  	call	LCritDisk
 37274                                  NoPath:
 37275                                  	;mov	al,3
 37276 00006CE8 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37277 00006CEA C3                      	retn				; any errors are in Carry flag
 37278                                  
 37279                                  ; Let the network decide if the name is for a spooled device. It will map
 37280                                  ; the name if so.
 37281                                  
 37282                                  CheckUNC:
 37283 00006CEB 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 37284                                  	;CallInstall NetSpoolCheck,MultNET,35
 37285 00006CF2 B82311                  	mov	ax,1123h
 37286 00006CF5 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 37287                                  			; DS:SI -> ASCIZ filename to canonicalize
 37288                                  			; ES:DI -> 128-byte buffer for qualified name
 37289                                  			; Return: CF set if not resolved
 37290 00006CF7 7329                    	JNC	short UNCDone
 37291                                  
 37292                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 37293                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 37294                                  ; input, then the name has been changed to the remote spooler by the above net
 37295                                  ; call. Also, there may be a drive in front of the \\.
 37296                                  
 37297                                  NO_CHECK:
 37298 00006CF9 E8B902                  	CALL    DriveFromText		; eat drive letter
 37299 00006CFC 50                      	PUSH    AX                      ; save it
 37300 00006CFD 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 37301 00006CFF E897E4                  	call    PATHCHRCMP              ; convert to normal form
 37302 00006D02 86E0                    	XCHG    AH,AL                   ; swap for second byte
 37303 00006D04 E892E4                  	call    PATHCHRCMP              ; convert to normal form
 37304 00006D07 751F                    	JNZ	short CheckDevice	; not a path char
 37305 00006D09 38C4                    	CMP     AH,AL                   ; are they same?
 37306 00006D0B 751B                    	JNZ	short CheckDevice	; nope
 37307                                  
 37308                                  ; We have a UNC request. We must copy the string up to the beginning of the
 37309                                  ; local machine root path
 37310                                  
 37311 00006D0D 58                      	POP     AX
 37312 00006D0E A5                      	MOVSW                           ; get the lead \\.
 37313                                  UNCCpy:
 37314 00006D0F AC                      	LODSB                           ; get a byte
 37315 00006D10 E831E4                   	call	UCase                   ;AN000;; convert the char
 37316 00006D13 08C0                    	OR      AL,AL
 37317 00006D15 740E                    	JZ	short UNCTerm		; end of string. All done.
 37318 00006D17 E87FE4                  	call    PATHCHRCMP              ; is it a path char?
 37319 00006D1A 89FB                    	MOV     BX,DI                   ; backup position
 37320 00006D1C AA                      	STOSB
 37321 00006D1D 75F0                    	JNZ	short UNCCpy		; no, go copy
 37322 00006D1F E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 37323                                  UNCDone:
 37324 00006D22 16                      	push	ss
 37325 00006D23 1F                      	pop	ds
 37326 00006D24 C3                       	retn				; return error code
 37327                                  UNCTerm:
 37328 00006D25 AA                      	STOSB                           ;AN000;
 37329 00006D26 EBFA                    	JMP	short UNCDone		;AN000;
 37330                                  
 37331                                  CheckDevice:
 37332                                  
 37333                                  ; Check DS:SI for device. First eat any path stuff
 37334                                  
 37335 00006D28 58                      	POP     AX                      ; retrieve drive info
 37336 00006D29 803C00                  	CMP     BYTE [SI],0		; check for null file
 37337 00006D2C 7504                    	JNZ	short CheckPath
 37338                                  	;mov	al,2 
 37339 00006D2E B002                    	MOV     AL,error_file_not_found ; bad file error
 37340 00006D30 F9                      	STC                             ; signal error on null input
 37341 00006D31 C3                      	RETN				; bye!
 37342                                  CheckPath:
 37343 00006D32 50                      	push	ax
 37344 00006D33 55                      	push	bp			; save drive number
 37345                                  
 37346                                  
 37347                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37348                                  %if 0
 37349                                  	; MSDOS 6.0
 37350                                  ;;;BUGBUG BUG 10-26-1992 scottq
 37351                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 37352                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 37353                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 37354                                  ;;;end up having a 5D in the opcode's displacement field. The
 37355                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 37356                                  ;;;
 37357                                  ;;;What we do here is do a call to a function that is less than 5Dh
 37358                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 37359                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 37360                                  ;;;
 37361                                  ;;;More info:
 37362                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 37363                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 37364                                  ;;;
 37365                                  	call	no5Dshere
 37366                                  start5Dhack:
 37367                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 37368                                  backfrom5Dhack:
 37369                                  
 37370                                  %endif
 37371                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37372                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 37373 00006D34 E8B8D6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 37374                                  
 37375 00006D37 5D                      	pop	bp
 37376 00006D38 58                      	pop	ax			; get drive letter back
 37377 00006D39 731C                    	JNC	short DoFile		; yes we have a file.
 37378                                  
 37379                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 37380                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 37381                                  ; call.
 37382                                  
 37383 00006D3B 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 37384 00006D41 E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 37385 00006D44 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 37386                                  
 37387                                  ; Now that we have noted that we have a device, we put it into a form that
 37388                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 37389                                  ; string. We relax this to state that if the d:\ is present then the path
 37390                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 37391                                  ; a device.
 37392                                  
 37393 00006D4A E87F02                  	CALL    TextFromDrive
 37394 00006D4D B02F                    	MOV     AL,'/'                  ; path sep.
 37395 00006D4F AA                      	STOSB
 37396 00006D50 E8F8A4                  	call	StrCpy			; move remainder of string
 37397                                  
 37398 00006D53 F8                      	CLC                             ; everything OK.
 37399 00006D54 16                      	push	ss
 37400 00006D55 1F                      	pop	ds                      ; remainder of OK stuff
 37401                                  DoFile_retn:
 37402 00006D56 C3                      	retn
 37403                                  
 37404                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37405                                  %if 0
 37406                                  
 37407                                  no5Dshere:
 37408                                  	; 10/08/2018
 37409                                  	jmp	CheckThisDevice		; snoop for device
 37410                                  %endif
 37411                                  
 37412                                  ;.erre (no5Dshere - start5Dhack - 5D)
 37413                                  
 37414                                  ; We have a file. Get the raw CDS.
 37415                                  
 37416                                  DoFile:
 37417                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37418                                  
 37419 00006D57 E835FE                  	call	GetVisDrv               ; get proper CDS
 37420                                  	;mov	al,3 
 37421 00006D5A B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 37422 00006D5C 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 37423                                  
 37424                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 37425                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 37426                                  ; Use the one that we are going to use (ES:DI).
 37427                                  
 37428                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 37429 00006D5E 1E                      	push	ds
 37430 00006D5F 56                      	push	si
 37431 00006D60 06                      	push	es
 37432 00006D61 57                      	push	di
 37433 00006D62 E8CED5                  	call	ValidateCDS             ; poke CDS and make everything OK
 37434                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 37435 00006D65 5F                      	pop	di
 37436 00006D66 07                      	pop	es
 37437 00006D67 5E                      	pop	si
 37438 00006D68 1F                      	pop	ds
 37439                                  	;mov	al,3
 37440 00006D69 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37441                                  	;retc				; someone failed an operation
 37442 00006D6B 72E9                    	jc	short DoFile_retn
 37443                                  
 37444                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 37445                                  ; current directory. Copy it in.
 37446                                  
 37447 00006D6D 1E                      	push	ds
 37448 00006D6E 56                      	push	si
 37449 00006D6F 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 37450 00006D74 89FB                    	MOV     BX,DI                   ; point to destination
 37451                                  	;add	bx,[si+79] ; MSDOS 6.0
 37452 00006D76 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 37453                                  	;lea	bp,[di+134]
 37454 00006D79 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 37455                                  					;AN000;
 37456 00006D7D E8DAA4                  	call	FStrCpy                 ; copy string. ES:DI point to end
 37457 00006D80 4F                      	DEC     DI                      ; point to NUL byte
 37458                                  
 37459                                  ; Make sure that there is a path char at end.
 37460                                  
 37461 00006D81 B05C                    	MOV     AL,'\'
 37462 00006D83 263845FF                	CMP     [ES:DI-1],AL
 37463 00006D87 7401                    	JZ	short GetOrig
 37464 00006D89 AA                      	STOSB
 37465                                  
 37466                                  ; Now get original string.
 37467                                  
 37468                                  GetOrig:
 37469 00006D8A 4F                      	DEC     DI                      ; point to path char
 37470 00006D8B 5E                      	pop	si
 37471 00006D8C 1F                      	pop	ds
 37472                                  
 37473                                  ; BX points to the end of the root part of the CDS (at where a path char
 37474                                  ; should be). Now, we decide whether we use this root or extend it with the
 37475                                  ; current directory. See if the input string begins with a leading 
 37477 00006D8D E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 37478 00006D90 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 37479 00006D92 08C0                    	OR      AL,AL                   ; end of string?
 37480 00006D94 7410                    	JZ	short DoCanon		; yes, skip.
 37481                                  ;
 37482                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 37483                                  ; to this root. Make sure that there is a path char there and advance the
 37484                                  ; source string over all leading \'s.
 37485                                  ;
 37486 00006D96 89DF                    	MOV     DI,BX                   ; back up to root point.
 37487                                  SkipPath:
 37488 00006D98 AC                      	LODSB
 37489 00006D99 E8FDE3                  	call    PATHCHRCMP
 37490 00006D9C 74FA                    	JZ	short SkipPath
 37491 00006D9E 4E                      	DEC     SI
 37492 00006D9F 08C0                    	OR      AL,AL
 37493 00006DA1 7403                    	JZ	short DoCanon
 37494                                  
 37495                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 37496                                  ; for yucks.
 37497                                  
 37498                                  PathAssure:
 37499 00006DA3 B05C                    	MOV     AL,'\'	; 5Ch
 37500 00006DA5 AA                      	STOSB
 37501                                  
 37502                                  ; ES:DI point to the correct spot for canonicalization to begin.
 37503                                  ; BP is the max extent to advance DI
 37504                                  ; BX is the backup limit for ..
 37505                                  
 37506                                  DoCanon:
 37507 00006DA6 E85200                  	CALL    Canonicalize            ; wham.
 37508                                  	;retc				; badly formatted path.
 37509 00006DA9 72AB                    	jc	short DoFile_retn
 37510                                  
 37511                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 37512                                  ; to wfp_start and do string substitution. BP is still the max position in
 37513                                  ; buffer.
 37514                                  
 37515 00006DAB 16                      	push	ss
 37516 00006DAC 1F                      	pop	ds
 37517 00006DAD 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 37518 00006DB1 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 37519 00006DB5 E81C02                  	CALL    PathPref                ; is there a prefix?
 37520 00006DB8 7514                    	JNZ	short DoSplice		; no, do splice
 37521                                  
 37522                                  ; We have a match. Check to see if we ended in a path char.
 37523                                  
 37524 00006DBA 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 37525 00006DBD E8D9E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 37526 00006DC0 740C                    	JZ	short DoSplice		; yes, no current dir here.
 37527                                  Pathline:                               ; 2/13/KK
 37528 00006DC2 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 37529 00006DC6 7406                    	JZ	short DoSplice
 37530 00006DC8 47                      	INC     DI                      ; point to after current path char
 37531 00006DC9 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 37532                                  
 37533                                  ; Splice the result.
 37534                                  
 37535                                  DoSplice:
 37536 00006DCE 16                      	push	ss
 37537 00006DCF 1F                      	pop	ds			; back to DOSDATA
 37538 00006DD0 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 37539 00006DD4 31C9                    	XOR     CX,CX
 37540 00006DD6 F606[7105]FF            	TEST	byte [FSPLICE],-1
 37541 00006DDB 7403                    	JZ	short SkipSplice
 37542 00006DDD E82A01                  	CALL    Splice                  ; replaces in place.
 37543                                  SkipSplice:
 37544                                  
 37545                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 37546                                  ; device.
 37547                                  
 37548 00006DE0 16                      	push	ss
 37549 00006DE1 1F                      	pop	ds
 37550 00006DE2 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 37551                                  	;test	word [es:di+67],8000h
 37552                                  	; 17/12/2022
 37553                                  	;test	byte [es:di+68],80h
 37554 00006DE6 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 37555                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 37556 00006DEB 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 37557 00006DED E30B                    	JCXZ    Done
 37558 00006DEF E896A5                  	call	ECritDisk
 37559 00006DF2 E8FAE9                  	call	FATREAD_CDS
 37560 00006DF5 E8ABA5                  	call	LCritDisk
 37561                                  	;mov	al, 3
 37562 00006DF8 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37563                                  Done:   
 37564 00006DFA C3                      	retn                         ; any errors in carry flag.
 37565                                  
 37566                                  ; 13/07/2018
 37567                                  
 37568                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 37569                                  ;----------------------------------------------------------------------------
 37570                                  ;   Canonicalize - copy path removing . and .. entries.
 37571                                  ;
 37572                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37573                                  ;               ES:DI - point to buffer
 37574                                  ;               BX - backup limit (offset from ES) points to slash
 37575                                  ;               BP - end of buffer
 37576                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37577                                  ;                   syntax, etc.
 37578                                  ;               Carry Clear -
 37579                                  ;                   DS:DI - advanced to end of string
 37580                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 37581                                  ;   Registers modified: AX CX DX (in addition to those above)
 37582                                  ;----------------------------------------------------------------------------
 37583                                  
 37584                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37585                                  
 37586                                  Canonicalize:
 37587                                  
 37588                                  ; We copy all leading path separators.
 37589                                  
 37590 00006DFB AC                      	LODSB                           ;   while (PathChr (*s))
 37591 00006DFC E89AE3                  	call    PATHCHRCMP
 37592 00006DFF 7507                    	JNZ	short CanonDec
 37593 00006E01 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 37594 00006E03 7319                    	JAE	short CanonBad		;           goto error;
 37595 00006E05 AA                      	STOSB
 37596 00006E06 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 37597                                  CanonDec:
 37598 00006E08 4E                      	DEC     SI
 37599                                  
 37600                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 37601                                  ; component (no leading path separators) and ES:DI being the destination
 37602                                  ; buffer.
 37603                                  
 37604                                  CanonLoop:
 37605                                  
 37606                                  ; If we are at the end of the source string, then we need to check to see that
 37607                                  ; a potential drive specifier is correctly terminated with a path sep char.
 37608                                  ; Otherwise, do nothing
 37609                                  
 37610 00006E09 31C0                    	XOR     AX,AX
 37611 00006E0B 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 37612 00006E0D 751A                    	JNZ	short DoComponent
 37613 00006E0F 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 37614 00006E14 7505                    	JNZ	short DoTerminate
 37615 00006E16 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 37616 00006E18 AA                      	STOSB
 37617 00006E19 88E0                    	MOV     AL,AH
 37618                                  DoTerminate:
 37619 00006E1B AA                      	STOSB                           ;           *d++ = 0;
 37620 00006E1C F8                      	CLC                             ;           return (0);
 37621 00006E1D C3                      	retn
 37622                                  
 37623                                  CanonBad:
 37624 00006E1E E8CC01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 37625                                  	;mov	al,3
 37626 00006E21 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 37627 00006E23 7402                    	JZ	short PathEnc		; path character encountered in string
 37628                                  	;mov	al,2
 37629 00006E25 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 37630                                  PathEnc:
 37631 00006E27 F9                      	STC
 37632                                  CanonBad_retn:
 37633 00006E28 C3                      	retn
 37634                                  
 37635                                  ; We have a textual component that we must copy. We uppercase it and truncate
 37636                                  ; it to 8.3
 37637                                  
 37638                                  DoComponent:                            ;           }
 37639 00006E29 E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 37640 00006E2C 72FA                    	jc	short CanonBad_retn	;           return (-1);
 37641                                  
 37642                                  ; We special case the . and .. cases.  These will be backed up.
 37643                                  
 37644                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 37645 00006E2E 26833D2E                	CMP	WORD [ES:DI],002Eh
 37646 00006E32 7408                    	JZ	short Skip1
 37647                                  	;CMP	WORD PTR ES:[DI],'..'
 37648 00006E34 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 37649 00006E39 750A                    	JNZ	short CanonNormal
 37650 00006E3B 4F                      	DEC     DI                      ;           d--;
 37651                                  Skip1:  
 37652 00006E3C E82A00                  	CALL    SkipBack                ;           SkipBack ();
 37653                                  	;mov	al,3
 37654 00006E3F B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37655 00006E41 72E5                    	jc	short CanonBad_retn
 37656 00006E43 EB02                    	JMP     short CanonPath         ;           }
 37657                                  
 37658                                  ; We have a normal path. Advance destination pointer over it.
 37659                                  
 37660                                  CanonNormal:                            ;       else
 37661 00006E45 01CF                    	ADD     DI,CX                   ;           d += ct;
 37662                                  
 37663                                  ; We have successfully copied a component. We are now pointing at a path
 37664                                  ; sep char or are pointing at a nul or are pointing at something else.
 37665                                  ; If we point at something else, then we have an error.
 37666                                  
 37667                                  CanonPath:
 37668 00006E47 E81600                  	CALL    PathSep
 37669 00006E4A 75D2                    	JNZ	short CanonBad		; something else...
 37670                                  
 37671                                  ; Copy the first path char we see.
 37672                                  
 37673 00006E4C AC                      	LODSB                           ; get the char
 37674 00006E4D E849E3                  	call    PATHCHRCMP              ; is it path char?
 37675 00006E50 75B6                    	JNZ	short CanonDec		; no, go test for nul
 37676 00006E52 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 37677 00006E54 73C8                    	JAE	short CanonBad		; yep, error.
 37678 00006E56 AA                      	STOSB                           ; copy the one byte
 37679                                  
 37680                                  ; Skip all remaining path chars
 37681                                  
 37682                                  CanonPathLoop:
 37683 00006E57 AC                      	LODSB                           ; get next byte
 37684 00006E58 E83EE3                  	call    PATHCHRCMP              ; path char again?
 37685 00006E5B 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 37686 00006E5D 4E                      	DEC     SI                      ; back up
 37687 00006E5E EBA9                    	JMP	short  CanonLoop	; go copy component
 37688                                  
 37689                                  ;BREAK <PathSep - determine if char is a path separator>
 37690                                  ;----------------------------------------------------------------------------
 37691                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 37692                                  ;   Inputs:     DS:SI - point to a char
 37693                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 37694                                  ;               Zero set if AL is / \ or NUL
 37695                                  ;               Zero reset otherwise
 37696                                  ;   Registers modified: AL
 37697                                  ;----------------------------------------------------------------------------
 37698                                  
 37699                                  PathSep:
 37700 00006E60 8A04                    	MOV     AL,[SI]                 ; get the character
 37701                                  PathSepGotCh:				; already have character
 37702 00006E62 08C0                    	OR      AL,AL                   ; test for zero
 37703 00006E64 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 37704                                  	;call	PATHCHRCMP              ; check for path character
 37705                                  	;retn				; and return HIS determination
 37706                                  	; 18/12/2022
 37707 00006E66 E930E3                  	jmp	PATHCHRCMP
 37708                                  
 37709                                  
 37710                                  ;BREAK <SkipBack - move backwards to a path separator>
 37711                                  ;----------------------------------------------------------------------------
 37712                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 37714                                  ;               BX has current directory back up limit (point to a / \)
 37715                                  ;   Outputs:    ES:DI backed up to point to a path char
 37716                                  ;               AL has char from output ES:DI (path sep if carry clear)
 37717                                  ;               Carry set if illegal backup
 37718                                  ;               Carry Clear if ok
 37719                                  ;   Registers modified: DI,AL
 37720                                  ;----------------------------------------------------------------------------
 37721                                  
 37722                                  SkipBack:
 37723 00006E69 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 37724 00006E6B 720B                    	JB	short SkipBad		;       if (d < dlim)
 37725 00006E6D 4F                      	DEC     DI                      ;           goto err;
 37726 00006E6E 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 37727 00006E71 E825E3                  	call    PATHCHRCMP              ;           break;
 37728 00006E74 75F3                    	JNZ	short SkipBack		;       }
 37729 00006E76 F8                      	CLC                             ;   return (0);
 37730 00006E77 C3                      	retn				;
 37731                                  SkipBad:                                ;err:
 37732                                  	;mov	al,3
 37733 00006E78 B003                    	MOV     AL,error_path_not_found ; bad path error
 37734 00006E7A F9                      	STC                             ;   return (-1);
 37735 00006E7B C3                      	retn				;
 37736                                  
 37737                                  ;Break <CopyComponent - copy out a file path component>
 37738                                  ;----------------------------------------------------------------------------
 37739                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 37740                                  ;
 37741                                  ;   Inputs:     DS:SI - source path
 37742                                  ;               ES:DI - destination
 37743                                  ;               ES:BP - end of buffer
 37744                                  ;   Outputs:    Carry Set - too long
 37745                                  ;               Carry Clear - DS:SI moved past component
 37746                                  ;                   CX has length of destination
 37747                                  ;   Registers modified: AX,CX,DX
 37748                                  ;----------------------------------------------------------------------------
 37749                                  
 37750                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37751                                  
 37752                                  CopyComponent:
 37753                                  
 37754                                  %define CopyBP	 [BP]		; word
 37755                                  %define CopyD	 [BP+2]		; dword
 37756                                  %define CopyDoff [BP+2]		; word
 37757                                  %define CopyS	 [BP+6]		; dword
 37758                                  %define CopySoff [BP+6]		; word
 37759                                  %define CopyTemp [BP+10]	; byte
 37760                                  
 37761 00006E7C 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 37762 00006E7F 1E                      	push	ds
 37763 00006E80 56                      	push	si
 37764 00006E81 06                      	push	es
 37765 00006E82 57                      	push	di
 37766 00006E83 55                      	push	bp
 37767 00006E84 89E5                    	MOV     BP,SP
 37768 00006E86 B42E                    	MOV     AH,'.'
 37769 00006E88 AC                      	LODSB
 37770 00006E89 AA                      	STOSB
 37771 00006E8A 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 37772 00006E8C 7518                    	JNZ	short NormalComp
 37773 00006E8E E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 37774 00006E91 740B                    	JZ	short NulTerm
 37775                                  TryTwoDot:
 37776 00006E93 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 37777 00006E94 AA                      	STOSB
 37778 00006E95 38E0                    	CMP     AL,AH
 37779 00006E97 7557                    	JNZ	short CopyBad
 37780 00006E99 E8C4FF                  	CALL    PathSep
 37781 00006E9C 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 37782                                  NulTerm:                                ;               return -1;
 37783 00006E9E 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 37784 00006EA0 AA                      	STOSB
 37785 00006EA1 897606                  	MOV     CopySoff,SI
 37786 00006EA4 EB47                    	JMP     SHORT _GoodRet		;       }
 37787                                  NormalComp:                             ;   else {
 37788 00006EA6 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 37789 00006EA9 E82BE2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 37790 00006EAC 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 37791 00006EAF 743F                    	JZ	short CopyBad		;           return (-1);
 37792 00006EB1 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 37793 00006EB7 7510                    	JNZ	short DoPack
 37794 00006EB9 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 37795 00006EBC 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 37796 00006EC1 7F2D                    	JG	short CopyBad		;               return (-1);
 37797 00006EC3 7504                    	JNZ	short DoPack		;           else
 37798 00006EC5 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 37799 00006EC7 742F                    	JZ	short CopyBadPath	;               return (-1);
 37800                                  DoPack:                                 ;           }
 37801 00006EC9 897606                  	MOV     CopySoff,SI ; [bp+6]
 37802 00006ECC 16                      	push	ss
 37803 00006ECD 1F                      	pop	ds
 37804 00006ECE BE[4B05]                	MOV     SI,NAME1
 37805 00006ED1 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 37806 00006ED4 57                      	push	di
 37807 00006ED5 E862B2                  	call	PackName                ;       PackName (Name1, temp);
 37808 00006ED8 5F                      	pop	di
 37809 00006ED9 E887A3                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 37810 00006EDC 49                      	DEC     CX
 37811 00006EDD 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 37812                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37813                                  	;cmp	cx,[bp+0]
 37814                                  	; 15/12/2022
 37815                                  	;cmp	cx,[bp]
 37816 00006EE0 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 37817 00006EE3 730B                    	JAE	short CopyBad		;           return (-1);
 37818 00006EE5 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 37819 00006EE7 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 37820 00006EEA E86DA3                  	call	FStrCpy
 37821                                  _GoodRet:				;       }
 37822 00006EED F8                      	CLC
 37823 00006EEE EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 37824                                  CopyBad:
 37825 00006EF0 F9                      	STC
 37826 00006EF1 E8F900                  	CALL    ScanPathChar            ; check for path chars in rest of string
 37827                                  	;mov	al,2
 37828 00006EF4 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 37829 00006EF6 7503                    	JNZ	short CopyEnd
 37830                                  CopyBadPath:
 37831 00006EF8 F9                      	STC
 37832                                  	;mov	al,3
 37833 00006EF9 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 37834                                  CopyEnd:
 37835 00006EFB 5D                      	pop	bp
 37836 00006EFC 5F                      	pop	di
 37837 00006EFD 07                      	pop	es
 37838 00006EFE 5E                      	pop	si
 37839 00006EFF 1F                      	pop	ds
 37840 00006F00 9F                      	LAHF
 37841 00006F01 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 37842 00006F04 E85CA3                  	call	StrLen
 37843 00006F07 49                      	DEC     CX
 37844 00006F08 9E                      	SAHF
 37845 00006F09 C3                      	retn
 37846                                  
 37847                                  ; 14/05/2019 - Retro DOS v4.0
 37848                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 37849                                  
 37850                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37851                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 37852                                  
 37853                                  ;Break <Splice - pseudo mount by string substitution>
 37854                                  ;----------------------------------------------------------------------------
 37855                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 37856                                  ;       ThisCDS to point to physical drive CDS.
 37857                                  ;   Inputs:     DS:SI point to string
 37858                                  ;               NoSetDir = TRUE => exact matches with splice fail
 37859                                  ;   Outputs:    DS:SI points to thisCDS
 37860                                  ;               ES:DI points to DPB
 37861                                  ;               String at DS:SI may be reduced in length by removing prefix
 37862                                  ;               and substituting drive letter.
 37863                                  ;               CX = 0 If no splice done
 37864                                  ;               CX <> 0 otherwise
 37865                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 37866                                  ;                   left alone
 37867                                  ;               ThisDPB points to proper DPB
 37868                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 37869                                  ;----------------------------------------------------------------------------
 37870                                  
 37871                                  Splice:
 37872 00006F0A 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 37873 00006F10 7469                    	JZ	short AllDone
 37874 00006F12 36FF36[A205]            	push	word [SS:THISCDS]
 37875 00006F17 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 37876 00006F1C 1E                      	push	ds
 37877 00006F1D 56                      	push	si
 37878 00006F1E 5F                      	pop	di
 37879 00006F1F 07                      	pop	es
 37880 00006F20 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 37881                                  SpliceScan:
 37882 00006F22 E8DBFC                  	call	GetCDSFromDrv
 37883 00006F25 724A                    	JC	short SpliceDone
 37884 00006F27 FEC0                    	INC     AL
 37885                                  	; 17/12/2022
 37886                                  	;test	byte [si+68],20h
 37887 00006F29 F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 37888                                  	;;test	word [si+67],2000h
 37889                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37890 00006F2D 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 37891 00006F2F 57                      	push	di
 37892 00006F30 E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 37893 00006F33 7403                    	JZ	short SpliceFound	;
 37894                                  SpliceSkip:
 37895 00006F35 5F                      	pop	di
 37896 00006F36 EBEA                    	JMP	short SpliceScan	;               continue;
 37897                                  SpliceFound:
 37898 00006F38 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 37899 00006F3C 7508                    	JNZ	short SpliceDo
 37900 00006F3E 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 37901 00006F44 75EF                    	JNZ	short SpliceSkip
 37902                                  SpliceDo:
 37903 00006F46 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 37904 00006F48 06                      	push	es
 37905 00006F49 1F                      	pop	ds
 37906 00006F4A 5F                      	pop	di
 37907 00006F4B E88000                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 37908 00006F4E 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 37909 00006F52 09C0                    	OR      AX,AX
 37910 00006F54 7808                    	JS	short NoPoke
 37911 00006F56 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 37912 00006F58 29F0                    	SUB     AX,SI
 37913 00006F5A 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 37914                                  NoPoke:
 37915 00006F5E 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 37916 00006F61 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 37917 00006F63 B05C                    	MOV     AL,"\"
 37918 00006F65 AA                      	STOSB
 37919                                  SpliceCopy:                             ;               strcpy (src, p);
 37920 00006F66 E8F1A2                  	call	FStrCpy
 37921 00006F69 83C404                  	ADD     SP,4                    ; throw away saved stuff
 37922 00006F6C 80C901                  	OR      CL,1                    ; signal splice done.
 37923 00006F6F EB0C                    	JMP     SHORT DoSet             ;               return;
 37924                                  SpliceDone:                             ;               }
 37925 00006F71 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 37926 00006F76 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 37927                                  AllDone:
 37928 00006F7B 31C9                    	XOR     CX,CX
 37929                                  DoSet:
 37930 00006F7D 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 37931                                  	;les	di,[si+69]
 37932 00006F82 C47C45                  	LES     DI,[SI+curdir.devptr]	
 37933 00006F85 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 37934 00006F8A 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 37935                                  Splice_retn:
 37936 00006F8F C3                      	retn
 37937                                  
 37938                                  ; 15/05/2019 - Retro DOS v4.0
 37939                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 37940                                  
 37941                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37942                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 37943                                  
 37944                                  ;Break <$NameTrans - partially process a name>
 37945                                  ;----------------------------------------------------------------------------
 37946                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 37947                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 37948                                  ;   to Transpath playing games with devices, we need to insure that the output
 37949                                  ;   has drive letter and : in it.
 37950                                  ;
 37951                                  ;   Inputs:     DS:SI - source string for translation
 37952                                  ;               ES:DI - pointer to buffer
 37953                                  ;   Outputs:
 37954                                  ;       Carry Clear
 37955                                  ;               Buffer at ES:DI is filled in with data
 37956                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 37957                                  ;       Carry Set
 37958                                  ;               AX = error_path_not_found
 37959                                  ;   Registers modified: all
 37960                                  ;----------------------------------------------------------------------------
 37961                                  
 37962                                  _$NameTrans:
 37963 00006F90 1E                      	push	ds
 37964 00006F91 56                      	push	si
 37965 00006F92 06                      	push	es
 37966 00006F93 57                      	push	di
 37967 00006F94 51                      	push	cx ; MSDOS 6.0
 37968                                  	
 37969                                  	; MSDOS 6.0	
 37970                                  ; M027 - Start
 37971                                  ;
 37972                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 37973                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 37974                                  ; device if the old call set the volume attribute bit. Note that devname in
 37975                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 37976                                  ; and restore CX.
 37977                                  
 37978                                  	;mov	ch,16h
 37979 00006F95 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 37980 00006F97 E8BA02                  	call	SetAttrib
 37981                                  
 37982                                  ; M027 - End
 37983                                  
 37984                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37985 00006F9A BF[BE03]                	MOV     DI,OPENBUF
 37986 00006F9D E8E6FC                  	CALL    TransPath               ; to translation (everything)
 37987 00006FA0 59                      	pop	cx ; MSDOS 6.0
 37988 00006FA1 5F                      	pop     di
 37989 00006FA2 07                      	pop	es
 37990 00006FA3 5E                      	pop     si
 37991 00006FA4 1F                      	pop     ds
 37992 00006FA5 7303                    	JNC	short TransOK
 37993 00006FA7 E9E396                  	jmp	SYS_RET_ERR
 37994                                  TransOK:
 37995 00006FAA BE[BE03]                	MOV     SI,OPENBUF
 37996 00006FAD 16                      	push	ss
 37997 00006FAE 1F                      	pop	ds
 37998                                  ;GotText:
 37999 00006FAF E8A8A2                  	call	FStrCpy
 38000 00006FB2 E9CF96                  	jmp	SYS_RET_OK
 38001                                  
 38002                                  ;Break   <DriveFromText - return drive number from a text string>
 38003                                  ;----------------------------------------------------------------------------
 38004                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 38005                                  ;   pointer.
 38006                                  ;
 38007                                  ;   Inputs:     DS:SI point to a text string
 38008                                  ;   Outputs:    AL has drive number
 38009                                  ;               DS:SI advanced
 38010                                  ;   Registers modified: AX,SI.
 38011                                  ;----------------------------------------------------------------------------
 38012                                  
 38013                                  DriveFromText:
 38014 00006FB5 30C0                    	XOR     AL,AL                   ;       drive = 0;
 38015 00006FB7 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 38016 00006FBA 74D3                    	jz	short Splice_retn
 38017 00006FBC 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 38018 00006FC0 75CD                    	jnz	short Splice_retn
 38019 00006FC2 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 38020 00006FC3 0C20                    	OR      AL,20h
 38021                                  	;sub	al,60h
 38022 00006FC5 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 38023 00006FC7 75C6                    	jnz	short Splice_retn
 38024 00006FC9 B0FF                    	MOV     AL,-1                   ; nuke AL...
 38025 00006FCB C3                      	retn				;           }
 38026                                  
 38027                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 38028                                  ;----------------------------------------------------------------------------
 38029                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 38030                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 38031                                  ;
 38032                                  ;   Inputs:     AL has 0-based drive number
 38033                                  ;   Outputs:    ES:DI advanced
 38034                                  ;   Registers modified: AX
 38035                                  ;----------------------------------------------------------------------------
 38036                                  
 38037                                  TextFromDrive:
 38038 00006FCC FEC0                    	INC     AL
 38039                                  TextFromDrive1:
 38040                                  	;add	al,40h
 38041 00006FCE 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 38042 00006FD0 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 38043 00006FD2 AB                      	STOSW
 38044                                  PathPref_retn:
 38045 00006FD3 C3                      	retn
 38046                                  
 38047                                  ;Break   <PathPref - see if one path is a prefix of another>
 38048                                  ;----------------------------------------------------------------------------
 38049                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 38050                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 38051                                  ;   prefix: A:\ and A:\FOO
 38052                                  ;
 38053                                  ;   Inputs:     DS:SI potential prefix
 38054                                  ;               ES:DI string
 38055                                  ;   Outputs:    Zero set => prefix found
 38056                                  ;                   DI/SI advanced past matching part
 38057                                  ;               Zero reset => no prefix, DS/SI garbage
 38058                                  ;   Registers modified: CX
 38059                                  ;----------------------------------------------------------------------------
 38060                                  
 38061                                  PathPref:
 38062 00006FD4 E89AA2                  	call	DStrLen                 ; get length
 38063 00006FD7 49                      	DEC     CX                      ; do not include nul byte
 38064 00006FD8 F3A6                    	REPZ    CMPSB                   ; compare
 38065 00006FDA 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 38066 00006FDC 50                      	push	ax			; save char register
 38067 00006FDD 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 38068 00006FE0 E8B6E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 38069 00006FE3 7406                    	JZ	short Prefix		; yes, match root (I hope)
 38070                                  NotSep:                                 ; 2/13/KK
 38071 00006FE5 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 38072 00006FE8 E877FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 38073                                  Prefix:
 38074 00006FEB 58                      	pop	ax			; get back original
 38075 00006FEC C3                      	retn
 38076                                  
 38077                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 38078                                  ;----------------------------------------------------------------------------
 38079                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 38080                                  ;     a path separator.
 38081                                  ;
 38082                                  ;     Input:    DS:SI target string (null terminated)
 38083                                  ;     Output:   Zero set => path separator encountered in string
 38084                                  ;               Zero clear => null encountered
 38085                                  ;     Registers modified: SI
 38086                                  ;----------------------------------------------------------------------------
 38087                                  
 38088                                  ScanPathChar:
 38089 00006FED AC                      	LODSB                           ; fetch a character
 38090 00006FEE E871FE                  	call    PathSepGotCh
 38091 00006FF1 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 38092                                  	;call	PATHCHRCMP              ; path separator?
 38093                                  	;retn
 38094                                  	; 18/12/2022
 38095 00006FF3 E9A3E1                  	jmp	PATHCHRCMP
 38096                                  
 38097                                  ;============================================================================
 38098                                  ; FILE.ASM, MSDOS 6.0, 1991
 38099                                  ;============================================================================
 38100                                  ; 14/07/2018 - Retro DOS v3.0
 38101                                  
 38102                                  ; 13/05/2019 - Retro DOS v4.0
 38103                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 38104                                  
 38105                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38106                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 38107                                  
 38108                                  ; MSDOS 2.11
 38109                                  ;BREAK <$Open - open a file handle>
 38110                                  ;----------------------------------------------------------------------------
 38111                                  ;   Assembler usage:
 38112                                  ;           LDS     DX, Name
 38113                                  ;           MOV     AH, Open
 38114                                  ;           MOV     AL, access
 38115                                  ;           INT     int_command
 38116                                  ;
 38117                                  ;       ACCESS          Function
 38118                                  ;       ------          --------
 38119                                  ;       open_for_read   file is opened for reading
 38120                                  ;       open_for_write  file is opened for writing
 38121                                  ;       open_for_both   file is opened for both reading and writing.
 38122                                  ;
 38123                                  ;   Error returns:
 38124                                  ;           AX = error_invalid_access
 38125                                  ;              = error_file_not_found
 38126                                  ;              = error_access_denied
 38127                                  ;              = error_too_many_open_files
 38128                                  ;----------------------------------------------------------------------------
 38129                                  
 38130                                  ; MSDOS 6.0
 38131                                  ;	BREAK <$Open - open a file from a path string>
 38132                                  ;----------------------------------------------------------------------------
 38133                                  ;
 38134                                  ;**	$OPen - Open a File
 38135                                  ;
 38136                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 38137                                  ;	file and and returns a handle
 38138                                  ;
 38139                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 38140                                  ;		(AL) = open mode
 38141                                  ;	EXIT	'C' clear if OK
 38142                                  ;		  (ax) = file handle
 38143                                  ;		'C' set if error
 38144                                  ;		  (ax) = error code
 38145                                  ;	USES	all
 38146                                  ;
 38147                                  ;----------------------------------------------------------------------------
 38148                                  
 38149                                  ; 13/05/2019 - Retro DOS v4.0
 38150                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38151                                  
 38152                                  _$OPEN:       
 38153 00006FF6 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 38154                                  _$Open2:
 38155                                  	;mov	ch,16h
 38156 00006FF8 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 38157 00006FFA E85702                  	call	SetAttrib
 38158 00006FFD B9[FE2B]                	mov	cx,DOS_OPEN
 38159                                  
 38160                                  	;xor	ah,ah  ; MSDOS 3.3
 38161                                  
 38162 00007000 50                      	push	ax
 38163                                  
 38164                                  ;*	General file open/create code. The $CREATE call and the various
 38165                                  ;	$OPEN calls all come here.
 38166                                  ;
 38167                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 38168                                  ;	path names, etc., and then dispatch to our individual handlers.
 38169                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 38170                                  ;
 38171                                  ;	(TOS) = create mode
 38172                                  ;	(CX) = address of routine to call to do actual function
 38173                                  ;	(DS:DX) = ASCIZ name
 38174                                  ;	SAttrib = Attribute mask
 38175                                  
 38176                                  ;	Get a free SFT and mark it "being allocated"
 38177                                  
 38178                                  AccessFile:
 38179 00007001 E884A3                  	call	ECritSFT
 38180 00007004 E8D3F7                  	call	SFNFree			; get a free sfn
 38181 00007007 E899A3                  	call	LCritSFT
 38182 0000700A 7214                    	jc	short OpenFailJ		; oops, no free sft's
 38183 0000700C 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 38184 00007011 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 38185 00007016 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 38186                                  
 38187                                  ;	Find a free area in the user's JFN table.
 38188                                  
 38189 0000701B E8A9F7                  	call	JFNFree			; get a free jfn
 38190 0000701E 7303                    	jnc	short SaveJFN
 38191                                  OpenFailJ:
 38192 00007020 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 38193                                  
 38194                                  SaveJFN:
 38195 00007023 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 38196 00007028 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 38197 0000702D 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 38198                                  
 38199                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 38200                                  ;	reusing the same JFN.
 38201                                  
 38202 00007032 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 38203 00007037 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 38204 0000703A 89D6                    	MOV	SI,DX			; get name in appropriate place
 38205 0000703C BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38206 0000703F 51                      	push	cx			; save routine to call
 38207 00007040 E843FC                  	call	TransPath		; convert the path
 38208 00007043 5B                      	pop	bx			; (bx) = routine to call
 38209                                  
 38210 00007044 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 38211 00007049 720A                    	JC	short OpenCleanJ	; no error, go and open file
 38212 0000704B 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 38213 00007051 7404                    	JZ	short SetSearch
 38214                                  	;mov	al,2
 38215 00007053 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 38216                                  OpenCleanJ:
 38217 00007055 EB50                    	JMP	short OpenClean
 38218                                  
 38219                                  SetSearch:
 38220 00007057 58                      	pop	ax			; Mode (Open), Attributes (Create)
 38221                                  
 38222                                  ;	We need to get the new inheritance bits.
 38223                                  
 38224 00007058 31C9                    	xor	cx,cx
 38225                                  	; MSDOS 6.0
 38226                                  	;mov	[si+2],cx ; 0
 38227 0000705A 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 38228                                  	;mov    [si+51],cx ; 0
 38229 0000705D 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 38230                                  	;
 38231 00007060 81FB[FE2B]              	CMP	BX,DOS_OPEN
 38232 00007064 7509                    	JNZ	short _DoOper
 38233                                  	;test   al,80h
 38234 00007066 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 38235 00007068 7405                    	JZ	short _DoOper ; 10/08/2018
 38236 0000706A 247F                    	AND	AL,7Fh			; mask off inherit bit
 38237                                  	;mov	cx,1000h
 38238 0000706C B90010                  	MOV	CX,sf_no_inherit
 38239                                  _DoOper:
 38240                                  	;; MSDOS 3.3
 38241                                  	;;mov	word [si+2], 0
 38242                                  	;;mov	word [si+33h], 0
 38243                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 38244                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 38245                                  
 38246                                  	; MSDOS 6.0
 38247                                  ;**	Check if this is an extended open. If so you must set the
 38248                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 38249                                  ;	Set_EXT_mode in creat.asm
 38250                                  
 38251                                  	; MSDOS 6.0
 38252                                  	;SAVE	<di, es>                ;M022 conditional removed here
 38253 0000706F 57                      	push	di
 38254 00007070 06                      	push	es
 38255 00007071 1E                      	push	ds
 38256 00007072 07                      	pop	es
 38257 00007073 56                      	push	si
 38258 00007074 5F                      	pop	di			; (es:di) = SFT address
 38259 00007075 E872BB                  	call	Set_EXT_mode
 38260                                  	;RESTORE <es, di>
 38261 00007078 07                      	pop	es
 38262 00007079 5F                      	pop	di
 38263                                  
 38264                                  	;Context DS
 38265 0000707A 16                      	push	ss
 38266 0000707B 1F                      	pop	ds	
 38267                                  
 38268 0000707C 51                      	push	cx
 38269 0000707D FFD3                    	CALL	BX			; blam!
 38270 0000707F 59                      	pop	cx
 38271 00007080 C536[9E05]              	LDS	SI,[THISSFT]
 38272 00007084 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 38273                                  	;jc	short OpenE ; MSDOS 3.3
 38274                                  
 38275                                  ;	The SFT was successfully opened. Remove busy mark.
 38276                                  
 38277                                  OpenOK:
 38278                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 38279 00007086 C7040100                	mov	word [SI],1
 38280                                  	;or	[SI+5],cx
 38281 0000708A 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 38282                                  
 38283                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 38284                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 38285                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 38286                                  ;
 38287                                  ; Since this is only relevant on sharer systems, we stick this code into the
 38288                                  ; sharer.
 38289                                  
 38290 0000708D 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 38291 00007091 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 38292                                  
 38293 00007096 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 38294                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38295                                  OpenOkj:
 38296 0000709D E9E495                  	jmp	SYS_RET_OK		; bye with no errors
 38297                                  
 38298                                  	; MSDOS 6.0
 38299                                  ;Extended Open hooks check
 38300                                  OpenE2:					;AN000;;EO.
 38301 000070A0 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 38302 000070A3 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 38303 000070A5 EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 38304                                  
 38305                                  ;	Extended Open hooks check
 38306                                  ;
 38307                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 38308                                  
 38309                                  OpenClean:
 38310 000070A7 5B                      	pop	bx			; clean off stack
 38311                                  OpenE:
 38312                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 38313 000070A8 C7040000                	mov	word [SI],0
 38314 000070AC 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 38315 000070B1 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 38316 000070B4 EB02                    	JMP	SHORT OpenCritLeave
 38317                                  
 38318                                  OpenFail:
 38319 000070B6 FB                      	STI
 38320 000070B7 59                      	pop	cx			; Clean stack
 38321                                  OpenCritLeave:
 38322 000070B8 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 38323                                  
 38324                                  	; MSDOS 6.0
 38325                                  ; File Tagging DOS 4.00
 38326 000070BF 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 38327                                  					;AN000;;FT. code page mismatch
 38328 000070C5 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 38329 000070C7 E9CB95                  	jmp	From_GetSet		;AN000;;FT. yes
 38330                                  NORERR: 				;AN000;
 38331                                  ; File Tagging DOS 4.00
 38332                                  
 38333 000070CA E9C095                  	jmp	SYS_RET_ERR		; no free, return error
 38334                                  
 38335                                  ; MSDOS 2.11
 38336                                  ;BREAK <$CREAT - creat a new file and open him for input>
 38337                                  ;----------------------------------------------------------------------------
 38338                                  ;   Assembler usage:
 38339                                  ;           LDS     DX, name
 38340                                  ;           MOV     AH, Creat
 38341                                  ;           MOV     CX, access
 38342                                  ;           INT     21h
 38343                                  ;       ; AX now has the handle
 38344                                  ;
 38345                                  ;   Error returns:
 38346                                  ;           AX = error_access_denied
 38347                                  ;              = error_path_not_found
 38348                                  ;              = error_too_many_open_files
 38349                                  ;----------------------------------------------------------------------------
 38350                                  
 38351                                  ; MSDOS 6.0
 38352                                  ;	BREAK <$Creat - create a brand-new file>
 38353                                  ;----------------------------------------------------------------------------
 38354                                  ;
 38355                                  ;**	$Creat - Create a File
 38356                                  ;
 38357                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 38358                                  ;	initial attributes contained in CX
 38359                                  ;
 38360                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 38361                                  ;		(CX) = initial attributes
 38362                                  ;	EXIT	'C' set if error
 38363                                  ;		  (ax) = error code
 38364                                  ;		'C' clear if OK
 38365                                  ;		  (ax) = file handle
 38366                                  ;	USES	all
 38367                                  ;
 38368                                  ;----------------------------------------------------------------------------
 38369                                  
 38370                                  _$CREAT:
 38371 000070CD 51                      	push	cx			; Save attributes on stack
 38372 000070CE B9[D42A]                	mov	CX,DOS_CREATE		; routine to call
 38373                                  AccessSet:
 38374                                  	;mov	byte [ss:SATTRIB],6
 38375 000070D1 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 38376                                  	; 10/08/2018
 38377 000070D7 E927FF                  	JMP	AccessFile		; use good ol' open
 38378                                  
 38379                                  ; MSDOS 6.0 (MSDOS 3.3)
 38380                                  ;	BREAK <$CHMOD - change file attributes>
 38381                                  ;----------------------------------------------------------------------------
 38382                                  ;
 38383                                  ;**	$CHMOD - Change File Attributes
 38384                                  ;
 38385                                  ;   Assembler usage:
 38386                                  ;	    LDS     DX, name
 38387                                  ;	    MOV     CX, attributes
 38388                                  ;	    MOV     AL,func (0=get, 1=set)
 38389                                  ;	    INT     21h
 38390                                  ;   Error returns:
 38391                                  ;	    AX = error_path_not_found
 38392                                  ;	    AX = error_access_denied
 38393                                  ;
 38394                                  ;----------------------------------------------------------------------------
 38395                                  
 38396                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38397                                  _$CHMOD:
 38398                                  	; 05/08/2018 - Retro DOS v3.0
 38399                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 38400 000070DA BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38401 000070DD 50                      	push	ax
 38402 000070DE 51                      	push	cx			; save function and attributes
 38403 000070DF 89D6                    	MOV	SI,DX			; get things in appropriate places
 38404 000070E1 E8A6FB                  	call	TransPathSet		; get correct path
 38405 000070E4 59                      	pop	cx
 38406 000070E5 58                      	pop	ax			; and get function and attrs back
 38407 000070E6 7257                    	JC	short ChModErr		; errors get mapped to path not found
 38408 000070E8 16                      	push	ss			; set up for later possible calls
 38409 000070E9 1F                      	pop	ds
 38410 000070EA 803E[7A05]FF            	CMP	byte [CMETA],-1
 38411 000070EF 754E                    	JNZ	short ChModErr
 38412                                  	;mov	byte [SATTRIB],16h
 38413 000070F1 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 38414 000070F6 2C01                    	SUB	AL,1			; fast way to discriminate
 38415 000070F8 720B                    	JB	short ChModGet		; 0 -> go get value
 38416 000070FA 7417                    	JZ	short ChModSet		; 1 -> go set value
 38417                                  	;mov	byte [EXTERR_LOCUS],1
 38418 000070FC C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 38419                                  	;mov	al,1
 38420 00007101 B001                    	mov	al,error_invalid_function ; bad value
 38421                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38422                                  chmod_errj:	
 38423                                  	;;jmp	SYS_RET_ERR
 38424                                  	;jmp	short ChModE	
 38425 00007103 EBC5                    	jmp	short NORERR	; 06/12/2022
 38426                                  ChModGet:
 38427 00007105 E8B6B8                  	call	GET_FILE_INFO		; suck out the ol' info
 38428 00007108 7237                    	JC	short ChModE		; error codes are already set for ret
 38429 0000710A E8BD93                  	call	Get_User_Stack		; point to user saved vaiables
 38430                                  	;mov	[SI+4],ax
 38431 0000710D 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 38432                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38433                                  OpenOkj2:
 38434                                  	; 17/12/2022
 38435                                  	;;jmp	SYS_RET_OK		; say sayonara
 38436                                  	;jmp	short OpenOkj
 38437                                  	; 25/06/2019
 38438 00007110 E97495                  	jmp	SYS_RET_OK_clc
 38439                                  
 38440                                  ChModSet:
 38441 00007113 89C8                    	MOV	AX,CX			; get attrs in position
 38442 00007115 E804B9                  	call	SET_FILE_ATTRIBUTE	; go set
 38443 00007118 7227                    	JC	short ChModE		; errors are set
 38444                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38445                                  	;jmp	SYS_RET_OK
 38446                                  OpenOkj3:
 38447                                  	;jmp	short OpenOkj2
 38448                                  	; 17/12/2022
 38449 0000711A E96795                  	jmp	SYS_RET_OK
 38450                                  
 38451                                  ; 17/12/2022
 38452                                  %if 0
 38453                                  ChModErr:
 38454                                  NotFound:	; 17/12/2022
 38455                                  	;mov	al,3
 38456                                  	mov	al,error_path_not_found
 38457                                  ChModE:
 38458                                  UnlinkE:	; 17/12/2022
 38459                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38460                                  	;;jmp	SYS_RET_ERR
 38461                                  	;jmp	short chmod_errj
 38462                                  	; 17/12/2022
 38463                                  	jmp	short NORERR
 38464                                  %endif
 38465                                  
 38466                                  ; 22/05/2019 - Retro DOS v4.0
 38467                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 38468                                  
 38469                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38470                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 38471                                  
 38472                                  ;	BREAK <$UNLINK - delete a file entry>
 38473                                  ;----------------------------------------------------------------------------
 38474                                  ;
 38475                                  ;**	$UNLINK - Delete a File
 38476                                  ;
 38477                                  ;
 38478                                  ;	Assembler usage:
 38479                                  ;	    LDS     DX, name
 38480                                  ;	    IF VIA SERVER DOS CALL
 38481                                  ;	     MOV     CX,SEARCH_ATTRIB
 38482                                  ;	    MOV     AH, Unlink
 38483                                  ;	    INT     21h
 38484                                  ;
 38485                                  ;	ENTRY	(ds:dx) = path name
 38486                                  ;		(cx) = search_attribute, if via server_dos
 38487                                  ;	EXIT	'C' clear if no error
 38488                                  ;		'C' set if error
 38489                                  ;		  (ax) = error code
 38490                                  ;			= error_file_not_found
 38491                                  ;			= error_access_denied
 38492                                  ;
 38493                                  ;----------------------------------------------------------------------------
 38494                                  
 38495                                  _$UNLINK:
 38496 0000711D 51                      	push	cx			; Save possible CX input parm
 38497 0000711E 89D6                    	MOV	SI,DX			; Point at input string
 38498 00007120 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 38499 00007123 E864FB                  	call	TransPathSet		; go get normalized path
 38500 00007126 59                      	pop	cx
 38501 00007127 7216                    	JC	short ChModErr		; badly formed path
 38502 00007129 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 38503 0000712F 750E                    	JNZ	short NotFound
 38504 00007131 16                      	push	ss
 38505 00007132 1F                      	pop	ds
 38506                                  	;mov	ch,6
 38507 00007133 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 38508 00007135 E81C01                  	call	SetAttrib
 38509 00007138 E871B4                  	call	DOS_DELETE		; remove that file
 38510                                  	;JC	short UnlinkE 		; error is there
 38511                                  	; 17/12/2022
 38512 0000713B 728D                    	jc	short NORERR
 38513                                  
 38514                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38515                                  UnlinkOk:
 38516                                  	;jmp	SYS_RET_OK		; okey doksy
 38517 0000713D EBDB                    	jmp	short OpenOkj3
 38518                                  
 38519                                  	; 17/12/2022
 38520                                  ChModErr:	; 17/12/2022
 38521                                  NotFound:
 38522                                  	;mov	al,3
 38523 0000713F B003                    	MOV	AL,error_path_not_found
 38524                                  ChModE:		; 17/12/2022
 38525                                  UnlinkE:
 38526                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38527                                  	;;jmp	SYS_RET_ERR		; bye
 38528                                  	;jmp	short ChModE
 38529                                  	; 17/12/2022
 38530 00007141 EB87                    	jmp	short NORERR
 38531                                  
 38532                                  ;BREAK <$RENAME - move directory entries around>
 38533                                  ;----------------------------------------------------------------------------
 38534                                  ;
 38535                                  ;   Assembler usage:
 38536                                  ;	    LDS     DX, source
 38537                                  ;	    LES     DI, dest
 38538                                  ;	    IF VIA SERVER DOS CALL
 38539                                  ;	      MOV   CX,SEARCH_ATTRIB
 38540                                  ;	    MOV     AH, Rename
 38541                                  ;	    INT     21h
 38542                                  ;
 38543                                  ;   Error returns:
 38544                                  ;	    AX = error_file_not_found
 38545                                  ;	       = error_not_same_device
 38546                                  ;	       = error_access_denied
 38547                                  ;
 38548                                  ;----------------------------------------------------------------------------
 38549                                  
 38550                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38551                                  _$RENAME:
 38552                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38553 00007143 51                      	push	cx
 38554 00007144 1E                      	push	ds
 38555 00007145 52                      	push	dx			; save source and possible CX arg
 38556 00007146 06                      	PUSH	ES
 38557 00007147 1F                      	POP	DS			; move dest to source
 38558 00007148 89FE                    	MOV	SI,DI			; save for offsets
 38559 0000714A BF[3E04]                	MOV	DI,RENBUF
 38560 0000714D E83AFB                  	call	TransPathSet		; munge the paths
 38561 00007150 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 38562 00007155 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 38563 0000715A 5E                      	pop	si
 38564 0000715B 1F                      	pop	ds
 38565 0000715C 59                      	pop	cx			; get back source and possible CX arg
 38566                                  epjc2:	
 38567 0000715D 72E0                    	JC	short ChModErr		; get old error
 38568 0000715F 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 38569 00007165 75D8                    	JNZ	short NotFound
 38570 00007167 51                      	push	cx			; Save possible CX arg
 38571 00007168 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38572 0000716B E81CFB                  	call	TransPathSet		; wham
 38573 0000716E 59                      	pop	cx
 38574 0000716F 72EC                    	JC	short epjc2
 38575 00007171 16                      	push	ss
 38576 00007172 1F                      	pop	ds
 38577 00007173 803E[7A05]FF            	CMP	byte [CMETA],-1
 38578 00007178 72C5                    	JB	short NotFound
 38579                                  
 38580                                  	; MSDOS 6.0
 38581 0000717A FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 38582 0000717E FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 38583 00007182 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 38584 00007185 16                      	PUSH	SS			   ;AN000;;MS.
 38585 00007186 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 38586 00007187 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 38587                                  rnloop: 				   ;AN000;
 38588 00007189 E874FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 38589 0000718C 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 38590 0000718E E898A0                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 38591 00007191 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 38592 00007193 FEC0                    	INC	AL			   ;AN000;;MS.	next
 38593 00007195 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 38594                                  rnerr:					   ;AN000;
 38595 00007197 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 38596                                  	;error	error_current_directory    ;AN000;;MS.
 38597 0000719A B010                    	mov	al,error_current_directory 
 38598                                  	;jmp	SYS_RET_ERR
 38599                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38600 0000719C EBA3                    	jmp	short UnlinkE
 38601                                  dorn:					   ;AN000;
 38602 0000719E 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38603 000071A3 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38604                                  
 38605 000071A8 16                      	push	ss
 38606 000071A9 1F                      	pop	ds
 38607                                  
 38608                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38609                                  	;mov	ch,16h
 38610 000071AA B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 38611                                  					; rename appropriate files
 38612 000071AC E8A500                  	call	SetAttrib
 38613 000071AF E8D8B5                  	call	DOS_RENAME		; do the deed
 38614 000071B2 728D                    	JC	short UnlinkE 		; errors
 38615                                  
 38616                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38617                                  	;jmp	SYS_RET_OK
 38618 000071B4 EB87                    	jmp	short UnlinkOk
 38619                                  
 38620                                  
 38621                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38622                                  
 38623                                  ; 14/07/2018 - Retro DOS v3.0
 38624                                  ; MSDOS 3.3 (& MSDOS 6.0)
 38625                                  
 38626                                  ;Break <$CreateNewFile - Create a new directory entry>
 38627                                  ;----------------------------------------------------------------------------
 38628                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 38629                                  ;	was no previous directory entry, and fail if a directory entry with
 38630                                  ;	the same name existed previously.
 38631                                  ;
 38632                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 38633                                  ;		CX contains default file attributes
 38634                                  ;   Outputs:	Carry Clear:
 38635                                  ;		    AX has file handle opened for read/write
 38636                                  ;		Carry Set:
 38637                                  ;		    AX has error code
 38638                                  ;   Registers modified: All
 38639                                  ;----------------------------------------------------------------------------
 38640                                  
 38641                                  _$CreateNewFile:
 38642 000071B6 51                      	push	cx			; Save attributes on stack
 38643 000071B7 B9[A12B]                	MOV	CX,DOS_Create_New	; routine to call
 38644 000071BA E914FF                  	JMP	AccessSet		; use good ol' open
 38645                                  
 38646                                  ;**	BinToAscii - convert a number to a string.
 38647                                  ;----------------------------------------------------------------------------
 38648                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 38649                                  ;	This routine is used to generate temp file names so we don't spend
 38650                                  ;	the time and code needed for a true hex number, we just use
 38651                                  ;	A thorugh O.
 38652                                  ;
 38653                                  ;	ENTRY	(ax) = value
 38654                                  ;		(es:di) = destination
 38655                                  ;	EXIT	(es:di) updated by 4
 38656                                  ;	USES	cx, di, flags
 38657                                  ;----------------------------------------------------------------------------
 38658                                  
 38659                                  ; MSDOS 3.3
 38660                                  ;BinToAscii:
 38661                                  ;	mov     cx,4
 38662                                  ;bta5:
 38663                                  ;	push    cx
 38664                                  ;	mov     cl,4
 38665                                  ;	rol     ax,cl
 38666                                  ;	push    ax
 38667                                  ;	and     al,0Fh
 38668                                  ;	add     al,'0'
 38669                                  ;	cmp     al,'9'
 38670                                  ;	jbe     short bta6
 38671                                  ;	add     al,7
 38672                                  ;bta6: 
 38673                                  ;	stosb
 38674                                  ;	pop     ax
 38675                                  ;	pop     cx
 38676                                  ;	loop    bta5
 38677                                  ;	retn
 38678                                  
 38679                                  ; MSDOS 6.0
 38680                                  BinToAscii:
 38681 000071BD B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 38682                                  bta5:	
 38683 000071C0 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 38684 000071C2 50                      	push	ax			; preserve remainder of digits
 38685 000071C3 240F                    	AND	AL,0Fh			; grab low nibble
 38686 000071C5 0441                    	ADD	AL,'A'			; turn into ascii
 38687 000071C7 AA                      	STOSB				; drop in the character
 38688 000071C8 58                      	pop	ax			; (ax) = shifted number
 38689 000071C9 FECD                    	dec	ch
 38690 000071CB 75F3                    	jnz	short bta5		; process 4 digits
 38691 000071CD C3                      	retn
 38692                                  
 38693                                  ;Break	<$CreateTempFile - create a unique name>
 38694                                  ;----------------------------------------------------------------------------
 38695                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 38696                                  ;	Method used is to get the current time, convert to a name and attempt
 38697                                  ;	a create new. Repeat until create new succeeds.
 38698                                  ;
 38699                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 38700                                  ;		CX  contains default attributes
 38701                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 38702                                  ;		AX has handle
 38703                                  ;   Registers modified: all
 38704                                  ;----------------------------------------------------------------------------
 38705                                  
 38706                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38707                                  
 38708                                  _$CreateTempFile:
 38709                                  	;Enter
 38710 000071CE 55                      	push	bp
 38711 000071CF 89E5                    	mov	bp,sp
 38712                                  
 38713                                  	;LocalVar  EndPtr,DWORD
 38714                                  	;LocalVar  FilPtr,DWORD
 38715                                  	;LocalVar  Attr,WORD
 38716                                  
 38717 000071D1 83EC0A                  	sub	sp,10
 38718                                  
 38719                                  	;test	cx,0FFD8h
 38720 000071D4 F7C1D8FF                	test	CX,~attr_changeable
 38721 000071D8 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 38722                                  
 38723                                  ; We need this "hook" here to detect these cases (like user sets one both of
 38724                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 38725                                  ; below. The code loops on error_access_denied, but if one of the non
 38726                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 38727                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 38728                                  ; need to detect these cases before getting to the loop.
 38729                                  
 38730                                  	;mov	ax, 5
 38731 000071DA B80500                  	MOV	AX,error_access_denied
 38732 000071DD EB69                    	JMP	SHORT SETTMPERR
 38733                                  
 38734                                  OKatts:
 38735                                  	;MOV	attr,CX 		; save attribute
 38736 000071DF 894EF6                  	mov     [bp-10],cx
 38737                                  	;MOV	FilPtrL,DX		; pointer to file
 38738 000071E2 8956F8                  	mov	[bp-8],dx
 38739                                  	;MOV	FilPtrH,DS
 38740 000071E5 8C5EFA                  	mov	[bp-6],ds
 38741                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 38742 000071E8 8C5EFE                  	mov	[bp-2],ds
 38743 000071EB 1E                      	PUSH	DS
 38744 000071EC 07                      	POP	ES			; destination for nul search
 38745 000071ED 89D7                    	MOV	DI,DX
 38746 000071EF 89F9                    	MOV	CX,DI
 38747 000071F1 F7D9                    	NEG	CX			; number of bytes remaining in segment
 38748                                  	; MSDOS 6.0
 38749 000071F3 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 38750 000071F5 7501                    	JNZ	short okok		;AN000;MS. no
 38751                                  	;MOV	CX,-1			;AN000;MS.
 38752                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38753                                  	; 17/12/2022
 38754 000071F7 49                      	dec	cx  ; mov cx,-1
 38755                                  	;mov	cx,-1 ; 0FFFh
 38756                                  okok:					;AN000;
 38757 000071F8 31C0                    	XOR	AX,AX			;AN000;
 38758 000071FA F2AE                    	REPNZ	SCASB			;AN000;
 38759                                  					;AN000;
 38760 000071FC 4F                      	DEC	DI			; point back to the null
 38761 000071FD 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 38762 00007201 E895DF                  	call	PATHCHRCMP		; Is it a path separator?
 38763 00007204 7403                    	JZ	short SETENDPTR		; Yes
 38764                                  STOREPTH:
 38765 00007206 B05C                    	MOV	AL,'\'
 38766 00007208 AA                      	STOSB				; Add a path separator (and INC DI)
 38767                                  SETENDPTR:
 38768                                  	;MOV	EndPtrL,DI		; pointer to the tail
 38769 00007209 8856FC                  	mov	[bp-4],dl
 38770                                  CreateLoop:
 38771 0000720C 16                      	push	ss			; let ReadTime see variables
 38772 0000720D 1F                      	pop	ds
 38773 0000720E 55                      	push	bp
 38774 0000720F E85E99                  	call	READTIME		; go get time
 38775 00007212 5D                      	pop	bp
 38776                                  ;
 38777                                  ; Time is in CX:DX. Go drop it into the string.
 38778                                  ;
 38779                                  	;les	di,EndPtr		; point to the string
 38780 00007213 C47EFC                  	les	di,[BP-4]
 38781 00007216 89C8                    	mov	ax,cx
 38782 00007218 E8A2FF                  	call	BinToAscii		; store upper word
 38783 0000721B 89D0                    	mov	ax,dx
 38784 0000721D E89DFF                  	call	BinToAscii		; store lower word
 38785 00007220 30C0                    	xor	al,al
 38786 00007222 AA                      	STOSB				; nul terminate
 38787                                  	;LDS	DX,FilPtr		; get name
 38788 00007223 C556F8                  	lds	dx,[bp-8]
 38789                                  	;MOV	CX,Attr 		; get attr
 38790 00007226 8B4EF6                  	mov	cx,[bp-10]
 38791 00007229 55                      	push	bp
 38792 0000722A E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 38793 0000722D 5D                      	pop	bp
 38794 0000722E 7319                    	JNC	short CreateDone	; failed, go try again
 38795                                  
 38796                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 38797                                  ; error and figure out what to do.
 38798                                  
 38799                                  	;; MSDOS 3.3			; M049 - start
 38800                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 38801                                  ;;	cmp	al,error_file_exists
 38802                                  ;;	jz	short CreateLoop	; file existed => try with new name
 38803                                  ;;	cmp	al,error_access_denied
 38804                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 38805                                  
 38806                                  	; MSDOS 6.0
 38807                                  	;cmp	al,50h
 38808 00007230 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 38809 00007232 74D8                    	JZ	short CreateLoop	; Y: try again
 38810                                  	;cmp	al,5
 38811 00007234 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 38812 00007236 7510                    	JNZ	short SETTMPERR		; N: Error out
 38813                                  					; Y: Check to see if we got this due
 38814                                  					;    to the network drive. Note that
 38815                                  					;    the redir will set the exterr
 38816                                  					;    to error_cannot_make if this is 
 38817                                  					;    so. 
 38818 00007238 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 38819                                  					; See if it's REALLY an att mismatch
 38820 0000723E 7408                    	je	short SETTMPERR		; no, network error, stop
 38821                                  ;M070
 38822                                  ; If the user failed on an I24, we do not want to try again
 38823                                  ;
 38824 00007240 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 38825                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 38826                                  
 38827                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 38828                                  	; 17/12/2022
 38829 00007246 75C4                    	jne	short CreateLoop ; 10/06/2019 
 38830                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38831                                  	;jz	short SETTMPERR
 38832                                  	;jmp	short CreateLoop
 38833                                  
 38834                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 38835                                  					; M049 - end
 38836                                  SETTMPERR:
 38837 00007248 F9                      	STC
 38838                                  CreateDone:
 38839                                  	;Leave
 38840 00007249 89EC                    	mov	sp,bp
 38841 0000724B 5D                      	pop	bp
 38842 0000724C 7203                    	JC	short CreateFail
 38843 0000724E E93394                  	jmp	SYS_RET_OK		; success!
 38844                                  CreateFail:
 38845 00007251 E93994                  	jmp	SYS_RET_ERR
 38846                                  
 38847                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 38848                                  ;   (CH) or to the value in CL if the current system call is through
 38849                                  ;   serverdoscall.
 38850                                  ;
 38851                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 38852                                  ;		fSharing == TRUE => set sattrib to CL
 38853                                  ;   Outputs:	none
 38854                                  ;   Registers changed:	CX
 38855                                  
 38856                                  SetAttrib:
 38857 00007254 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 38858 0000725A 7502                    	jnz	short Set
 38859 0000725C 88E9                    	mov	cl,ch
 38860                                  Set:
 38861 0000725E 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 38862 00007263 C3                      	retn
 38863                                  
 38864                                  ; 14/07/2018 - Retro DOS v3.0
 38865                                  ; MSDOS 6.0
 38866                                  
 38867                                  ; 29/04/2019 - Retro DOS v4.0
 38868                                  
 38869                                  ;Break	<Extended_Open- Extended open the file>
 38870                                  ;----------------------------------------------------------------------------
 38871                                  ; Input: AL= 0 reserved  AH=6CH
 38872                                  ;	 BX= mode
 38873                                  ;	 CL= create attribute  CH=search attribute (from server)
 38874                                  ;	 DX= flag
 38875                                  ;	 DS:SI = file name
 38876                                  ;	 ES:DI = parm list
 38877                                  ;			   DD  SET EA list (-1) null
 38878                                  ;			   DW  n  parameters
 38879                                  ;			   DB  type (TTTTTTLL)
 38880                                  ;			   DW  IOMODE
 38881                                  ; Function: Extended Open
 38882                                  ; Output: carry clear
 38883                                  ;		     AX= handle
 38884                                  ;		     CX=1 file opened
 38885                                  ;			2 file created/opened
 38886                                  ;			3 file replaced/opened
 38887                                  ;	  carry set: AX has error code
 38888                                  ;----------------------------------------------------------------------------
 38889                                  
 38890                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38891                                  _$Extended_Open:			  ;AN000;
 38892                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 38893 00007264 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 38894 00007269 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 38895                                  	; 17/12/2022
 38896 00007270 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 38897                                  	;;test	dx,0FE00h
 38898                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 38899 00007273 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 38900 00007275 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 38901 00007277 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 38902 0000727A 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 38903                                  	;and	dl,0Fh
 38904 0000727C 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 38905 0000727F 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 38906 00007282 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 38907                                  	;and	ah,0F0h
 38908 00007284 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 38909 00007287 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 38910 0000728A 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 38911                                  
 38912 0000728C 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 38913 00007291 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 38914 00007296 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 38915 0000729B 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 38916 000072A0 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 38917 000072A5 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 38918 000072AA 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 38919 000072AF 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 38920 000072B4 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 38921 000072B6 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 38922 000072B8 EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 38923                                  ext_inval2:				  ;AN000;;EO.
 38924                                  	;mov	al,1
 38925 000072BA B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 38926                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38927                                  eo_err:
 38928                                  	;jmp	SYS_RET_ERR
 38929 000072BC EB93                    	jmp	short CreateFail
 38930                                  
 38931                                  ext_inval_parm:				  ;AN000;EO..
 38932 000072BE 59                      	POP	CX			  ;AN000;EO..  pop up satck
 38933 000072BF 5E                      	POP	SI			  ;AN000;EO..
 38934                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 38935                                  	;mov	al,13
 38936 000072C0 B00D                    	mov	al,error_invalid_data
 38937                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38938                                  	;;jmp	SYS_RET_ERR
 38939                                  	;jmp	short eo_err
 38940                                  	; 17/12/2022
 38941 000072C2 EB8D                    	jmp	short CreateFail
 38942                                  
 38943                                  	; 17/12/2022	
 38944                                  ;error_return:				  ;AN000;EO.
 38945                                  ;	retn				  ;AN000;EO.. return with error
 38946                                  
 38947                                  goopen2:				  ;AN000;
 38948                                  	; 17/12/2022
 38949                                  	;test	bh,20h				 
 38950 000072C4 F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 38951                                  	;;test	bx,2000h
 38952                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 38953 000072C7 7406                    	JZ	short goopen		  ;AN000;EO.. no
 38954                                  	;or	byte [SS:EXTOPEN_ON],2
 38955 000072C9 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 38956                                  goopen:					  ;AN000;
 38957                                  	;or	byte [SS:EXTOPEN_ON],1 
 38958 000072CF 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 38959                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 38960                                  	; 18/12/2022
 38961 000072D5 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 38962                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 38963 000072DB 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 38964 000072E1 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 38965 000072E3 E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 38966 000072E6 723F                    	JC	short error_return	  ;AN000;;EO. error
 38967                                  
 38968 000072E8 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 38969 000072EE 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 38970                                  	;mov	word [SS:EXTOPEN_FLAG],2
 38971 000072F0 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 38972 000072F7 EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 38973                                  
 38974                                  	; 17/12/2022
 38975                                  ;ok_return2:
 38976                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 38977                                  
 38978                                  chknext:
 38979                                  	; 17/12/2022
 38980 000072F9 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 38981                                  	;;test	word [SS:EXTOPEN_FLAG],1
 38982                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 38983 000072FF 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 38984 00007301 E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 38985 00007304 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 38986 00007306 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 38987 0000730C 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 38988 0000730E 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 38989 00007315 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 38990 0000731B 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 38991 0000731D 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 38992 00007324 EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 38993                                  error_return2:
 38994 00007326 F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 38995                                  error_return:	 ;17/12/2022
 38996 00007327 C3                      	retn				  ;AN000;;EO. return with error
 38997                                  
 38998                                  	; 17/12/2022
 38999                                  ok_return:
 39000                                  ok_return2:
 39001 00007328 E95993                  	jmp	SYS_RET_OK
 39002                                  
 39003                                  exist_open:				  ;AN000;
 39004 0000732B 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 39005 00007331 7402                    	jz	short noserver		  ;AN000;;EO. no
 39006 00007333 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 39007                                  noserver:
 39008 00007335 E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 39009 00007338 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 39010 0000733A 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 39011 00007340 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 39012                                  local_extopen:
 39013                                  	;cmp	ax,2
 39014 00007342 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 39015 00007345 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 39016                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 39017                                  	; 17/12/2022
 39018 00007347 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 39019                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 39020                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 39021                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 39022                                  	; 17/12/2022
 39023 0000734D 745D                    	jz	short extexit ; 10/06/2019
 39024                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39025                                  	;jnz	short do_creat
 39026                                  	;jmp	short extexit
 39027                                  do_creat:
 39028 0000734F 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 39029 00007354 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 39030 00007359 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 39031 0000735B E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 39032 0000735E 724C                    	JC	short extexit 		  ;AN000;;EO. error
 39033                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39034 00007360 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39035                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 39036 00007367 EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39037                                  
 39038                                  ext_ok:
 39039 00007369 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 39040 0000736F 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 39041                                  	;mov	word [SS:EXTOPEN_FLAG],1
 39042 00007371 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 39043                                  setXAttr:
 39044                                  	; 29/04/2019
 39045 00007378 50                      	push	ax
 39046 00007379 E84E91                  	call	Get_User_Stack		  ;AN000;;EO.
 39047 0000737C 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 39048                                  	;mov	[si+4],ax
 39049 00007380 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 39050 00007383 58                      	pop	ax			  ;AN000;;EO.
 39051 00007384 8904                    	mov	[si],ax
 39052                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 39053                                  	; 17/12/2022
 39054 00007386 EBA0                    	jmp	short ok_return
 39055                                  ;ok_return:				  ;AN000;
 39056                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 39057                                  
 39058                                  extexit2:				  ;AN000; ERROR RECOVERY
 39059 00007388 5B                      	POP	BX			  ;AN000;EO. close the handle
 39060 00007389 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 39061                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 39062 0000738A 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39063                                  					  ;AN000;EO. from create;smr;SS Override
 39064 00007390 750C                    	JNZ	short justopen		  ;AN000;EO.
 39065 00007392 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 39066 00007397 C514                    	LDS	DX,[SI]			  ;AN000;EO.
 39067 00007399 E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 39068 0000739C EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 39069                                  
 39070                                  justopen:				  ;AN000;
 39071 0000739E E881F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 39072                                  reserror:				  ;AN000;
 39073 000073A1 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 39074 000073A2 EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 39075                                  
 39076                                  ext_file_unfound:			  ;AN000;
 39077                                  	;mov	ax,2
 39078 000073A4 B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 39079 000073A7 EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 39080                                  ext_inval:				  ;AN000;
 39081                                  	;mov	ax,1
 39082 000073A9 B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 39083                                  lockoperr:	; 17/12/2022
 39084                                  extexit:
 39085 000073AC E9DE92                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 39086                                  
 39087                                  ;============================================================================
 39088                                  ; LOCK.ASM, MSDOS 6.0, 1991
 39089                                  ;============================================================================
 39090                                  ; 14/07/2018 - Retro DOS v3.0
 39091                                  ; 22/05/2019 - Retro DOS v4.0
 39092                                  
 39093                                  ;BREAK <$LockOper - Lock Calls>
 39094                                  ;----------------------------------------------------------------------------
 39095                                  ;
 39096                                  ;   Assembler usage:
 39097                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 39098                                  ;	    MOV     CX, OffsetHigh
 39099                                  ;	    MOV     DX, OffsetLow
 39100                                  ;	    MOV     SI, LengthHigh
 39101                                  ;	    MOV     DI, LengthLow
 39102                                  ;	    MOV     AH, LockOper
 39103                                  ;	    MOV     AL, Request
 39104                                  ;	    INT     21h
 39105                                  ;
 39106                                  ;   Error returns:
 39107                                  ;	    AX = error_invalid_handle
 39108                                  ;	       = error_invalid_function
 39109                                  ;	       = error_lock_violation
 39110                                  ;
 39111                                  ;   Assembler usage:
 39112                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 39113                                  ;
 39114                                  ;				    0? lock all
 39115                                  ;				    8? lock write
 39116                                  ;				    ?2 lock multiple
 39117                                  ;				    ?3 unlock multiple
 39118                                  ;				    ?4 lock/read
 39119                                  ;				    ?5 write/unlock
 39120                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 39121                                  ;	    MOV     BX, Handle
 39122                                  ;	    MOV     CX, count or size
 39123                                  ;	    LDS     DX, buffer
 39124                                  ;	    INT     21h
 39125                                  ;
 39126                                  ;   Error returns:
 39127                                  ;	    AX = error_invalid_handle
 39128                                  ;	       = error_invalid_function
 39129                                  ;	       = error_lock_violation
 39130                                  ;
 39131                                  ;----------------------------------------------------------------------------
 39132                                  
 39133                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39134                                  _$LockOper:
 39135 000073AF 3C01                    	CMP	AL,1
 39136 000073B1 770B                    	JA	short lock_bad_func
 39137                                  
 39138 000073B3 57                      	PUSH	DI			       ; Save LengthLow
 39139 000073B4 E8D0F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 39140 000073B7 731D                    	JNC	short lock_do 		       ; have valid handle
 39141 000073B9 5F                      	POP	DI			       ; Clean stack
 39142                                  	;mov	al,6
 39143 000073BA B006                    	mov	al,error_invalid_handle
 39144                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39145                                  ;lockoperr:
 39146                                  	;jmp	SYS_RET_ERR
 39147                                  	; 17/12/2022
 39148 000073BC EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 39149                                  
 39150                                  lock_bad_func:
 39151                                  	;mov	byte [ss:EXTERR_LOCUS],1
 39152 000073BE 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 39153                                  	;mov	al,1
 39154 000073C4 B001                    	mov	al,error_invalid_function
 39155                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39156                                  lockoperrj:
 39157                                  	;jmp	SYS_RET_ERR
 39158 000073C6 EBE4                    	jmp	short lockoperr
 39159                                  
 39160                                  	; 22/05/2019 - Retro DOS v4.0
 39161                                  
 39162                                  	; MSDOS 6.0 
 39163                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 39164                                  ; Dead code deleted, MD, 23 Mar 90
 39165                                  
 39166                                  ;lock_do:
 39167                                  ;	; MSDOS 3.3
 39168                                  ;	or	al,al
 39169                                  ;	pop	ax
 39170                                  ;	jz	short DOS_Lock
 39171                                  ;DOS_Unlock:
 39172                                  ;	;test	word [es:di+5],8000h
 39173                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39174                                  ;	JZ	short LOCAL_UNLOCK
 39175                                  ;	push    ax
 39176                                  ;	mov     ax,110Bh
 39177                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39178                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39179                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 39180                                  ;			; SFT DPB field -> DPB of drive containing file
 39181                                  ;			; Return: CF set error
 39182                                  ;	pop     bx
 39183                                  ;	jmp     short ValChk
 39184                                  ;
 39185                                  ;LOCAL_UNLOCK:
 39186                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39187                                  ;ValChk:
 39188                                  ;	JNC	short Lock_OK
 39189                                  ;lockerror:
 39190                                  ;	jmp	SYS_RET_ERR
 39191                                  ;Lock_OK:
 39192                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39193                                  ;	jmp	SYS_RET_OK
 39194                                  ;DOS_Lock:
 39195                                  ;	;test	word [es:di+5],8000h
 39196                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39197                                  ;	JZ	short LOCAL_LOCK
 39198                                  ;	;CallInstall NET_XLock,MultNET,10
 39199                                  ;	mov     ax, 110Ah
 39200                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39201                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39202                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 39203                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39204                                  ;			; Return: CF set error
 39205                                  ;	JMP	short ValChk
 39206                                  ;
 39207                                  ;LOCAL_LOCK:
 39208                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39209                                  ;	JMP	short ValChk
 39210                                  
 39211                                  ; 17/12/2022
 39212                                  LOCAL_UNLOCK:
 39213                                  	; MSDOS 3.3
 39214                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39215                                  	; MSDOS 6.0
 39216 000073C8 FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39217                                  ValChk:
 39218 000073CC 7302                    	JNC	short Lock_OK
 39219                                  lockerror:
 39220                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39221                                  	;;jmp	SYS_RET_ERR
 39222                                  	;jmp	short lockoperrj
 39223                                  	; 17/12/2022
 39224 000073CE EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 39225                                  Lock_OK:
 39226                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39227                                  	; 10/06/2019
 39228 000073D0 A1[0C06]                	mov	ax,[TEMP_VAR]
 39229 000073D3 E9AE92                  	jmp	SYS_RET_OK
 39230                                  
 39231                                  	; 22/05/2019
 39232                                  lock_do:
 39233                                  	; MSDOS 6.0
 39234 000073D6 89C3                    	MOV	BX,AX				; save AX
 39235 000073D8 BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 39236                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39237                                  	;;mov	[bp+0],dx
 39238                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 39239                                  	; 15/12/2022
 39240 000073DB 895600                  	mov	[bp],dx
 39241                                  	;mov	[bp+2],cx
 39242 000073DE 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 39243 000073E1 59                      	POP	CX				; get low length
 39244                                  	;mov	[bp+4],cx
 39245 000073E2 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 39246                                  	;mov	[bp+6],si
 39247 000073E5 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 39248 000073E8 B90100                  	MOV	CX,1				; one range
 39249                                  
 39250                                  ;	PUSH	CS				;
 39251                                  ;	POP	DS				; DS:DX points to
 39252                                  
 39253 000073EB 16                      	push	ss
 39254 000073EC 1F                      	pop	ds
 39255                                  
 39256 000073ED 89EA                    	MOV	DX,BP				; Lock_Buffer
 39257                                  	;test	al,1
 39258 000073EF A801                    	TEST	AL,UNLOCK_ALL			; function 1
 39259                                  	;JNZ	short DOS_Unlock		; yes
 39260                                  	;JMP	short DOS_Lock			; function 0
 39261                                  	; 17/12/2022
 39262                                  	; 10/06/2019
 39263 000073F1 740E                    	jz	short DOS_Lock
 39264                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39265                                  	;JNZ	short DOS_Unlock
 39266                                  	;JMP	short DOS_Lock
 39267                                  
 39268                                  DOS_Unlock:
 39269                                  	;;test	word [es:di+5],8000h
 39270                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39271 000073F3 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39272 000073F8 74CE                    	JZ	short LOCAL_UNLOCK
 39273                                  
 39274                                  lock_unlock: ; 22/05/2019
 39275                                  	
 39276                                  	;CallInstall Net_Xlock,MultNET,10
 39277                                  	
 39278                                  	; MSDOS 3.3
 39279                                  	;mov     ax,110Bh
 39280                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39281                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39282                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 39283                                  			; SFT DPB field -> DPB of drive containing file
 39284                                  			; Return: CF set error
 39285                                  	; MSDOS 6.0
 39286 000073FA B80A11                  	mov     ax,110Ah
 39287 000073FD CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39288                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39289                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39290                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39291                                  			; Return: CF set error
 39292                                  
 39293 000073FF EBCB                    	JMP	SHORT ValChk
 39294                                  
 39295                                  ; 17/12/2022
 39296                                  %if 0
 39297                                  LOCAL_UNLOCK:
 39298                                  	; MSDOS 3.3
 39299                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39300                                  	; MSDOS 6.0
 39301                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39302                                  ValChk:
 39303                                  	JNC	short Lock_OK
 39304                                  lockerror:
 39305                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39306                                  	;jmp	SYS_RET_ERR
 39307                                  	jmp	short lockoperrj
 39308                                  Lock_OK:
 39309                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39310                                  	; 10/06/2019
 39311                                  	mov	ax,[TEMP_VAR]
 39312                                  	jmp	SYS_RET_OK
 39313                                  %endif
 39314                                  
 39315                                  DOS_Lock:
 39316                                  	;;test	word [es:di+5],8000h
 39317                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39318 00007401 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39319 00007406 7407                    	JZ	short LOCAL_LOCK
 39320                                  
 39321                                  	;CallInstall NET_XLock,MultNET,10
 39322                                  
 39323 00007408 B80A11                  	mov     ax,110Ah
 39324 0000740B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39325                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39326                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39327                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39328                                  			; Return: CF set error
 39329                                  
 39330 0000740D EBBD                    	JMP	short ValChk
 39331                                  
 39332                                  LOCAL_LOCK:
 39333                                  	; MSDOS 3.3
 39334                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39335                                  	; MSDOS 6.0
 39336 0000740F FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39337                                  
 39338 00007413 EBB7                    	JMP	short ValChk
 39339                                  
 39340                                  ; 14/07/2018 - Retro DOS v3.0
 39341                                  ; LOCK_CHECK
 39342                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39343                                  
 39344                                  ;----------------------------------------------------------------------------
 39345                                  ; Inputs:
 39346                                  ;	Outputs of SETUP
 39347                                  ;	[USER_ID] Set
 39348                                  ;	[PROC_ID] Set
 39349                                  ; Function:
 39350                                  ;	Check for lock violations on local I/O
 39351                                  ;	Retries are attempted with sleeps in between
 39352                                  ; Outputs:
 39353                                  ;    Carry clear
 39354                                  ;	Operation is OK
 39355                                  ;    Carry set
 39356                                  ;	A lock violation detected
 39357                                  ; Outputs of SETUP preserved
 39358                                  ;----------------------------------------------------------------------------
 39359                                  
 39360                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39361                                  	; 22/05/2019 - Retro DOS v4.0
 39362                                  LOCK_CHECK:
 39363 00007415 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 39364                                  LockRetry:
 39365 00007419 53                      	push	bx		; save regs
 39366 0000741A 50                      	push	ax ; MSDOS 6.0
 39367                                  
 39368                                  	;MSDOS 3.3
 39369                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 39370                                  	;MSDOS 6.0
 39371 0000741B FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 39372                                  
 39373 0000741F 58                      	pop	ax ; MSDOS 6.0
 39374 00007420 5B                      	pop	bx		; restrore regs
 39375 00007421 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 39376                                  LockN:
 39377 00007423 E8589E                  	call	Idle		; wait a while
 39378 00007426 4B                      	DEC	BX		; remember a retry
 39379 00007427 75F0                    	JNZ	short LockRetry	; more retries left...
 39380 00007429 F9                      	STC
 39381                                  lc_ret_label:
 39382 0000742A C3                      	retn
 39383                                  
 39384                                  ; 14/07/2018 - Retro DOS v3.0
 39385                                  ; LOCK_VIOLATION
 39386                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39387                                  
 39388                                  ;----------------------------------------------------------------------------
 39389                                  ; Inputs:
 39390                                  ;	[THISDPB] set
 39391                                  ;	[READOP] indicates whether error on read or write
 39392                                  ; Function:
 39393                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 39394                                  ; Outputs:
 39395                                  ;	Carry set if user says FAIL, causes error_lock_violation
 39396                                  ;	Carry clear if user wants a retry
 39397                                  ;
 39398                                  ; DS, ES, DI, CX preserved, others destroyed
 39399                                  ;----------------------------------------------------------------------------
 39400                                  
 39401                                  LOCK_VIOLATION:
 39402 0000742B 1E                      	PUSH	DS
 39403 0000742C 06                      	PUSH	ES
 39404 0000742D 57                      	PUSH	DI
 39405 0000742E 51                      	PUSH	CX
 39406                                  	;mov	ax,21h
 39407 0000742F B82100                  	MOV	AX,error_lock_violation
 39408                                  	;mov	byte [ALLOWED],18h
 39409 00007432 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39410 00007437 C42E[8A05]              	LES	BP,[THISDPB]
 39411 0000743B BF0100                  	MOV	DI,1		; Fake some registers
 39412 0000743E 89F9                    	MOV	CX,DI
 39413                                  	;mov	dx,[es:bp+11]
 39414 00007440 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 39415 00007444 E8BCDF                  	call	HARDERR
 39416 00007447 59                      	POP	CX
 39417 00007448 5F                      	POP	DI
 39418 00007449 07                      	POP	ES
 39419 0000744A 1F                      	POP	DS
 39420 0000744B 3C01                    	CMP	AL,1
 39421 0000744D 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 39422 0000744F F9                      	STC
 39423 00007450 C3                      	retn
 39424                                  
 39425                                  ; 14/07/2018 - Retro DOS v3.0
 39426                                  
 39427                                  ;----------------------------------------------------------------------------
 39428                                  
 39429                                  ;	do a retz to return error
 39430                                  
 39431                                  	; 22/05/2019 - Retro DOS v4.0
 39432                                  CheckShare:
 39433                                  	; MSDOS 3.3
 39434                                  	;cmp	byte [cs:fShare],0
 39435                                  	;retn
 39436                                  
 39437                                  	; MSDOS 6.0
 39438 00007451 1E                      	push	ds			;smr;
 39439                                  	;getdseg <ds>			; ds -> dosdata
 39440 00007452 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 39441 00007457 803E[0303]00            	cmp	byte [fShare],0
 39442 0000745C 1F                      	pop	ds			;smr;
 39443 0000745D C3                      	retn
 39444                                  	
 39445                                  ;============================================================================
 39446                                  ; SHARE.ASM, MSDOS 6.0, 1991
 39447                                  ;============================================================================
 39448                                  ; 14/07/2018 - Retro DOS v3.0
 39449                                  ; 22/05/2019 - Retro DOS v4.0
 39450                                  
 39451                                  ; SHARE_CHECK
 39452                                  ;----------------------------------------------------------------------------
 39453                                  ; Inputs:
 39454                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 39455                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 39456                                  ;       [WFP_START] has full path of name
 39457                                  ;       [USER_ID] Set
 39458                                  ;       [PROC_ID] Set
 39459                                  ; Function:
 39460                                  ;       Check for sharing violations on local file/device access
 39461                                  ; Outputs:
 39462                                  ;    Carry clear
 39463                                  ;       Sharing approved
 39464                                  ;    Carry set
 39465                                  ;       A sharing violation detected
 39466                                  ;           AX is error code
 39467                                  ; USES    ALL but DS
 39468                                  ;----------------------------------------------------------------------------
 39469                                  
 39470                                  	; 22/05/2019 - Retro DOS v4.0
 39471                                  SHARE_CHECK:
 39472                                  	; 26/07/2019
 39473 0000745E FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 39474                                  shchk_retn:
 39475 00007462 C3                      	retn
 39476                                  
 39477                                  ; SHARE_VIOLATION
 39478                                  ;----------------------------------------------------------------------------
 39479                                  ; Inputs:
 39480                                  ;       [THISDPB] Set
 39481                                  ;       AX has error code
 39482                                  ; Function:
 39483                                  ;       Handle Sharing errors
 39484                                  ; Outputs:
 39485                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 39486                                  ;       Carry clear if user wants a retry
 39487                                  ;
 39488                                  ; DS, ES, DI preserved, others destroyed
 39489                                  ;----------------------------------------------------------------------------
 39490                                  
 39491                                  SHARE_VIOLATION:
 39492 00007463 1E                      	PUSH    DS
 39493 00007464 06                      	PUSH	ES
 39494 00007465 57                      	PUSH    DI
 39495 00007466 C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 39496                                  	;mov	byte [ALLOWED],18h
 39497 0000746B C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39498 00007470 C42E[8A05]              	LES     BP,[THISDPB]
 39499 00007474 BF0100                  	MOV     DI,1			; Fake some registers
 39500 00007477 89F9                    	MOV     CX,DI
 39501                                  	;mov	dx,[es:bp+17]
 39502 00007479 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 39503 0000747D E883DF                  	call	HARDERR
 39504 00007480 5F                      	POP     DI
 39505 00007481 07                      	POP	ES
 39506 00007482 1F                      	POP     DS
 39507 00007483 3C01                    	CMP     AL,1
 39508 00007485 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 39509 00007487 F9                      	STC
 39510 00007488 C3                      	retn
 39511                                  
 39512                                  ;----------------------------------------------------------------------------
 39513                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 39514                                  ;       NOT perform a close, it merely asserts that the sharing information
 39515                                  ;       for the SFT/UID/PID may be safely released.
 39516                                  ;
 39517                                  ;   Inputs:     ES:DI points to an SFT
 39518                                  ;   Outputs:    None
 39519                                  ;   Registers modified: all except DS,ES,DI
 39520                                  ;----------------------------------------------------------------------------
 39521                                  
 39522                                  ShareEnd:
 39523                                  	; 26/07/2019
 39524 00007489 FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 39525 0000748D C3                      	retn
 39526                                  
 39527                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 39528                                  ;----------------------------------------------------------------------------
 39529                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 39530                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 39531                                  ;
 39532                                  ;   Inputs:     ThisSFT points to the SFT
 39533                                  ;               WFP_Start points to the WFP
 39534                                  ;   Outputs:    Carry clear => successful entry
 39535                                  ;               Carry set => failed system call
 39536                                  ;   Registers modified: all
 39537                                  ;----------------------------------------------------------------------------
 39538                                  
 39539                                  ShareEnter:
 39540 0000748E 51                      	push	cx
 39541                                  retry:
 39542 0000748F 8B0E[1A00]              	mov     cx,[RetryCount]
 39543                                  attempt:
 39544 00007493 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 39545 00007497 31C0                    	XOR     AX,AX
 39546                                   	;mov	[es:di+51],axfff
 39547 00007499 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 39548 0000749D 51                      	push	cx
 39549 0000749E E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 39550 000074A1 59                      	pop	cx
 39551 000074A2 730A                    	jnc	short done		; success, let the user see this
 39552 000074A4 E8D79D                  	call	Idle                    ; wait a while
 39553 000074A7 E2EA                    	loop    attempt                 ; go back for another attempt
 39554 000074A9 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 39555 000074AC 73E1                    	jnc	short retry		; user said to retry, go do it
 39556                                  done:
 39557 000074AE 59                      	pop	cx
 39558 000074AF C3                      	retn
 39559                                  
 39560                                  ;============================================================================
 39561                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 39562                                  ;============================================================================
 39563                                  ; 29/04/2019 - Retro DOS 4.0
 39564                                  
 39565                                  ;** EXEPATCH.ASM 
 39566                                  ;----------------------------------------------------------------------------
 39567                                  ;	Contains the foll:
 39568                                  ;
 39569                                  ;		- code to find and overlay buggy unpack code
 39570                                  ;		- new code to be overlayed on buggy unpack code 
 39571                                  ;		- old code sequence to identify buggy unpack code
 39572                                  ;
 39573                                  ;	Revision history:
 39574                                  ;
 39575                                  ;		Created: 5/14/90
 39576                                  ;----------------------------------------------------------------------------
 39577                                  
 39578                                  ;----------------------------------------------------------------------------
 39579                                  ;
 39580                                  ; M020 : Fix for rational bug - for details see routine header
 39581                                  ; M028 : 4b04 implementation
 39582                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 39583                                  ; M032 : set turnoff bit only if DOS in HMA.
 39584                                  ; M033 : if IP < 2 then not exepacked.
 39585                                  ; M046 : support for a 4th version of exepacked files.
 39586                                  ; M068 : support for copy protected apps.
 39587                                  ; M071 : use A20OFF_COUNT of 10.
 39588                                  ;
 39589                                  ;----------------------------------------------------------------------------
 39590                                  
 39591                                  PATCH1_COM_OFFSET	EQU	06CH
 39592                                  PATCH1_OFFSET		EQU	028H
 39593                                  PATCH1_CHKSUM		EQU	0EF4EH
 39594                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 39595                                  
 39596                                  PATCH2_COM_OFFSET	EQU	076H
 39597                                  PATCH2_OFFSET		EQU	032H
 39598                                  
 39599                                  	; The strings that start at offset 076h have two possible 
 39600                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 39601                                  
 39602                                  PATCH2_CHKSUM		EQU	78B2H
 39603                                  CHKSUM2_LEN		EQU	119H/2
 39604                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 39605                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 39606                                  
 39607                                  PATCH3_COM_OFFSET	EQU	074H
 39608                                  PATCH3_OFFSET		EQU	032H
 39609                                  PATCH3_CHKSUM		EQU	4EDEH
 39610                                  CHKSUM3_LEN		EQU	117H/2
 39611                                  
 39612                                  ;**	Data structure passed for ExecReady call
 39613                                  ;
 39614                                  ;struc ERStruc
 39615                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 39616                                  ; .ER_Flags:	resw	1
 39617                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 39618                                  ; .ER_PSP:	resw	1	; PSP of the program
 39619                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 39620                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 39621                                  ; .size:
 39622                                  ;endstruc
 39623                                  
 39624                                  ;DOSCODE SEGMENT
 39625                                  
 39626                                  	; 22/05/2019 - Retro DOS v4.0
 39627                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 39628                                  
 39629                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39630                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 39631                                  
 39632                                  ; M028 - BEGIN
 39633                                  
 39634                                  ;--------------------------------------------------------------------------
 39635                                  ;
 39636                                  ;	Procedure Name		: ExecReady
 39637                                  ;
 39638                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 39639                                  ;
 39640                                  ;--------------------------------------------------------------------------
 39641                                  
 39642                                  ExecReady:
 39643 000074B0 89D6                    	mov	si,dx			; move the pointer into a friendly one
 39644                                  	;;test	word [si+2],1
 39645                                  	; 17/12/2022
 39646 000074B2 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39647                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 39648 000074B6 7413                    	jz	short er_setver		; only setver for .COM files
 39649                                  
 39650                                  	;mov	ax,[si+8]
 39651 000074B8 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 39652 000074BB 83C010                  	add	ax,10h
 39653 000074BE 8EC0                    	mov	es,ax
 39654                                  
 39655                                  	;mov	cx,[si+10]
 39656 000074C0 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 39657                                  	;mov	cx,[si+12]
 39658 000074C3 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 39659                                  
 39660 000074C6 36FF16[1212]            	call	[ss:FixExePatch]
 39661                                  	
 39662                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39663                                  	;call	[ss:Rational386PatchPtr]
 39664                                  
 39665                                  er_setver:
 39666                                  	;;test	word [si+2],2		; Q: is this an overlay
 39667                                  	; 17/12/2022
 39668 000074CB F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 39669                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 39670 000074CF 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 39671                                  					; N: set up lie version first
 39672 000074D1 1E                      	push	ds
 39673 000074D2 56                      	push	si
 39674                                  	;lds	si,[si+4]
 39675 000074D3 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 39676 000074D6 E870ED                  	call	Scan_Execname1
 39677 000074D9 E881ED                  	call	Scan_Special_Entries
 39678 000074DC 5E                      	pop	si
 39679 000074DD 1F                      	pop	ds
 39680                                  	;mov	es,[si+8]
 39681 000074DE 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 39682 000074E1 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 39683 000074E5 26A34000                	mov	[es:PDB.Version],ax
 39684                                  
 39685                                  er_chkdoshi:
 39686 000074E9 36803E[1112]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 39687 000074EF 741F                    	je	short er_done		; M032: N: done
 39688                                  
 39689                                  					; M068 - Start
 39690                                  	;mov	ax,[si+8]
 39691 000074F1 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 39692                                  
 39693                                  	;or	byte [ss:DOS_FLAG],4
 39694 000074F4 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 39695                                  					; ah = 25 & ah= 49. See dossym.inc 
 39696                                  					; under TAG M003 & M009 for 
 39697                                  					; explanation
 39698                                  	;;test	word [si+2],1
 39699                                  	; 17/12/2022
 39700 000074FA F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39701                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 39702 000074FE 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 39703                                  					;    a20off_psp and ret
 39704 00007500 1E                         	push	ds
 39705 00007501 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 39706 00007503 E85D03                  	call	IsCopyProt		; check if copy protected
 39707 00007506 1F                      	pop	ds
 39708                                  
 39709                                  er_setA20:
 39710                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 39711                                  	; is non-zero at this point it indicates that the A20 is to be 
 39712                                  	; turned off for that many int 21 calls made by the app. In 
 39713                                  	; addition the A20 has to be turned off when we exit from this 
 39714                                  	; call. Hence the inc.
 39715                                  
 39716 00007507 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 39717 0000750C 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 39718                                  					; turned OFF.
 39719                                  er_done:				; M068 - End
 39720 00007510 31C0                    	xor	ax,ax
 39721 00007512 C3                      	retn
 39722                                  
 39723                                  ; M028 - END
 39724                                  
 39725                                  
 39726                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39727                                  %if 0
 39728                                  
 39729                                  ;----------------------------------------------------------------------------
 39730                                  ;
 39731                                  ; procedure : Rational386Patch
 39732                                  ;
 39733                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 39734                                  ; 386 registers (usually just the high word of 32 bit registers) during
 39735                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 39736                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 39737                                  ;
 39738                                  ; This routine applies patches to the Rational DOS Extender to work around
 39739                                  ; most of the register trashing bugs.
 39740                                  ;
 39741                                  ; Note that there are additional register trashing bugs not fixed by these
 39742                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 39743                                  ; may be modified on interrupts.
 39744                                  ;
 39745                                  ; There are two different Rational DOS Extender patchs in this module.
 39746                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 39747                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 39748                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 39749                                  ; or not.
 39750                                  ;
 39751                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 39752                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 39753                                  ; running in the HMA.
 39754                                  ;
 39755                                  ; This patch detection and replacement is based on an example supplied by
 39756                                  ; Ben Williams at Rational.
 39757                                  ;
 39758                                  ;----------------------------------------------------------------------------
 39759                                  
 39760                                  ; 22/05/2019 - Retro DOS v4.0
 39761                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 39762                                  
 39763                                  ;----------------------------------------------------------------------------
 39764                                  ;
 39765                                  ; INPUT : ES = segment where program got loaded
 39766                                  ;
 39767                                  ;----------------------------------------------------------------------------
 39768                                  
 39769                                  rpFind1:
 39770                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 39771                                  
 39772                                  rpFind1Len equ	$ - rpFind1
 39773                                  
 39774                                  ;	cli
 39775                                  ;	in	al, 21h
 39776                                  ;	pusha
 39777                                  ;	xor	ax, ax
 39778                                  ;	out	43h, al
 39779                                  ;	mov	dx, ...
 39780                                  
 39781                                  rpFind1a:
 39782                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 39783                                  
 39784                                  rpFind1aLen equ	$ - rpFind1a
 39785                                  
 39786                                  ;	mov	al, 0Eh
 39787                                  ;	out	37h, al
 39788                                  ;	xor	ax, ax
 39789                                  ;	out	0F2h, al
 39790                                  
 39791                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 39792                                  
 39793                                  rpFind2:
 39794                                  	db	0Fh, 20h, 0C0h
 39795                                  
 39796                                  rpFind2Len equ	$ - rpFind2
 39797                                  
 39798                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 39799                                  
 39800                                  rpFind3:
 39801                                  	db	0Fh, 22h, 0C0h, 0EAh
 39802                                  
 39803                                  rpFind3Len equ	$ - rpFind3
 39804                                  
 39805                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 39806                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 39807                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 39808                                  
 39809                                  ; note, there is no rpRepl1 string
 39810                                  
 39811                                  rpRepl2:
 39812                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 39813                                  
 39814                                  rpRepl2Len equ	$ - rpRepl2
 39815                                  
 39816                                  ;	push	eax
 39817                                  ;	push	cx
 39818                                  ;	mov	eax, cr0
 39819                                  
 39820                                  rpRepl3:
 39821                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 39822                                  
 39823                                  rpRepl3Len equ	$ - rpRepl3
 39824                                  
 39825                                  ;	mov	ss, bx
 39826                                  ;	pop	cx
 39827                                  ;	pop	eax
 39828                                  
 39829                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 39830                                  
 39831                                  rpFind4:
 39832                                  	db	93h, 58h, 8Bh, 0CCh
 39833                                  
 39834                                  rpFind4Len equ	$ - rpFind4
 39835                                  
 39836                                  ;	xchg	bx, ax
 39837                                  ;	pop	ax
 39838                                  ;	mov	cx, sp
 39839                                  
 39840                                  rpFind5:
 39841                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 39842                                  
 39843                                  rpFind5Len equ	$ - rpFind5
 39844                                  
 39845                                  ;	mov	ax, DE0Ch
 39846                                  ;	int	67h
 39847                                  ;	mov	sp, cx
 39848                                  ;	jmp	bx
 39849                                  
 39850                                  rpRepl4:
 39851                                  	db	93h, 58h, 8Bh, 0CCh
 39852                                  	db	02Eh, 066h, 0A3h
 39853                                  
 39854                                  rpRepl4o1Len equ $ - rpRepl4
 39855                                  
 39856                                  	db	00h, 00h
 39857                                  	db	02Eh, 066h, 89h, 36h
 39858                                  
 39859                                  rpRepl4o2Len equ $ - rpRepl4
 39860                                  
 39861                                  	db	00h, 00h
 39862                                  
 39863                                  rpRepl4Len equ	$ - rpRepl4
 39864                                  
 39865                                  ;	xchg	bx, ax
 39866                                  ;	pop	ax
 39867                                  ;	mov	cx, sp
 39868                                  ;	mov	dword ptr cs:[xxxx], eax
 39869                                  ;	mov	dword ptr cs:[xxxx], esi
 39870                                  
 39871                                  rpRepl5:
 39872                                  	db	8Bh, 0E1h
 39873                                  	db	2Eh, 66h, 0A1h
 39874                                  
 39875                                  rpRepl5o1Len equ $ - rpRepl5
 39876                                  
 39877                                  	db	00h, 00h
 39878                                  	db	2Eh, 66h, 8Bh, 36h
 39879                                  
 39880                                  rpRepl5o2Len equ $ - rpRepl5
 39881                                  
 39882                                  	db	00h, 00h
 39883                                  	db	0FFh, 0E3h
 39884                                  
 39885                                  rpRepl5Len equ	$ - rpRepl5
 39886                                  
 39887                                  ;	mov	sp, cx
 39888                                  ;	mov	eax, dword ptr cs:[xxxx]
 39889                                  ;	mov	esi, dword ptr cs:[xxxx]
 39890                                  ;	jmp	bx
 39891                                  
 39892                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 39893                                  
 39894                                  rpFind6:
 39895                                  	db	0FAh, 52h, 51h
 39896                                  
 39897                                  rpFind6Len equ	$ - rpFind6
 39898                                  
 39899                                  ;	cli
 39900                                  ;	push	dx
 39901                                  ;	push	cx
 39902                                  
 39903                                  rpFind7a:
 39904                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 39905                                  
 39906                                  rpFind7aLen equ	$ - rpFind7a
 39907                                  
 39908                                  ;	mov	ax, 0DE0Ch
 39909                                  ;	call	fword ptr es:[xxxx]
 39910                                  
 39911                                  rpFind7b:
 39912                                  	db	59h, 5Ah, 5Bh
 39913                                  
 39914                                  rpFind7bLen equ	$ - rpFind7b
 39915                                  
 39916                                  ;	pop	cx
 39917                                  ;	pop	dx
 39918                                  ;	pop	bx
 39919                                  
 39920                                  rpRepl6 :
 39921                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 39922                                  
 39923                                  rpRepl6Len equ	$ - rpRepl6
 39924                                  
 39925                                  ;	cli
 39926                                  ;	push	eax
 39927                                  ;	push	ebx
 39928                                  ;	push	ecx
 39929                                  ;	push	edx
 39930                                  
 39931                                  rpRepl7:
 39932                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 39933                                  
 39934                                  rpRepl7Len equ	$ - rpRepl7
 39935                                  
 39936                                  ;	pop	edx
 39937                                  ;	pop	ecx
 39938                                  ;	pop	ebx
 39939                                  ;	pop	eax
 39940                                  ;	pop	bx
 39941                                  
 39942                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 39943                                  
 39944                                  rpFind8:
 39945                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 39946                                  
 39947                                  rpFind8Len equ	$ - rpFind8
 39948                                  
 39949                                  ;	pusha
 39950                                  ;	push	es
 39951                                  ;	push	ds
 39952                                  ;	mov	ax, dgroup	;jump back to here from replace8
 39953                                  ;	mov	ds, ax
 39954                                  
 39955                                  rpFind9 :
 39956                                  	db	1Fh, 07h, 61h
 39957                                  
 39958                                  rpFind9Len equ	$ - rpFind9
 39959                                  
 39960                                  ;	pop	ds
 39961                                  ;	pop	es
 39962                                  ;	popa
 39963                                  
 39964                                  rpRepl8:
 39965                                   	db	66h, 60h, 06h, 1Eh
 39966                                  
 39967                                  rpRepl8Len equ	$ - rpRepl8
 39968                                  
 39969                                  ;	pushad
 39970                                  ;	push	es
 39971                                  ;	push	ds
 39972                                  
 39973                                  rpRepl9:
 39974                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 39975                                  
 39976                                  rpRepl9Len equ	$ - rpRepl9
 39977                                  
 39978                                  ;	pop	ds
 39979                                  ;	pop	es
 39980                                  ;	popad
 39981                                  ;	retn			;no need to jmp back to main-line
 39982                                  
 39983                                  ;----------------------------------------------------------------------------
 39984                                  
 39985                                  struc SearchPair
 39986                                   .sp_off1: resw 1	; offset of 1st search string
 39987                                   .sp_len1: resw 1	; length of 1st search string
 39988                                   .sp_off2: resw 1	; 2nd string
 39989                                   .sp_len2: resw 1	; 2nd string
 39990                                   .sp_diff: resw 1	; max difference between offsets
 39991                                   .size:
 39992                                  endstruc
 39993                                  
 39994                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 39995                                  
 39996                                  rpBug1Strs:
 39997                                  	dw	rpFind2
 39998                                  	dw	rpFind2Len ; 3
 39999                                  	dw	rpFind3
 40000                                  	dw	rpFind3Len ; 4
 40001                                  	dw	20h
 40002                                  
 40003                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 40004                                  
 40005                                  rpBug2Strs:
 40006                                  	dw	rpFind4
 40007                                  	dw	rpFind4Len ; 4
 40008                                  	dw	rpFind5
 40009                                  	dw	rpFind5Len ; 9
 40010                                  	dw	80h
 40011                                  
 40012                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 40013                                  
 40014                                  rpBug3Strs:
 40015                                  	dw	rpFind6
 40016                                  	dw	rpFind6Len ; 3
 40017                                  	dw	rpFind7a
 40018                                  	dw	rpFind7aLen ; 7
 40019                                  	dw	80h
 40020                                  
 40021                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 40022                                  
 40023                                  rpBug4Strs:
 40024                                  	dw	rpFind8
 40025                                  	dw	4
 40026                                  	dw	rpFind9
 40027                                  	dw	rpFind9Len ; 3
 40028                                  	dw	80h
 40029                                  
 40030                                  ;----------------------------------------------------------------------------
 40031                                  
 40032                                  struc StackVars
 40033                                   .sv_wVersion:	resw 1		; Rational extender version #
 40034                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 40035                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 40036                                   .size:
 40037                                  endstruc
 40038                                  
 40039                                  ;----------------------------------------------------------------------------
 40040                                  
 40041                                  ; 22/05/2019 - Retro DOS v4.0
 40042                                  
 40043                                  Rational386Patch:
 40044                                  	; Do a few quick checks to see if this looks like a Rational
 40045                                  	; Extended application. Hopefully this will quickly weed out
 40046                                  	; most non Rational apps.
 40047                                  
 40048                                  	cmp	word [es:0],395		; version number goes here - versions
 40049                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 40050                                  
 40051                                  	cmp	word [es:0Ch],20h	; always has this value here
 40052                                  	jne	short rp3QuickOut
 40053                                  
 40054                                  	push	ax
 40055                                  
 40056                                  	mov	ax,18h 			; extender has 18h at
 40057                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 40058                                  	jne	short rp3QO_ax
 40059                                  	cmp	[es:28],ax
 40060                                  	jne	short rp3QO_ax
 40061                                  	cmp	[es:36],ax
 40062                                  	je	short rp3Maybe
 40063                                  rp3QO_ax:
 40064                                  	pop	ax
 40065                                  rp3QuickOut:
 40066                                  	retn
 40067                                  
 40068                                  ; It might be the rational extender, do more extensive checking
 40069                                  
 40070                                  rp3Maybe:
 40071                                  	cld
 40072                                  	push	bx			; note ax pushed above
 40073                                  	push	cx
 40074                                  	push	dx
 40075                                  	push	si
 40076                                  	push	di
 40077                                  	push	es
 40078                                  	push	ds			; we use all of them
 40079                                  	push	bp
 40080                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 40081                                  	mov	bp,sp
 40082                                  
 40083                                  	push	cs
 40084                                  	pop	ds
 40085                                  
 40086                                  	mov	ax,[es:0]		; save version #
 40087                                  	;mov	[bp+StackVars.sv_wVersion],ax
 40088                                  	mov	[bp],ax	
 40089                                  					; check that binary version # matches
 40090                                  	call	VerifyVersion		;   ascii string
 40091                                  	jne	short rp3Exit_j
 40092                                  
 40093                                  ; Looks like this is it, find where to put the patch code.  The
 40094                                  ; patch will be located on top of Rational code specific to 80286
 40095                                  ; processors, so these patchs MUST NOT be applied if running on
 40096                                  ; an 80286 system.
 40097                                  
 40098                                  	; Rational says the code to patch will never be beyond offset 46xxh
 40099                                  
 40100                                  	mov	cx,4500h		; force search len to 4700h (searches
 40101                                  	;mov	[bp+2],cx
 40102                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 40103                                  
 40104                                  	mov	es,[es:20h]		; es=code segment
 40105                                  
 40106                                  	mov	si,rpFind1		; string to find
 40107                                  	mov	dx,rpFind1Len ; 10	; length to match
 40108                                  	call	ScanCodeSeq		; look for code seq
 40109                                  	jz	short rpGotPatch
 40110                                  
 40111                                  ; According to Rational, some very old versions of the extender may not
 40112                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 40113                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 40114                                  
 40115                                  	mov	si,rpFind1a
 40116                                  	mov	dx,rpFind1aLen  ;8
 40117                                  	call	ScanCodeSeq
 40118                                  	jz	short rpGotPatch
 40119                                  
 40120                                  rp3Exit_j:
 40121                                  	jmp	rp3Exit
 40122                                  
 40123                                  ; Found the location to write patch code! DI = offset in code seg.
 40124                                  
 40125                                  rpGotPatch:
 40126                                  	;mov	[bp+4],di
 40127                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 40128                                  
 40129                                  ;----------------------------------------------------------------------------
 40130                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40131                                  
 40132                                  	;cmp	word [bp+0],381
 40133                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 40134                                  	cmp	word [bp],381
 40135                                  	jae	short rpBug2			;   < 3.81
 40136                                  
 40137                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 40138                                  	call	FindBadCode
 40139                                  	jc	short rpBug2
 40140                                  
 40141                                  ; si = rpFind2 offset, di = rpFind3 offset
 40142                                  
 40143                                  	push	di
 40144                                  	mov	di,si				; rpFind2 offset
 40145                                  	mov	dx,rpFind2Len ; 3
 40146                                  
 40147                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 40148                                  	jne	short rp_no_cx
 40149                                  
 40150                                  	dec	di				;   yes, gobble up push cx too
 40151                                  	inc	dx
 40152                                  rp_no_cx:
 40153                                  	mov	si,rpRepl2			; patch out find2 sequence
 40154                                  	mov	cx,rpRepl2Len  ; 6
 40155                                  	call	GenPatch
 40156                                  
 40157                                  	pop	di				; rpFind3 offset
 40158                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 40159                                  	jne	short rp_no_cx2
 40160                                  
 40161                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 40162                                  rp_no_cx2:
 40163                                  	;mov	ax,[bp+4]
 40164                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 40165                                  	;mov	[es:di+4],ax
 40166                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 40167                                  
 40168                                  	push	di				; save find3 offset
 40169                                  	mov	si,rpRepl3			; copy repl3 to patch area
 40170                                  	mov	cx,rpRepl3Len ; 5
 40171                                  	call	CopyPatch
 40172                                  
 40173                                  	pop	bx				; find3 offset
 40174                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 40175                                  	call	GenJump 			; jmp back from patch area
 40176                                  	;mov	[bp+4],di
 40177                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 40178                                  						;   area pointer
 40179                                  
 40180                                  ;----------------------------------------------------------------------------
 40181                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 40182                                  
 40183                                  rpBug2:
 40184                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 40185                                  	call	FindBadCode
 40186                                  	jc	short rpBug3
 40187                                  
 40188                                  ; si = rpFind4 offset, di = rpFind5 offset
 40189                                  
 40190                                  	;push	word [bp+4]
 40191                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 40192                                  						;   (where repl4 goes)
 40193                                  	push	di				; save find5 offset
 40194                                  
 40195                                  	mov	di,si
 40196                                  	mov	dx,rpFind4Len ; 4
 40197                                  	mov	si,rpRepl4
 40198                                  	mov	cx,rpRepl4Len ; 15
 40199                                  	call	GenPatch			; patch out find4 code
 40200                                  
 40201                                  	pop	di				; find5 offset
 40202                                  	add	di,5				; keep 5 bytes of find5 code
 40203                                  	;mov	bx,[bp+4]
 40204                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 40205                                  	push	bx				; save repl5 location
 40206                                  	call	GenJump
 40207                                  
 40208                                  	mov	si,rpRepl5			; copy repl5 code to patch
 40209                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 40210                                  	call	CopyPatch			;   so no need to jmp back to
 40211                                  						;   main-line code
 40212                                  
 40213                                  ; patches have been made, now update the patch code to store/load dwords just
 40214                                  ; after the code in the patch area
 40215                                  
 40216                                  	pop	di				; repl5 location
 40217                                  	pop	si				; repl4 location
 40218                                  
 40219                                  	;mov	ax,[bp+4]
 40220                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 40221                                  
 40222                                  	;mov	[es:si+7],ax
 40223                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 40224                                  	;mov	[es:di+5],ax
 40225                                  	mov	[es:di+rpRepl5o1Len],ax
 40226                                  	add	ax,4
 40227                                  	;mov	[es:si+0Dh],ax
 40228                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 40229                                  	;mov	[es:di+0Bh],ax
 40230                                  	mov	[es:di+rpRepl5o2Len],ax
 40231                                  
 40232                                  	;add	word [bp+4],8
 40233                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 40234                                  						; patch area
 40235                                  
 40236                                  ;----------------------------------------------------------------------------
 40237                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 40238                                  
 40239                                  rpBug3:
 40240                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 40241                                  	call	FindBadCode
 40242                                  	jc	short rpBug4
 40243                                  
 40244                                  	;add	di,9
 40245                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 40246                                  	push	si				;   code and locate find7b
 40247                                  	mov	si,rpFind7b			;   sequence
 40248                                  	mov	dx,rpFind7bLen ; 3
 40249                                  	call	ScanCodeSeq_di
 40250                                  	pop	si
 40251                                  	jnz	short rpBug4
 40252                                  
 40253                                  	push	di				; save find7b code offset
 40254                                  
 40255                                  	mov	di,si
 40256                                  	mov	dx,rpFind6Len ; 3
 40257                                  	mov	si,rpRepl6
 40258                                  	mov	cx,rpRepl6Len ; 9
 40259                                  	call	GenPatch			; patch out find6 code
 40260                                  
 40261                                  	pop	di
 40262                                  	mov	dx,rpFind7bLen ; 3
 40263                                  	mov	si,rpRepl7
 40264                                  	mov	cx,rpRepl7Len ; 9
 40265                                  	call	GenPatch			; patch out find7b code
 40266                                  
 40267                                  ;----------------------------------------------------------------------------
 40268                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 40269                                  
 40270                                  rpBug4:
 40271                                  	;cmp	word [bp+0],360
 40272                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 40273                                  	cmp	word [bp],360
 40274                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 40275                                  
 40276                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 40277                                  	call	FindBadCode
 40278                                  	jc	short rp3Exit
 40279                                  
 40280                                  	push	di				; save find9 code offset
 40281                                  
 40282                                  	mov	di,si
 40283                                  	mov	dx,3
 40284                                  	mov	si,rpRepl8
 40285                                  	mov	cx,rpRepl8Len ; 4
 40286                                  	call	GenPatch			; patch out find8 code
 40287                                  
 40288                                  	pop	di				; find9 offset
 40289                                  	;mov	bx,[bp+4]
 40290                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 40291                                  	call	GenJump 			;   patch area
 40292                                  
 40293                                  	mov	si,rpRepl9			; copy replacement code to
 40294                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 40295                                  	call	CopyPatch			;   so no jmp back to main-line
 40296                                  
 40297                                  rp3Exit:
 40298                                  	add	sp,StackVars.size
 40299                                  	pop	bp
 40300                                  	pop	ds
 40301                                  	pop	es
 40302                                  	pop	di
 40303                                  	pop	si
 40304                                  	pop	dx
 40305                                  	pop	cx
 40306                                  	pop	bx
 40307                                  	pop	ax
 40308                                  	retn
 40309                                  
 40310                                  ;----------------------------------------------------------------------------
 40311                                  ;
 40312                                  ; FindBadCode
 40313                                  ;
 40314                                  ; Searches Rational code segment looking for a pair of find strings (all
 40315                                  ; patches have at least two find strings).
 40316                                  ;
 40317                                  ; Entry:
 40318                                  ;	ES    = code segment to search
 40319                                  ;	DS:BX = search pair structure for this search
 40320                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 40321                                  ;
 40322                                  ; Exit:
 40323                                  ;	CY flag clear if both strings found, and
 40324                                  ;	SI    = offset in ES of 1st string
 40325                                  ;	DI    = offset in ES of 2nd string
 40326                                  ;	CY set if either string not found, or strings too far apart
 40327                                  ;
 40328                                  ; Used:
 40329                                  ;	CX
 40330                                  ;
 40331                                  ;----------------------------------------------------------------------------
 40332                                  
 40333                                  ;struc SearchPair
 40334                                  ; .sp_off1: resw 1	; offset of 1st search string
 40335                                  ; .sp_len1: resw 1	; length of 1st search string
 40336                                  ; .sp_off2: resw 1	; 2nd string
 40337                                  ; .sp_len2: resw 1	; 2nd string
 40338                                  ; .sp_diff: resw 1	; max difference between offsets
 40339                                  ; .size:
 40340                                  ;endstruc
 40341                                  
 40342                                  FindBadCode:
 40343                                  	;mov	cx,[bp+2]
 40344                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 40345                                  
 40346                                  	mov	si,[bx]	; mov si,[bx+0]
 40347                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 40348                                  	
 40349                                  	;mov	dx,[bx+2]
 40350                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 40351                                  	call	ScanCodeSeq
 40352                                  	jnz	short fbc_error		; done if 1st not found
 40353                                  
 40354                                  	push	di			; save 1st string offset
 40355                                  
 40356                                  	;mov	si,[bx+4]
 40357                                  	mov	si,[bx+SearchPair.sp_off2]
 40358                                  	;mov	dx,[bx+6]
 40359                                  	mov	dx,[bx+SearchPair.sp_len2]
 40360                                  	call	ScanCodeSeq_di		; don't change flags after this!
 40361                                  
 40362                                  	pop	si			; restore 1st string offset
 40363                                  	jnz	short fbc_error
 40364                                  
 40365                                  	mov	ax,di			; sanity check that
 40366                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 40367                                  	jc	short fbc_error
 40368                                  	;cmp	ax,[bx+8]
 40369                                  	cmp	ax,[bx+SearchPair.sp_diff]
 40370                                  	ja	short fbc_error
 40371                                  
 40372                                  	clc
 40373                                  	retn
 40374                                  
 40375                                  fbc_error:
 40376                                  	stc
 40377                                  	retn
 40378                                  
 40379                                  ;----------------------------------------------------------------------------
 40380                                  ;
 40381                                  ; GenPatch
 40382                                  ;
 40383                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 40384                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 40385                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 40386                                  ; code.
 40387                                  ;
 40388                                  ; Entry:
 40389                                  ;	ES:DI = start of buggy code to be patched
 40390                                  ;	DX    = length of buggy code to be patched
 40391                                  ;	DS:SI = replacement patch code
 40392                                  ;	CX    = length of replacement patch code
 40393                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40394                                  ;
 40395                                  ; Exit:
 40396                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 40397                                  ;
 40398                                  ; Used:
 40399                                  ;	AX, BX, SI, Flags
 40400                                  ;
 40401                                  ;----------------------------------------------------------------------------
 40402                                  
 40403                                  GenPatch:
 40404                                  	push	di			;save offset of buggy code
 40405                                  
 40406                                  	;mov	bx,[bp+4]
 40407                                  	mov	bx,[bp+StackVars.sv_pPatch]
 40408                                  					;jump from buggy code to patch area
 40409                                  	call	GenJump
 40410                                  
 40411                                  	call	CopyPatch		;copy replacement code to patch area
 40412                                  
 40413                                  	pop	bx			;offset of buggy code + buggy code
 40414                                  	add	bx,dx			;  length = return from patch offset
 40415                                  
 40416                                  	call	GenJump 		;jump from patch area back to main-
 40417                                  	;mov	[bp+4],di
 40418                                  	mov	[bp+StackVars.sv_pPatch],di
 40419                                  					;  line code, update patch pointer
 40420                                  	retn
 40421                                  
 40422                                  ;----------------------------------------------------------------------------
 40423                                  ;
 40424                                  ; CopyPatch
 40425                                  ;
 40426                                  ; Copies patch code to patch location.
 40427                                  ;
 40428                                  ; Entry:
 40429                                  ;	DS:SI = patch code to be copied
 40430                                  ;	ES    = segment of code to patch
 40431                                  ;	CX    = length of code to copy
 40432                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40433                                  ;
 40434                                  ; Exit:
 40435                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 40436                                  ;
 40437                                  ; Used:
 40438                                  ;	SI, Flags
 40439                                  ;
 40440                                  ;----------------------------------------------------------------------------
 40441                                  
 40442                                  CopyPatch:
 40443                                  	push	cx
 40444                                  	;mov	di,[bp+4]
 40445                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 40446                                  	cld
 40447                                  	rep movsb
 40448                                  	pop	cx
 40449                                  	;mov	[bp+4],di
 40450                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 40451                                  	retn
 40452                                  
 40453                                  ;----------------------------------------------------------------------------
 40454                                  ;
 40455                                  ; GenJump
 40456                                  ;
 40457                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 40458                                  ;
 40459                                  ; Entry:
 40460                                  ;	ES:DI = from location (where to put jmp instruction)
 40461                                  ;	BX    = to location (where to jump to)
 40462                                  ;
 40463                                  ; Exit:
 40464                                  ;	DI = byte after generated jump
 40465                                  ;
 40466                                  ; Used:
 40467                                  ;	AX
 40468                                  ;
 40469                                  ;----------------------------------------------------------------------------
 40470                                  
 40471                                  GenJump:
 40472                                  	mov	al,0E9h		; jmp rel16 opcode
 40473                                  	stosb
 40474                                  
 40475                                  	mov	ax,bx		; calc offset to 'to' location
 40476                                  	sub	ax,di
 40477                                  	sub	ax,2
 40478                                  
 40479                                  	stosw			; output offset
 40480                                  
 40481                                  	retn
 40482                                  
 40483                                  ;----------------------------------------------------------------------------
 40484                                  ;
 40485                                  ; ScanCodeSeq
 40486                                  ;
 40487                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 40488                                  ;
 40489                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 40490                                  ;
 40491                                  ;----------------------------------------------------------------------------
 40492                                  
 40493                                  ScanCodeSeq:
 40494                                  	mov	di,200h
 40495                                  ScanCodeSeq_di:
 40496                                  	push	cx
 40497                                  	sub	cx,dx
 40498                                  	inc	cx
 40499                                  scsagain:
 40500                                  	push	si
 40501                                  	push	di
 40502                                  	push	cx
 40503                                  	mov	cx,dx
 40504                                  	rep	cmpsb
 40505                                  	pop	cx
 40506                                  	pop	di
 40507                                  	pop	si
 40508                                  	je	short scsfound
 40509                                  	inc	di
 40510                                  	loop	scsagain
 40511                                  scsfound:
 40512                                  	pop	cx
 40513                                  vvexit:		; 18/12/2022
 40514                                  	retn
 40515                                  	
 40516                                  ;----------------------------------------------------------------------------
 40517                                  ;
 40518                                  ; VerifyVersion
 40519                                  ;
 40520                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 40521                                  ; from ES:2A.
 40522                                  ;
 40523                                  ;       Entry: AX = binary version number 
 40524                                  ;       Exit : Z flag set if version numbers match
 40525                                  ;
 40526                                  ;----------------------------------------------------------------------------
 40527                                  
 40528                                  VerifyVersion:
 40529                                  	mov	si,[es:2Ah]		; offset of version number
 40530                                  					;  in ascii
 40531                                  	mov	bl,10
 40532                                  	add	si,3			; point to last digit
 40533                                  
 40534                                  	call	VVDigit
 40535                                  	jne	short vvexit
 40536                                  	call	VVDigit
 40537                                  	jne	short vvexit
 40538                                  	cmp	byte [es:si],'.'
 40539                                  	jne	short vvexit
 40540                                  	dec	si
 40541                                  	;call	VVDigit
 40542                                  	; 18/12/2022
 40543                                  	;jmp	short VVDigit
 40544                                  ;vvexit:
 40545                                  	;retn
 40546                                  VVDigit:
 40547                                  	div	bl
 40548                                  	add	ah,'0'
 40549                                  	dec	si
 40550                                  	cmp	[es:si+1],ah
 40551                                  	mov	ah,0			; do not xor or sub we need Z
 40552                                  	retn
 40553                                  
 40554                                  %endif
 40555                                  
 40556                                  ;-----------------------------------------------------------------------
 40557                                  
 40558                                  ; 23/05/2019 - Retro DOS v4.0
 40559                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 40560                                  
 40561                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40562                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 40563                                  
 40564                                  exepatch_start:	 ; label byte
 40565                                  
 40566                                  	; The following is the code that'll be layed over the buggy unpack
 40567                                  	; code.
 40568                                  str1:
 40569 00007513 06                      	db  06h	  		;push	es		 
 40570 00007514 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 40571                                  
 40572                                  first_stop equ	$-str1
 40573                                  			
 40574 00007516 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 40575                                  
 40576                                  first:  ; label	byte
 40577                                  
 40578 00007518 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40579 0000751A 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40580 0000751C BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40581 0000751F 57                      	db  57h	    		;push	di
 40582 00007520 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40583 00007523 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 40584 00007525 F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 40585 00007527 47                      	db  47h	    		;inc	di			
 40586 00007528 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 40587 0000752A 5F                      	db  5Fh	    		;pop	di
 40588 0000752B 58                      	db  58h	    		;pop	ax
 40589                                  
 40590                                  second_stop equ	$-first
 40591                                  
 40592 0000752C 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 40593                                  
 40594                                  second: ; label	byte
 40595                                  
 40596 0000752E 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 40597                                  		    		;NextRec:				
 40598 00007530 B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 40599                                  		    		;norm_agn:				
 40600 00007533 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 40601 00007535 F7D0                    	db  0F7h,0D0h		;not	ax		
 40602 00007537 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40603 00007539 7413                    	db  74h,13h		;jz	short SI_ok			
 40604 0000753B 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 40605 0000753D 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 40606 00007540 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 40607 00007542 7308                    	db  73h,08h		;jnc	short SItoDS			
 40608 00007544 F7DA                    	db  0F7h,0DAh		;neg	dx			
 40609 00007546 D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 40610 00007548 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 40611 0000754A 33D2                    	db  33h,0D2h		;xor	dx,dx			
 40612                                  				;SItoDS: 				
 40613 0000754C 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40614                                  				;SI_ok:					
 40615 0000754E 87F7                    	db  87h,0F7h		;xchg	si,di			
 40616 00007550 1E                      	db  1Eh			;push	ds			
 40617 00007551 06                      	db  06h			;push	es			
 40618 00007552 1F                      	db  1Fh			;pop	ds			
 40619 00007553 07                      	db  07h			;pop	es			
 40620 00007554 FECD                    	db  0FEh,0CDh		;dec	ch			
 40621 00007556 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 40622 00007558 AC                      	db  0ACh		;lodsb			
 40623 00007559 92                      	db  92h			;xchg	dx,ax
 40624 0000755A 4E                      	db  4Eh			;dec	si
 40625 0000755B AD                      	db  0ADh		;lodsw			
 40626 0000755C 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40627 0000755E 46                      	db  46h			;inc	si		
 40628 0000755F 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40629 00007561 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40630 00007563 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40631 00007565 7505                    	db  75h,05h		;jne	short TryEnum
 40632 00007567 AC                      	db  0ACh		;lodsb				
 40633 00007568 F3AA                    	db  0F3h,0AAh		;rep stosb			
 40634                                  
 40635                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 40636 0000756A EB06                    	db  0EBh,06h		;jmp	short TryNext
 40637                                  
 40638                                  				;TryEnum:
 40639 0000756C 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40640 0000756E 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 40641 00007570 F3A4                    	db  0F3h,0A4h		;rep movsb			
 40642                                  				;TryNext:
 40643                                  
 40644 00007572 92                      	db  92h			;xchg	dx,ax
 40645                                  ;	db  8Ah,0C2h		;mov	al,dl			
 40646                                  
 40647 00007573 A801                    	db  0A8h,01h		;test	al,1			
 40648 00007575 74B9                    	db  74h,0B9h		;jz	short NextRec			
 40649 00007577 9090                    	db  90h,90h		;nop,nop
 40650                                  	
 40651                                  last_stop equ $-second
 40652                                  size_str1 equ $-str1
 40653                                  
 40654                                  	; The following is the code that we need to look for in the exe
 40655                                  	; file.
 40656                                  
 40657                                  scan_patch1: ; label byte
 40658                                  
 40659 00007579 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40660 0000757B 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40661 0000757D 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 40662 0000757F 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40663 00007581 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40664 00007583 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40665 00007586 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40666 00007589 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40667 0000758B F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40668 0000758D 47                      	db  47h			;inc	di			
 40669 0000758E 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40670 00007590 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40671 00007592 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 40672 00007594 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40673 00007596 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40674                                  				;NextRec:
 40675 00007599 B104                    	db  0B1h,04h		;mov	cl,4
 40676 0000759B 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40677 0000759D F7D0                    	db  0F7h,0D0h		;not	ax		
 40678 0000759F D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40679 000075A1 7409                    	db  74h,09h		;jz	short SI_ok
 40680 000075A3 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40681 000075A5 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40682 000075A7 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40683 000075A9 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 40684                                  	       			;SI_ok:
 40685 000075AC 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40686 000075AE F7D0                    	db  0F7h,0D0h		;not	ax
 40687 000075B0 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40688 000075B2 7409                    	db  74h,09h		;jz	short DI_ok
 40689 000075B4 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40690 000075B6 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40691 000075B8 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40692 000075BA 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40693                                  				;DI_ok:
 40694                                  
 40695                                  size_scan_patch1 equ $-scan_patch1
 40696                                  
 40697                                  scan_patch2: ; label byte
 40698                                  			
 40699 000075BD 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40700 000075BF 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40701 000075C1 48                      	db  48h			;dec	ax
 40702 000075C2 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40703 000075C4 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40704 000075C6 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40705 000075C9 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40706 000075CC B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40707 000075CE F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40708 000075D0 47                      	db  47h			;inc	di			
 40709 000075D1 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40710 000075D3 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40711 000075D5 48                      	db  48h			;dec	ax
 40712 000075D6 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40713 000075D8 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40714                                  				;NextRec:
 40715 000075DB B104                    	db  0B1h,04h		;mov	cl,4
 40716 000075DD 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40717 000075DF F7D0                    	db  0F7h,0D0h		;not	ax		
 40718 000075E1 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40719 000075E3 740A                    	db  74h,0Ah		;jz	short SI_ok
 40720 000075E5 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40721 000075E7 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40722 000075E9 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40723 000075EB 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 40724                                  				;or	si,0FFF0H
 40725                                  				;SI_ok:
 40726 000075EF 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40727 000075F1 F7D0                    	db  0F7h,0D0h		;not	ax
 40728 000075F3 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40729 000075F5 740A                    	db  74h,0Ah		;jz	short DI_ok
 40730 000075F7 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40731 000075F9 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40732 000075FB 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40733 000075FD 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 40734                                  				;or	di,0FFF0H
 40735                                  				;DI_ok:
 40736                                  
 40737                                  size_scan_patch2 equ $-scan_patch2
 40738                                  
 40739                                  scan_patch3: ; label byte
 40740                                  
 40741 00007601 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40742 00007603 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40743 00007605 48                      	db  48h			;dec	ax
 40744 00007606 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40745 00007608 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40746 0000760A BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40747 0000760D B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40748 00007610 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40749 00007612 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40750 00007614 47                      	db  47h			;inc	di			
 40751 00007615 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40752 00007617 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40753 00007619 48                      	db  48h			;dec	ax
 40754 0000761A 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40755 0000761C BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40756                                  				;NextRec:
 40757 0000761F B104                    	db  0B1h,04h		;mov	cl,4
 40758 00007621 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40759 00007623 F7D0                    	db  0F7h,0D0h		;not	ax		
 40760 00007625 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40761 00007627 7409                    	db  74h,09h		;jz	short SI_ok
 40762 00007629 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40763 0000762B 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40764 0000762D 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 40765 0000762F 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 40766                                  				;SI_ok:
 40767 00007632 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40768 00007634 F7D0                    	db  0F7h,0D0h		;not	ax
 40769 00007636 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40770 00007638 7409                    	db  74h,09h		;jz	short DI_ok
 40771 0000763A 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40772 0000763C 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40773 0000763E 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40774 00007640 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40775                                  				;DI_ok:
 40776                                  
 40777                                  size_scan_patch3 equ $-scan_patch3
 40778                                  
 40779                                  scan_com: ; label byte
 40780                                  
 40781 00007643 AC                      	db  0ACh		;lodsb			
 40782 00007644 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 40783 00007646 4E                      	db  4Eh			;dec	si
 40784 00007647 AD                      	db  0ADh		;lodsw			
 40785 00007648 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40786 0000764A 46                      	db  46h			;inc	si		
 40787 0000764B 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40788 0000764D 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40789 0000764F 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40790 00007651 7506                    	db  75h,06h		;jne	short TryEnum
 40791 00007653 AC                      	db  0ACh		;lodsb				
 40792 00007654 F3AA                    	db  0F3h,0AAh		;rep stosb			
 40793 00007656 EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 40794                                  				;TryEnum:
 40795 00007659 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40796 0000765B 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 40797 0000765D F3A4                    	db  0F3h,0A4h		;rep movsb			
 40798                                  				;TryNext:
 40799 0000765F 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 40800 00007661 A801                    	db  0A8h,01h		;test	al,1			
 40801                                  ;	db  74h,0BAh		;jz	short NextRec			
 40802                                  
 40803                                  size_scan_com	equ	$-scan_com
 40804                                  
 40805                                  ;-----------------------------------------------------------------------
 40806                                  
 40807                                  ; 23/05/2019 - Retro DOS v4.0
 40808                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 40809                                  
 40810                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40811                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 40812                                  
 40813                                  ExePatch:
 40814 00007663 E80600                  	call	ExePackPatch
 40815 00007666 36FF16[1412]            	call	word [ss:RationalPatchPtr]
 40816 0000766B C3                      	retn
 40817                                  
 40818                                  ;-----------------------------------------------------------------------
 40819                                  ;
 40820                                  ; Procedure Name 	: ExePackPatch
 40821                                  ;
 40822                                  ; Inputs	 	: DS 			-> DOSDATA
 40823                                  ;			  ES:0 			-> read in image
 40824                                  ;			  ax:cx = start cs:ip of program
 40825                                  ; Output		:		
 40826                                  ;
 40827                                  ;	1. If ES <= 0fffh
 40828                                  ;	   2. if exepack signature ('RB') found
 40829                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 40830                                  ;	       	 4. if rest of the code & checksum compares
 40831                                  ;	  	    5. overlay buggy code with code in 
 40832                                  ;		       doscode:str1.
 40833                                  ;		 6. endif
 40834                                  ;	      7. endif
 40835                                  ;	   8. endif
 40836                                  ;	9. endif
 40837                                  ;
 40838                                  ;
 40839                                  ; Uses			: NONE
 40840                                  ;
 40841                                  ;-----------------------------------------------------------------------
 40842                                  		
 40843                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40844                                  	; 23/05/2019 - Retro DOS v4.0	
 40845                                  ExePackPatch:
 40846 0000766C 53                      	push	bx
 40847 0000766D 8CC3                    	mov	bx,es			; bx has load segment
 40848 0000766F 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 40849 00007673 7602                    	jbe	short ep_cont		; N: 
 40850 00007675 5B                      	pop	bx			; Y: no need to patch
 40851 00007676 C3                      	retn
 40852                                  ep_cont:
 40853 00007677 1E                      	push	ds
 40854 00007678 06                      	push	es
 40855 00007679 50                      	push	ax
 40856 0000767A 51                      	push	cx
 40857 0000767B 56                      	push	si
 40858 0000767C 57                      	push	di
 40859                                  	
 40860                                  		; M033 - start
 40861                                  		; exepacked programs have an IP of 12h (>=2)
 40862                                  
 40863 0000767D 83E902                  	sub	cx,2			; Q: is IP >=2 
 40864 00007680 7303                    	jnb	short epp_1		; N: exit
 40865 00007682 E9C500                  	jmp	ep_notpacked
 40866                                  					; ax:cx now points to location of
 40867                                  					; 'RB' if this is an exepacked file.
 40868                                  		; M033 - end
 40869                                  epp_1:
 40870 00007685 89CF                    	mov	di,cx
 40871 00007687 8EC0                    	mov	es,ax
 40872 00007689 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 40873                                  					; unpack_offset
 40874                                  
 40875 0000768E 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 40876                                  	;ljne	ep_notpacked
 40877 00007693 7403                    	je	short epp_2
 40878 00007695 E9B200                  	jmp	ep_notpacked
 40879                                  epp_2:
 40880 00007698 0E                      	push	cs
 40881 00007699 1F                      	pop	ds			; set ds to cs
 40882                                  
 40883                                  	;add	di,6Ch
 40884 0000769A 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 40885                                  					;          file where we hope to find
 40886                                  					;	   scan string. 
 40887                                  
 40888 0000769D E8B200                  	call	chk_common_str		; check for match
 40889                                  
 40890 000076A0 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 40891                                  					; N: check at patch2_offset
 40892                                  					; Y: check for rest of patch string
 40893 000076A2 BE[7975]                	mov	si,scan_patch1
 40894                                  					; ds:si -> scan string 
 40895 000076A5 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 40896                                  
 40897                                  	;add	di,28h
 40898                                  	; 07/12/2022
 40899 000076AA 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 40900                                  					;          file where we hope to find
 40901                                  					;	   scan string. 
 40902                                  	;mov	cx,68
 40903 000076AD B94400                  	mov	cx,size_scan_patch1
 40904                                  	;mov	bx,142
 40905 000076B0 BB8E00                  	mov	bx,CHKSUM1_LEN
 40906                                  	;mov	ax,0EF4Eh
 40907 000076B3 B84EEF                  	mov	ax,PATCH1_CHKSUM
 40908 000076B6 E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 40909 000076B9 7208                    	jc	short ep_done1		; Q: did we pass the test
 40910                                  					; N: exit
 40911                                  					; Y: overlay code with new 
 40912 000076BB BE[1375]                	mov	si,str1
 40913                                  	;mov	cx,102
 40914 000076BE B96600                  	mov	cx,size_str1
 40915                                  	
 40916 000076C1 F3A4                    	rep	movsb
 40917                                  ep_done1:
 40918 000076C3 E98400                  	jmp	ep_done
 40919                                  
 40920                                  ep_chkpatch2:
 40921                                  	;mov	di,76h
 40922 000076C6 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 40923                                  					; in another version of unpack
 40924 000076C9 E88600                  	call	chk_common_str		; check for match
 40925                                  
 40926 000076CC 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 40927                                  					; N: check for patch3_offset
 40928                                  					; Y: check for rest of patch string
 40929                                  
 40930 000076CE BE[BD75]                	mov	si,scan_patch2
 40931                                  					; ds:si -> scan string 
 40932                                  	;mov	di,32h
 40933 000076D1 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 40934                                  					;          file where we hope to find
 40935                                  	;mov	cx,68			;	   scan string. 
 40936 000076D4 B94400                  	mov	cx,size_scan_patch2
 40937                                  	;mov	bx,140
 40938 000076D7 BB8C00                  	mov	bx,CHKSUM2_LEN
 40939                                  	;mov	ax,78B2h
 40940 000076DA B8B278                  	mov	ax,PATCH2_CHKSUM
 40941 000076DD E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 40942                                  
 40943                                  					; M046 - Start
 40944                                  					; Q: did we pass the test
 40945 000076E0 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 40946                                  					; N: try with a different chksum
 40947                                  
 40948                                  
 40949 000076E2 BE[BD75]                	mov	si,scan_patch2
 40950                                  					; ds:si -> scan string 
 40951                                  	;mov	cx,68
 40952 000076E5 B94400                  	mov	cx,size_scan_patch2
 40953                                  	;mov	bx,129
 40954 000076E8 BB8100                  	mov	bx,CHKSUM2A_LEN
 40955                                  	;mov	ax,1C47h
 40956 000076EB B8471C                  	mov	ax,PATCH2A_CHKSUM
 40957 000076EE E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 40958                                  					; Q: did we pass the test
 40959 000076F1 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 40960                                  					; Y: overlay code with new 
 40961                                  						
 40962                                  ep_patchcode2:			       	; M046 - End
 40963 000076F3 BE[1375]                	mov	si,str1
 40964                                  	;mov	cx,3
 40965 000076F6 B90300                  	mov	cx,first_stop
 40966 000076F9 F3A4                    	rep	movsb
 40967 000076FB B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 40968 000076FE AB                      	stosw
 40969 000076FF 83C602                  	add	si,2
 40970                                  	;mov	cx,20
 40971 00007702 B91400                  	mov	cx,second_stop
 40972 00007705 F3A4                    	rep	movsb
 40973 00007707 AB                      	stosw				; put in dec ax and nop
 40974 00007708 83C602                  	add	si,2
 40975                                  	;mov	cx,75
 40976 0000770B B94B00                  	mov	cx,last_stop
 40977 0000770E F3A4                    	rep	movsb
 40978 00007710 EB38                    	jmp	short ep_done
 40979                                  
 40980                                  ep_chkpatch3:
 40981                                  	;mov	di,74h
 40982 00007712 BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 40983                                  					; in another version of unpack
 40984 00007715 E83A00                  	call	chk_common_str		; check for match
 40985                                  
 40986 00007718 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 40987                                  					; N: exit
 40988                                  					; Y: check for rest of patch string
 40989 0000771A BE[0176]                	mov	si,scan_patch3
 40990                                  					; ds:si -> scan string 
 40991                                  	;mov	di,32h
 40992 0000771D BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 40993                                  					;          file where we hope to find
 40994                                  					;	   scan string. 
 40995                                  	;mov	cx,66
 40996 00007720 B94200                  	mov	cx,size_scan_patch3
 40997                                  	;mov	bx,139
 40998 00007723 BB8B00                  	mov	bx,CHKSUM3_LEN
 40999                                  	;mov	ax,4EDEh
 41000 00007726 B8DE4E                  	mov	ax,PATCH3_CHKSUM
 41001 00007729 E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 41002 0000772C 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 41003                                  					; N: exit
 41004                                  					; Y: overlay code with new 
 41005 0000772E BE[1375]                	mov	si,str1
 41006                                  	;mv	cx,3
 41007 00007731 B90300                  	mov	cx,first_stop
 41008 00007734 F3A4                    	rep	movsb
 41009 00007736 B048                    	mov	al,48h			; al = opcode for dec ax
 41010 00007738 AA                      	stosb
 41011 00007739 83C602                  	add	si,2
 41012                                  	;mov	cx,20
 41013 0000773C B91400                  	mov	cx,second_stop
 41014 0000773F F3A4                    	rep	movsb
 41015 00007741 AA                      	stosb				; put in dec ax
 41016 00007742 83C602                  	add	si,2
 41017                                  	;mov	cx,75
 41018 00007745 B94B00                  	mov	cx,last_stop
 41019 00007748 F3A4                    	rep	movsb
 41020                                  
 41021                                  ep_notpacked:
 41022                                  	;stc
 41023                                  ep_done:
 41024 0000774A 5F                      	pop	di
 41025 0000774B 5E                      	pop	si
 41026 0000774C 59                      	pop	cx
 41027 0000774D 58                      	pop	ax
 41028 0000774E 07                      	pop	es
 41029 0000774F 1F                      	pop	ds
 41030 00007750 5B                      	pop	bx
 41031 00007751 C3                      	retn
 41032                                  
 41033                                  ;-------------------------------------------------------------------------
 41034                                  ;
 41035                                  ; 	Procedure Name	: chk_common_str
 41036                                  ;
 41037                                  ;	Input		: DS = DOSCODE
 41038                                  ;			; ES:DI points to string in packed file
 41039                                  ;
 41040                                  ;	Output		; Z if match else NZ
 41041                                  ;
 41042                                  ;-------------------------------------------------------------------------
 41043                                  
 41044                                  	; 23/05/2019 - Retro DOS v4.0
 41045                                  chk_common_str:
 41046 00007752 BE[4376]                	mov	si,scan_com
 41047                                  					; ds:si -> scan string 
 41048                                  	;mov	cx,32
 41049 00007755 B92000                  	mov	cx,size_scan_com
 41050                                  
 41051 00007758 F3A6                    	repe	cmpsb	       
 41052                                  
 41053                                  					; M046 - start
 41054                                  	; a fourth possible version of these exepacked programs have a 
 41055                                  	; 056h instead of 06Bh. See scan_com above
 41056                                  	;
 41057                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 41058                                  	;
 41059                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 41060                                  	; we shall try to match the rest of the string
 41061                                  	;
 41062                                  
 41063 0000775A 7409                    	jz	short ccs_done
 41064 0000775C 26807DFF56              	cmp	byte [es:di-1],56h
 41065 00007761 7502                    	jnz	short ccs_done
 41066                                  
 41067 00007763 F3A6                    	repe	cmpsb	    
 41068                                  ccs_done:				; M046 - end
 41069 00007765 C3                      	retn
 41070                                  
 41071                                  ;-------------------------------------------------------------------------
 41072                                  ;
 41073                                  ;	Procedure Name	: chk_patchsum
 41074                                  ;
 41075                                  ;	Input		: DS:SI -> string we're looking for
 41076                                  ;			: ES:DI -> offset in packed file
 41077                                  ;			: CX 	= scan length
 41078                                  ;			: BX	= length of check sum
 41079                                  ;			: AX 	= value of check sum
 41080                                  ;
 41081                                  ;	Output		: if patch & check sum compare
 41082                                  ;				NC
 41083                                  ;			  else
 41084                                  ;				CY
 41085                                  ;
 41086                                  ;	Uses		: AX, BX, CX, SI
 41087                                  ;
 41088                                  ;-------------------------------------------------------------------------
 41089                                  
 41090                                  	; 23/05/2019 - Retro DOS v4.0
 41091                                  chk_patchsum:
 41092 00007766 57                      	push	di
 41093                                  
 41094 00007767 F3A6                    	repe	cmpsb			   
 41095                                  
 41096 00007769 751A                    	jnz	short cp_fail		; Q: does the patch match
 41097                                  					; N: exit
 41098                                  					; Y:	
 41099                                  
 41100                                  		; we do a check sum starting from the location of the 
 41101                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 41102                                  		; unpacking code.
 41103                                  
 41104 0000776B 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 41105 00007770 89D9                    	mov	cx,bx			; cx = length of check sum
 41106                                  
 41107 00007772 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 41108 00007774 31C0                    	xor	ax,ax
 41109                                  ep_chksum:
 41110 00007776 260305                  	add	ax,[es:di]
 41111 00007779 83C702                  	add	di,2
 41112 0000777C E2F8                    	loop	ep_chksum
 41113                                  
 41114 0000777E 5F                      	pop	di			; restore di
 41115                                  
 41116 0000777F 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 41117 00007781 7502                    	jne	short cp_fail		; N: exit
 41118                                  					; Y: 
 41119 00007783 F8                      	clc	
 41120 00007784 C3                      	retn
 41121                                  
 41122                                  cp_fail:
 41123 00007785 F9                      	stc
 41124 00007786 C3                      	retn
 41125                                  
 41126                                  ; M020 : BEGIN
 41127                                  ;
 41128                                  ;----------------------------------------------------------------------------
 41129                                  ;
 41130                                  ; procedure : RationalPatch
 41131                                  ;
 41132                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 41133                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 41134                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 41135                                  ;
 41136                                  ; THE BUG is in the following code sequence:
 41137                                  ;
 41138                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 41139                                  ;90		even				; word align
 41140                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 41141                                  ;e8 xx xx	call	set_A20			; enable A20
 41142                                  ;
 41143                                  ; This patch routine replaces the mov & the loop with a far call into a
 41144                                  ; routine in DOS data segment which is in low memory (because A20 line
 41145                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 41146                                  ; a mov & loop.
 41147                                  ;
 41148                                  ; Identification of Buggy Rational EXE
 41149                                  ; ====================================
 41150                                  ;
 41151                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 41152                                  ;
 41153                                  ; OFFSET				Contains
 41154                                  ; ------				--------
 41155                                  ; 0000h			100 times Version number in binary
 41156                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 41157                                  ;
 41158                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 41159                                  ;
 41160                                  ; 002ah			offset where version number is stored in ASCII
 41161                                  ;				e.g. '3.48A'
 41162                                  ;
 41163                                  ; 0030h			offset of copyright string. Copyright strings either
 41164                                  ;			start with "DOS/16M Copyright...." or
 41165                                  ;			"Copyright.....". The string contains
 41166                                  ;			"Rational Systems, Inc."
 41167                                  ;
 41168                                  ; 0020h			word : Paragraph offset of the buggy code segment
 41169                                  ;				from the program image
 41170                                  ; 0016h			word : size of buggy code segment
 41171                                  ;
 41172                                  ;	Buggy code is definite to start after offset 200h in its segment
 41173                                  ;
 41174                                  ;----------------------------------------------------------------------------
 41175                                  
 41176                                  ; 23/05/2019 - Retro DOS v4.0
 41177                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 41178                                  
 41179                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41180                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 41181                                  
 41182                                  RScanPattern1:
 41183 00007787 000020000000400001-     	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 41183 00007790 00                 
 41184                                  
 41185                                  RLen1 equ $ - RScanPattern1
 41186                                  
 41187                                  RScanPattern2:
 41188 00007791 8B0E100090E2FEE8        	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 41189                                  
 41190                                  RLen2 equ $ - RScanPattern2
 41191                                  
 41192                                  RScanPattern3:
 41193 00007799 8B0E1000E2FEE8          	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 41194                                  
 41195                                  RLen3 equ $ - RScanPattern2
 41196                                  
 41197                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 41198                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 41199                                  
 41200                                  ;----------------------------------------------------------------------------
 41201                                  ;
 41202                                  ; INPUT : ES = segment where program got loaded
 41203                                  ;
 41204                                  ;----------------------------------------------------------------------------
 41205                                  
 41206                                  RationalPatch:
 41207 000077A0 FC                      	cld
 41208 000077A1 50                      	push	ax
 41209 000077A2 53                      	push	bx
 41210 000077A3 51                      	push	cx
 41211 000077A4 52                      	push	dx
 41212 000077A5 56                      	push	si
 41213 000077A6 57                      	push	di
 41214 000077A7 06                      	push	es
 41215 000077A8 1E                      	push	ds			; we use all of them
 41216 000077A9 BF0A00                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 41217 000077AC 0E                      	push	cs
 41218 000077AD 1F                      	pop	ds
 41219                                  	
 41220 000077AE BE[8777]                	mov	si,RScanPattern1
 41221                                  	;mov	cx,10
 41222 000077B1 B90A00                  	mov	cx,RLen1
 41223 000077B4 F3A6                    	rep	cmpsb			; do we have the pattern ?
 41224 000077B6 754A                    	jne	short rpexit
 41225 000077B8 26A10000                	mov	ax,[es:0]
 41226 000077BC 3D5C01                  	cmp	ax,348			; is it a buggy version ?
 41227 000077BF 7241                    	jb	short rpexit
 41228 000077C1 3D7F01                  	cmp	ax,383			; is it a buggy version
 41229 000077C4 773C                    	ja	short rpexit
 41230                                  
 41231 000077C6 E85A00                  	call	VerifyVersion
 41232 000077C9 7537                    	jne	short rpexit
 41233                                  
 41234 000077CB 268B0E1600              	mov	cx,[es:16h]		; Length of buggy code seg
 41235 000077D0 81E90002                	sub	cx,200h			; Length we search (we start
 41236                                  					;  at offset 200h)
 41237 000077D4 268E062000              	mov	es,[es:20h]		; es=buggy code segment
 41238 000077D9 BE[9177]                	mov	si,RScanPattern2
 41239                                  	;mov	dx,8	
 41240 000077DC BA0800                  	mov	dx,RLen2
 41241 000077DF E82900                  	call	ScanCodeSeq		; look for code seq with nop
 41242 000077E2 740B                    	jz	short rpfound
 41243                                  
 41244 000077E4 BE[9977]                	mov	si,RScanPattern3
 41245                                  	;mov	dx,15
 41246 000077E7 BA0F00                  	mov	dx,RLen3
 41247 000077EA E81E00                  	call	ScanCodeSeq		; look for code seq w/o nop
 41248 000077ED 7513                    	jnz	short rpexit
 41249                                  
 41250                                  rpfound:
 41251                                  	
 41252                                  ;	we set up a far call into DOS data
 41253                                  ;	dx has the length of the code seq we were searching for
 41254                                  
 41255 000077EF B09A                    	mov	al,9Ah			; far call opcode
 41256 000077F1 AA                      	stosb
 41257 000077F2 B8[1612]                	mov	ax,RatBugCode
 41258 000077F5 AB                      	stosw
 41259 000077F6 8CD0                    	mov	ax,ss
 41260 000077F8 AB                      	stosw
 41261 000077F9 89D1                    	mov	cx,dx
 41262 000077FB 83E906                  	sub	cx,6			; filler (with NOPs)
 41263 000077FE B090                    	mov	al,90h
 41264 00007800 F3AA                    	rep	stosb
 41265                                  rpexit:
 41266 00007802 1F                      	pop	ds
 41267 00007803 07                      	pop	es
 41268 00007804 5F                      	pop	di
 41269 00007805 5E                      	pop	si
 41270 00007806 5A                      	pop	dx
 41271 00007807 59                      	pop	cx
 41272 00007808 5B                      	pop	bx
 41273 00007809 58                      	pop	ax
 41274 0000780A C3                      	retn
 41275                                  
 41276                                  ; M020 END
 41277                                  
 41278                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41279                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41280                                  
 41281                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 41282                                  
 41283                                  ;----------------------------------------------------------------------------
 41284                                  ;
 41285                                  ; ScanCodeSeq
 41286                                  ;
 41287                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41288                                  ;
 41289                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41290                                  ;
 41291                                  ;----------------------------------------------------------------------------
 41292                                  
 41293                                  ScanCodeSeq:
 41294                                  	; 17/12/2022
 41295 0000780B BF0002                  	mov	di,200h
 41296                                  ;ScanCodeSeq_di:
 41297 0000780E 51                      	push	cx
 41298 0000780F 29D1                    	sub	cx,dx
 41299 00007811 41                      	inc	cx
 41300                                  	; 17/12/2022
 41301                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41302                                  	;mov	di,200h
 41303                                  scsagain:
 41304 00007812 56                      	push	si
 41305 00007813 57                      	push	di
 41306 00007814 51                      	push	cx
 41307 00007815 89D1                    	mov	cx,dx
 41308 00007817 F3A6                    	rep	cmpsb
 41309 00007819 59                      	pop	cx
 41310 0000781A 5F                      	pop	di
 41311 0000781B 5E                      	pop	si
 41312 0000781C 7403                    	je	short scsfound
 41313 0000781E 47                      	inc	di
 41314 0000781F E2F1                    	loop	scsagain
 41315                                  scsfound:
 41316 00007821 59                      	pop	cx
 41317                                  vvexit:		; 18/12/2022
 41318 00007822 C3                      	retn
 41319                                  
 41320                                  
 41321                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41322                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41323                                  
 41324                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 41325                                  
 41326                                  ;----------------------------------------------------------------------------
 41327                                  ;
 41328                                  ; VerifyVersion
 41329                                  ;
 41330                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41331                                  ; from ES:2A.
 41332                                  ;
 41333                                  ;       Entry: AX = binary version number 
 41334                                  ;       Exit : Z flag set if version numbers match
 41335                                  ;
 41336                                  ;----------------------------------------------------------------------------
 41337                                  
 41338                                  VerifyVersion:
 41339 00007823 268B362A00              	mov	si,[es:2Ah]		; offset of version number
 41340                                  					;  in ascii
 41341 00007828 B30A                    	mov	bl,10
 41342 0000782A 83C603                  	add	si,3			; point to last digit
 41343                                  
 41344 0000782D E80E00                  	call	VVDigit
 41345 00007830 75F0                    	jne	short vvexit
 41346 00007832 E80900                  	call	VVDigit
 41347 00007835 75EB                    	jne	short vvexit
 41348 00007837 26803C2E                	cmp	byte [es:si],'.' ; 2Eh
 41349 0000783B 75E5                    	jne	short vvexit
 41350 0000783D 4E                      	dec	si
 41351                                  	;call	VVDigit
 41352                                  	; 18/12/2022
 41353                                  	;jmp	short VVDigit
 41354                                  ;vvexit:
 41355                                  	;retn
 41356                                  VVDigit:
 41357 0000783E F6F3                    	div	bl
 41358 00007840 80C430                  	add	ah,'0' ; 30h
 41359 00007843 4E                      	dec	si
 41360 00007844 26386401                	cmp	[es:si+1],ah
 41361 00007848 B400                    	mov	ah,0			; do not xor or sub we need Z
 41362 0000784A C3                      	retn
 41363                                  
 41364                                  ;---------------------------------------------------------------------------
 41365                                  ;
 41366                                  ;	M068
 41367                                  ;
 41368                                  ; 	Procedure Name	: IsCopyProt
 41369                                  ;
 41370                                  ;	Inputs		: DS:100 -> start of com file just read in
 41371                                  ;
 41372                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 41373                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 41374                                  ;			  copy protect scheme that relies on the A20 line
 41375                                  ;			  being turned off for it's scheme to work.
 41376                                  ;
 41377                                  ;			  Note: The int 21 function dispatcher will turn 
 41378                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 41379                                  ;				and dec the A20OFF_COUNT before	iretting 
 41380                                  ;				to the user. 
 41381                                  ;
 41382                                  ;	Uses		: ES, DI, SI, CX
 41383                                  ;
 41384                                  ;---------------------------------------------------------------------------
 41385                                  
 41386                                  ; 23/05/2019 - Retro DOS v4.0
 41387                                  
 41388                                  CPStartOffset	EQU	0175h
 41389                                  CPID1Offset	EQU	011Bh
 41390                                  CPID2Offset	EQU	0173h
 41391                                  CPID3Offset	EQU	0146h
 41392                                  CPID4Offset	EQU	0124h
 41393                                  ID1		EQU	05343h
 41394                                  ID2		EQU	05044h
 41395                                  ID3		EQU	0F413h
 41396                                  ID4		EQU	08000h
 41397                                  
 41398                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 41399                                  
 41400                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41401                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 41402                                  
 41403                                  CPScanPattern:
 41404 0000784B 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 41405 0000784F 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 41406 00007853 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 41407 00007859 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 41408 0000785D B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 41409 00007860 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 41410                                  
 41411                                  CPSPlen	EQU $ - CPScanPattern
 41412                                  
 41413                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 41414                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 41415                                  
 41416                                  IsCopyProt:
 41417 00007863 813E1B014353            	cmp	word [CPID1Offset],ID1
 41418 00007869 752D                    	jne	short CP_done
 41419                                  
 41420 0000786B 813E73014450            	cmp	word [CPID2Offset],ID2
 41421 00007871 7525                    	jne	short CP_done
 41422                                  
 41423 00007873 813E460113F4            	cmp	word [CPID3Offset],ID3
 41424 00007879 751D                    	jne	short CP_done
 41425                                  
 41426 0000787B 813E24010080            	cmp	word [CPID4Offset],ID4
 41427 00007881 7515                    	jne	short CP_done
 41428                                  
 41429 00007883 0E                      	push	cs
 41430 00007884 07                      	pop	es
 41431 00007885 BF[4B78]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 41432                                  
 41433 00007888 BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 41434                                  					; of pattern
 41435                                  
 41436 0000788B B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 41437 0000788E F3A6                    	repe	cmpsb
 41438 00007890 7506                    	jnz	short CP_done
 41439                                  
 41440 00007892 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 41441                                  CP_done:
 41442 00007898 C3                      	retn
 41443                                  	
 41444                                  ;DOSCODE ENDS
 41445                                  
 41446                                  	;END
 41447                                  
 41448                                  ;----------------------------------------------------------------------------
 41449                                  
 41450                                  ;align 2 ; 05/09/2018 (Error!)
 41451                                  
 41452                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41453                                  ;align 16 ; 08/09/2018 (OK.)
 41454 00007899 90                      align 2
 41455                                  
 41456                                  ; 06/08/2018 - Retro DOS v3.0
 41457                                  ;============================================================================
 41458                                  ; MSINIT.ASM
 41459                                  ;============================================================================
 41460                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 41461                                  ;
 41462                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41463                                  ;
 41464                                  	; 15/07/2018 - Retro DOS v3.0
 41465                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 41466                                  
 41467                                  ; temp iret instruction
 41468                                  
 41469                                  
 41470                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41471                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 41472                                  
 41473                                  initiret: ; MSDOS 6.0
 41474                                  SYSBUF:
 41475                                  ;IRETT: ; 06/05/2019
 41476 0000789A CF                      	iret
 41477                                  
 41478                                  ; 22/04/2019 - Retro DOS v4.0
 41479                                  
 41480                                  ; pointer to the BIOS data segment that will be available just to the
 41481                                  ; initialization code
 41482                                  
 41483 0000789B 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 41484                                  
 41485                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41486                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 41487                                  
 41488                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 41489                                  
 41490                                  ParaRound:
 41491 0000789D 83C00F                  	add	ax, 15
 41492 000078A0 D1D8                    	rcr	ax, 1
 41493 000078A2 D1E8                    	shr	ax, 1
 41494 000078A4 D1E8                    	shr	ax, 1
 41495 000078A6 D1E8                    	shr	ax, 1
 41496 000078A8 C3                      	retn
 41497                                  
 41498                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41499                                  
 41500                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41501                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 41502                                  	
 41503                                  	; 30/05/2019
 41504                                  	; 22/04/2019 - Retro DOS v4.0
 41505                                  	; 07/07/2018 - Retro DOS v3.0
 41506                                  	; Retro DOS v2.0 - 03/03/2018
 41507                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41508                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 41509                                  DOSINIT:
 41510                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 41511                                  	;
 41512                                  	; Far call from SYSINIT
 41513                                  	; DX = Memory size in paragraphs
 41514                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 41515                                  	;	  (Retro DOS v2.0, 16/03/2018)
 41516                                  	;
 41517                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 41518                                  	;	  (Retro DOS v4.0, 20/04/2019)
 41519                                  
 41520 000078A9 FA                              CLI
 41521 000078AA FC                              CLD
 41522                                  
 41523                                  	; 03/11/2022
 41524                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 41525                                  	
 41526                                  	; 17/12/2022
 41527                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41528                                  	;push	dx ; =*=		; save parameters from BIOS
 41529                                  	
 41530 000078AB 56                      	push	si
 41531 000078AC 1E                      	push	ds
 41532 000078AD 57                      	push	di			;save di (ptr to BiosComBlock)
 41533                                  
 41534 000078AE 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 41535                                  
 41536                                  ; First, move the DOS data segment to its final location in low memory
 41537                                  
 41538                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 41539                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 41540 000078B0 B8[627D]                	mov	ax,MEMSTRT		; get offset of end of init code
 41541                                  
 41542                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 41543                                  	;and	ax,~15	; 0FFF0h	; boundary
 41544                                  
 41545                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 41546                                  					; code segment
 41547                                  
 41548                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41549 000078B3 83C00F                  	add	ax,15			; round to nearest paragraph
 41550 000078B6 83E0F0                  	and	ax,~15			; boundary
 41551                                  
 41552 000078B9 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 41553                                  					; code segment
 41554                                  	; 05/12/2022
 41555                                  	; 30/04/2019 - Retro DOS v4.0
 41556                                  	;xor	si,si
 41557                                  	
 41558 000078BB 8CC8                    	mov	ax,cs
 41559 000078BD 8ED8                    	mov	ds,ax			; ds = current code segment
 41560                                  					; DS:SI now points to dosdata
 41561                                  
 41562                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 41563                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 41564                                  					;  BData segment. Cannot use
 41565                                  					;  getdseg macro here!!!
 41566                                  	; 17/12/2022
 41567 000078BF 8E06[9B78]              	mov	es,[InitBioDataSeg]
 41568                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41569                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 41570                                  
 41571                                  	;mov	es,[es:3]
 41572 000078C3 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 41573                                  
 41574 000078C8 31FF                    	xor	di,di			; ES:DI now points to RAM data
 41575                                  
 41576                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 41577                                  	;mov	cx,4976  ; 25/05/2019
 41578                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41579                                  	;mov	cx,4962
 41580                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 41581 000078CA B96213                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 41582 000078CD F3A4                    	rep	movsb			; move data to final location
 41583                                  	
 41584 000078CF 5F                      	pop	di			; restore ptr to BiosComBlock
 41585 000078D0 1F                      	pop	ds			; restore parms from BIOS
 41586 000078D1 5E                      	pop	si
 41587                                  	; 17/12/2022
 41588                                  	;pop	dx ; 30/05/2019	
 41589                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41590                                  	;pop	dx ; =*=		
 41591                                  
 41592 000078D2 06                      	push	es
 41593 000078D3 1E                      	push	ds
 41594 000078D4 07                      	pop	es			; es:si -> device chain
 41595 000078D5 1F                      	pop	ds			; ds points to dosdata
 41596                                  
 41597                                  ;SR;
 41598                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 41599                                  ;now so that the EXEC call knows when SysInit is present to do the special
 41600                                  ;lie table handling for device drivers. This can be expanded later on to
 41601                                  ;establish a communication block from the BIOS to the DOS.
 41602                                  
 41603                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 41604                                  	;mov	[1042h],bx
 41605 000078D6 893E[4010]              	mov	[BiosDataPtr],di
 41606 000078DA 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 41607                                  
 41608 000078DE 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 41609                                  
 41610                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 41611                                  
 41612 000078E3 2E8C1E[A851]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 41613 000078E8 2E8C1E[AC51]            	mov	[cs:LowInt24Addr+2],ds
 41614 000078ED 2E8C1E[B051]            	mov	[cs:LowInt28Addr+2],ds
 41615                                  
 41616                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 41617                                  	;mov	[584h],sp
 41618                                  	;mov	[586h],ss
 41619 000078F2 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 41620 000078F6 8926[8405]              	mov	[USER_SP],sp
 41621 000078FA 8C16[8605]              	mov	[USER_SS],ss
 41622                                  
 41623 000078FE 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 41624 00007900 8ED0                    	mov	ss,ax
 41625                                  
 41626                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 41627                                  	;mov	sp,offset dosdata:dskstack
 41628 00007902 BC[2009]                	mov	sp,DSKSTACK
 41629                                  
 41630                                  ;M023
 41631                                  ; Init patch ptrs to default values
 41632                                  
 41633                                  	;mov	word [1212h],RetExePatch
 41634                                  	;mov	word [1214h],RetExePatch
 41635                                  	;mov	word [61h],RetExePatch
 41636 00007905 C706[1212][2F63]        	mov	word [FixExePatch],RetExePatch	; M023
 41637 0000790B C706[1412][2F63]        	mov	word [RationalPatchPtr],RetExePatch ; M023
 41638 00007911 C706[6100][2F63]        	mov	word [ChkCopyProt],RetExePatch	; M068
 41639                                  
 41640                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41641                                  %if 0	
 41642                                  
 41643                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 41644                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 41645                                  ; running in the HMA.
 41646                                  
 41647                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 41648                                  	cmp	al,2		;   386 or later?
 41649                                  	mov	ax,Rational386Patch
 41650                                  	jae	short di_set_patch
 41651                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 41652                                  di_set_patch:
 41653                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 41654                                  
 41655                                  %endif
 41656                                  	; Set up the variable temp_dosloc to point to the dos code segment
 41657                                  
 41658 00007917 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 41659                                  
 41660                                  	; ax now holds segment of DOS code
 41661 00007919 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 41662                                  
 41663 0000791C 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 41664 00007920 8936[4800]              	mov	word [NULDEV],si
 41665                                  ;SR;
 41666                                  ; There are some locations in the Win386 instance data structures
 41667                                  ; which need to be set up with the DOS data segment. First, initialize
 41668                                  ; the segment part of the instance table pointer in the SIS.
 41669                                  
 41670                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 41671 00007924 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 41672                                  
 41673                                  ; Now initialize the segment part of the pointer to the data in each
 41674                                  ; instance table entry.
 41675                                  
 41676 00007928 56                      	push	si		; preserve pointer to device chain
 41677                                  	; 18/12/2022
 41678                                  	; cx = 0
 41679 00007929 B107                    	mov	cl,7
 41680                                  	;mov	cx,7		; There are 7 entries in the instance table
 41681                                  				; M019
 41682                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 41683 0000792B BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 41684                                  Instance_init_loop:
 41685 0000792E 8C1C                    	mov	[si],ds		; set offset in instance entry
 41686                                  	;add	si,6
 41687 00007930 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 41688 00007933 E2F9                    	loop	Instance_init_loop
 41689                                  
 41690                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 41691                                  
 41692                                  	; 18/12/2022
 41693 00007935 B105                    	mov	cl,5
 41694                                  	;mov	cx,5		; There are five entries in the instance table
 41695                                  
 41696                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 41697                                  	;mov	si,11EDh	; point si to segment field
 41698 00007937 BE[ED11]                	mov	si,OldInstanceJunk+6
 41699                                  OldInstance_init_loop:
 41700 0000793A 8C1C                    	mov	[si],ds		; set offset in instance entry
 41701 0000793C 83C606                  	add	si,6		; move on to next entry
 41702 0000793F E2F9                    	loop	OldInstance_init_loop
 41703 00007941 5E                      	pop	si		; restore pointer to device chain
 41704                                  
 41705                                  ; End of WIN386 2.xx compatibility bullshit
 41706                                  
 41707                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41708                                  %if 0	
 41709                                     	; 30/04/2019
 41710                                  	;push	es
 41711                                  	;pop	ds
 41712                                  			; ds:si points to console device
 41713                                  
 41714                                  	; 24/04/2019 - Retro DOS v4.0
 41715                                  
 41716                                  	; 15/07/2018
 41717                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 41718                                  	; (Set INT 2Ah handler address to an 'IRET')
 41719                                  
 41720                                  	; need crit vector inited to use deviocall
 41721                                  	;push	ds			; preserve segment of device chain
 41722                                  	push	es ; 30/04/2019
 41723                                  
 41724                                  %endif
 41725                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41726 00007942 06                      	push	es
 41727                                  	; 17/12/2022
 41728                                  	;pop	ds
 41729                                  	;push	ds
 41730                                  
 41731 00007943 31C0                    	xor	ax,ax
 41732 00007945 8ED8                    	mov	ds,ax			; point DS to int vector table
 41733 00007947 B8[9A78]                	mov	ax,initiret
 41734                                  	;mov	[0A8h],ax  ; [2Ah*4]
 41735 0000794A A3A800                  	mov	[addr_int_ibm],ax
 41736 0000794D 8CC8                    	mov	ax,cs
 41737                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 41738 0000794F A3AA00                  	mov	[addr_int_ibm+2],ax
 41739 00007952 1F                      	pop	ds			; restore segment of device chain
 41740                                  
 41741 00007953 E81F02                  	call	CHARINIT  		; initialize console driver
 41742 00007956 56                      	push	si			; save pointer to header
 41743                                  
 41744 00007957 16                      	push	ss			; move pointer to dos data...
 41745 00007958 07                      	pop	es			; ...into ES
 41746                                  
 41747                                  	;initialize sft for file 0 (CON)
 41748                                  
 41749                                          ; 07/07/2018 - Retro DOS v3.0
 41750                                  	; 24/04/2019 - Retro DOS v4.0
 41751                                  	;mov	di,SFTABL+6 
 41752 00007959 BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 41753 0000795C B80300                          MOV     AX,3
 41754 0000795F AB                              STOSW           	; Refcount
 41755 00007960 FEC8                            DEC     AL
 41756 00007962 AB                              STOSW           	; Access rd/wr, compatibility
 41757 00007963 30C0                            XOR     AL,AL
 41758 00007965 AA                              STOSB           	; attribute
 41759                                  	;mov	al,0C3h
 41760 00007966 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 41761 00007968 AB                      	STOSW			; flags
 41762 00007969 89F0                            mov	ax,si
 41763 0000796B AB                              stosw			; device pointer in devptr	
 41764 0000796C 8CD8                            mov	ax,ds
 41765 0000796E AB                      	stosw
 41766 0000796F 31C0                    	xor	ax,ax	; 0
 41767 00007971 AB                      	stosw			; firclus
 41768 00007972 AB                      	stosw			; time
 41769 00007973 AB                      	stosw			; date
 41770 00007974 48                      	dec	ax	; -1
 41771 00007975 AB                      	stosw			; size
 41772 00007976 AB                      	stosw
 41773 00007977 40                      	inc	ax	; 0
 41774 00007978 AB                      	stosw			; position
 41775 00007979 AB                      	stosw
 41776                                  	;add	di,7
 41777 0000797A 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 41778                                  				; point at name
 41779                                  	;add	si,10
 41780 0000797D 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 41781                                  				; point to name
 41782 00007980 B90400                  	mov	cx,4
 41783 00007983 F3A5                    	rep	movsw		; name
 41784 00007985 B103                    	mov	cl,3
 41785 00007987 B020                    	mov	al," "
 41786 00007989 F3AA                    	rep	stosb		; extension
 41787                                  
 41788 0000798B 5E                      	pop	si		; get back pointer to header
 41789                                  
 41790                                  				; mark device as CON I/O
 41791                                  	; 15/07/2018
 41792                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 41793 0000798C 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 41794                                  	; 12/03/2018
 41795                                  	;mov	[ss:32h],si
 41796 00007990 368936[3200]            	MOV     [SS:BCON],SI
 41797                                  	;mov	[ss:34h],ds
 41798 00007995 368C1E[3400]                    MOV     [SS:BCON+2],DS
 41799                                  
 41800                                  	; initialize each device until the clock device is found
 41801                                  
 41802                                  CHAR_INIT_LOOP:
 41803 0000799A C534                            LDS     SI,[SI]			; AUX device
 41804 0000799C E8D601                  	call	CHARINIT 
 41805                                         	;15/07/2018
 41806                                  	;test	byte [SI+4],8
 41807 0000799F F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 41808 000079A3 74F5                            JZ      SHORT CHAR_INIT_LOOP
 41809                                  	; 12/03/2018
 41810                                  	;mov	[ss:2Eh],si
 41811 000079A5 368936[2E00]                    MOV     [SS:BCLOCK],SI
 41812                                  	;mov	[ss:30h],ds
 41813 000079AA 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 41814                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 41815                                  
 41816                                  	;mov	bp,4970			; bp = pointer to free mem
 41817                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 41818                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 41819                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 41820 000079AF BD6213                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 41821                                  
 41822 000079B2 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 41823 000079B7 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 41824                                  PERDRV:
 41825                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 41826 000079BC C534                            LDS	SI,[SI]			; Next device
 41827 000079BE 83FEFF                          CMP	SI,-1	; 0FFFFh
 41828 000079C1 7479                    	JZ	SHORT CONTINIT
 41829                                  
 41830 000079C3 E8AF01                          call	CHARINIT
 41831                                  
 41832                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 41833                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 41834                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 41835                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 41836                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 41837                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 41838                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 41839                                  
 41840                                          ; 15/07/2018
 41841                                  	;test	word [SI+4],8000h		; DEVTYP
 41842                                          ; 17/12/2022
 41843                                  	;test	byte [SI+5],80h
 41844 000079C6 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 41845                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 41846 000079CA 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 41847                                  
 41848 000079CC 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 41849 000079D1 30ED                    	XOR     CH,CH
 41850                                          ; 07/07/2018
 41851                                  	;MOV	[SI+10],CL		; Number of units in name field
 41852 000079D3 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 41853 000079D6 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 41854 000079DB 30F6                    	XOR     DH,DH
 41855 000079DD 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 41856 000079E2 1E                      	PUSH    DS
 41857 000079E3 56                              PUSH    SI
 41858 000079E4 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 41859                                  
 41860                                  PERUNIT:
 41861 000079E9 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 41862 000079EB 43                              INC     BX
 41863 000079EC 43                              INC     BX                      ; On to next BPB
 41864                                  	; 15/12/2022
 41865                                  	; 07/07/2018
 41866                                          ;mov	[ES:BP+DPB.DRIVE],DL
 41867 000079ED 26885600                	MOV     [ES:BP],DL
 41868                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41869                                  	;;mov	[ES:BP+0],DL
 41870                                  	;mov	[ES:BP+DPB.DRIVE],DL
 41871                                  
 41872                                  	;MOV	[ES:BP+1],DH
 41873 000079F1 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 41874 000079F5 53                              PUSH    BX
 41875 000079F6 51                              PUSH    CX
 41876 000079F7 52                              PUSH    DX
 41877                                  
 41878                                          ;invoke	$SETDPB
 41879 000079F8 E84D96                          CALL	_$SETDPB		; build DPB!
 41880                                  
 41881                                  	; 07/07/2018
 41882                                  	;MOV	AX,[ES:BP+2]
 41883 000079FB 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 41884                                          ; 12/03/2018
 41885 000079FF 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 41886 00007A04 7604                    	JBE     SHORT NOTMAX		; N:
 41887 00007A06 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 41888                                  NOTMAX:					
 41889                                  	; set the next dpb field in the currently built bpb
 41890                                  	; and mark as never accessed
 41891                                          
 41892                                  	; 24/04/2019
 41893 00007A0A 89E8                    	mov	ax,bp			; get pointer to DPB
 41894                                  	;add	ax,33
 41895 00007A0C 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 41896                                  					; set seg & offset of next DPB
 41897                                  	;mov	[es:bp+25],ax
 41898 00007A0F 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 41899                                  	;mov	[es:bp+27],es
 41900 00007A13 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 41901                                  					; mark as never accessed
 41902                                  	;mov	byte [es:bp+24],0FFh
 41903 00007A17 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 41904                                  
 41905 00007A1C 5A                      	POP     DX
 41906 00007A1D 59                              POP     CX
 41907 00007A1E 5B                              POP     BX
 41908 00007A1F 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 41909 00007A21 5E                              POP     SI
 41910 00007A22 1F                              POP     DS
 41911                                  					; ds:si -> device header
 41912                                  					; store it in the corresponding dpb
 41913                                  	; 07/07/2018
 41914                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 41915 00007A23 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 41916                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 41917 00007A27 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 41918                                  
 41919 00007A2B 1E                              PUSH    DS			; save pointer to device header
 41920 00007A2C 56                              PUSH    SI
 41921 00007A2D FEC6                            INC     DH			; inc unit #
 41922 00007A2F FEC2                            INC     DL			; inc drive #
 41923 00007A31 8ED8                            MOV     DS,AX			; restore segment of BPB array
 41924                                          ;add	bp,33 ; 24/04/2019
 41925 00007A33 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 41926 00007A36 E2B1                    	LOOP    PERUNIT			; process all units in each driver
 41927                                          
 41928 00007A38 5E                      	POP     SI			; restore pointer to device header
 41929 00007A39 1F                              POP     DS
 41930 00007A3A EB80                    	JMP	PERDRV			; process all drivers in chain
 41931                                  
 41932                                  CONTINIT:
 41933                                  	; 24/04/2019
 41934                                  	;sub	bp,33			; set link in last DPB to -1
 41935 00007A3C 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 41936                                  					; set last link offset & segment
 41937                                  	;mov	word [bp+25],0FFFFh
 41938 00007A3F C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 41939                                  	;mov	word [bp+27],0FFFFh
 41940 00007A44 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 41941                                  	;add	bp,33
 41942 00007A49 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 41943                                  					; the DPB chain is done.  
 41944 00007A4C 16                      	push	ss
 41945 00007A4D 1F                      	pop	ds
 41946                                  
 41947 00007A4E 89E8                    	mov	ax,bp
 41948 00007A50 E84AFE                  	call	ParaRound		; round up to segment
 41949                                  
 41950 00007A53 8CDA                    	mov	dx,ds			; dx = dosdata segment
 41951 00007A55 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 41952                                  
 41953 00007A57 BB0F00                  	mov	bx,0Fh
 41954                                  	
 41955                                  	; 24/05/2019
 41956                                  	;mov	cx,[ENDMEM]
 41957                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41958                                  	; 17/12/2022
 41959                                  	;mov	cx,[ENDMEM] 
 41960                                  					; set seg inpacketto dosdata					
 41961 00007A5A 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 41962                                  
 41963                                  ; Patch in the segments of the interrupt vectors with current code segment.
 41964                                  ; Also patch in the segment of the pointers in the dosdata area.
 41965                                  ;
 41966                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 41967                                  ; calls were done. The procedure patch_misc_segments is called multiple
 41968                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 41969                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 41970                                  
 41971 00007A5E 52                      	push	dx			; preserve first free segment
 41972                                  
 41973 00007A5F A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 41974 00007A62 8EC0                    	mov	es,ax			; es = segment of DOS
 41975 00007A64 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 41976                                  
 41977 00007A6A E8E101                  	call	patch_vec_segments	; uses AX as doscode segment
 41978 00007A6D E81602                  	call	patch_misc_segments	; patch in segments for sharer and 
 41979                                  					; other tables with seg in ES.
 41980                                  	; 17/12/2022
 41981                                  	; cx = 0
 41982 00007A70 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 41983                                  
 41984 00007A74 5A                      	pop	dx			; restore first free segment
 41985                                  
 41986                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 41987                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 41988                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 41989                                  ; low_mem_stub by seg_reinit.
 41990                                  
 41991                                  	;xor	ax,ax ; 0
 41992                                  	;mov	ds,ax
 41993                                  	;mov	es,ax
 41994                                  	; 17/12/2022
 41995                                  	; cx = 0
 41996                                  	;xor	cx,cx ; 0
 41997 00007A75 8ED9                    	mov	ds,cx
 41998 00007A77 8EC1                    	mov	es,cx
 41999                                  
 42000                                  	; set the segment of int 24 vector that was 
 42001                                  	; left out by patch_vec_segments above.
 42002                                  
 42003                                  	; 17/12/2022
 42004                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42005                                  ;%if 0
 42006                                  	; 24/05/2019
 42007                                  	;;mov	di,90h
 42008                                  	;;mov	di,4*int_fatal_abort
 42009                                  	;mov	di,addr_int_fatal_abort
 42010 00007A79 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 42011                                  
 42012 00007A7C 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 42013                                  	;mov	[di+2],ax  ; int 24h segment
 42014 00007A80 8905                    	mov	[di],ax ; 24/05/2019
 42015                                  
 42016                                  	;;mov	di,82h
 42017                                  	;mov	di,INTBASE+2
 42018                                  
 42019                                  ;%endif
 42020                                  	; 17/12/2022
 42021                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42022                                  	;;mov	di,90h
 42023                                  	;;mov	di,4*int_fatal_abort
 42024                                  	;mov	di,addr_int_fatal_abort
 42025                                  	;mov	ax,[ss:TEMP_DOSLOC]
 42026                                  	;mov	[di+2],ax  ; int 24h segment
 42027                                  	;;mov	di,82h
 42028                                  	;mov	di,INTBASE+2
 42029                                  
 42030                                  	; set default divide trap offset
 42031                                  
 42032                                  	;mov	word ptr ds:[0],offset doscode:divov
 42033 00007A82 C7060000[8453]          	mov	word [0],DIVOV	
 42034                                  
 42035                                  	; set vectors 20-28 and 2a-3f to point to iret.
 42036                                  
 42037                                  	;mov	di,80h
 42038 00007A88 BF8000                  	mov	di,INTBASE
 42039                                  	;mov	ax,offset doscode:irett
 42040 00007A8B B8[2103]                	mov	ax,IRETT
 42041                                  
 42042                                  	; 17/12/2022
 42043                                  	; cx = 0
 42044 00007A8E B109                    	mov	cl,9
 42045                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 42046                                  					;   sets offsets for ints 20h-28h
 42047                                  iset1:
 42048 00007A90 AB                      	stosw
 42049 00007A91 83C702                  	add	di,2
 42050 00007A94 E2FA                    	loop	iset1
 42051                                  
 42052 00007A96 83C704                  	add	di,4			; skip vector 29h
 42053                                  
 42054                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 42055                                  ;					;   sets offsets for ints 2ah-2fh
 42056                                  ;iset2:
 42057                                  ;	stosw
 42058                                  ;	add	di,2
 42059                                  ;	loop	iset2
 42060                                  
 42061                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42062                                  ; patch_vec_segments above. So skip it.
 42063                                  
 42064                                  ;	add	di,8			; skip vector 30h & 31h 
 42065                                  
 42066                                  	;;;
 42067                                  	; 06/05/2019 - Retro DOS v4.0
 42068                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 42069                                  	; 17/12/2022
 42070 00007A99 B105                    	mov	cl,5 ; 28/06/2019
 42071                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42072                                  	;mov	cx,6
 42073                                  iset2:
 42074 00007A9B AB                      	stosw
 42075 00007A9C 83C702                  	add	di,2
 42076 00007A9F E2FA                    	loop	iset2
 42077                                  
 42078                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42079                                  	; 17/12/2022
 42080 00007AA1 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 42081                                  	;add	di,8
 42082                                  	;;;
 42083                                  
 42084                                  	; 17/12/2022
 42085 00007AA4 B10E                    	mov	cl,14
 42086                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 42087                                  					;   sets offsets for ints 32h-3fh
 42088                                  iset3:
 42089 00007AA6 AB                      	stosw
 42090 00007AA7 83C702                  	add	di,2
 42091 00007AAA E2FA                    	loop	iset3
 42092                                  
 42093                                  ;if installed
 42094                                  	; set the offset of int2f handler
 42095                                  	;mov	word [0BCh],INT2F
 42096 00007AAC C706BC00[5007]          	mov	word [02Fh*4],INT2F
 42097                                  	; set segment to doscode as we have to do int 2f to check for XMS
 42098 00007AB2 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 42099                                  	;mov	[0BEh],ax
 42100 00007AB6 A3BE00                  	mov	[(02Fh*4)+2],ax
 42101                                  ;endif
 42102                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 42103                                  	; long jump will be patched in by seg_reinit
 42104                                  
 42105                                  	;mov	byte [C0h],0EAh
 42106 00007AB9 C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 42107                                  	;mov	byte [C1h],CALL_ENTRY
 42108 00007ABE C706C100[2203]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 42109                                  
 42110 00007AC4 C7068000[1B03]          	mov	word [addr_int_abort],QUIT	; INT 20h
 42111 00007ACA C7068400[4703]          	mov	word [addr_int_command],COMMAND ; INT 21h
 42112 00007AD0 C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 42113 00007AD6 89168A00                	mov	word [addr_int_terminate+2],dx	
 42114 00007ADA C7069400[7A05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 42115 00007AE0 C7069800[0106]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 42116 00007AE6 C7069C00[D262]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 42117                                  
 42118 00007AEC 16                      	push	ss
 42119 00007AED 1F                      	pop	ds
 42120                                  	
 42121                                  	; 24/05/2019
 42122                                  	;push	ss
 42123                                  	;pop	es
 42124                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42125                                  	; 17/12/2022
 42126                                  	;push	ss
 42127                                  	;pop	es
 42128                                  
 42129 00007AEE 52                      	push	dx			; remember address of arena
 42130                                  
 42131 00007AEF 42                      	inc	dx			; leave room for arena header
 42132                                  	;mov	[330h],dx
 42133 00007AF0 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 42134                                  
 42135 00007AF4 31FF                    	xor	di,di			; point es:di at end of memory
 42136 00007AF6 8EC2                    	mov	es,dx			; ...where psp will be
 42137 00007AF8 31C0                    	xor	ax,ax
 42138                                  	;mov	cx,80h			; psp is 128 words
 42139                                  	; 17/12/2022
 42140 00007AFA B180                    	mov	cl,128 ; 28/06/2019
 42141                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42142                                  	;mov	cx,128
 42143                                  
 42144 00007AFC F3AB                    	rep	stosw			; zero out psp area
 42145 00007AFE A1[4603]                        mov     ax,[ENDMEM]
 42146                                  	
 42147                                  	; 17/12/2022
 42148                                  	; cx = 0
 42149 00007B01 E89296                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 42150                                  
 42151                                  	; ds, es now point to PSP
 42152                                  
 42153 00007B04 16                      	push	ss
 42154 00007B05 1F                      	pop	ds
 42155                                  
 42156                                  	;mov	di,24
 42157 00007B06 BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 42158 00007B09 31C0                    	xor	ax,ax
 42159 00007B0B AB                      	stosw
 42160 00007B0C AA                      	stosb				; 0,1 and 2 are con device
 42161 00007B0D B0FF                    	mov	al,0FFh
 42162                                  	;mov	cx,FILPERPROC-3 ; 17
 42163                                  	; 17/12/2022
 42164                                  	; cx = 4
 42165 00007B0F B111                    	mov	cl,FILPERPROC-3 ; 17
 42166 00007B11 F3AA                    	rep	stosb			; rest are unused
 42167                                  
 42168 00007B13 16                      	push	ss
 42169 00007B14 07                      	pop	es
 42170                                  					; must be set to print messages
 42171 00007B15 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 42172                                  
 42173                                  ; after this point the char device functions for con will work for
 42174                                  ; printing messages
 42175                                  
 42176                                  	; 24/04/2019 - Retro DOS v4.0
 42177                                  
 42178                                  ; 12/05/2019
 42179                                  ;
 42180                                  ;write_version_msg:
 42181                                  ;
 42182                                  ;	;if	(not ibm)
 42183                                  ;	;mov	si,offset doscode:header
 42184                                  ;	mov	si,HEADER
 42185                                  ;outmes:
 42186                                  ;	;lods	cs:byte ptr [si]
 42187                                  ;	cs
 42188                                  ;	lodsb
 42189                                  ;	cmp	al,"$"
 42190                                  ;	je	short outdone
 42191                                  ;	call	OUTT
 42192                                  ;	jmp	short outmes
 42193                                  ;outdone:
 42194                                  ;	push	ss			; out stomps on segments
 42195                                  ;	pop	ds
 42196                                  ;	push	ss
 42197                                  ;	pop	es
 42198                                  ;	;endif
 42199                                  
 42200                                  	; at this point es is dosdata
 42201                                  
 42202                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 42203                                  	; in sysinittable (ms_data.asm)
 42204                                  
 42205                                  	;mov	si,0D28h
 42206 00007B19 BE[280D]                	mov	si,SysInitTable
 42207                                  
 42208                                  	; 17/12/2022
 42209                                  	; ds = es = ss
 42210                                  
 42211                                  	; 17/12/2022
 42212                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42213                                  ;%if 0
 42214                                  	;;mov	[es:si+6],es
 42215                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42216                                  	;;mov	[es:si+2],es
 42217                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42218                                  	
 42219 00007B1C 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 42220 00007B1F 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 42221                                  
 42222                                  	; buffhead -> dosdata:hashinitvar 
 42223                                  
 42224                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42225 00007B22 8C06[3A00]              	mov	[BUFFHEAD+2],es
 42226                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42227                                  	;mov	si,6Dh
 42228 00007B26 BE[6D00]                	mov	si,HASHINITVAR
 42229                                  	;mov	[es:BUFFHEAD],si
 42230 00007B29 8936[3800]              	mov	[BUFFHEAD],si
 42231                                  
 42232 00007B2D 5A                              pop     dx                      ; restore address of arena
 42233                                  
 42234                                  	;mov	[032Ch+2],dx
 42235 00007B2E 8916[2E03]                      mov     [DMAADD+2],dx
 42236                                  
 42237                                  	;mov	[es:arena_head],dx
 42238 00007B32 8916[2400]              	mov	[arena_head],dx
 42239                                  
 42240                                  ;%endif
 42241                                  
 42242                                  ; 17/12/2022
 42243                                  %if 0
 42244                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42245                                  	;;;
 42246                                  	;mov	[es:si+6],es
 42247                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42248                                  	;mov	[es:si+2],es
 42249                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42250                                  
 42251                                  	; buffhead -> dosdata:hashinitvar 
 42252                                  
 42253                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42254                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42255                                  	;mov	si,6Dh
 42256                                  	mov	si,HASHINITVAR
 42257                                  	mov	[es:BUFFHEAD],si
 42258                                  
 42259                                          pop     dx                      ; restore address of arena
 42260                                  
 42261                                  	;mov	[032Ch+2],dx
 42262                                          mov     [DMAADD+2],dx
 42263                                  
 42264                                  	mov	[es:arena_head],dx
 42265                                  	;;;
 42266                                  %endif
 42267                                  
 42268 00007B36 8EDA                            mov     ds,dx
 42269                                  
 42270                                  	;mov	byte [0],'Z'
 42271 00007B38 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 42272                                          ;mov	word [1],0
 42273 00007B3D C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 42274                                  
 42275 00007B43 36A1[4603]                      mov     ax,[ss:ENDMEM]
 42276 00007B47 29D0                    	sub	ax,dx
 42277 00007B49 48                              dec     ax
 42278 00007B4A A30300                          mov     [ARENA.SIZE],ax
 42279                                  
 42280                                  	; point to sft 0
 42281                                  
 42282                                  	;mov	di,offset dosdata:sftabl + sftable
 42283                                  	;mov	di,SFTABL+6
 42284 00007B4D BF[D200]                	mov	di,SFTABL+SFT.SFTable
 42285 00007B50 B80300                          mov     ax,3
 42286 00007B53 AB                              stosw           		; adjust refcount
 42287                                  
 42288                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 42289                                  
 42290                                          ;mov	di,offset dosdata:sysinittable
 42291                                  	;mov	di,0D28h
 42292 00007B54 BF[280D]                	mov	di,SysInitTable	
 42293                                  
 42294 00007B57 42                      	inc	dx			; advance dx from arena to psp
 42295 00007B58 8EDA                    	mov	ds,dx			; point ds to psp
 42296                                  
 42297                                  					; pass the address os seg_reinit 
 42298                                  					; in dx
 42299 00007B5A BA[C87B]                	mov	dx,seg_reinit
 42300 00007B5D B9[1375]                	mov	cx,exepatch_start
 42301 00007B60 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 42302                                  
 42303 00007B64 B8[9A78]                	mov	ax,SYSBUF
 42304 00007B67 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 42305                                  	
 42306 00007B6A 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 42307 00007B6F 368E16[8605]                    mov     ss,[ss:USER_SS]
 42308                                  
 42309 00007B74 CB                              retf
 42310                                  
 42311                                  ;
 42312                                  ; END OF DOSINIT
 42313                                  ;
 42314                                  ;--------------------------------------------------------------------------
 42315                                  
 42316                                  CHARINIT:
 42317                                  	; 24/04/2019 - Retro DOS v4.0
 42318                                  	; 07/07/2018 - Retro DOS v3.0
 42319                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 42320 00007B75 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 42321                                  	;mov	byte [ss:035Bh],0
 42322 00007B7B 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 42323                                  	;mov	byte [ss:035Ch],0
 42324 00007B81 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 42325                                  	;mov	word [ss:035BD],0
 42326 00007B87 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 42327 00007B8E 06                              PUSH	ES
 42328 00007B8F 53                              PUSH	BX
 42329 00007B90 50                              PUSH	AX
 42330 00007B91 BB[5A03]                        MOV	BX,DEVCALL
 42331                                          ;PUSH	CS
 42332 00007B94 16                      	PUSH	SS ; 30/04/2019
 42333 00007B95 07                              POP	ES
 42334 00007B96 E8ACCB                          CALL	DEVIOCALL2	
 42335 00007B99 58                      	POP	AX
 42336 00007B9A 5B                              POP	BX
 42337 00007B9B 07                              POP	ES
 42338 00007B9C C3                              RETN
 42339                                  
 42340                                  ; 25/04/2019 - Retro DOS v4.0
 42341                                  
 42342                                  ;-----------------------------------------------------------------------------
 42343                                  ;
 42344                                  ;	check_XMM: routine to check presence of XMM driver
 42345                                  ;
 42346                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 42347                                  ;
 42348                                  ;	USED:	none
 42349                                  ;
 42350                                  ;-----------------------------------------------------------------------------
 42351                                  
 42352                                  check_XMM: ; proc near
 42353                                  ;
 42354                                  ; determine whether or not an XMM driver is installed
 42355                                  ;
 42356 00007B9D 50                      	push	ax
 42357                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 42358 00007B9E B80043                  	mov	ax,4300h
 42359 00007BA1 CD2F                    	int	2Fh
 42360                                  		; - Multiplex - XMS - INSTALLATION CHECK
 42361                                  		; Return: AL = 80h XMS driver installed
 42362                                  		; AL <> 80h no driver
 42363 00007BA3 3C80                    	cmp	al,80h			; Q: installed
 42364 00007BA5 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 42365                                  ;
 42366                                  ; get the XMM control functions entry point, save it, we
 42367                                  ; need to call it later.
 42368                                  ;
 42369 00007BA7 53                      	push	bx
 42370 00007BA8 52                      	push	dx
 42371 00007BA9 1E                      	push	ds
 42372 00007BAA 06                      	push	es
 42373                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 42374 00007BAB B81043                  	mov	ax,4310h
 42375 00007BAE CD2F                    	int	2Fh
 42376                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 42377                                  		; Return: ES:BX -> driver entry point
 42378                                  
 42379 00007BB0 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42380                                  
 42381 00007BB5 891E[6311]              	mov	[XMMcontrol],bx
 42382 00007BB9 8C06[6511]              	mov	[XMMcontrol+2],es
 42383                                  cXMMexit:
 42384 00007BBD F8                      	clc
 42385 00007BBE 07                      	pop	es
 42386 00007BBF 1F                      	pop	ds
 42387 00007BC0 5A                      	pop	dx
 42388 00007BC1 5B                      	pop	bx
 42389 00007BC2 58                      	pop	ax
 42390 00007BC3 C3                      	retn				; done
 42391                                  ;
 42392                                  ; set carry if XMM driver not present
 42393                                  ;
 42394                                  cXMM_no_driver:
 42395 00007BC4 F9                      	stc
 42396 00007BC5 58                      	pop	ax
 42397 00007BC6 C3                      	retn
 42398                                  
 42399                                  ;-----------------------------------------------------------------------------
 42400                                  ;
 42401                                  ; Procedure Name : seg_reinit
 42402                                  ;
 42403                                  ; Inputs	 : ES has final dos code location
 42404                                  ;		   AX = 0 / 1
 42405                                  ;
 42406                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 42407                                  ;		   if AX =0
 42408                                  ;		      if first entry
 42409                                  ;			 patch segment & offset of vectors with stub
 42410                                  ;			 and stub with segment in ES
 42411                                  ;		      else
 42412                                  ;			 patch stub with segment in ES
 42413                                  ;
 42414                                  ;		   else if AX = 1
 42415                                  ;			patch segment of vectors with segment in ES	
 42416                                  ;
 42417                                  ; NOTE		 : This routine can be called at most twice!
 42418                                  ;
 42419                                  ; Regs Mod.	 : es, ax, di, cx, bx
 42420                                  ;-----------------------------------------------------------------------------
 42421                                  
 42422 00007BC7 00                      num_entry: db	0		; keeps track of the # of times this routine
 42423                                  				; has been called. (0 or 1)
 42424                                  
 42425                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 42426                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 42427                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 42428                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 42429                                  
 42430                                  seg_reinit:	; proc	far
 42431 00007BC8 1E                      	push	ds
 42432                                  
 42433 00007BC9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42434                                  
 42435 00007BCE E8B500                  	call	patch_misc_segments	; patch in segments for sharer and 
 42436                                  					; other tables with seg in ES.
 42437                                  	; 17/12/2022
 42438                                  	; cx = 0
 42439 00007BD1 39C8                    	cmp	ax,cx ; 0
 42440                                  	;cmp	ax,0
 42441 00007BD3 756C                    	jne	short patch_vec_seg	; patch vectors with segment in es
 42442                                  
 42443                                  	; 17/12/2022
 42444 00007BD5 2E380E[C77B]            	cmp	[cs:num_entry],cl ; 0
 42445                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 42446 00007BDA 7508                    	jne	short second_entry	; N: just patch the stub with 
 42447                                  					;    segment in ES
 42448                                  					; Y: patch the vectors with stub 
 42449 00007BDC 8CD8                    	mov	ax,ds
 42450 00007BDE E86D00                  	call	patch_vec_segments	; patch the segment of vectors
 42451 00007BE1 E8EC00                  	call	patch_offset		; patch the offsets of vectors 
 42452                                  					; with those in the stub.
 42453                                  	; 17/12/2022
 42454                                  	; cx = 0
 42455                                  second_entry:
 42456 00007BE4 8CC0                    	mov	ax,es			; patch the stub with segment in es
 42457                                  
 42458                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 42459                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 42460 00007BE6 BF[6210]                	mov	di,DOSINTTABLE
 42461                                  	; 17/12/2022
 42462                                  	; cx = 0
 42463                                  	;mov	cx,9
 42464 00007BE9 B109                    	mov	cl,9
 42465 00007BEB 1E                      	push	ds			
 42466 00007BEC 07                      	pop	es			; es:di -> DOSINTTABLE
 42467                                  
 42468                                  dosinttabloop:
 42469 00007BED 83C702                  	add	di,2
 42470 00007BF0 AB                      	stosw
 42471 00007BF1 E2FA                    	loop	dosinttabloop	
 42472                                  
 42473                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 42474                                  ; use the HMA, so we don't want to check CS
 42475                                  
 42476                                  ;ifndef ROMDOS
 42477 00007BF3 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 42478 00007BF6 724E                    	jb	short sr_done		; N: done
 42479                                  ;endif
 42480 00007BF8 E8A2FF                  	call	check_XMM		; Y: set up the XMS entry point
 42481 00007BFB 7249                    	jc	short sr_done		; failed to set up XMS do not do
 42482                                  					; A20 toggling in the stub.
 42483                                  	; 17/12/2022
 42484                                  	; cx = 0
 42485 00007BFD E84B01                  	call	patch_in_nops		; enable the stub to check A20 state
 42486                                  ; M021-
 42487                                  	;mov	byte [1211h],1
 42488 00007C00 C606[1112]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 42489                                  				
 42490                                  					; set pointer to the routine that 
 42491                                  					; patches buggy exepacked code.
 42492                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 42493 00007C05 C706[1212][6376]        	mov	word [FixExePatch],ExePatch
 42494                                  					; M068: set pointer to the routine 
 42495                                  					; M068: that detects copy protected
 42496                                  					; M068: apps
 42497                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 42498 00007C0B C706[6100][6378]        	mov	word [ChkCopyProt],IsCopyProt
 42499                                  
 42500                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 42501                                  
 42502                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42503                                  ;
 42504                                  ;; M020 - begin
 42505                                  ;
 42506                                  ;	call	WhatCPUType
 42507                                  ;	cmp	al,1
 42508                                  ;	jne	short sr_done 		; we need Rational Patch only
 42509                                  ;					;  on 286 systems
 42510                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 42511                                  ;	mov	word [RationalPatchPtr],RationalPatch
 42512                                  ;
 42513                                  ;; M020 - end
 42514                                  ;
 42515                                  ;	jmp	short sr_done
 42516                                  ;
 42517                                  ;patch_vec_seg:				; patch vectors with segment in es
 42518                                  ;	mov	ax,es
 42519                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 42520                                  ;					; NOTE we don't have to patch the 
 42521                                  ;					; offsets as they have been already
 42522                                  ;					; set to the doscode offsets at
 42523                                  ;					; DOSINIT.
 42524                                  ;sr_done:
 42525                                  ;	mov	byte [cs:num_entry],1
 42526                                  ;	pop	ds
 42527                                  ;	retf	; ! far return !
 42528                                  
 42529                                  ;----------------------------------------------------------------------------
 42530                                  ;
 42531                                  ; Procedure Name : WhatCPUType
 42532                                  ;
 42533                                  ; Inputs	 : none
 42534                                  ;
 42535                                  ; Outputs	 : AL = 0 if CPU <  286
 42536                                  ;		      = 1 if CPU == 286
 42537                                  ;		      = 2 if CPU >= 386
 42538                                  ;
 42539                                  ; Regs. Mod.	 : AX
 42540                                  ;
 42541                                  ;----------------------------------------------------------------------------
 42542                                  
 42543                                  WhatCPUType:
 42544                                  	; 25/04/2019 - Retro DOS v4.0
 42545                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 42546                                  
 42547                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 42548                                  
 42549                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 42550                                  ; 	it is called from both CODE and SYSINITSEG.
 42551                                  ;
 42552                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 42553                                  ;  Returns: AX = 0 if 8086 or 8088
 42554                                  ;              = 1 if 80286
 42555                                  ;              = 2 if 80386
 42556                                  
 42557                                  	; 04/11/2022
 42558                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 42559                                  
 42560                                  Get_CPU_Type:	;macro
 42561 00007C11 9C                      	pushf
 42562 00007C12 53                      	push	bx			; preserve bx
 42563 00007C13 31DB                    	xor	bx,bx			; init bx to zero
 42564                                  
 42565 00007C15 31C0                    	xor	ax,ax			; 0000 into AX
 42566 00007C17 50                      	push	ax			; put it on the stack...
 42567 00007C18 9D                      	popf				; ...then shove it into the flags
 42568 00007C19 9C                      	pushf				; get it back out of the flags...
 42569 00007C1A 58                      	pop	ax			; ...and into ax
 42570 00007C1B 2500F0                  	and	ax,0F000h		; mask off high four bits
 42571 00007C1E 3D00F0                  	cmp	ax,0F000h		; was it all 1's?
 42572 00007C21 740E                    	je	short cpu_8086		; aye; it's an 8086 or 8088
 42573                                  
 42574 00007C23 B800F0                  	mov	ax,0F000h		; now try to set the high four bits..
 42575 00007C26 50                      	push	ax
 42576 00007C27 9D                      	popf
 42577 00007C28 9C                      	pushf
 42578 00007C29 58                      	pop	ax			; ...and see what happens
 42579 00007C2A 2500F0                  	and	ax,0F000h		; any high bits set ?
 42580 00007C2D 7401                    	jz	short cpu_286		; nay; it's an 80286
 42581                                  
 42582                                  cpu_386:				; bx starts as zero
 42583 00007C2F 43                      	inc	bx			; inc twice if 386
 42584                                  cpu_286:				; just inc once if 286
 42585 00007C30 43                      	inc	bx
 42586                                  cpu_8086:				; don't inc at all if 086
 42587 00007C31 89D8                    	mov	ax,bx			; put CPU type value in ax
 42588 00007C33 5B                      	pop	bx			; restore original bx
 42589 00007C34 9D                      	popf
 42590                                  	
 42591                                  	;endm
 42592                                  
 42593                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 42594                                  	;retn
 42595                                  
 42596                                  	; 04/11/2022
 42597                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 42598 00007C35 3C01                    	cmp	al,1
 42599 00007C37 750D                    	jne	short sr_done 		; we need Rational Patch only
 42600                                  					;  on 286 systems
 42601 00007C39 C706[1412][A077]        	mov	word [RationalPatchPtr],RationalPatch
 42602                                  
 42603 00007C3F EB05                    	jmp	short sr_done
 42604                                  
 42605                                  patch_vec_seg:				; patch vectors with segment in es
 42606 00007C41 8CC0                    	mov	ax,es
 42607 00007C43 E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 42608                                  					; NOTE we don't have to patch the 
 42609                                  					; offsets as they have been already
 42610                                  					; set to the doscode offsets at
 42611                                  					; DOSINIT.
 42612                                  sr_done:
 42613 00007C46 2EC606[C77B]01          	mov	byte [cs:num_entry],1
 42614 00007C4C 1F                      	pop	ds
 42615 00007C4D CB                      	retf	; ! far return !
 42616                                  
 42617                                  ;----------------------------------------------------------------------------
 42618                                  ;
 42619                                  ; Procedure Name : patch_vec_segments
 42620                                  ;
 42621                                  ; Inputs	 : ax -> has segment address to patch in
 42622                                  ;		   ds -> DOSDATA
 42623                                  ;
 42624                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 42625                                  ;			
 42626                                  ;			0,20-28,3a-3f
 42627                                  ;
 42628                                  ; Regs. Mod.	 : DI,CX,DX,AX
 42629                                  ;
 42630                                  ;----------------------------------------------------------------------------
 42631                                  
 42632                                  patch_vec_segments:
 42633                                  
 42634 00007C4E 06                      	push	es
 42635                                  
 42636 00007C4F 31C9                    	xor	cx,cx ; 0
 42637 00007C51 8EC1                    	mov	es,cx
 42638                                  
 42639                                  	;mov	di,82h
 42640 00007C53 BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 42641                                  
 42642 00007C56 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 42643                                  
 42644                                  					; set vectors 20 & 21
 42645                                  	; 04/11/2022
 42646                                  	;mov	cx,2
 42647                                  	; 17/12/2022
 42648                                  	;mov	cl,2
 42649                                  ps_set1:
 42650 00007C5A AB                      	stosw	; int 20h segment
 42651                                  	;add	di,2
 42652                                  	; 17/12/2022
 42653 00007C5B 47                      	inc	di
 42654 00007C5C 47                      	inc	di
 42655                                  	;loop	ps_set1
 42656                                  
 42657                                  	; 17/12/2022
 42658 00007C5D AB                      	stosw	; int 21h segment
 42659                                  	;inc	di
 42660                                  	;inc	di
 42661                                  
 42662                                  	;add	di,4			; skip int 22h vector
 42663 00007C5E 83C706                  	add	di,6 ; *
 42664                                  
 42665 00007C61 AB                      	stosw				; set int 23h
 42666 00007C62 83C706                  	add	di,6			; skip int 24h
 42667                                  
 42668                                  					; set vectors 25-28 and 2a-3f 
 42669                                  	; 04/11/2022
 42670                                  	;mov	cx,4			; set 4 segments
 42671                                  	; 17/12/2022
 42672 00007C65 B104                    	mov	cl,4
 42673                                  ps_set2:
 42674 00007C67 AB                      	stosw				
 42675                                  	;add	di,2
 42676                                  	; 17/12/2022
 42677 00007C68 47                      	inc	di
 42678 00007C69 47                      	inc	di
 42679 00007C6A E2FB                    	loop	ps_set2
 42680                                  
 42681 00007C6C 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 42682                                  					;   already be set.
 42683                                  	; 04/11/2022
 42684                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 42685                                  	; 17/12/2022
 42686 00007C6F B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 42687                                  ps_set3:
 42688 00007C71 AB                      	stosw
 42689                                  	;add	di,2
 42690                                  	; 17/12/2022
 42691 00007C72 47                      	inc	di
 42692 00007C73 47                      	inc	di
 42693 00007C74 E2FB                    	loop	ps_set3
 42694                                  
 42695                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42696                                  ; below. So skip it.
 42697                                  
 42698 00007C76 83C708                  	add	di,8			; skip vector 30h & 31h 
 42699                                  	
 42700                                  	; 04/11/2022
 42701                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 42702                                  	; 17/12/2022
 42703 00007C79 B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 42704                                  ps_set4:
 42705 00007C7B AB                      	stosw
 42706                                  	;add	di,2
 42707                                  	; 17/12/2022
 42708 00007C7C 47                      	inc	di
 42709 00007C7D 47                      	inc	di
 42710 00007C7E E2FB                    	loop	ps_set4
 42711                                  
 42712                                  ; set offset of int2f
 42713                                  
 42714                                  ;if installed
 42715                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 42716                                  ;endif
 42717                                  	;mov	[es:0C3h],ax
 42718 00007C80 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 42719                                  	; 17/12/2022
 42720                                  	; cx = 0
 42721 00007C84 07                      	pop	es
 42722 00007C85 C3                      	retn
 42723                                  
 42724                                  ;---------------------------------------------------------------------------
 42725                                  ;
 42726                                  ; Procedure Name : patch_misc_segments
 42727                                  ;
 42728                                  ; Inputs	 : es = segment to patch in
 42729                                  ;		   ds = dosdata
 42730                                  ;
 42731                                  ; outputs	 : patches in the sharer and other tables in the dos
 42732                                  ;		   with right dos code segment in es
 42733                                  ;
 42734                                  ; Regs Mod	 : DI,SI,CX
 42735                                  ;
 42736                                  ;---------------------------------------------------------------------------
 42737                                  
 42738                                  patch_misc_segments:
 42739                                  
 42740 00007C86 53                      	push	bx
 42741 00007C87 06                      	push	es
 42742 00007C88 50                      	push	ax
 42743                                  
 42744 00007C89 8CC0                    	mov	ax,es			; ax - > DOS segment
 42745                                  	
 42746 00007C8B 1E                      	push	ds
 42747 00007C8C 07                      	pop	es			; es -> DOSDATA
 42748                                  	
 42749                                  ; initialize the jump table for the sharer...
 42750                                  
 42751                                  	;mov	di,offset dosdata:jshare
 42752                                  	;mov	di,90h
 42753 00007C8D BF[9000]                	mov	di,JShare
 42754                                  	;mov	bx,[0AAAh]
 42755 00007C90 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 42756                                  					; table was patched during the first
 42757                                  					; call to this routine
 42758 00007C94 B90F00                  	mov	cx,15
 42759                                  jumptabloop:
 42760                                  	;add	di,2			; skip offset
 42761                                  	; 17/12/2022
 42762 00007C97 47                      	inc	di
 42763 00007C98 47                      	inc	di
 42764 00007C99 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 42765 00007C9C 7405                    	je	short share_patch	; Y: patch in sharer table
 42766                                  					; N: 
 42767 00007C9E 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 42768 00007CA1 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 42769                                  share_patch:
 42770 00007CA3 AB                      	stosw				; drop in segment
 42771                                  no_share_patch:
 42772 00007CA4 E2F1                    	loop	jumptabloop
 42773                                  					; BUGBUG patching the country info 
 42774                                  					; with dosdata can be done inline
 42775                                  					; in dosinit.
 42776                                  					; for dos 3.3 country info
 42777                                  					; table address
 42778                                  
 42779                                  	;mov	si,offset dosdata:country_cdpg
 42780                                  	;mov	si,122Ah   
 42781 00007CA6 BE[2A12]                	mov	si,COUNTRY_CDPG
 42782                                  					; initialize double word
 42783                                  					; pointers with dosdata in ds
 42784                                  	;mov	[si+4Fh],ds
 42785                                  	;mov	[si+54h],ds
 42786                                  	;mov	[si+59h],ds
 42787                                  	;mov	[si+5Eh],ds
 42788                                  	;mov	[si+80h],ds
 42789                                  	;mov	[si+63h],ds
 42790 00007CA9 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 42791 00007CAC 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 42792 00007CAF 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 42793 00007CB2 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 42794 00007CB5 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 42795 00007CB9 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 42796                                  
 42797                                  					; fastopen routines are in doscode
 42798                                  					; so patch with doscode seg in ax
 42799                                  
 42800                                  	;mov	si,offset dosdata:fastopentable
 42801                                  	;mov	si,0D30h
 42802 00007CBC BE[300D]                	mov	si,FastOpenTable
 42803                                  
 42804                                  	; 17/12/2022
 42805                                  	; bx = [TEMP_DOSLOC]
 42806 00007CBF 83FBFF                  	cmp	bx,-1
 42807                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 42808 00007CC2 7405                    	je	short fast_patch	; Y: patch segment
 42809                                  	;mov	cx,[TEMP_DOSLOC]
 42810                                  					; Q: has fastopen patched in it's
 42811                                  					;    segment
 42812                                  	; 17/12/2022
 42813 00007CC4 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 42814                                  	;;cmp	cx,[si+4]
 42815                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 42816 00007CC7 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 42817                                  
 42818                                  fast_patch:
 42819                                  	;mov	[si+4],ax
 42820 00007CC9 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 42821                                  no_fast_patch:
 42822                                  	; 17/12/2022
 42823                                  	; cx = 0
 42824 00007CCC 58                      	pop	ax
 42825 00007CCD 07                      	pop	es
 42826 00007CCE 5B                      	pop	bx
 42827                                  
 42828 00007CCF C3                      	retn
 42829                                  
 42830                                  ;--------------------------------------------------------------------------
 42831                                  ;
 42832                                  ; Procedure Name : patch_offset
 42833                                  ; 
 42834                                  ; Inputs	 : NONE
 42835                                  ;
 42836                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 42837                                  ;		   0,20-28,3a-3f, and 30,31
 42838                                  ;
 42839                                  ;
 42840                                  ; Regs. Mod	 : AX,DI,CX
 42841                                  ;--------------------------------------------------------------------------
 42842                                  
 42843                                  patch_offset:
 42844 00007CD0 06                      	push	es		; preserve es
 42845                                  
 42846 00007CD1 31C0                    	xor	ax,ax
 42847 00007CD3 8EC0                    	mov	es,ax
 42848                                  				; set default divide trap address
 42849                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 42850                                  	;mov	word [es:0],108Ah
 42851 00007CD5 26C7060000[8A10]        	mov	word [es:0],ldivov
 42852                                  
 42853                                  	;mov	di,80h
 42854 00007CDC BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 42855                                  	;mov	ax,offset dosdata:lirett
 42856                                  	;mov	ax,10DAh
 42857 00007CDF B8[DA10]                	mov	ax,lirett
 42858                                  				; set vectors 20 & 21 to point to iret.
 42859                                  	; 17/12/2022
 42860                                  	; cx = 0
 42861                                  
 42862                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 42863                                  po_iset1:
 42864 00007CE2 AB                      	stosw	; int 20h offset
 42865                                  	;add	di,2 ; *
 42866                                  	;loop	po_iset1
 42867                                  	; 17/12/2022
 42868 00007CE3 47                      	inc	di
 42869 00007CE4 47                      	inc	di
 42870 00007CE5 AB                      	stosw	; int 21h offset
 42871                                  
 42872                                  	;add	di,4		; skip vector 22h
 42873                                  	; 17/12/2022
 42874 00007CE6 83C706                  	add	di,6 ; *	
 42875                                  
 42876 00007CE9 AB                      	stosw			; set offset of 23h
 42877                                  	;add	di,6		; skip 24h
 42878                                  	; 19/09/2023
 42879 00007CEA 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 42880                                  
 42881                                  				; set vectors 25-28 and 2a-3f to iret.
 42882                                  	; 04/11/2022
 42883                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 42884                                  	; 19/09/2023
 42885                                  	; 17/12/2022
 42886                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 42887                                  po_iset2:
 42888 00007CED AB                      	stosw		; set offset for int 28h ; 19/09/2023
 42889                                  	;add	di,2
 42890                                  	; 19/09/2023
 42891                                  	; 17/12/2022
 42892                                  	;inc	di
 42893                                  	;inc	di
 42894                                  	; 19/09/2023
 42895                                  	;loop	po_iset2
 42896                                  
 42897                                  	;add	di,4		; skip vector 29h
 42898                                  	; 19/09/2023
 42899 00007CEE 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 42900                                  
 42901                                  	; 04/11/2022
 42902                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 42903                                  	; 17/12/2022
 42904                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 42905 00007CF1 B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 42906                                  po_iset3:
 42907 00007CF3 AB                      	stosw
 42908                                  	;add	di,2
 42909                                  	; 17/12/2022
 42910 00007CF4 47                      	inc	di
 42911 00007CF5 47                      	inc	di
 42912 00007CF6 E2FB                    	loop	po_iset3
 42913                                  
 42914                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 42915                                  ; below. So skip it.
 42916                                  
 42917                                  	;add	di,8		; skip vector 30h & 31h 
 42918                                  	; 17/12/2022
 42919 00007CF8 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 42920                                  
 42921                                  	; 04/11/2022
 42922                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 42923                                  				;   sets offsets for ints 32h-3fh
 42924                                  	; 17/12/2022
 42925 00007CFB B10E                    	mov	cl,14 ; 26/06/2019
 42926                                  po_iset4:
 42927 00007CFD AB                      	stosw
 42928                                  	;add	di,2
 42929                                  	; 17/12/2022
 42930 00007CFE 47                      	inc	di
 42931 00007CFF 47                      	inc	di
 42932 00007D00 E2FB                    	loop	po_iset4
 42933                                  
 42934                                  ;if installed
 42935                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 42936                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 42937 00007D02 26C706BC00[C610]        	mov	word [es:(2Fh*4)],lint2f
 42938                                  ;endif
 42939                                  
 42940                                  ; set up entry point call at vectors 30-31h
 42941                                  	;mov	byte [es:0C0h],0EAh
 42942 00007D09 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 42943                                  	;mov	word [es:0C1h],10D0h
 42944                                  
 42945 00007D0F 26C706C100[D010]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 42946                                  
 42947                                  							; 19/09/2023
 42948                                  	;mov	word [es:80h],1094h
 42949 00007D16 26C7068000[9410]        	mov	word [es:addr_int_abort],lquit		; int 20h
 42950                                  	;mov	word [es:84h],109Eh
 42951 00007D1D 26C7068400[9E10]        	mov	word [es:addr_int_command],lcommand	; int 21h
 42952                                  	;mov	word [es:94h],10A8h
 42953 00007D24 26C7069400[A810]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 42954                                  	;mov	word [es:98h],10B2h
 42955 00007D2B 26C7069800[B210]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 42956                                  	;mov	word [es:9Ch],10BCh
 42957 00007D32 26C7069C00[BC10]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 42958                                  
 42959                                  	; 17/12/2022
 42960                                  	; CX = 0
 42961 00007D39 07                      	pop	es		; restore es
 42962 00007D3A C3                      	retn
 42963                                  
 42964                                  ;--------------------------------------------------------------------------
 42965                                  ;
 42966                                  ; 	Procedure Name	:	patch_in_nops
 42967                                  ;
 42968                                  ; 	Entry		: 	ES -> DOSDATA
 42969                                  ;
 42970                                  ;	Regs Mod	: 	cx, di
 42971                                  ;
 42972                                  ;	Description:
 42973                                  ;		This routine patches in 2 nops at the offsets specified in 
 42974                                  ;	patch_table. This basically enables the low mem stub to start 
 42975                                  ;	making XMS calls.
 42976                                  ;
 42977                                  ;--------------------------------------------------------------------------
 42978                                  
 42979                                  	; 04/11/2022
 42980                                  	; (MSDOS 5.0 MSDOS.SYS)
 42981                                  	; DOSCODE:0BC50h
 42982                                  
 42983                                  patch_table:	; label	byte
 42984                                  	;dw	offset dosdata:i0patch
 42985                                  	;dw	offset dosdata:i20patch
 42986                                  	;dw	offset dosdata:i21patch
 42987                                  	;dw	offset dosdata:i25patch
 42988                                  	;dw	offset dosdata:i26patch
 42989                                  	;dw	offset dosdata:i27patch
 42990                                  	;dw	offset dosdata:i2fpatch
 42991                                  	;dw	offset dosdata:cpmpatch
 42992 00007D3B [8A10]                  	dw	i0patch
 42993 00007D3D [9410]                  	dw	i20patch
 42994 00007D3F [9E10]                  	dw	i21patch
 42995 00007D41 [A810]                  	dw	i25patch
 42996 00007D43 [B210]                  	dw	i26patch
 42997 00007D45 [BC10]                  	dw	i27patch
 42998 00007D47 [C610]                  	dw	i2fpatch
 42999 00007D49 [D010]                  	dw	cpmpatch
 43000                                  
 43001                                  patch_table_size equ ($-patch_table)/2
 43002                                  
 43003                                  patch_in_nops:
 43004 00007D4B 50                      	push	ax
 43005 00007D4C 56                      	push	si
 43006 00007D4D BE[3B7D]                	mov	si,patch_table
 43007 00007D50 B89090                  	mov	ax,9090h ; nop, nop
 43008                                  	; 17/12/2022
 43009                                  	; cx = 0
 43010                                  	;mov	cx,8
 43011                                  	;mov	cx,patch_table_size ; 8
 43012 00007D53 B108                    	mov	cl,patch_table_size ; 8
 43013                                  pin_loop:
 43014 00007D55 2E8B3C                  	mov	di,[cs:si]
 43015 00007D58 AB                      	stosw
 43016                                  	;add	si,2
 43017                                  	; 17/12/2022
 43018 00007D59 46                      	inc	si
 43019 00007D5A 46                      	inc	si
 43020 00007D5B E2F8                    	loop	pin_loop
 43021 00007D5D 5E                      	pop	si
 43022 00007D5E 58                      	pop	ax
 43023 00007D5F C3                      	retn
 43024                                  
 43025                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43026                                  ; ---------------------------------------------------------------------------
 43027                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 43028                                  ; ---------------------------------------------------------------------------
 43029                                  
 43030                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 43031                                  DOSCODE_END:
 43032                                  	;times	9 db 0	; db 9 dup(0)
 43033                                  	; 18/12/2022
 43034 00007D60 0000                    	dw	0  ;	times 2 db 0
 43035                                  
 43036                                  ;align 16
 43037                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 43038                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 43039                                  
 43040                                  ; ---------------------------------------------------------------------------
 43041                                  
 43042                                  
 43043                                  ;memstrt label word
 43044                                  ; ---------------------------------------------------------------------------
 43045                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 43046                                  ; ---------------------------------------------------------------------------
 43047                                  
 43048                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 43049                                  
 43050                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 43051                                  ; the dos initialization segment
 43052                                  
 43053                                  ;ifndef ROMDOS
 43054                                  
 43055                                  ;doscode ends
 43056                                  
 43057                                  ;else
 43058                                  
 43059                                  ;;dosinitseg ends
 43060                                  
 43061                                  ;endif ; ROMDOS
 43062                                  
 43063                                  ;============================================================================
 43064                                  
 43065                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 43066                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 43067                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 43068                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 43069                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 43070                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 43071                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 43072                                  
 43073                                  ;; burasý doscode sonu
 43074                                  
 43075                                  ;============================================================================
 43076                                  ; DOSDATA
 43077                                  ;============================================================================
 43078                                  ; 29/04/2019 - Retro DOS 4.0
 43079                                  
 43080                                  ;[BITS 16]
 43081                                  
 43082                                  ;[ORG 0]
 43083                                  
 43084                                  ; 25/04/2019 - Retro DOS v4.0
 43085                                  
 43086                                  ;============================================================================
 43087                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 43088                                  ;============================================================================
 43089                                  
 43090                                  ;align 16
 43091                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 43092                                  	; (4970 bytes for MSDOS 6.21)
 43093                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 43094                                  
 43095                                  ;============================================================================
 43096                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 43097                                  ;============================================================================
 43098                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43099                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 43100                                  ; 16/07/2018 - Retro DOS 3.0	
 43101                                  
 43102                                  ;Break <Initialized data and data used at DOS initialization>
 43103                                  ;----------------------------------------------------------------------------
 43104                                  
 43105                                  ; We need to identify the parts of the data area that are relevant to tasks
 43106                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 43107                                  ; data will be gathered with the system code. The process data under 2.x will
 43108                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43109                                  ;
 43110                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43111                                  ; describing that data item.
 43112                                  
 43113                                  ;DOSDATA SEGMENT
 43114                                  
 43115                                  ; 04/11/2022
 43116                                  ;[ORG 0]
 43117                                  
 43118                                  ; ----------------------------------------------------------------------------
 43119                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43120                                  ; ----------------------------------------------------------------------------
 43121                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 43122                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 43123                                  ; ----------------------------------------------------------------------------
 43124                                  
 43125                                  ; 04/11/2022
 43126                                  
 43127                                  ;DOSDATA:0000h
 43128                                  
 43129 00007D62 90<rep Eh>              align 16
 43130                                  
 43131                                  ; ----------------------------------------------------------------------------
 43132                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43133                                  ; ----------------------------------------------------------------------------
 43134                                  
 43135                                  segment .data  vstart=0 ; 06/12/2022
 43136                                  								
 43137                                  ; ============================================================================
 43138                                  
 43139                                  ; 06/12/2022
 43140                                  ;DOSDATASTART equ $
 43141                                  DOSDATASTART:
 43142                                  
 43143                                  
 43144                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 43145                                  
 43146                                  	;; 03/11/2022
 43147                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 43148                                  
 43149                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43150                                  	;db	4 dup (?)	
 43151 00000000 00<rep 4h>              	times	4 db 0
 43152                                  
 43153                                  	; 29/04/2019 - Retro DOS v4.0 modification
 43154                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 43155                                  	;dw	0
 43156                                  
 43157                                  	;EVEN
 43158                                  
 43159                                  ;align 2
 43160                                  
 43161                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 43162                                  ; area compatability. This location must be incremented EACH TIME the data
 43163                                  ; area here gets mucked with.
 43164                                  ;
 43165                                  ; Also, do NOT change this position relative to DOSDATA:0.
 43166                                  
 43167                                  MSCT001S:	; LABEL BYTE
 43168                                  	
 43169                                  DataVersion:	
 43170 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 43171                                  
 43172                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 43173                                  ;hkn; been removed to DOSCODE above
 43174                                  
 43175                                  ;M044
 43176                                  ; First part of save area for saving last para of Window memory
 43177                                  
 43178                                  WinoldPatch1:	; db 8 dup (?)	;M044
 43179 00000006 00<rep 8h>              	times	8 db 0
 43180                                  
 43181                                  	; MSDOS 6.21 DOSDATA:000Eh
 43182                                  MYNUM:			; Offset 000Eh
 43183 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 43184                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 43185 00000010 0000                    	dw	0
 43186                                  OpenLRU:
 43187 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 43188                                  OEM_HANDLER: 		
 43189 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 43190                                  
 43191                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 43192                                  ;;			way that we leave DOS???? - jgl
 43193                                  
 43194                                  LeaveAddr:
 43195 00000018 [4C04]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 43196                                  RetryCount:		
 43197 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 43198                                  RetryLoop:
 43199 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 43200                                  LastBuffer:
 43201 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 43202                                  CONTPOS:
 43203 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 43204                                  arena_head:
 43205 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 43206                                  
 43207                                  ;; 16/07/2018
 43208                                  ;;***************************************************************************
 43209                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 43210                                  ;;***************************************************************************
 43211                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 43212                                  ;;
 43213                                  ;;	AH = 52h
 43214                                  ;;
 43215                                  ;;	on return:
 43216                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 43217                                  ;;		Known "invars" fields follow (varies with DOS version):
 43218                                  ;;
 43219                                  ;;	Offset Size		 Description
 43220                                  ;;
 43221                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 43222                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 43223                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 43224                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 43225                                  ;;		      0 indicates no unread input (DOS 3.x)
 43226                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 43227                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 43228                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 43229                                  ;;	  08   dword  pointer to $CLOCK device driver
 43230                                  ;;	  0C   dword  pointer to CON device driver
 43231                                  ;;	  10   byte   number of logical drives in system
 43232                                  ;;	  11   word   maximum bytes/block of any block device
 43233                                  ;;	  13   dword  pointer to DOS cache buffer header
 43234                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 43235                                  ;;		      point to the next device in device chain
 43236                                  ;;
 43237                                  ;;***************************************************************************
 43238                                  
 43239                                  ; The following block of data is used by SYSINIT. 
 43240                                  ; Do not change the order or size of this block
 43241                                  
 43242                                  ;SYSINITVAR:
 43243                                  ;----------------------------------------------------------------------------
 43244                                  SYSINITVARS:
 43245                                  DPBHEAD:
 43246 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 43247                                  SFT_ADDR:
 43248 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 43249                                  BCLOCK:
 43250 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 43251                                  BCON:
 43252 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 43253                                  MAXSEC:
 43254 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 43255                                  BUFFHEAD:
 43256 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 43257                                  CDSADDR:
 43258 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 43259                                  SFTFCB:
 43260 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 43261                                  KEEPCOUNT:
 43262 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 43263                                  NUMIO:
 43264 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 43265                                  CDSCOUNT:
 43266 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 43267                                  
 43268                                  ; A fake header for the NUL device
 43269                                  NULDEV:
 43270 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 43271                                  	;dw	8004h
 43272 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 43273 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 43274 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 43275 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 43276                                  SPLICES:
 43277 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 43278                                  
 43279                                  Special_Entries:
 43280 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 43281                                  UU_IFS_DOS_CALL:
 43282 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 43283                                  ; 
 43284                                  ; UU_IFS_HEADER:
 43285                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 43286                                  
 43287                                  ChkCopyProt:
 43288 00000061 0000                    	dw	0	; M068
 43289                                  A20OFF_PSP:
 43290 00000063 0000                    	dw	0	; M068
 43291                                  BUFFERS_PARM1:
 43292 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 43293                                  BUFFERS_PARM2:
 43294 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 43295                                  BOOTDRIVE:
 43296 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 43297                                  DDMOVE:
 43298 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 43299                                  EXT_MEM_SIZE:
 43300 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 43301                                  
 43302                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 43303                                  ;
 43304                                  ; Replaced by next two declarations
 43305                                  ;
 43306                                  ;UU_BUF_HASH_PTR:
 43307                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 43308                                  ;UU_BUF_HASH_COUNT:
 43309                                  ;	dw	1	; [SYSTEM] number of Hash entries
 43310                                  
 43311                                  BufferQueue:
 43312 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 43313                                  DirtyBufferCount:
 43314 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 43315                                  			; BUGBUG ---- change to byte
 43316                                  SC_CACHE_PTR:
 43317 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 43318                                  SC_CACHE_COUNT:
 43319 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 43320                                  BuffInHMA:
 43321 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 43322                                  LoMemBuff:
 43323 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 43324                                  			;  in Low mem when buffs are in HMA
 43325                                  ;
 43326                                  ; All variables which have UU_ as prefix can be reused for other
 43327                                  ; purposes and can be renamed. All these variables were used for
 43328                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 43329                                  ; manager ---- MOHANS
 43330                                  ;
 43331                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 43332                                  UU_BUF_EMS_FIRST_PAGE:	
 43333 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 43334                                  
 43335                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 43336                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 43337                                  ;	dw	0			
 43338                                  
 43339                                  CL0FATENTRY:
 43340 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 43341                                  			; is used in pack/unpack rts.
 43342                                  			; in fat.asm if cluster 0 is specified.
 43343                                  			; SR;
 43344                                  IoStatFail:
 43345 00000083 00                      	db	0	; IoStatFail has been added to 
 43346                                  			; record a fail on an I24 
 43347                                  			; issued from IOFUNC on a status call. 
 43348                                  
 43349                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 43350                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 43351                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 43352                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 43353                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 43354                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 43355                                  ;
 43356                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 43357                                  						; state of the 	buffers page.
 43358                                  						; This one byte is retained to 
 43359                                  						; keep the size of this data 
 43360                                  						; block the same.;
 43361                                  ALLOCMSAVE:
 43362 00000084 00                      	db	0	; M063: temp var. used to 
 43363                                  			; M063: save alloc method in
 43364                                  			; M063: msproc.asm
 43365                                  A20OFF_COUNT:
 43366 00000085 00                      	db	0	; M068: indiactes the # of 
 43367                                  			; M068: int 21 calls for 
 43368                                  			; M068: which A20 is off
 43369                                  DOS_FLAG:
 43370 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 43371                                  			; definitions
 43372                                  UNPACK_OFFSET:
 43373 00000087 0000                    	dw	0	; saves pointer to the start
 43374                                  			; of unpack code in exepatch.
 43375                                  			; asm.
 43376                                  UMBFLAG:
 43377 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 43378                                  			; M003: link state of the UMBs
 43379                                  			; M003: whether linked or not 
 43380                                  			; M003: to the DOS arena chain
 43381                                  SAVE_AX:
 43382 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 43383                                  			; M000: in msproc.asm
 43384                                  UMB_HEAD:
 43385 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 43386                                  			; M000: the first umb arena by 
 43387                                  			; M000: BIOS sysinit.
 43388                                  START_ARENA:
 43389 0000008E 0100                    	dw	1	; M000: this is the first arena 
 43390                                  			; M000: from which DOS will 
 43391                                  			; M000: start its scan for alloc.
 43392                                  
 43393                                  ; End of SYSINITVar block
 43394                                  ;----------------------------------------------------------------------------
 43395                                  
 43396                                  ; 25/04/2019 - Retro DOS v4.0
 43397                                  
 43398                                  ; 16/07/2018
 43399                                  ; MSDOS 3.3 (& MDOS 6.0)
 43400                                  
 43401                                  ;
 43402                                  ; Sharer jump table
 43403                                  ;
 43404                                  
 43405                                  ;PUBLIC	JShare
 43406                                  	;EVEN
 43407                                  
 43408                                  ;JShare	LABEL	DWORD
 43409                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 43410                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 43411                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 43412                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 43413                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 43414                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 43415                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 43416                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 43417                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 43418                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 43419                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 43420                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 43421                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 43422                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 43423                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 43424                                  
 43425                                  align 2
 43426                                  
 43427                                  JShare:
 43428 00000090 [4A07]0000              		DW	BadCall,0
 43429 00000094 [4E07]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 43430 00000098 [4E07]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 43431 0000009C [4A07]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 43432 000000A0 [4A07]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 43433 000000A4 [4A07]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 43434 000000A8 [4A07]0000              set_block:	DW	BadCall,0  ; 6   set_block
 43435 000000AC [4A07]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 43436 000000B0 [4E07]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 43437 000000B4 [4A07]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 43438 000000B8 [4A07]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 43439 000000BC [4A07]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 43440 000000C0 [4E07]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 43441 000000C4 [4A07]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 43442 000000C8 [4A07]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 43443                                  
 43444                                  
 43445                                  ;============================================================================
 43446                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 43447                                  ;============================================================================
 43448                                  ; 25/04/2019 - Retro DOS 4.0 
 43449                                  ; 16/07/2018 - Retro DOS 3.0	
 43450                                  
 43451                                  ;Break <Initialized data and data used at DOS initialization>
 43452                                  ;----------------------------------------------------------------------------
 43453                                  
 43454                                  ; We need to identify the parts of the data area that are relevant to tasks
 43455                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 43456                                  ; data will be gathered with the system code.  The process data under 2.x will
 43457                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43458                                  ;
 43459                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43460                                  ; describing that data item.
 43461                                  
 43462                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 43463                                  
 43464                                  ;
 43465                                  ; Table of routines for assignable devices
 43466                                  ;
 43467                                  ; MSDOS allows assignment if the following standard devices:
 43468                                  ;   stdin  (usually CON input)
 43469                                  ;   stdout (usually CON output)
 43470                                  ;   auxin  (usually AUX input)
 43471                                  ;   auxout (usually AUX output)
 43472                                  ;   stdlpt (usually PRN output)
 43473                                  ;
 43474                                  ; SPECIAL NOTE:
 43475                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 43476                                  ;   If we're not at end-of-file, then we always say that we have a character.
 43477                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 43478                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 43479                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 43480                                  ;   as EOF).
 43481                                  
 43482                                  ; Default SFTs for boot up
 43483                                  
 43484                                  		;PUBLIC	SFTABL
 43485                                  
 43486                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 43487 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 43488 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 43489 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 43490                                  		;times 295 db 0 ; MSDOS 6.0
 43491 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 43492                                  
 43493                                  ; the next two variables relate to the position of the logical stdout/stdin
 43494                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 43495                                  ; console.
 43496                                  		; DOSDATA:01F9h (MSDOS 6.21)
 43497 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 43498 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 43499                                  					;	   of buffered input call
 43500 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 43501 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 43502                                  		; DOSDATA:02FEh (MSDOS 6.21)
 43503 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 43504 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 43505 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 43506                                  switch_character:
 43507 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 43508 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 43509 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 43510 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 43511 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 43512                                  
 43513                                  ; The following table is a list of addresses that the sharer patches to be
 43514                                  ; PUSH AX to enable the critical sections
 43515                                  
 43516                                  		; DOSDATA:0315h (MSDOS 6.21)
 43517                                  
 43518                                  ;PUBLIC	CritPatch
 43519                                  
 43520                                  CritPatch:	; LABEL WORD
 43521                                  
 43522                                  ;IRP sect,<critDisk,critDevice>
 43523                                  
 43524                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 43525                                  ;
 43526                                  ;SR; Change code patch address to a variable in data segment
 43527                                  ;
 43528                                  ;       dw OFFSET DOSDATA: redir_patch
 43529                                  ;       dw OFFSET DOSDATA: redir_patch
 43530                                  ;
 43531                                  ;;hkn	Short_Addr  E&sect
 43532                                  ;;hkn	Short_Addr  L&sect
 43533                                  ;
 43534                                  ;ELSE
 43535                                  ;	DW	0
 43536                                  ;	DW	0
 43537                                  ;ENDIF
 43538                                  ;ENDM
 43539                                  ;	DW	0
 43540                                  
 43541                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 43542                                   
 43543 00000315 [0C0D]                  	dw 	redir_patch
 43544 00000317 [0C0D]                  	dw 	redir_patch			
 43545 00000319 [0C0D]                  	dw	redir_patch
 43546 0000031B [0C0D]                  	dw 	redir_patch
 43547                                  
 43548 0000031D 0000                    	dw	0
 43549                                  
 43550                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 43551                                  ; Also, IBM server 1.0 requires this also.
 43552                                  
 43553                                  	;EVEN			; Force swap area to start on word boundry
 43554 0000031F 90                      align 2
 43555                                  	;PUBLIC	SWAP_START
 43556                                  SWAP_START:	; LABEL BYTE
 43557 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 43558 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 43559 00000322 FF                      WPERR:		db -1		; Write protect error flag
 43560 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 43561 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 43562                                  
 43563                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 43564 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 43565 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 43566                                  ; end warning
 43567                                   
 43568 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 43569                                  
 43570 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 43571 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 43572 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 43573 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 43574 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 43575 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 43576                                  ;				; F.C. 2/17/86
 43577 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 43578 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 43579                                  ;align 2
 43580                                  SWAP_ALWAYS:	; 05/08/2018
 43581 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 43582                                  				;   extended error type stuff.
 43583                                  				;   NOTE: does not have Correct value on
 43584                                  				;   1-12, OEM, Get/Set CurrentPDB,
 43585                                  				;   GetExtendedError system calls)
 43586 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 43587 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 43588 00000340 0000                    FirstArena:	dw 0		; first free block found
 43589 00000342 0000                    BestArena:	dw 0		; best free block found
 43590 00000344 0000                    LastArena:	dw 0		; last free block found
 43591 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 43592 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 43593 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 43594 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 43595 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 43596 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 43597 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 43598                                  
 43599                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 43600                                  	;EVEN
 43601 0000034F 90                      align 2
 43602                                  		; DOSDATA:0350h (MSDOS 6.21)
 43603 00000350 00                      DAY:		db 0		; Day of month
 43604 00000351 00                      MONTH:		db 0		; Month of year
 43605 00000352 0000                    YEAR:		dw 0		; Year (with century)
 43606 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 43607 00000356 00                      WEEKDAY:	db 0		; Day of week
 43608                                  ; end warning
 43609                                  
 43610 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 43611 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 43612 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 43613                                  
 43614                                  ; Combination of all device call parameters
 43615                                  	;PUBLIC	DEVCALL 	;
 43616                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 43617                                  DEVCALL: ; 08/08/2018
 43618 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 43619 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 43620 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 43621 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 43622 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 43623                                  
 43624                                  	;PUBLIC	CALLUNIT
 43625                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 43626                                  CALLFLSH: ; LABEL   WORD	;
 43627 00000367 00                      CALLMED:	db 0		; media byte
 43628                                  CALLBR:	  ; LABEL   DWORD	;
 43629                                  	;PUBLIC	CALLXAD 	;
 43630                                  CALLXAD:  ; LABEL   DWORD	;
 43631 00000368 00                      CALLRBYT:	db 0		;
 43632                                  	;PUBLIC	CALLVIDM	;
 43633                                  CALLVIDM: ; LABEL   DWORD	;
 43634 00000369 00<rep 3h>              	times 3 db 0	;
 43635                                  	;PUBLIC CallBPB		;
 43636                                  CALLBPB:  ; LABEL   DWORD	;
 43637                                  CALLSCNT:			;
 43638 0000036C 0000                    		dw 0		;
 43639                                  	;PUBLIC	CALLSSEC	;
 43640                                  CALLSSEC: ; LABEL   WORD	;
 43641 0000036E 0000                    		dw 0		;
 43642 00000370 00000000                CALLVIDRW:	dd 0		;
 43643                                  ;MSDOS 6.0
 43644 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 43645 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 43646                                  
 43647                                  ; Same as above for I/O calls	;
 43648                                  				;
 43649                                  	;PUBLIC	IOCall		;
 43650                                  ;IOCALL	SRHEAD	<>		;
 43651                                  IOCALL:	; 07/08/2018
 43652 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 43653 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 43654 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 43655 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 43656 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 43657                                  IOFLSH:	  ; LABEL   WORD	;
 43658                                          ;PUBLIC  IORCHR		;
 43659                                  IORCHR:	  ; LABEL   BYTE	;
 43660 00000389 00                      IOMED:		db 0		;
 43661 0000038A 00000000                IOXAD:		dd 0		;
 43662 0000038E 0000                    IOSCNT:		dw 0		;	
 43663 00000390 0000                    IOSSEC:		dw 0		;
 43664                                  
 43665                                  ; Call struct for DSKSTATCHK	;
 43666 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 43667 00000393 00                      		db 0
 43668 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 43669 00000395 0000                    DSKSTST:	dw 0		;
 43670 00000397 00<rep 8h>              	times 8	db 0		;
 43671 0000039F 00                      DSKCHRET:	db 0		;
 43672                                  
 43673                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 43674                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 43675                                  ;hkn   short_addr  DEVIOBUF	;
 43676                                  	
 43677 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 43678 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 43679 000003A4 0100                    DSKSTCNT:	dw 1		;
 43680 000003A6 0000                    		dw 0		;
 43681                                  
 43682 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 43683                                  
 43684                                  ;MSDOS 6.0
 43685                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 43686 000003A9 00000000                		dd 0		;MS. position
 43687 000003AD 00000000                		dd 0		;MS. length
 43688                                  
 43689                                  ;hkn; the foll. was moved from dosmes.asm.
 43690                                  
 43691                                  	;EVEN
 43692 000003B1 90                      align 2				; needed to maintain offsets
 43693                                  
 43694                                  		; DOSDATA:03B2h (MSDOS 6.21)
 43695                                  USERNUM:
 43696 000003B2 0000                     		dw 0		; 24 bit user number
 43697 000003B4 00                      		db 0
 43698                                  ;IF IBM
 43699                                  ;IF IBMCOPYRIGHT
 43700                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 43701                                  ;ELSE
 43702                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 43703                                  ;ENDIF
 43704                                  ;ELSE
 43705 000003B5 FF                      OEMNUM:		DB 0FFh
 43706                                  ;ENDIF
 43707                                  
 43708                                  ;============================================================================
 43709                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 43710                                  ;============================================================================
 43711                                  ; 25/04/2019 - Retro DOS 4.0
 43712                                  
 43713                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 43714                                  ; ----------------------------------------------------------
 43715                                  ; This data section which was named as uninitialized data
 43716                                  ; (as overlayed by initialization code) but follows 
 43717                                  ; initialized data section from DOSDATA:03B6h address
 43718                                  ; (in otherwords, the method is different than MSDOS 3.3,
 43719                                  ; and there is not overlaying..)
 43720                                  ; **********************************************************
 43721                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 43722                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 43723                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 43724                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 43725                                  ; TIMEBUF is at offset 03B6h.
 43726                                  ; **********************************************************	
 43727                                  
 43728                                  ;Break <Uninitialized data overlayed by initialization code>
 43729                                  ;----------------------------------------------------------------------------
 43730                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 43731                                  ; Init code overlaps with data area below
 43732                                  
 43733                                  ; 	ORG     0
 43734                                  
 43735                                  MSDAT001S:	; label byte
 43736                                  
 43737                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 43738                                  TIMEBUF: ;	times 6 db 0
 43739 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 43740 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 43741                                  
 43742                                  ; The following areas are used as temp buffer in EXEC system call
 43743                                  
 43744                                  ; DOSDATA:03BEh
 43745                                  OPENBUF: ;times 64  dw	0
 43746 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 43747                                  RENBUF:	
 43748 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 43749                                  
 43750                                  ; Buffer for search calls
 43751                                  SEARCHBUF:	
 43752 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 43753                                  DUMMYCDS:  ;times 88 db 0
 43754 000004F3 00<rep 58h>             	times	curdirLen db 0
 43755                                  
 43756                                  ; End of contiguous buffer
 43757                                   
 43758                                  ; Temporary directory entry for use by many routines. Device directory
 43759                                  ; entries (bogus) are built here.
 43760                                  
 43761                                  ; DOSDATA:054Bh
 43762                                  
 43763                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 43764                                  
 43765                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 43766                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 43767                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 43768                                  
 43769                                  NAME1:	
 43770 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 43771                                  NAME2:
 43772 00000557 00<rep Dh>              	times	13 db	0 		;
 43773                                  DESTSTART:
 43774 00000564 0000                    	dw	0			;
 43775                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 43776                                  	;times	5  db	0
 43777 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 43778                                  
 43779                                  ; End Temporary directory entry.
 43780                                  
 43781 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 43782                                  EXTFCB:	
 43783 0000056C 00                      	db	0		; TRUE => extended FCB in use
 43784                                  SATTRIB:
 43785 0000056D 00                      	db	0		; Storage for search attributes
 43786                                  OPEN_ACCESS:
 43787 0000056E 00                      	db	0		; access of open system call
 43788                                  FOUNDDEL:
 43789 0000056F 00                      	db	0		; true => file was deleted
 43790                                  FOUND_DEV:
 43791 00000570 00                      	db	0		; true => search found a device
 43792                                  FSPLICE:
 43793 00000571 00                      	db	0		; true => do a splice in transpath
 43794                                  FSHARING:
 43795 00000572 00                      	db	0		; TRUE => no redirection
 43796                                  SECCLUSPOS:
 43797 00000573 00                      	db	0		; Position of first sector within cluster
 43798 00000574 00                      TRANS:	db	0		;
 43799 00000575 00                      READOP:	db	0		;
 43800                                  THISDRV:
 43801 00000576 00                      	db	0		;
 43802                                  CLUSFAC:
 43803 00000577 00                      	db	0		;
 43804                                  CLUSSPLIT:
 43805 00000578 00                      	db	0		;
 43806                                  INSMODE:
 43807 00000579 00                      	db	0		; true => insert mode in buffered read
 43808 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 43809 0000057B 00                      VOLID:	db	0		;
 43810                                  EXIT_TYPE:
 43811 0000057C 00                      	db	0		; type of exit...
 43812                                   
 43813                                  	;EVEN
 43814                                  
 43815 0000057D 90                      align 2
 43816                                  
 43817                                  ; DOSDATA:057Eh
 43818                                  
 43819                                  ; WARNING - the following two items are accessed as a word
 43820                                  
 43821                                  CREATING:
 43822 0000057E 00                      	db	0		; true => creating a file
 43823 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 43824                                  				; = DIRFREE iff BUGBUG
 43825                                  EXITHOLD:
 43826 00000580 00000000                	dd	0		; Temp location for proc terminate
 43827                                  USER_SP:
 43828 00000584 0000                    	dw	0		; User SP for system call
 43829                                  USER_SS:
 43830 00000586 0000                    	dw	0		; User SS for system call
 43831                                  CONTSTK:
 43832 00000588 0000                    	dw	0		;
 43833                                  THISDPB:
 43834 0000058A 00000000                	dd	0		;
 43835                                  CLUSSAVE:
 43836 0000058E 0000                    	dw	0		;
 43837                                  CLUSSEC:
 43838 00000590 00000000                	dd	0		;>32mb			AC0000
 43839                                  PREREAD:
 43840 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 43841 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 43842                                  FATBYTE:
 43843 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 43844                                  ; DOSDATA:059Ah
 43845 0000059A 00000000                DEVPT:	dd	0		;
 43846                                  THISSFT:
 43847 0000059E 00000000                	dd	0		; Address of user SFT
 43848                                  THISCDS:
 43849 000005A2 00000000                	dd	0		; Address of current CDS
 43850                                  THISFCB:
 43851 000005A6 00000000                	dd	0		; Address of user FCB
 43852 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 43853 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 43854 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 43855                                  WFP_START:
 43856 000005B2 0000                    	dw	0		;
 43857                                  REN_WFP:
 43858 000005B4 0000                    	dw	0		;
 43859                                  CURR_DIR_END:
 43860 000005B6 0000                    	dw	0		;
 43861                                  NEXTADD:
 43862 000005B8 0000                    	dw	0		;
 43863                                  LASTPOS:
 43864 000005BA 0000                    	dw	0		;
 43865                                  CLUSNUM:
 43866 000005BC 0000                    	dw	0		;
 43867 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 43868                                  DIRSTART:
 43869 000005C2 0000                    	dw	0		;
 43870 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 43871 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 43872                                                                  ; sectors
 43873                                  BYTSECPOS:
 43874 000005CC 0000                    	dw	0		; Position of first byte within sector
 43875                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 43876 000005CE 0000<rep 2h>                    times	2 dw 0
 43877                                  BYTCNT1:
 43878 000005D2 0000                    	dw	0		; No. of bytes in first sector
 43879                                  BYTCNT2:
 43880 000005D4 0000                    	dw	0		; No. of bytes in last sector
 43881 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 43882                                  ; DOSDATA:05D8h
 43883                                  ENTFREE:
 43884 000005D8 0000                    	dw	0		;
 43885                                  ENTLAST:
 43886 000005DA 0000                    	dw	0		;
 43887                                  NXTCLUSNUM:
 43888 000005DC 0000                    	dw	0		;
 43889                                  GROWCNT:
 43890 000005DE 00000000                	dd	0		;
 43891 000005E2 00000000                CURBUF:	dd	0		;
 43892 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 43893 000005EA 0000                    SAVEBX:	dw	0		;
 43894 000005EC 0000                    SAVEDS:	dw	0		;
 43895                                  RESTORE_TMP:
 43896 000005EE 0000                    	dw	0		; return address for restore world
 43897 000005F0 0000                    NSS:	dw	0
 43898 000005F2 0000                    NSP:	dw	0
 43899                                  ; DOSDATA:05F4h
 43900                                  EXTOPEN_FLAG:
 43901 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 43902                                  EXTOPEN_ON:
 43903 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 43904                                  EXTOPEN_IO_MODE:
 43905 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 43906                                  SAVE_DI:
 43907 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 43908                                  SAVE_ES:
 43909 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 43910                                  SAVE_DX:
 43911 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 43912                                  SAVE_CX:
 43913 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 43914                                  SAVE_BX:
 43915 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 43916                                  SAVE_SI:
 43917 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 43918                                  SAVE_DS:
 43919 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 43920                                  
 43921                                  ; DOSDATA:0607h
 43922                                  
 43923                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 43924                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 43925                                  ; the high 16, the low 16 are still in the register.
 43926                                  
 43927                                  HIGH_SECTOR:	
 43928 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 43929                                  ;OffsetMagicPatch:
 43930                                  ;	dw	MagicPatch ;scottq 8/6/92
 43931                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43932 00000609 0000                    	dw	0
 43933                                  				;see dos\mpatch.asm
 43934                                  DISK_FULL:
 43935 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 43936                                  TEMP_VAR:
 43937 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 43938                                  TEMP_VAR2:
 43939 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 43940 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 43941                                  DOS34_FLAG:
 43942 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 43943                                  NO_FILTER_PATH:
 43944 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 43945                                  NO_FILTER_DPATH:
 43946 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 43947                                  ; M008
 43948                                  AbsRdWr_SS:
 43949 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 43950                                  AbsRdWr_SP:
 43951 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 43952                                  
 43953                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 43954                                  ; M008
 43955                                   
 43956                                   
 43957                                  ; make those pushes fast!!!
 43958                                  
 43959                                  ;EVEN
 43960                                  
 43961 0000061F 90                      align 2
 43962                                  
 43963                                  StackSize   equ 180h  ; 384	; gross but effective
 43964                                  
 43965                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 43966                                  ;				; made up their minds about
 43967                                   
 43968                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 43969                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 43970                                  
 43971                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 43972                                   
 43973 00000620 00<rep 180h>                    times	StackSize db	0	;
 43974                                  AUXSTACK:			; LABEL   BYTE
 43975                                   
 43976 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 43977                                  DSKSTACK:			; LABEL   BYTE
 43978                                   
 43979 00000920 00<rep 180h>                    times	StackSize db	0	;
 43980                                  IOSTACK:			; LABEL   BYTE
 43981                                  
 43982                                  ; DOSDATA:0AA0h 
 43983                                   
 43984                                  ; patch space for Boca folks.
 43985                                  ; Say What????!!! This does NOT go into the swappable area!
 43986                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 43987                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 43988                                   
 43989                                  IBMPATCH: ; label byte
 43990                                  PRINTER_FLAG:
 43991 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 43992                                  VOLCHNG_FLAG:
 43993 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 43994                                  VIRTUAL_OPEN:
 43995 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 43996                                   
 43997                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 43998                                  
 43999                                  FSeek_drive:
 44000 00000AA3 00                      	db	0		;AN000; fastseek drive #
 44001                                  FSeek_firclus:
 44002 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 44003                                  FSeek_logclus:
 44004 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 44005                                  FSeek_logsave:
 44006 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 44007                                  
 44008                                  ; DOSDATA:0AAAh
 44009                                  
 44010                                  TEMP_DOSLOC:
 44011 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 44012                                  				;at SYSINIT time.
 44013                                  SWAP_END:  ; LABEL   BYTE
 44014                                   
 44015                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 44016                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 44017                                  ; to include this byte.
 44018                                   
 44019 00000AAC 00                      	db	0
 44020                                  
 44021                                  ; DOSDATA:0AADh
 44022                                   
 44023                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 44024                                  
 44025                                  ;DOSDATA    ENDS
 44026                                  
 44027                                  ;============================================================================
 44028                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 44029                                  ;============================================================================
 44030                                  ; 27/04/2019 - Retro DOS 4.0
 44031                                  ; 16/07/2018 - Retro DOS 3.0
 44032                                  
 44033                                  ;DOSDATA Segment
 44034                                  
 44035                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 44036                                  
 44037                                  ;
 44038                                  ; upper case table
 44039                                  ; ---------------------------------------------------------------------------
 44040                                  UCASE_TAB:	; label   byte
 44041 00000AAD 8000                    	dw	128
 44042 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 44043 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44044 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44045 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44046 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44047 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44048 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44049 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44050 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44051 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44052 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44053 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44054 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44055 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44056 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44057 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44058                                  ;
 44059                                  ; file upper case table
 44060                                  ; ---------------------------------------------------------------------------
 44061                                  FILE_UCASE_TAB:	; label  byte
 44062 00000B2F 8000                    	dw	128
 44063 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 44064 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44065 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44066 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44067 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44068 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44069 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44070 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44071 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44072 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44073 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44074 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44075 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44076 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44077 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44078 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44079                                  ;
 44080                                  ; file char list
 44081                                  ; ---------------------------------------------------------------------------
 44082                                  FILE_CHAR_TAB:	; label  byte
 44083 00000BB1 1600                    	dw	22				; length
 44084 00000BB3 0100FF                  	db	1,0,255 			; include all
 44085 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 44086 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 44086 00000BC2 7C3C3E2B3D3B2C     
 44087                                  	;db	24 dup (?)			; reserved
 44088 00000BC9 00<rep 18h>             	times	24 db 0
 44089                                  
 44090                                  ;
 44091                                  ; collate table
 44092                                  ; ---------------------------------------------------------------------------
 44093                                  COLLATE_TAB:	; label   byte
 44094 00000BE1 0001                    	dw	256
 44095 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 44096 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 44097 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 44098 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 44099 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 44100 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 44101 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 44102 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 44103 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 44104 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44105 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44106 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 44107 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 44108 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44109 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44110 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 44111 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 44112 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 44113 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 44114 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 44115 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 44116 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 44117 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44118 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44119 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44120 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44121 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44122 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44123 00000CC3 E053                    	db	224,"S"
 44124 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 44125 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44126 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44127 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44128                                  
 44129                                  ; ------------------------------------------------<MSKK01>----------------------
 44130                                  
 44131                                  ; DOSDATA:0CE3h
 44132                                  
 44133                                  ; 29/04/2019
 44134                                  
 44135                                  ; dbcs is not supported in DOS 3.3
 44136                                  ;		   DBCS_TAB	    CC_DBCS <>
 44137                                  ;
 44138                                  ; DBCS for DOS 4.00			   2/12/KK
 44139                                  
 44140                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 44141                                  ; ------------------------------------------------<MSKK01>----------------------
 44142                                  ;ifdef	DBCS
 44143                                  ; ifdef	  JAPAN
 44144                                  ;		dw	6		; <MSKK01>
 44145                                  ;		db	081h,09fh	; <MSKK01>
 44146                                  ;		db	0e0h,0fch	; <MSKK01>
 44147                                  ;		db	0,0		; <MSKK01>
 44148                                  ;
 44149                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 44150                                  ; endif
 44151                                  ; ifdef	  TAIWAN
 44152                                  ;		dw	4		; <TAIWAN>
 44153                                  ;		db	081h,0FEh	; <TAIWAN>
 44154                                  ;		db	0,0		; <TAIWAN>
 44155                                  ;
 44156                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44157                                  ; endif
 44158                                  ; ifdef   KOREA                         ; Keyl
 44159                                  ;               dw      4               ; <KOREA>
 44160                                  ;               db      0A1h,0FEh       ; <KOREA>
 44161                                  ;               db      0,0             ; <KOREA>
 44162                                  ;
 44163                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44164                                  ;  endif
 44165                                  ;else
 44166 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 44167                                  		;db	16 dup(0)	;AN000;  2/12/KK
 44168 00000CE5 00<rep 10h>             		times	16 db 0
 44169                                  
 44170                                  ;		dw	6		;  2/12/KK
 44171                                  ;		db	081h,09Fh	;  2/12/KK
 44172                                  ;		db	0E0h,0FCh	;  2/12/KK
 44173                                  ;		db	0,0		;  2/12/KK
 44174                                  ;
 44175                                  ;endif
 44176                                  ; ------------------------------------------------<MSKK01>----------------------
 44177                                  
 44178                                  ; DOSDATA:0CF5h
 44179                                  
 44180                                  ; ---------------------------------------------------------------------------
 44181                                  ;
 44182                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 44183                                  ;     ENTRY: AL = Character to map
 44184                                  ;     EXIT:  AL = The converted character
 44185                                  ; Alters no registers except AL and flags.
 44186                                  ; The routine should do nothing to chars below 80H.
 44187                                  ; ---------------------------------------------------------------------------
 44188                                  ; Example:
 44189                                  
 44190                                  MAP_CASE:
 44191                                  ;Procedure MAP_CASE,FAR
 44192                                  
 44193 00000CF5 3C80                    	CMP	AL,80h
 44194 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 44195 00000CF9 CB                      	RETF
 44196                                  Map1:
 44197 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 44198 00000CFC 1E                      	PUSH	DS
 44199 00000CFD 53                      	PUSH	BX
 44200 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 44201                                  FINISH:
 44202 00000D01 0E                      	PUSH	CS		;Move to DS
 44203 00000D02 1F                      	POP	DS
 44204 00000D03 D7                      	XLAT			;Get upper case character
 44205 00000D04 5B                      	POP	BX
 44206 00000D05 1F                      	POP	DS
 44207                                  L_RET:	
 44208 00000D06 CB                      	RETF
 44209                                  
 44210                                  ;EndProc MAP_CASE
 44211                                  
 44212                                  ; ---------------------------------------------------------------------------
 44213                                  
 44214                                  ; The variables for ECS version are moved here for the same data alignments
 44215                                  ; as IBM-DOS and MS-DOS.
 44216                                  
 44217                                  InterChar:
 44218 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 44219                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 44220                                  DUMMY:	; LABEL   WORD
 44221                                  InterCon:  
 44222 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 44223                                  SaveCurFlg:
 44224 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 44225                                  
 44226                                  ; ---------------------------------------------------------------------------
 44227                                  
 44228 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 44229                                  redir_patch:
 44230 00000D0C 00                      	  db	0
 44231                                  
 44232                                  ; DOSDATA:0D0Dh
 44233                                  
 44234                                  Mark1:	; label byte
 44235                                  
 44236                                  ;IF2
 44237                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 44238                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44239                                  ;	ENDIF
 44240                                  ;ENDIF
 44241                                  
 44242 00000D0D 00<rep 5h>              	  times 5 db 0
 44243                                  
 44244                                  ;############################################################################
 44245                                  ;
 44246                                  ; ** HACK FOR DOS 4.0 REDIR **
 44247                                  ; 
 44248                                  ; The redir requires the following:
 44249                                  ;
 44250                                  ;	MSVERS	offset D12H
 44251                                  ;	YRTAB	offset D14H
 44252                                  ; 	MONTAB	offset D1CH
 44253                                  ;
 44254                                  ; WARNING! WARNING!
 44255                                  ; 
 44256                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44257                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44258                                  ;
 44259                                  ; CURRENTLY MARK1 = 0D0DH
 44260                                  ;
 44261                                  ;############################################################################
 44262                                  
 44263                                  	;ORG	0D12h
 44264                                  
 44265                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 44266                                  
 44267                                  	;db	6
 44268                                  	;db	20
 44269                                  
 44270                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 44271                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 44272 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 44273 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 44274                                  
 44275                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 44276                                  ;
 44277                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 44278                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 44279                                  
 44280                                  ; Days in year
 44281                                  
 44282                                  YRTAB:   
 44283 00000D14 C8A6                    	DB	200,166			; Leap year
 44284 00000D16 C8A5                    	DB	200,165
 44285 00000D18 C8A5                    	DB	200,165
 44286 00000D1A C8A5                    	DB	200,165
 44287                                  
 44288                                  ; Days of each month
 44289                                  
 44290                                  MONTAB:        
 44291 00000D1C 1F                      	DB      31                      ; January
 44292                                  february:
 44293 00000D1D 1C                      	DB	28 			; February--reset each 
 44294                                  					; time year changes
 44295 00000D1E 1F                              DB      31                      ; March
 44296 00000D1F 1E                              DB      30                      ; April
 44297 00000D20 1F                              DB      31                      ; May
 44298 00000D21 1E                              DB      30                      ; June
 44299 00000D22 1F                              DB      31                      ; July
 44300 00000D23 1F                              DB      31                      ; August
 44301 00000D24 1E                              DB      30                      ; September
 44302 00000D25 1F                              DB      31                      ; October
 44303 00000D26 1E                              DB      30                      ; November
 44304 00000D27 1F                              DB      31                      ; December
 44305                                  
 44306                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 44307                                  
 44308                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 44309                                  
 44310                                  SysInitTable:
 44311                                  	;dw	SYSINITVAR
 44312 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 44313 00000D2A 0000                            dw      0		; segment
 44314 00000D2C [2A12]                          dw	COUNTRY_CDPG	; pointer to country tabl
 44315 00000D2E 0000                            dw      0		; segment of pointer
 44316                                  
 44317                                  ; DOS 3.3 F.C. 6/12/86
 44318                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 44319                                  
 44320                                  FastTable:				; a better name
 44321                                  FastOpenTable:
 44322 00000D30 0200                    	dw      2                       ; number of entries
 44323 00000D32 [1E13]                  	dw      FastRet			; pointer to ret instr.
 44324 00000D34 0000                    	dw      0                       ; and will be modified by
 44325 00000D36 [1E13]                  	dw      FastRet			; FASTxxx when loaded in
 44326 00000D38 0000                    	dw      0                       
 44327                                  
 44328                                  ; DOS 3.3 F.C. 6/12/86
 44329                                  
 44330                                  FastFlg:				; flags
 44331                                  FastOpenFlg:
 44332 00000D3A 00                      	db	0			; don't change the foll: order  
 44333                                  
 44334                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 44335                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 44336                                  ; or filled by FastOPen when calling FastOpen Lookup
 44337                                  
 44338                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 44339                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 44340                                  	;times	11 db 0
 44341 00000D3B 00<rep Bh>              	times	FEI.size db 0
 44342                                  
 44343                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 44344                                  ; when calling FastOpen Lookup
 44345                                  
 44346                                  Dir_Info_Buff:	; label  byte
 44347                                  	;db   	SIZE dir_entry dup (0)
 44348                                  	;times	32 db 0
 44349 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 44350                                  
 44351                                  Next_Element_Start:
 44352 00000D66 0000                    	dw	0			; save next element start offset
 44353                                  Del_ExtCluster:
 44354 00000D68 0000                    	dw	0			; for dos_delete                       
 44355                                  
 44356                                  ; The following is a stack and its pointer for interrupt 2F which is used
 44357                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 44358                                  ; not to destroy the INT 21 stack saved for the user.
 44359                                  
 44360                                  USER_SP_2F:	; LABEL  WORD
 44361 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 44362                                  
 44363                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 44364                                  DOS_TEMP:	; label  word		; temporary word
 44365                                  FAKE_STACK_2F:  
 44366                                  	; dw  14 dup (0)		; 12 register temporary storage
 44367 00000D6C 0000<rep Eh>            	times 14 dw 0
 44368                                  
 44369                                  Hash_Temp: 	;label  word		; temporary word             
 44370                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 44371 00000D88 0000<rep 4h>            	times 4 dw 0
 44372                                              	
 44373                                  SCAN_FLAG:	
 44374 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 44375                                  DATE_FLAG:
 44376 00000D91 0000                    	dw     0                	; flag to update the date
 44377                                  
 44378                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 44379 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 44380                                  
 44381                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 44382 00000D95 00000000                	dd     0               		; for extended error                   
 44383 00000D99 00000000                	dd     0			; for parser                           
 44384 00000D9D 00000000                	dd     0			; for critical errror                  
 44385 00000DA1 00000000                	dd     0			; for IFS                              
 44386 00000DA5 00000000                	dd     0			; for code reduction                   
 44387                                  
 44388                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 44389 00000DA9 FFFFFFFF                	dd     -1                                                        
 44390                                  SC_SECTOR_SIZE:
 44391 00000DAD 0000                    	dw	0			; sector size for SC                 
 44392                                  SC_DRIVE:
 44393 00000DAF 00                      	db	0			; drive # for secondary cache        
 44394                                  CurSC_DRIVE:
 44395 00000DB0 FF                      	db	-1			; current SC drive                   
 44396                                  CurSC_SECTOR:
 44397 00000DB1 00000000                	dd	0			; current SC starting sector         
 44398                                  SC_STATUS:
 44399 00000DB5 0000                    	dw	0			; SC status word                     
 44400                                  SC_FLAG:
 44401 00000DB7 00                      	db	0			; SC flag                            
 44402                                  AbsDskErr:
 44403 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 44404                                                                                            
 44405                                  NO_NAME_ID:	; label byte                                                           
 44406 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 44406 00000DC3 2020               
 44407                                  
 44408                                  ;hkn; moved from TABLE segment in kstrin.asm
 44409                                  
 44410                                  KISTR001S:	; label	byte		; 2/17/KK
 44411 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 44412                                  KISTR001E:	; label	byte		; 2/17/KK
 44413                                  
 44414                                  ; the nul device driver used to be part of the code. However, since the 
 44415                                  ; header is in the data, and the entry points are only given as an offset,
 44416                                  ; the strategy and interrupt entry points must also be in the data now.
 44417                                  
 44418                                  ; DOSDATA:0DC6h
 44419                                  
 44420                                  SNULDEV:
 44421                                  ;procedure snuldev,far
 44422                                  	;or	word [es:bx+3],100h
 44423                                  	; 17/12/2022
 44424                                  	;or	byte [es:bx+4],01h
 44425                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 44426                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 44427 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 44428                                  INULDEV:
 44429 00000DCC CB                      	retf				; must not be a return!
 44430                                  ;endproc snuldev
 44431                                  
 44432                                  ;M044
 44433                                  ; Second part of save area for saving last para of Windows memory
 44434                                  
 44435                                  WinoldPatch2:
 44436                                  	;db	8 dup (?)	; M044
 44437 00000DCD 00<rep 8h>              	times	8 db 0	
 44438                                  UmbSave2:
 44439                                  	;db	5 dup (?)	; M062
 44440 00000DD5 00<rep 5h>              	times	5 db 0
 44441                                  UmbSaveFlag:
 44442 00000DDA 00                      	db	0		; M062
 44443                                  
 44444                                  ; DOSDATA:0DDBh
 44445                                  
 44446                                  Mark2:	; label byte
 44447                                  
 44448                                  ;IF2
 44449                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 44450                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44451                                  ;	ENDIF
 44452                                  ;ENDIF
 44453                                  
 44454                                  ;############################################################################
 44455                                  ;
 44456                                  ; ** HACK FOR DOS 4.0 REDIR **
 44457                                  ; 
 44458                                  ; The redir requires the following:
 44459                                  ;
 44460                                  ;	ERR_TABLE_21	offset DDBH
 44461                                  ;	ERR_TABLE_24	offset E5BH
 44462                                  ; 	ErrMap24	offset EABH
 44463                                  ;
 44464                                  ; WARNING! WARNING!
 44465                                  ;
 44466                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44467                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44468                                  ;
 44469                                  ; CURRENTLY MARK2 = 0DD0H
 44470                                  ;
 44471                                  ;############################################################################
 44472                                  
 44473                                  	;ORG	0DDBh
 44474                                  
 44475                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 44476                                  
 44477                                  ; ---------------------------------------------------------------------------
 44478                                  ;
 44479                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 44480                                  ; errors. Each entry is 4 bytes long:
 44481                                  ;
 44482                                  ;       Err#,Class,Action,Locus
 44483                                  ;
 44484                                  ; A value of 0FFh indicates a call specific value (ie. should already
 44485                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44486                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 44487                                  ;
 44488                                  ; ---------------------------------------------------------------------------
 44489                                  
 44490                                  ;ErrTab  Macro   err,class,action,locus
 44491                                  ;ifidn <locus>,<0FFh>
 44492                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 44493                                  ;ELSE
 44494                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 44495                                  ;ENDIF
 44496                                  ;ENDM
 44497                                  
 44498                                  ERR_TABLE_21: ; LABEL   BYTE
 44499 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 44500 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44501 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44502 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 44503 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 44504 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44505 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 44506 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44507 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44508 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44509 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44510 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44511 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 44512 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44513 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 44514 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 44515 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44516 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 44517 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44518 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44519 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 44520 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 44521 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 44522 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44523 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 44524 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44525 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 44526 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44527                                      ; MSDOS 6.0
 44528 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44529 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44530 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 44531 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 44532                                  
 44533                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 44534                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 44535                                  ;		db 2,8,3,2
 44536                                  ;		db 3,8,3,2
 44537                                  ;		db 4,1,4,1
 44538                                  ;		db 5,3,3,0FFh
 44539                                  ;		db 6,7,4,1
 44540                                  ;		db 7,7,5,5
 44541                                  ;		db 8,1,4,5
 44542                                  ;		db 9,7,4,5
 44543                                  ;		db 0Ah,7,4,5
 44544                                  ;		db 0Bh,9,3,1
 44545                                  ;		db 0Ch,7,4,1
 44546                                  ;		db 0Dh,9,4,1
 44547                                  ;		db 0Fh,8,3,2
 44548                                  ;		db 10h,3,3,2
 44549                                  ;		db 11h,0Dh,3,2
 44550                                  ;		db 12h,8,3,2
 44551                                  ;		db 50h,0Ch,3,2
 44552                                  ;		db 20h,0Ah,2,2
 44553                                  ;		db 21h,0Ah,2,2
 44554                                  ;		db 54h,1,4,0FFh
 44555                                  ;		db 56h,3,3,1
 44556                                  ;		db 52h,1,4,2
 44557                                  ;		db 32h,9,3,3
 44558                                  ;		db 55h,0Ch,3,3
 44559                                  ;		db 57h,9,3,1
 44560                                  ;		db 53h,0Dh,4,1
 44561                                  ;		db 24h,1,4,5
 44562                                  ; MSDOS 6.0 (MSDOS 6.21)
 44563                                  ;		db 26h,1,4,1
 44564                                  ;		db 27h,1,4,1
 44565                                  ;		db 5Ah,0Dh,4,2
 44566                                  ; MSDOS 6.0 & MSDOS 3.3
 44567                                  ;		db 0FFh,0FFh,0FFh,0FFh
 44568                                  
 44569                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44570                                  
 44571                                  ; ---------------------------------------------------------------------------
 44572                                  ;
 44573                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 44574                                  ; errors. Each entry is 4 bytes long:
 44575                                  ;
 44576                                  ;       Err#,Class,Action,Locus
 44577                                  ;
 44578                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 44579                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44580                                  ; THE END.
 44581                                  ;
 44582                                  ; ---------------------------------------------------------------------------
 44583                                  
 44584                                  ERR_TABLE_24: ; LABEL   BYTE
 44585 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44586 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44587 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 44588 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44589 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44590 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44591 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 44592 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44593 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44594 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 44595 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 44596 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 44597 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 44598 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44599 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44600 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44601 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44602 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44603 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44604 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 44605                                  
 44606                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 44607                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 44608                                  ;		db 14h,4,5,1
 44609                                  ;		db 15h,5,7,0FFh
 44610                                  ;		db 16h,4,5,1
 44611                                  ;		db 17h,0Bh,4,2
 44612                                  ;		db 18h,4,5,1
 44613                                  ;		db 19h,5,1,2
 44614                                  ;		db 1Ah,0Bh,7,2
 44615                                  ;		db 1Bh,0Bh,4,2
 44616                                  ;		db 1Ch,2,7,4
 44617                                  ;		db 1Dh,5,4,0FFh
 44618                                  ;		db 1Eh,5,4,0FFh
 44619                                  ;		db 1Fh,0Dh,4,0FFh
 44620                                  ;		db 20h,0Ah,2,2
 44621                                  ;		db 21h,0Ah,2,2
 44622                                  ;		db 22h,0Bh,7,2
 44623                                  ;		db 32h,9,3,3
 44624                                  ;		db 23h,7,4,1
 44625                                  ;		db 24h,1,4,5
 44626                                  ;		db 0FFh,0Dh,5,0FFh
 44627                                  
 44628                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 44629                                  
 44630                                  ; ---------------------------------------------------------------------------
 44631                                  ;
 44632                                  ; We need to map old int 24 errors and device driver errors into the new set
 44633                                  ; of errors. The following table is indexed by the new errors
 44634                                  ;
 44635                                  ; ---------------------------------------------------------------------------
 44636                                  
 44637                                  ;Public  ErrMap24
 44638                                  ErrMap24: ; Label   BYTE
 44639 00000EAB 13                          DB  error_write_protect	; 0
 44640 00000EAC 14                          DB  error_bad_unit		; 1
 44641 00000EAD 15                          DB  error_not_ready		; 2
 44642 00000EAE 16                          DB  error_bad_command	; 3
 44643 00000EAF 17                          DB  error_CRC		; 4
 44644 00000EB0 18                          DB  error_bad_length	; 5
 44645 00000EB1 19                          DB  error_seek		; 6
 44646 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 44647 00000EB3 1B                          DB  error_sector_not_found	; 8
 44648 00000EB4 1C                          DB  error_out_of_paper	; 9
 44649 00000EB5 1D                          DB  error_write_fault	; A
 44650 00000EB6 1E                          DB  error_read_fault	; B
 44651 00000EB7 1F                          DB  error_gen_failure	; C
 44652 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 44653 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 44654 00000EBA 22                          DB  error_wrong_disk	; F
 44655                                  
 44656                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 44657                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 44658                                  	
 44659                                  ErrMap24End: ; LABEL   BYTE
 44660                                  
 44661                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44662                                  
 44663                                  ; ---------------------------------------------------------------------------
 44664                                  
 44665                                  ; 27/04/2019 - Retro DOS v4.0
 44666                                  
 44667                                  FIRST_BUFF_ADDR:
 44668 00000EBB 0000                    	dw	0			; first buffer address               
 44669                                  SPECIAL_VERSION:
 44670 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 44671                                  FAKE_COUNT:
 44672 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 44673                                  OLD_FIRSTCLUS:
 44674 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 44675                                  
 44676                                  ; ---------------------------------------------------------------------------
 44677                                  
 44678                                  ;smr; moved from TABLE segment in exec.asm
 44679                                  
 44680 00000FC0 0000                    exec_init_SP: dw 0
 44681 00000FC2 0000                    exec_init_SS: dw 0
 44682 00000FC4 0000                    exec_init_IP: dw 0
 44683 00000FC6 0000                    exec_init_CS: dw 0
 44684                                  
 44685                                  exec_signature:
 44686 00000FC8 0000                    	dw	0	; must contain 4D5A  (yay zibo!)
 44687                                  exec_len_mod_512:
 44688 00000FCA 0000                    	dw	0	; low 9 bits of length
 44689                                  exec_pages:
 44690 00000FCC 0000                    	dw	0	; number of 512b pages in file
 44691                                  exec_rle_count:
 44692 00000FCE 0000                    	dw	0	; count of reloc entries
 44693                                  exec_par_dir:
 44694 00000FD0 0000                    	dw	0	; number of paragraphs before image
 44695                                  exec_min_BSS:
 44696 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 44697                                  exec_max_BSS:
 44698 00000FD4 0000                    	dw	0	; max number of para of BSS
 44699                                  exec_SS:
 44700 00000FD6 0000                    	dw	0	; stack of image
 44701                                  exec_SP:
 44702 00000FD8 0000                    	dw	0	; SP of image
 44703                                  exec_chksum:
 44704 00000FDA 0000                    	dw	0	; checksum  of file (ignored)
 44705                                  exec_IP:
 44706 00000FDC 0000                    	dw	0	; IP of entry
 44707                                  exec_CS:
 44708 00000FDE 0000                    	dw	0	; CS of entry
 44709                                  exec_rle_table:
 44710 00000FE0 0000                    	dw	0	; byte offset of reloc table
 44711                                  
 44712                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 44713                                  
 44714                                  ;smr; eom
 44715                                  
 44716                                  ; ---------------------------------------------------------------------------
 44717                                  
 44718                                  ;SR;
 44719                                  ; WIN386 instance table for DOS
 44720                                  
 44721                                  Win386_Info:
 44722 00000FE2 0300                    	db	3, 0
 44723 00000FE4 000000000000000000-     	dd	0, 0, 0
 44723 00000FED 000000             
 44724 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 44725                                  
 44726                                  Instance_Table:
 44727 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 44728 00000FFA [3200]00000400          	dw	BCON, 0, 4
 44729 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 44730 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 44731 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 44732 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 44733 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 44734 0000101E 00000000                	dw	0, 0
 44735                                  
 44736                                  ; M001; SR;
 44737                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 44738                                  ; M001; some DOS variables. Note that the only really important variable in 
 44739                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 44740                                  ; M001; which does not need to be done in DOS 5.0. 
 44741                                  
 44742                                  Win386_DOSVars:
 44743 00001022 05                      	db	5	;Major version 5 ; M001
 44744 00001023 00                      	db	0	;Minor version 0 ; M001
 44745 00001024 [EC05]                  	dw	SAVEDS	; M001
 44746 00001026 [EA05]                  	dw	SAVEBX	; M001
 44747 00001028 [2103]                  	dw	INDOS	; M001
 44748 0000102A [3E03]                  	dw	USER_ID	; M001
 44749 0000102C [1503]                  	dw	CritPatch ; M001
 44750 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 44751                                  
 44752                                  ;SR;
 44753                                  ; Flag to indicate whether WIN386 is running or not
 44754                                  
 44755 00001030 00                      IsWin386: db	0
 44756                                  
 44757                                  ;M018
 44758                                  ; This variable contains the path to the VxD device needed for Win386
 44759                                  
 44760 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 44760 0000103A 2E33383600         
 44761                                  
 44762                                  ;End WIN386 support
 44763                                  
 44764                                  ; ---------------------------------------------------------------------------
 44765                                  
 44766                                  ;SR;
 44767                                  ; These variables have been added for the special lie support for device
 44768                                  ;drivers.
 44769                                  ;
 44770                                  
 44771                                  DriverLoad:	
 44772 0000103F 01                      	db	1	;initialized to do special handling
 44773                                  BiosDataPtr:
 44774 00001040 00000000                	dd	0
 44775                                  
 44776                                  ; 27/04/2019 - Retro DOS v4.0
 44777                                  ; 04/11/2022
 44778                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 44779                                  
 44780                                  ;------------------------------------------------------------------------
 44781                                  ; Patch for Sidekick
 44782                                  ;
 44783                                  ; A documented method for finding the offset of the Errormode flag in the 
 44784                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 44785                                  ; for the following sequence of instructions.
 44786                                  ;
 44787                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 44788                                  ;
 44789                                  ; The Offset of Errormode flag is 0320h
 44790                                  ;
 44791                                  ;------------------------------------------------------------------------
 44792                                  
 44793 00001044 36F6062003FF            	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 44794 0000104A 750C                    	db	075h, 0Ch			 ; jnz  NearLabel
 44795 0000104C 36FF365803              	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 44796 00001051 CD28                    	db	0CDh, 028h			 ; int  28h
 44797                                  
 44798                                  ;--------------------------------------------------------------------------
 44799                                  ; Patch for PortOfEntry - M036
 44800                                  ;
 44801                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 44802                                  ; the offset of Errormode flag. The following patch is to support them in 
 44803                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 44804                                  ;
 44805                                  ;---------------------------------------------------------------------------
 44806                                  
 44807 00001053 803E200300              	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 44808 00001058 7537                    	db	075h, 037h			 ; jnz	NearLabel
 44809 0000105A BCA00A                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 44810                                  
 44811                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 44812                                  
 44813                                  ;--------------------------------------------------------------------------
 44814                                  
 44815                                  ;*** New FCB Implementation
 44816                                  ; This variable is used as a cache in the new FCB implementation to remember
 44817                                  ;the address of a local SFT that can be recycled for a regenerate operation
 44818                                  
 44819 0000105D 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 44820                                  
 44821                                  ;DOSDATA ENDS
 44822                                  
 44823                                  ;============================================================================
 44824                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 44825                                  ;============================================================================
 44826                                  ; 27/04/2019 - Retro DOS 4.0
 44827                                  
 44828                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 44829                                  
 44830                                  ;---------------------------------------------------------------------------
 44831                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 44832                                  ;----------------------------------------------------------------------------
 44833                                  	
 44834                                  	;db	90h
 44835                                  
 44836                                  	;EVEN
 44837 00001061 90                      align 2
 44838                                  
 44839                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 44840                                  
 44841                                  DOSINTTABLE:	; LABEL	DWORD
 44842                                  
 44843                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 44844                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 44845                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 44846                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 44847                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 44848                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 44849                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 44850                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 44851                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 44852                                  	
 44853 00001062 [8453]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 44854 00001066 [1B03]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 44855 0000106A [4703]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 44856 0000106E [7A05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 44857 00001072 [0106]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 44858 00001076 [D262]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 44859 0000107A [5007]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 44860 0000107E [2203]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 44861 00001082 [2103]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 44862                                  
 44863 00001086 0000                    SS_Save: dw	0		; save user's stack segment
 44864 00001088 0000                    SP_Save: dw	0		; save user's stack offset
 44865                                  
 44866                                  ;-------------------------------------------------------------------------
 44867                                  ;
 44868                                  ; LOW MEM STUB:
 44869                                  ;
 44870                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 44871                                  ; handled by DOS. This stub is installed if the user specifies that the 
 44872                                  ; DOS load in HIMEM. Each entry point does this.
 44873                                  ;
 44874                                  ; 	1. if jmp to 8 has been patched out
 44875                                  ;	   2. if A20 OFF
 44876                                  ;	      3. Enable A20
 44877                                  ;	   4. else 
 44878                                  ;	      5. just go to dos entry
 44879                                  ;	   6. endif
 44880                                  ;	7. else
 44881                                  ;	   8. just go to dos entry
 44882                                  ;	9. endif
 44883                                  ;
 44884                                  ;--------------------------------------------------------------------------
 44885                                  
 44886                                  ; 27/04/2019 - Retro DOS v4.0
 44887                                  
 44888                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 44889                                  
 44890                                  ;--------------------------------------------------------------------------
 44891                                  ;
 44892                                  ; DIVIDE BY 0 handler
 44893                                  ;
 44894                                  ;--------------------------------------------------------------------------
 44895                                  
 44896                                  ldivov:
 44897                                  	; The following jump, skipping the XMS calls will be patched to 
 44898                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44899                                  	; needed because the stub is installed even before the XMS driver
 44900                                  	; is loaded if the user specifies dos=high in the config.sys
 44901                                  i0patch:
 44902 0000108A EB03                    	jmp	short divov_cont	
 44903                                  
 44904 0000108C E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44905                                  divov_cont:
 44906 0000108F 2EFF2E[6210]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 44907                                  
 44908                                  ;------------------------------------------------------------------------
 44909                                  ;
 44910                                  ; INT 20 Handler
 44911                                  ;
 44912                                  ; Here we do not have to set up the stack to return here as the abort call
 44913                                  ; will return to the address after the int 21 ah=4b call. This would be the
 44914                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 44915                                  ; will be restored then.
 44916                                  ;
 44917                                  ;-------------------------------------------------------------------------
 44918                                  
 44919                                  lquit:
 44920                                  	; The following jump, skipping the XMS calls will be patched to 
 44921                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44922                                  	; needed because the stub is installed even before the XMS driver
 44923                                  	; is loaded if the user specifies dos=high in the config.sys
 44924                                  i20patch:
 44925 00001094 EB03                    	jmp	short quit_cont	
 44926                                  
 44927 00001096 E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44928                                  quit_cont:
 44929 00001099 2EFF2E[6610]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 44930                                  
 44931                                  ;--------------------------------------------------------------------------
 44932                                  ;
 44933                                  ; INT 21 Handler
 44934                                  ;
 44935                                  ;--------------------------------------------------------------------------
 44936                                  
 44937                                  lcommand:
 44938                                  	; The following jump, skipping the XMS calls will be patched to 
 44939                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44940                                  	; needed because the stub is installed even before the XMS driver
 44941                                  	; is loaded if the user specifies dos=high in the config.sys
 44942                                  i21patch:
 44943 0000109E EB03                    	jmp	short command_cont	
 44944                                  
 44945 000010A0 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44946                                  command_cont:
 44947 000010A3 2EFF2E[6A10]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 44948                                  
 44949                                  ;------------------------------------------------------------------------
 44950                                  ;
 44951                                  ; INT 25 
 44952                                  ;
 44953                                  ;----------------------------------------------------------------------------
 44954                                  
 44955                                  labsdrd:
 44956                                  	; The following jump, skipping the XMS calls will be patched to 
 44957                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44958                                  	; needed because the stub is installed even before the XMS driver
 44959                                  	; is loaded if the user specifies dos=high in the config.sys
 44960                                  i25patch:
 44961 000010A8 EB03                    	jmp	short absdrd_cont	
 44962                                  
 44963 000010AA E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44964                                  absdrd_cont:
 44965 000010AD 2EFF2E[6E10]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 44966                                  
 44967                                  ;-------------------------------------------------------------------------
 44968                                  ;
 44969                                  ; INT 26
 44970                                  ;
 44971                                  ;-----------------------------------------------------------------------
 44972                                  
 44973                                  labsdwrt:
 44974                                  	; The following jump, skipping the XMS calls will be patched to 
 44975                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44976                                  	; needed because the stub is installed even before the XMS driver
 44977                                  	; is loaded if the user specifies dos=high in the config.sys
 44978                                  i26patch:
 44979 000010B2 EB03                    	jmp	short absdwrt_cont	
 44980                                  
 44981 000010B4 E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44982                                  absdwrt_cont:
 44983 000010B7 2EFF2E[7210]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 44984                                  
 44985                                  ;------------------------------------------------------------------------
 44986                                  ;
 44987                                  ; INT 27
 44988                                  ;
 44989                                  ;-----------------------------------------------------------------------
 44990                                  
 44991                                  lstay_resident:
 44992                                  	; The following jump, skipping the XMS calls will be patched to 
 44993                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44994                                  	; needed because the stub is installed even before the XMS driver
 44995                                  	; is loaded if the user specifies dos=high in the config.sys
 44996                                  i27patch:
 44997 000010BC EB03                    	jmp	short sr_cont	
 44998                                  
 44999 000010BE E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45000                                  sr_cont:
 45001 000010C1 2EFF2E[7610]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 45002                                  
 45003                                  ;-----------------------------------------------------------------------------
 45004                                  ;
 45005                                  ; INT 2f
 45006                                  ;
 45007                                  ;-------------------------------------------------------------------------
 45008                                  
 45009                                  lint2f:
 45010                                  	; The following jump, skipping the XMS calls will be patched to 
 45011                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45012                                  	; needed because the stub is installed even before the XMS driver
 45013                                  	; is loaded if the user specifies dos=high in the config.sys
 45014                                  i2fpatch:
 45015 000010C6 EB03                    	jmp	short int2f_cont	
 45016                                  
 45017 000010C8 E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45018                                  int2f_cont:
 45019 000010CB 2EFF2E[7A10]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 45020                                  
 45021                                  ;-----------------------------------------------------------------------------
 45022                                  ;
 45023                                  ; CPM entry
 45024                                  ;
 45025                                  ;------------------------------------------------------------------------
 45026                                  
 45027                                  lcall_entry:
 45028                                  	; The following jump, skipping the XMS calls will be patched to 
 45029                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45030                                  	; needed because the stub is installed even before the XMS driver
 45031                                  	; is loaded if the user specifies dos=high in the config.sys
 45032                                  cpmpatch:
 45033 000010D0 EB03                    	jmp	short callentry_cont	
 45034                                  
 45035 000010D2 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45036                                  callentry_cont:
 45037 000010D5 2EFF2E[7E10]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 45038                                  
 45039                                  ;--------------------------------------------------------------------------
 45040                                  
 45041                                  lirett:
 45042 000010DA CF                      	iret
 45043                                  
 45044                                  ;---------------------------------------------------------------------------
 45045                                  ;
 45046                                  ; LowIntXX:
 45047                                  ;
 45048                                  ; Interrupts from DOS that pass control to a user program must be done from
 45049                                  ; low memory, as the user program may change the state of the A20 line or
 45050                                  ; they may require that the A20 line be OFF. The following piece of code is
 45051                                  ; far call'd from the following places in DOS:
 45052                                  ;
 45053                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 45054                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 45055                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 45056                                  ;
 45057                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 45058                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 45059                                  ; before doing the ints and then do a far junp back into DOS.
 45060                                  ;
 45061                                  ;---------------------------------------------------------------------------
 45062                                  
 45063 000010DB 00000000                DosRetAddr23:	dd	0
 45064 000010DF 00000000                DosRetAddr24:	dd	0
 45065 000010E3 00000000                DosRetAddr28:	dd	0
 45066                                  
 45067                                  	; Execute int 23h from low memory
 45068                                  LowInt23:
 45069                                  					; save the return address that is on
 45070                                  					; the stack
 45071 000010E7 2E8F06[DB10]            	pop	word [cs:DosRetAddr23]
 45072 000010EC 2E8F06[DD10]            	pop	word [cs:DosRetAddr23+2]
 45073                                  
 45074 000010F1 CD23                    	int	23h			; ctrl C
 45075                                  					; turn on A20 it has been turned OFF
 45076                                  					; by int 28/23/24 handler.
 45077                                  
 45078 000010F3 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 45079                                  
 45080 000010F6 2EFF2E[DB10]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 45081                                  
 45082                                  
 45083                                  	; Execute int 24h from low memory
 45084                                  LowInt24:
 45085                                  					; save the return address that is on
 45086                                  					; the stack
 45087 000010FB 2E8F06[DF10]            	pop	word [cs:DosRetAddr24]
 45088 00001100 2E8F06[E110]            	pop	word [cs:DosRetAddr24+2]
 45089                                  
 45090 00001105 CD24                    	int	24h			; crit error
 45091                                  					; turn on A20 it has been turned OFF
 45092                                  					; by int 28/23/24 handler.
 45093                                  
 45094 00001107 E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45095                                  
 45096 0000110A 2EFF2E[DF10]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 45097                                  
 45098                                  
 45099                                   
 45100                                  	; Execute int 28h from low memory
 45101                                  LowInt28:
 45102 0000110F CD28                    	int	28h			; idle int
 45103                                  					; turn on A20 it has been turned OFF
 45104                                  					; by int 28/23/24 handler.
 45105                                  
 45106 00001111 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45107                                  
 45108 00001114 CB                      	retf
 45109                                  
 45110                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 45111                                  
 45112                                  ;-------------------------------------------------------------------------
 45113                                  ;
 45114                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 45115                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 45116                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 45117                                  ; This is so because exepac'd programs rely on address wrap.
 45118                                  ;
 45119                                  ;------------------------------------------------------------------------- 
 45120                                  
 45121                                  disa20_xfer:
 45122 00001115 E83F00                  	call	XMMDisableA20		; disable A20
 45123                                  
 45124                                  	; Look at msproc.asm at label exec_go for understanding the following:
 45125                                  
 45126                                  	; DS:SI points to entry point
 45127                                  	; AX:DI points to initial stack
 45128                                  	; DX has PDB pointer
 45129                                  	; BX has initial AX value
 45130                                  
 45131 00001118 FA                      	cli
 45132 00001119 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 45133                                  
 45134 0000111F 8ED0                    	mov	SS,AX			; set up user's stack
 45135 00001121 89FC                    	mov	SP,DI			; and SP
 45136 00001123 FB                      	sti
 45137                                  
 45138 00001124 1E                      	push	DS			; fake long call to entry
 45139 00001125 56                      	push	SI
 45140 00001126 8EC2                    	mov	ES,DX			; set up proper seg registers
 45141 00001128 8EDA                    	mov	DS,DX
 45142 0000112A 89D8                    	mov	AX,BX			; set up proper AX
 45143 0000112C CB                      	retf
 45144                                  
 45145                                  ;-------------------------------------------------------------------------
 45146                                  ;
 45147                                  ; M003:
 45148                                  ;
 45149                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 45150                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 45151                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 45152                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 45153                                  ; more info.	
 45154                                  ;
 45155                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 45156                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 45157                                  ; stack to avoid additional stack overhead for the user.
 45158                                  ;
 45159                                  ; -------------------------------------------------------------------------
 45160                                  
 45161                                  disa20_iret:
 45162 0000112D E82700                  	call	XMMDisableA20
 45163 00001130 FE0E[2103]              	dec	byte [INDOS]
 45164 00001134 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 45165 00001138 8B26[8405]              	mov	SP,[USER_SP]
 45166 0000113C 89E5                    	mov	BP,SP
 45167                                  	;mov	[BP+user_env.user_AX],AL
 45168 0000113E 884600                  	mov	[bp],al
 45169 00001141 A1[F205]                	mov	AX,[NSP]
 45170 00001144 A3[8405]                	mov	[USER_SP],AX
 45171 00001147 A1[F005]                	mov	AX,[NSS]
 45172 0000114A A3[8605]                	mov	[USER_SS],AX
 45173                                  
 45174 0000114D 58                      	pop	AX			; restore user regs
 45175 0000114E 5B                      	pop	BX
 45176 0000114F 59                      	pop	CX
 45177 00001150 5A                      	pop	DX
 45178 00001151 5E                      	pop	SI
 45179 00001152 5F                      	pop	DI
 45180 00001153 5D                      	pop	BP
 45181 00001154 1F                      	pop	DS
 45182 00001155 07                      	pop	ES
 45183 00001156 CF                      	iret
 45184                                  
 45185                                  ;**************************************************************************
 45186                                  ;***	XMMDisableA20 - switch 20th address line			      
 45187                                  ;									      
 45188                                  ;	This routine is used to disable the 20th address line in 	      
 45189                                  ;	the system using XMM calls.					      
 45190                                  ;									      
 45191                                  ;	ENTRY	none		;ds = _DATA				      
 45192                                  ;	EXIT	A20 line disabled					      
 45193                                  ;	USES	NOTHING					      
 45194                                  ;									      
 45195                                  ;**************************************************************************
 45196                                  
 45197                                  XMMDisableA20:
 45198 00001157 53                      	push	bx
 45199 00001158 50                      	push	ax
 45200                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 45201 00001159 B406                    	mov	ah,6
 45202 0000115B 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 45203 00001160 58                      	pop	ax
 45204 00001161 5B                      	pop	bx
 45205 00001162 C3                      	retn
 45206                                  
 45207                                  ; The entry point in the BIOS XMS driver is defined here.
 45208                                  
 45209                                  XMMcontrol:
 45210 00001163 00000000                	dd	0
 45211                                  
 45212                                  ;--------------------------------------------------------------------------
 45213                                  ;
 45214                                  ;***	EnsureA20ON - Ensures that A20 is ON
 45215                                  ;									      
 45216                                  ;	This routine is used to query the A20 state in		 	      
 45217                                  ;	the system using XMM calls.					      
 45218                                  ;									      
 45219                                  ;	ENTRY: none		
 45220                                  ;
 45221                                  ;	EXIT : A20 will be ON
 45222                                  ;		
 45223                                  ; 	USES : NONE								      
 45224                                  ;									      
 45225                                  ;--------------------------------------------------------------------------
 45226                                  
 45227                                  LowMemory:	; label dword		; Set equal to 0000:0080
 45228 00001167 8000                    	dw	00080h
 45229 00001169 0000                    	dw	00000h
 45230                                  
 45231                                  HighMemory:	; label dword
 45232 0000116B 9000                    	dw	00090h			; Set equal to FFFF:0090
 45233 0000116D FFFF                    	dw	0FFFFh
 45234                                  
 45235                                  EnsureA20ON:
 45236 0000116F 9C                      	pushf
 45237 00001170 1E                      	push    ds
 45238 00001171 06                      	push	es
 45239 00001172 51                      	push	cx
 45240 00001173 56                      	push	si
 45241 00001174 57                      	push	di
 45242                                  
 45243 00001175 2EC536[6711]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 45244 0000117A 2EC43E[6B11]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 45245 0000117F B90400                  	mov	cx,4
 45246 00001182 FC                      	cld
 45247 00001183 F3A7                    	repe    cmpsw
 45248                                  
 45249 00001185 7407                    	jz	short EA20_OFF
 45250                                  EA20_RET:
 45251 00001187 5F                      	pop	di
 45252 00001188 5E                      	pop	si
 45253 00001189 59                      	pop	cx
 45254 0000118A 07                      	pop	es
 45255 0000118B 1F                      	pop	ds
 45256 0000118C 9D                      	popf
 45257 0000118D C3                      	retn
 45258                                  
 45259                                  EA20_OFF:
 45260                                  	; We are going to do the XMS call on the DOS's AuxStack.
 45261                                  	; NOTE: ints are disabled at this point.
 45262                                  
 45263 0000118E 53                      	push	bx
 45264 0000118F 50                      	push	ax
 45265                                  
 45266 00001190 8CD0                    	mov	ax,ss			; save user's stack pointer
 45267 00001192 2EA3[8610]              	mov	[cs:SS_Save],ax
 45268 00001196 2E8926[8810]            	mov	[cs:SP_Save],sp
 45269 0000119B 8CC8                    	mov	ax,cs
 45270 0000119D 8ED0                    	mov	ss,ax
 45271 0000119F BC[A007]                	mov	sp,AUXSTACK
 45272                                  					; ss:sp -> DOSDATA:AuxStack
 45273                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 45274 000011A2 B405                    	mov	ah,5
 45275 000011A4 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 45276 000011A9 09C0                    	or	ax,ax
 45277 000011AB 740F                    	jz	short XMMerror		; AX = 0 fatal error
 45278                                  
 45279 000011AD 2EA1[8610]              	mov	ax,[cs:SS_Save]		; restore user stack
 45280 000011B1 8ED0                    	mov	ss,ax
 45281 000011B3 2E8B26[8810]            	mov	sp,[cs:SP_Save]
 45282                                  
 45283 000011B8 58                      	pop	ax
 45284 000011B9 5B                      	pop	bx
 45285                                  
 45286 000011BA EBCB                    	jmp	short EA20_RET
 45287                                  
 45288                                  XMMerror:				; M006 - Start
 45289 000011BC B40F                    	mov	ah,0Fh			; get video mode
 45290 000011BE CD10                    	int	10h
 45291 000011C0 3C07                    	cmp	al,7			; Q: are we an MDA
 45292 000011C2 7406                    	je	short XMMcont			; Y: do not change mode
 45293 000011C4 30E4                    	xor	ah,ah ; 0			; set video mode
 45294 000011C6 B002                    	mov	al,02h			; 80 X 25 text
 45295 000011C8 CD10                    	int	10h
 45296                                  XMMcont:
 45297 000011CA B405                    	mov	ah,05h			; set display page
 45298 000011CC 30C0                    	xor	al,al			; page 0
 45299 000011CE CD10                    	int	10h
 45300                                  	
 45301 000011D0 BE[B812]                	mov	si,XMMERRMSG
 45302 000011D3 0E                      	push	cs
 45303 000011D4 1F                      	pop	ds
 45304 000011D5 FC                      	cld				; clear direction flag
 45305                                  XMMprnt:
 45306 000011D6 AC                      	lodsb
 45307 000011D7 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 45308 000011D9 7409                    	jz	short XMMStall		; function 0Eh	
 45309 000011DB B40E                    	mov	ah,0Eh
 45310 000011DD BB0700                  	mov	bx,7
 45311 000011E0 CD10                    	int	10h
 45312 000011E2 EBF2                    	jmp	short XMMprnt
 45313                                  
 45314                                  XMMStall:
 45315 000011E4 FB                      	sti				; allow the user to warm boot
 45316 000011E5 EBFD                    	jmp	short XMMStall		; M006 - End
 45317                                  
 45318                                  ;---------------------------------------------------------------------------
 45319                                  
 45320                                  ; 27/04/2019 - Retro DOS v4.0
 45321                                  
 45322                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 45323                                  ALTAH	equ 0Ch
 45324                                  
 45325                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 45326                                  ;table was different for this. Segments will be patched in at init time.
 45327                                  
 45328                                  OldInstanceJunk:
 45329 000011E7 7000                    	dw	70h	;segment of BIOS
 45330 000011E9 0000                    	dw	0	;indicate stacks in SYSINIT area
 45331 000011EB 0600                    	dw	6	;5 instance items
 45332                                  
 45333                                  	;dw	0,offset dosdata:contpos, 2
 45334                                  	;dw	0,offset dosdata:bcon, 4
 45335                                  	;dw	0,offset dosdata:carpos,106h
 45336                                  	;dw	0,offset dosdata:charco, 1
 45337                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 45338                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 45339                                  
 45340 000011ED 0000[2200]0200          	dw	0,CONTPOS,2
 45341 000011F3 0000[3200]0400          	dw	0,BCON,4
 45342 000011F9 0000[F901]0601          	dw	0,CARPOS,106h
 45343 000011FF 0000[0003]0100          	dw	0,CHARCO,1
 45344 00001205 0000[C00F]2200          	dw	0,exec_init_SP,34
 45345 0000120B 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 45346                                  
 45347                                  ;---------------------------------------------------------------------------
 45348                                  
 45349                                  ; M021-
 45350                                  ;
 45351                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 45352                                  ; 	takes control of the HMA. When running, this word is a reliable
 45353                                  ;	indicator that the DOS is actually using HMA. You can't just use
 45354                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 45355                                  
 45356                                  DosHasHMA:
 45357 00001211 00                      	db	0
 45358                                  FixExePatch:
 45359 00001212 0000                    	dw	0		; M012
 45360                                  RationalPatchPtr:
 45361 00001214 0000                    	dw	0		; M012
 45362                                  
 45363                                  ; End M021
 45364                                  
 45365                                  ;---------------------------------------------------------------------------
 45366                                  
 45367                                  ; M020 Begin
 45368                                  
 45369                                  RatBugCode:	; proc	far
 45370 00001216 51                      	push	cx
 45371 00001217 8B0E1000                	mov	cx,[10h]
 45372                                  rbc_loop:
 45373                                  	;loop	$
 45374 0000121B E2FE                    	loop	rbc_loop
 45375 0000121D 59                      	pop	cx
 45376 0000121E CB                      	retf
 45377                                  		
 45378                                  ; M020 End
 45379                                  
 45380                                  ;---------------------------------------------------------------------------
 45381                                  	
 45382                                  UmbSave1:
 45383                                  	;db	11 dup (?)	; M023
 45384 0000121F 00<rep Bh>              	times	11 db 0	
 45385                                  
 45386                                  ; DOSDATA:122Ah
 45387                                  
 45388                                  Mark3:	; label byte
 45389                                  
 45390                                  ;IF2
 45391                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 45392                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45393                                  ;	ENDIF
 45394                                  ;ENDIF
 45395                                  
 45396                                  ;############################################################################
 45397                                  ;
 45398                                  ; ** HACK FOR DOS 4.0 REDIR **
 45399                                  ;
 45400                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 45401                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 45402                                  ; COUNTRY_CDPG if it can. 
 45403                                  ;
 45404                                  ; MARK3 SHOULD NOT BE > 122AH 
 45405                                  ;
 45406                                  ; As of 9/6/90, this area is FULL!
 45407                                  ;
 45408                                  ;############################################################################
 45409                                   
 45410                                  	;ORG	0122Ah
 45411                                  
 45412                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45413                                  
 45414                                  ; The following table is used for DOS 3.3
 45415                                  ;DOS country and code page information is defined here for DOS 3.3.
 45416                                  ;The initial value for ccDosCountry is 1 (USA).
 45417                                  ;The initial value for ccDosCodepage is 850.
 45418                                  
 45419                                  ; country and code page information
 45420                                  ; ---------------------------------------------------------------------------
 45421                                  COUNTRY_CDPG:	; label  byte
 45422 0000122A 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 45423 00001232 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 45423 0000123B 53595300           
 45424                                  	;db   51 dup (?)
 45425 0000123F 00<rep 33h>             	times 51 db 0
 45426                                  ; ------------------------------------------------<MSKK01>-------------------
 45427                                  ;ifdef	DBCS
 45428                                  ;  ifdef JAPAN
 45429                                  ;	dw   932			; system code page id (JAPAN)
 45430                                  ;  endif
 45431                                  ;  ifdef TAIWAN
 45432                                  ;	dw   938			; system code page id (TAIWAN)
 45433                                  ;  endif
 45434                                  ;  ifdef KOREA
 45435                                  ;	dw   934			; system code page id (KOREA IBM)
 45436                                  ;  endif
 45437                                  ;else
 45438 00001272 B501                    	dw   437			; system code page id
 45439                                  ;endif
 45440                                  ; ------------------------------------------------<MSKK01>-------------------
 45441 00001274 0600                    	dw   6				; number of entries
 45442 00001276 02                      	db   SetUcase  ; 2		; Ucase type
 45443 00001277 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 45444 00001279 0000                    	dw   0				; segment of poiter
 45445 0000127B 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 45446 0000127C [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 45447 0000127E 0000                    	dw   0				; segment of poiter
 45448 00001280 05                      	db   SetFileList ; 5		; valid file chars type
 45449 00001281 [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 45450 00001283 0000                    	dw   0				; segment of poiter
 45451 00001285 06                      	db   SetCollate	; 6		; collate type
 45452 00001286 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 45453 00001288 0000                    	dw   0				; segment of poiter
 45454 0000128A 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 45455 0000128B [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 45456 0000128D 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 45457 0000128F 01                      	db   SetCountryInfo  ; 1	; country info type
 45458 00001290 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 45459                                  ; ------------------------------------------------<MSKK01>-------------------
 45460                                  ;ifdef	DBCS
 45461                                  ;	...... 
 45462                                  ;else
 45463 00001292 0100                    	dw   1				; USA country id
 45464 00001294 B501                    	dw   437			; USA system code page id
 45465 00001296 0000                    	dw   0 				; date format
 45466 00001298 2400000000              	db   '$',0,0,0,0		; currency symbol
 45467 0000129D 2C00                    	db   ',',0			; thousand separator
 45468 0000129F 2E00                    	db   '.',0			; decimal separator
 45469 000012A1 2D00                    	db   '-',0			; date separator
 45470 000012A3 3A00                    	db   ':',0			; time separator
 45471 000012A5 00                      	db   0				; currency format flag
 45472 000012A6 02                      	db   2				; # of digits in currency
 45473 000012A7 00                      	db   0 				; time format
 45474 000012A8 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 45475 000012AA 0000                    	dw   0				; segment of entry point
 45476 000012AC 2C00                    	db   ',',0			; data list separator
 45477 000012AE 000000000000000000-     	dw   0,0,0,0,0			; reserved
 45477 000012B7 00                 
 45478                                  ;endif
 45479                                  ; ------------------------------------------------<MSKK01>-------------------
 45480                                  
 45481                                  ; 27/04/2019 - Retro DOS v4.0
 45482                                  
 45483                                  ;include msdos.cl2			; XMMERRMSG
 45484                                  
 45485                                  ; DOSDATA:12B8h (MSDOS 6.21, MSDOS.SYS) ; 17/01/2024
 45486                                  
 45487                                  XMMERRMSG:
 45488 000012B8 0D0A                    	db	0Dh,0Ah
 45489 000012BA 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 45489 000012C3 617265204572726F72-
 45489 000012CC 0D0A24             
 45490                                  
 45491                                  ;DOSDATA ends
 45492                                  
 45493                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45494                                  
 45495                                  ;============================================================================
 45496                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 45497                                  ;============================================================================
 45498                                  ; 27/04/2019 - Retro DOS 4.0
 45499                                  
 45500                                  ;DOSDATA Segment
 45501                                  
 45502                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 45503                                  
 45504                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45505                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 45506                                  
 45507                                  ; first and second DOS patches
 45508                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 45509                                  ;
 45510                                  ; Code in disk.asm, 2 locations, one for read, one for write
 45511                                  ;	DVRDLP:
 45512                                  ;	DVWRTLP:
 45513                                  ;
 45514                                  ;
 45515                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 45516                                  ;	lds	si,si+7 				  ; sf_devptr
 45517                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 45518                                  
 45519 000012CF 36C536                  DOSP1_ID:	db	036h,0C5h,036h
 45520 000012D2 3605C57407E8            DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45521                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 45522                                  
 45523 000012D8 9090                    		db	90h, 90h
 45524                                  
 45525 000012DA 36C536                  DOSP12_ID:	db	036h,0C5h,036h
 45526 000012DD 3605C57407E8            DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45527                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 45528                                  
 45529                                  ; DOSDATA:12E3h
 45530                                  
 45531                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 45532                                  ;
 45533                                  ; Code in disk.asm, 1 location
 45534                                  ;	GETBUF:
 45535                                  ;
 45536                                  ; 051h	push	cx	<- begin special int28 mode
 45537                                  ;	push	es
 45538                                  ;	push	di
 45539                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 45540                                  ;	call	????	; $STD_CON_STRING_INPUT
 45541                                  ;	pop	di
 45542                                  ;	pop	es
 45543                                  ; 059h	pop	cx	<- end special int28 mode
 45544                                  
 45545 000012E3 510657BA                DOSP3_ID:	db	051h,006h,057h,0BAh
 45546 000012E7 2902E8                  DOSP3_CONBUF:	db	029h,002h,0E8h
 45547                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 45548 000012EA 9AE35F07                		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 45549 000012EE 59                      DOSP4_ID:	db	059h			; pop cx
 45550                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 45551                                  	
 45552                                  ; DOSDATA:12EFh
 45553                                  
 45554                                  ; Fifth DOS patch - System call 40h (Write) to console
 45555                                  ;
 45556                                  ; Code in disk.asm, 1 location
 45557                                  ;
 45558                                  ;		push	cx
 45559                                  ;      WRCONLP: lodsb
 45560                                  ;		cmp	al,1Ah
 45561                                  ;		jz	????
 45562                                  ;		call	????	<- "simulate" int28 event
 45563                                  ;		loop	WRCONLP
 45564                                  ;      CONEOF:	pop	ax
 45565                                  
 45566 000012EF 51                      DOSP5_ID:	db	051h			; push cx
 45567 000012F0 AC3C1A7405              		db	0ACh,03Ch,01Ah,074h,005h
 45568 000012F5 E8                      		db	0E8h			; call
 45569                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 45570                                  
 45571                                  ; DOSDATA:12F6h
 45572                                  
 45573                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 45574                                  ;
 45575                                  ; Code in disp.asm, 1 location
 45576                                  ;
 45577                                  ;
 45578                                  ;	mov [SaveDS],ds
 45579                                  ;	mov [SaveBX],bx
 45580                                  ;	mov bx,cs
 45581                                  ;	mov ds,bx
 45582                                  ;	inc [indos]
 45583                                  ;	xor ax,ax
 45584                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 45585                                  
 45586 000012F6 2E8C1E                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 45587 000012F9 7E05                    DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 45588 000012FB 2E891E                  		db	02Eh,089h,01Eh
 45589 000012FE 7C05                    DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 45590 00001300 8CCB                    		db	08Ch,0CBh		; mov bx,cs
 45591 00001302 8EDB                    		db	08Eh,0DBh		; mov ds,bx
 45592 00001304 FE06                    		db	0FEh,006h
 45593 00001306 CF02                    DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 45594 00001308 33C0                    		db	033h,0C0h		; xor ax,ax
 45595                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 45596                                  
 45597                                  ; DOSDATA:130Ah
 45598                                  
 45599                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 45600                                  ;
 45601                                  ; Code in handle.asm, 1 location in routine CheckOwner
 45602                                  ;
 45603                                  ;
 45604                                  ;
 45605                                  ;	push	ax
 45606                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 45607                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 45608                                  ;	pop	ax
 45609                                  ;	jz	????
 45610                                  
 45611 0000130A 50                      DOSP8_ID:	db	050h			; push ax
 45612 0000130B 36A1                    		db	036h,0A1h
 45613 0000130D EA02                    DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 45614 0000130F 263B45                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 45615                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 45616 00001312 2F58                    		db	02Fh,058h		; pop  ax
 45617                                  
 45618                                  ; DOSDATA:1314h
 45619                                  
 45620                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 45621                                  ;
 45622                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 45623                                  ;   a yeild when a character is not ready to be read.
 45624                                  ;
 45625                                  ; Code in disk.asm, 3 locations
 45626                                  ;
 45627                                  ;   DVRDRAW:
 45628                                  ;	    PUSH    ES
 45629                                  ;	    POP     DS
 45630                                  ;   ReadRawRetry:				<- Patch 10
 45631                                  ;	    MOV     BX,DI
 45632                                  ;	    XOR     AX,AX			<- Reenter #2
 45633                                  ;	    MOV     DX,AX
 45634                                  ;	    call    SETREAD
 45635                                  ;	    PUSH    DS				<- Reenter #1
 45636                                  ;	    LDS     SI,[THISSFT]
 45637                                  ;	    call    DEVIOCALL
 45638                                  ;	    MOV     DX,DI
 45639                                  ;	    MOV     AH,86H
 45640                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 45641                                  ;	    TEST    DI,STERR
 45642                                  ;	    JZ	    CRDROK
 45643                                  ;	    call    CHARHARD
 45644                                  ;	    MOV     DI,DX
 45645                                  ;	    OR	    AL,AL
 45646                                  ;	    JZ	    CRDROK
 45647                                  ;	    CMP     AL,3
 45648                                  ;	    JZ	    CRDFERR
 45649                                  ;	    POP     DS
 45650                                  ;	    JMP     ReadRawRetry
 45651                                  ;
 45652                                  ;   CRDFERR:
 45653                                  ;	    POP     DI				<- Patch 11
 45654                                  ;   DEVIOFERR:
 45655                                  ;	    LES     DI,[THISSFT]
 45656                                  ;	    jmp     SET_ACC_ERR_DS
 45657                                  ;
 45658                                  ;   CRDROK:
 45659                                  ;	    POP     DI				<- Patch 12
 45660                                  ;	    MOV     DI,DX
 45661                                  ;	    ADD     DI,[CALLSCNT]
 45662                                  ;	    JMP     SHORT ENDRDDEVJ3
 45663                                  
 45664 00001314 061F                    DOSP10_ID:		db	006H,01FH
 45665                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 45666 00001316 8BDF                    DOSP10_LOC:		db	08BH,0DFH
 45667                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 45668 00001318 33C08BD0E8              			db	033H,0C0H,08BH,0D0H,0E8H
 45669                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 45670 0000131D DF0E                    			db	0DFH,00EH
 45671                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 45672 0000131F 1E36C5363605E8AF0E      			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 45673 00001328 8BD7B486368B3E          			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 45674                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 45675 0000132F 0903                    			db	009H,003H
 45676 00001331 F7C700807419E84717      			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 45677 0000133A 8BFA0AC074103C0374-     			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 45677 00001343 03                 
 45678 00001344 1FEBCF                  			db	01FH,0EBH,0CFH
 45679                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 45680 00001347 5F                      			db	05FH
 45681                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 45682 00001348 36C43E3605E9A104        			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 45683                                  
 45684                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 45685 00001350 5F8BFA                  			db	05FH,08BH,0FAH
 45686                                  ; DOSDATA:1353h
 45687                                  
 45688                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 45689                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 45690                                  ;
 45691                                  ;	    Sets focus to current VM so user can see fatal message.
 45692                                  ;
 45693                                  ;
 45694                                  ;	l0: lodsb		<- Setfocus here
 45695                                  ;	    cmp al, '$'
 45696                                  ;	    je l1
 45697                                  ;	    mov bl, 7
 45698                                  ;	    mov ah, 0Eh
 45699                                  ;	    int 10h
 45700                                  ;	    jmp l0
 45701                                  ;	l1: jmp $
 45702                                  
 45703 00001353 AC                      DOSP13_ID:	db	0ACh			; l0: lodsb
 45704 00001354 3C24                    		db	03Ch,024h		;     cmp al, '$'
 45705 00001356 7408                    		db	074h,008h		;     je l1
 45706 00001358 B307                    		db	0B3h,007h		;     mov bl, 7
 45707 0000135A B40E                    		db	0B4h,00Eh		;     mov ah, 0Eh
 45708 0000135C CD10                    		db	0CDh,010h		;     int 10h
 45709 0000135E EBF3                    		db	0EBh,0F3h		;     jmp l0
 45710 00001360 EBFE                    		db	0EBh,0FEh		; l1: jmp $
 45711                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 45712                                  
 45713                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45714                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 45715                                  
 45716                                  ; 06/12/2022
 45717                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 45718                                  
 45719                                  ; DOSDATA ends
 45720                                  
 45721                                  ; 05/11/2022
 45722                                  ;----------------------------------------------------------------------------
 45723                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 45724                                  ;----------------------------------------------------------------------------
 45725                                    
 45726                                  %if 0
 45727                                  
 45728                                  ;============================================================================
 45729                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 45730                                  ;============================================================================
 45731                                  ; 27/04/2019 - Retro DOS 4.0
 45732                                  
 45733                                  ;mpatch.asm -- holds data patch location for callouts 
 45734                                  ; -- allocate cluster in rom.asm
 45735                                  ;
 45736                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 45737                                  ; Currently, this location is used only by magicdrv.sys's patch to
 45738                                  ; cluster allocation, however it can be expanded to be used by other
 45739                                  ; patches. This is important since we have an easy-access pointer to
 45740                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 45741                                  ; only patch out a far call/retf, so any space after that could be
 45742                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 45743                                  ; to call out here.
 45744                                  ;
 45745                                  ; Currently, we allocate only the minimum space required for the 6
 45746                                  ; byte magicdrv patch, so if you change the dos data, you may want
 45747                                  ; to reserve space here if your new data will be position dependent
 45748                                  ; and would prohibit growing of this table.
 45749                                  ;       
 45750                                  ;history	-	created 8-7-92 by scottq
 45751                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 45752                                  ;
 45753                                  ;Exported Functions
 45754                                  ;==================
 45755                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 45756                                  
 45757                                  ; DosData Segment
 45758                                  
 45759                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 45760                                  
 45761                                  ; ---------------------------------------------------------------------------
 45762                                  
 45763                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 45764                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 45765                                  ; greater). Added to this file because it needed to be somewhere and is
 45766                                  ; 'patch' related.
 45767                                  
 45768                                  Rational386PatchPtr:
 45769                                  	dw	0	; points to patch routine or RET instr.
 45770                                  ; ---------------------------------------------------------------------------
 45771                                  
 45772                                  MagicPatch:
 45773                                  ;MagicPatch proc far
 45774                                          retf            ;default is to just return to allocate
 45775                                          nop             ;however, this code will be patched
 45776                                          nop             ;by magicdrv.sys to
 45777                                          nop             ; call far ?:?     
 45778                                          nop             ; retf or perhaps just jmp far
 45779                                          nop             ;retf/nop take one byte, so we need six instructions
 45780                                                          ;for 6 byte patch
 45781                                  ;MagicPatch endp
 45782                                  
 45783                                  ; ---------------------------------------------------------------------------
 45784                                  
 45785                                  ;DosData Ends
 45786                                  
 45787                                  ; DOSDATA:136Ah
 45788                                  
 45789                                  ;----------------------------------------------------------------------------
 45790                                  
 45791                                  ;DOSDATALAST SEGMENT
 45792                                  
 45793                                  ; 29/04/2019 - Retro DOS v4.0
 45794                                  
 45795                                  ;----------------------------------------------------------------------------
 45796                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 45797                                  
 45798                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 45799                                  
 45800                                  ;align 16
 45801                                  
 45802                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 45803                                  
 45804                                  ;----------------------------------------------------------------------------
 45805                                  
 45806                                  %endif	; 05/11/2022
 45807                                  
 45808                                  ; 05/12/2022
 45809                                  ;MSDAT001E:	; label byte
 45810                                  
 45811                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45812                                  DOSDATAEND equ $
 45813                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 45814                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 45815                                  
 45816                                  ;DOSDATALAST ENDS
 45817                                  
 45818                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 45819                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 45820                                  ;============================================================================
 45821                                  ;	END
 45822                                  ;============================================================================
 45823                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 45824                                  ; -----------------------------
 45825                                  ; MAY 2019, ISTANBUL - TURKIYE.
