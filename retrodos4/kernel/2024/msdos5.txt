     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 24/03/2024	((Previous: 27/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if console input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5 are the block device number for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service routine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E91A78                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;19/09/2023
  3257                                  ;22/12/2022
  3258                                  ;04/11/2022	
  3259                                  ;29/04/2019 - Retro DOS v4.0
  3260                                  ;============================================================================
  3261                                  ; 	Retro DOS v4.0
  3262                                  ;============================================================================
  3263 000000BE 00                      	db 	0
  3264                                  RETRODOSMSG:
  3265 000000BF 0D0A                    	db	13,10
  3266                                  	;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3267                                  	;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3268                                  	;db	"Retro DOS v4.0 by Erdogan Tan [2023]"	; 27/09/2023
  3269 000000C1 526574726F20444F53-     	db	"Retro DOS v4.0 by Erdogan Tan [2024]"	; 05/01/2024
  3269 000000CA 2076342E3020627920-
  3269 000000D3 4572646F67616E2054-
  3269 000000DC 616E205B323032345D 
  3270 000000E5 0D0A2400                	db	13,10,"$", 0 
  3271                                  
  3272                                  ;============================================================================
  3273                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3274                                  ;============================================================================
  3275                                  ; 11/07/2018 - Retro DOS v3.0
  3276                                  
  3277                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3278 000000E9 90                      align 2
  3279                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3280                                  
  3281                                  ; Standard Functions
  3282                                  ;DISPATCH  LABEL WORD
  3283                                  DISPATCH:
  3284                                  	; 16/07/2018 - Retro DOS v3.0
  3285                                  	; (MSDOS 3.3)
  3286                                  
  3287                                  ; 29/04/2019
  3288                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3289                                  
  3290                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3291                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3292                                  
  3293 000000EA [AF62]                          short_addr  _$ABORT			    ;  0      0
  3294 000000EC [D816]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3295 000000EE [E116]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3296 000000F0 [9317]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3297 000000F2 [AE17]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3298 000000F4 [B417]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3299 000000F6 [1F16]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3300 000000F8 [4B16]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3301 000000FA [F213]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3302 000000FC [4C14]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3303 000000FE [5814]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3304 00000100 [C817]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3305 00000102 [D217]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3306 00000104 [1310]                          short_addr  _$DISK_RESET		    ; 13      D
  3307 00000106 [F20E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3308 00000108 [9B1E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3309 0000010A [7118]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3310 0000010C [AD1F]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3311 0000010E [3F20]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3312 00000110 [1718]                          short_addr  _$FCB_DELETE		    ; 19     13
  3313 00000112 [991F]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3314 00000114 [9E1F]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3315 00000116 [7F1F]                          short_addr  _$FCB_CREATE		    ; 22     16
  3316 00000118 [E118]                          short_addr  _$FCB_RENAME		    ; 23     17
  3317                                  	; 16/07/2018
  3318                                          ;short_addr _CPMFUNC			    ; 24     18	
  3319 0000011A [A006]                          short_addr  NO_OP			    ; 24     18
  3320 0000011C [ED0E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3321 0000011E [E20E]                          short_addr  _$SET_DMA			    ; 26     1A
  3322                                  
  3323                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3324                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3325                                  ;                                                                          ;
  3326 00000120 [9F0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3327 00000122 [A10F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3328                                  ;                                                                          ;
  3329                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3330                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3331                                  
  3332                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3333                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3334                                  
  3335                                  ; 08/07/2018 - Retro DOS v3.0
  3336                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3337                                  
  3338 00000124 [A006]                  	short_addr  NO_OP			    ; 29     1D
  3339 00000126 [A006]                  	short_addr  NO_OP			    ; 30     1E
  3340                                  
  3341                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3342                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3343                                  ;                                                                          ;
  3344 00000128 [E30F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3345                                  ;                                                                          ;
  3346                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3347                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3348                                          ;short_addr _CPMFUNC			    ; 32     20
  3349                                  
  3350                                  ; 08/07/2018 - Retro DOS v3.0
  3351                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3352                                  
  3353 0000012A [A006]                  	short_addr  NO_OP			    ; 32     20
  3354                                  
  3355 0000012C [A31F]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3356 0000012E [A81F]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3357 00000130 [2918]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3358 00000132 [FF17]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3359                                  
  3360                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3361                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3362                                  
  3363                                  ; Extended Functions
  3364 00000134 [140F]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3365                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3366                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3367                                  ;                                                                          ;
  3368 00000136 [2011]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3369                                  ;                                                                          ;
  3370                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3371                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3372 00000138 [941F]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3373 0000013A [8F1F]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3374 0000013C [940F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3375 0000013E [B20A]                          short_addr  _$GET_DATE                      ; 42     2A
  3376 00000140 [CF0A]                          short_addr  _$SET_DATE                      ; 43     2B
  3377 00000142 [EE0A]                          short_addr  _$GET_TIME                      ; 44     2C
  3378 00000144 [FF0A]                          short_addr  _$SET_TIME                      ; 45     2D
  3379 00000146 [BE0C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3380                                  
  3381                                  ; Extended functionality group
  3382 00000148 [CE0E]                          short_addr  _$GET_DMA                       ; 47     2F
  3383 0000014A [940C]                          short_addr  _$GET_VERSION                   ; 48     30
  3384 0000014C [5362]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3385                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3386                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3387                                  ;                                                                          ;
  3388 0000014E [E50F]                          short_addr  _$GET_DPB			    ; 50     32
  3389                                  ;                                                                          ;
  3390                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3391                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3392 00000150 [A102]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3393 00000152 [CB0F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3394 00000154 [040F]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3395 00000156 [A50E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3396 00000158 [420F]                          short_addr  _$CHAR_OPER                     ; 55     37
  3397 0000015A [C50C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3398                                  ; XENIX CALLS
  3399                                  ;   Directory Group
  3400 0000015C [8D22]                          short_addr  _$MKDIR			    ; 57     39
  3401 0000015E [D921]                          short_addr  _$RMDIR			    ; 58     3A
  3402 00000160 [1422]                          short_addr  _$CHDIR			    ; 59     3B
  3403                                  ;   File Group
  3404 00000162 [7270]                          short_addr  _$CREAT			    ; 60     3C
  3405 00000164 [9B6F]                          short_addr  _$OPEN			    ; 61     3D
  3406 00000166 [C967]                          short_addr  _$CLOSE		 	    ; 62     3E
  3407 00000168 [D868]                          short_addr  _$READ			    ; 63     3F
  3408 0000016A [3E69]                          short_addr  _$WRITE			    ; 64     40
  3409 0000016C [C270]                          short_addr  _$UNLINK			    ; 65     41
  3410 0000016E [4369]                          short_addr  _$LSEEK			    ; 66     42
  3411 00000170 [7F70]                          short_addr  _$CHMOD			    ; 67     43
  3412 00000172 [EE22]                          short_addr  _$IOCTL			    ; 68     44
  3413 00000174 [F869]                          short_addr  _$DUP			    ; 69     45
  3414 00000176 [166A]                          short_addr  _$DUP2			    ; 70     46
  3415 00000178 [7521]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3416                                  ;   Memory Group
  3417 0000017A [4563]                          short_addr  _$ALLOC			    ; 72     48
  3418 0000017C [BF64]                          short_addr  _$DEALLOC                       ; 73     49
  3419 0000017E [9B64]                          short_addr  _$SETBLOCK                      ; 74     4A
  3420                                  ;   Process Group
  3421 00000180 [2D5C]                          short_addr  _$EXEC			    ; 75     4B
  3422 00000182 [8B62]                          short_addr  _$EXIT			    ; 76     4C
  3423 00000184 [235C]                          short_addr  _$WAIT			    ; 77     4D
  3424 00000186 [B220]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3425                                  ;   Special Group
  3426 00000188 [0821]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3427                                  ; SPECIAL SYSTEM GROUP
  3428                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3429                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3430                                  ;                                                                          ;
  3431 0000018A [F802]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3432 0000018C [0403]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3433 0000018E [D70F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3434 00000190 [4810]                          short_addr  _$SETDPB			    ; 83     53
  3435                                  ;                                                                          ;
  3436                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3437                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3438 00000192 [B90C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3439                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3440                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3441                                  ;                                                                          ;
  3442 00000194 [0F11]                          short_addr  _$DUP_PDB                       ; 85     55
  3443                                  ;                                                                          ;
  3444                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3445                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3446 00000196 [E870]                          short_addr  _$RENAME			    ; 86     56
  3447 00000198 [AA69]                          short_addr  _$FILE_TIMES                    ; 87     57
  3448 0000019A [F564]                          short_addr  _$ALLOCOPER                     ; 88     58
  3449                                  
  3450                                  ; 08/07/2018 - Retro DOS v3.0
  3451                                  ; -------------------------------------------------------------------------;
  3452                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3453                                  
  3454                                  ; Network extention system calls
  3455 0000019C [560F]                          short_addr  _$GetExtendedError              ; 89     59
  3456 0000019E [7171]                          short_addr  _$CreateTempFile                ; 90     5A
  3457 000001A0 [5971]                          short_addr  _$CreateNewFile                 ; 91     5B
  3458 000001A2 [2373]                          short_addr  _$LockOper                      ; 92     5C
  3459 000001A4 [DB65]                          short_addr  _$ServerCall                    ; 93     5D
  3460 000001A6 [E06A]                          short_addr  _$UserOper                      ; 94     5E
  3461 000001A8 [456A]                          short_addr  _$AssignOper                    ; 95     5F
  3462 000001AA [356F]                          short_addr  _$NameTrans                     ; 96     60
  3463 000001AC [A006]                  	short_addr  NO_OP			    ; 97     61
  3464 000001AE [0403]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3465                                  ; the next call is reserved for hangool sys call
  3466                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3467 000001B0 [790F]                  	short_addr  _$ECS_Call			    ; 99     63
  3468                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3469                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3470                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3471                                  ;                                                                          ;
  3472 000001B2 [1003]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3473                                  ;                                                                          ;
  3474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3476 000001B4 [500D]                          short_addr  _$GetExtCntry                   ; 101    65
  3477 000001B6 [510E]                          short_addr  _$GetSetCdPg                    ; 102    66
  3478 000001B8 [1468]                          short_addr  _$ExtHandle                     ; 103    67
  3479 000001BA [FC67]                          short_addr  _$COMMIT                        ; 104    68
  3480                                  
  3481                                  ; 08/07/2018
  3482                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3483                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3484                                  
  3485                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3486 000001BC [1212]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3487 000001BE [FC67]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3488 000001C0 [A006]                  	short_addr  NO_OP                           ; 107    6B   
  3489                                  						    ; IFS_IOCTL no longer 
  3490                                  						    ; supported
  3491 000001C2 [0B72]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3492                                  
  3493                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3494                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3495                                  ;                                                                          ;
  3496                                  ;ifdef ROMEXEC
  3497                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3498                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3499                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3500                                  ;endif
  3501                                  ;                                                                          ;
  3502                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3503                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3504                                  
  3505                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3506                                  
  3507                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3508                                  
  3509                                  ; 08/07/2018 - Retro DOS v3.0
  3510                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3511                                  
  3512                                  ;	If 	Installed
  3513                                  
  3514                                  align 2
  3515                                  
  3516                                  ;PUBLIC FOO
  3517                                  
  3518                                  FOO:	; LABEL WORD
  3519 000001C4 [5D07]                          short_addr  Leave2F
  3520                                  
  3521 000001C6 [C801]                  DTab:	DW  DOSTable
  3522                                  
  3523                                  	;PUBLIC FOO,DTAB
  3524                                  
  3525                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3526                                  
  3527                                  ; 29/04/2019
  3528                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3529                                  
  3530                                  
  3531                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3532                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3533                                         
  3534                                  DOSTable:  ; LABEL  WORD
  3535 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3536 000001C9 [8809]                          short_addr  DOSInstall          ;   0 install check
  3537 000001CB [962F]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3538 000001CD [370F]                          short_addr  RECSET              ;   2   RECSET
  3539 000001CF [8209]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3540 000001D1 [4851]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3541 000001D3 [E316]                          short_addr  OUTT                ;   5   OUT
  3542 000001D5 [1F54]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3543 000001D7 [BD59]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3544 000001D9 [9130]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3545 000001DB [6F5B]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3546 000001DD [D873]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3547 000001DF [DC2C]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3548 000001E1 [C62C]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3549 000001E3 [460B]                          short_addr  DATE16              ;   13  DATE16
  3550 000001E5 [7E12]                          short_addr  Idle		;   14      empty slot
  3551 000001E7 [B659]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3552 000001E9 [7E12]                          short_addr  Idle		;   16      empty slot
  3553 000001EB [4B12]                          short_addr  StrCpy              ;   17  StrCpy
  3554 000001ED [6312]                          short_addr  StrLen              ;   18  StrLen
  3555 000001EF [F350]                          short_addr  UCase		;   19  UCase
  3556 000001F1 [FA59]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3557 000001F3 [465B]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3558 000001F5 [4467]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3559 000001F7 [A56B]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3560 000001F9 [CA04]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3561 000001FB [506B]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3562 000001FD [5A6F]                          short_addr  DriveFromText       ;   26  DriveFromText
  3563 000001FF [F00B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3564 00000201 [8A0C]                          short_addr  DSUM                ;   28  DSUM
  3565 00000203 [E40B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3566 00000205 [2912]                          short_addr  StrCmp              ;   30  StrCmp
  3567 00000207 [936A]                          short_addr  InitCDS             ;   31  initcds
  3568 00000209 [1167]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3569 0000020B [356F]                          short_addr  _$NameTrans		;   33  $NameTrans
  3570 0000020D [C706]                          short_addr  CAL_LK              ;   34  CAL_LK
  3571 0000020F [5B42]                          short_addr  DEVNAME             ;   35  DEVNAME
  3572 00000211 [7E12]                          short_addr  Idle                ;   36  Idle
  3573 00000213 [7112]                          short_addr  DStrLen             ;   37  DStrLen
  3574 00000215 [2213]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3575 00000217 [C967]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3576 00000219 [2813]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3577 0000021B [D868]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3578 0000021D [E212]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3579 0000021F [6513]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3580 00000221 [5413]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3581 00000223 [8213]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3582                                          
  3583                                  	; 29/04/2019 - Retro DOS v4.0
  3584 00000225 [8713]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3585                                  
  3586 00000227 [A006]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3587                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3588                                  
  3589                                  DOSTableEnd:  ; LABEL BYTE
  3590                                  
  3591                                  	;ENDIF
  3592                                  
  3593                                  ; ----------------------------------------------------------------------------
  3594                                  ; BREAK   <Copyright notice and version>
  3595                                  ; ----------------------------------------------------------------------------
  3596                                  
  3597                                  ;CODSTRT EQU	$
  3598                                  
  3599                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3600                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3601                                  
  3602                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3603                                  ;       module. The reason is so that the data alignments are the same in
  3604                                  ;       IBM-DOS and MS-DOS up through header.
  3605                                  
  3606                                  	;PUBLIC	HEADER
  3607                                  
  3608                                  HEADER:	; LABEL	BYTE
  3609                                          ;IF	DEBUG
  3610                                          ;DB	13,10,"Debugging DOS version "
  3611                                          ;DB	MAJOR_VERSION + "0"
  3612                                          ;DB	"."
  3613                                          ;DB	(MINOR_VERSION / 10) + "0"
  3614                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3615                                          ;ENDIF
  3616                                  
  3617                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3618                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3619                                  %if 0
  3620                                          ;IF	NOT IBM
  3621                                          DB	13,10,"MS-DOS version "
  3622                                          DB	MAJOR_VERSION + "0"
  3623                                          DB	"."
  3624                                          DB	(MINOR_VERSION / 10) + "0"
  3625                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3626                                          DB	(MINOR_VERSION % 10) + "0"
  3627                                  
  3628                                          ;IF	HIGHMEM
  3629                                          ;DB	"H"
  3630                                          ;ENDIF
  3631                                  
  3632                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3633                                  	; 30/04/2019 - Retro DOS v4.0
  3634                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3635                                  
  3636                                  	;ENDIF
  3637                                  
  3638                                  %endif
  3639                                  
  3640                                  ;IF DEBUG
  3641                                  ;	DB	13,10,"$"
  3642                                  ;ENDIF
  3643                                  
  3644                                  ;include copyrigh.inc
  3645                                  
  3646                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3647                                  
  3648                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3649                                  	;DB	"Licensed Material - Property of Microsoft "
  3650                                  	;DB	"All rights reserved "
  3651                                  
  3652                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3653                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3654                                  
  3655                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3656                                  ms_copyright:
  3657 00000229 4D5320444F53205665-     	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3657 00000232 7273696F6E20352E30-
  3657 0000023B 3020284329436F7079-
  3657 00000244 726967687420313938-
  3657 0000024D 312D31393931204D69-
  3657 00000256 63726F736F66742043-
  3657 0000025F 6F727020           
  3658 00000263 4C6963656E73656420-     	db	'Licensed Material - Property of Microsoft '
  3658 0000026C 4D6174657269616C20-
  3658 00000275 2D2050726F70657274-
  3658 0000027E 79206F66204D696372-
  3658 00000287 6F736F667420       
  3659 0000028D 416C6C207269676874-     	db	'All rights reserved '
  3659 00000296 732072657365727665-
  3659 0000029F 6420               
  3660                                  
  3661                                  ;============================================================================
  3662                                  ; MSCODE.ASM
  3663                                  ;============================================================================
  3664                                  
  3665                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3666                                  ; 03/03/2018
  3667                                  
  3668                                  ;
  3669                                  ; MSCODE.ASM -- MSDOS code
  3670                                  ;
  3671                                  
  3672                                  ;INCLUDE DOSSEG.ASM
  3673                                  ;INCLUDE STDSW.ASM
  3674                                  
  3675                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3676                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3677                                  
  3678                                  ;.xcref
  3679                                  ;INCLUDE DOSSYM.ASM
  3680                                  ;INCLUDE DEVSYM.ASM
  3681                                  ;.cref
  3682                                  ;.list
  3683                                  
  3684                                  ;IFNDEF  KANJI
  3685                                  ;KANJI   EQU     0       ; FALSE
  3686                                  ;ENDIF
  3687                                  
  3688                                  ;IFNDEF  IBM
  3689                                  ;IBM     EQU     0
  3690                                  ;ENDIF
  3691                                  
  3692                                  ;IFNDEF  HIGHMEM
  3693                                  ;HIGHMEM  EQU     0
  3694                                  ;ENDIF
  3695                                  
  3696                                          ;i_need  USER_SP,WORD
  3697                                          ;i_need  USER_SS,WORD
  3698                                          ;i_need  SAVEDS,WORD
  3699                                          ;i_need  SAVEBX,WORD
  3700                                          ;i_need  INDOS,BYTE
  3701                                          ;i_need  NSP,WORD
  3702                                          ;i_need  NSS,WORD
  3703                                          ;i_need  CURRENTPDB,WORD
  3704                                          ;i_need  AUXSTACK,BYTE
  3705                                          ;i_need  CONSWAP,BYTE
  3706                                          ;i_need  IDLEINT,BYTE
  3707                                          ;i_need  NOSETDIR,BYTE
  3708                                          ;i_need  ERRORMODE,BYTE
  3709                                          ;i_need  IOSTACK,BYTE
  3710                                          ;i_need  WPERR,BYTE
  3711                                          ;i_need  DSKSTACK,BYTE
  3712                                          ;i_need  CNTCFLAG,BYTE
  3713                                          ;i_need  LEAVEADDR,WORD
  3714                                          ;i_need  NULLDEVPT,DWORD
  3715                                  
  3716                                          ;IF NOT IBM
  3717                                          ;i_need  OEM_HANDLER,DWORD
  3718                                          ;ENDIF
  3719                                  
  3720                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3721                                  
  3722                                  ;============================================================================
  3723                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3724                                  ;============================================================================
  3725                                  ; 11/07/2018 - Retro DOS v3.0
  3726                                  ; 01/05/2019 - Retro DOS v4.0
  3727                                  
  3728                                  ; DosCode SEGMENT
  3729                                  
  3730                                  ; ==========================================================================
  3731                                  ;
  3732                                  ; $Set_CTRL_C_Trapping
  3733                                  ;
  3734                                  ; Function:
  3735                                  ;	Enable disable ^C checking in dispatcher
  3736                                  ;
  3737                                  ; Inputs:
  3738                                  ;		AL = 0 read ^C status
  3739                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3740                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3741                                  ;		AL = 5 get DOS boot drive
  3742                                  ;		AL = 6 Get version number
  3743                                  ;			RETURNS:
  3744                                  ;				BH = Minor version number
  3745                                  ;				BL = Major version number
  3746                                  ;				DL = DOS internal revision
  3747                                  ;				DH = DOS type flags
  3748                                  ;					Bit 3 	- DOS in ROM
  3749                                  ;					Bit 4 	- DOS in HMA
  3750                                  ;					Bit 0-2, 5-7 - Reserved
  3751                                  ; Outputs:
  3752                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3753                                  ;
  3754                                  ; History:
  3755                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3756                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3757                                  ; ==========================================================================
  3758                                  
  3759                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3760                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3761                                  
  3762                                  _$SET_CTRL_C_TRAPPING:
  3763                                  	; 01/05/2019 - Retro DOS v4.0
  3764                                  
  3765 000002A1 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3766 000002A3 7603                    	jbe	short scct_1		; If yes continue processing
  3767                                  
  3768 000002A5 B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3769                                  
  3770 000002A7 CF                      	iret
  3771                                  scct_1:
  3772 000002A8 1E                      	push	DS
  3773                                  
  3774                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3775 000002A9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3776                                  	
  3777 000002AE 50                      	push	AX			; DL only register that can change
  3778 000002AF 56                      	push	SI
  3779                                  
  3780 000002B0 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3781 000002B3 30E4                    	xor	AH,AH			; Clear high byte of AX
  3782 000002B5 09C0                    	or	AX,AX			; Check for subfunction 0
  3783 000002B7 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3784                                  
  3785 000002B9 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3786 000002BB EB35                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3787                                  scct_2:
  3788 000002BD 48                      	dec	AX			; Now dec AX and see if it was 1
  3789 000002BE 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3790                                  
  3791 000002C0 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3792 000002C3 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3793 000002C5 EB2B                    	jmp	SHORT scct_9s		; Jmp to exit
  3794                                  scct_3:
  3795 000002C7 48                      	dec	AX			; Dec AX again to see if it was 2
  3796 000002C8 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3797                                  
  3798 000002CA 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3799 000002CD 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3800 000002CF EB21                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3801                                  scct_4:
  3802 000002D1 83F803                  	cmp	AX,3 			; Test for 5 after it was dec twice
  3803 000002D4 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3804 000002D6 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3805 000002DA EB16                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3806                                  scct_5:
  3807 000002DC 83F804                  	cmp	AX,4 			; Test for 6 after it was dec twice
  3808 000002DF 7511                    	jne	short scct_9s		; If not equal then not get version
  3809                                  	
  3810                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3811                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)	
  3812 000002E1 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3813 000002E4 B200                    	mov	dl,0
  3814                                  	;mov	DL,DOSREVNM ; 0
  3815                                  
  3816 000002E6 30F6                    	xor	dh,dh			; assume vanilla DOS
  3817 000002E8 803E[1112]00            	cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3818                                  	;je	short @F
  3819 000002ED 7403                    	je	short scct_6
  3820 000002EF 80CE10                  	or	dh,10h
  3821                                  	;or	DH,DOSINHMA ; 10h
  3822                                  ;@@:
  3823                                  scct_6:
  3824                                  
  3825                                  ;ifdef ROMDOS
  3826                                  ;	or	DH, DOSINROM
  3827                                  ;endif ; ROMDOS
  3828                                  
  3829                                  scct_9s:
  3830 000002F2 5E                      	pop	SI
  3831 000002F3 58                      	pop	AX
  3832 000002F4 1F                      	pop	DS
  3833                                  
  3834                                  scct_9f:
  3835 000002F5 CF                      	iret
  3836                                  
  3837                                  SetCtrlShortEntry:			; This allows a conditional entry
  3838                                  					; from main dispatch code
  3839 000002F6 EBA9                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3840                                  
  3841                                  ; ==========================================================================
  3842                                  ;									   
  3843                                  ; The following two routines are dispatched to directly with ints disabled
  3844                                  ; immediately after the int 21h entry.	no DIS state is set.
  3845                                  ;
  3846                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3847                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3848                                  ;
  3849                                  ; ==========================================================================
  3850                                  
  3851                                  _$SET_CURRENT_PDB:
  3852 000002F8 1E                      	push	DS
  3853                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3854 000002F9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3855 000002FE 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3856 00000302 1F                      	pop	DS
  3857 00000303 CF                      	iret
  3858                                  
  3859                                  ; ==========================================================================
  3860                                  ;
  3861                                  ; $get_current_PDB returns in BX the current process
  3862                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3863                                  ;
  3864                                  ; ==========================================================================
  3865                                  
  3866                                  _$GET_CURRENT_PDB:
  3867 00000304 1E                      	push	DS
  3868                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3869 00000305 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3870 0000030A 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3871 0000030E 1F                      	pop	DS
  3872 0000030F CF                      	iret
  3873                                  
  3874                                  ; ==========================================================================
  3875                                  ;
  3876                                  ; Sets the Printer Flag to whatever is in AL.
  3877                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3878                                  ;
  3879                                  ; ==========================================================================
  3880                                  
  3881                                  _$SET_PRINTER_FLAG:
  3882 00000310 1E                      	push	ds
  3883                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3884 00000311 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3885 00000316 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3886 00000319 1F                      	pop	ds
  3887 0000031A CF                      	iret
  3888                                  
  3889                                  ; 01/05/2019 - Retro DOS v4.0
  3890                                  ; 08/07/2018 - Retro DOS v3.0
  3891                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3892                                  
  3893                                  ; ----------------------------------------------------------------------------
  3894                                  ; BREAK   <System call entry points and dispatcher>
  3895                                  ; ----------------------------------------------------------------------------
  3896                                  
  3897                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3898                                  
  3899                                  ; ==========================================================================
  3900                                  ;
  3901                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3902                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3903                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3904                                  ;
  3905                                  ; ==========================================================================
  3906                                  
  3907                                  SYSTEM_CALL:    ; PROC NEAR
  3908                                  
  3909                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3910                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3911                                  
  3912                                  ;entry	QUIT				
  3913                                  QUIT:				; INT 20H entry point	
  3914                                  	;MOV	AH,0
  3915 0000031B 30E4                    	xor	ah,ah ; 08/07/2018
  3916 0000031D EB36                    	JMP     SHORT SAVREGS
  3917                                  
  3918                                  ; ---------------------------------------------------------------------------
  3919                                  
  3920                                  	; The system call in AH is out of the range that we know how
  3921                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3922                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3923                                  	; error as this may break some programs compatability.
  3924                                  
  3925                                  BADCALL:
  3926                                          ;MOV	AL,0
  3927 0000031F 30C0                    	xor	al,al ; 08/07/2018
  3928                                  IRETT:	; 06/05/2019
  3929                                  _IRET:
  3930 00000321 CF                              IRET
  3931                                  
  3932                                  ; ---------------------------------------------------------------------------
  3933                                  
  3934                                  ; 01/05/2019 - Retro DOS v4.0
  3935                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3936                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3937                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3938                                  
  3939                                  	; An alternative method of entering the system is to perform a
  3940                                  	; CALL 5 in the program segment prefix with the contents of CL
  3941                                  	; indicating what system call the user would like. A subset of
  3942                                  	; the possible system calls is allowed here only the
  3943                                  	; CPM-compatible calls may get dispatched.
  3944                                  
  3945                                  		; System call entry point and dispatcher
  3946                                  CALL_ENTRY:
  3947 00000322 1E                      	push	DS
  3948                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3949 00000323 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3950 00000328 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3951                                  
  3952 0000032C 58                              POP     AX                      ; IP from the long call at 5
  3953 0000032D 58                              POP     AX                      ; Segment from the long call at 5
  3954 0000032E 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3955                                  
  3956                                  		; Re-order the stack to simulate an interrupt 21.
  3957                                  
  3958 00000332 9C                      	PUSHF				; Start re-ordering the stack
  3959 00000333 FA                      	CLI
  3960 00000334 50                              PUSH    AX                      ; Save segment
  3961 00000335 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3962                                  	; 04/11/2022
  3963                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3964                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3965 00000339 FF36[EC05]              	push	word [SAVEDS]
  3966 0000033D 1F                      	pop	ds
  3967                                  	;
  3968                                  	;cmp	cl,36
  3969 0000033E 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3970 00000341 77DC                            JA      SHORT BADCALL
  3971 00000343 88CC                            MOV     AH,CL
  3972                                  	; 08/07/2018
  3973 00000345 EB0E                    	jmp	short SAVREGS
  3974                                  
  3975                                  ; ---------------------------------------------------------------------------
  3976                                  
  3977                                  ; 01/05/2019 - Retro DOS v4.0
  3978                                  
  3979                                  	; This is the normal INT 21 entry point. We first perform a
  3980                                  	; quick test to see if we need to perform expensive DOS-entry
  3981                                  	; functions. Certain system calls are done without interrupts
  3982                                  	; being enabled.
  3983                                  
  3984                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  3985                                  
  3986                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  3987                                  ; 04/11/2022
  3988                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  3989                                  
  3990                                  COMMAND:
  3991                                  	; 22/12/2022
  3992 00000347 FA                      	cli
  3993                                  
  3994                                  	; 01/05/2019 - Retro DOS v4.0
  3995                                  	; 08/07/2018 - Retro DOS v3.0
  3996                                  
  3997                                  ; 22/12/2022
  3998                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3999                                  	;IF	NOT IBM
  4000 00000348 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4001 0000034B 7203                    	JB	SHORT NOTOEM
  4002 0000034D E98401                  	JMP	_$SET_OEM_HANDLER
  4003                                  
  4004                                  NOTOEM:
  4005                                  	;ENDIF
  4006                                  
  4007                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4008                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4009                                  
  4010                                  	; 22/12/2022
  4011                                  	;cli	; 08/07/2018
  4012                                  
  4013                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4014                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4015                                  	; 04/11/2022
  4016 00000350 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4017                                  	;JBE	SHORT SAVREGS
  4018 00000353 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4019                                  
  4020                                  	; 31/05/2019
  4021                                  
  4022                                  	; The following set of calls are issued by the server at
  4023                                  	; *arbitrary* times and, therefore, must be executed on
  4024                                  	; the user's entry stack and executed with interrupts off.
  4025                                  
  4026                                  SAVREGS:
  4027                                  	; 01/05/2019 - Retro DOS v4.0
  4028                                  	; 10/08/2018
  4029                                  	; 08/07/2018 - Retro DOS v3.0
  4030 00000355 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4031                                  	;;je	_$SET_CTRL_C_TRAPPING
  4032                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4033 00000358 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4034                                  	; 04/11/2022
  4035 0000035A 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4036 0000035C 80FC64                  	cmp	ah,64h			; Check Max case number
  4037 0000035F 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4038 00000361 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4039 00000363 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4040 00000366 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4041 00000368 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4042 0000036B 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4043 0000036D 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4044 00000370 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4045                                  
  4046                                  SaveAllRegs:
  4047                                  	; 01/05/2019 - Retro DOS v4.0
  4048                                  
  4049 00000372 06                              push	ES
  4050 00000373 1E                      	push	DS
  4051 00000374 55                      	push	BP
  4052 00000375 57                      	push	DI
  4053 00000376 56                      	push	SI
  4054 00000377 52                      	push	DX
  4055 00000378 51                      	push	CX
  4056 00000379 53                      	push	BX
  4057 0000037A 50                      	push	AX
  4058                                  
  4059 0000037B 8CD8                    	mov	AX,DS
  4060                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4061 0000037D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4062 00000382 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4063 00000385 891E[EA05]              	mov	[SAVEBX],BX
  4064                                  
  4065                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4066                                  	
  4067                                  	; 08/07/2018 - Retro DOS v3.0        
  4068                                  	;xor     ax,ax
  4069                                  	;mov     [USER_ID],ax
  4070                                  	;mov     ax,[CurrentPDB]
  4071                                  	;mov     [PROC_ID],ax
  4072                                  
  4073                                  	; 01/05/2019
  4074                                  
  4075                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4076                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4077                                  	; this!!!
  4078                                  
  4079 00000389 A1[8405]                	MOV     AX,[USER_SP]
  4080 0000038C A3[F205]                        MOV     [NSP],AX
  4081 0000038F A1[8605]                        MOV     AX,[USER_SS]
  4082 00000392 A3[F005]                        MOV     [NSS],AX
  4083                                  
  4084 00000395 31C0                    	xor	AX,AX ; 0
  4085 00000397 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4086                                  
  4087 0000039A F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4088 0000039F 7503                    	jnz	short set_indos_flag	; if win386 present
  4089 000003A1 A3[3E03]                	mov	[USER_ID],AX
  4090                                  set_indos_flag:
  4091 000003A4 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4092                                  
  4093 000003A8 8926[8405]                      MOV     [USER_SP],SP
  4094 000003AC 8C16[8605]                      MOV     [USER_SS],SS
  4095                                  
  4096 000003B0 A1[3003]                	mov	AX,[CurrentPDB]
  4097 000003B3 A3[3C03]                	mov	[PROC_ID],AX
  4098 000003B6 8ED8                    	mov	DS,AX
  4099 000003B8 58                      	pop	AX
  4100 000003B9 50                      	push	AX
  4101                                  
  4102                                  	; save user stack in his area for later returns (possibly from EXEC)
  4103                                  
  4104 000003BA 89262E00                        MOV     [PDB.USER_STACK],SP
  4105 000003BE 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4106                                  
  4107                                  	; 18/07/2018
  4108                                  	;mov	byte [CS:FSHARING], 0
  4109                                  
  4110                                  	;MOV     BX,CS			; no holes here.
  4111                                  	;MOV     SS,BX
  4112                                  
  4113                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4114 000003C2 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4115                                  					;entry	REDISP
  4116                                  REDISP:
  4117 000003C7 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4118 000003CA FB                              STI                             ; stack is in our space now...
  4119                                  
  4120 000003CB 8CD3                    	mov	bx,ss
  4121 000003CD 8EDB                    	mov	ds,bx
  4122                                  
  4123 000003CF 93                      	xchg	ax,bx
  4124                                  
  4125 000003D0 31C0                    	xor	ax,ax ; 0
  4126                                  
  4127                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4128                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4129                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4130                                  
  4131                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4132                                  
  4133                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4134                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4135                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4136                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4137                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4138                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4139                                  	;inc	ax
  4140                                  	;;inc	AL			; AL = 1
  4141                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4142                                  
  4143                                  	; 15/12/2022
  4144 000003D2 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4145                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4146 000003D5 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4147 000003DB A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4148                                  	;mov	byte [IDLEINT],1
  4149 000003DE A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4150 000003E1 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4151 000003E4 40                      	inc	ax
  4152                                  	;inc	al			; AL = 1
  4153 000003E5 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4154                                  
  4155 000003E8 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4156                                  
  4157 000003E9 88E3                    	MOV     BL,AH			
  4158 000003EB D1E3                            SHL     BX,1			; 2 bytes per call in table
  4159                                         
  4160 000003ED FC                      	CLD
  4161                                  		; Since the DOS maintains mucho state information across system
  4162                                  		; calls, we must be very careful about which stack we use.
  4163                                  		; First, all abort operations must be on the disk stack. This
  4164                                  		; is due to the fact that we may be hitting the disk (close
  4165                                  		; operations, flushing) and may need to report an INT 24.
  4166                                          
  4167 000003EE 08E4                    	OR      AH,AH
  4168 000003F0 7416                            JZ      SHORT DSKROUT		; ABORT
  4169                                  
  4170                                          ;CMP	AH,12
  4171                                          ;JBE	SHORT IOROUT		; Character I/O
  4172                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4173                                          ;JZ	SHORT IOROUT
  4174                                          ;CMP	AH,SET_CURRENT_PDB
  4175                                          ;JNZ	SHORT DSKROUT
  4176                                  
  4177                                  		; Second, PRINT and PSPRINT and the server issue
  4178                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4179                                  		; This call MUST, therefore, use the AUXSTACK.
  4180                                  
  4181                                  	; 10/08/2018
  4182 000003F2 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4183 000003F5 743D                    	je      short DISPCALL
  4184                                  	
  4185                                  	; 01/05/2019
  4186                                  	
  4187                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4188                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4189                                  
  4190 000003F7 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4191 000003FA 770C                    	ja      short DSKROUT
  4192                                  
  4193                                  IOROUT:
  4194                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4195                                  	; (ss: prefix was not needed here! ds=ss)
  4196                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4197                                  	; 15/12/2022
  4198 000003FC 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4199 00000401 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4200 00000403 BC[A00A]                        MOV     SP,IOSTACK
  4201 00000406 EB2C                            JMP     SHORT DISPCALL
  4202                                  
  4203                                  		; We are on a system call that is classified as "the rest".
  4204                                  		; We place ourselves onto the DSKSTACK and away we go.
  4205                                  		; We know at this point:
  4206                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4207                                  		;    ErrorMode and WpErr
  4208                                  		; *  That there can be no critical sections in effect.
  4209                                  		;    We signal the server to remove all the resources.
  4210                                  
  4211                                  DSKROUT:
  4212                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4213                                  	; 08/07/2018 - Retro DOS v3.0
  4214 00000408 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4215 0000040B C606[2303]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4216                                  	
  4217 00000410 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4218 00000415 C606[2203]FF            	MOV     BYTE [WPERR],-1		; error mode, so good place to
  4219                                  	                   		; make sure flags are reset
  4220                                  
  4221                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4222                                  	; (ss: prefix was not needed here! ds=ss)
  4223                                  
  4224                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4225                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4226                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4227                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4228                                                                          ; make sure flags are reset
  4229 0000041A 50                      	push    ax
  4230 0000041B B482                    	mov     ah,82h			; Release all resource information
  4231 0000041D CD2A                    	int     2Ah 		; Microsoft Networks 
  4232                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4233 0000041F 58                      	pop     ax
  4234                                  
  4235                                  		; Since we are going to be running on the DSKStack and since
  4236                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4237                                  		; generation of INT 28's.
  4238                                  
  4239                                  	; 15/12/2022
  4240                                  	;mov     byte [ss:IDLEINT],0
  4241                                  	;
  4242                                          ;mov	sp,DSKSTACK
  4243                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4244                                          ;jz	short DISPCALL
  4245                                  
  4246 00000420 C606[5803]00            	mov     byte [IDLEINT],0
  4247                                  
  4248 00000425 BC[2009]                	MOV     SP,DSKSTACK
  4249 00000428 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4250 0000042D 7405                    	JZ      SHORT DISPCALL
  4251                                  
  4252 0000042F 50                              PUSH    AX
  4253                                          ;invoke	DSKSTATCHK
  4254 00000430 E82E4D                          CALL	DSKSTATCHK
  4255 00000433 58                      	POP     AX
  4256                                  DISPCALL:
  4257                                  	; 01/05/2019 - Retro DOS v4.0
  4258 00000434 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4259                                  
  4260                                  	; 15/12/2022
  4261 00000439 871E[EA05]              	xchg	bx,[SAVEBX]
  4262 0000043D 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4263                                  
  4264                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4265                                  	; (ss: prefix was not needed here! ds=ss)        
  4266                                  	;xchg	bx,[ss:SAVEBX]
  4267                                  	;mov	ds,[ss:SAVEDS]
  4268                                  
  4269 00000441 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4270                                  
  4271                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4272                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4273                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4274                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4275                                  	; because this bit is used to indicate to the next int 21 call that
  4276                                  	; the previous int 21 was an exec.
  4277                                  	;
  4278                                  	; So do not add any code between the call above and the label 
  4279                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4280                                  
  4281                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4282 00000446 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4283                                  
  4284                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4285                                  ; DOSCODE:41F7h
  4286                                  
  4287                                  ;entry LEAVE
  4288                                  ;;;_LEAVE:				; Exit from a system call
  4289                                  LeaveDOS: ; 18/07/2018 
  4290                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4291 0000044C FA                      	CLI
  4292                                  
  4293                                  	; 01/05/2019
  4294                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4295 0000044D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4296 00000452 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4297 00000457 7527                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4298                                  
  4299                                  LeaveA20On:
  4300 00000459 FE0E[2103]                      DEC     BYTE [INDOS]
  4301                                          ; 04/11/2022
  4302 0000045D 8E16[8605]              	mov	ss,[USER_SS]
  4303 00000461 8B26[8405]              	MOV     SP,[USER_SP]
  4304                                  	;MOV	SS,[USER_SS]
  4305 00000465 89E5                    	MOV     BP,SP
  4306                                  	;MOV	[BP.user_AX],AL	
  4307                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4308                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h	
  4309                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4310                                  	; 15/12/2022
  4311 00000467 884600                  	MOV	[BP],AL
  4312 0000046A A1[F205]                	MOV     AX,[NSP]
  4313 0000046D A3[8405]                        MOV     [USER_SP],AX
  4314 00000470 A1[F005]                        MOV     AX,[NSS]
  4315 00000473 A3[8605]                        MOV     [USER_SS],AX
  4316                                  
  4317 00000476 58                      	pop	AX
  4318 00000477 5B                      	pop	BX
  4319 00000478 59                      	pop	CX
  4320 00000479 5A                      	pop	DX
  4321 0000047A 5E                      	pop	SI
  4322 0000047B 5F                      	pop	DI
  4323 0000047C 5D                      	pop	BP
  4324 0000047D 1F                      	pop	DS
  4325 0000047E 07                      	pop	ES
  4326                                  
  4327 0000047F CF                              IRET
  4328                                  
  4329                                  disa20:	   				; M068 - Start
  4330 00000480 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4331 00000484 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4332 00000488 75CF                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4333                                  					;    a20 off
  4334                                  					; Y: turn a20 off and dec a20off_count
  4335 0000048A FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4336                                   					; Start - M004
  4337 0000048E 1E                      	push	ds			; segment of stub
  4338 0000048F BB[2D11]                	mov	bx,disa20_iret		; offset in stub
  4339 00000492 53                      	push	bx
  4340 00000493 CB                      	retf	  			; go to stub
  4341                                  					; End - M004
  4342                                  ;SYSTEM_CALL ENDP
  4343                                  
  4344                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4345                                  ; 04/11/2022
  4346                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4347                                  
  4348                                  ; ==========================================================================
  4349                                  ;
  4350                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4351                                  ; the stack prior to giving the user control
  4352                                  ;
  4353                                  ; ==========================================================================
  4354                                  
  4355                                  ; 01/05/2019 - Retro DOS v4.0
  4356                                  
  4357                                          ;procedure restore_world,NEAR
  4358                                  restore_world:
  4359                                  	;getdseg <es>		; es -> dosdata
  4360 00000494 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4361                                  
  4362 00000499 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4363                                  
  4364 0000049E 58                              POP     AX
  4365 0000049F 5B                              POP     BX
  4366 000004A0 59                              POP     CX
  4367 000004A1 5A                              POP     DX
  4368 000004A2 5E                              POP     SI
  4369 000004A3 5F                              POP     DI
  4370 000004A4 5D                              POP     BP
  4371 000004A5 1F                              POP     DS
  4372                                  
  4373 000004A6 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4374                                  
  4375                                  ;restore_world	ENDP
  4376                                  
  4377                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4378                                  
  4379                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4380                                  ; 04/11/2022
  4381                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4382                                  
  4383                                  ; ==========================================================================
  4384                                  ;
  4385                                  ; Save_World saves complete registers on the stack
  4386                                  ;
  4387                                  ; ==========================================================================
  4388                                  
  4389                                          ;procedure save_world,NEAR
  4390                                  save_world:
  4391                                  	;getdseg <es>		; es -> dosdata
  4392 000004AB 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4393                                  
  4394 000004B0 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4395                                  
  4396                                  	; 12/05/2019
  4397                                          
  4398 000004B5 1E                      	PUSH    DS
  4399 000004B6 55                              PUSH    BP
  4400 000004B7 57                              PUSH    DI
  4401 000004B8 56                              PUSH    SI
  4402 000004B9 52                              PUSH    DX
  4403 000004BA 51                              PUSH    CX
  4404 000004BB 53                              PUSH    BX
  4405 000004BC 50                              PUSH    AX
  4406                                  
  4407 000004BD 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4408                                  
  4409 000004C2 55                      	push	BP		
  4410 000004C3 89E5                    	mov	BP,SP
  4411 000004C5 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4412 000004C8 5D                      	pop	BP
  4413                                  	
  4414 000004C9 C3                      	retn
  4415                                  
  4416                                  ;save_world	ENDP
  4417                                  
  4418                                  ; 01/05/2019
  4419                                  
  4420                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4421                                  ; 04/11/2022
  4422                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4423                                  
  4424                                  ; ==========================================================================
  4425                                  ;
  4426                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4427                                  ;
  4428                                  ; ==========================================================================
  4429                                  
  4430                                          ;procedure get_user_stack,NEAR
  4431                                  Get_User_Stack:
  4432                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4433 000004CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4434 000004CF C536[8405]                      lds	si,[USER_SP]
  4435 000004D3 C3                      	retn
  4436                                  
  4437                                  ;get_user_stack  ENDP
  4438                                  
  4439                                  ; 22/12/2022
  4440                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4441                                  ;%if 0
  4442                                  
  4443                                  ; ---------------------------------------------------------------------------
  4444                                  ;
  4445                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4446                                  ; Inputs:
  4447                                  ;	User registers, User Stack, INTS disabled
  4448                                  ;	If CALL F8, DS:DX is new handler address
  4449                                  ; Function:
  4450                                  ;	Process OEM INT 21 extensions
  4451                                  ; Outputs:
  4452                                  ;	Jumps to OEM_HANDLER if appropriate
  4453                                  ;
  4454                                  ; ---------------------------------------------------------------------------
  4455                                  
  4456                                  ;IF	NOT IBM
  4457                                  
  4458                                  _$SET_OEM_HANDLER:
  4459                                  	; 01/05/2019 - Retro DOS v4.0
  4460                                  	
  4461                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4462                                  	;(jb	short NOTOOEM)
  4463                                  
  4464 000004D4 06                      	push	es ; *
  4465                                  	;getdseg <es>			; es -> dosdata
  4466 000004D5 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4467                                  
  4468 000004DA 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4469                                  						; (message) request	
  4470                                  	; AH = 0F8h = SET OEM HANDLER
  4471                                  
  4472 000004DC 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4473 000004E1 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4474                                  
  4475 000004E6 07                      	pop	es ; *
  4476                                  
  4477 000004E7 CF                      	IRET                            ; Quick return, Have altered no registers
  4478                                  
  4479                                  check_trueversion_request:
  4480                                  	; 18/07/2019 - Retro DOS v3.0
  4481                                  
  4482                                  	; Retro DOS v2.0 - 20/04/2018
  4483 000004E8 83F8FF                  	CMP	AX,0FFFFh
  4484                                  	; 18/07/2018
  4485 000004EB 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4486                                  
  4487                                  	; 01/05/2019
  4488 000004ED 07                      	pop	es ; *
  4489                                  
  4490 000004EE B40E                    	mov	ah,0Eh
  4491                                  
  4492                                  	; Retro DOS v4.0 feature only!
  4493 000004F0 81FBA101                	cmp	bx,417  ; Signature to bypass
  4494                                  			; Retro DOS true version message	
  4495 000004F4 7414                    	je	short true_version_iret
  4496                                  
  4497 000004F6 56                      	push	si
  4498 000004F7 53                      	push	bx
  4499                                  
  4500 000004F8 BE[BF00]                	mov	si,RETRODOSMSG
  4501                                  wrdosmsg:
  4502                                  	;movb	ah,0Eh
  4503 000004FB BB0700                  	mov	bx,7
  4504                                  wrdosmsg_nxt:
  4505 000004FE 2EAC                    	cs	lodsb
  4506 00000500 3C24                    	cmp	al,'$'
  4507 00000502 7404                    	je	short wrdosmsg_ok		
  4508 00000504 CD10                    	int	10h
  4509 00000506 EBF6                    	jmp	short wrdosmsg_nxt
  4510                                  
  4511                                  wrdosmsg_ok:
  4512 00000508 5B                      	pop	bx
  4513 00000509 5E                      	pop	si
  4514                                  
  4515                                  true_version_iret:
  4516                                  	; ah = 0Eh
  4517 0000050A B040                    	mov	al,40h ; Retro DOS v4.0 
  4518 0000050C CF                      	iret
  4519                                  
  4520                                  	; If above F8 try to jump to handler
  4521                                  
  4522                                  DO_OEM_FUNC:
  4523                                  	; 01/05/2019
  4524 0000050D 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4525 00000513 7504                    	JNE     short OEM_JMP
  4526 00000515 07                      	pop	es ; *
  4527 00000516 E906FE                  	JMP     BADCALL                 ; Handler not initialized
  4528                                  OEM_JMP:
  4529 00000519 06                      	push	es
  4530 0000051A 1F                      	pop	ds ; DOSDATA segment !
  4531 0000051B 07                      	pop	es ; *
  4532                                  
  4533                                  	; 22/12/2022
  4534 0000051C FB                      	sti	; (enable interrupts before jumping to private handler)  
  4535                                  
  4536 0000051D FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4537                                  
  4538                                  ;       ENDIF
  4539                                  
  4540                                  ; ---------------------------------------------------------------------------
  4541                                  
  4542                                  ;%endif
  4543                                  
  4544                                  ;============================================================================
  4545                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4546                                  ;============================================================================
  4547                                  ; 17/07/2018 - Retro DOS v3.0
  4548                                  
  4549                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4550                                  ;	NAME	IBMCODE
  4551                                  
  4552                                  ;BREAK <NullDev -- Driver for null device>
  4553                                  
  4554                                  ; ROMDOS note:
  4555                                  ;	NUL device driver used to be here, but it was removed and placed in
  4556                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4557                                  ;	header, which is also in DOSDATA.
  4558                                  
  4559                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4560                                  
  4561                                  ;----------------------------------------------------------------------------
  4562                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4563                                  ;----------------------------------------------------------------------------
  4564                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4565                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4566                                  
  4567                                  ;Public MSC001S,MSC001E
  4568                                  ;MSC001S label byte
  4569                                  	;IF	IBM
  4570                                  ; Codes returned by BIOS
  4571                                  ERRIN:
  4572 00000521 02                      	DB	2			; NO RESPONSE
  4573 00000522 06                      	DB	6			; SEEK FAILURE
  4574 00000523 0C                      	DB	12			; GENERAL ERROR
  4575 00000524 04                      	DB	4			; BAD CRC
  4576 00000525 08                      	DB	8			; SECTOR NOT FOUND
  4577 00000526 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4578                                  ERROUT:
  4579                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4580 00000527 80                      	DB	80H			; NO RESPONSE
  4581 00000528 40                      	DB	40H			; Seek failure
  4582 00000529 02                      	DB	2			; Address Mark not found
  4583 0000052A 10                      	DB	10H			; BAD CRC
  4584 0000052B 04                      	DB	4			; SECTOR NOT FOUND
  4585 0000052C 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4586                                  
  4587                                  NUMERR	EQU	$-ERROUT
  4588                                  	;ENDIF
  4589                                  ;MSC001E label byte
  4590                                  ;----------------------------------------------------------------------------
  4591                                  
  4592                                  ;============================================================================
  4593                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4594                                  ;============================================================================
  4595                                  ; 18/07/2018 - Retro DOS v3.0
  4596                                  ; 15/05/2019 - Retro DOS v4.0
  4597                                  
  4598                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4599                                  
  4600                                  ;   AbsSetup - setup for abs disk functions
  4601                                  ;----------------------------------------------------------------------------
  4602                                  
  4603                                  AbsSetup:
  4604 0000052D 36FE06[2103]            	INC	byte [SS:INDOS]		; SS override
  4605 00000532 FB                      	STI
  4606 00000533 FC                      	CLD
  4607 00000534 1E                      	PUSH	DS
  4608 00000535 16                      	push	ss
  4609 00000536 1F                      	pop	ds
  4610 00000537 E80C01                  	CALL	GETBP
  4611 0000053A 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  4612                                  	;mov	word [es:bp+1Fh]
  4613 0000053C 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4614                                  errdriv:
  4615 00000542 1F                      	POP	DS
  4616 00000543 7301                    	jnc	short AbsSetup2
  4617                                  AbsSetup_retn:
  4618 00000545 C3                      	retn
  4619                                  
  4620                                  AbsSetup2:
  4621                                  	; 15/05/2019 - Retro DOS v4.0
  4622                                  	; MSDOS 6.0
  4623                                  					; SS override
  4624 00000546 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4625 0000054D E83B04                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4626 00000550 72F3                    	jc	short AbsSetup_retn
  4627 00000552 E8A756                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4628                                  
  4629                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4630 00000555 1E                      	PUSH	DS
  4631 00000556 56                      	PUSH	SI
  4632 00000557 50                      	PUSH	AX
  4633                                  
  4634 00000558 16                      	push	ss
  4635 00000559 1F                      	pop	ds
  4636                                  	
  4637 0000055A BE[BE03]                	MOV	SI,OPENBUF
  4638 0000055D 8804                    	MOV	[SI],AL
  4639 0000055F 800441                  	ADD	BYTE [SI],"A"
  4640 00000562 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4641 00000567 B80003                  	MOV	AX,0300H
  4642 0000056A F8                      	CLC
  4643 0000056B CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4644                                  		
  4645                                  		; 04/11/2022
  4646                                  		; (INT 2Ah - AX = 0300h)
  4647                                  		; Microsoft Networks - CHECK DIRECT I/O
  4648                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4649                                  		;    only drive specifier--must include the colon)
  4650                                  		; Return: CF clear if absolute disk access allowed
  4651                                  
  4652 0000056D 58                      	POP	AX
  4653 0000056E 5E                      	POP	SI
  4654 0000056F 1F                      	POP	DS
  4655 00000570 73D3                    	jnc	short AbsSetup_retn
  4656                                  
  4657                                  	;mov	word [ss:EXTERR],32h
  4658 00000572 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4659 00000579 C3                      	retn
  4660                                  
  4661                                  ;---------------------------------------------------------------------------
  4662                                  ;
  4663                                  ; Procedure Name : ABSDRD
  4664                                  ;
  4665                                  ; Interrupt 25 handler. Performs absolute disk read.
  4666                                  ; Inputs:	AL - 0-based drive number
  4667                                  ;		DS:BX point to destination buffer
  4668                                  ;		CX number of logical sectors to read
  4669                                  ;		DX starting logical sector number (0-based)
  4670                                  ; Outputs:	Original flags still on stack
  4671                                  ;		Carry set
  4672                                  ;		    AH error from BIOS
  4673                                  ;		    AL same as low byte of DI from INT 24
  4674                                  ;
  4675                                  ;---------------------------------------------------------------------------
  4676                                          ;procedure   ABSDRD,FAR
  4677                                  ABSDRD:
  4678                                  	; 15/05/2019 - Retro DOS v4.0
  4679                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4680                                  	; 04/11/2022
  4681                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4682                                  	
  4683                                  	; MSDOS 6.0
  4684 0000057A FA                      	CLI
  4685                                  	
  4686                                  ;	set up ds to point to DOSDATA
  4687                                  
  4688 0000057B 50                      	push	ax			; preserve AX value
  4689 0000057C 8CD8                    	mov	ax,ds			; store DS value in AX
  4690                                  	;getdseg <ds>
  4691 0000057E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4692 00000583 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4693 00000586 58                      	pop	ax			; restore AX value
  4694                                  
  4695                                  	; M072:
  4696                                  	; We shall save es on the user stack here. We need to use ES in
  4697                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4698                                  	; time in order to restore the user stack.
  4699                                  
  4700 00000587 06                      	push	es  ; ****		; M072
  4701                                  
  4702 00000588 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4703 0000058C 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4704                                  
  4705                                  ; 	set up ss to point to DOSDATA
  4706                                  ;
  4707                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4708                                  ; version of the getdseg macro with the SS register! An interrupt will
  4709                                  ; sneak through.
  4710                                  
  4711                                  ;ifndef ROMDOS
  4712                                  	;getdseg <ss>			; cli in entry of routine
  4713 00000590 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4714                                  ;else
  4715                                  ;	mov	ds, cs:[BioDataSeg]
  4716                                  ;	assume	ds:bdata
  4717                                  ;
  4718                                  ;	mov	ss, ds:[DosDataSg]
  4719                                  ;	assume	ss:DOSDATA
  4720                                  ;
  4721                                  ;endif ; ROMDOS
  4722                                  
  4723 00000595 BC[2009]                	MOV	SP,DSKSTACK
  4724                                  
  4725 00000598 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4726                                  
  4727 0000059C 06                      	push	es ; *** (MSDOS 6.21)
  4728 0000059D E80BFF                  	call	save_world		; save all regs
  4729                                  
  4730 000005A0 06                      	PUSH	ES ; **
  4731 000005A1 E889FF                  	CALL	AbsSetup
  4732 000005A4 723D                    	JC	short ILEAVE
  4733                                  
  4734                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4735                                  	;  the secondary cache. The secondary cache does not check for media
  4736                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4737                                  	;  read, and get data from the previous disk. To get around this,
  4738                                  	;  we just won't use the secondary cache for absolute disk reads.
  4739                                  	;                                                      -mw 8/5/88
  4740                                  
  4741                                  	;EnterCrit critDisk
  4742 000005A6 E8DF0D                  	call	ECritDisk
  4743 000005A9 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4744                                  	;LeaveCrit critDisk
  4745 000005AF E8F10D                  	call	LCritDisk
  4746                                  
  4747                                          ;invoke	DSKREAD
  4748 000005B2 E81D32                  	CALL	DSKREAD
  4749 000005B5 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4750                                  
  4751 000005B7 89F9                            mov     cx,di
  4752 000005B9 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4753 000005BE 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4754                                  
  4755                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4756                                  ;            sectors, also termed an "Extent".)
  4757                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4758                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4759                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4760                                  ;
  4761                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4762                                  ;	buffers must be "read" into the transfer memory block, so that the
  4763                                  ;       transfer memory reflects the most recent data.
  4764                                  
  4765                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4766 000005C3 E86134                          call	DskRdBufScan
  4767 000005C6 EB1B                    	jmp     short ILEAVE
  4768                                  
  4769                                  TLEAVE:
  4770 000005C8 7419                    	JZ	short ILEAVE
  4771                                  
  4772                                  ERR_LEAVE:				; M039
  4773                                  	; 15/07/2018 - Retro DOS v3.0
  4774                                          ;IF	IBM
  4775                                  ; Translate the error code to ancient 1.1 codes
  4776 000005CA 06                              PUSH    ES ; *
  4777 000005CB 0E                              PUSH    CS
  4778 000005CC 07                              POP     ES
  4779 000005CD 30E4                            XOR     AH,AH			; Nul error code
  4780                                  	;mov	cx,6
  4781 000005CF B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4782 000005D2 BF[2105]                        MOV     DI,ERRIN		; Point to error conditions
  4783 000005D5 F2AE                            REPNE   SCASB
  4784 000005D7 7504                            JNZ     SHORT LEAVECODE		; Not found
  4785                                  	;mov	ah,[ES:DI+5]
  4786 000005D9 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4787                                  LEAVECODE:
  4788 000005DD 07                              POP     ES ; *
  4789                                  	; 15/05/2019 - Retro DOS v4.0
  4790 000005DE 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4791                                          ;ENDIF
  4792                                  
  4793 000005E2 F9                              STC
  4794                                  ILEAVE:
  4795                                  	; 15/05/2019
  4796 000005E3 07                              POP     ES ; **
  4797 000005E4 E8ADFE                  	call	restore_world
  4798 000005E7 07                              pop	es ; *** (MSDOS 6.21)
  4799 000005E8 FA                      	CLI
  4800 000005E9 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4801 000005ED 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4802 000005F2 16                              push	ss			; M072 - Start
  4803 000005F3 07                      	pop	es			; es - dosdata
  4804 000005F4 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4805 000005F9 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4806 000005FE 07                      	pop	es  ; ****		; Note es was saved on user
  4807                                  					; stack at entry 
  4808                                  					; M072 - End
  4809 000005FF FB                              STI
  4810 00000600 CB                      	RETF   ; ! FAR return !
  4811                                  
  4812                                  ;ABSDRD	ENDP
  4813                                  
  4814                                  ;---------------------------------------------------------------------------
  4815                                  ;
  4816                                  ; Procedure Name : ABSDWRT
  4817                                  ;
  4818                                  ; Interrupt 26 handler. Performs absolute disk write.
  4819                                  ; Inputs:	AL - 0-based drive number
  4820                                  ;		DS:BX point to source buffer
  4821                                  ;		CX number of logical sectors to write
  4822                                  ;		DX starting logical sector number (0-based)
  4823                                  ; Outputs:	Original flags still on stack
  4824                                  ;		Carry set
  4825                                  ;		    AH error from BIOS
  4826                                  ;		    AL same as low byte of DI from INT 24
  4827                                  ;
  4828                                  ;---------------------------------------------------------------------------
  4829                                          ;procedure   ABSDWRT,FAR
  4830                                  ABSDWRT:
  4831                                  	; 15/05/2019 - Retro DOS v4.0
  4832                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4833                                  	; 04/11/2022
  4834                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4835                                  
  4836 00000601 FA                      	CLI
  4837                                  
  4838                                  ;	set up ds to point to DOSDATA
  4839                                  
  4840 00000602 50                      	push	ax
  4841 00000603 8CD8                    	mov	ax,ds
  4842                                  	;getdseg <ds>
  4843 00000605 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4844 0000060A A3[0A0D]                	mov	[TEMPSEG],ax
  4845 0000060D 58                      	pop	ax
  4846                                  
  4847                                  	; M072:
  4848                                  	; We shall save es on the user stack here. We need to use ES in
  4849                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4850                                  	; time in order to restore the user stack.
  4851                                  
  4852 0000060E 06                      	push	es ; ****		; M072
  4853                                  
  4854 0000060F 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4855 00000613 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4856                                  
  4857                                  	; set up ss to point to DOSDATA
  4858                                  	;
  4859                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4860                                  	; ROMDOS version of the getdseg macro with the SS register!
  4861                                  	; An interrupt will sneak through.
  4862                                  
  4863                                  ;ifndef ROMDOS
  4864                                  	;getdseg <ss>			; cli in entry of routine
  4865 00000617 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4866                                  ;else
  4867                                  ;	mov	ds, cs:[BioDataSeg]
  4868                                  ;	assume	ds:bdata
  4869                                  ;
  4870                                  ;	mov	ss, ds:[DosDataSg]
  4871                                  ;	assume	ss:DOSDATA
  4872                                  ;
  4873                                  ;endif ; ROMDOS
  4874                                  
  4875 0000061C BC[2009]                	MOV	SP,DSKSTACK
  4876                                  		; we are now switched to DOS's disk stack
  4877                                  
  4878 0000061F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4879                                  
  4880 00000623 06                      	push	es ; *** (MSDOS 6.21)
  4881                                  
  4882 00000624 E884FE                  	call	save_world	      	; save all regs
  4883                                  
  4884 00000627 06                      	PUSH	ES ; **
  4885 00000628 E802FF                  	CALL	AbsSetup
  4886 0000062B 72B6                    	JC	short ILEAVE
  4887                                  
  4888                                  	;EnterCrit critDisk
  4889 0000062D E8580D                  	call	ECritDisk
  4890 00000630 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4891 00000636 E89803                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4892                                  	;LeaveCrit critDisk
  4893 00000639 E8670D                  	call	LCritDisk
  4894                                  
  4895                                  ;M039
  4896                                  ;       DS:BX = transfer address (source data address).
  4897                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4898                                  ;	     sectors, also termed an "Extent".)
  4899                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4900                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4901                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4902                                  ;
  4903                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4904                                  ;       written. Note that all the above registers are preserved for
  4905                                  ;       DSKWRITE.
  4906                                  
  4907 0000063C 1E                              push    ds
  4908                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4909 0000063D E80137                  	call	DskWrtBufPurge
  4910 00000640 1F                              pop     ds
  4911                                  ;M039
  4912                                  	;invoke	DSKWRITE
  4913 00000641 E8B731                  	call	DSKWRITE
  4914 00000644 EB82                    	JMP	short TLEAVE
  4915                                  
  4916                                  ;ABSDWRT ENDP
  4917                                  
  4918                                  ;----------------------------------------------------------------------------
  4919                                  ;
  4920                                  ; Procedure Name : GETBP
  4921                                  ;
  4922                                  ; Inputs:
  4923                                  ;	AL = Logical unit number (A = 0)
  4924                                  ; Function:
  4925                                  ;	Find Drive Parameter Block
  4926                                  ; Outputs:
  4927                                  ;	ES:BP points to DPB
  4928                                  ;	[THISDPB] = ES:BP
  4929                                  ;	Carry set if unit number bad or unit is a NET device.
  4930                                  ;		Later case sets extended error error_I24_not_supported
  4931                                  ; No other registers alteredjjj
  4932                                  ;
  4933                                  ;----------------------------------------------------------------------------
  4934                                  
  4935                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4936                                  GETBP:
  4937                                  	; 15/05/2019 - Retro DOS v4.0
  4938                                  	; 11/07/2018 - Retro DOS v3.0
  4939 00000646 50                      	PUSH	AX
  4940 00000647 0401                    	ADD	AL,1		; No increment; need carry flag
  4941 00000649 7216                    	JC	SHORT SKIPGET
  4942 0000064B E80265                  	CALL	GETTHISDRV
  4943                                  	; MSDOS 6.0
  4944 0000064E 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4945 00000650 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4946 00000652 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4947 00000655 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4948 00000657 F9                      	STC				;DCR.			;AN000;
  4949 00000658 A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4950 0000065B C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4951                                  SKIPGET:
  4952 00000661 58                      	POP	AX
  4953 00000662 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4954                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4955                                  	;jnc	short getbp_t
  4956                                  	;retn
  4957                                  getbp_t:
  4958 00000664 C42E[A205]              	LES	BP,[THISCDS]
  4959                                  	; 15/12/2022
  4960 00000668 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  4961                                  	; 07/12/2022
  4962                                  	;TEST	WORD [ES:BP+43H],8000H
  4963                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  4964 0000066D 7408                    	JZ	SHORT GETBP_CDS
  4965 0000066F C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  4966 00000675 F9                      	STC
  4967                                  GETBP_RETN:
  4968 00000676 C3                      	RETN
  4969                                  
  4970                                  GETBP_CDS:
  4971                                  	;LES	BP,[ES:BP+45H]
  4972 00000677 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  4973                                  GOTDPB:
  4974                                  	; Load THISDPB from ES:BP
  4975 0000067B 892E[8A05]              	MOV	[THISDPB],BP
  4976 0000067F 8C06[8C05]              	MOV	[THISDPB+2],ES
  4977 00000683 C3                      	RETN
  4978                                  
  4979                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  4980                                  
  4981                                  ;----------------------------------------------------------------------------
  4982                                  ;
  4983                                  ; Procedure Name : SYS_RETURN
  4984                                  ;
  4985                                  ; These are the general system call exit mechanisms. All internal system
  4986                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  4987                                  ; is to set the user's flags and set his AX register for return.
  4988                                  ;
  4989                                  ;----------------------------------------------------------------------------
  4990                                  
  4991                                          ;procedure   SYS_RETURN,NEAR
  4992                                  SYS_RETURN:        
  4993                                          ;entry	SYS_RET_OK
  4994                                  SYS_RET_OK:   
  4995 00000684 E843FE                  	call    Get_User_Stack
  4996                                  		; turn off user's carry flag
  4997                                  SYS_RET_OK_clc: ; 25/06/2019 
  4998                                          ;;and	word [SI+16h],0FFFEh 
  4999                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5000                                          ; 25/06/2019
  5001 00000687 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5002 0000068B EB10                    	JMP     SHORT DO_RET
  5003                                  
  5004                                          ;entry   SYS_RET_ERR
  5005                                  SYS_RET_ERR:        
  5006 0000068D 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5007 0000068F E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5008 00000692 E81A00                  	CALL	ErrorMap
  5009                                  
  5010                                  	;entry	From_GetSet
  5011                                  From_GetSet:
  5012 00000695 E832FE                          call    Get_User_Stack
  5013                                  		 ; signal carry to user
  5014                                  	;;or	word [SI+16h],1
  5015                                  	;OR	word [SI+user_env.user_F],f_Carry
  5016                                  	; 25/06/2019
  5017 00000698 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5018 0000069C F9                      	STC			; also, signal internal error
  5019                                  DO_RET:
  5020                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5021 0000069D 8904                    	MOV	[SI],AX
  5022 0000069F C3                      	RETN
  5023                                  
  5024                                  	;entry	FCB_RET_OK
  5025                                  FCB_RET_OK:
  5026                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5027                                  NO_OP:
  5028 000006A0 30C0                    	XOR	AL,AL
  5029 000006A2 C3                      	retn
  5030                                  
  5031                                  	;entry	FCB_RET_ERR
  5032                                  FCB_RET_ERR:
  5033 000006A3 30E4                    	XOR	AH,AH
  5034 000006A5 36A3[2403]              	mov	[ss:EXTERR],AX
  5035 000006A9 E80300                  	CALL	ErrorMap
  5036 000006AC B0FF                    	MOV	AL,-1
  5037 000006AE C3                      	retn
  5038                                  
  5039                                  	;entry	ErrorMap
  5040                                  ErrorMap:
  5041 000006AF 56                      	PUSH	SI
  5042                                  				; ERR_TABLE_21 is now in DOSDATA
  5043 000006B0 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5044                                  				; SS override for FAILERR and EXTERR
  5045 000006B3 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5046 000006B9 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5047                                  		 ; Ooops, this is the REAL reason
  5048                                  	;mov	word [SS:EXTERR],53h
  5049 000006BB 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5050                                  EXTENDED_NORMAL:
  5051 000006C2 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5052 000006C5 5E                      	POP	SI
  5053 000006C6 C3                      	retn
  5054                                  
  5055                                  	;EndProc SYS_RETURN
  5056                                  
  5057                                  ;---------------------------------------------------------------------------
  5058                                  ;
  5059                                  ; Procedure Name : CAL_LK
  5060                                  ;
  5061                                  ; Inputs:
  5062                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5063                                  ;		(DS NEED not be DOSDATA)
  5064                                  ;	[EXTERR] is set with error
  5065                                  ; Function:
  5066                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5067                                  ; Outputs:
  5068                                  ;	[EXTERR_CLASS] set
  5069                                  ;	[EXTERR_ACTION] set
  5070                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5071                                  ; Destroys SI, FLAGS
  5072                                  ;
  5073                                  ;---------------------------------------------------------------------------
  5074                                  
  5075                                  	;procedure CAL_LK,NEAR
  5076                                  CAL_LK:
  5077 000006C7 1E                      	PUSH	DS
  5078 000006C8 50                      	PUSH	AX
  5079 000006C9 53                      	PUSH	BX
  5080                                  
  5081                                  ;M048	Context DS		; DS:SI -> Table
  5082                                  ;
  5083                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5084                                  ; is DOSDATA
  5085                                  
  5086                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5087                                  	; 15/05/2019 - Retro DOS v4.0
  5088 000006CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5089                                  
  5090                                  	; 18/07/2018
  5091                                  	;push	ss
  5092                                  	;pop	ds
  5093                                  
  5094 000006CF 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5095                                  TABLK1:
  5096 000006D3 AC                      	LODSB
  5097                                  
  5098 000006D4 3CFF                    	CMP	AL,0FFH
  5099 000006D6 7409                    	JZ	short GOT_VALS	; End of table
  5100 000006D8 38D8                    	CMP	AL,BL
  5101 000006DA 7405                    	JZ	short GOT_VALS	; Got entry
  5102 000006DC 83C603                  	ADD	SI,3		; Next table entry
  5103                                  	; 15/08/2018
  5104 000006DF EBF2                    	JMP	short TABLK1
  5105                                  
  5106                                  GOT_VALS:
  5107 000006E1 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5108                                  
  5109 000006E2 80FCFF                  	CMP	AH,0FFH
  5110 000006E5 7404                    	JZ	short NO_SET_ACT
  5111 000006E7 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5112                                  NO_SET_ACT:
  5113 000006EB 3CFF                    	CMP	AL,0FFH
  5114 000006ED 7403                    	JZ	short NO_SET_CLS
  5115 000006EF A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5116                                  NO_SET_CLS:
  5117 000006F2 AC                      	LODSB			; Get LOCUS
  5118                                  
  5119 000006F3 3CFF                    	CMP	AL,0FFH
  5120 000006F5 7403                    	JZ	short NO_SET_LOC
  5121 000006F7 A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5122                                  NO_SET_LOC:
  5123 000006FA 5B                      	POP	BX
  5124 000006FB 58                      	POP	AX
  5125 000006FC 1F                      	POP	DS
  5126 000006FD C3                      	retn
  5127                                  
  5128                                  	;EndProc CAL_LK
  5129                                  
  5130                                  ;---------------------------------------------------------------------------
  5131                                  ;
  5132                                  ; Procedure Name : ETAB_LK
  5133                                  ;
  5134                                  ; Inputs:
  5135                                  ;	AX is error code
  5136                                  ;	[USER_IN_AX] has AH value of system call involved
  5137                                  ; Function:
  5138                                  ;	Make sure error code is appropriate to this call.
  5139                                  ; Outputs:
  5140                                  ;	AX MAY be mapped error code
  5141                                  ;	[EXTERR] = Input AX
  5142                                  ; Destroys ONLY AX and FLAGS
  5143                                  ;
  5144                                  ;---------------------------------------------------------------------------
  5145                                  
  5146                                  	;procedure ETAB_LK,NEAR
  5147                                  
  5148                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5149 000006FE 1E                      	PUSH	DS
  5150 000006FF 56                      	PUSH	SI
  5151 00000700 51                      	PUSH	CX
  5152 00000701 53                      	PUSH	BX
  5153                                  
  5154                                  	;Context DS			; SS is DOSDATA
  5155                                  
  5156 00000702 16                      	push	ss
  5157 00000703 1F                      	pop	ds
  5158                                  
  5159 00000704 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5160                                  
  5161                                  					; I21_MAP_E_TAB is now in DOSCODE
  5162 00000707 BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5163 0000070A 88C7                    	MOV	BH,AL			; Real code to BH
  5164 0000070C 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5165                                  TABLK2:
  5166                                  	; 15/05/2019 - Retro DOS v4.0
  5167 00000710 2E                      	cs
  5168 00000711 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5169                                  	
  5170                                  	; 18/07/2018 - Retro DOS v3.0
  5171                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5172                                  
  5173 00000712 3CFF                    	CMP	AL,0FFH 		; End of table?
  5174 00000714 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5175 00000716 38D8                    	CMP	AL,BL			; Found call?
  5176 00000718 740C                    	JZ	short GOT_CALL		; Yes
  5177 0000071A 86E0                    	XCHG	AH,AL			; Count to AL
  5178 0000071C 30E4                    	XOR	AH,AH			; Make word for add
  5179 0000071E 01C6                    	ADD	SI,AX			; Next table entry
  5180 00000720 EBEE                    	JMP	short TABLK2
  5181                                  
  5182                                  NOT_IN_TABLE:
  5183 00000722 88F8                    	MOV	AL,BH			; Restore original code
  5184 00000724 EB0C                    	JMP	SHORT NO_MAP
  5185                                  
  5186                                  GOT_CALL:
  5187 00000726 88E1                    	MOV	CL,AH
  5188 00000728 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5189                                  CHECK_CODE:
  5190                                  	; 15/05/2019 - Retro DOS v4.0
  5191 0000072A 2E                      	cs
  5192 0000072B AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5193                                  
  5194                                  	; 18/07/2018
  5195                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5196                                  
  5197 0000072C 38F8                    	CMP	AL,BH			; Code OK?
  5198 0000072E 7402                    	JZ	short NO_MAP		; Yes
  5199 00000730 E2F8                    	LOOP	CHECK_CODE
  5200                                  NO_MAP:
  5201 00000732 30E4                    	XOR	AH,AH			; AX is now valid code
  5202 00000734 5B                      	POP	BX
  5203 00000735 59                      	POP	CX
  5204 00000736 5E                      	POP	SI
  5205 00000737 1F                      	POP	DS
  5206 00000738 C3                      	retn
  5207                                  
  5208                                  	;EndProc ETAB_LK
  5209                                  
  5210                                  ; 18/07/2018 - Retro DOS v3.0
  5211                                  ;---------------------------------------------------------------------------
  5212                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5213                                  
  5214                                  ;IF installed ; (*)
  5215                                  
  5216                                  ;---------------------------------------------------------------------------
  5217                                  ;
  5218                                  ; Procedure Name : SetBad
  5219                                  ;
  5220                                  ; SetBad sets up info for bad functions
  5221                                  ;
  5222                                  ;---------------------------------------------------------------------------
  5223                                  
  5224                                  SetBad:
  5225                                  	;mov	ax,1
  5226 00000739 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5227                                  
  5228                                  	; MSDOS 3.3
  5229                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5230                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5231                                  
  5232                                  ;	set up ds to point to DOSDATA
  5233                                  
  5234                                  	; 15/05/2019 - Retro DOS v4.0
  5235                                  	; MSDOS 6.0
  5236 0000073C 1E                      	push	ds
  5237                                  
  5238                                  	;getdseg <ds>
  5239 0000073D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5240                                  
  5241 00000742 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5242                                  
  5243 00000747 1F                      	pop	ds	  	;hkn; restore ds
  5244                                  
  5245 00000748 F9                      	STC
  5246 00000749 C3                      	retn
  5247                                  
  5248                                  ;--------------------------------------------------------------------------
  5249                                  ;
  5250                                  ; Procedure Name : BadCall
  5251                                  ;
  5252                                  ; BadCall is the initial routine for bad function calls
  5253                                  ;
  5254                                  ;--------------------------------------------------------------------------
  5255                                  
  5256                                  BadCall:
  5257 0000074A E8ECFF                  	call	SetBad
  5258 0000074D CB                      	retf
  5259                                  
  5260                                  ;--------------------------------------------------------------------------
  5261                                  ;
  5262                                  ; OKCall always sets carry to off.
  5263                                  ;
  5264                                  ;-----------------------------------------------------------------------
  5265                                  
  5266                                  OKCall:
  5267 0000074E F8                      	CLC
  5268 0000074F CB                      	retf
  5269                                  
  5270                                  ;---------------------------------------------------------------------------
  5271                                  ;
  5272                                  ; Procedure Name : INT2F
  5273                                  ;
  5274                                  ; INT 2F handler works as follows:
  5275                                  ;   PUSH    AX
  5276                                  ;   MOV     AX,multiplex:function
  5277                                  ;   INT     2F
  5278                                  ;   POP     ...
  5279                                  ; The handler itself needs to make the AX available for the various routines.
  5280                                  ;
  5281                                  ;----------------------------------------------------------------------------
  5282                                  
  5283                                  ; 15/05/2019 - Retro DOS v4.0
  5284                                  
  5285                                  ;KERNEL_SEGMENT equ 70h
  5286                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5287                                  DOSBIODATASEG equ 70h
  5288                                  
  5289                                  ; retrodos4.s - offset in BIOSDATA
  5290                                  bios_i2f equ 5
  5291                                  
  5292                                  ;PUBLIC	Int2F
  5293                                  ;INT2F	PROC	FAR
  5294                                  
  5295                                  ; 15/05/2019
  5296                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5297                                  
  5298                                  ; 04/11/2022
  5299                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5300                                  
  5301                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5302                                  	; 18/07/2018 - Retro DOS v3.0
  5303                                  INT2F:
  5304                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5305                                  INT2FNT:
  5306                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5307 00000750 FB                      	STI
  5308                                  	;cmp	ah,11h
  5309 00000751 80FC11                  	CMP	AH,MultNET
  5310 00000754 750A                    	JNZ	short INT2FSHR
  5311                                  TestInstall:
  5312 00000756 08C0                    	OR	AL,AL
  5313 00000758 7403                    	JZ	short Leave2F
  5314                                  BadFunc:
  5315 0000075A E8DCFF                  	CALL	SetBad
  5316                                  
  5317                                  	;entry	Leave2F
  5318                                  Leave2F:
  5319 0000075D CA0200                  	RETF	2			; long return + clear flags off stack
  5320                                  
  5321                                  INT2FSHR:
  5322                                  	;cmp	ah,10h
  5323 00000760 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5324 00000763 74F1                    	JZ	short TestInstall	; yes, check for installation
  5325                                  INT2FNLS:
  5326                                  	;cmp	ah,14h
  5327 00000765 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5328 00000768 74EC                    	JZ	short TestInstall	; yes check for installation
  5329                                  INT2FDOS:
  5330                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5331                                  
  5332                                  	; 18/07/2018
  5333                                  	; MSDOS 3.3
  5334                                  	;;cmp	ah,12h	
  5335                                  	;CMP	AH,MultDOS
  5336                                  	;jz	short DispatchDOS
  5337                                  	;iret
  5338                                  
  5339                                  	; 15/05/2019
  5340                                  	; MSDOS 6.0
  5341                                  	;cmp	ah,12h	; 07/12/2022
  5342 0000076A 80FC12                  	CMP	AH,MultDOS
  5343 0000076D 7503                    	JNZ	short check_win		;check if win386 broadcast
  5344 0000076F E9F801                  	jmp	DispatchDOS
  5345                                  
  5346                                  	; .... win386 .... 
  5347                                  
  5348                                  check_win:
  5349                                  	;cmp	ah,16h
  5350 00000772 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5351 00000775 7408                    	je	short Win386_Msg
  5352                                  
  5353                                  	; M044
  5354                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5355                                  	; of Windows. If so, do special action of going and saving last para
  5356                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5357                                  	; bug
  5358                                  
  5359 00000777 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5360                                  	;jne	short next_i2f		; no, chain on
  5361                                  	; 15/12/2022
  5362                                  	;jmp	winold_swap		; yes, do desired action
  5363 0000077A 7442                    	je	short winold_swap
  5364 0000077C E90701                  	jmp	next_i2f
  5365                                  
  5366                                  	; 15/12/2022
  5367                                  ;next_i2f:
  5368                                  ;	;;;jmp	bios_i2f
  5369                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5370                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5371                                  ;	; 04/11/2022
  5372                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5373                                  
  5374                                  ;	IRET				; This assume that we are at the head
  5375                                  					; of the list
  5376                                  ;INT2F	ENDP
  5377                                  
  5378                                  ; 15/05/2019 - Retro DOS v4.0
  5379                                  
  5380                                  ; We have received a message from Win386. There are three possible
  5381                                  ; messages we could get from Win386:
  5382                                  ;
  5383                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5384                                  ;		  to the Win386 startup info structure.
  5385                                  ; Exit		- for this, we clear the IsWin386 flag.
  5386                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5387                                  ;		  has already been handled. this is indicated by setting
  5388                                  ;		  CX to a non-zero value.
  5389                                  
  5390                                  Win386_Msg:
  5391 0000077F 1E                      	push	ds
  5392                                  
  5393                                  	;getdseg <DS>			; ds is DOSDATA
  5394 00000780 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5395                                  
  5396                                  	; For WIN386 2.xx instance data
  5397                                  
  5398 00000785 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5399 00000787 7503                    	jne	short Win386_Msg_exit
  5400 00000789 E92C01                  	jmp	OldWin386Init		; yes, return instance data
  5401                                  Win386_Msg_exit:
  5402 0000078C 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5403 0000078E 7503                    	jne	short Win386_Msg_devcall
  5404 00000790 E92E01                  	jmp	Win386_Leaving
  5405                                  Win386_Msg_devcall:
  5406 00000793 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5407 00000795 7503                    	jne	short Win386_Msg_init
  5408 00000797 E96501                  	jmp	Win386_Query
  5409                                  Win386_Msg_init:
  5410 0000079A 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5411 0000079C 7403                    	je	short Win386_Starting
  5412 0000079E E9E400                  	jmp	win_nexti2f		; no, return
  5413                                  Win386_Starting:
  5414                                  	; 17/12/2022
  5415 000007A1 F6C201                  	test	dl,1
  5416                                  	;test	dx,1			; is this really win386?
  5417 000007A4 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5418 000007A6 E9DC00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5419                                  Win386_vchk:
  5420                                  	; M018 -- start of block changes
  5421                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5422                                  	; than 030Ah, we skip the VxD presence check
  5423                                  
  5424                                  ;M067 -- Begin changes
  5425                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5426                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5427                                  ;So, we null out the VxD ptr before the check.
  5428                                  
  5429                                  	;mov	word [Win386_Info+6],0
  5430 000007A9 C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5431                                  	;mov	word [Win386_Info+8],0
  5432 000007AF C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5433                                  
  5434                                  ;M067 -- End changes
  5435                                  
  5436                                  ;ifdef JAPAN
  5437                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5438                                  ;else
  5439 000007B5 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5440                                  ;endif
  5441                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5442 000007B9 724E                    	jb	short Win386_vxd
  5443 000007BB E9DF00                  	jmp	noVxD31
  5444                                  
  5445                                  	; 15/12/2022
  5446                                  winold_swap:
  5447 000007BE 1E                      	push	ds
  5448 000007BF 06                      	push	es
  5449 000007C0 56                      	push	si
  5450 000007C1 57                      	push	di
  5451 000007C2 51                      	push	cx
  5452                                  
  5453                                  	;getdseg <ds>			;ds = DOSDATA
  5454 000007C3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5455                                  
  5456 000007C8 3C01                    	cmp	al,1			;swap Windows out call
  5457 000007CA 751B                    	jne	short swapin		;no, check if Swap in call
  5458 000007CC E88E01                  	call	getwinlast
  5459 000007CF 1E                      	push	ds
  5460 000007D0 07                      	pop	es
  5461 000007D1 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5462 000007D3 31F6                    	xor	si,si
  5463 000007D5 BF[0600]                	mov	di,WinoldPatch1
  5464 000007D8 B90800                  	mov	cx,8
  5465 000007DB FC                      	cld
  5466 000007DC 51                      	push	cx
  5467 000007DD F3A4                    	rep	movsb			;save first 8 bytes
  5468 000007DF 59                      	pop	cx
  5469 000007E0 BF[CD0D]                	mov	di,WinoldPatch2
  5470 000007E3 F3A4                    	rep	movsb			;save next 8 bytes
  5471 000007E5 EB1B                    	jmp	short winold_done
  5472                                  swapin:
  5473 000007E7 3C02                    	cmp	al,2			;swap Windows in call?
  5474 000007E9 7517                    	jne	short winold_done	;no, something else, pass it on
  5475 000007EB E86F01                  	call	getwinlast
  5476 000007EE 8EC6                    	mov	es,si
  5477 000007F0 31FF                    	xor	di,di
  5478 000007F2 BE[0600]                	mov	si,WinoldPatch1
  5479 000007F5 B90800                  	mov	cx,8
  5480 000007F8 FC                      	cld
  5481 000007F9 51                      	push	cx
  5482 000007FA F3A4                    	rep	movsb			;restore first 8 bytes
  5483 000007FC 59                      	pop	cx
  5484 000007FD BE[CD0D]                	mov	si,WinoldPatch2
  5485 00000800 F3A4                    	rep	movsb			;restore next 8 bytes
  5486                                  winold_done:
  5487 00000802 59                      	pop	cx
  5488 00000803 5F                      	pop	di
  5489 00000804 5E                      	pop	si
  5490 00000805 07                      	pop	es
  5491 00000806 1F                      	pop	ds
  5492 00000807 EB7D                    	jmp	short next_i2f		;chain on
  5493                                  	; 15/12/2022
  5494                                  	;jmp	next_i2f	
  5495                                  
  5496                                  Win386_vxd:
  5497 00000809 50                      	push	ax
  5498 0000080A 53                      	push	bx
  5499 0000080B 51                      	push	cx
  5500 0000080C 52                      	push	dx
  5501 0000080D 56                      	push	si
  5502 0000080E 57                      	push	di			; save regs !!dont change order!!
  5503                                  
  5504 0000080F 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5505 00000813 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5506 00000816 7421                    	je	short Vxd31		; N: continue
  5507                                  					; Y: save arena associated with 
  5508                                  					;    umb_head
  5509                                  
  5510 00000818 C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5511                                  					; umb_arena
  5512 0000081D 1E                      	push	ds
  5513 0000081E 06                      	push	es
  5514                                  
  5515 0000081F 8CD8                    	mov	ax,ds
  5516 00000821 8EC0                    	mov	es,ax			; es - > dosdata
  5517                                  
  5518 00000823 8EDB                    	mov	ds,bx
  5519 00000825 31F6                    	xor	si,si			; ds:si -> umb_head
  5520                                  
  5521 00000827 FC                      	cld
  5522                                  
  5523 00000828 BF[1F12]                	mov	di,UmbSave1
  5524 0000082B B90B00                  	mov	cx,11
  5525 0000082E F3A4                    	rep	movsb
  5526                                  
  5527 00000830 BF[D50D]                	mov	di,UmbSave2
  5528                                  	;mov	cx,5
  5529                                  	; 18/12/2022
  5530 00000833 B105                    	mov	cl,5
  5531 00000835 F3A4                    	rep	movsb	
  5532                                  
  5533 00000837 07                      	pop	es
  5534 00000838 1F                      	pop	ds			; M062 - End
  5535                                  
  5536                                  Vxd31:
  5537                                  	;test	byte [DOS_FLAG],2
  5538 00000839 F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5539 0000083E 7408                    	jz	short Dont_Supress		; M066
  5540 00000840 5F                      	pop	di				; M066
  5541 00000841 5E                      	pop	si				; M066
  5542 00000842 5A                      	pop	dx				; M066
  5543 00000843 59                      	pop	cx				; M066
  5544 00000844 5B                      	pop	bx				; M066
  5545 00000845 58                      	pop	ax				; M066
  5546 00000846 EB55                    	jmp	short noVxD31			; M066
  5547                                  
  5548                                  	; We check here if the VxD is available in the root of the boot drive. 
  5549                                  	; We do an extended open to suppress any error messages
  5550                                  	
  5551                                  Dont_Supress:
  5552 00000848 A0[6900]                	mov	al,[BOOTDRIVE]
  5553 0000084B 0440                    	add	al,'A' - 1		; get drive letter
  5554 0000084D A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5555                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5556                                  	;mov	al,0			; no extended attributes
  5557                                  	; 18/12/2022
  5558 00000850 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5559 00000853 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5560                                  					; no inherit, suppress crit err
  5561 00000856 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5562 00000859 BA0100                  	mov	dx,1			; fail if file does not exist
  5563 0000085C BE[3110]                	mov	si,VxDpath	
  5564                                  					; path of VxD file
  5565 0000085F BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5566                                  
  5567 00000862 CD21                    	int	21h			; do extended open
  5568                                  
  5569 00000864 5F                      	pop	di
  5570 00000865 5E                      	pop	si
  5571 00000866 5A                      	pop	dx
  5572 00000867 59                      	pop	cx
  5573                                  
  5574 00000868 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5575                                  
  5576                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5577                                  	; to indicate error to Windows after displaying message to user that 
  5578                                  	; VxD needs to be present to run Windows in enhanced mode.
  5579                                  
  5580 0000086A 52                      	push	dx
  5581 0000086B 1E                      	push	ds
  5582 0000086C 56                      	push	si
  5583 0000086D BE[060A]                	mov	si,NoVxDErrMsg
  5584 00000870 0E                      	push	cs
  5585 00000871 1F                      	pop	ds
  5586 00000872 B96300                  	mov	cx,VxDMesLen ; 99	;
  5587 00000875 B402                    	mov	ah,2			; write char to console
  5588 00000877 FC                      	cld
  5589                                  vxdlp:
  5590 00000878 AC                      	lodsb
  5591 00000879 86D0                    	xchg	dl,al			; get char in dl
  5592 0000087B CD21                    	int	21h
  5593 0000087D E2F9                    	loop	vxdlp
  5594                                  
  5595 0000087F 5E                      	pop	si
  5596 00000880 1F                      	pop	ds
  5597 00000881 5A                      	pop	dx
  5598 00000882 5B                      	pop	bx
  5599 00000883 58                      	pop	ax			;all registers restored
  5600 00000884 41                      	inc	cx			;cx != 0 to indicate error
  5601                                  	; 15/12/22022
  5602                                  	;jmp	win_nexti2f		;chain on
  5603                                  	;jmp	short win_nexti2f
  5604                                  
  5605                                  	; 15/12/2022
  5606                                  win_nexti2f:
  5607 00000885 1F                      	pop	ds
  5608                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5609                                  	; 15/12/2022
  5610                                  next_i2f:
  5611                                  	;;;jmp	bios_i2f
  5612                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5613                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5614                                  	; 04/11/2022
  5615 00000886 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5616                                  
  5617                                  VxDthere:
  5618 0000088B 89C3                    	mov	bx,ax
  5619 0000088D B43E                    	mov	ah,CLOSE ; 3Eh
  5620 0000088F CD21                    	int	21h			;close the file
  5621                                  
  5622                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5623                                  
  5624                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5625                                  	;mov	bx,Win386_Info
  5626                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5627                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5628                                  	; 15/12/2022
  5629 00000891 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5630 00000897 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5631                                  
  5632 0000089B 5B                      	pop	bx
  5633 0000089C 58                      	pop	ax
  5634                                  noVxD31:
  5635                                  	; M018; End of block changes
  5636                                  
  5637 0000089D 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5638 000008A2 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5639                                  
  5640                                  	; M002;
  5641                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5642                                  
  5643 000008A7 52                      	push	dx			; M002
  5644 000008A8 89DA                    	mov	dx,bx			; M002
  5645                                  					; point ES:BX to Win386_Info ; M002
  5646 000008AA BB[E20F]                	mov	bx,Win386_Info 
  5647 000008AD 895702                  	mov	[bx+2],dx		; M002
  5648 000008B0 8C4704                  	mov	[bx+4],es		; M002
  5649 000008B3 5A                      	pop	dx			; M002
  5650 000008B4 1E                      	push	ds			; M002
  5651 000008B5 07                      	pop	es			; M002
  5652                                  	;jmp	win_nexti2f		; M002
  5653                                  	; 15/12/2022
  5654 000008B6 EBCD                    	jmp	short win_nexti2f
  5655                                  
  5656                                  	; 15/12/2022
  5657                                  	; Code to return Win386 2.xx instance table
  5658                                  OldWin386Init:
  5659 000008B8 58                      	pop	ax			; discard ds pushed on stack
  5660 000008B9 BE[E711]                	mov	si,OldInstanceJunk 
  5661                                  					; ds:si = instance table
  5662 000008BC B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5663                                  	;jmp	next_i2f
  5664                                  	; 15/12/2022
  5665 000008BF EBC5                    	jmp	short next_i2f
  5666                                  
  5667                                  Win386_Leaving:
  5668                                  	; 15/12/2022
  5669 000008C1 F6C201                  	test 	dl,1
  5670                                  	;test	dx,1			; is this really win386?
  5671                                  	;jz	short Win386_Leaving_c
  5672                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5673                                  	; 15/12/2022
  5674 000008C4 75BF                    	jnz	short win_nexti2f	
  5675                                  
  5676                                  Win386_Leaving_c:
  5677                                  					; M062 - Start
  5678 000008C6 803E[DA0D]01            	cmp	byte [UmbSaveFlag], 1	; Q: was umb_arena saved at win start
  5679                                  					;    up.
  5680 000008CB 7526                    	jne	short noumb		; N: not saved 
  5681 000008CD C606[DA0D]00            	mov	byte [UmbSaveFlag], 0	; Y: clear UmbSaveFlag and restore 
  5682                                  					;    previously saved umb_head
  5683 000008D2 50                      	push	ax
  5684 000008D3 06                      	push	es
  5685 000008D4 51                      	push	cx
  5686 000008D5 56                      	push	si
  5687 000008D6 57                      	push	di
  5688                                  
  5689 000008D7 A1[8C00]                	mov	ax,[UMB_HEAD]	
  5690 000008DA 8EC0                    	mov	es,ax
  5691 000008DC 31FF                    	xor	di,di			; es:di -> umb_head
  5692                                  
  5693 000008DE FC                      	cld
  5694                                  
  5695 000008DF BE[1F12]                	mov	si,UmbSave1
  5696 000008E2 B90B00                  	mov	cx,11
  5697 000008E5 F3A4                    	rep	movsb
  5698 000008E7 BE[D50D]                	mov	si,UmbSave2
  5699                                  	;mov	cx,5
  5700                                  	; 18/12/2022
  5701 000008EA B105                    	mov	cl,5
  5702 000008EC F3A4                    	rep	movsb
  5703                                  
  5704 000008EE 5F                      	pop	di
  5705 000008EF 5E                      	pop	si
  5706 000008F0 59                      	pop	cx
  5707 000008F1 07                      	pop	es
  5708 000008F2 58                      	pop	ax
  5709                                  noumb:					; M062 - End
  5710 000008F3 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5711 000008F8 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5712 000008FD EB86                    	jmp	short win_nexti2f
  5713                                  
  5714                                  ;	; 15/12/2022
  5715                                  ;	; Code to return Win386 2.xx instance table
  5716                                  ;OldWin386Init:
  5717                                  ;	pop	ax			; discard ds pushed on stack
  5718                                  ;	mov	si,OldInstanceJunk 
  5719                                  ;					; ds:si = instance table
  5720                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5721                                  ;	;jmp	next_i2f
  5722                                  ;	; 15/12/2022
  5723                                  ;	jmp	short _next_i2f
  5724                                  
  5725                                  Win386_Query:
  5726 000008FF 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5727 00000902 7581                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5728 00000904 09C9                    	or	cx,cx			; is it an instance query?
  5729 00000906 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5730 00000908 41                      	inc	cx			; indicate that data is instanced
  5731                                  ;
  5732                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5733                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5734                                  ; M001;  
  5735                                  ; M001; OFFSETS STRUC
  5736                                  ; M001; 	Major_version	db	?
  5737                                  ; M001; 	Minor_version	db	?
  5738                                  ; M001; 	SaveDS		dw	?
  5739                                  ; M001; 	SaveBX		dw	?
  5740                                  ; M001; 	Indos		dw	?
  5741                                  ; M001; 	User_id		dw	?
  5742                                  ; M001; 	CritPatch	dw	?
  5743                                  ; M001; OFFSETS	ENDS
  5744                                  ; M001; 
  5745                                  ; M001; User_Id is the only variable really important for proper functioning  
  5746                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5747                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5748                                  ; M001; pass this table because Win386 depends on this table to get the 
  5749                                  ; M001; User_Id offset.
  5750                                  ; M001; 
  5751 00000909 BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5752 0000090C 1E                      	push	ds			; M001
  5753 0000090D 07                      	pop	es			; es:bx points at offset table ; M001
  5754 0000090E EB41                    	jmp	short PopIret		; M001
  5755                                  
  5756                                  ; 15/12/2022
  5757                                  ;	; Code to return Win386 2.xx instance table
  5758                                  ;OldWin386Init:
  5759                                  ;	pop	ax			; discard ds pushed on stack
  5760                                  ;	mov	si,OldInstanceJunk 
  5761                                  ;					; ds:si = instance table
  5762                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5763                                  ;	;jmp	next_i2f
  5764                                  ;	; 15/12/2022
  5765                                  ;	jmp	short _next_i2f
  5766                                  
  5767                                  dosmgr_func:
  5768 00000910 49                      	dec	cx
  5769 00000911 7436                    	jz	short win386_patch	; call to patch DOS
  5770 00000913 49                      	dec	cx
  5771 00000914 743B                    	jz	short PopIret		; remove DOS patches, ignore
  5772 00000916 49                      	dec	cx
  5773 00000917 743A                    	jz	short win386_size	; get size of DOS data structures
  5774 00000919 49                      	dec	cx
  5775 0000091A 7429                    	jz	short win386_inst	; instance more data
  5776 0000091C 49                      	dec	cx
  5777 0000091D 7532                    	jnz	short PopIret		; no functions above this
  5778                                  
  5779                                  	; Get DOS device driver size -- es:di points at device driver header
  5780                                  	; In DOS 4.x, the para before the device header contains an arena 
  5781                                  	; header for the driver.
  5782                                  
  5783 0000091F 8CC0                    	mov	ax,es			; ax = device header segment
  5784                                  
  5785                                  	; We check to see if we have a memory arena for this device driver. 
  5786                                  	; The way to do this would be to look at the previous para to see if
  5787                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5788                                  	; in the arena is the same as the device header segment. These two 
  5789                                  	; checks together should take care of all cases
  5790                                  
  5791 00000921 48                      	dec	ax			; get arena header
  5792 00000922 06                      	push	es
  5793 00000923 8EC0                    	mov	es,ax			; arena header for device driver
  5794                                  
  5795 00000925 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5796 00000929 7517                    	jnz	short cantsize		; no, cant size this driver
  5797 0000092B 40                      	inc	ax			; get back device header segment
  5798 0000092C 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5799 00000930 7510                    	jnz	short cantsize		; no, not a proper arena
  5800                                  
  5801 00000932 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5802 00000936 07                      	pop	es
  5803                                  
  5804                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5805                                  	; Speed is not critical and so we choose the shortest method 
  5806                                  	; -- use "mul"
  5807                                  
  5808 00000937 BB1000                  	mov	bx,16
  5809 0000093A F7E3                    	mul	bx
  5810 0000093C 89C1                    	mov	cx,ax
  5811 0000093E 89D3                    	mov	bx,dx
  5812 00000940 EB09                    	jmp	short win386_done	; return with device driver size
  5813                                  cantsize:
  5814 00000942 07                      	pop	es
  5815 00000943 31C0                    	xor	ax,ax
  5816                                  win386_inst:	; 05/01/2024
  5817 00000945 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5818 00000947 EB08                    	jmp	short PopIret		; return
  5819                                  
  5820                                  win386_patch:
  5821                                  	; dx contains bits marking the patches to be applied. We return 
  5822                                  	; the field with all bits set to indicate that all patches have been
  5823                                  	; done
  5824                                  
  5825 00000949 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5826                                   	;jmp	short win386_done	; done, return
  5827                                  	; 15/12/2022
  5828                                  	; 15/12/2022
  5829                                  win386_done:
  5830 0000094B B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5831 0000094E BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5832                                  PopIret:
  5833 00000951 1F                      	pop	ds
  5834 00000952 CF                      	iret	
  5835                                  
  5836                                  win386_size:
  5837                                  	; Return the size of DOS data structures -- currently only CDS size
  5838                                  
  5839                                  	; 17/12/2022
  5840 00000953 F6C201                  	test	dl,1
  5841                                  	;test	dx,1			; check for CDS size bit
  5842 00000956 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5843                                  
  5844 00000958 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5845 0000095B EBEE                    	jmp	short win386_done	; return with the size
  5846                                  
  5847                                  ; 05/01/2024
  5848                                  %if 0
  5849                                  win386_inst:
  5850                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5851                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5852                                  	; this by returning a status of not previously instanced. The basic
  5853                                  	; structure of these things have not changed and so the current
  5854                                  	; DOSMGR code should be able to work it out
  5855                                  
  5856                                  	xor	dx,dx			; make sure dx has a not done value
  5857                                  	jmp	short PopIret		; skip done indication
  5858                                  %endif
  5859                                  
  5860                                  	; 15/12/2022
  5861                                  ;win386_done:
  5862                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5863                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5864                                  ;PopIret:
  5865                                  ;	pop	ds
  5866                                  ;	iret				; return back up the chain
  5867                                  
  5868                                  	; 15/12/2022
  5869                                  ;win_nexti2f:
  5870                                  	;pop	ds
  5871                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5872                                  
  5873                                  ;End WIN386 support
  5874                                  
  5875                                  ; 15/05/2019
  5876                                  
  5877                                  ;M044; Start of changes
  5878                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5879                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5880                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5881                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5882                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5883                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5884                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5885                                  ; last para of the Windows memory block and then restore this para on the
  5886                                  ; Windows swapin callout. 
  5887                                  
  5888                                  getwinlast:
  5889                                  	; 07/12/2022
  5890 0000095D 8B36[3003]              	mov	si,[CurrentPDB]
  5891 00000961 4E                      	dec	si
  5892 00000962 8EC6                    	mov	es,si
  5893 00000964 2603360300              	add	si,[es:3]
  5894 00000969 C3                      	retn
  5895                                  
  5896                                  ; 15/12/2022
  5897                                  %if 0
  5898                                  winold_swap:
  5899                                  	push	ds
  5900                                  	push	es
  5901                                  	push	si
  5902                                  	push	di
  5903                                  	push	cx
  5904                                  
  5905                                  	;getdseg <ds>			;ds = DOSDATA
  5906                                  	mov	ds,[cs:DosDSeg]
  5907                                  
  5908                                  	cmp	al,1			;swap Windows out call
  5909                                  	jne	short swapin		;no, check if Swap in call
  5910                                  	call	getwinlast
  5911                                  	push	ds
  5912                                  	pop	es
  5913                                  	mov	ds,si			;ds = memory arena of Windows
  5914                                  	xor	si,si
  5915                                  	mov	di,WinoldPatch1
  5916                                  	mov	cx,8
  5917                                  	cld
  5918                                  	push	cx
  5919                                  	rep	movsb			;save first 8 bytes
  5920                                  	pop	cx
  5921                                  	mov	di,WinoldPatch2
  5922                                  	rep	movsb			;save next 8 bytes
  5923                                  	jmp	short winold_done
  5924                                  swapin:
  5925                                  	cmp	al,2			;swap Windows in call?
  5926                                  	jne	short winold_done	;no, something else, pass it on
  5927                                  	call	getwinlast
  5928                                  	mov	es,si
  5929                                  	xor	di,di
  5930                                  	mov	si,WinoldPatch1
  5931                                  	mov	cx,8
  5932                                  	cld
  5933                                  	push	cx
  5934                                  	rep	movsb			;restore first 8 bytes
  5935                                  	pop	cx
  5936                                  	mov	si,WinoldPatch2
  5937                                  	rep	movsb			;restore next 8 bytes
  5938                                  winold_done:
  5939                                  	pop	cx
  5940                                  	pop	di
  5941                                  	pop	si
  5942                                  	pop	es
  5943                                  	pop	ds
  5944                                  	jmp	next_i2f		;chain on
  5945                                  
  5946                                  %endif
  5947                                  
  5948                                  ;M044; End of changes
  5949                                  
  5950                                  ; 15/05/2019
  5951                                  
  5952                                  DispatchDOS:
  5953 0000096A 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  5954 0000096F 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  5955 00000974 50                      	PUSH	AX			; push index
  5956 00000975 55                      	PUSH	BP
  5957 00000976 89E5                    	MOV	BP,SP
  5958                                  		; stack looks like:
  5959                                  		;   0	BP
  5960                                  		;   2	DISPATCH
  5961                                  		;   4	TABLE
  5962                                  		;   6	RETURN
  5963                                  		;   8	LONG-RETURN
  5964                                  		;   C	FLAGS
  5965                                  		;   E	AX
  5966                                  	
  5967 00000978 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  5968 0000097B 5D                      	POP	BP
  5969 0000097C E81909                  	call	TableDispatch
  5970 0000097F E9D8FD                  	JMP	BadFunc 		; return indicates invalid function
  5971                                  
  5972                                  INT2F_etcetera:
  5973                                  	;entry	DosGetGroup
  5974                                  DosGetGroup:
  5975                                  	; MSDOS 3.3
  5976                                  	;push	cs
  5977                                  	;pop	ds
  5978                                  	;retn
  5979                                  
  5980                                  	; MSDOS 6.0
  5981                                  ;SR; Cannot use CS now
  5982                                  ;
  5983                                  ;	PUSH	CS
  5984                                  ;	POP	DS
  5985                                  
  5986                                  	; 04/11/2022
  5987                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  5988                                  
  5989                                  	;getdseg <ds>
  5990 00000982 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5991 00000987 C3                      	retn
  5992                                  
  5993                                  	;entry	DOSInstall
  5994                                  DOSInstall:
  5995 00000988 B0FF                    	MOV	AL,0FFh
  5996 0000098A C3                      	retn
  5997                                  
  5998                                  ;ENDIF ; (*)
  5999                                  
  6000                                  
  6001                                  ; 15/05/2019 - Retro DOS v4.0
  6002                                  
  6003                                  ;------------------------------------------------------------------------
  6004                                  ;
  6005                                  ; Procedure Name : RW32_CONVERT
  6006                                  ;
  6007                                  ;Input: same as ABSDRD and ABSDWRT
  6008                                  ;	 ES:BP -> DPB
  6009                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6010                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6011                                  ;	 carry clear, parms ok
  6012                                  ;
  6013                                  ;------------------------------------------------------------------------
  6014                                  
  6015                                  RW32_CONVERT:
  6016 0000098B 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6017 0000098E 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6018 00000990 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6019 00000991 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6020 00000992 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6021 00000996 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6022 0000099A 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6023 0000099D 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6024                                  	;INC	DL			;>32mb			;AN000;
  6025                                  	; 17/12/2022
  6026 0000099F 42                      	inc	dx
  6027 000009A0 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6028 000009A2 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6029 000009A4 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6030                                  letold:
  6031 000009A6 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6032 000009A7 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6033 000009A8 7425                    	JZ	short old_style		;>32mb  no 		;AN000;
  6034                                  
  6035 000009AA 1E                      	push	ds
  6036                                  	;getdseg <ds>
  6037 000009AB 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6038 000009B0 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6039 000009B6 1F                      	pop	ds
  6040                                  
  6041 000009B7 F9                      	STC				;>32mb			;AN000;
  6042 000009B8 C3                      	retn				;>32mb			;AN000;
  6043                                  
  6044                                  new32format:
  6045                                  	;mov	dx,[bx+2]
  6046 000009B9 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6047                                  
  6048 000009BC 1E                      	push	ds			; set up ds to DOSDATA
  6049                                  	;getdseg <ds>
  6050 000009BD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6051 000009C2 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6052 000009C6 1F                      	pop	ds
  6053                                  
  6054 000009C7 8B17                    	mov	dx,[bx]
  6055                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6056                                  	;mov	cx,[bx+4]
  6057 000009C9 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6058                                  	;lds	bx,[bx+6]
  6059 000009CC C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6060                                  old_style:				;>32mb			;AN000;
  6061 000009CF F8                      	CLC				;>32mb			;AN000;
  6062 000009D0 C3                      	retn				;>32mb			;AN000;
  6063                                  
  6064                                  ;------------------------------------------------------------------------
  6065                                  ;
  6066                                  ; Procedure Name : Fastxxx_Purge
  6067                                  ;
  6068                                  ; Input: None
  6069                                  ; Functions: Purge Fastopen/ Cache Buffers
  6070                                  ; Output: None
  6071                                  ;
  6072                                  ;------------------------------------------------------------------------
  6073                                  
  6074                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6075                                  
  6076                                  Fastxxx_Purge:
  6077 000009D1 50                      	PUSH	AX			; save regs.	;AN000;
  6078 000009D2 56                      	PUSH	SI						;AN000;
  6079 000009D3 52                      	PUSH	DX						;AN000;
  6080                                  topen:
  6081 000009D4 1E                      	push	ds			; set up ds to DOSDATA
  6082                                  	;getdseg <ds>
  6083 000009D5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6084                                  
  6085 000009DA F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6086                                  					; fastopen installed ?	;AN000;
  6087 000009DF 1F                      	pop	ds
  6088 000009E0 740B                    	JZ	short nofast		; no			;AN000;
  6089 000009E2 B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6090                                  dofast:
  6091 000009E4 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6092                                  	;;mov	dl,[es:bp+0]
  6093                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6094                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6095                                  	; 15/12/2022
  6096 000009E6 268A5600                	mov	dl,[es:bp]
  6097                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6098 000009EA E87A1D                  	call	Fast_Dispatch
  6099                                  nofast:
  6100 000009ED 5A                      	POP	DX						;AN000;
  6101 000009EE 5E                      	POP	SI			; restore regs		;AN000;
  6102 000009EF 58                      	POP	AX			 			;AN000;
  6103 000009F0 C3                      	retn				; exit
  6104                                  
  6105                                  ;============================================================================
  6106                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6107                                  ;============================================================================
  6108                                  ; 29/04/2019 - Retro DOS v4.0
  6109                                  
  6110                                  ;include dossym.inc
  6111                                  ;include dosmac.inc
  6112                                  ;include doscntry.inc
  6113                                  
  6114                                  ; DOSCODE Segment
  6115                                  
  6116                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6117                                  ; ---------------------------------------------------------------------------
  6118                                  ;include divmes.inc
  6119                                  
  6120                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6121                                  ; -------------------------------------
  6122                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6123                                  
  6124                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6125                                  	;PUBLIC	DIVMES
  6126                                  
  6127 000009F1 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6127 000009FA 6F766572666C6F770D-
  6127 00000A03 0A                 
  6128                                  
  6129                                  	;PUBLIC	DivMesLen
  6130                                  DivMesLen:
  6131 00000A04 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6132                                  
  6133                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6134                                  ; -------------------------------------
  6135                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6136                                  
  6137                                  ; (MSDOS 6.0)
  6138                                  ; VxD not found error message
  6139                                  
  6140                                  NoVxDErrMsg:
  6141 00000A06 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6141 00000A0F 686176652074686520-
  6141 00000A18 66696C652057494E41-
  6141 00000A21 32302E33383620696E-
  6141 00000A2A 2074686520726F6F74-
  6141 00000A33 206F6620796F757220-
  6141 00000A3C 626F6F742064726976-
  6141 00000A45 65                 
  6142 00000A46 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6142 00000A4F 57696E646F77732069-
  6142 00000A58 6E20456E68616E6365-
  6142 00000A61 64204D6F64650D0A   
  6143                                  
  6144                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6145                                  
  6146                                  ; 13/05/2019 - Retro DOS v4.0
  6147                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6148                                  
  6149                                  ;include yesno.asm  (MNSDOS 6.0)
  6150                                  ; -------------------------------------
  6151                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6152                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6153                                  
  6154                                  ; This is for country Yes and No
  6155                                  
  6156 00000A69 59                      NLS_YES:	db 'Y'
  6157 00000A6A 4E                      NLS_NO:		db 'N'
  6158 00000A6B 79                      NLS_yes2:	db 'y'
  6159 00000A6C 6E                      NLS_no2:	db 'n'
  6160                                  
  6161                                  ; ---------------------------------------------------------------------------
  6162                                  
  6163                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6164                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6165                                  
  6166                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6167                                  
  6168                                  ; The following two tables implement the current buffered input editing
  6169                                  ; routines. The tables are pairwise associated in reverse order for ease
  6170                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6171                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6172                                  
  6173                                  	;PUBLIC	CANCHAR
  6174                                  CANCHAR:
  6175 00000A6D 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6176                                  	
  6177                                  	;PUBLIC	ESCCHAR
  6178                                  ESCCHAR:
  6179 00000A6E 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6180                                  	
  6181                                  	;IF	NOT Rainbow
  6182                                  
  6183                                  ESCTAB:	; LABEL BYTE
  6184                                  
  6185                                  	;IF	IBM
  6186 00000A6F 40                      	DB	64		; Ctrl-Z - F6
  6187 00000A70 4D                      	DB	77		; Copy one char - -->
  6188 00000A71 3B                      	DB	59		; Copy one char - F1
  6189 00000A72 53                      	DB	83		; Skip one char - DEL
  6190 00000A73 3C                      	DB	60		; Copy to char - F2
  6191 00000A74 3E                      	DB	62		; Skip to char - F4
  6192 00000A75 3D                      	DB	61		; Copy line - F3
  6193 00000A76 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6194 00000A77 3F                      	DB	63		; Reedit line (new template) - F5
  6195 00000A78 4B                      	DB	75		; Backspace - <--
  6196 00000A79 52                      	DB	82		; Enter insert mode - INS (toggle)
  6197 00000A7A 52                      	DB	82		; Exit insert mode - INS (toggle)
  6198 00000A7B 41                      	DB	65		; Escape character - F7
  6199 00000A7C 41                      	DB	65		; End of table
  6200                                  	;ENDIF
  6201                                  
  6202                                  ESCEND: ; LABEL BYTE
  6203                                  
  6204                                  ESCTABLEN EQU ESCEND-ESCTAB
  6205                                  
  6206                                  ESCFUNC: ; LABEL WORD
  6207                                  	
  6208 00000A7D [9314]                  	short_addr  GETCH	; Ignore the escape sequence
  6209 00000A7F [1015]                  	short_addr  TWOESC
  6210 00000A81 [0816]                  	short_addr  EXITINS
  6211 00000A83 [0816]                  	short_addr  ENTERINS
  6212 00000A85 [0B15]                  	short_addr  BACKSP
  6213 00000A87 [F415]                  	short_addr  REEDIT
  6214 00000A89 [F814]                  	short_addr  KILNEW
  6215 00000A8B [8715]                  	short_addr  COPYLIN
  6216 00000A8D [BA15]                  	short_addr  SKIPSTR
  6217 00000A8F [8D15]                  	short_addr  COPYSTR
  6218 00000A91 [B015]                  	short_addr  SKIPONE
  6219 00000A93 [9215]                  	short_addr  COPYONE
  6220 00000A95 [9215]                  	short_addr  COPYONE
  6221 00000A97 [1016]                  	short_addr  CTRLZ
  6222                                  
  6223                                  	;ENDIF
  6224                                  
  6225                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6226                                  ; ---------------------------------------------------------------------------
  6227                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6228                                  
  6229                                  ; OEMFunction key is expected to process a single function
  6230                                  ;   key input from a device and dispatch to the proper
  6231                                  ;   routines leaving all registers UNTOUCHED.
  6232                                  ;
  6233                                  ; Inputs:   CS, SS are DOSGROUP
  6234                                  ; Outputs:  None. This function is expected to JMP to onw of
  6235                                  ;           the following labels:
  6236                                  ;
  6237                                  ;           GetCh       - ignore the sequence
  6238                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6239                                  ;           ExitIns     - toggle insert mode
  6240                                  ;           EnterIns    - toggle insert mode
  6241                                  ;           BackSp      - move backwards one space
  6242                                  ;           ReEdit      - reedit the line with a new template
  6243                                  ;           KilNew      - discard the current line and start from scratch
  6244                                  ;           CopyLin     - copy the rest of the template into the line
  6245                                  ;           SkipStr     - read the next character and skip to it in the template
  6246                                  ;           CopyStr     - read next char and copy from template to line until char
  6247                                  ;           SkipOne     - advance position in template one character
  6248                                  ;           CopyOne     - copy next character in template into line
  6249                                  ;           CtrlZ       - place a ^Z into the template
  6250                                  ; Registers that are allowed to be modified by this function are:
  6251                                  ;           AX, CX, BP
  6252                                  
  6253                                  ; 13/05/2019 - Retro DOS v4.0
  6254                                  ; -------------------------------------
  6255                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6256                                  
  6257                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6258                                  ; -------------------------------------
  6259                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6260                                  
  6261                                  OEMFunctionKey:
  6262 00000A99 E85609                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6263 00000A9C B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6264 00000A9E 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6265 00000A9F BF[6F0A]                	MOV     DI,ESCTAB		; offset of second byte table
  6266 00000AA2 06                      	push	es
  6267 00000AA3 0E                      	push	cs
  6268 00000AA4 07                      	pop	es
  6269 00000AA5 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6270 00000AA7 07                      	pop	es
  6271 00000AA8 5F                      	POP     DI                      ; restore DI
  6272 00000AA9 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6273 00000AAB 89CD                    	MOV     BP,CX                   ; move to indexable register
  6274                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6275 00000AAD 2EFFA6[7D0A]            	JMP	word [CS:BP+ESCFUNC]
  6276                                  
  6277                                  ;DOSCODE ENDS
  6278                                  	
  6279                                  ;============================================================================
  6280                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6281                                  ;============================================================================
  6282                                  ; Retro DOS v3.0 - 18/07/2018
  6283                                  
  6284                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6285                                  ;----------------------------------------------------------------------------
  6286                                  ; Retro DOS v2.0 - 13/03/2018
  6287                                  
  6288                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6289                                  
  6290                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6291                                  
  6292                                  ;**	$GET_DATE - Get Current Date
  6293                                  ;----------------------------------------
  6294                                  ;	ENTRY	none
  6295                                  ;	EXIT	(cx:dx) = current date
  6296                                  ;	USES	all
  6297                                  
  6298                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6299                                  
  6300                                  _$GET_DATE:	;System call 42
  6301                                  
  6302 00000AB2 16                      	PUSH	SS
  6303 00000AB3 1F                      	POP	DS
  6304 00000AB4 E8B900                  	CALL	READTIME	;Check for rollover to next day
  6305 00000AB7 A1[5203]                	MOV	AX,[YEAR]
  6306                                  
  6307                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6308                                  
  6309 00000ABA 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6310 00000ABE E809FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6311                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6312 00000AC1 895C06                  	MOV	[SI+user_env.user_DX],BX
  6313 00000AC4 05BC07                  	ADD	AX,1980		;Put bias back
  6314                                  	;MOV	[SI+4],AX	;CX=year
  6315 00000AC7 894404                  	MOV	[SI+user_env.user_CX],AX
  6316 00000ACA 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6317                                  RET20:	; 05/11/2022
  6318                                  RET24:	; 18/12/2022
  6319 00000ACE C3                      	RETN
  6320                                  
  6321                                  ;**	$SET_DATE - Set Current Date
  6322                                  ;----------------------------------------
  6323                                  ;	ENTRY	(cx:dx) = current date
  6324                                  ;	EXIT	(al) = -1 iff bad date
  6325                                  ;		(al) = 0 if ok
  6326                                  ;	USES	all
  6327                                  
  6328                                  _$SET_DATE:	;System call 43
  6329                                  
  6330 00000ACF B0FF                    	MOV	AL,-1		;Be ready to flag error
  6331 00000AD1 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6332                                  	;JC	SHORT RET24	;Error if not big enough
  6333                                  	; 05/11/2022
  6334 00000AD5 72F7                    	jc	short RET20
  6335 00000AD7 83F977                  	CMP	CX,119		;Year must be less than 2100
  6336 00000ADA 77F2                    	JA	SHORT RET24
  6337 00000ADC 08F6                    	OR	DH,DH
  6338                                  	;JZ	SHORT RET24
  6339                                   	; 05/11/2022
  6340 00000ADE 74EE                    	jz	short RET20
  6341 00000AE0 08D2                    	OR	DL,DL
  6342                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6343                                  	; 05/11/2022
  6344 00000AE2 74EA                    	jz	short RET20
  6345 00000AE4 80FE0C                  	CMP	DH,12		;Check against max. month
  6346 00000AE7 77E5                    	JA	SHORT RET24
  6347 00000AE9 16                      	PUSH	SS
  6348 00000AEA 1F                      	POP	DS
  6349                                  	;CALL	DODATE
  6350                                  	; 18/12/2022
  6351 00000AEB E91801                  	jmp	DODATE
  6352                                  ;RET24:  
  6353                                  	;RETN
  6354                                  
  6355                                  ;**	$GET_TIME - Get Current Time
  6356                                  ;----------------------------------------
  6357                                  ;	ENTRY	none
  6358                                  ;	EXIT	(cx:dx) = current time
  6359                                  ;	USES	all
  6360                                  
  6361                                  _$GET_TIME:			;System call 44
  6362                                  
  6363 00000AEE 16                      	PUSH	SS
  6364 00000AEF 1F                      	POP	DS
  6365 00000AF0 E87D00                  	CALL	READTIME
  6366 00000AF3 E8D4F9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6367                                  	;MOV	[SI+6],DX
  6368 00000AF6 895406                  	MOV	[SI+user_env.user_DX],DX
  6369                                  	;MOV	[SI+4],CX
  6370 00000AF9 894C04                  	MOV	[SI+user_env.user_CX],CX
  6371 00000AFC 30C0                    	XOR	AL,AL
  6372                                  RET26:  
  6373 00000AFE C3                      	RETN
  6374                                  
  6375                                  ;**	$SET_TIME - Set Current Time
  6376                                  ;----------------------------------------
  6377                                  ;	ENTRY	(cx:dx) = time
  6378                                  ;	EXIT	(al) = 0 if 0k
  6379                                  ;		(al) = -1 if invalid
  6380                                  ;	USES	ALL
  6381                                  
  6382                                  _$SET_TIME:			;System call 45
  6383                                  
  6384 00000AFF B0FF                    	MOV	AL,-1		;Flag in case of error
  6385 00000B01 80FD18                  	CMP	CH,24		;Check hours
  6386 00000B04 73F8                    	JAE	SHORT RET26
  6387 00000B06 80F93C                  	CMP	CL,60		;Check minutes
  6388 00000B09 73F3                    	JAE	SHORT RET26
  6389 00000B0B 80FE3C                  	CMP	DH,60		;Check seconds
  6390 00000B0E 73EE                    	JAE	SHORT RET26
  6391 00000B10 80FA64                  	CMP	DL,100		;Check 1/100's
  6392 00000B13 73E9                    	JAE	SHORT RET26
  6393 00000B15 51                      	PUSH	CX
  6394 00000B16 52                      	PUSH	DX
  6395 00000B17 16                      	PUSH	SS
  6396 00000B18 1F                      	POP	DS
  6397 00000B19 BB[B603]                	MOV	BX,TIMEBUF
  6398 00000B1C B90600                  	MOV	CX,6
  6399 00000B1F 31D2                    	XOR	DX,DX
  6400 00000B21 89D0                    	MOV	AX,DX
  6401 00000B23 53                      	PUSH	BX
  6402 00000B24 E8443C                  	CALL	SETREAD
  6403 00000B27 1E                      	PUSH	DS
  6404 00000B28 C536[2E00]              	LDS	SI,[BCLOCK]
  6405 00000B2C E8C63B                  	CALL	DEVIOCALL2	;Get correct day count
  6406 00000B2F 1F                      	POP	DS
  6407 00000B30 5B                      	POP	BX
  6408 00000B31 E86A3C                  	CALL	SETWRITE
  6409 00000B34 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6410 00000B38 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6411 00000B3C C536[2E00]              	LDS	SI,[BCLOCK]
  6412 00000B40 E8B23B                  	CALL	DEVIOCALL2	;Set the time
  6413 00000B43 30C0                    	XOR	AL,AL
  6414 00000B45 C3                      	RETN
  6415                                  
  6416                                  ; 11/07/2018 - Retro DOS v3.0
  6417                                  ; Retro DOS v2.0 - 14/03/2018
  6418                                  
  6419                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6420                                  
  6421                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6422                                  ;----------------------------------------------------------
  6423                                  ; Date16 returns the current date in AX, current time in DX
  6424                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6425                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6426                                  
  6427                                  DATE16:
  6428                                  	
  6429                                  ;M048	Context DS
  6430                                  ;
  6431                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6432                                  ; is DOSDATA
  6433                                  
  6434                                  	;push	ss
  6435                                  	;pop	ds
  6436                                  
  6437                                  	;getdseg <ds>		; M048
  6438                                  
  6439                                  	; 13/05/2019 - Retro DOS v4.0
  6440 00000B46 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6441                                  
  6442 00000B4B 51                      	PUSH	CX
  6443 00000B4C 06                      	PUSH	ES
  6444 00000B4D E82000                  	CALL	READTIME
  6445 00000B50 07                      	POP	ES
  6446 00000B51 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6447 00000B53 D0E1                    	SHL	CL,1
  6448 00000B55 D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6449 00000B57 D1E1                    	SHL	CX,1
  6450 00000B59 D1E1                    	SHL	CX,1
  6451 00000B5B D0EE                    	SHR	DH,1		;Count every two seconds
  6452 00000B5D 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6453 00000B5F 89CA                    	MOV	DX,CX
  6454                                  
  6455                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6456                                  
  6457 00000B61 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6458 00000B64 B104                    	MOV	CL,4
  6459 00000B66 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6460 00000B68 D1E0                    	SHL	AX,1
  6461 00000B6A 59                      	POP	CX
  6462 00000B6B 0A06[5003]              	OR	AL,[DAY]
  6463                                  RET21:
  6464 00000B6F C3                      	RETN
  6465                                  
  6466                                  ;----------------------------------------------------------
  6467                                  
  6468                                  READTIME:
  6469                                  
  6470                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6471                                  ;Uses AX, CX, DX.
  6472                                  
  6473 00000B70 C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6474 00000B76 56                      	PUSH	SI
  6475 00000B77 53                      	PUSH	BX
  6476                                  
  6477 00000B78 BB[B603]                	MOV	BX,TIMEBUF
  6478                                  
  6479 00000B7B B90600                  	MOV	CX,6
  6480 00000B7E 31D2                    	XOR	DX,DX
  6481 00000B80 89D0                    	MOV	AX,DX
  6482 00000B82 E8E63B                  	CALL	SETREAD
  6483 00000B85 1E                      	PUSH	DS
  6484 00000B86 C536[2E00]              	LDS	SI,[BCLOCK]
  6485 00000B8A E8683B                  	CALL	DEVIOCALL2	;Get correct date and time
  6486 00000B8D 1F                      	POP	DS
  6487 00000B8E 5B                      	POP	BX
  6488 00000B8F 5E                      	POP	SI
  6489 00000B90 A1[B603]                	MOV	AX,[TIMEBUF]
  6490 00000B93 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6491 00000B97 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6492 00000B9B 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6493                                  	;JZ	SHORT RET22
  6494 00000B9F 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6495                                  	;cmp	ax,43830
  6496 00000BA1 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6497 00000BA4 733D                    	JAE	SHORT RET22	;Ignore if too large
  6498 00000BA6 A3[5403]                	MOV	[DAYCNT],AX
  6499 00000BA9 56                      	PUSH	SI
  6500 00000BAA 51                      	PUSH	CX
  6501 00000BAB 52                      	PUSH	DX		;Save time
  6502 00000BAC 31D2                    	XOR	DX,DX
  6503                                  	;mov	cx,1461
  6504 00000BAE B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6505 00000BB1 F7F1                    	DIV	CX		;Compute number of 4-year units
  6506 00000BB3 D1E0                    	SHL	AX,1
  6507 00000BB5 D1E0                    	SHL	AX,1
  6508 00000BB7 D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6509 00000BB9 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6510                                  
  6511 00000BBB BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6512                                  
  6513 00000BBE E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6514 00000BC1 D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6515 00000BC3 7304                    	JNC	SHORT SK	;Extra half-year?
  6516 00000BC5 81C2C800                	ADD	DX,200
  6517                                  SK:
  6518 00000BC9 E82400                  	CALL	SETYEAR
  6519 00000BCC B101                    	MOV	CL,1		;At least at first month in year
  6520                                  
  6521 00000BCE BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6522                                  	
  6523 00000BD1 E81000                  	CALL	DSLIDE		;Find out which month we're in
  6524 00000BD4 880E[5103]              	MOV	[MONTH],CL
  6525 00000BD8 42                      	INC	DX		;Remainder is day of month (start with one)
  6526 00000BD9 8816[5003]              	MOV	[DAY],DL
  6527 00000BDD E89700                  	CALL	WKDAY		;Set day of week
  6528 00000BE0 5A                      	POP	DX
  6529 00000BE1 59                      	POP	CX
  6530 00000BE2 5E                      	POP	SI
  6531                                  RET22:  
  6532 00000BE3 C3                      	RETN
  6533                                  
  6534                                  ;----------------------------------------------------------
  6535                                  
  6536                                  DSLIDE:
  6537 00000BE4 B400                    	MOV	AH,0
  6538                                  DSLIDE1:
  6539 00000BE6 AC                      	LODSB			;Get count of days
  6540 00000BE7 39C2                    	CMP	DX,AX		;See if it will fit
  6541                                  	;JB	SHORT RET23	;If not, done
  6542 00000BE9 72F8                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6543 00000BEB 29C2                    	SUB	DX,AX
  6544 00000BED 41                      	INC	CX		;Count one more month/year
  6545 00000BEE EBF6                    	JMP	SHORT DSLIDE1
  6546                                  
  6547                                  ;----------------------------------------------------------
  6548                                  
  6549                                  SETYEAR:
  6550                                  
  6551                                  ;Set year with value in CX. Adjust length of February for this year.
  6552                                  
  6553                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6554                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6555                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6556                                  ;	preserve DS as CHKYR is also called as a routine.
  6557                                  
  6558                                  	; MSDOS 6.0 (18/07/2018) ; *
  6559                                  
  6560                                  	;GETDSEG DS
  6561                                  
  6562                                  	;PUSH	CS  ; *
  6563                                  	;POP	DS  ; *
  6564                                  
  6565                                  	; 13/05/2019 - Retro DOS v4.0
  6566 00000BF0 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6567                                  
  6568                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6569                                  	; 05/11/2022 
  6570                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6571                                  
  6572 00000BF5 880E[5203]              	MOV	[YEAR],CL
  6573                                  CHKYR:
  6574 00000BF9 F6C103                  	TEST	CL,3		;Check for leap year
  6575 00000BFC B01C                    	MOV	AL,28
  6576 00000BFE 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6577 00000C00 FEC0                    	INC	AL		;Add leap day
  6578                                  SAVFEB:
  6579 00000C02 A2[1D0D]                	mov	[february],al
  6580                                  	;MOV	[MONTAB+1],AL	;Store for February
  6581                                  RET23:  
  6582 00000C05 C3                      	RETN
  6583                                  
  6584                                  ;----------------------------------------------------------
  6585                                  
  6586                                  DODATE:
  6587 00000C06 E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6588 00000C09 88F0                    	MOV	AL,DH
  6589                                  
  6590 00000C0B BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6591                                  
  6592 00000C0E D7                      	XLAT			;Look up days in month
  6593 00000C0F 38D0                    	CMP	AL,DL
  6594 00000C11 B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6595                                  	;JB	SHORT RET25	;Error if too many days
  6596 00000C13 72F0                    	jb	short RET23 ; 18/07/2018
  6597 00000C15 E8D8FF                  	CALL	SETYEAR
  6598                                  ;
  6599                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6600                                  ;
  6601 00000C18 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6602 00000C1C D1E9                    	SHR	CX,1
  6603 00000C1E D1E9                    	SHR	CX,1
  6604                                  	;mov	ax,1461
  6605 00000C20 B8B505                  	MOV	AX,FOURYEARS
  6606 00000C23 89D3                    	MOV	BX,DX
  6607 00000C25 F7E1                    	MUL	CX
  6608 00000C27 8A0E[5203]              	MOV	CL,[YEAR]
  6609 00000C2B 80E103                  	AND	CL,3
  6610                                  
  6611 00000C2E BE[140D]                	MOV	SI,YRTAB
  6612                                  
  6613 00000C31 89C2                    	MOV	DX,AX
  6614 00000C33 D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6615 00000C35 E85200                  	CALL	DSUM		;Add up the days in each year
  6616 00000C38 88F9                    	MOV	CL,BH		;Month of year
  6617                                  
  6618 00000C3A BE[1C0D]                	MOV	SI,MONTAB
  6619                                  
  6620 00000C3D 49                      	DEC	CX		;Account for months starting with one
  6621 00000C3E E84900                  	CALL	DSUM		;Add up days in each month
  6622 00000C41 88D9                    	MOV	CL,BL		;Day of month
  6623 00000C43 49                      	DEC	CX		;Account for days starting with one
  6624 00000C44 01CA                    	ADD	DX,CX		;Add in to day total
  6625 00000C46 92                      	XCHG	AX,DX		;Get day count in AX
  6626 00000C47 A3[5403]                	MOV	[DAYCNT],AX
  6627 00000C4A 56                      	PUSH	SI
  6628 00000C4B 53                      	PUSH	BX
  6629 00000C4C 50                      	PUSH	AX
  6630                                  
  6631 00000C4D BB[B603]                	MOV	BX,TIMEBUF
  6632                                  
  6633 00000C50 B90600                  	MOV	CX,6
  6634 00000C53 31D2                    	XOR	DX,DX
  6635 00000C55 89D0                    	MOV	AX,DX
  6636 00000C57 53                      	PUSH	BX
  6637 00000C58 E8103B                  	CALL	SETREAD
  6638                                  
  6639 00000C5B 1E                      	PUSH	DS
  6640 00000C5C C536[2E00]              	LDS	SI,[BCLOCK]
  6641 00000C60 E8923A                  	CALL	DEVIOCALL2	;Get correct date and time
  6642 00000C63 1F                      	POP	DS
  6643 00000C64 5B                      	POP	BX
  6644 00000C65 E8363B                  	CALL	SETWRITE
  6645 00000C68 8F06[B603]              	POP	WORD [TIMEBUF]
  6646 00000C6C 1E                      	PUSH	DS
  6647 00000C6D C536[2E00]              	LDS	SI,[BCLOCK]
  6648 00000C71 E8813A                  	CALL	DEVIOCALL2	;Set the date
  6649 00000C74 1F                      	POP	DS
  6650 00000C75 5B                      	POP	BX
  6651 00000C76 5E                      	POP	SI
  6652                                  WKDAY:
  6653 00000C77 A1[5403]                	MOV	AX,[DAYCNT]
  6654 00000C7A 31D2                    	XOR	DX,DX
  6655 00000C7C B90700                  	MOV	CX,7
  6656 00000C7F 40                      	INC	AX
  6657 00000C80 40                      	INC	AX		;First day was Tuesday
  6658 00000C81 F7F1                    	DIV	CX		;Compute day of week
  6659 00000C83 8816[5603]              	MOV	[WEEKDAY],DL
  6660 00000C87 30C0                    	XOR	AL,AL		;Flag OK
  6661                                  RET25:
  6662 00000C89 C3                      	RETN
  6663                                  
  6664                                  ;----------------------------------------------------------
  6665                                  
  6666                                  ;**	DSUM - Compute the sum of a string of bytes
  6667                                  ;
  6668                                  ;	ENTRY	(cx) = byte count
  6669                                  ;		(ds:si) = byte address
  6670                                  ;		(dx) = sum register, initialized by caller
  6671                                  ;	EXIT	(dx) updated
  6672                                  ;	USES	ax, cx, dx, si, flags
  6673                                  
  6674                                  DSUM:
  6675 00000C8A B400                    	MOV	AH,0
  6676 00000C8C E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6677                                  	;JCXZ	RET25 ; 18/07/2018
  6678                                  DSUM1:
  6679 00000C8E AC                      	LODSB
  6680 00000C8F 01C2                    	ADD	DX,AX
  6681 00000C91 E2FB                    	LOOP	DSUM1
  6682                                  DSUM9:
  6683 00000C93 C3                      	RETN
  6684                                  
  6685                                  ;============================================================================
  6686                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6687                                  ;============================================================================
  6688                                  ; 29/04/2019 - Retro DOS v4.0
  6689                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6690                                  
  6691                                  ; 12/03/2018 - Retro DOS v2.0 
  6692                                  
  6693                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6694                                  ;NAME	GETSET
  6695                                  
  6696                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6697                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6698                                  
  6699                                  ;USERNUM:
  6700                                  ;	DW	0			; 24 bit user number
  6701                                  ;       DB      0
  6702                                  ;;	IF      IBM
  6703                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6704                                  ;;	ELSE
  6705                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6706                                  ;;	ENDIF
  6707                                  
  6708                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6709                                  ;; 08/07/2018 - Retro DOS v3.0
  6710                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6711                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6712                                  
  6713                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6714                                  ;----------------------------------------------------------------------------
  6715                                  
  6716                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6717                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6718                                  
  6719                                  _$GET_VERSION:
  6720                                  
  6721                                  ; Inputs:
  6722                                  ;       None
  6723                                  ; Function:
  6724                                  ;       Return MS-DOS version number
  6725                                  ; Outputs:
  6726                                  ;       OEM number in BH
  6727                                  ;       User number in BL:CX (24 bits)
  6728                                  ;       Version number as AL.AH in binary
  6729                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6730                                  
  6731                                  ; MSDOS 6.0
  6732                                  ;
  6733                                  ;	Fake_Count is used to lie about the version numbers to support
  6734                                  ;	old binarys. See ms_table.asm for more info.
  6735                                  ;
  6736                                  ;		if input al = 00
  6737                                  ;		  (bh) = OEM number			
  6738                                  ;		else if input al = 01
  6739                                  ;		  (bh) = version flags
  6740                                  ;		 
  6741                                  ;		       	 bits 0-2 = DOS internal revision
  6742                                  ;		       	 bits 3-7 = DOS type flags
  6743                                  ;		              bit 3    = DOS is in ROM
  6744                                  ;		              bit 4    = DOS in in HMA
  6745                                  ;		              bits 5-7 = reserved
  6746                                  ;               M007 change - only bit 3 is now valid. Other bits
  6747                                  ;               are 0 when AL = 1
  6748                                  
  6749                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6750                                  	;--------------------------------------
  6751                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6752                                  
  6753 00000C94 16                              PUSH    SS
  6754 00000C95 1F                              POP     DS
  6755 00000C96 8B1E[B403]                      MOV     BX,[USERNUM+2]
  6756 00000C9A 8B0E[B203]                      MOV     CX,[USERNUM]
  6757                                  
  6758                                  	; 13/05/2019 - Retro DOS v4.0
  6759                                  
  6760                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6761                                  	;DOS flags
  6762                                  
  6763 00000C9E 3C01                    	cmp	AL,1
  6764 00000CA0 7502                    	jne	short Norm_Vers
  6765                                  
  6766                                  ;ifdef ROMDOS
  6767                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6768                                  ;				(DOSINROM = 8)
  6769                                  ;else
  6770 00000CA2 30FF                            xor     bh,bh		; Otherwise return 0
  6771                                  ;endif				;M007 end
  6772                                  
  6773                                  Norm_Vers:
  6774                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6775                                  
  6776                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6777                                  	; 13/05/2019 - Retro DOS v4.0
  6778 00000CA4 1E                      	push	ds		; Get the version number from the
  6779 00000CA5 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6780                                  	;mov	ax,[40h]
  6781 00000CA9 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6782                                  	; 07/12/2022
  6783 00000CAC 1F                      	pop	ds
  6784 00000CAD E81AF8                  	call	Get_User_Stack
  6785                                  				; Put values for return registers
  6786                                  				; in the proper place on the user's	 
  6787                                  				; stack addressed by DS:SI
  6788                                          ;MOV	[SI+user_env.user_AX],AX
  6789 00000CB0 8904                            MOV	[SI],AX			 
  6790                                  	;MOV	[SI+2],BX		 
  6791 00000CB2 895C02                  	mov	[SI+user_env.user_BX],BX 
  6792                                          ;MOV	[SI+4],CX
  6793 00000CB5 894C04                  	mov	[SI+user_env.user_CX],CX
  6794                                  
  6795 00000CB8 C3                      	RETN
  6796                                  
  6797                                  ; 18/07/2018 - Retro DOS v3.0
  6798                                  
  6799                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6800                                  ;----------------------------------------------------------------------------
  6801                                  
  6802                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6803                                  ;
  6804                                  ;	ENTRY	none
  6805                                  ;	EXIT	(al) = value of VERIFY flag
  6806                                  ;	USES	all
  6807                                  
  6808                                  
  6809                                  _$GET_VERIFY_ON_WRITE:
  6810                                  
  6811                                  ;hkn; SS override
  6812 00000CB9 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6813 00000CBD C3                      	retn
  6814                                  
  6815                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6816                                  ;
  6817                                  ;	ENTRY	(al) = value of VERIFY flag
  6818                                  ;	EXIT	none
  6819                                  ;	USES	all
  6820                                  
  6821                                  _$SET_VERIFY_ON_WRITE:
  6822                                  
  6823 00000CBE 2401                    	AND	AL,1
  6824                                  ;hkn; SS override
  6825 00000CC0 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6826                                  RET27:	; 18/07/2018
  6827 00000CC4 C3                      	retn
  6828                                  
  6829                                  ; 19/07/2018 - Retro DOS v3.0
  6830                                  
  6831                                  ;BREAK <$International - return country-dependent information>
  6832                                  ;----------------------------------------------------------------------------
  6833                                  ;
  6834                                  ; Procedure Name : $INTERNATIONAL
  6835                                  ;
  6836                                  ; Inputs:
  6837                                  ;	MOV	AH,International
  6838                                  ;	MOV	AL,country	(al = 0 => current country)
  6839                                  ;      [MOV	BX,country]
  6840                                  ;	LDS	DX,block
  6841                                  ;	INT	21
  6842                                  ; Function:
  6843                                  ;	give users an idea of what country the application is running
  6844                                  ; Outputs:
  6845                                  ;	IF DX != -1 on input (get country)
  6846                                  ;	  AL = 0 means return current country table.
  6847                                  ;	  0<AL<0FFH means return country table for country AL
  6848                                  ;	  AL = 0FF means return country table for country BX
  6849                                  ;	  No Carry:
  6850                                  ;	     Register BX will contain the 16-bit country code.
  6851                                  ;	     Register AL will contain the low 8 bits of the country code.
  6852                                  ;	     The block pointed to by DS:DX is filled in with the information
  6853                                  ;	     for the particular country.
  6854                                  ;		BYTE  Size of this table excluding this byte and the next
  6855                                  ;		BYTE  Country code represented by this table
  6856                                  ;			A sequence of n bytes, where n is the number specified
  6857                                  ;			by the first byte above and is not > internat_block_max,
  6858                                  ;			in the correct order for being returned by the
  6859                                  ;			INTERNATIONAL call as follows:
  6860                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6861                                  ;		5 BYTE	Currency symbol null terminated
  6862                                  ;		2 BYTE	thousands separator null terminated
  6863                                  ;		2 BYTE	Decimal point null terminated
  6864                                  ;		2 BYTE	Date separator null terminated
  6865                                  ;		2 BYTE	Time separator null terminated
  6866                                  ;		1 BYTE	Bit field.  Currency format.
  6867                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6868                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6869                                  ;		1 BYTE	No. of significant decimal digits in currency
  6870                                  ;		1 BYTE	Bit field.  Time format.
  6871                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6872                                  ;		DWORD	Call address of case conversion routine
  6873                                  ;		2 BYTE	Data list separator null terminated.
  6874                                  ;	  Carry:
  6875                                  ;	     Register AX has the error code.
  6876                                  ;	IF DX = -1 on input (set current country)
  6877                                  ;	  AL = 0 is an error
  6878                                  ;	  0<AL<0FFH means set current country to country AL
  6879                                  ;	  AL = 0FF means set current country to country BX
  6880                                  ;	  No Carry:
  6881                                  ;	    Current country SET
  6882                                  ;	    Register AL will contain the low 8 bits of the country code.
  6883                                  ;	  Carry:
  6884                                  ;	     Register AX has the error code.
  6885                                  ;-----------------------------------------------------------------------------
  6886                                  
  6887                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6888                                  
  6889                                  ; 13/05/2019 - Retro DOS v4.0
  6890                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6891                                  
  6892                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6893                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6894                                  
  6895                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6896                                  	 
  6897 00000CC5 3CFF                    	CMP	AL,0FFH
  6898 00000CC7 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6899 00000CC9 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6900 00000CCB 30FF                    	XOR	BH,BH
  6901                                  BX_HAS_CODE:
  6902 00000CCD 1E                      	PUSH	DS
  6903 00000CCE 07                      	POP	ES
  6904 00000CCF 52                      	PUSH	DX
  6905 00000CD0 5F                      	POP	DI			; User buffer to ES:DI
  6906                                  
  6907                                  ;hkn; SS is DOSDATA
  6908                                  ;	context DS
  6909                                  
  6910 00000CD1 16                      	push	ss
  6911 00000CD2 1F                      	pop	ds
  6912                                  
  6913 00000CD3 83FFFF                  	CMP	DI,-1
  6914 00000CD6 7465                    	JZ	short international_set
  6915 00000CD8 09DB                    	OR	BX,BX
  6916 00000CDA 7505                    	JNZ	short international_find
  6917                                  
  6918                                  ;hkn; country_cdpg is in DOSDATA segment.
  6919 00000CDC BE[2A12]                	MOV	SI,COUNTRY_CDPG
  6920                                  
  6921 00000CDF EB41                    	JMP	SHORT international_copy
  6922                                  
  6923                                  international_find:
  6924 00000CE1 BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  6925 00000CE4 E80B00                  	CALL	international_get
  6926 00000CE7 725C                    	JC	short errtn
  6927 00000CE9 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  6928 00000CEC 7534                    	JNZ	SHORT international_copy ; no, copy by myself
  6929 00000CEE 89D3                    	MOV	BX,DX			 ; put country back
  6930 00000CF0 EB40                    	JMP	SHORT international_ok3
  6931                                  
  6932                                  international_get:
  6933 00000CF2 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  6934                                  
  6935                                  ;hkn; country_cdpg is in DOSDATA segment.
  6936                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6937                                  
  6938                                  	; MSDOS 3.3
  6939                                  	;;cmp	bx,[SI+63h]
  6940                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  6941                                  	;jz	short RET27
  6942                                  
  6943                                  	; 13/05/2019 - Retro DOS v4.0
  6944                                  
  6945                                  	; MSDOS 6.0
  6946                                  	;cmp	bx,[ss:si+68h]
  6947 00000CF5 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  6948 00000CF9 74C9                    	jz	short RET27			; return if equal
  6949                                  
  6950 00000CFB 89DA                    	MOV	DX,BX
  6951 00000CFD 31DB                    	XOR	BX,BX			; bx = 0, default code page
  6952                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  6953 00000CFF B80014                  	mov	ax,1400h
  6954 00000D02 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  6955                                  			; Return: AL = 00h not installed, OK to install
  6956                                  			; 01h not installed, not OK
  6957                                  			; FFh installed
  6958 00000D04 3CFF                    	CMP	AL,0FFH
  6959 00000D06 7516                    	JNZ	short interr		; not in memory
  6960                                  	;cmp	bp,0
  6961 00000D08 09ED                    	or	bp,bp			; GetCntry ?
  6962 00000D0A 7507                    	JNZ	short stcdpg
  6963                                  	
  6964                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  6965 00000D0C B80414                  	mov     ax,1404h
  6966 00000D0F CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  6967                                  			; BX = code page, DX = country code,
  6968                                  			; DS:SI -> internal code page structure
  6969                                  			; ES:DI -> user buffer
  6970                                  			; Return: AL = status
  6971                                  
  6972 00000D11 EB05                    	JMP	short chkok
  6973                                  	
  6974                                  	;nop
  6975                                  
  6976                                  stcdpg:
  6977                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  6978 00000D13 B80314                  	mov     ax,1403h
  6979 00000D16 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  6980                                  			; DS:SI -> internal code page structure
  6981                                  			; BX = code page, DX = country code
  6982                                  			; Return: AL = status
  6983                                  chkok:
  6984 00000D18 08C0                    	or	al,al			; success ?
  6985                                  	;retz				; yes
  6986 00000D1A 74A8                    	jz	short RET27
  6987                                  
  6988                                  setcarry:
  6989 00000D1C F9                      	STC				; set carry
  6990 00000D1D C3                      	retn
  6991                                  interr:
  6992 00000D1E B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  6993 00000D20 EBFA                    	JMP	short setcarry
  6994                                  
  6995                                  international_copy:
  6996                                  
  6997                                  ;hkn; country_cdpg is in DOSDATA segment.
  6998                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6999                                  
  7000                                  	; MSDOS 3.3
  7001                                  	;;mov	bx,[SI+63h]
  7002                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7003                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7004                                  
  7005                                  	; 13/05/2019 - Retro DOS v4.0
  7006                                  
  7007                                  	; MSDOS 6.0
  7008                                  	;mov	bx,[ss:si+68h]
  7009 00000D22 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7010 00000D26 BE[9612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7011                                  
  7012                                  	;mov	cx,24
  7013 00000D29 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7014                                  
  7015                                  	; MSDOS 6.0
  7016                                  
  7017                                  ;hkn;	must set up DS to SS so that international info can be copied
  7018                                  	
  7019 00000D2C 1E                      	push	ds
  7020                                  
  7021 00000D2D 16                      	push	ss			; cs -> ss
  7022 00000D2E 1F                      	pop	ds
  7023                                  
  7024 00000D2F F3A4                    	REP	MOVSB			; copy country info
  7025                                  
  7026                                  	; MSDOS 6.0
  7027                                  
  7028 00000D31 1F                      	pop	ds	;hkn;	restore ds
  7029                                  
  7030                                  international_ok3:
  7031 00000D32 E895F7                  	call	Get_User_Stack
  7032                                  ;ASSUME	DS:NOTHING
  7033                                  	;MOV	[SI+2],BX
  7034 00000D35 895C02                  	MOV	[SI+user_env.user_BX],BX
  7035                                  international_ok:
  7036 00000D38 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7037                                  ;SYS_RET_OK_jmp:
  7038                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7039                                  nono:	; 15/12/2022
  7040                                  SYS_RET_OK_jmp:
  7041 00000D3A E947F9                  	jmp	SYS_RET_OK
  7042                                  
  7043                                  international_set:
  7044                                  
  7045                                  ;hkn; ASSUME	DS:DOSGROUP
  7046                                  ;ASSUME	DS:DOSDATA
  7047                                  
  7048 00000D3D BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7049 00000D40 E8AFFF                  	CALL	international_get
  7050 00000D43 73F3                    	JNC	short international_ok
  7051                                  errtn:
  7052 00000D45 3CFF                    	CMP	AL,0FFH
  7053 00000D47 7403                    	JZ	short errtn2
  7054                                  errtn1:
  7055 00000D49 E941F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7056                                  errtn2:
  7057                                  	;error	error_invalid_function	; NLSFUNC not existent
  7058                                  
  7059                                  	;mov	al,1
  7060 00000D4C B001                    	mov	al,error_invalid_function 
  7061 00000D4E EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7062                                  ;errtn3:
  7063                                  ;	jmp	SYS_RET_ERR
  7064                                  
  7065                                  ;EndProc $INTERNATIONAL
  7066                                  
  7067                                  ; 19/07/2018
  7068                                  
  7069                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7070                                  
  7071                                  ;----------------------------------------------------------------------------
  7072                                  ;
  7073                                  ; Procedure Name : $GetExtCntry
  7074                                  ;
  7075                                  ; Inputs:
  7076                                  ;	if AL >= 20H
  7077                                  ;	  AL= 20H    capitalize single char, DL= char
  7078                                  ;	      21H    capitalize string, CX= string length
  7079                                  ;	      22H    capitalize ASCIIZ string
  7080                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7081                                  ;	      80H bit 0 = use normal upper case table
  7082                                  ;		      1 = use file upper case table
  7083                                  ;	   DS:DX points to string
  7084                                  ;
  7085                                  ;	else
  7086                                  ;
  7087                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7088                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7089                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7090                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7091                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7092                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7093                                  ;	INT	21
  7094                                  ; Function:
  7095                                  ;	give users extended country dependent information
  7096                                  ;	or capitalize chars
  7097                                  ; Outputs:
  7098                                  ;	  No Carry:
  7099                                  ;	     extended country info is succesfully returned
  7100                                  ;	  Carry:
  7101                                  ;	     Register AX has the error code.
  7102                                  ;	     AX=0, NO	 for YES/NO CHECK
  7103                                  ;		1, YES
  7104                                  ;----------------------------------------------------------------------------
  7105                                  
  7106                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7107                                  
  7108                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7109                                  
  7110                                  	; MSDOS 6.0
  7111                                  _$GetExtCntry:
  7112 00000D50 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7113 00000D52 726B                    	JB	short notcap
  7114                                  capcap: 				;
  7115 00000D54 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7116 00000D56 7505                    	JNZ	short fileupper		; file upper case
  7117                                  
  7118                                  ;hkn; UCASE_TAB in DOSDATA
  7119 00000D58 BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7120 00000D5B EB05                    	JMP	SHORT capit
  7121                                  
  7122                                  fileupper:
  7123                                  	; 16/01/2024 (MSDOS 3.3-6.22 MSDOS.SYS has a bug here)
  7124                                  	; (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7125                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7126                                  	; AL >= 80h
  7127 00000D5D 247F                    	and	al,7Fh
  7128                                  
  7129                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7130 00000D5F BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7131                                  capit:					;
  7132 00000D62 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7133 00000D64 750D                    	JNZ	short chkyes		; no
  7134 00000D66 88D0                    	MOV	AL,DL			; set up AL
  7135 00000D68 E8AD43                  	call	GETLET3 		; upper case it
  7136 00000D6B E85CF7                  	call	Get_User_Stack		; get user stack
  7137                                  	;mov	[si+6],al
  7138 00000D6E 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7139 00000D71 EBC7                    	JMP	SHORT nono		; done
  7140                                  chkyes: 				;
  7141 00000D73 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7142 00000D75 7522                    	JNZ	short capstring		; no
  7143                                  
  7144 00000D77 31C0                    	XOR	AX,AX			; presume NO
  7145                                  		      
  7146                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7147                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7148                                  
  7149                                  	; 06/08/2018 - Retro DOS v3.0
  7150                                  	; 13/05/2019 - Retro DOS v4.0
  7151                                  	;cmp	dl,'Y'
  7152 00000D79 2E3A16[690A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7153 00000D7E 7416                    	JZ	short yesyes		; yes
  7154                                  	;cmp	dl,'y'
  7155 00000D80 2E3A16[6B0A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7156 00000D85 740F                    	JZ	short yesyes		; yes
  7157                                  	;cmp	dl,'N'
  7158 00000D87 2E3A16[6A0A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7159 00000D8C 74AC                    	JZ	short nono		; no
  7160                                  	;cmp	dl,'n'
  7161 00000D8E 2E3A16[6C0A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7162 00000D93 74A5                    	JZ	short nono		; no
  7163                                  ;dbcs_char:				;
  7164 00000D95 40                      	INC	AX			; not YES or NO
  7165                                  yesyes: 				;
  7166 00000D96 40                      	INC	AX			; return 1
  7167                                  	; 15/12/2022
  7168                                  ;nono:	
  7169 00000D97 EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7170                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7171                                  	;jmp	SYS_RET_OK		; done
  7172                                  
  7173                                  capstring:				;
  7174 00000D99 89D6                    	MOV	SI,DX			; si=dx
  7175 00000D9B 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7176 00000D9D 750F                    	JNZ	short capascii		; no
  7177 00000D9F 09C9                    	OR	CX,CX			; check count 0
  7178 00000DA1 7497                    	JZ	short nono		; yes finished
  7179                                  concap: 				;
  7180 00000DA3 AC                      	LODSB				; get char
  7181 00000DA4 E87143                  	call	GETLET3 		; upper case it
  7182 00000DA7 8844FF                  	MOV	byte [SI-1],AL		; store back
  7183                                  ;next99: 				;
  7184 00000DAA E2F7                    	LOOP	concap			; continue
  7185 00000DAC EB8C                    	JMP	short nono		; done
  7186                                  capascii:				;
  7187 00000DAE 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7188 00000DB0 7545                    	JNZ	short capinval		; no
  7189                                  concap2:				;
  7190 00000DB2 AC                      	LODSB				; get char
  7191 00000DB3 08C0                    	or	al,al			; end of string ?
  7192 00000DB5 7483                    	JZ	short nono		; yes
  7193 00000DB7 E85E43                  	call	GETLET3 		; upper case it
  7194 00000DBA 8844FF                  	MOV	[SI-1],AL		; store back
  7195 00000DBD EBF3                    	JMP	short concap2 		; continue
  7196                                  
  7197                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7198                                  
  7199                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7200                                  ; _$GetExtCntry:
  7201                                  
  7202                                  notcap:
  7203 00000DBF 83F905                  	CMP	CX,5			; minimum size is 5
  7204 00000DC2 7279                    	jb	short sizeerror
  7205                                  
  7206                                  GEC_CONT:
  7207                                  ;hkn; SS is DOSDATA
  7208                                  	;context DS
  7209                                  
  7210 00000DC4 16                      	push	ss
  7211                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7212 00000DC5 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7213                                  	
  7214                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7215 00000DC6 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7216                                  
  7217 00000DC9 83FAFF                  	CMP	DX,-1			; active country ?
  7218 00000DCC 7503                    	JNZ	short GETCDPG 		; no
  7219                                  
  7220                                  ;hkn; use DS override to accesss country_cdpg fields
  7221                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7222                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7223 00000DCE 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7224                                  					; get active country id;smr;use DS
  7225                                  GETCDPG:
  7226 00000DD1 83FBFF                  	CMP	BX,-1			; active code page?
  7227 00000DD4 7503                    	JNZ	short CHKAGAIN		; no, check again
  7228                                  
  7229                                  ;hkn; use DS override to accesss country_cdpg fields
  7230                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7231                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7232 00000DD6 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7233                                  					; get active code page id;smr;Use DS
  7234                                  CHKAGAIN:
  7235                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7236 00000DD9 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7237                                  					; same as active country id?;smr;use DS
  7238 00000DDC 7552                    	JNZ	short CHKNLS		; no
  7239                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7240 00000DDE 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7241                                  					; same as active code pg id?;smr;use DS
  7242 00000DE1 754D                    	JNZ	short CHKNLS		; no
  7243                                  CHKTYPE:
  7244                                  	;mov	bx,[si+48h]
  7245 00000DE3 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7246                                  					; bx = sys code page id;smr;use DS
  7247 00000DE6 51                      	PUSH	CX			; save cx
  7248                                  	;mov	cx,[si+4Ah]
  7249 00000DE7 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7250                                  	;mov	si,COUNTRY_CDPG+76
  7251 00000DEA BE[7612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7252                                  NXTENTRY:
  7253 00000DED 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7254 00000DEF 740B                    	JZ	short FOUNDIT
  7255 00000DF1 83C605                  	ADD	SI,5			; next entry
  7256 00000DF4 E2F7                    	LOOP	NXTENTRY
  7257 00000DF6 59                      	POP	CX
  7258                                  capinval:
  7259                                  	;error	error_invalid_function	; info type not found
  7260                                  	;mov	al,1
  7261 00000DF7 B001                    	mov	al,error_invalid_function
  7262                                  ;SYS_RET_ERR_jmp:
  7263                                  	;jmp	SYS_RET_ERR
  7264                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7265                                  SYS_RET_ERR_jmp:
  7266 00000DF9 E991F8                  	jmp	SYS_RET_ERR	
  7267                                  
  7268                                  FOUNDIT:
  7269 00000DFC A4                      	MOVSB				; move info id byte
  7270 00000DFD 59                      	POP	CX			; restore char count
  7271                                  	;cmp	al,1
  7272 00000DFE 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7273 00000E00 7415                    	JZ	short setsize
  7274 00000E02 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7275 00000E05 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7276                                  OK_RETN:
  7277 00000E08 F3A4                    	REP	MOVSB			; copy info
  7278 00000E0A 89C1                    	MOV	CX,AX			; CX = actual length returned
  7279 00000E0C 89D8                    	MOV	AX,BX			; return sys code page in ax
  7280                                  GETDONE:
  7281 00000E0E E8B9F6                  	call	Get_User_Stack		; return actual length to user's CX
  7282                                  	;mov	[si+4],cx 
  7283 00000E11 894C04                  	MOV	[SI+user_env.user_CX],CX
  7284                                  	;jmp	SYS_RET_OK
  7285                                  	; 15/12/2022
  7286                                  	; 25/06/2019
  7287 00000E14 E970F8                  	jmp	SYS_RET_OK_clc
  7288                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7289                                  	; 15/12/2022
  7290                                  ;nono_jmp:
  7291                                  	;jmp	short nono
  7292                                  setsize:
  7293 00000E17 83E903                  	SUB	CX,3			; size after length field
  7294 00000E1A 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7295 00000E1C 7302                    	JAE	short setsize2		; no
  7296 00000E1E 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7297                                  setsize2:
  7298 00000E20 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7299 00000E23 83C702                  	ADD	DI,2			; update index
  7300 00000E26 83C602                  	ADD	SI,2
  7301 00000E29 89C8                    	MOV	AX,CX
  7302 00000E2B 83C003                  	ADD	AX,3			; AX has the actual length
  7303 00000E2E EBD8                    	JMP	short OK_RETN 		; go move it
  7304                                  CHKNLS:
  7305 00000E30 30E4                    	XOR	AH,AH
  7306 00000E32 50                      	PUSH	AX			; save info type
  7307 00000E33 5D                      	POP	BP			; bp = info type
  7308                                  	
  7309                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7310 00000E34 B80014                  	mov     ax,1400h
  7311 00000E37 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7312                                  			; Return: AL = 00h not installed, OK to install
  7313                                  			; 01h not installed, not OK
  7314                                  			; FFh installed
  7315 00000E39 3CFF                    	CMP	AL,0FFH
  7316 00000E3B 7404                    	JZ	short NLSNXT		; in memory
  7317                                  
  7318                                  sizeerror:
  7319                                  	;error	error_invalid_function
  7320                                  	;mov	al,1
  7321 00000E3D B001                    	mov	al,error_invalid_function
  7322                                  	;jmp	SYS_RET_ERR
  7323                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7324                                  sys_ret_err_jmp2:
  7325 00000E3F EBB8                    	jmp	short SYS_RET_ERR_jmp
  7326                                  
  7327                                  NLSNXT: 
  7328                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7329 00000E41 B80214                  	mov     ax,1402h
  7330 00000E44 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7331                                  			; BP = subfunction, BX = code page
  7332                                  			; DX = country code, DS:SI -> internal code page structure
  7333                                  			; ES:DI -> user buffer, CX = size of user buffer
  7334                                  			; Return: AL = status
  7335                                  			; 00h successful
  7336                                  			; else DOS error code
  7337                                  
  7338 00000E46 3C00                    	CMP	AL,0			; success ?
  7339 00000E48 7505                    	JNZ	short NLSERROR
  7340                                  	;mov	ax,[si+48h] ; 13/05/2019 
  7341 00000E4A 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7342                                  			; ax = sys code page id;smr;use ds;
  7343                                  			;BUGBUG;check whether DS is OK after the above calls
  7344 00000E4D EBBF                    	JMP	short GETDONE
  7345                                  seterr:
  7346                                  	; 15/12/2022
  7347                                  NLSERROR:
  7348                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7349                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7350                                  	;jmp	short sys_ret_err_jmp2
  7351                                  	; 15/12/2022
  7352 00000E4F EBA8                    	jmp	short SYS_RET_ERR_jmp
  7353                                  
  7354                                  ;EndProc $GetExtCntry
  7355                                  
  7356                                  ; 13/05/2019 - Retro DOS v4.0
  7357                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7358                                  
  7359                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7360                                  ;----------------------------------------------------------------------------
  7361                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7362                                  ;
  7363                                  ;   System call format:
  7364                                  ;
  7365                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7366                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7367                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7368                                  ;	INT	21
  7369                                  ;
  7370                                  ;	ENTRY	(al) = n
  7371                                  ;		(bx) = code page
  7372                                  ;	EXIT	'C' clear
  7373                                  ;		  global code page is set	(set global code page)
  7374                                  ;		  (BX) = active code page id	(get global code page)
  7375                                  ;		  (DX) = system code page id	(get global code page)
  7376                                  ;		'C' set
  7377                                  ;		  (AX) = error code
  7378                                  
  7379                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7380                                  
  7381                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7382                                  	; DOSCODE:4BC9h
  7383                                  
  7384                                  _$GetSetCdPg:
  7385                                  
  7386                                  ;hkn; SS is DOSDATA
  7387                                  	;context DS
  7388                                  
  7389 00000E51 16                      	push	ss
  7390 00000E52 1F                      	pop	ds
  7391                                  
  7392                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7393 00000E53 BE[2A12]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7394                                  
  7395 00000E56 3C01                    	CMP	AL,1		       ; get global code page
  7396 00000E58 7512                    	JNZ	short setglpg 	       ; set global code page
  7397                                  	
  7398                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7399                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7400 00000E5A 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7401                                  					; get active code page id;smr;use ds
  7402                                  	;mov	dx,[si+48h]
  7403 00000E5D 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7404                                  				  	; get sys code page id;smr;use ds
  7405 00000E60 E867F6                  	call	Get_User_Stack
  7406                                  ;ASSUME DS:NOTHING
  7407                                  	;mov	[si+2],bx
  7408 00000E63 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7409                                  	;mov	[si+6],dx
  7410 00000E66 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7411                                  OK_RETURN:
  7412                                  	; 15/12/2022
  7413                                  	;transfer SYS_RET_OK
  7414 00000E69 E918F8                  	jmp	SYS_RET_OK
  7415                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7416                                  	;jmp	short nono_jmp
  7417                                  
  7418                                  ;hkn; ASSUME DS:DOSGROUP
  7419                                  ;ASSUME	DS:DOSDATA
  7420                                  
  7421                                  setglpg:
  7422 00000E6C 3C02                    	CMP	AL,2
  7423 00000E6E 7531                    	JNZ	short nomem
  7424                                  	
  7425                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7426                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7427 00000E70 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7428                                  	
  7429                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7430 00000E73 B80014                  	mov     ax,1400h
  7431 00000E76 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7432                                  			; Return: AL = 00h not installed, OK to install
  7433                                  			; 01h not installed, not OK
  7434                                  			; FFh installed
  7435 00000E78 3CFF                    	CMP	AL,0FFH
  7436 00000E7A 7525                    	JNZ	short nomem		; not in memory
  7437                                  
  7438                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7439 00000E7C B80114                  	mov     ax,1401h
  7440 00000E7F CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7441                                  			; DS:SI -> internal code page structure
  7442                                  			; BX = new code page, DX = country code???
  7443                                  			; Return: AL = status
  7444                                  			; 00h successful
  7445                                  			; else DOS error code
  7446                                  	;cmp	al,0
  7447 00000E81 08C0                    	or	al,al			; success ?
  7448 00000E83 74E4                    	JZ	short OK_RETURN		; yes
  7449                                  
  7450 00000E85 3C41                    	CMP	AL,65			; set device code page failed
  7451 00000E87 75C6                    	JNZ	short seterr
  7452 00000E89 B84100                  	MOV	AX,65
  7453 00000E8C A3[2403]                	MOV	[EXTERR],AX
  7454                                  	;mov	byte [EXTERR_ACTION],6
  7455                                  	;mov	byte [EXTERR_CLASS],5
  7456                                  	;mov	byte [EXTERR_LOCUS],4
  7457 00000E8F C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7458 00000E94 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7459 00000E99 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7460                                  	;transfer From_GetSet
  7461 00000E9E E9F4F7                  	jmp	From_GetSet
  7462                                  
  7463                                  	; 15/12/2022
  7464                                  ;seterr:
  7465                                  	;;;transfer SYS_RET_ERR
  7466                                  	;;jmp	SYS_RET_ERR
  7467                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7468                                  	;jmp	short NLSERROR
  7469                                  
  7470                                  nomem:
  7471                                  	;error	error_invalid_function ; function not defined
  7472                                  	;mov	al,1
  7473 00000EA1 B001                    	mov	al,error_invalid_function
  7474 00000EA3 EBAA                    	jmp	short seterr
  7475                                  
  7476                                  ;EndProc $GetSetCdPg
  7477                                  
  7478                                  ; 13/05/2019 - Retro DOS v4.0
  7479                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7480                                  
  7481                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7482                                  ;----------------------------------------------------------------------------
  7483                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7484                                  ;
  7485                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7486                                  ;		drive.
  7487                                  ;
  7488                                  ;	This call returns the same info in the same registers (except for the
  7489                                  ;	FAT pointer) as the old FAT pointer calls
  7490                                  ;
  7491                                  ;	ENTRY	DL = Drive number
  7492                                  ;	EXIT	AX = Sectors per allocation unit
  7493                                  ;		   = -1 if bad drive specified
  7494                                  ;		On User Stack
  7495                                  ;		    BX = Number of free allocation units
  7496                                  ;		    DX = Total Number of allocation units on disk
  7497                                  ;		    CX = Sector size
  7498                                  
  7499                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7500                                  
  7501                                  _$GET_DRIVE_FREESPACE:
  7502                                  
  7503                                  ;hkn; SS is DOSDATA
  7504                                  	;context DS
  7505 00000EA5 16                      	push	ss
  7506 00000EA6 1F                      	pop	ds
  7507                                  
  7508 00000EA7 88D0                    	MOV	AL,DL
  7509                                  	;invoke	GetThisDrv		; Get drive
  7510 00000EA9 E8A45C                  	call	GETTHISDRV
  7511                                  SET_AX_RET:
  7512 00000EAC 7218                    	JC	short BADFDRV
  7513                                  	;invoke	DISK_INFO
  7514 00000EAE E8941E                  	call	DISK_INFO
  7515 00000EB1 87D3                    	XCHG	DX,BX
  7516                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7517                                  	; 06/01/2024
  7518 00000EB3 7211                    	jc	short BADFDRV
  7519 00000EB5 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7520                                  DoSt:
  7521 00000EB7 E810F6                  	call	Get_User_Stack
  7522                                  ;ASSUME	DS:NOTHING
  7523                                  	;mov	[si+6],dx
  7524                                  	;mov	[si+4],cx
  7525                                  	;mov	[si+2],bx
  7526 00000EBA 895406                  	MOV	[SI+user_env.user_DX],DX
  7527 00000EBD 894C04                  	MOV	[SI+user_env.user_CX],CX
  7528 00000EC0 895C02                  	MOV	[SI+user_env.user_BX],BX
  7529                                  	;MOV	[SI+user_env.user_AX],AX
  7530 00000EC3 8904                    	mov     [si],ax
  7531                                  	;return
  7532 00000EC5 C3                      	retn
  7533                                  
  7534                                  BADFDRV:
  7535                                  	; MSDOS 3.3
  7536                                  	;;mov	al,0Fh
  7537                                  	;mov	al,error_invalid_drive	; Assume error
  7538                                  
  7539                                  	; 13/05/2019 - Retro DOS v4.0
  7540                                  
  7541                                  	; MSDOS 6.0 & MSDOS 3.3
  7542                                  	;invoke	FCB_RET_ERR
  7543 00000EC6 E8DAF7                  	call	FCB_RET_ERR
  7544                                  	
  7545 00000EC9 B8FFFF                  	MOV	AX,-1
  7546 00000ECC EBE9                    	JMP	short DoSt
  7547                                  
  7548                                  ;EndProc $GET_DRIVE_FREESPACE
  7549                                  
  7550                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7551                                  ;----------------------------------------------------------------------------
  7552                                  ;**	$Get_DMA - Get Disk Transfer Address
  7553                                  ;
  7554                                  ;	ENTRY	none
  7555                                  ;	EXIT	ES:BX is current transfer address
  7556                                  ;	USES	all
  7557                                  
  7558                                  _$GET_DMA:
  7559 00000ECE 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7560 00000ED3 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7561 00000ED8 E8EFF5                  	call	Get_User_Stack
  7562                                  	;mov	[si+2],bx
  7563                                  	;mov	[si+10h],cx
  7564 00000EDB 895C02                  	MOV	[SI+user_env.user_BX],BX
  7565 00000EDE 894C10                  	MOV	[SI+user_env.user_ES],CX
  7566 00000EE1 C3                      	retn
  7567                                  
  7568                                  ;**	$Set_DMA - Set Disk Transfer Address
  7569                                  ;----------------------------------------------------------------------------
  7570                                  ;	ENTRY	DS:DX is current transfer address
  7571                                  ;	EXIT	none
  7572                                  ;	USES	all
  7573                                  
  7574                                  _$SET_DMA:
  7575 00000EE2 368916[2C03]            	MOV	[SS:DMAADD],DX
  7576 00000EE7 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7577 00000EEC C3                      	retn
  7578                                  
  7579                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7580                                  ;------------------------------------------------------------------------------
  7581                                  
  7582                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7583                                  ;-----------------------------------------------------
  7584                                  ;	ENTRY	none
  7585                                  ;	EXIT	(AL) = drive number
  7586                                  ;	USES	all
  7587                                  
  7588                                  _$GET_DEFAULT_DRIVE:
  7589 00000EED 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7590 00000EF1 C3                      	retn
  7591                                  
  7592                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7593                                  ;-----------------------------------------------------
  7594                                  ;	ENTRY	(DL) = Drive number for new default drive
  7595                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7596                                  
  7597                                  _$SET_DEFAULT_DRIVE:
  7598 00000EF2 88D0                    	MOV	AL,DL
  7599 00000EF4 FEC0                    	INC	AL			; A=1, B=2...
  7600 00000EF6 E83B5C                  	call	GetVisDrv		; see if visible drive
  7601 00000EF9 7204                    	JC	short SETRET		; errors do not set
  7602 00000EFB 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7603                                  
  7604                                  SETRET:
  7605 00000EFF 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7606 00000F03 C3                      	retn
  7607                                  
  7608                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7609                                  ;----------------------------------------------------------------------------
  7610                                  
  7611                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7612                                  ;---------------------------------------------------
  7613                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7614                                  ;	contents of an interrupt vector.
  7615                                  ;
  7616                                  ;	ENTRY	(AL) = interrupt number
  7617                                  ;	EXIT	(ES:BX) = current interrupt vector
  7618                                  
  7619                                  _$GET_INTERRUPT_VECTOR:
  7620 00000F04 E83000                  	CALL	RECSET
  7621 00000F07 26C41F                  	LES	BX,[ES:BX]
  7622 00000F0A E8BDF5                  	call	Get_User_Stack
  7623                                  	;mov	[si+2],bx
  7624                                  	;mov	[si+10h],es
  7625 00000F0D 895C02                  	MOV	[SI+user_env.user_BX],BX
  7626 00000F10 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7627 00000F13 C3                      	retn
  7628                                  
  7629                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7630                                  ;---------------------------------------------------
  7631                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7632                                  ;	contents of an interrupt vector.
  7633                                  ;
  7634                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7635                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7636                                  ;	for explanation.
  7637                                  ;
  7638                                  ;	ENTRY	(AL) = interrupt number
  7639                                  ;		(ds:dx) = desired new vector value
  7640                                  ;	EXIT	none
  7641                                  ;	USES	all
  7642                                  
  7643                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7644                                  ; 13/05/2019 - Retro DOS v4.0
  7645                                  
  7646                                  _$SET_INTERRUPT_VECTOR:
  7647 00000F14 E82000                  	CALL	RECSET
  7648 00000F17 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7649 00000F18 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7650 00000F1B 268C5F02                	MOV	[ES:BX+2],DS
  7651 00000F1F FB                      	STI
  7652                                  					; M004, M068 - Start
  7653                                  	; MSDOS 6.0
  7654 00000F20 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7655                                  					; Q: was the previous call an int 21
  7656                                  					;    exec call
  7657                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7658                                  	;jnz	short siv_1		; Y: go set count
  7659                                  	;retn				; N: return
  7660                                  	; 15/12/2022
  7661 00000F26 740E                    	jz	short siv_2
  7662                                  siv_1:	
  7663 00000F28 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7664 00000F2E 7506                    	jne	short siv_2		 ; N: done 
  7665 00000F30 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos 
  7666                                  					 ; dispatcher to turn A20 Off before 
  7667                                  					 ; returning to user.
  7668                                  siv_2:
  7669                                  	; 07/12/2022
  7670 00000F36 C3                      	retn				; M004, M068 - End
  7671                                  	
  7672                                  RECSET:
  7673 00000F37 31DB                    	XOR	BX,BX
  7674 00000F39 8EC3                    	MOV	ES,BX
  7675 00000F3B 88C3                    	MOV	BL,AL
  7676 00000F3D D1E3                    	SHL	BX,1
  7677 00000F3F D1E3                    	SHL	BX,1
  7678 00000F41 C3                      	retn
  7679                                  
  7680                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7681                                  ;-------------------------------------------------------------------------------------
  7682                                  
  7683                                  ;**	$Char_Oper - Manipulate Switch Character
  7684                                  ;
  7685                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7686                                  ;
  7687                                  ;	ENTRY	AL = function:
  7688                                  ;		    0 - read switch char
  7689                                  ;		    1 - set switch char (char in DL)
  7690                                  ;		    2 - read device availability
  7691                                  ;			Always returns available
  7692                                  ;		    3 - set device availability
  7693                                  ;			No longer supported (NOP)
  7694                                  ;	EXIT	(al) = 0xff iff error
  7695                                  ;		(al) != 0xff if ok
  7696                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7697                                  ;	USES	AL, DL
  7698                                  ;
  7699                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7700                                  ;		The character / is always returned for subfunction 0,
  7701                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7702                                  
  7703                                  ; 13/05/2019 - Retro DOS v4.0
  7704                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7705                                  
  7706                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7707                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7708                                  
  7709                                  _$CHAR_OPER:
  7710                                  	; MSDOS 6.0
  7711 00000F42 08C0                    	or	al,al				; get switch?
  7712 00000F44 B22F                    	mov	dl,'/'				; assume yes
  7713 00000F46 7407                    	jz	short chop_1			; jump if yes
  7714 00000F48 3C02                    	cmp	al,2				; check device availability?
  7715 00000F4A B2FF                    	mov	dl,-1				; assume yes
  7716 00000F4C 7401                    	jz	short chop_1			; jump if yes
  7717 00000F4E C3                      	retn					; otherwise just quit
  7718                                  
  7719                                  ; subfunctions requiring return of value to user come here. DL holds
  7720                                  ; value to return
  7721                                  
  7722                                  chop_1:
  7723 00000F4F E878F5                  	call	Get_User_Stack
  7724 00000F52 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7725 00000F55 C3                      	retn
  7726                                  
  7727                                  	; MSDOS 3.3
  7728                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7729                                  	;push	ss
  7730                                  	;pop	ds
  7731                                  	;cmp	al,1
  7732                                  	;jb	short chop_1
  7733                                  	;jz	short chop_2
  7734                                  	;cmp	al,3
  7735                                  	;jb	short chop_3
  7736                                  	;jz	short chop_5
  7737                                  	;mov	al,0FFh
  7738                                  	;retn
  7739                                  ;chop_1:
  7740                                  	;mov	dl,[chSwitch]
  7741                                  	;jmp	short chop_4
  7742                                  ;chop_2:
  7743                                  	;mov	[chSwitch],dl
  7744                                  	;retn
  7745                                  ;chop_3:
  7746                                  	;mov	dl, FFh
  7747                                  ;chop_4:
  7748                                  	;call	Get_User_Stack
  7749                                  	;mov	[si+6],dx
  7750                                  ;chop_5:
  7751                                  	;retn
  7752                                  
  7753                                  ;**	$GetExtendedError - Return Extended error code
  7754                                  ;----------------------------------------------------------------------------
  7755                                  ;	This function reads up the extended error info from the static
  7756                                  ;	variables where it was stored.
  7757                                  ;
  7758                                  ;	ENTRY	none
  7759                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7760                                  ;		BL = recommended action
  7761                                  ;		BH = class of error
  7762                                  ;		CH = locus of error
  7763                                  ;		ES:DI = may be pointer
  7764                                  ;	USES	ALL
  7765                                  
  7766                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7767                                  
  7768                                  _$GetExtendedError:
  7769 00000F56 16                      	push	ss
  7770 00000F57 1F                      	pop	ds
  7771 00000F58 A1[2403]                	MOV	AX,[EXTERR]
  7772 00000F5B C43E[2803]              	LES	DI,[EXTERRPT]
  7773 00000F5F 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7774 00000F63 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7775 00000F67 E860F5                  	call	Get_User_Stack
  7776                                  	;mov	[si+0Ah],di
  7777 00000F6A 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7778                                  	;mov	[si+10h],es
  7779 00000F6D 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7780                                  	;mov	[si+2],bx
  7781 00000F70 895C02                  	MOV	[SI+user_env.user_BX],BX
  7782                                  	;mov	[si+4],cx
  7783 00000F73 894C04                  	MOV	[SI+user_env.user_CX],CX
  7784                                  jmp_SYS_RET_OK:
  7785                                  	; 15/12/2022
  7786                                  	;jmp	SYS_RET_OK
  7787                                  	; 25/06/2019
  7788 00000F76 E90EF7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7789                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7790                                  ;jmp_SYS_RET_OK:
  7791                                  	;jmp	SYS_RET_OK
  7792                                  
  7793                                  ; --------------------------------------------------------------------------
  7794                                  ; 09/01/2024
  7795                                  %if 0
  7796                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7797                                  	; DOSCODE:4CF3h
  7798                                  ;patch_or_unknown:
  7799                                  ;get_code_page:
  7800                                  	push    si
  7801                                  	mov     si, COUNTRY_CDPG
  7802                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7803                                  	mov     ax, [ss:si+6Ah]
  7804                                  	pop     si
  7805                                  	retn
  7806                                  %endif
  7807                                  ; --------------------------------------------------------------------------
  7808                                  
  7809                                  ; 29/04/2019 - Retro DOS v4.0
  7810                                  
  7811                                  ;BREAK	<ECS_call - Extended Code System support function>
  7812                                  ;---------------------------------------------------------------------------
  7813                                  ; Inputs:
  7814                                  ;	AL = 0	get lead byte table
  7815                                  ;		on return DS:SI has the table location
  7816                                  ;
  7817                                  ;	AL = 1	set / reset interim console flag
  7818                                  ;		DL = flag (00H or 01H)
  7819                                  ;		no return
  7820                                  ;
  7821                                  ;	AL = 2	get interim console flag
  7822                                  ;		on return DL = current flag value
  7823                                  ;
  7824                                  ;	AL = OTHER then error, and returns with:
  7825                                  ;		AX = error_invalid_function
  7826                                  ;
  7827                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7828                                  ;	 SS:SP WILL BE PRESERVED!
  7829                                  ;---------------------------------------------------------------------------
  7830                                  
  7831                                  _$ECS_Call:
  7832 00000F79 08C0                    	or	al,al			; AL = 0 (get table)?
  7833                                  	;jnz	short _okok
  7834                                  	; 15/12/2022
  7835 00000F7B 7403                    	jz	short get_lbt
  7836                                  ;_okok:
  7837 00000F7D E904F7                  	jmp	SYS_RET_OK
  7838                                  get_lbt:
  7839 00000F80 E847F5                  	call	Get_User_Stack		; *
  7840                                  
  7841                                  ;hkn; dbcs_table moved low to dosdata
  7842                                  	;mov	word [si+8],DBCS_TAB+2
  7843 00000F83 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7844                                  
  7845 00000F88 06                      	push	es
  7846                                  	;getdseg <es>			; es = DOSDATA
  7847 00000F89 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7848                                  	;mov	[si+14],es
  7849 00000F8E 8C440E                  	mov	[SI+user_env.user_DS],es
  7850 00000F91 07                      	pop	es
  7851                                  
  7852                                  	; 15/12/2022
  7853 00000F92 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  7854                                  ;_okok:
  7855                                  	; 15/12/2022	
  7856                                  	;;transfer SYS_RET_OK
  7857                                  	;jmp	short jmp_SYS_RET_OK
  7858                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7859                                  	;;jmp	SYS_RET_OK
  7860                                  	;jmp	short jmp_SYS_RET_OK
  7861                                  
  7862                                  ;============================================================================
  7863                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7864                                  ;============================================================================
  7865                                  ; 19/07/2018 - Retro DOS v3.0
  7866                                  ; 15/05/2019 - Retro DOS v4.0
  7867                                  
  7868                                  ; System calls for parsing command lines
  7869                                  ;
  7870                                  ;   $PARSE_FILE_DESCRIPTOR
  7871                                  ;
  7872                                  ;   Modification history:
  7873                                  ;
  7874                                  ;       Created: ARR 30 March 1983
  7875                                  ;               EE PathParse 10 Sept 1983
  7876                                  ;
  7877                                  
  7878                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7879                                  ;---------------------------------------------------------------------------
  7880                                  ; Inputs:
  7881                                  ;       DS:SI Points to a command line
  7882                                  ;       ES:DI Points to an empty FCB
  7883                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7884                                  ;                   = 0 Parse stops if separator encountered
  7885                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7886                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7887                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7888                                  ;                   = 0  "       "      "       - put blanks in FCB
  7889                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7890                                  ;                   = 0  "       "      "        - put blanks in FCB
  7891                                  ; Function:
  7892                                  ;       Parse command line into FCB
  7893                                  ; Returns:
  7894                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7895                                  ;       DS:SI points to first character after filename
  7896                                  ;---------------------------------------------------------------------------
  7897                                  
  7898                                  _$PARSE_FILE_DESCRIPTOR:
  7899 00000F94 E81E40                  	call	MAKEFCB
  7900 00000F97 56                      	PUSH    SI
  7901 00000F98 E82FF5                  	call	Get_User_Stack
  7902                                  	;pop	word [si+8]
  7903 00000F9B 8F4408                  	POP     word [SI+user_env.user_SI]
  7904 00000F9E C3                      	retn
  7905                                  
  7906                                  ;============================================================================
  7907                                  ; MISC.ASM, MSDOS 6.0, 1991
  7908                                  ;============================================================================
  7909                                  ; 19/07/2018 - Retro DOS v3.0
  7910                                  
  7911                                  ; 29/04/2019 - Retro DOS v4.0
  7912                                  
  7913                                  ;ENTRYPOINTSEG	EQU	0CH
  7914                                  ;MAXDIF		EQU	0FFFH
  7915                                  ;SAVEXIT 	EQU	10
  7916                                  ;WRAPOFFSET	EQU	0FEF0h
  7917                                  
  7918                                  ;
  7919                                  ;----------------------------------------------------------------------------
  7920                                  ;
  7921                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7922                                  ;
  7923                                  ;	Return Stuff sort of like old get fat call
  7924                                  ;
  7925                                  ;	ENTRY	none
  7926                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7927                                  ;			GOD help anyone who tries to do ANYTHING except
  7928                                  ;			READ this ONE byte.
  7929                                  ;		DX = Total Number of allocation units on disk
  7930                                  ;		CX = Sector size
  7931                                  ;		AL = Sectors per allocation unit
  7932                                  ;		   = -1 if bad drive specified
  7933                                  ;	USES	all
  7934                                  ;
  7935                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7936                                  ;
  7937                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7938                                  ;
  7939                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7940                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7941                                  ;			GOD help anyone who tries to do ANYTHING except
  7942                                  ;			READ this ONE byte.
  7943                                  ;		DX = Total Number of allocation units on disk
  7944                                  ;		CX = Sector size
  7945                                  ;		AL = Sectors per allocation unit
  7946                                  ;		   = -1 if bad drive specified
  7947                                  ;	USES	all
  7948                                  ;
  7949                                  ;----------------------------------------------------------------------------
  7950                                  ;
  7951                                  
  7952                                  _$SLEAZEFUNC:
  7953                                  	; 15/05/2019 - Retro DOS v4.0
  7954 00000F9F B200                    	MOV	DL,0
  7955                                  _$SLEAZEFUNCDL:
  7956 00000FA1 16                      	push	ss
  7957 00000FA2 1F                      	pop	ds
  7958                                  	
  7959 00000FA3 88D0                    	MOV	AL,DL
  7960 00000FA5 E8A85B                  	call	GETTHISDRV		; Get CDS structure
  7961                                  SET_AL_RET:
  7962                                  	; MSDOS 3.3
  7963                                  	;;mov	al, 0Fh
  7964                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7965                                  	
  7966                                  	; MSDOS 6.0 & MSDOS 3.3
  7967 00000FA8 721E                    	JC	short BADSLDRIVE
  7968                                  
  7969 00000FAA E8981D                  	call	DISK_INFO
  7970                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  7971 00000FAD 7219                    	jc	short BADSLDRIVE
  7972 00000FAF 8826[9805]              	MOV	[FATBYTE],AH
  7973                                  
  7974                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7975                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7976                                  ; CALL AGAIN
  7977                                  
  7978 00000FB3 BF[9805]                	MOV	DI,FATBYTE
  7979 00000FB6 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7980 00000FB8 E80FF5                  	call	Get_User_Stack
  7981                                  	;mov	[si+4],cx
  7982                                  	;mov	[si+6],bx
  7983                                  	;mov	[si+2],di
  7984 00000FBB 894C04                  	MOV	[SI+user_env.user_CX],CX
  7985 00000FBE 895C06                  	MOV	[SI+user_env.user_DX],BX
  7986 00000FC1 897C02                  	MOV	[SI+user_env.user_BX],DI
  7987                                  	
  7988                                  	;mov	[si+0Eh],ss
  7989 00000FC4 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  7990                                  
  7991 00000FC7 C3                      	retn
  7992                                  
  7993                                  BADSLDRIVE:
  7994 00000FC8 E9D8F6                  	jmp	FCB_RET_ERR
  7995                                  
  7996                                  ;
  7997                                  ;----------------------------------------------------------------------------
  7998                                  ;
  7999                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8000                                  ;
  8001                                  ;	Returns location of DOS status for interrupt routines
  8002                                  ;									   ;
  8003                                  ;	ENTRY	none
  8004                                  ;	EXIT	(es:bx) = flag location
  8005                                  ;	USES	all
  8006                                  ;
  8007                                  ;----------------------------------------------------------------------------
  8008                                  ;
  8009                                  
  8010                                  _$GET_INDOS_FLAG:
  8011 00000FCB E8FCF4                          CALL	Get_User_Stack
  8012                                          ;MOV	WORD [SI+2],INDOS
  8013 00000FCE C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8014                                          ;MOV	[SI+10H],SS
  8015 00000FD3 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8016 00000FD6 C3                      	RETN 
  8017                                  
  8018                                  ;
  8019                                  ;----------------------------------------------------------------------------
  8020                                  ;
  8021                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8022                                  ;
  8023                                  ;	Return a pointer to interesting DOS variables This call is version
  8024                                  ;	dependent and is subject to change without notice in future versions.
  8025                                  ;	Use at risk.
  8026                                  ;
  8027                                  ;	ENTRY	none
  8028                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8029                                  ;	uses	ALL
  8030                                  ;
  8031                                  ;----------------------------------------------------------------------------
  8032                                  ;
  8033                                  
  8034                                  _$GET_IN_VARS:
  8035 00000FD7 E8F0F4                          CALL	Get_User_Stack
  8036                                          ;MOV	WORD [SI+2],SYSINITVAR
  8037                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8038 00000FDA C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8039                                          ;MOV	[SI+10H],SS
  8040 00000FDF 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8041 00000FE2 C3                      	RETN
  8042                                  
  8043                                  ;
  8044                                  ;----------------------------------------------------------------------------
  8045                                  ;
  8046                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8047                                  ;
  8048                                  ;	Return pointer to drive parameter table for default drive
  8049                                  ;
  8050                                  ;	ENTRY	none
  8051                                  ;	EXIT	(ds:bx) = DPB address
  8052                                  ;	USES	all
  8053                                  ;
  8054                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8055                                  ;
  8056                                  ;	Return pointer to a specified drive parameter table
  8057                                  ;
  8058                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8059                                  ;	EXIT	(al) = 0 iff ok
  8060                                  ;		  (ds:bx) = DPB address
  8061                                  ;		(al) = -1 if bad drive
  8062                                  ;	USES	all
  8063                                  ;
  8064                                  ;----------------------------------------------------------------------------
  8065                                  ;
  8066                                  
  8067                                  ; 15/05/2019 - Retro DOS v4.0
  8068                                  
  8069                                  _$GET_DEFAULT_DPB:
  8070 00000FE3 B200                    	MOV	DL,0
  8071                                  _$GET_DPB:
  8072 00000FE5 16                      	push	ss
  8073 00000FE6 1F                      	pop	ds
  8074                                  
  8075 00000FE7 88D0                    	MOV	AL,DL
  8076 00000FE9 E8645B                  	call	GETTHISDRV		; Get CDS structure
  8077 00000FEC 7222                    	JC	short ISNODRV 		; no valid drive
  8078 00000FEE C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8079                                  	;;test	word [es:di+43h],8000h
  8080                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8081                                  	;test	byte [es:di+44h],80h
  8082 00000FF2 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8083 00000FF7 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8084 00000FF9 E88C03                  	call	ECritDisk
  8085 00000FFC E89F47                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8086 00000FFF E8A103                  	call	LCritDisk
  8087 00001002 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8088                                  					;   have.
  8089 00001004 E8C3F4                  	call	Get_User_Stack
  8090                                  	;mov	[si+2],bp
  8091 00001007 896C02                  	MOV	[SI+user_env.user_BX],BP
  8092                                  	;mov	[si+0Eh],es
  8093 0000100A 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8094 0000100D 30C0                    	XOR	AL,AL
  8095 0000100F C3                      	retn
  8096                                  ISNODRV:
  8097 00001010 B0FF                    	MOV	AL,-1
  8098 00001012 C3                      	retn
  8099                                  
  8100                                  ;
  8101                                  ;----------------------------------------------------------------------------
  8102                                  ;
  8103                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8104                                  ;
  8105                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8106                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8107                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8108                                  ;
  8109                                  ;	ENTRY	none
  8110                                  ;	EXIT	none
  8111                                  ;	USES	all
  8112                                  ;
  8113                                  ;----------------------------------------------------------------------------
  8114                                  ;
  8115                                  
  8116                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8117                                  	; DOSCODE:4D94h
  8118                                  _$DISK_RESET:
  8119                                  	; 15/05/2019 - Retro DOS v4.0
  8120 00001013 B0FF                    	mov	al,0FFh	; -1
  8121 00001015 16                      	push	ss
  8122 00001016 1F                      	pop	ds
  8123                                  	; 06/11/2022
  8124                                  	;MOV	AL,-1
  8125 00001017 E86E03                  	call	ECritDisk
  8126                                  	; MSDOS 6.0
  8127                                  	;;or	word [DOS34_FLAG],4
  8128                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8129 0000101A 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8130 0000101F E8E54A                  	call	FLUSHBUF
  8131                                  	; MSDOS 6.0
  8132                                  	;and	word [DOS34_FLAG],0FFFBh
  8133                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8134                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8135                                  	; 15/12/2022
  8136 00001022 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8137 00001027 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8138                                  ;
  8139                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate.  This
  8140                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8141                                  ; let's do it.
  8142                                  ;
  8143                                  ; Invalidate 'last-buffer' used
  8144                                  ;
  8145 0000102D BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8146 00001030 891E[2000]              	MOV	[LastBuffer+2],BX
  8147 00001034 891E[1E00]              	MOV	[LastBuffer],BX
  8148                                  
  8149                                  	; MSDOS 3.3 
  8150                                  	; IBMDOS.COM, Offset 1C66h
  8151                                  	;;;;
  8152                                  	;lds	si,[BUFFHEAD]
  8153                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8154                                  				; .buf_flags, AH = 0, reset/clear
  8155                                  ;DRST_1:
  8156                                  	;;mov	[si+4],ax
  8157                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8158                                  	;lds	si,[SI]
  8159                                  	;cmp	si,bx ; -1
  8160                                  	;je	short DRST_2
  8161                                  	;;mov	[si+4],ax
  8162                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8163                                  	;lds	si,[SI]
  8164                                  	;cmp	si,bx
  8165                                  	;jne	short DRST_1
  8166                                  	;;;;
  8167                                  ;DRST_2:
  8168 00001038 E86803                  	call	LCritDisk
  8169 0000103B B8FFFF                  	MOV	AX,-1
  8170                                  	; 07/12/2022
  8171                                  	;mov	ax,0FFFFh
  8172                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8173 0000103E 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8174 0000103F B82011                  	mov     ax,1120h
  8175 00001042 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8176                                  			; DS = DOS CS
  8177                                  			; Return: CF clear (successful)
  8178 00001044 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8179                                  	
  8180 00001045 C3                      	retn
  8181                                  
  8182                                  	; 19/07/2018 - Retro DOS v3.0
  8183                                  
  8184                                  ;
  8185                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8186                                  ;
  8187                                  ;----------------------------------------------------------------------------
  8188                                  ;
  8189                                  ;**	$SetDPB - Create a DPB
  8190                                  ;
  8191                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8192                                  ;
  8193                                  ;	ENTRY	ES:BP Points to DPB
  8194                                  ;		DS:SI Points to BPB
  8195                                  ;	EXIT	DPB setup
  8196                                  ;	USES	ALL but BP, DS, ES
  8197                                  ;
  8198                                  ;----------------------------------------------------------------------------
  8199                                  ;
  8200                                  
  8201                                  ; 10/05/2019 - Retro DOS v4.0
  8202                                  
  8203                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8204                                  
  8205                                  ; MSDOS 6.0
  8206 00001046 0300                    word3:	dw	3			; M008 -- word value for divides
  8207                                  
  8208                                  ; 13/01/2024
  8209                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8210                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8211                                  
  8212                                  ;procedure   $SETDPB,NEAR
  8213                                  
  8214                                  _$SETDPB:
  8215 00001048 89EF                    	MOV	DI,BP
  8216                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8217                                  	; 13/01/2024
  8218 0000104A 47                      	inc	di
  8219 0000104B 47                      	inc	di
  8220 0000104C AD                      	LODSW
  8221 0000104D AB                      	STOSW				; dpb_sector_size
  8222                                  	; MSDOS 6.0
  8223                                  	;cmp	byte [si+3],0
  8224 0000104E 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8225 00001052 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8226                                  	;mov	byte [es:di+4],0
  8227 00001054 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8228                                  	; 13/01/2024
  8229 00001059 89C3                    	mov	bx,ax
  8230 0000105B EB70                    	JMP	short setend			     ; NO		;AN000;
  8231                                  
  8232                                  yesfat: ; 10/08/2018
  8233 0000105D 89C2                    	MOV	DX,AX
  8234 0000105F AC                      	LODSB
  8235                                  	;DEC	AL
  8236                                  	; 17/12/2022
  8237 00001060 48                      	dec	ax
  8238 00001061 AA                      	STOSB				; dpb_cluster_mask
  8239                                  	;INC	AL
  8240 00001062 40                      	inc	ax
  8241 00001063 30E4                    	XOR	AH,AH
  8242                                  LOG2LOOP:
  8243 00001065 A801                    	test	AL,1
  8244 00001067 7506                    	JNZ	short SAVLOG
  8245 00001069 FEC4                    	INC	AH
  8246 0000106B D0E8                    	SHR	AL,1
  8247 0000106D EBF6                    	JMP	SHORT LOG2LOOP
  8248                                  SAVLOG:
  8249 0000106F 88E0                    	MOV	AL,AH
  8250 00001071 AA                      	STOSB				; dpb_cluster_shift
  8251 00001072 88C3                    	MOV	BL,AL
  8252 00001074 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8253 00001075 AC                      	LODSB
  8254 00001076 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8255                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8256                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8257 00001077 88C7                    	MOV	BH,AL
  8258 00001079 AD                      	LODSW
  8259 0000107A AB                      	STOSW				; dpb_root_entries Number of directory entries
  8260 0000107B B105                    	MOV	CL,5
  8261 0000107D D3EA                    	SHR	DX,CL			; Directory entries per sector
  8262 0000107F 48                      	DEC	AX
  8263 00001080 01D0                    	ADD	AX,DX			; Cause Round Up
  8264 00001082 89D1                    	MOV	CX,DX
  8265 00001084 31D2                    	XOR	DX,DX
  8266 00001086 F7F1                    	DIV	CX
  8267 00001088 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8268 0000108A 47                      	INC	DI
  8269 0000108B 47                      	INC	DI			; Skip dpb_first_sector
  8270 0000108C A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8271 0000108D AC                      	LODSB
  8272                                  	;mov	[es:bp+17h],al
  8273 0000108E 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8274 00001092 AD                      	LODSW				; Number of sectors in a FAT
  8275                                  	
  8276                                  	;;;
  8277                                  	;MSDOS 3.3
  8278                                  	;
  8279                                  	;STOSB		; DPB.FAT_SIZE
  8280                                  	;MUL	BH
  8281                                  	
  8282                                  	;MSDOS 6.0
  8283                                  	;
  8284 00001093 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8285 00001094 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8286 00001096 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8287 00001098 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8288                                  	;;;
  8289                                  	
  8290                                  	;add	ax,[es:bp+6]
  8291 0000109A 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8292 0000109E AB                      	STOSW				; dpb_dir_sector
  8293 0000109F 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8294                                  	;mov	[es:bp+0Bh],ax
  8295 000010A1 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8296                                  	
  8297                                  	; MSDOS 6.0
  8298 000010A5 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8299                                  	;;cmp	word [es:bp+0Dh],0
  8300                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8301                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8302                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8303                                  	; 15/12/2022
  8304                                  	; 28/07/2019
  8305 000010A7 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8306 000010AB 09DB                    	or	bx,bx
  8307 000010AD 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8308                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8309                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8310                                  	
  8311                                  
  8312 000010AF 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8313                                  	;mov	bx,[si+8]
  8314 000010B1 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8315                                  	;mov	dx,[si+10]
  8316 000010B4 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8317 000010B7 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8318 000010B9 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8319 000010BC 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8320 000010BE 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8321                                  rott:					;AN000;;F.C. >32mb
  8322 000010C0 F8                      	CLC				;AN000;;F.C. >32mb
  8323 000010C1 D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8324 000010C3 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8325 000010C5 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8326                                  norot:					;AN000;
  8327                                  	; 15/12/2022
  8328                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8329 000010C7 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8330                                  normal_dpb:
  8331                                  	;;sub	ax,[es:bp+0Dh]
  8332                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8333                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8334                                  	; 15/12/2022
  8335                                  	; bx = [es:bp+DSKSIZ]
  8336                                  	;sub	ax,bx ; 28/07/2019
  8337                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8338                                  	; 15/12/2022
  8339 000010C9 29C3                    	sub	bx,ax
  8340                                  	;NEG	AX			; Sectors in data area
  8341                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8342                                  	; 15/12/2022
  8343                                  	; CL = cluster shift
  8344                                  	; BX = number of data sectors 
  8345                                  	;SHR	AX,CL			; Div by sectors/cluster
  8346 000010CB D3EB                    	shr	bx,cl 
  8347                                  setend:
  8348                                  ;	M008 - CAS
  8349                                  ;
  8350                                  	; 15/12/2022
  8351 000010CD 43                      	inc	bx
  8352                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8353                                  ;
  8354                                  ;	There has been a bug in our fatsize calculation for so long
  8355                                  ;	  that we can't correct it now without causing some user to
  8356                                  ;	  experience data loss. There are even cases where allowing
  8357                                  ;	  the number of clusters to exceed the fats is the optimal
  8358                                  ;	  case -- where adding 2 more fat sectors would make the
  8359                                  ;	  data field smaller so that there's nothing to use the extra
  8360                                  ;	  fat sectors for.
  8361                                  ;
  8362                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8363                                  ;	  still report that there was a cluster left when the disk was
  8364                                  ;	  actually full. Very graceful failure for a corrupt system
  8365                                  ;	  configuration. There may be worse cases that were never
  8366                                  ;	  properly traced back to this bug. The problem cases only
  8367                                  ;	  occurred when partition sizes were very near FAT sector
  8368                                  ;	  rounding boundaries, which were rare cases.
  8369                                  ;
  8370                                  ;	Also, it's possible that some third-party partition program might
  8371                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8372                                  ;	  scheme. In this hypothetical case, the number of allocation
  8373                                  ;	  clusters which don't actually have FAT entries to represent
  8374                                  ;	  them might be larger and might create a more catastrophic
  8375                                  ;	  failure. So we'll provide the safeguard of limiting the
  8376                                  ;	  max_cluster to the amount that will fit in the FATs.
  8377                                  ;
  8378                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8379                                  
  8380                                  ;	make sure the number of fat sectors is actually enough to
  8381                                  ;	  hold that many clusters. otherwise, back the number of
  8382                                  ;	  clusters down
  8383                                  
  8384                                  	; 15/12/2022
  8385                                  	; bx = number of clusters
  8386                                  
  8387                                  	; 19/07/2018 - Retro DOS v3.0
  8388                                  	; MSDOS 6.0
  8389                                  	; 15/12/2022
  8390                                  	;mov	bx,ax			; remember calculated # clusters
  8391                                  
  8392                                  	; 01/08/2018 (MSDOS 3.3)
  8393                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8394                                  	;xor	ah,ah 
  8395                                  
  8396                                  	; 10/05/2019 - Retro DOS v4.0
  8397                                  	;mov	ax,[ES:BP+0Fh]
  8398 000010CE 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8399                                  
  8400                                  	;mul	word [es:bp+2]	
  8401 000010D2 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8402 000010D6 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8403 000010DA 720D                    	jb	short setend_fat12
  8404 000010DC D1EA                    	shr	dx,1
  8405                                  
  8406                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8407                                  	; 15/12/2022
  8408                                  ;cs3 7/2/92
  8409 000010DE 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8410                                  					; than enough for the maximum FAT,
  8411                                  					; so go ahead and use the calculated
  8412                                  					; number of clusters.
  8413                                  ;cs3 7/2/92
  8414                                  
  8415 000010E0 D1D8                    	rcr	ax,1			; find number of entries
  8416 000010E2 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8417                                  ;					;  into 12-bit fatland?
  8418 000010E5 7215                    	jb	short setend_faterr	; then go ahead and let the
  8419                                  ;					;  inconsistency pass through
  8420                                  ;					;  rather than lose data by
  8421                                  ;					;  correcting the fat type
  8422 000010E7 EB0E                    	jmp	short setend_fat16
  8423                                  
  8424                                  setend_fat12:
  8425 000010E9 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8426 000010EB 11D2                    	adc	dx,dx
  8427                                  
  8428                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8429                                  ;cs3 7/2/92
  8430                                  	; 15/12/2022
  8431 000010ED 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8432 000010F0 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8433                                  					; here. Check for it and use
  8434                                  					; the calculated size in this case.
  8435                                  ;cs3 7/2/92
  8436                                  
  8437 000010F2 2EF736[4610]            	div	word [cs:word3]
  8438                                  
  8439                                  setend_fat16:
  8440 000010F7 48                      	dec	ax			; limit at 1
  8441 000010F8 39D8                    	cmp	ax,bx			; is fat big enough?
  8442 000010FA 7602                    	jbe	short setend_fat	; use max value that'll fit
  8443                                  
  8444                                  setend_faterr:
  8445 000010FC 89D8                    	mov	ax,bx			; use calculated value
  8446                                  
  8447                                  setend_fat:
  8448                                  
  8449                                  ;	now ax = maximum legal cluster
  8450                                  
  8451                                  ;	end M008
  8452                                  
  8453                                  	;mov	[es:bp+0Dh], ax
  8454 000010FE 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8455                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8456                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8457 00001102 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8458                                  					; Init so first ALLOC starts at
  8459                                  					; begining of FAT
  8460                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8461                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8462 00001108 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8463                                  
  8464 0000110E C3                      	retn
  8465                                  
  8466                                  ;EndProc $SETDPB
  8467                                  
  8468                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8469                                  
  8470                                  ;
  8471                                  ;----------------------------------------------------------------------------
  8472                                  ;
  8473                                  ;**	$Dup_PDB
  8474                                  ;
  8475                                  ; Inputs:   DX is new segment address of process
  8476                                  ;	    SI is end of new allocation block
  8477                                  ;
  8478                                  ;----------------------------------------------------------------------------
  8479                                  ;
  8480                                  
  8481                                  _$DUP_PDB:
  8482                                  
  8483                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8484                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8485                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8486                                  
  8487                                  	; MSDOS 3.3
  8488                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8489                                  	;MOV	DS,[CS:CurrentPDB]
  8490                                  
  8491                                  	; 15/05/2019 - Retro DOS v4.0
  8492                                  	; MSDOS 6.0
  8493 0000110F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8494 00001114 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8495 00001119 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8496                                  
  8497 0000111D 56                      	PUSH	SI
  8498 0000111E EB0A                    	JMP	SHORT CreateCopy
  8499                                  
  8500                                  ;
  8501                                  ;----------------------------------------------------------------------------
  8502                                  ;
  8503                                  ; Inputs:
  8504                                  ;	DX = Segment number of new base
  8505                                  ; Function:
  8506                                  ;	Set up program base and copy term and ^C from int area
  8507                                  ; Returns:
  8508                                  ;	None
  8509                                  ; Called at DOS init
  8510                                  ;
  8511                                  ;----------------------------------------------------------------------------
  8512                                  ;
  8513                                  
  8514                                  ; 15/05/2019 - Retro DOS v4.0
  8515                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8516                                  
  8517                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8518                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8519                                  
  8520                                  _$CREATE_PROCESS_DATA_BLOCK:
  8521                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8522 00001120 E8A7F3                  	CALL	Get_User_Stack
  8523                                  	;mov	ds,[si+14h]
  8524 00001123 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8525                                  	;push	word [2]
  8526 00001126 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8527                                  CreateCopy:
  8528 0000112A 8EC2                    	MOV	ES,DX
  8529                                  
  8530 0000112C 31F6                    	XOR	SI,SI			; copy entire PDB
  8531 0000112E 89F7                    	MOV	DI,SI
  8532 00001130 B98000                  	MOV	CX,128
  8533 00001133 F3A5                    	REP	MOVSW
  8534                                  
  8535                                  ; DOS 3.3 7/9/86
  8536                                  	;mov	cx,20
  8537                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8538                                  	; 15/12/2022
  8539 00001135 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8540                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8541                                  	;mov	cx,FILPERPROC
  8542                                  
  8543                                  	;mov	di,18h
  8544 00001137 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8545                                  	;;PUSH	DS ; * 15/05/2019
  8546                                  	;;lds	si,[34h]
  8547                                  	;LDS	SI,[PDB.JFN_Pointer]
  8548                                  	;REP	MOVSB
  8549                                  	;;POP	DS ; * 15/05/2019
  8550                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8551                                  	; 05/12/2022
  8552                                  	; (push ds then pop ds is not needed here!)
  8553                                  	;push	ds
  8554                                  	;lds	si,[34h]
  8555 0000113A C5363400                	lds	si,[PDB.JFN_Pointer]
  8556 0000113E F3A4                    	rep	movsb
  8557                                  	;pop	ds
  8558                                  
  8559                                  ; DOS 3.3 7/9/86
  8560                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8561                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8562                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8563                                  
  8564 00001140 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8565                                  
  8566                                  	;;test	byte [cs:CreatePDB],0FFh
  8567                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8568                                  	; 17/12/2022
  8569 00001145 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8570                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8571 00001149 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8572                                  
  8573                                  ; Here we set up for a new process...
  8574                                  
  8575                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8576                                  	;POP	DS
  8577                                  
  8578                                  	; MSDOS 6.0
  8579                                  	;;getdseg <ds>			; ds -> dosdata
  8580                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8581                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8582                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8583                                  	; 15/12/2022
  8584                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8585                                  
  8586 0000114B 31DB                    	XOR	BX,BX			; dup all jfns
  8587                                  	;mov	cx,20
  8588                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8589                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8590                                  	; 15/12/2022
  8591 0000114D B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8592                                  
  8593                                  Create_dup_jfn:
  8594 0000114F 06                      	PUSH	ES ;**			; save new PDB
  8595 00001150 E8DB55                  	call	SFFromHandle		; get sf pointer
  8596 00001153 B0FF                    	MOV	AL,-1			; unassigned JFN
  8597 00001155 7224                    	JC	short CreateStash	; file was not really open
  8598                                  	;;test	word [es:di+5],1000h
  8599                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8600                                  	; 15/05/2019
  8601                                  	;test	byte [es:di+6],10h
  8602 00001157 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8603 0000115C 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8604                                  
  8605                                  ; We do not inherit network file handles.
  8606                                  
  8607                                  	;mov	ah,[es:di+2]
  8608 0000115E 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8609                                  	;and	ah,0F0h
  8610 00001162 80E4F0                  	AND	AH,SHARING_MASK
  8611                                  	;cmp	ah,70h
  8612 00001165 80FC70                  	CMP	AH,SHARING_NET_FCB
  8613 00001168 7411                    	jz	short CreateStash
  8614                                  
  8615                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8616                                  ; duplication operation.
  8617                                  
  8618 0000116A 893E[9E05]              	MOV	[THISSFT],DI
  8619 0000116E 8C06[A005]              	MOV	[THISSFT+2],ES
  8620 00001172 E82519                  	call	DOS_DUP 		; signal duplication
  8621                                  
  8622                                  ; get the old sfn for copy
  8623                                  
  8624 00001175 E89955                  	call	pJFNFromHandle		; ES:DI is jfn
  8625 00001178 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8626                                  
  8627                                  ; Take AL (old sfn or -1) and stash it into the new position
  8628                                  
  8629                                  CreateStash:
  8630 0000117B 07                      	POP	ES ;**
  8631                                  	;mov	[es:bx+18h],al
  8632 0000117C 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8633 00001180 43                      	INC	BX			; next jfn...
  8634 00001181 E2CC                    	LOOP	Create_dup_jfn
  8635                                  
  8636 00001183 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8637                                  	; 06/11/2022
  8638                                  	;mov	[es:16h],bx
  8639 00001187 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8640 0000118C 8C06[3003]              	MOV	[CurrentPDB],ES
  8641                                  	;MOV	DS,BX ; 28/07/2019
  8642                                  	; 07/12/2022
  8643                                  	;mov	ds,[cs:DosDSeg]
  8644                                  	; 15/12/2022
  8645                                  	; ds = [cs:DosDSeg]
  8646 00001190 C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8647                                  	;mov	ds,bx
  8648                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8649                                  	; 15/12/2022
  8650                                  	;mov	ds,bx
  8651                                  
  8652                                  ; end of new process create
  8653                                  
  8654                                  Create_PDB_cont:
  8655                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8656                                  
  8657                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8658                                  
  8659                                  	;; 28/07/2019
  8660                                  	;;push	ds
  8661                                  	;;mov	ds,[cs:DosDSeg]
  8662                                  	;mov	byte [CreatePDB],0
  8663                                  	;;pop	ds
  8664                                  
  8665                                  ; 05/12/2022
  8666                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8667                                  ;	; (push-pop ds is nonsense here! 
  8668                                  ;	;  but i am using same code with original MSDOS.SYS
  8669                                  ;	;  for address compatibility.)
  8670                                  ;	push	ds
  8671                                  ;	; ds = [cs:DosDSeg] !
  8672                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8673                                  ;	mov	byte [CreatePDB],0
  8674                                  ;	pop	ds
  8675                                  
  8676 00001195 58                      	POP	AX ;*
  8677                                  
  8678                                  	;entry	SETMEM
  8679                                  
  8680                                  	; 17/12/2022
  8681                                  	; cx = 0
  8682                                  
  8683                                  ;---------------------------------------------------------------------------
  8684                                  ; Inputs:
  8685                                  ;	AX = Size of memory in paragraphs
  8686                                  ;	DX = Segment
  8687                                  ; Function:
  8688                                  ;	Completely prepares a program base at the
  8689                                  ;	specified segment.
  8690                                  ; Called at DOS init
  8691                                  ; Outputs:
  8692                                  ;	DS = DX
  8693                                  ;	ES = DX
  8694                                  ;	[0] has INT int_abort
  8695                                  ;	[2] = First unavailable segment
  8696                                  ;	[5] to [9] form a long call to the entry point
  8697                                  ;	[10] to [13] have exit address (from int_terminate)
  8698                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8699                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8700                                  ; DX,BP unchanged. All other registers destroyed.
  8701                                  ;---------------------------------------------------------------------------
  8702                                  
  8703                                  SETMEM:
  8704                                  	;XOR	CX,CX
  8705                                  	; 17/12/2022
  8706                                  	; cx = 0
  8707 00001196 8ED9                    	MOV	DS,CX
  8708 00001198 8EC2                    	MOV	ES,DX
  8709                                  	;mov	si,88h
  8710 0000119A BE8800                  	MOV	SI,addr_int_terminate
  8711                                  	;mov	di,10 ; 0Ah
  8712 0000119D BF0A00                  	MOV	DI,SAVEXIT
  8713                                  	;MOV	CX,6
  8714                                  	; 15/12/2022
  8715 000011A0 B106                    	mov	cl,6
  8716 000011A2 F3A5                    	REP	MOVSW
  8717 000011A4 26A30200                	MOV	[ES:2],AX
  8718 000011A8 29D0                    	SUB	AX,DX
  8719 000011AA 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8720 000011AD 7603                    	JBE	short HAVDIF
  8721 000011AF B8FF0F                  	MOV	AX,MAXDIF
  8722                                  HAVDIF:
  8723 000011B2 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8724 000011B5 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8725 000011B8 29C3                    	SUB	BX,AX
  8726 000011BA B104                    	MOV	CL,4
  8727 000011BC D3E0                    	SHL	AX,CL
  8728 000011BE 8EDA                    	MOV	DS,DX
  8729                                  
  8730                                  	; (MSDOS 6.0 note)
  8731                                  	;
  8732                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8733                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8734                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8735                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8736                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8737                                  	; making this equvalence valid for this particular case. If however
  8738                                  	; there is less than 64K remaining the address in BX:AX will not 
  8739                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8740                                  	; into the PSP.
  8741                                  	;
  8742                                  	; Therefore for the case where there is less than 64K remaining in 
  8743                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8744                                  	; requirements will not work. Call 5, however will continue to work
  8745                                  	; for all cases.
  8746                                  	;
  8747                                  
  8748                                  	;mov	[6],ax
  8749                                  	;mov	[8],bx
  8750                                  
  8751 000011C0 A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8752 000011C3 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8753                                  
  8754                                  	; 06/05/2019 - Retro DOS v4.0
  8755 000011C7 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8756                                  					;    memory left
  8757 000011CA 740C                    	je	short addr_ok		; Y: the above calculated address is
  8758                                  					;    OK
  8759                                  					; N: 
  8760                                  
  8761 000011CC C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8762 000011D2 C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8763                                  addr_ok:
  8764                                  	;mov	word [0],20CDh
  8765 000011D8 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8766                                  	;mov	byte [5],9Ah
  8767 000011DE C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8768                                  	;mov	word [50h],21CDh
  8769 000011E3 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8770                                  	;mov	byte [52h],0CBh
  8771 000011E9 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8772                                  	;mov	word [34h],18h
  8773 000011EE C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8774                                  	;mov	word [36h],ds
  8775 000011F4 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8776                                  	;mov	word [32h],20
  8777 000011F8 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8778                                  ;
  8779                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8780                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8781                                  ; particular SFT.  We perform this by requiring that the server link together
  8782                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8783                                  ; initialize this pointer.
  8784                                  ;
  8785                                   	;mov	word [38h],-1
  8786 000011FE C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8787                                  	;mov	word [3Ah],-1
  8788 00001204 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8789                                  
  8790                                  	; 06/05/2019
  8791                                  	; Set the real version number in the PSP - 5.00
  8792                                  
  8793                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8794                                  	; 07/12/2022
  8795 0000120A 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8796                                  
  8797 00001211 C3                      	retn
  8798                                  
  8799                                  ; 29/04/2019 - Retro DOS v4.0
  8800                                  
  8801                                  ;BREAK <$GSetMediaID -- get set media ID>
  8802                                  
  8803                                  ;---------------------------------------------------------------------------
  8804                                  ; Inputs:
  8805                                  ;	BL= drive number as defined in IOCTL
  8806                                  ;	AL= 0 get media ID
  8807                                  ;	    1 set media ID
  8808                                  ;	DS:DX= buffer containing information
  8809                                  ;		DW  0  info level (set on input)
  8810                                  ;		DD  ?  serial #
  8811                                  ;		DB  11 dup(?)  volume id
  8812                                  ;		DB   8 dup(?)  file system type
  8813                                  ; Function:
  8814                                  ;	Get or set media ID
  8815                                  ; Returns:
  8816                                  ;	carry clear, DS:DX is filled
  8817                                  ;	carry set, error
  8818                                  ;---------------------------------------------------------------------------
  8819                                  
  8820                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8821                                  _$GSetMediaID:
  8822                                  	; RAWIO - GET_MEDIA_ID
  8823 00001212 B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8824 00001215 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8825 00001217 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8826                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8827                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8828                                  	; 15/12/2022
  8829 00001219 FEC8                    	dec	al
  8830 0000121B 7507                    	jnz	short errorfunc ; al > 1
  8831                                  	; RAWIO - SET_MEDIA_ID
  8832                                  	;mov	cx,0846h	      ;AN001;MS.;
  8833                                  	; 15/12/2022
  8834 0000121D B146                    	mov	cl,46h	; cx = 0846h 
  8835                                  doioctl:			      ;AN000;
  8836 0000121F B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8837                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8838                                  	;call	_$IOCTL
  8839                                  	;retn			      ;AN000;MS.;
  8840                                  	; 15/12/2022
  8841 00001221 E9CA10                  	jmp	_$IOCTL
  8842                                  errorfunc:			      ;AN000;
  8843                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  8844                                  	;mov	al,1
  8845 00001224 B001                    	mov	al,error_invalid_function
  8846 00001226 E964F4                  	jmp	SYS_RET_ERR
  8847                                  
  8848                                  ; 16/05/2019 - Retro DOS v4.0
  8849                                  
  8850                                  ;============================================================================
  8851                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8852                                  ;============================================================================
  8853                                  ; 20/07/2018 - Retro DOS v3.0
  8854                                  ; 29/04/2019 - Retro DOS v4.0
  8855                                  
  8856                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8857                                  ;----------------------------------------------------------------------------
  8858                                  ;
  8859                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8860                                  ;	     Strings of different lengths don't match.
  8861                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  8862                                  ;   Outputs: Z if strings same, NZ if different
  8863                                  ;   Registers modified: NONE
  8864                                  ;----------------------------------------------------------------------------
  8865                                  
  8866                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8867                                  StrCmp:
  8868 00001229 56                      	push	si
  8869 0000122A 57                      	push	di
  8870 0000122B 50                      	push	ax
  8871                                  Cmplp:
  8872 0000122C AC                      	LODSB
  8873 0000122D E8C33E                  	call	UCase			; convert to upper case
  8874 00001230 E8153F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8875 00001233 88C4                    	MOV	AH,AL
  8876 00001235 268A05                  	MOV	AL,[ES:DI]
  8877 00001238 47                      	INC	DI
  8878 00001239 E8B73E                  	call	UCase			; convert to upper case
  8879 0000123C E8093F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8880 0000123F 38C4                    	CMP	AH,AL
  8881 00001241 7504                    	JNZ	short PopRet		; Strings dif
  8882                                  
  8883 00001243 08C0                    	OR	AL,AL
  8884 00001245 75E5                    	JNZ	short Cmplp		; More string
  8885                                  PopRet:
  8886 00001247 58                      	pop	ax
  8887 00001248 5F                      	pop	di
  8888 00001249 5E                      	pop	si
  8889 0000124A C3                      	retn
  8890                                  
  8891                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8892                                  ;----------------------------------------------------------------------------
  8893                                  ;
  8894                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8895                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  8896                                  ;	characters.
  8897                                  ;
  8898                                  ;   Inputs:	DS:SI - pointer to source string
  8899                                  ;		ES:DI - pointer to destination string
  8900                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8901                                  ;		DS:SI point byte after nul byte at end of source string
  8902                                  ;   Registers modified: SI,DI
  8903                                  ;----------------------------------------------------------------------------
  8904                                  
  8905                                  StrCpy:
  8906 0000124B 50                      	push	ax
  8907                                  CPYLoop:
  8908 0000124C AC                      	LODSB
  8909 0000124D E8A33E                  	call	UCase			; convert to upper case
  8910 00001250 E8F53E                  	call	PATHCHRCMP		; convert / to \ ;
  8911 00001253 AA                      	STOSB
  8912                                  
  8913 00001254 08C0                    	OR	AL,AL
  8914 00001256 75F4                    	JNZ	short CPYLoop
  8915 00001258 58                      	pop	ax
  8916 00001259 C3                      	retn
  8917                                  
  8918                                  ;----------------------------------------------------------------------------
  8919                                  ; Procedure Name : FStrCpy
  8920                                  ;----------------------------------------------------------------------------
  8921                                  
  8922                                  FStrCpy:
  8923 0000125A 50                      	push	ax
  8924                                  FCPYLoop:
  8925 0000125B AC                      	LODSB
  8926 0000125C AA                      	STOSB
  8927 0000125D 08C0                    	OR	AL,AL
  8928 0000125F 75FA                    	JNZ	short FCPYLoop
  8929 00001261 58                      	pop	ax
  8930 00001262 C3                      	retn
  8931                                  
  8932                                  ; 20/07/2018 - Retro DOS v3.0
  8933                                  ;----------------------------------------------------------------------------
  8934                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8935                                  ;----------------------------------------------------------------------------
  8936                                  ;
  8937                                  ;UCase:	
  8938                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8939                                  ;	retn
  8940                                  
  8941                                  ;Break <StrLen - compute length of string ES:DI>
  8942                                  ;----------------------------------------------------------------------------
  8943                                  ;**	StrLen - Compute Length of String
  8944                                  ;
  8945                                  ;	StrLen computes the length of a string, including the trailing 00
  8946                                  ;
  8947                                  ;	ENTRY	(es:di) = address of string
  8948                                  ;	EXIT	(cx) = size of string
  8949                                  ;	USES	cx, flags
  8950                                  ;----------------------------------------------------------------------------
  8951                                  
  8952                                  StrLen:
  8953 00001263 57                      	push	di
  8954 00001264 50                      	push	ax
  8955                                  	;MOV	CX,-1
  8956 00001265 B9FFFF                  	mov	cx,65535
  8957 00001268 30C0                    	XOR	AL,AL
  8958 0000126A F2AE                    	REPNE	SCASB
  8959 0000126C F7D1                    	NOT	CX
  8960 0000126E 58                      	pop	ax
  8961 0000126F 5F                      	pop	di
  8962 00001270 C3                      	retn
  8963                                  
  8964                                  ;----------------------------------------------------------------------------
  8965                                  ;**	DStrLen - Compute Length of String
  8966                                  ;
  8967                                  ;	ENTRY	(ds:si) = address of string
  8968                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8969                                  ;	USES	cx, flags
  8970                                  ;----------------------------------------------------------------------------
  8971                                  
  8972                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8973 00001271 E80300                  	CALL	XCHGP
  8974 00001274 E8ECFF                  	CALL	StrLen
  8975                                  	;CALL	XCHGP
  8976                                  	;retn
  8977                                  	; 18/12/2022
  8978                                  	;jmp	short XCHGP
  8979                                  
  8980                                  ;----------------------------------------------------------------------------
  8981                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8982                                  ;
  8983                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8984                                  ;
  8985                                  ;	ENTRY	none
  8986                                  ;	EXIT	pairs exchanged
  8987                                  ;	USES	SI, DI, DS, ES
  8988                                  ;----------------------------------------------------------------------------
  8989                                  
  8990                                  XCHGP:
  8991 00001277 1E                      	push	ds
  8992 00001278 06                      	push	es
  8993 00001279 1F                      	pop	ds
  8994 0000127A 07                      	pop	es
  8995 0000127B 87F7                    	XCHG	SI,DI
  8996                                  xchgp_retn:
  8997 0000127D C3                      	retn
  8998                                  
  8999                                  ;Break	<Idle - wait for a specified amount of time>
  9000                                  ;----------------------------------------------------------------------------
  9001                                  ;
  9002                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9003                                  ;   	   we spin until RetryLoop is exhausted.
  9004                                  ;
  9005                                  ;   Inputs:	RetryLoop is the number of times we spin
  9006                                  ;   Outputs:	Wait
  9007                                  ;   Registers modified: none
  9008                                  ;----------------------------------------------------------------------------
  9009                                  
  9010                                  Idle:
  9011                                  	;test	byte [SS:FSHARING],0FFh
  9012 0000127E 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9013                                  	;retnz
  9014 00001284 75F7                    	jnz	short xchgp_retn
  9015                                  	;SAVE	<CX>
  9016 00001286 51                      	push	cx
  9017 00001287 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9018 0000128C E308                    	JCXZ	Idle3
  9019                                  Idle1:	
  9020 0000128E 51                      	PUSH	CX
  9021 0000128F 31C9                    	XOR	CX,CX
  9022                                  Idle2:	
  9023 00001291 E2FE                    	LOOP	Idle2
  9024 00001293 59                      	POP	CX
  9025 00001294 E2F8                    	LOOP	Idle1
  9026                                  Idle3:	
  9027                                  	;RESTORE <CX>
  9028 00001296 59                      	pop	cx
  9029 00001297 C3                      	retn
  9030                                  
  9031                                  ;Break	<TableDispatch - dispatch to a table>
  9032                                  ;----------------------------------------------------------------------------
  9033                                  ;
  9034                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9035                                  ;   routine. Preserve all input registers to the routine.
  9036                                  ;
  9037                                  ;   Inputs:	Push	return address
  9038                                  ;		Push	Table address
  9039                                  ;		Push	index (byte)
  9040                                  ;   Outputs:	appropriate routine gets jumped to.
  9041                                  ;		return indicates invalid index
  9042                                  ;   Registers modified: none.
  9043                                  ;----------------------------------------------------------------------------
  9044                                  
  9045                                  struc TFrame	 ; TableFrame
  9046 00000000 ????                    .OldBP:	 resw 1  ; 0
  9047 00000002 ????                    .OldRet: resw 1  ; 2
  9048 00000004 ??                      .Index:	 resb 1  ; 4
  9049 00000005 ??                      .Pad:	 resb 1  ; 5  
  9050 00000006 ????                    .Tab:	 resw 1  ; 6
  9051 00000008 ????                    .NewRet: resw 1  ; 8
  9052                                  endstruc
  9053                                  
  9054                                  TableDispatch:
  9055 00001298 55                      	PUSH	BP
  9056 00001299 89E5                    	MOV	BP,SP
  9057 0000129B 53                      	PUSH	BX			; save BX
  9058                                  	;mov	bx,[bp+6]
  9059 0000129C 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9060 0000129F 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9061                                  	;cmp	[bp+4],bl
  9062 000012A2 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9063 000012A5 7317                    	JAE	short TableError	; yes
  9064                                  	;mov	bl,[bp+4]
  9065 000012A7 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9066 000012AA 30FF                    	XOR	BH,BH			; convert to word
  9067 000012AC D1E3                    	SHL	BX,1			; convert to word pointer
  9068 000012AE 43                      	INC	BX			; point past first length byte
  9069                                  	; 17/08/2018
  9070                                  	;add	bx,[bp+6]
  9071 000012AF 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9072 000012B2 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9073                                  	;mov	[bp+6],bx
  9074 000012B5 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9075 000012B8 5B                      	POP	BX			; restore BX
  9076 000012B9 5D                      	POP	BP			; restore BP
  9077 000012BA 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9078 000012BD C3                      	retn				; do operation
  9079                                  TableError:
  9080 000012BE 5B                      	POP	BX			; restore BX
  9081 000012BF 5D                      	POP	BP			; restore BP
  9082 000012C0 C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9083                                  
  9084                                  ;Break	<TestNet - determine if a CDS is for the network>
  9085                                  ;----------------------------------------------------------------------------
  9086                                  ;
  9087                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9088                                  ;	network CDS. This will handle NULL cds also.
  9089                                  ;
  9090                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9091                                  ;   Outputs:	ES:DI = ThisCDS
  9092                                  ;		carry Set => network
  9093                                  ;		carry Clear => local
  9094                                  ;   Registers modified: none.
  9095                                  ;----------------------------------------------------------------------------
  9096                                  
  9097                                  TestNet:
  9098                                  	;LES	DI,[CS:THISCDS]
  9099                                  
  9100                                  	; 16/05/2019 - Retro DOS v4.0
  9101 000012C3 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9102 000012C8 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9103 000012CD 83FFFF                  	CMP	DI,-1
  9104 000012D0 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9105                                  	;;test	word [es:di+43h],8000h
  9106                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9107                                  	;test	byte [es:di+44h],80h
  9108 000012D2 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9109 000012D7 7501                    	JNZ	short CMCRet		; jump has carry clear
  9110 000012D9 C3                      	retn				; carry is clear
  9111                                  CMCRet: 
  9112 000012DA F5                      	CMC
  9113 000012DB C3                      	retn
  9114                                  
  9115                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9116                                  ;----------------------------------------------------------------------------
  9117                                  ;
  9118                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9119                                  ;	network file.
  9120                                  ;
  9121                                  ;   Inputs:	ES:DI point to SFT
  9122                                  ;   Outputs:	Zero set if not network sft
  9123                                  ;		zero reset otherwise
  9124                                  ;		Carry CLEAR!!!
  9125                                  ;   Registers modified: none.
  9126                                  ;----------------------------------------------------------------------------
  9127                                  
  9128                                  IsSFTNet:
  9129                                  	;;test	word [es:di+5],8000h
  9130                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9131                                  	; 16/05/2019 
  9132                                  	;test	byte [es:di+6],80h
  9133 000012DC 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9134 000012E1 C3                      	retn
  9135                                  
  9136                                  ;Break	<FastInit - Initialize FastTable entries >
  9137                                  ;----------------------------------------------------------------------------
  9138                                  ;   DOS 4.00   2/9/87
  9139                                  ;   FastInit  - initialize the FASTXXX routine entry
  9140                                  ;		  in the FastTable
  9141                                  ;
  9142                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9143                                  ;		DS:SI = address of FASTXXX routine entry
  9144                                  ;		   SI = -1 for query only
  9145                                  ;   Outputs:	Carry flag clear, if success
  9146                                  ;		Carry flag set,   if failure
  9147                                  ;
  9148                                  ;
  9149                                  ;----------------------------------------------------------------------------
  9150                                  
  9151                                  ;Procedure FastInit,NEAR
  9152                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9153                                  
  9154                                  ;	; MSDOS 3.3
  9155                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9156                                  ;FastInit:
  9157                                  ;	mov	di,FastTable ; FastOpenTable
  9158                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9159                                  ;	mov	bx,cs			; get DOS segment
  9160                                  ;	cmp	ax,bx			; first time installed ?	
  9161                                  ;	je	short ok_install	; yes
  9162                                  ;	stc				; set carry
  9163                                  ;	retn				; (cf=1 means) already installed !
  9164                                  ;
  9165                                  ;ok_install:
  9166                                  ;	mov	bx,FastTable ; FastOpenTable
  9167                                  ;	mov	cx,ds
  9168                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9169                                  ;	mov	[cs:bx+4],cx
  9170                                  ;	mov	[cs:bx+2],si
  9171                                  ;	retn
  9172                                  
  9173                                  ; 16/05/2019 - Retro DOS v4.0
  9174                                  
  9175                                  FastInit:
  9176                                  	; MSDOS 6.0
  9177                                  	;hkn; set up es to dosdataseg.
  9178 000012E2 06                      	push	es
  9179                                  	;getdseg <es>			; es -> dosdata
  9180 000012E3 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9181                                  
  9182                                  	;hkn; FastTable is in DOSDATA
  9183 000012E8 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9184 000012EB 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9185 000012EC 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9186 000012EE D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9187 000012F0 D1E3                    	SHL	BX,1			;AN000;FO.
  9188 000012F2 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9189 000012F4 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9190                                  fcheck: 				;AN000;
  9191 000012F8 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9192 000012FA 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9193 000012FC 7407                    	JZ	short ok_install	;AN000;FO.;; yes
  9194 000012FE 09C0                    	OR	AX,AX			;AN000;FO.;
  9195 00001300 7403                    	JZ	short ok_install	;AN000;FO.;
  9196 00001302 F9                      	STC				;AN000;FO.;; already installed !
  9197 00001303 EB17                    	JMP	SHORT FSret		;AN000;FO. set carry
  9198                                  ok_install:				;AN000;
  9199 00001305 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9200 00001308 7412                    	JZ	short FSret		;AN000;FO.; yes
  9201 0000130A 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9202 0000130C 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9203 00001310 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9204                                  
  9205                                  ;hkn; FastFlg moved to DOSDATA
  9206 00001313 BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9207 00001316 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9208                                  	;or	byte [es:di],80h
  9209 00001318 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9210                                  FSret:					;AN000;
  9211 0000131C 07                      	pop	es
  9212 0000131D C3                      	retn				;AN000;FO.
  9213                                  
  9214                                  ;EndProc FastInit
  9215                                  
  9216                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9217                                  ;----------------------------------------------------------------------------
  9218                                  ;   DOS 3.3   6/10/86
  9219                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9220                                  ;
  9221                                  ;   Inputs:	None
  9222                                  ;   Outputs:	AX = -1 and carry flag set
  9223                                  ;
  9224                                  ;   Registers modified: none.
  9225                                  ;----------------------------------------------------------------------------
  9226                                  
  9227                                  FastRet:
  9228                                  	;mov	ax,-1
  9229                                  	;stc
  9230                                  	;retf
  9231 0000131E F9                      	STC
  9232 0000131F 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9233 00001321 CB                      	RETF
  9234                                  
  9235                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9236                                  ;----------------------------------------------------------------------------
  9237                                  ;   DOS 3.3   6/10/86
  9238                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9239                                  ;
  9240                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9241                                  ;   Outputs:	same output as $OPEN
  9242                                  ;
  9243                                  ;----------------------------------------------------------------------------
  9244                                  
  9245                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9246                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9247                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9248                                  
  9249                                  NLS_OPEN:
  9250                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9251                                  ;	MOV	BYTE [CPSWFLAG],0
  9252                                  ;	PUSH	BX		 ; save current state
  9253                                  
  9254 00001322 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9255 00001324 E8745C                  	call	_$OPEN
  9256                                  
  9257                                  ;	POP	BX		 ; restore current state
  9258                                  ;	MOV	[CPSWFLAG],BL
  9259 00001327 C3                      	RETN
  9260                                  
  9261                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9262                                  ;----------------------------------------------------------------------------
  9263                                  ;   DOS 3.3   6/10/86
  9264                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9265                                  ;
  9266                                  ;   Inputs:	BP = open mode
  9267                                  ;   Outputs:	same output as $LSEEK
  9268                                  ;
  9269                                  ;----------------------------------------------------------------------------
  9270                                  
  9271                                  ; 16/05/2019 - Retro DOS v4.0
  9272                                  
  9273                                  NLS_LSEEK:
  9274 00001328 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9275 0000132D 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9276 00001332 E81000                  	CALL	Fake_User_Stack
  9277 00001335 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9278 00001337 E80956                  	call	_$LSEEK
  9279 0000133A 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9280 0000133F 368F06[8405]            	POP	word [SS:USER_SP]
  9281 00001344 C3                      	RETN
  9282                                  
  9283                                  ;Break	<Fake_User_Stack - save user stack>
  9284                                  ;----------------------------------------------------------------------------
  9285                                  ;   DOS 3.3   6/10/86
  9286                                  ;   Fake_User_Stack - save user stack pointer
  9287                                  ;
  9288                                  ;----------------------------------------------------------------------------
  9289                                  
  9290                                  Fake_User_Stack:
  9291 00001345 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9292 00001349 36A3[8405]              	MOV	[SS:USER_SP],AX
  9293 0000134D 8CD0                    	MOV	AX,SS
  9294 0000134F 36A3[8605]              	MOV	[SS:USER_SS],AX
  9295 00001353 C3                      	RETN
  9296                                  
  9297                                  ;Break	<GetDevList - get device header list pointer>
  9298                                  ;----------------------------------------------------------------------------
  9299                                  ;   DOS 3.3   7/25/86
  9300                                  ;   GetDevList - get device header list pointer
  9301                                  ;
  9302                                  ;   Output: AX:BX points to the device header list
  9303                                  ;----------------------------------------------------------------------------
  9304                                  
  9305                                  GetDevList:
  9306                                  	; 16/05/2019 - Retro DOS v4.0
  9307 00001354 BE[280D]                	MOV	SI,SysInitTable
  9308 00001357 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9309 0000135C C534                    	LDS	SI,[SI]
  9310                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9311 0000135E 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9312                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9313 00001361 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9314 00001364 C3                      	RETN
  9315                                  
  9316                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9317                                  ;----------------------------------------------------------------------------
  9318                                  ;   DOS 3.3   7/25/86
  9319                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9320                                  ;
  9321                                  ;   Inputs:	BP = function code 0CH
  9322                                  ;   Outputs:	same output as generic $IOCTL
  9323                                  ;
  9324                                  ;----------------------------------------------------------------------------
  9325                                  
  9326                                  NLS_IOCTL:
  9327                                  	; 16/05/2019 - Retro DOS v4.0
  9328 00001365 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9329 0000136A 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9330 0000136F E8D3FF                  	CALL	Fake_User_Stack
  9331 00001372 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9332 00001374 E8770F                  	call	_$IOCTL
  9333 00001377 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9334 0000137C 368F06[8405]            	POP	word [SS:USER_SP]
  9335 00001381 C3                      	RETN
  9336                                  
  9337                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9338                                  ;----------------------------------------------------------------------------
  9339                                  ;   DOS 3.3   7/25/86
  9340                                  ;   NLS_GETEXT	-
  9341                                  ;
  9342                                  ;   Inputs:	none
  9343                                  ;   Outputs:	AX = extended error
  9344                                  ;
  9345                                  ;----------------------------------------------------------------------------
  9346                                  
  9347                                  NLS_GETEXT:
  9348                                  	; 16/05/2019 - Retro DOS v4.0
  9349 00001382 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9350 00001386 C3                      	RETN
  9351                                  
  9352                                  ; 29/04/2019 - Retro DOS v4.0
  9353                                  
  9354                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9355                                  
  9356                                  ;----------------------------------------------------------------------------
  9357                                  ;   DOS 4.00
  9358                                  ;
  9359                                  ;   Inputs:	DL=0 get extended error message addr
  9360                                  ;		  =1 set extended error message addr
  9361                                  ;		  =2 get parser error message addr
  9362                                  ;		  =3 set parser error message addr
  9363                                  ;		  =4 get critical error message addr
  9364                                  ;		  =5 set critical error message addr
  9365                                  ;		  =6 get file system error message addr
  9366                                  ;		  =7 set file system error message addr
  9367                                  ;		  =8 get address for code reduction
  9368                                  ;		  =9 set address for code reduction
  9369                                  ;   Function:	get/set message address
  9370                                  ;   Outputs:	ES:DI points to addr when get
  9371                                  ;----------------------------------------------------------------------------
  9372                                  
  9373                                  ;Procedure MSG_RETRIEVAL,NEAR
  9374                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9375                                  
  9376                                  MSG_RETRIEVAL:
  9377                                  
  9378                                  ;;	NOTE:  This function lives in command.com resident code now.
  9379                                  ;;	If the int 2F ever gets this far, we'll return registers
  9380                                  ;;	unchanged, which produces the same result as before, if
  9381                                  ;;	command.com wasn't present (and therefore no messages available).
  9382                                  ;;
  9383                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9384                                  ;;	No_Op zeroes AL.
  9385                                  ;;
  9386                                  ;;;hkn; set up ds to point to DOSDATA
  9387                                  ;;	push	ds
  9388                                  ;;	getdseg	<ds>			; ds -> dosdata
  9389                                  ;;
  9390                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9391                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9392                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9393                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9394                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9395                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9396                                  ;;	DEC	AL		    ;AN000;;MS.
  9397                                  ;;toget:				    ;AN000;
  9398                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9399                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9400                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9401                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9402                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9403                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9404                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9405                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9406                                  ;;getget: 				     ;AN000;
  9407                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9408                                  ;;MSGret: 				     ;AN000;
  9409                                  ;;	POP	SI			     ;AN000;;MS.
  9410                                  ;;	POP	AX			     ;AN000;;MS.
  9411                                  ;;
  9412                                  ;;	pop	ds
  9413                                  
  9414                                  ;	return				     ;AN000;;MS. exit
  9415 00001387 C3                      	retn	; 29/04/2019
  9416                                  
  9417                                  ;============================================================================
  9418                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9419                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9420                                  ;============================================================================
  9421                                  ; 20/07/2018 - Retro DOS v3.0
  9422                                  
  9423                                  ;	; MSDOS 3.3
  9424                                  ;	; 08/08/2018 - Retro DOS v3.0
  9425                                  ;ECritMEM:
  9426                                  ;ECritSFT:
  9427                                  ;	;
  9428                                  ;ECritDisk:
  9429                                  ;	retn
  9430                                  ;	;push	ax
  9431                                  ;	
  9432                                  ;	mov	ax,8001h
  9433                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9434                                  ;			; AL = critical section number (00h-0Fh)
  9435                                  ;	pop	ax
  9436                                  ;	retn
  9437                                  ;
  9438                                  ;	; MSDOS 3.3
  9439                                  ;	; 08/08/2018 - Retro DOS v3.0
  9440                                  ;LCritMEM:
  9441                                  ;LCritSFT:
  9442                                  ;	;
  9443                                  ;LCritDisk:
  9444                                  ;	retn
  9445                                  ;	;push	ax
  9446                                  ;	
  9447                                  ;	mov	ax,8101h
  9448                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9449                                  ;			; AL = critical section number (00h-0Fh)
  9450                                  ;	pop	ax
  9451                                  ;	retn
  9452                                  ;
  9453                                  ;ECritDevice:
  9454                                  ;	retn
  9455                                  ;	;push	ax
  9456                                  ;	
  9457                                  ;	mov	ax,8002h
  9458                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9459                                  ;			; AL = critical section number (00h-0Fh)
  9460                                  ;	pop	ax
  9461                                  ;	retn
  9462                                  ;
  9463                                  ;LCritDevice:
  9464                                  ;	retn
  9465                                  ;	;push	ax
  9466                                  ;	
  9467                                  ;	mov	ax,8102h
  9468                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9469                                  ;			; AL = critical section number (00h-0Fh)
  9470                                  ;	pop	ax
  9471                                  ;	retn
  9472                                  
  9473                                  ;============================================================================
  9474                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9475                                  ;============================================================================
  9476                                  ; 12/05/2019 - Retro DOS v4.0
  9477                                  
  9478                                  ; Critical Section Routines
  9479                                  
  9480                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9481                                  
  9482                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9483                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9484                                  
  9485                                  ; ---------------------------------------------------------------------------
  9486                                  ; Each handler must leave everything untouched; including flags!
  9487                                  ;
  9488                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9489                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9490                                  ; ---------------------------------------------------------------------------
  9491                                  
  9492                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9493                                  ; ---------------------------------------------------------------------------
  9494                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9495                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9496                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9497                                  ; ---------------------------------------------------------------------------
  9498                                  
  9499                                  ;%macro POPFF 0
  9500                                  ;	jmp	$+3
  9501                                  ;	iret
  9502                                  ;	push	cs
  9503                                  ;	call	$-2
  9504                                  ;%endmacro
  9505                                  
  9506                                  ; ---------------------------
  9507                                  
  9508                                  ;Procedure  ECritDisk,NEAR
  9509                                  	;public  ECritMEM
  9510                                  	;public  ECritSFT
  9511                                  ECritMEM:
  9512                                  ECritSFT:
  9513                                  ;
  9514                                  ECritDisk:
  9515                                  
  9516                                  ;SR; Check if critical section is to be entered
  9517                                  
  9518 00001388 9C                      	pushf
  9519 00001389 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9520 0000138F 740D                    	jz	short ECritDisk_2
  9521                                  
  9522                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9523                                  ;	;popff  ; * (macro)
  9524                                  ;	jmp	short ECritDisk_1 ; *
  9525                                  ;
  9526                                  ;ECritDisk_iret: ; *
  9527                                  ;	iret ; *
  9528                                  
  9529                                  	; 16/12/2022
  9530                                  	; 13/11/2022
  9531                                  	;jmp	short ECritDisk_1
  9532                                  	; 06/11/2022
  9533                                  ;ECritDisk_iret:
  9534                                  ;	iret	
  9535                                  
  9536                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9537                                  ECritDisk_1:
  9538 00001391 0E                      	push	cs ; *
  9539 00001392 E80800                  	call	ECritDisk_iret ; *		
  9540                                  	
  9541                                  ECritDisk_0:
  9542 00001395 50                      	PUSH    AX
  9543                                  	;MOV	AX,8000h+critDisk
  9544                                  	;INT	int_IBM
  9545 00001396 B80180                  	mov	ax,8001h
  9546 00001399 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9547                                  			; AL = critical section number (00h-0Fh)
  9548 0000139B 58                      	POP     AX
  9549 0000139C C3                      	retn
  9550                                  
  9551                                  	; 16/12/2022
  9552                                  	; 13/11/2022
  9553                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9554                                  LCritDisk_iret: 
  9555 0000139D CF                      	iret
  9556                                  
  9557                                  ECritDisk_2:
  9558                                  	;;popff ; *
  9559                                  	;;retn
  9560                                  ;	jmp	short ECritDisk_3 ; *
  9561                                  ;ECritDisk_iret2: ; *
  9562                                  ;	iret
  9563                                  	
  9564                                  	; 16/12/2022
  9565                                  	; 13/11/2022
  9566                                  	;jmp	short ECritDisk_3
  9567                                  ;ECritDisk_iret2:
  9568                                  	;iret
  9569                                  
  9570                                  ECritDisk_3:
  9571 0000139E 0E                      	push    cs ; *
  9572                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9573                                  	;call	ECritDisk_iret2 ; *
  9574                                  	;retn
  9575                                  	; 16/12/2022
  9576 0000139F E8FBFF                  	call	ECritDisk_iret
  9577 000013A2 C3                      	retn
  9578                                  
  9579                                  ;EndProc ECritDisk
  9580                                  
  9581                                  ; ---------------------------
  9582                                  
  9583                                  ;Procedure   LCritDisk,NEAR
  9584                                  	;public  LCritMEM
  9585                                  	;public  LCritSFT
  9586                                  LCritMEM:
  9587                                  LCritSFT:
  9588                                  ;
  9589                                  LCritDisk:
  9590                                  
  9591                                  ;SR; Check if critical section is to be entered
  9592                                  
  9593 000013A3 9C                      	pushf
  9594 000013A4 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9595 000013AA 740C                    	jz	short LCritDisk_2
  9596                                  	;popff  ; * (macro)
  9597                                  ;	jmp	short LCritDisk_1 ; *
  9598                                  ;
  9599                                  ;LCritDisk_iret: ; *
  9600                                  ;	iret ; *
  9601                                  
  9602                                  	; 16/12/2022
  9603                                  	; 13/11/2022
  9604                                  	;jmp	short LCritDisk_1
  9605                                  ;LCritDisk_iret:
  9606                                  	;iret
  9607                                  
  9608                                  LCritDisk_1:
  9609 000013AC 0E                      	push	cs ; *
  9610 000013AD E8EDFF                  	call	LCritDisk_iret ; *		
  9611                                  	
  9612                                  LCritDisk_0:
  9613 000013B0 50                      	PUSH	AX
  9614                                  	;MOV	AX,8100h+critDisk
  9615                                  	;INT	int_IBM
  9616 000013B1 B80181                  	mov	ax,8101h
  9617 000013B4 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9618                                  			; AL = critical section number (00h-0Fh)
  9619 000013B6 58                      	POP	AX
  9620 000013B7 C3                      	retn
  9621                                  
  9622                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9623                                  ;	iret
  9624                                  
  9625                                  LCritDisk_2:
  9626                                  	;;popff ; *
  9627                                  	;;retn
  9628                                  ;	jmp	short LCritDisk_3 ; *
  9629                                  ;LCritDisk_iret2: ; *
  9630                                  ;	iret
  9631                                  
  9632                                  	; 16/12/2022
  9633                                  	; 13/11/2022
  9634                                  	;jmp	short LCritDisk_3
  9635                                  ;LCritDisk_iret2:
  9636                                  	;iret
  9637                                  
  9638                                  LCritDisk_3:
  9639 000013B8 0E                      	push    cs ; *
  9640                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9641                                  	;call	LCritDisk_iret2 ; *
  9642                                  	;retn
  9643                                  	; 16/12/2022
  9644 000013B9 E8E1FF                  	call	LCritDisk_iret
  9645 000013BC C3                      	retn
  9646                                  
  9647                                  ;EndProc LCritDisk
  9648                                  
  9649                                  ; ---------------------------
  9650                                  
  9651                                  ;Procedure   ECritDevice,NEAR
  9652                                  
  9653                                  ECritDevice:
  9654                                  
  9655                                  ;SR; Check if critical section is to be entered
  9656                                  
  9657 000013BD 9C                      	pushf
  9658 000013BE 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9659 000013C4 740D                    	jz	short ECritDevice_2
  9660                                  	;popff  ; * (macro)
  9661                                  ;	jmp	short ECritDevice_1 ; *
  9662                                  ;
  9663                                  ;ECritDevice_iret: ; *
  9664                                  ;	iret ; *
  9665                                  
  9666                                  	; 16/12/2022	
  9667                                  	; 13/11/2022
  9668                                  	;jmp	short ECritDevice_1
  9669                                  ;ECritDevice_iret:
  9670                                  	;iret
  9671                                  
  9672                                  ECritDevice_1:
  9673 000013C6 0E                      	push	cs ; *
  9674 000013C7 E80800                  	call	ECritDevice_iret ; *		
  9675                                  	
  9676                                  ECritDevice_0:
  9677 000013CA 50                      	PUSH	AX
  9678                                  	;MOV	AX,8000h+critDevice
  9679                                  	;INT	int_IBM
  9680 000013CB B80280                  	mov	ax,8002h
  9681 000013CE CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9682                                  			; AL = critical section number (00h-0Fh)
  9683 000013D0 58                      	POP     AX
  9684 000013D1 C3                      	retn
  9685                                  
  9686                                  	; 16/12/2022
  9687                                  	; 06/12/2022
  9688                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9689                                  LCritDevice_iret: 
  9690 000013D2 CF                      	iret
  9691                                  
  9692                                  ECritDevice_2:
  9693                                  	;;popff ; *
  9694                                  	;;retn
  9695                                  ;	jmp	short ECritDevice_3 ; *
  9696                                  ;ECritDevice_iret2: ; *
  9697                                  ;	iret
  9698                                  
  9699                                  	; 16/12/2022
  9700                                  	; 13/11/2022
  9701                                  	;jmp	short ECritDevice_3
  9702                                  ;ECritDevice_iret2:
  9703                                  	;iret
  9704                                  
  9705                                  ECritDevice_3:
  9706 000013D3 0E                      	push    cs ; *
  9707                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9708                                  	;call	ECritDevice_iret2 ; *
  9709                                  	;retn
  9710                                  	; 16/12/2022
  9711 000013D4 E8FBFF                  	call	ECritDevice_iret
  9712 000013D7 C3                      	retn
  9713                                  
  9714                                  ;EndProc ECritDevice
  9715                                  
  9716                                  ; ---------------------------
  9717                                  
  9718                                  ;Procedure   LCritDevice,NEAR
  9719                                  
  9720                                  LCritDevice:
  9721                                  
  9722                                  ;SR; Check if critical section is to be entered
  9723                                  
  9724 000013D8 9C                      	pushf
  9725 000013D9 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9726 000013DF 740C                    	jz	short LCritDevice_2
  9727                                  	;popff  ; * (macro)
  9728                                  ;	jmp	short LCritDevice_1 ; *
  9729                                  ;
  9730                                  ;LCritDevice_iret: ; *
  9731                                  ;	iret ; *
  9732                                  
  9733                                  	; 16/12/2022
  9734                                  	; 13/11/2022
  9735                                  	;jmp	short LCritDevice_1
  9736                                  ;LCritDevice_iret:
  9737                                  	;iret
  9738                                  
  9739                                  LCritDevice_1:
  9740 000013E1 0E                      	push	cs ; *
  9741 000013E2 E8EDFF                  	call	LCritDevice_iret ; *		
  9742                                  	
  9743                                  LCritDevice_0:
  9744 000013E5 50                      	PUSH	AX
  9745                                  	;MOV	AX,8100h+critDevice
  9746                                  	;INT	int_IBM
  9747 000013E6 B80281                  	mov	ax,8102h
  9748 000013E9 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9749                                  			; AL = critical section number (00h-0Fh)
  9750 000013EB 58                      	POP     AX
  9751 000013EC C3                      	retn
  9752                                  
  9753                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9754                                  ;	iret
  9755                                  
  9756                                  LCritDevice_2:
  9757                                  	;;popff ; *
  9758                                  	;;retn
  9759                                  ;	jmp	short LCritDevice_3 ; *
  9760                                  ;LCritDevice_iret2: ; *
  9761                                  ;	iret
  9762                                  
  9763                                  	; 16/12/2022
  9764                                  	; 13/11/2022
  9765                                  	;jmp	short LCritDevice_3
  9766                                  ;LCritDevice_iret2:
  9767                                  	;iret
  9768                                  
  9769                                  LCritDevice_3:
  9770 000013ED 0E                      	push    cs ; *
  9771                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9772                                  	;call	LCritDevice_iret2 ; *
  9773                                  	;retn
  9774                                  	; 16/12/2022
  9775 000013EE E8E1FF                  	call	LCritDevice_iret
  9776 000013F1 C3                      	retn
  9777                                  
  9778                                  ;EndProc LCritDevice
  9779                                  
  9780                                  ;============================================================================
  9781                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9782                                  ;============================================================================
  9783                                  ; 20/07/2018 - Retro DOS v3.0
  9784                                  
  9785                                  ;============================================================================
  9786                                  ; STDIO.ASM - (MSDOS 2.0)
  9787                                  ;============================================================================
  9788                                  
  9789                                  ;
  9790                                  ; Standard device IO for MSDOS (first 12 function calls)
  9791                                  ;
  9792                                  
  9793                                  ;.xlist
  9794                                  ;.xcref
  9795                                  ;INCLUDE STDSW.ASM
  9796                                  ;INCLUDE DOSSEG.ASM
  9797                                  ;.cref
  9798                                  ;.list
  9799                                  
  9800                                  ;TITLE   STDIO - device IO for MSDOS
  9801                                  ;NAME    STDIO
  9802                                  
  9803                                  ;INCLUDE IO.ASM
  9804                                  
  9805                                  ; ---------------------------------------------------------------------------
  9806                                  ;
  9807                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9808                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9809                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9810                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9811                                  ;			    to restore MSDOS 2.0 device IO source code 
  9812                                  ;
  9813                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9814                                  	
  9815                                  ;============================================================================
  9816                                  ; STDIO.ASM - (MSDOS 2.0)
  9817                                  ;============================================================================
  9818                                  
  9819                                  ;
  9820                                  ; Standard device IO for MSDOS (first 12 function calls)
  9821                                  ;
  9822                                  
  9823                                  ;.xlist
  9824                                  ;.xcref
  9825                                  ;INCLUDE STDSW.ASM
  9826                                  ;INCLUDE DOSSEG.ASM
  9827                                  ;.cref
  9828                                  ;.list
  9829                                  
  9830                                  ;TITLE   STDIO - device IO for MSDOS
  9831                                  ;NAME    STDIO
  9832                                  
  9833                                  ;INCLUDE IO.ASM
  9834                                  
  9835                                  ; ---------------------------------------------------------------------------
  9836                                  ;
  9837                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9838                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9839                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9840                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9841                                  ;			    to restore MSDOS 2.0 device IO source code 
  9842                                  ;
  9843                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9844                                  ;
  9845                                  ;============================================================================
  9846                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9847                                  ;============================================================================
  9848                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9849                                  
  9850                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9851                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9852                                  
  9853                                  ;============================================================================
  9854                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
  9855                                  ;============================================================================
  9856                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
  9857                                  
  9858                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9859                                  
  9860                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9861                                  ;
  9862                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9863                                  ;	NAME	IBMCPMIO
  9864                                  
  9865                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9866                                  ;
  9867                                  ;	$Std_Con_Input_No_Echo
  9868                                  ;	$Std_Con_String_Output
  9869                                  ;	$Std_Con_String_Input
  9870                                  ;	$RawConIO
  9871                                  ;	$RawConInput
  9872                                  ;	RAWOUT
  9873                                  ;	RAWOUT2
  9874                                  ;
  9875                                  
  9876                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9877                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9878                                  ; references to be SS or CS relative which is desired.
  9879                                  
  9880                                  ; ---------------------------------------------------------------------------
  9881                                  
  9882                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9883                                  ;	NAME	CPMIO2
  9884                                  
  9885                                  ;
  9886                                  ;	Microsoft Confidential
  9887                                  ;	Copyright (C) Microsoft Corporation 1991
  9888                                  ;	All Rights Reserved.
  9889                                  ;
  9890                                  
  9891                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9892                                  ;
  9893                                  ;	$Std_Con_Input
  9894                                  ;	$Std_Con_Output
  9895                                  ;	OUTT
  9896                                  ;	TAB
  9897                                  ;	BUFOUT
  9898                                  ;	$Std_Aux_Input
  9899                                  ;	$Std_Aux_Output
  9900                                  ;	$Std_Printer_Output
  9901                                  ;	$Std_Con_Input_Status
  9902                                  ;	$Std_Con_Input_Flush
  9903                                  ;
  9904                                  ;	Revision History:
  9905                                  ;
  9906                                  ;	  AN000	 version 4.00 - Jan. 1988
  9907                                  
  9908                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9909                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9910                                  ; references to be SS or CS relative which is desired.
  9911                                  
  9912                                  ;DOSCODE SEGMENT
  9913                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9914                                  
  9915                                  
  9916                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9917                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9918                                  ;hkn;	not valid. 
  9919                                  
  9920                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
  9921                                  ; 08/11/2022
  9922                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
  9923                                  
  9924                                  ;
  9925                                  ;----------------------------------------------------------------------------
  9926                                  ;
  9927                                  ; Procedure : $Std_Con_Input_No_Echo
  9928                                  ;
  9929                                  ;----------------------------------------------------------------------------
  9930                                  ;
  9931                                  
  9932                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9933                                  
  9934                                  ; Inputs:
  9935                                  ;	None
  9936                                  ; Function:
  9937                                  ;	Input character from console, no echo
  9938                                  ; Returns:
  9939                                  ;	AL = character
  9940                                  
  9941 000013F2 1E                      	push	ds
  9942 000013F3 56                      	push	si
  9943                                  INTEST:
  9944 000013F4 E81C3E                  	call	STATCHK
  9945 000013F7 753B                    	jnz	short GET ; 08/09/2018
  9946                                  ;*************************************************************************
  9947                                  ;hkn; SS override
  9948 000013F9 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9949 000013FF 7505                    	jnz	short no_sys_wait
  9950 00001401 B405                    	mov	ah,5			; get input status with system wait
  9951 00001403 E81831                  	call	IOFUNC
  9952                                  no_sys_wait:
  9953                                  ;**************************************************************************
  9954 00001406 B484                    	MOV	AH,84h
  9955 00001408 CD2A                    	INT	int_IBM	 ; int 2Ah
  9956                                  
  9957                                  ;;; 7/15/86  update the date in the idle loop
  9958                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9959                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9960                                  
  9961                                  ;hkn; SS override
  9962 0000140A 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9963 00001410 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9964                                  
  9965 00001412 50                      	PUSH	AX
  9966 00001413 53                      	PUSH	BX			; following is tricky,
  9967 00001414 51                      	PUSH	CX			; it may be called by critical handler
  9968 00001415 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9969                                  					; other's READ or WRITE
  9970 00001416 1E                      	PUSH	DS			; save DS = SFT's segment
  9971                                  
  9972                                  ;hkn; READTIME must use ds = DOSDATA
  9973                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9974                                  
  9975 00001417 16                      	PUSH	SS ; 04/05/2019
  9976 00001418 1F                      	POP	DS
  9977                                  
  9978 00001419 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9979 0000141C E89802                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9980                                  	;invoke	READTIME		; readtime
  9981 0000141F E84EF7                  	call	READTIME
  9982 00001422 B80100                  	MOV	AX,1
  9983 00001425 E88F02                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9984                                  
  9985                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9986                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9987                                  ;	push	bx
  9988                                  ;	mov	bx,DATE_FLAG
  9989                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
  9990                                  ;	cmp	word [cs:bx],5872h
  9991                                  ;	jz	short FETCHI_TAG_chk_ok
  9992                                  ;	call	DOSINIT
  9993                                  ;FETCHI_TAG_chk_ok:
  9994                                  ;	pop	bx
  9995                                  
  9996 00001428 1F                      	POP	DS			; restore DS
  9997 00001429 5A                      	POP	DX
  9998 0000142A 59                      	POP	CX
  9999 0000142B 5B                      	POP	BX
 10000 0000142C 58                      	POP	AX
 10001                                  NoUpdate:
 10002                                  
 10003                                  ;hkn; SS override
 10004 0000142D 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10005                                  
 10006                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10007 00001432 EBC0                    	JMP	short INTEST
 10008                                  GET:
 10009 00001434 30E4                    	XOR	AH,AH
 10010 00001436 E8E530                  	call	IOFUNC
 10011 00001439 5E                      	POP	SI
 10012 0000143A 1F                      	POP	DS
 10013                                  ;;; 7/15/86
 10014                                  
 10015                                  ;hkn; SS override
 10016                                  	; MSDOS 6.0
 10017 0000143B 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10018                                  	;
 10019 00001441 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10020 00001443 7506                    	JNZ	short noscan
 10021                                  
 10022                                  ;hkn; SS override
 10023 00001445 36C606[900D]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10024                                  noscan:
 10025 0000144B C3                      	retn
 10026                                  ;
 10027                                  ;----------------------------------------------------------------------------
 10028                                  ;
 10029                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10030                                  ;
 10031                                  ;
 10032                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10033                                  ;	EXIT	none
 10034                                  ;	USES	ALL
 10035                                  ;
 10036                                  ;----------------------------------------------------------------------------
 10037                                  ;
 10038                                  
 10039                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10040                                  
 10041 0000144C 89D6                    	mov	si,dx
 10042                                  STRING_OUT1:	
 10043 0000144E AC                      	lodsb
 10044 0000144F 3C24                    	cmp	al,'$'
 10045 00001451 74F8                    	je	short noscan
 10046                                  NEXT_STR1:
 10047 00001453 E88D02                  	call	OUTT
 10048                                  
 10049 00001456 EBF6                    	jmp	short STRING_OUT1
 10050                                  
 10051                                  ;----------------------------------------------------------------------------
 10052                                  ;
 10053                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10054                                  ;
 10055                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10056                                  ;
 10057                                  ;	ENTRY	(ds:dx) = input buffer
 10058                                  ;	EXIT	none
 10059                                  ;	USES	ALL
 10060                                  ;
 10061                                  ;----------------------------------------------------------------------------
 10062                                  
 10063                                  	; 15/01/2024
 10064                                  
 10065                                  _$STD_CON_STRING_INPUT:		;System call 10
 10066                                  
 10067 00001458 8CD0                    	mov	ax,ss
 10068 0000145A 8EC0                    	mov	es,ax
 10069 0000145C 89D6                    	mov	si,dx
 10070 0000145E 30ED                    	xor	ch,ch
 10071 00001460 AD                      	lodsw
 10072                                  
 10073                                  ;	(AL) = the buffer length
 10074                                  ;	(AH) = the template length
 10075                                  
 10076 00001461 08C0                            or	al,al
 10077 00001463 74E6                            jz	short noscan	;Buffer is 0 length!!?
 10078 00001465 88E3                    	mov	bl,ah		;Init template counter
 10079 00001467 88EF                            mov	bh,ch		;Init template counter
 10080                                  
 10081                                  ;	(BL) = the number of bytes in the template
 10082                                  
 10083 00001469 38D8                            cmp	al,bl
 10084 0000146B 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10085 0000146D 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10086 00001470 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10087                                  
 10088                                  ; The number of chars in the template is >= the number of chars in buffer or
 10089                                  ; there is no CR at the end of the template.  This is an inconsistant state
 10090                                  ; of affairs.  Pretend that the template was empty:
 10091                                  ;
 10092                                  
 10093                                  NOEDIT:	
 10094 00001472 88EB                    	mov	bl,ch		;Reset buffer
 10095                                  EDITON: 
 10096 00001474 88C2                    	mov	dl,al
 10097 00001476 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10098                                  
 10099                                  ;	Top level. We begin to read a line in.
 10100                                  
 10101                                  NEWLIN: 
 10102 00001477 36A0[F901]              	mov	al,[SS:CARPOS]
 10103 0000147B 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10104                                  
 10105 0000147F 56                      	push	si
 10106 00001480 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10107 00001483 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10108 00001488 88EF                    	mov	bh,ch		;No chars from template yet
 10109 0000148A 88EE                    	mov	dh,ch		;No chars to new line yet
 10110 0000148C E863FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10111 0000148F 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10112 00001491 7503                    	jnz	short GOTCH
 10113                                  
 10114                                  ;	This is the main loop of reading in a character and processing it.
 10115                                  ;
 10116                                  ;	(BH) = the index of the next byte in the template
 10117                                  ;	(BL) = the length of the template
 10118                                  ;	(DH) = the number of bytes in the buffer
 10119                                  ;	(DL) = the length of the buffer
 10120                                  
 10121                                  GETCH:
 10122 00001493 E85CFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10123                                  GOTCH:
 10124                                  ;
 10125                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10126                                  ; input queue.
 10127                                  ;
 10128 00001496 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10129 00001498 74F9                    	jz	short GETCH
 10130                                  
 10131                                  ;	If the leading char is the function-key lead byte
 10132                                  
 10133                                  	;cmp	al,[SS:ESCCHAR]
 10134                                  
 10135                                  	; 04/05/2019 - Retro DOS v4.0
 10136                                  
 10137                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10138                                  
 10139 0000149A 2E3A06[6E0A]            	CMP	AL,[cs:ESCCHAR]
 10140 0000149F 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10141                                  
 10142                                  ;	Rubout and ^H are both destructive backspaces.
 10143                                  
 10144 000014A1 3C7F                            cmp	al,c_DEL ; 7FH
 10145                                          ;jz	short BACKSPJ
 10146                                          ; 15/01/2024
 10147 000014A3 7466                    	je	short BACKSP
 10148 000014A5 3C08                    	cmp	al,c_BS  ; 8
 10149                                          ;jz	short BACKSPJ
 10150                                          ; 15/01/2024
 10151 000014A7 7462                    	je	short BACKSP
 10152                                  
 10153                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10154                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10155                                  	;	   	after CMP and a CMP again!
 10156                                  	;		
 10157                                  	;		-It would be better if they use a 'JMP short' to 
 10158                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10159                                  	;		between them. Then, they would be able use a patch
 10160                                  	;		between 5271h and 5279h when if it will be required.
 10161                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10162                                  	;	
 10163                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10164                                  
 10165                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10166                                  	;
 10167                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10168                                  
 10169                                  ;DOSCODE:526D	cmp     al, 8
 10170                                  ;DOSCODE:526F	jz      short BACKSPJ
 10171                                  ;DOSCODE:5271	cmp     al, 17h
 10172                                  ;DOSCODE:5273	nop
 10173                                  ;DOSCODE:5274	nop
 10174                                  ;DOSCODE:5275	cmp     al, 15h
 10175                                  ;DOSCODE:5277	nop
 10176                                  ;DOSCODE:5278	nop
 10177                                  ;DOSCODE:5279	cmp     al, 0Dh
 10178                                  ;DOSCODE:527B	jz      short ENDLIN
 10179                                  ;DOSCODE:527D	cmp     al, 0Ah
 10180                                  ;DOSCODE:527F	jz      short PHYCRLF
 10181                                  	
 10182                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10183                                  	; DOSCODE:525Dh
 10184                                  
 10185                                  ; 16/12/2022
 10186                                  %if 0
 10187                                  	; MSDOS 6.0
 10188                                  ;	^W deletes backward once and then backs up until a letter is before the
 10189                                  ;	cursor
 10190                                  
 10191                                  	CMP     AL,"W"-"@" ; 17h
 10192                                  
 10193                                  ;	The removal of the comment characters before the jump statement will
 10194                                  ;	cause ^W to backup a word.
 10195                                  
 10196                                  ;***	JZ	short WordDel
 10197                                  	NOP
 10198                                  	NOP
 10199                                  
 10200                                  	CMP     AL,"U"-"@" ; 15h
 10201                                  
 10202                                  ;	The removal of the comment characters before the jump statement will
 10203                                  ;	cause ^U to clear a line.
 10204                                  
 10205                                  ;***	JZ	short LineDel
 10206                                  	NOP
 10207                                  	NOP
 10208                                  
 10209                                  %endif
 10210                                  
 10211                                  ;	CR terminates the line.
 10212                                  
 10213 000014A9 3C0D                            cmp	al,c_CR ; 0Dh
 10214 000014AB 7430                            jz	short ENDLIN
 10215                                  
 10216                                  ;	LF goes to a new line and keeps on reading.
 10217                                  
 10218 000014AD 3C0A                            cmp	al,c_LF ; 0Ah
 10219 000014AF 7442                    	jz	short PHYCRLF
 10220                                  
 10221                                  ;	^X (or ESC) deletes the line and starts over
 10222                                  
 10223                                  	; MSDOS 3.3
 10224                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10225                                  	;jz	short KILNEW
 10226                                  
 10227                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10228                                  
 10229                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10230                                  
 10231 000014B1 2E3A06[6D0A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10232 000014B6 7440                    	jz	short KILNEW
 10233                                  	
 10234                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10235                                  	;jz	short KILNEW
 10236                                  
 10237                                  ; Otherwise, we save the input character.
 10238                                  
 10239                                  SAVCH:	
 10240 000014B8 38D6                    	cmp	dh,dl
 10241 000014BA 7317                    	jnb	short BUFFUL		; buffer is full.
 10242 000014BC AA                              stosb
 10243 000014BD FEC6                    	inc	dh                      ; increment count in buffer.
 10244 000014BF E8B502                  	call	BUFOUT			; Print control chars nicely
 10245                                  
 10246 000014C2 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10247 000014C8 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10248 000014CA 38DF                            cmp	bh,bl
 10249 000014CC 73C5                            jnb	short GETCH		; no more characters in template
 10250 000014CE 46                              inc	si                      ; Skip to next char in template
 10251 000014CF FEC7                            inc	bh                      ; remember position in template
 10252 000014D1 EBC0                            jmp	short GETCH
 10253                                  
 10254                                  	; 15/01/2024
 10255                                  ;BACKSPJ: 
 10256                                  	;jmp	short BACKSP
 10257                                  
 10258                                  BUFFUL: 
 10259 000014D3 B007                    	mov	al, 7			; Bell to signal full buffer
 10260 000014D5 E80B02                  	call	OUTT
 10261 000014D8 EBB9                    	jmp	short GETCH
 10262                                  
 10263                                  ESCAPE: 
 10264                                  	;transfer OEMFunctionKey
 10265 000014DA E9BCF5                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10266                                  
 10267                                  ENDLIN:
 10268 000014DD AA                              stosb				; Put the CR in the buffer
 10269 000014DE E80202                  	call	OUTT                    ; Echo it
 10270 000014E1 5F                              pop	di                      ; Get start of user buffer
 10271 000014E2 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10272 000014E5 FEC6                            inc	dh			; DH is length including CR
 10273                                  
 10274                                  COPYNEW:
 10275                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10276                                  	;mov	bp, es
 10277                                  	;mov	bx, ds
 10278                                  	;mov	es, bx
 10279                                  	;mov	ds, bp
 10280                                  	;mov	si, INBUF
 10281                                  	;mov	cl, dh
 10282                                  	;rep	movsb
 10283                                  	;retn
 10284                                  
 10285                                  	; CPMIO.ASM (MSDOS 6.0)
 10286                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10287                                  	;SAVE	<DS,ES>
 10288 000014E7 1E                      	PUSH	DS
 10289 000014E8 06                      	PUSH	ES
 10290                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10291 000014E9 1F                      	POP	DS
 10292 000014EA 07                      	POP	ES
 10293                                  
 10294                                  ;;hkn; INBUF is in DOSDATA
 10295 000014EB BE[FB01]                        MOV     SI,INBUF
 10296 000014EE 88F1                            MOV     CL,DH                   ; set up count
 10297 000014F0 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10298                                  OLDBAK_RETN:
 10299 000014F2 C3                              RETN
 10300                                  
 10301                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10302                                  
 10303                                  PHYCRLF:
 10304 000014F3 E81F01                  	CALL	CRLF
 10305 000014F6 EB9B                            JMP	short GETCH
 10306                                  
 10307                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10308                                  
 10309                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10310                                  
 10311                                  	; Note: Following routines were not used in IBMDOS.COM
 10312                                  	;	-CRTL+W, CRTL+U is not activated-
 10313                                  	;	but they were in the kernel code!?)
 10314                                  
 10315                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10316                                  	; DOSCODE:52B6h
 10317                                  
 10318                                  ;;;;;;;;
 10319                                  
 10320                                  ; 16/12/2022
 10321                                  %if 0
 10322                                  ;
 10323                                  ; Delete the previous line
 10324                                  ;
 10325                                  LineDel:
 10326                                  	OR      DH,DH
 10327                                  	JZ	short GETCH	 ; 06/12/2022
 10328                                  	Call    BackSpace
 10329                                  	JMP	short LineDel
 10330                                  
 10331                                  %endif
 10332                                  
 10333                                  ;
 10334                                  ; delete the previous word.
 10335                                  ;
 10336                                  WordDel:
 10337                                  WordLoop:
 10338                                  ;	Call    BackSpace               ; backspace the one spot
 10339                                  ;	OR      DH,DH
 10340                                  ;	JZ	short GetChj
 10341                                  ;	MOV     AL,[ES:DI-1]
 10342                                  ;	cmp     al,'0'
 10343                                  ;	jb	short GetChj
 10344                                  ;	cmp     al,'9'
 10345                                  ;	jbe	short WordLoop
 10346                                  ;	OR      AL,20h
 10347                                  ;	CMP     AL,'a'
 10348                                  ;	JB	short GetChj
 10349                                  ;	CMP     AL,'z'
 10350                                  ;	JBE	short WordLoop
 10351                                  ;GetChj: 
 10352                                  ;	JMP	GETCH
 10353                                  
 10354                                  ; 16/12/2022
 10355                                  %if 0
 10356                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10357                                  	; (Worddel is not called or jumped from anywhere!)
 10358                                  WordDel:
 10359                                  WordLoop:
 10360                                  	Call    BackSpace               ; backspace the one spot
 10361                                  	OR      DH,DH
 10362                                  	JZ	short GetChj
 10363                                  	MOV     AL,[ES:DI-1]
 10364                                  	cmp     al,'0'
 10365                                  	jb	short GetChj
 10366                                  	cmp     al,'9'
 10367                                  	jbe	short WordLoop
 10368                                  	OR      AL,20h
 10369                                  	CMP     AL,'a'
 10370                                  	JB	short GetChj
 10371                                  	CMP     AL,'z'
 10372                                  	JBE	short WordLoop
 10373                                  GetChj: 
 10374                                  	JMP	GETCH
 10375                                  
 10376                                  %endif
 10377                                  
 10378                                  ;;;;;;;;
 10379                                  
 10380                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10381                                  
 10382                                  ; The user wants to throw away what he's typed in and wants to start over.
 10383                                  ; We print the backslash and then go to the next line and tab to the correct
 10384                                  ; spot to begin the buffered input.
 10385                                  
 10386                                  KILNEW:
 10387 000014F8 B05C                            mov	al,'\'
 10388 000014FA E8E601                          call	OUTT            ;Print the CANCEL indicator
 10389 000014FD 5E                              pop	si		;Remember start of edit buffer
 10390                                  PUTNEW:
 10391 000014FE E81401                  	call	CRLF            ;Go to next line on screen
 10392 00001501 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10393 00001505 E84F02                  	call	TAB             ;Tab over
 10394 00001508 E96CFF                          JMP     NEWLIN		;Start over again
 10395                                  
 10396                                  ;	Destructively back up one character position
 10397                                  
 10398                                  BACKSP:
 10399                                  	; 09/09/2018
 10400 0000150B E80800                  	Call    BackSpace
 10401 0000150E EB83                    	JMP     short GETCH	; 15/01/2024
 10402                                  
 10403                                  	; 15/01/2024
 10404                                  ;User really wants an ESC character in his line
 10405                                  TWOESC:	
 10406 00001510 2EA0[6E0A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10407 00001514 EBA2                    	jmp	short SAVCH
 10408                                  
 10409                                  BackSpace:
 10410 00001516 08F6                    	or	dh,dh
 10411 00001518 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10412 0000151A E85800                  	call	BACKUP          ;Do the backup
 10413 0000151D 268A05                  	mov	al,[es:di]	;Get the deleted char
 10414 00001520 3C20                            cmp	al,20h	; ' '
 10415 00001522 730F                    	jnb	short OLDBAK	;Was a normal char
 10416 00001524 3C09                            cmp	al,c_HT ; 9
 10417 00001526 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10418                                  ;; 9/27/86 fix for ctrl-U backspace
 10419 00001528 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10420 0000152A 7407                    	JZ	short OLDBAK
 10421 0000152C 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10422 0000152E 7403                    	JZ	short OLDBAK
 10423                                  ;; 9/27/86 fix for ctrl-U backspace
 10424 00001530 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10425                                  OLDBAK:
 10426 00001533 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10427 00001539 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10428 0000153B 08FF                    	or	bh,bh
 10429 0000153D 74B3                            jz	short OLDBAK_RETN 
 10430                                  				;Not advanced in template, stay where we are
 10431 0000153F FECF                    	dec	bh		;Go back in template
 10432 00001541 4E                              dec	si
 10433 00001542 C3                      	retn
 10434                                  BAKTAB:
 10435 00001543 57                              push	di
 10436 00001544 4F                              dec	di		;Back up one char
 10437 00001545 FD                              std			;Go backward
 10438 00001546 88F1                            mov	cl,dh		;Number of chars currently in line
 10439 00001548 B020                            mov	al,20h	; ' '
 10440 0000154A 53                              push	bx
 10441 0000154B B307                            mov	bl,7		;Max
 10442 0000154D E30E                            jcxz	FIGTAB		;At start, do nothing
 10443                                  FNDPOS:
 10444 0000154F AE                              scasb			;Look back
 10445 00001550 7609                    	jbe	short CHKCNT
 10446 00001552 26807D0109              	cmp	byte [es:di+1],9
 10447 00001557 7409                    	jz	short HAVTAB	;Found a tab
 10448 00001559 FECB                    	dec	bl		;Back one char if non tab control char
 10449                                  CHKCNT:
 10450 0000155B E2F2                            loop	FNDPOS
 10451                                  FIGTAB:		
 10452 0000155D 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10453                                  HAVTAB:
 10454 00001562 28F3                    	sub	bl,dh
 10455 00001564 00D9                    	add	cl,bl
 10456 00001566 80E107                  	and	cl,7		;CX has correct number to erase
 10457 00001569 FC                      	cld			;Back to normal
 10458 0000156A 5B                      	pop	bx
 10459 0000156B 5F                      	pop	di
 10460 0000156C 74C5                    	jz	short OLDBAK	;Nothing to erase
 10461                                  TABBAK:
 10462 0000156E E80700                  	call	BACKMES
 10463 00001571 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10464 00001573 EBBE                    	jmp	short OLDBAK
 10465                                  
 10466                                  BACKUP:
 10467 00001575 FECE                            dec	dh		;Back up in line
 10468 00001577 4F                              dec	di
 10469                                  BACKMES:
 10470 00001578 B008                            mov	al,c_BS ; 8	;Backspace
 10471 0000157A E86601                          call	OUTT
 10472 0000157D B020                            mov	al,20h ; ' '	;Erase
 10473 0000157F E86101                          call	OUTT
 10474 00001582 B008                            mov	al,c_BS ; 8	;Backspace
 10475 00001584 E95C01                  	jmp	OUTT		;Done
 10476                                  
 10477                                  	; 15/01/2024
 10478                                  ;User really wants an ESC character in his line
 10479                                  ;TWOESC:	
 10480                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10481                                  ;	jmp	SAVCH
 10482                                  
 10483                                  ;Copy the rest of the template
 10484                                  COPYLIN:
 10485 00001587 88D9                            mov	cl,bl		;Total size of template
 10486 00001589 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10487 0000158B EB07                            jmp	short COPYEACH
 10488                                  
 10489                                  COPYSTR:
 10490 0000158D E83400                  	call	FINDOLD         ;Find the char
 10491 00001590 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10492                                  
 10493                                  ;Copy one char from template to line
 10494                                  COPYONE:
 10495 00001592 B101                            mov	cl,1
 10496                                  ;Copy CX chars from template to line
 10497                                  COPYEACH:
 10498 00001594 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10499 0000159A 38D6                    	cmp	dh,dl
 10500 0000159C 740F                            jz	short GETCH2		;At end of line, can't do anything
 10501 0000159E 38DF                            cmp	bh,bl
 10502 000015A0 740B                            jz	short GETCH2		;At end of template, can't do anything
 10503 000015A2 AC                              lodsb
 10504 000015A3 AA                              stosb
 10505 000015A4 E8D001                  	call	BUFOUT
 10506 000015A7 FEC7                            inc	bh			;Ahead in template
 10507 000015A9 FEC6                            inc	dh			;Ahead in line
 10508 000015AB E2E7                            loop	COPYEACH
 10509                                  GETCH2:
 10510 000015AD E9E3FE                          jmp	GETCH
 10511                                  
 10512                                  ;Skip one char in template
 10513                                  SKIPONE:
 10514 000015B0 38DF                    	cmp	bh,bl
 10515 000015B2 74F9                    	jz	short GETCH2		;At end of template
 10516 000015B4 FEC7                    	inc	bh			;Ahead in template
 10517 000015B6 46                      	inc	si
 10518 000015B7 E9D9FE                  	jmp	GETCH
 10519                                  
 10520                                  SKIPSTR:
 10521 000015BA E80700                  	call	FINDOLD                 ;Find out how far to go
 10522 000015BD 01CE                            add	si,cx			;Go there
 10523 000015BF 00CF                            add	bh,cl
 10524 000015C1 E9CFFE                          jmp	GETCH
 10525                                  
 10526                                  ;Get the next user char, and look ahead in template for a match
 10527                                  ;CX indicates how many chars to skip to get there on output
 10528                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10529                                  ;       address is popped off and a jump to GETCH is taken.
 10530                                  ;       Make sure nothing extra on stack when this routine
 10531                                  ;       is called!!! (no PUSHes before calling it).
 10532                                  
 10533                                  FINDOLD:
 10534 000015C4 E82BFE                          call	_$STD_CON_INPUT_NO_ECHO
 10535                                  
 10536                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10537                                  
 10538                                  	;CMP	AL,[SS:ESCCHAR]	
 10539                                  	;JNZ	SHORT FINDSETUP
 10540                                  
 10541                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10542                                  
 10543                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10544                                  
 10545 000015C7 2E3A06[6E0A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10546 000015CC 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10547                                  
 10548 000015CE E821FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10549 000015D1 EB1D                            JMP	SHORT NOTFND		; go try again
 10550                                  FINDSETUP:
 10551 000015D3 88D9                    	mov	cl,bl
 10552 000015D5 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10553 000015D7 7417                    	jz	short NOTFND	;At end of template
 10554 000015D9 49                              dec	cx		;Cannot point past end, limit search
 10555 000015DA 7414                            jz	short NOTFND	;If only one char in template, forget it
 10556 000015DC 06                      	push	es
 10557 000015DD 1E                      	push	ds
 10558 000015DE 07                      	pop	es
 10559 000015DF 57                      	push	di
 10560 000015E0 89F7                    	mov	di,si		;Template to ES:DI
 10561 000015E2 47                      	inc	di
 10562 000015E3 F2AE                    	repne	scasb		;Look
 10563 000015E5 5F                      	pop	di
 10564 000015E6 07                      	pop	es
 10565 000015E7 7507                    	jnz	short NOTFND	;Didn't find the char
 10566 000015E9 F6D1                            not	cl		;Turn how far to go into how far we went
 10567 000015EB 00D9                            add	cl,bl		;Add size of template
 10568 000015ED 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10569                                  FINDOLD_RETN:
 10570 000015EF C3                      	retn
 10571                                  
 10572                                  NOTFND:
 10573 000015F0 5D                              pop	bp              ;Chuck return address
 10574 000015F1 E99FFE                          jmp	GETCH
 10575                                  
 10576                                  REEDIT:
 10577 000015F4 B040                    	mov	al,'@'		;Output re-edit character
 10578 000015F6 E8EA00                  	call	OUTT
 10579 000015F9 5F                      	pop	di
 10580 000015FA 57                      	push	di
 10581 000015FB 06                      	push	es
 10582 000015FC 1E                      	push	ds
 10583 000015FD E8E7FE                  	call	COPYNEW		;Copy current line into template
 10584 00001600 1F                      	pop	ds
 10585 00001601 07                      	pop	es
 10586 00001602 5E                      	pop	si
 10587 00001603 88F3                    	mov	bl,dh		;Size of line is new size template
 10588 00001605 E9F6FE                  	jmp	PUTNEW		;Start over again
 10589                                  
 10590                                  EXITINS:
 10591                                  ENTERINS:
 10592 00001608 36F616[7905]            	not	byte [SS:INSMODE]
 10593 0000160D E983FE                  	jmp	GETCH
 10594                                  
 10595                                  ;Put a real live ^Z in the buffer (embedded)
 10596                                  CTRLZ:
 10597 00001610 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10598 00001612 E9A3FE                          jmp	SAVCH
 10599                                  
 10600                                  ;Output a CRLF
 10601                                  CRLF:
 10602 00001615 B00D                    	mov	al,c_CR ; 0Dh 
 10603 00001617 E8C900                  	call	OUTT
 10604 0000161A B00A                    	mov	al,c_LF ; 0Ah
 10605 0000161C E9C400                  	jmp	OUTT
 10606                                  
 10607                                  ;
 10608                                  ;----------------------------------------------------------------------------
 10609                                  ;
 10610                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10611                                  ;
 10612                                  ;	Input or output raw character from console, no echo
 10613                                  ;
 10614                                  ;	ENTRY	DL = -1 if input
 10615                                  ;		   =  output character if output
 10616                                  ;	EXIT	(AL) = input character if input
 10617                                  ;	USES	all
 10618                                  ;
 10619                                  ;----------------------------------------------------------------------------
 10620                                  ; 20/07/2018 - Retro DOS v3.0
 10621                                  
 10622                                  ; 04/05/2019 - Retro DOS v4.0
 10623                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10624                                  
 10625                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10626                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10627                                  
 10628                                  _$RAW_CON_IO:			; System call 6
 10629 0000161F 88D0                    	MOV	AL,DL
 10630 00001621 3CFF                    	CMP	AL,-1
 10631 00001623 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10632                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10633                                  	;jz	short rci1
 10634                                  	;jmp	short RAWOUT
 10635                                  	; 16/12/202
 10636                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10637                                  	;nop
 10638                                  rci1:
 10639                                  			; Get pointer to register save area
 10640 00001625 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10641 0000162A 31DB                    	XOR	BX,BX
 10642                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10643 0000162C E88F20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10644                                          ;JC	SHORT RET17
 10645 0000162F 72BE                            jc	short FINDOLD_RETN
 10646 00001631 B401                    	MOV	AH,1
 10647 00001633 E8E82E                  	CALL	IOFUNC
 10648 00001636 750B                    	JNZ	SHORT RESFLG
 10649 00001638 E8AA3B                  	CALL	SPOOLINT
 10650                                  	;OR	BYTE [ES:DI+16H],40H
 10651 0000163B 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10652 00001640 30C0                    	XOR	AL,AL
 10653                                  RET17:
 10654 00001642 C3                      	RETN
 10655                                  
 10656                                  RESFLG:
 10657                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10658 00001643 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10659                                  				; Reset user's zero flag
 10660                                  ;RILP:
 10661                                  rci0:
 10662 00001648 E89A3B                  	CALL	SPOOLINT
 10663                                  ;
 10664                                  ;----------------------------------------------------------------------------
 10665                                  ;
 10666                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10667                                  ;
 10668                                  ;	Input raw character from console, no echo
 10669                                  ;
 10670                                  ;	ENTRY	none
 10671                                  ;	EXIT	(al) = character
 10672                                  ;	USES	all
 10673                                  ;
 10674                                  ;----------------------------------------------------------------------------
 10675                                  ;
 10676                                  
 10677                                  ;rci0:	invoke	SPOOLINT
 10678                                  
 10679                                  	;entry	$RAW_CON_INPUT
 10680                                  
 10681                                  	; 04/05/2019 - Retro DOS v4.0
 10682                                  
 10683                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10684                                  
 10685                                  _$RAW_CON_INPUT:		; System call 7
 10686 0000164B 53                      	push	bx
 10687 0000164C 31DB                    	XOR	BX,BX
 10688                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10689 0000164E E86D20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10690 00001651 5B                      	pop	bx
 10691 00001652 72EE                    	JC	SHORT RET17
 10692 00001654 B401                    	MOV	AH,1
 10693 00001656 E8C52E                  	CALL	IOFUNC
 10694                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10695                                  	;XOR	AH,AH
 10696                                          ;CALL	IOFUNC
 10697                                          ;RETN
 10698 00001659 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10699 0000165B B484                    	MOV	AH,84h
 10700 0000165D CD2A                    	INT	int_IBM  ; int 2Ah
 10701 0000165F EBE7                    	JMP	short rci0
 10702                                  rci5:	
 10703 00001661 30E4                    	XOR	AH,AH
 10704                                  	;CALL	IOFUNC
 10705                                  	;RETN
 10706                                  	; 18/12/2022
 10707 00001663 E9B82E                  	jmp	IOFUNC
 10708                                  
 10709                                  ;       Output the character in AL to stdout
 10710                                  ;
 10711                                  	;entry	RAWOUT
 10712                                  RAWOUT:
 10713 00001666 53                      	PUSH    BX
 10714 00001667 BB0100                  	MOV     BX,1
 10715                                  
 10716                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10717 0000166A E85120                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10718 0000166D 721B                    	JC	SHORT RAWRET1
 10719                                  
 10720                                  	;
 10721                                  	; MSDOS 2.11
 10722                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10723                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10724                                          ;PUSH	DS
 10725                                          ;PUSH	SI
 10726                                          ;LDS	SI,[SI+19H]		; output to special?
 10727                                  	;TEST	BYTE [SI+4],ISSPEC
 10728                                  	;POP	SI
 10729                                  	;
 10730                                          
 10731                                  	; MSDOS 3.3 & MSDOS 6.0
 10732                                  	;mov	bx,[si+5]
 10733 0000166F 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10734                                   ;
 10735                                   ; If we are a network handle OR if we are not a local device then go do the
 10736                                   ; output the hard way.
 10737                                   ;	
 10738                                  	;and	bx,8080h
 10739 00001672 81E38080                	AND	BX,sf_isnet+devid_device
 10740                                  	;cmp	bx,80h
 10741 00001676 81FB8000                	CMP	BX,devid_device
 10742 0000167A 7510                    	jnz     short RAWNORM
 10743 0000167C 1E                      	push    ds
 10744                                  	;lds	bx,[si+7]
 10745 0000167D C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10746                                  	;test	byte [bx+4],10h
 10747 00001680 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10748                                  	;
 10749                                  
 10750 00001684 1F                      	POP	DS
 10751 00001685 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10752                                  
 10753 00001687 CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10754                                  
 10755                                  	;JMP	SHORT RAWRET
 10756                                  ;RAWNORM:
 10757                                  ;	CALL    RAWOUT3
 10758                                  RAWRET: 
 10759 00001689 F8                      	CLC
 10760                                  RAWRET1:
 10761 0000168A 5B                      	POP     BX
 10762                                  RAWRET2:
 10763 0000168B C3                      	RETN
 10764                                  RAWNORM:
 10765 0000168C E80700                  	CALL    RAWOUT3
 10766 0000168F EBF8                    	jmp	short RAWRET
 10767                                  
 10768                                  ;	Output the character in AL to handle in BX
 10769                                  ;
 10770                                  ;	entry	RAWOUT2
 10771                                  
 10772                                  RAWOUT2:
 10773                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10774                                  	;JC	SHORT RET18
 10775 00001691 E82A20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10776 00001694 72F5                    	JC	SHORT RAWRET2
 10777                                  RAWOUT3:
 10778 00001696 50                      	PUSH	AX
 10779 00001697 EB0C                    	JMP	SHORT RAWOSTRT
 10780                                  ROLP:
 10781 00001699 E8493B                  	CALL	SPOOLINT
 10782                                  
 10783                                  	; 01/05/2019 - Retro DOS v4.0
 10784                                  
 10785                                  	; MSDOS 6.0
 10786                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10787                                  	; 17/12/2022
 10788 0000169C 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 10789                                  	;or	word [ss:DOS34_FLAG],200h
 10790                                  				;AN002; set control break
 10791                                  	;invoke DSKSTATCHK
 10792 000016A2 E8BC3A                  	call	DSKSTATCHK	;AN002; check control break
 10793                                  RAWOSTRT:
 10794 000016A5 B403                    	MOV	AH,3
 10795 000016A7 E8742E                  	CALL	IOFUNC
 10796 000016AA 74ED                    	JZ	SHORT ROLP
 10797                                  
 10798                                  	; MSDOS 6.0
 10799                                  ;SR;
 10800                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10801                                  ;the user failed. We do not send a char if this happens. We however return
 10802                                  ;to the caller with carry clear because this DOS call does not return any
 10803                                  ;status. 
 10804                                  ;
 10805 000016AC 40                      	inc	ax		;fail on I24 if ax = -1
 10806 000016AD 58                      	POP	AX
 10807 000016AE 7405                    	jz	short nosend	;yes, do not send char
 10808 000016B0 B402                    	MOV	AH,2
 10809 000016B2 E8692E                  	call	IOFUNC
 10810                                  nosend:
 10811 000016B5 F8                      	CLC			; Clear carry indicating successful
 10812 000016B6 C3                      	retn
 10813                                  
 10814                                  	; MSDOS 3.3 & MSDOS 2.11
 10815                                  	;POP	AX
 10816                                  	;MOV	AH,2
 10817                                          ;CALL	IOFUNC
 10818                                  	;CLC			; Clear carry indicating successful
 10819                                  ;RET18:    
 10820                                  	;RETN
 10821                                  
 10822                                  ;;10/08/2018
 10823                                  ; 20/07/2018 - Retro DOS v3.0
 10824                                  ; ---------------------------------------------------------------------------
 10825                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10826                                  ; ---------------------------------------------------------------------------
 10827                                  
 10828                                  ; This routine is called at DOS init
 10829                                  
 10830                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10831                                  ;;OUTMES:
 10832                                  ;;	;LODS	CS:BYTE PTR [SI]
 10833                                  ;;	CS	LODSB
 10834                                  ;;	CMP     AL,"$" ; 24h
 10835                                  ;;	JZ	SHORT RET18
 10836                                  ;;	CALL	OUTT
 10837                                  ;;	JMP     SHORT OUTMES
 10838                                  
 10839                                  ; ---------------------------------------------------------------------------
 10840                                  
 10841                                  ; 20/07/2018 - Retro DOS v3.0
 10842                                  
 10843                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10844                                  
 10845                                  ;
 10846                                  ;----------------------------------------------------------------------------
 10847                                  ;
 10848                                  ; Inputs:
 10849                                  ;	AX=0 save the DEVCALL request packet
 10850                                  ;	  =1 restore the DEVCALL request packet
 10851                                  ; Function:
 10852                                  ;	save or restore the DEVCALL packet
 10853                                  ; Returns:
 10854                                  ;	none
 10855                                  ;
 10856                                  ;----------------------------------------------------------------------------
 10857                                  ;
 10858                                  
 10859                                  ; 04/05/2019 - Retro DOS v4.0
 10860                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 10861                                  
 10862                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10863                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 10864                                  
 10865                                  ; 12/05/2019
 10866                                  
 10867                                  Save_Restore_Packet:
 10868 000016B7 1E                      	PUSH	DS
 10869 000016B8 06                      	PUSH	ES
 10870 000016B9 56                      	PUSH	SI
 10871 000016BA 57                      	PUSH	DI
 10872                                  
 10873                                  	; 16/12/2022
 10874                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10875                                  	; 09/09/2018
 10876 000016BB BF[6C0D]                	mov	di,FAKE_STACK_2F 
 10877 000016BE BE[5A03]                	mov	si,DEVCALL
 10878                                  	;
 10879 000016C1 83F800                  	CMP	AX,0		; save packet
 10880 000016C4 7402                    	JZ	short save_packet ; 16/12/2022
 10881                                  	;je	short set_seg
 10882                                  
 10883                                  	; MSDOS 6.0
 10884                                  restore_packet:
 10885                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 10886                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 10887                                  	; MSDOS 3.3
 10888                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10889                                  	;mov	di,DEVCALL  ; 09/09/2018
 10890                                  	;
 10891                                  	;JMP	short set_seg
 10892                                  
 10893                                  	; 16/12/2022	
 10894                                  	; 09/09/2018
 10895 000016C6 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10896                                  
 10897                                  ; 16/12/2022
 10898                                  %if 0
 10899                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10900                                  	cmp	ax,0		; save packet
 10901                                  	jz	short save_packet
 10902                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 10903                                  	mov	di,DEVCALL 
 10904                                  	jmp	short set_seg
 10905                                  
 10906                                  	; MSDOS 6.0
 10907                                  save_packet:
 10908                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 10909                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 10910                                  	; 09/09/2018
 10911                                  	; MSDOS 3.3
 10912                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10913                                  	;mov	si,DEVCALL ; 09/09/2018
 10914                                  
 10915                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10916                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10917                                  	mov	si,DEVCALL
 10918                                  %endif
 10919                                  
 10920                                  ; 16/12/2022
 10921                                  save_packet:
 10922                                  ;set_seg:
 10923                                  	; MSDOS 3.3
 10924                                  	;mov	ax,cs
 10925                                  
 10926                                  	; MSDOS 6.0
 10927 000016C8 8CD0                    	MOV	AX,SS		; set DS,ES to DOSDATA	
 10928                                  
 10929 000016CA 8ED8                    	MOV	DS,AX
 10930 000016CC 8EC0                    	MOV	ES,AX
 10931 000016CE B90B00                  	MOV	CX,11		; 11 words to move
 10932 000016D1 F3A5                    	REP	MOVSW
 10933                                  
 10934 000016D3 5F                      	POP	DI
 10935 000016D4 5E                      	POP	SI
 10936 000016D5 07                      	POP	ES
 10937 000016D6 1F                      	POP	DS
 10938 000016D7 C3                      	retn
 10939                                  
 10940                                  ;============================================================================
 10941                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10942                                  ;============================================================================
 10943                                  ; 20/07/2018 - Retro DOS v3.0
 10944                                  ; 01/05/2019 - Retro DOS v4.0
 10945                                  
 10946                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10947                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10948                                  ;hkn;	not valid. 
 10949                                  
 10950                                  ;
 10951                                  ;----------------------------------------------------------------------------
 10952                                  ;
 10953                                  ;**	$STD_CON_INPUT - System Call 1
 10954                                  ;
 10955                                  ;	Input character from console, echo
 10956                                  ;
 10957                                  ;	ENTRY	none
 10958                                  ;	EXIT	(al) = character
 10959                                  ;	USES	ALL
 10960                                  ;
 10961                                  ;----------------------------------------------------------------------------
 10962                                  ;
 10963                                  
 10964                                  _$STD_CON_INPUT:	;System call 1
 10965                                  	
 10966 000016D8 E817FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10967 000016DB 50                      	PUSH	AX
 10968 000016DC E80400                  	CALL	OUTT
 10969 000016DF 58                      	POP	AX
 10970                                  CON_INPUT_RETN:	
 10971 000016E0 C3                      	RETN
 10972                                  
 10973                                  ;
 10974                                  ;----------------------------------------------------------------------------
 10975                                  ;
 10976                                  ;**	$STD_CON_OUTPUT - System Call 2
 10977                                  ;
 10978                                  ;	Output character to console
 10979                                  ;
 10980                                  ;	ENTRY	(dl) = character
 10981                                  ;	EXIT	none
 10982                                  ;	USES	all
 10983                                  ;
 10984                                  ;----------------------------------------------------------------------------
 10985                                  ;
 10986                                  
 10987                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 10988                                  
 10989                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10990                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 10991                                  
 10992                                  _$STD_CON_OUTPUT:	;System call 2
 10993                                  
 10994 000016E1 88D0                    	MOV	AL,DL
 10995                                  OUTT:
 10996 000016E3 3C20                    	CMP	AL,20H ; " "
 10997 000016E5 725C                    	JB	SHORT CTRLOUT
 10998 000016E7 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10999 000016E9 7405                    	JZ	SHORT OUTCH
 11000                                  OUTCHA:	
 11001                                  	;INC	BYTE PTR [CARPOS]
 11002 000016EB 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11003                                  OUTCH:
 11004 000016F0 1E                      	PUSH	DS
 11005 000016F1 56                      	PUSH	SI
 11006                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11007                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11008 000016F2 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11009                                  	;AND	BYTE [SS:CHARCO],00111111B
 11010                                  	; 01/05/2019 - Retro DOS v4.0
 11011 000016F7 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11012 000016FD 7505                    	JNZ	SHORT OUTSKIP
 11013                                  
 11014 000016FF 50                      	PUSH	AX
 11015 00001700 E8103B                  	CALL	STATCHK
 11016 00001703 58                      	POP	AX
 11017                                  OUTSKIP:
 11018 00001704 E85FFF                  	CALL	RAWOUT				;output the character
 11019                                  
 11020 00001707 5E                      	POP	SI
 11021 00001708 1F                      	POP	DS
 11022                                  
 11023                                  	;TEST	BYTE PTR [PFLAG],-1
 11024                                  	;retz
 11025 00001709 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11026 0000170F 74CF                    	JZ	SHORT CON_INPUT_RETN
 11027                                  
 11028 00001711 53                      	PUSH	BX
 11029 00001712 1E                      	PUSH	DS
 11030 00001713 56                      	PUSH	SI
 11031 00001714 BB0100                  	MOV	BX,1
 11032                                  	; 20/07/2018 - Retro DOS v3.0
 11033                                  	; MSDOS 3.3
 11034                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11035 00001717 E8A41F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11036                                  					;hkn; to sft entry
 11037 0000171A 7224                    	JC	SHORT TRIPOPJ
 11038                                  
 11039                                  	; 01/05/2019 - Retro DOS v4.0
 11040                                  
 11041                                  	;mov	bx,[si+5]
 11042 0000171C 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11043                                  	;test	bx,8000h
 11044                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11045 0000171F F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11046 00001722 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11047                                  	;;test	bx,80h
 11048                                  	;TEST	BX,devid_device 		; output to file?
 11049 00001724 F6C380                  	test	bl,devid_device ; 80h
 11050 00001727 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11051                                  	; 14/03/2018
 11052                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11053                                  	;jc	short TRIPOPJ
 11054                                  	; MSDOS 2.11
 11055                                  	;test	byte [SI+18H], 80h
 11056                                  	;jz	short TRIPOPJ
 11057 00001729 BB0400                  	MOV	BX,4
 11058 0000172C E88F1F                  	CALL	GET_IO_SFT
 11059 0000172F 720F                    	JC	SHORT TRIPOPJ
 11060                                  	;;test	word [si+5], 800h
 11061                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11062                                  	;test	byte [si+6],8 ; 08/11/2022
 11063 00001731 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11064                                  						; StdPrn redirected?
 11065                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11066                                  	;jz	LISSTRT2 ; 10/08/2018 
 11067                                  	; 16/12/2022
 11068 00001735 7503                    	jnz	short outch1
 11069 00001737 E98700                  	jmp	LISSTRT2
 11070                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11071                                  	;jz	short LISSTRT2J
 11072                                  outch1:
 11073                                  	;MOV	BYTE [PFLAG],0
 11074 0000173A 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11075                                  	; MSDOS 2.11
 11076                                  	;mov	bx,4
 11077                                  	;jmp	short LISSTRT2
 11078                                  	
 11079                                  TRIPOPJ:
 11080                                  	; 20/07/2018
 11081 00001740 E98100                  	JMP	TRIPOP
 11082                                  
 11083                                  	; 16/12/2022
 11084                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11085                                  ;LISSTRT2J:
 11086                                  ;	JMP	LISSTRT2
 11087                                  
 11088                                  CTRLOUT:
 11089 00001743 3C0D                    	CMP	AL,c_CR ; 0Dh
 11090 00001745 7420                    	JZ	SHORT ZERPOS
 11091 00001747 3C08                    	CMP	AL,c_BS ; 8
 11092 00001749 7424                    	JZ	SHORT BACKPOS
 11093 0000174B 3C09                    	CMP	AL,c_HT ; 9
 11094 0000174D 75A1                    	JNZ	SHORT OUTCH
 11095                                  	;MOV	AL,[CARPOS]
 11096 0000174F 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11097 00001753 0CF8                    	OR	AL,0F8H
 11098 00001755 F6D8                    	NEG	AL
 11099                                  TAB:
 11100 00001757 51                      	PUSH	CX
 11101 00001758 88C1                    	MOV	CL,AL
 11102 0000175A B500                    	MOV	CH,0
 11103 0000175C E307                    	JCXZ	POPTAB
 11104                                  TABLP:
 11105 0000175E B020                    	MOV	AL," "
 11106 00001760 E880FF                  	CALL	OUTT
 11107 00001763 E2F9                    	LOOP	TABLP
 11108                                  POPTAB:
 11109 00001765 59                      	POP	CX
 11110                                  
 11111 00001766 C3                      	RETN
 11112                                  
 11113                                  ZERPOS:
 11114                                  	;MOV	BYTE PTR [CARPOS],0
 11115 00001767 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11116                                  	; 10/08/2018
 11117 0000176D EB81                    	JMP	short OUTCH ; 04/05/2019
 11118                                  	
 11119                                  	; 18/12/2022
 11120                                  ;OUTJ:	
 11121                                  	;JMP	OUTT
 11122                                  
 11123                                  BACKPOS:
 11124                                  	;DEC	BYTE PTR [CARPOS]
 11125 0000176F 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11126 00001774 E979FF                  	JMP	OUTCH
 11127                                  
 11128                                  BUFOUT:
 11129 00001777 3C20                    	CMP	AL," "
 11130 00001779 7315                    	JAE	SHORT OUTJ		;Normal char
 11131 0000177B 3C09                    	CMP	AL,9
 11132 0000177D 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11133                                  	;DOS 3.3  7/14/86
 11134 0000177F 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11135 00001781 740D                    	JZ	short CTRLU
 11136 00001783 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11137 00001785 7409                    	JZ	short CTRLU
 11138                                  NOT_CTRLU:
 11139                                  	;DOS 3.3  7/14/86
 11140 00001787 50                      	PUSH	AX
 11141 00001788 B05E                    	MOV	AL,"^"
 11142 0000178A E856FF                  	CALL	OUTT		;Print '^' before control chars
 11143 0000178D 58                      	POP	AX
 11144 0000178E 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11145                                  CTRLU:
 11146                                  	;CALL	OUTT
 11147                                  	; 18/12/2022
 11148                                  OUTJ:
 11149 00001790 E950FF                  	jmp	OUTT
 11150                                  ;BUFOUT_RETN:
 11151                                  	;RETN
 11152                                  
 11153                                  ;
 11154                                  ;----------------------------------------------------------------------------
 11155                                  ;
 11156                                  ;**	$STD_AUX_INPUT - System Call 3
 11157                                  ;
 11158                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11159                                  ;
 11160                                  ;	ENTRY	none
 11161                                  ;	EXIT	(al) = character
 11162                                  ;	USES	all
 11163                                  ;
 11164                                  ;----------------------------------------------------------------------------
 11165                                  ;
 11166                                  
 11167                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11168                                  
 11169                                  _$STD_AUX_INPUT:	;System call 3
 11170                                  
 11171 00001793 E87D3A                  	CALL	STATCHK
 11172 00001796 BB0300                  	MOV	BX,3
 11173 00001799 E8221F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11174                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11175                                  	;retc
 11176                                  	; 16/12/2022
 11177                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11178                                  	;JC	SHORT BUFOUT_RETN
 11179                                  	;JMP	SHORT TAISTRT
 11180                                  	; 07/12/2022
 11181 0000179C 7304                    	jnc	SHORT TAISTRT
 11182 0000179E C3                      	retn	
 11183                                  
 11184                                  AUXILP:
 11185 0000179F E8433A                  	CALL	SPOOLINT
 11186                                  TAISTRT:
 11187 000017A2 B401                    	MOV	AH,1
 11188 000017A4 E8772D                  	CALL	IOFUNC
 11189 000017A7 74F6                    	JZ	SHORT AUXILP
 11190 000017A9 30E4                    	XOR	AH,AH
 11191                                  	; 16/12/2022
 11192                                  	;CALL	IOFUNC
 11193                                  	;RETN
 11194                                  	; 07/12/2022
 11195 000017AB E9702D                  	jmp	IOFUNC
 11196                                  
 11197                                  ;
 11198                                  ;----------------------------------------------------------------------------
 11199                                  ;
 11200                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11201                                  ;
 11202                                  ;	ENTRY	(dl) = character
 11203                                  ;	EXIT	none
 11204                                  ;	USES	all
 11205                                  ;
 11206                                  ;----------------------------------------------------------------------------
 11207                                  ;
 11208                                  
 11209                                  _$STD_AUX_OUTPUT:	;System call 4
 11210                                  
 11211 000017AE 53                      	PUSH	BX
 11212 000017AF BB0300                  	MOV	BX,3
 11213 000017B2 EB04                    	JMP	SHORT SENDOUT
 11214                                  
 11215                                  ;
 11216                                  ;----------------------------------------------------------------------------
 11217                                  ;
 11218                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11219                                  ;
 11220                                  ;	ENTRY	(dl) = character
 11221                                  ;	EXIT	none
 11222                                  ;	USES	all
 11223                                  ;
 11224                                  ;----------------------------------------------------------------------------
 11225                                  ;
 11226                                  
 11227                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11228                                  
 11229 000017B4 53                      	PUSH	BX
 11230 000017B5 BB0400                  	MOV	BX,4
 11231                                  
 11232                                  SENDOUT:
 11233 000017B8 88D0                    	MOV	AL,DL
 11234 000017BA 50                      	PUSH	AX
 11235 000017BB E8553A                  	CALL	STATCHK
 11236 000017BE 58                      	POP	AX
 11237 000017BF 1E                      	PUSH	DS
 11238 000017C0 56                      	PUSH	SI
 11239                                  LISSTRT2:
 11240 000017C1 E8CDFE                  	CALL	RAWOUT2
 11241                                  TRIPOP:
 11242 000017C4 5E                      	POP	SI
 11243 000017C5 1F                      	POP	DS
 11244 000017C6 5B                      	POP	BX
 11245                                  SCIS_RETN:	; 20/07/2018
 11246 000017C7 C3                      	RETN
 11247                                  ;
 11248                                  ;----------------------------------------------------------------------------
 11249                                  ;
 11250                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11251                                  ;
 11252                                  ;	Check console input status
 11253                                  ;
 11254                                  ;	ENTRY	none
 11255                                  ;	EXIT	AL = -1 character available, = 0 no character
 11256                                  ;	USES	all
 11257                                  ;
 11258                                  ;----------------------------------------------------------------------------
 11259                                  ;
 11260                                  
 11261                                  _$STD_CON_INPUT_STATUS:		 ;System call 11
 11262                                  
 11263 000017C8 E8483A                  	CALL	STATCHK
 11264 000017CB B000                    	MOV	AL,0			; no xor!!
 11265                                  	;retz
 11266 000017CD 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11267 000017CF 0CFF                    	OR	AL,-1
 11268                                  ;SCIS_RETN:
 11269 000017D1 C3                      	RETN
 11270                                  
 11271                                  ;
 11272                                  ;----------------------------------------------------------------------------
 11273                                  ;
 11274                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11275                                  ;
 11276                                  ;	Flush console input buffer and perform call in AL
 11277                                  ;
 11278                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11279                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11280                                  ;		return arguments for the fcn supplied in (AL)
 11281                                  ;	USES	all
 11282                                  ;
 11283                                  ;----------------------------------------------------------------------------
 11284                                  ;
 11285                                  
 11286                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11287                                  
 11288 000017D2 50                      	PUSH	AX
 11289 000017D3 52                      	PUSH	DX
 11290 000017D4 31DB                    	XOR	BX,BX
 11291 000017D6 E8E51E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11292                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11293 000017D9 7205                    	JC	SHORT BADJFNCON
 11294 000017DB B404                    	MOV	AH,4
 11295 000017DD E83E2D                  	CALL	IOFUNC
 11296                                  
 11297                                  BADJFNCON:
 11298 000017E0 5A                      	POP	DX
 11299 000017E1 58                      	POP	AX
 11300 000017E2 88C4                    	MOV	AH,AL
 11301 000017E4 3C01                    	CMP	AL,1
 11302 000017E6 7413                    	JZ	SHORT REDISPJ
 11303 000017E8 3C06                    	CMP	AL,6
 11304 000017EA 740F                    	JZ	SHORT REDISPJ
 11305 000017EC 3C07                    	CMP	AL,7
 11306 000017EE 740B                    	JZ	SHORT REDISPJ
 11307 000017F0 3C08                    	CMP	AL,8
 11308 000017F2 7407                    	JZ	SHORT REDISPJ
 11309 000017F4 3C0A                    	CMP	AL,10
 11310 000017F6 7403                    	JZ	SHORT REDISPJ
 11311 000017F8 B000                    	MOV	AL,0
 11312 000017FA C3                      	RETN
 11313                                  
 11314                                  REDISPJ:
 11315 000017FB FA                      	CLI
 11316                                  	;transfer REDISP
 11317 000017FC E9C8EB                  	JMP	REDISP
 11318                                  
 11319                                  ;============================================================================
 11320                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11321                                  ;============================================================================
 11322                                  ; 20/07/2018 - Retro DOS v3.0
 11323                                  ; 17/05/2019 - Retro DOS v4.0
 11324                                  
 11325                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11326                                  ;
 11327                                  ;	$GET_FCB_POSITION
 11328                                  ;	$FCB_DELETE
 11329                                  ;	$GET_FCB_FILE_LENGTH
 11330                                  ;	$FCB_CLOSE
 11331                                  ;	$FCB_RENAME
 11332                                  ;	SaveFCBInfo
 11333                                  ;	ResetLRU
 11334                                  ;	SetOpenAge
 11335                                  ;	LRUFCB
 11336                                  ;	FCBRegen
 11337                                  ;	BlastSFT
 11338                                  ;	CheckFCB
 11339                                  ;	SFTFromFCB
 11340                                  ;	FCBHardErr
 11341                                  ;
 11342                                  ;	Revision history:
 11343                                  ;
 11344                                  ;		Created: ARR 4 April 1983"
 11345                                  ;			 MZ  6 June  1983 completion of functions
 11346                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11347                                  ;					  times.  Change so successive closes work by
 11348                                  ;					  always returning OK.	Also, detect I/O to
 11349                                  ;					  already closed FCB and return EOF.
 11350                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11351                                  ;					  out of sft into FCB for reconnection
 11352                                  ;
 11353                                  ;		A000	 version 4.00  Jan. 1988
 11354                                  
 11355                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11356                                  ;----------------------------------------------------------------------------
 11357                                  ;
 11358                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11359                                  ;	extent and next record field and set the random record field to point
 11360                                  ;	to that record
 11361                                  ;
 11362                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11363                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11364                                  ;   Registers modified: all
 11365                                  ;
 11366                                  ;----------------------------------------------------------------------------
 11367                                  ;
 11368                                  
 11369                                  _$GET_FCB_POSITION:
 11370 000017FF E8E004                  	call	GetExtended		; point to FCB
 11371 00001802 E8B004                  	call	GetExtent		; DX:AX is current record
 11372                                  	;mov	[si+21h],ax
 11373 00001805 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11374                                  	;mov	[si+23h],dl
 11375 00001808 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11376                                  	;cmp	word [si+0Eh],64
 11377 0000180B 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11378 0000180F 7303                    	JAE	short GetFCBBye
 11379                                  	;mov	[si+24h],dh
 11380 00001811 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11381                                  GoodPath:	; 16/12/2022
 11382                                  GetFCBBye:
 11383 00001814 E989EE                  	jmp	FCB_RET_OK
 11384                                  
 11385                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11386                                  ;----------------------------------------------------------------------------
 11387                                  ;
 11388                                  ;**	$FCB_Delete - Delete from FCB Template
 11389                                  ;
 11390                                  ;	given an FCB, remove all directory entries in the current
 11391                                  ;	directory that have names that match the FCB's ?  marks.
 11392                                  ;
 11393                                  ;	ENTRY	(DS:DX) = address of FCB
 11394                                  ;	EXIT	entries matching the FCB are deleted
 11395                                  ;		(al) = ff iff no entries were deleted
 11396                                  ;	USES	all
 11397                                  ;
 11398                                  ;----------------------------------------------------------------------------
 11399                                  ;
 11400                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11401                                  
 11402                                  _$FCB_DELETE:		; System call 19
 11403                                  					; OpenBuf is in DOSDATA
 11404 00001817 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11405                                  
 11406 0000181A E8AC53                  	call	TransFCB		; convert FCB to path
 11407 0000181D 7207                    	JC	short BadPath 		; signal no deletions
 11408                                  
 11409 0000181F 16                      	push	SS
 11410 00001820 1F                      	pop	DS			; SS is DOSDATA
 11411                                  
 11412 00001821 E86F0D                  	call	DOS_DELETE		; wham
 11413                                  	;JC	short BadPath
 11414                                  	; 16/12/2022
 11415 00001824 73EE                    	jnc 	short GoodPath
 11416                                  ;GoodPath:
 11417                                  ;	;jmp	FCB_RET_OK		; do a good return
 11418                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11419                                  ;	jmp	short GetFCBBye
 11420                                  
 11421                                  BadPath:
 11422                                  	; Error code is in AX
 11423                                  
 11424 00001826 E97AEE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11425                                  
 11426                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11427                                  ;----------------------------------------------------------------------------
 11428                                  ;
 11429                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11430                                  ;	file in records (rounded up if partial).
 11431                                  ;
 11432                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11433                                  ;   Outputs:	Random record field updated to reflect the number of records
 11434                                  ;   Registers modified: all
 11435                                  ;
 11436                                  ;----------------------------------------------------------------------------
 11437                                  ;
 11438                                  	; 15/01/2024
 11439                                  
 11440                                  _$GET_FCB_FILE_LENGTH:
 11441                                  
 11442 00001829 E8B604                  	call	GetExtended		; get real FCB pointer
 11443                                  					; DX points to Input FCB
 11444                                  
 11445                                  					; OpenBuf is in DOSDATA
 11446 0000182C BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11447                                  
 11448 0000182F 1E                      	push	ds			; save pointer to true FCB
 11449 00001830 56                      	push	si
 11450 00001831 E89553                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11451 00001834 5E                      	pop	si
 11452 00001835 1F                      	pop	ds
 11453 00001836 72EE                    	JC	short BadPath
 11454 00001838 1E                      	push	ds			; save pointer
 11455 00001839 56                      	push	si
 11456 0000183A 16                      	push	ss		
 11457 0000183B 1F                      	pop	ds
 11458 0000183C E85B11                  	call	GET_FILE_INFO		; grab the info
 11459 0000183F 5E                      	pop	si			; get pointer back
 11460 00001840 1F                      	pop	ds
 11461 00001841 72E3                    	JC	short BadPath 		; invalid something
 11462                                  	; 15/01/2024
 11463                                  	;MOV	DX,BX (*)		; get high order size
 11464                                  	;MOV	AX,DI (**)		; get low order size
 11465 00001843 89D8                    	mov	ax,bx ; hw of file size
 11466                                  	;
 11467                                  	;mov	bx,[si+0Eh]
 11468 00001845 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11469 00001848 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11470 0000184A 7502                    	JNZ	short GetSize 		; not empty
 11471                                  	;MOV	BX,128
 11472 0000184C B380                    	mov	bl,128	; 15/01/2024
 11473                                  GetSize:
 11474                                  	; 15/01/2024
 11475                                  	;MOV	DI,AX			; save low order word
 11476                                  	;MOV	AX,DX			; move high order for divide
 11477                                  	;xchg	ax,dx ; (*)
 11478                                  	; ax = hw of file size
 11479                                  
 11480 0000184E 31D2                    	XOR	DX,DX			; clear out high
 11481 00001850 F7F3                    	DIV	BX			; wham
 11482 00001852 50                      	PUSH	AX			; save dividend
 11483 00001853 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11484 00001855 F7F3                    	DIV	BX			; wham
 11485 00001857 89D1                    	MOV	CX,DX			; save remainder
 11486 00001859 5A                      	POP	DX			; get high order dividend
 11487 0000185A E306                    	JCXZ	LengthStore		; no roundup
 11488 0000185C 83C001                  	ADD	AX,1
 11489 0000185F 83D200                  	ADC	DX,0			; 32-bit increment
 11490                                  LengthStore:
 11491                                  	;mov	[si+21h],ax
 11492 00001862 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11493                                  	;mov	[si+23h],dl
 11494 00001865 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11495 00001868 08F6                    	OR	DH,DH
 11496 0000186A 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11497                                  	;mov	[si+24h],dh
 11498 0000186C 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11499                                  	; 16/12/2022
 11500                                  GoodRet:
 11501                                  	;jmp	FCB_RET_OK
 11502 0000186F EBA3                    	jmp	short GoodPath
 11503                                  
 11504                                  ;Break <$FCB_Close - close a file>
 11505                                  ;----------------------------------------------------------------------------
 11506                                  ;
 11507                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11508                                  ;	as the FCB may be used for further I/O
 11509                                  ;
 11510                                  ;   Inputs:	DS:DX point to FCB
 11511                                  ;   Outputs:	AL = FF if file was not found on disk
 11512                                  ;   Registers modified: all
 11513                                  ;
 11514                                  ;----------------------------------------------------------------------------
 11515                                  ;
 11516                                  
 11517                                  _$FCB_CLOSE:		; System call 16
 11518                                  
 11519 00001871 30C0                    	XOR	AL,AL			; default search attributes
 11520 00001873 E86C04                  	call	GetExtended		; DS:SI point to real FCB
 11521 00001876 7403                    	JZ	short NoAttr		; not extended
 11522 00001878 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11523                                  NoAttr:
 11524                                  					; SS override
 11525 0000187B 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11526 0000187F E8CE03                  	call	SFTFromFCB
 11527 00001882 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11528                                  
 11529                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11530                                  	; there is no need to set the SFT's attribute.
 11531                                  
 11532                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11533                                  	;;; done
 11534                                  
 11535                                  	;mov	al,[es:di+4]
 11536 00001884 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11537 00001888 30E4                    	XOR	AH,AH
 11538 0000188A 50                      	PUSH	AX
 11539                                  
 11540                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11541                                  	;;; done
 11542                                  
 11543 0000188B E8385B                  	call	CheckShare
 11544 0000188E 7508                    	JNZ	short NoStash
 11545 00001890 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11546                                  	;mov	[es:di+4],al
 11547 00001894 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11548                                  NoStash:
 11549                                  	;mov	ax,[si+14h]
 11550 00001898 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11551                                  	;mov	[es:di+0Fh],ax
 11552 0000189B 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11553                                  	;mov	ax,[si+16h]
 11554 0000189F 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11555                                  	;mov	[es:di+0Dh],ax
 11556 000018A2 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11557                                  	;mov	ax,[si+10h]
 11558 000018A6 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11559                                  	;mov	[es:di+11h],ax
 11560 000018A9 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11561                                  	;mov	ax,[si+12h]
 11562 000018AD 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11563                                  	;mov	[es:di+13h],ax
 11564 000018B0 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11565                                  	;or	word [es:di+5],4000h
 11566                                  	; 17/12/2022
 11567 000018B4 26804D0640              	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11568                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11569 000018B9 16                      	push	ss
 11570 000018BA 1F                      	pop	ds
 11571 000018BB E8D816                  	call	DOS_CLOSE	; wham
 11572 000018BE C43E[9E05]              	LES	DI,[THISSFT]
 11573                                  
 11574                                  	;;; 9/8/86 F.C. restore SFT attribute
 11575 000018C2 59                      	POP	CX
 11576                                  	;mov	[es:di+4],cl
 11577 000018C3 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11578                                  	;;; 9/8/86 F.C. restore SFT attribute
 11579                                  
 11580 000018C7 9C                      	PUSHF
 11581                                  	;test	word [es:di],0FFFFh
 11582                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11583                                  				; zero ref count gets blasted
 11584 000018C8 26833D00                	cmp	word [ES:DI],0
 11585 000018CC 7507                    	jnz     short CloseOK
 11586 000018CE 50                      	PUSH	AX
 11587 000018CF B04D                    	MOV	AL,'M'
 11588 000018D1 E8F902                  	call	BlastSFT
 11589 000018D4 58                      	POP	AX
 11590                                  CloseOK:
 11591 000018D5 9D                      	POPF
 11592 000018D6 7397                    	JNC	short GoodRet
 11593                                  	;cmp	al,6
 11594 000018D8 3C06                    	CMP	AL,error_invalid_handle
 11595 000018DA 7493                    	JZ	short GoodRet
 11596                                  	;mov	al,2
 11597 000018DC B002                    	MOV	AL,error_file_not_found
 11598                                  fren90:
 11599                                  	; 16/12/2022
 11600                                  fcb_close_err:
 11601 000018DE E9C2ED                  	jmp	FCB_RET_ERR
 11602                                  
 11603                                  ;
 11604                                  ;----------------------------------------------------------------------------
 11605                                  ;
 11606                                  ;**	$FCB_Rename - Rename a File
 11607                                  ;
 11608                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11609                                  ;	multiple files copying from the meta characters.
 11610                                  ;
 11611                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11612                                  ;		    name of the files to be renamed. Starting at offset 11h
 11613                                  ;		    in the FCB is the destination name.
 11614                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11615                                  ;		AL = FF -> some files may have been renamed but:
 11616                                  ;			rename to existing file or source file not found
 11617                                  ;	USES	ALL
 11618                                  ;
 11619                                  ;----------------------------------------------------------------------------
 11620                                  ;
 11621                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11622                                  
 11623                                  _$FCB_RENAME:		; System call 23
 11624                                  
 11625 000018E1 E8FE03                  	call	GetExtended		; get pointer to real FCB
 11626 000018E4 52                      	push	dx
 11627 000018E5 8A04                    	MOV	AL,[SI] 		; get drive byte
 11628 000018E7 83C610                  	ADD	SI,10h			; point to destination
 11629                                  
 11630                                  					; RenBuf is in DOSDATA
 11631 000018EA BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11632 000018ED FF34                    	push	word [SI]
 11633 000018EF 1E                      	push	ds
 11634                                  	;push	di			; save source pointer for TransFCB
 11635                                  	; 16/01/2024 - BugFix !
 11636 000018F0 56                      	push	si
 11637 000018F1 8804                    	MOV	[SI],AL			; drop in real drive
 11638 000018F3 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11639 000018F5 E8D152                  	call	TransFCB		; munch this pathname
 11640 000018F8 5E                      	pop	si
 11641 000018F9 1F                      	pop	ds	
 11642 000018FA 8F04                    	pop	WORD [SI]		; get path back
 11643 000018FC 5A                      	pop	dx			; Original FCB pointer
 11644 000018FD 72DF                    	JC	short fren90		; bad path -> error
 11645                                  
 11646                                  					; SS override for WFP_Start & Ren_WFP
 11647 000018FF 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11648 00001904 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11649                                  
 11650                                  					; OpenBuf is in DOSDATA
 11651 00001909 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11652 0000190C E8BA52                  	call	TransFCB		; wham
 11653                                  					; NOTE that this call is pointing
 11654                                  					;  back to the ORIGINAL FCB so
 11655                                  					;  SATTRIB gets set correctly
 11656 0000190F 72CD                    	JC	short fren90		; error
 11657 00001911 E85A0E                  	call	DOS_RENAME
 11658 00001914 72C8                    	JC	short fren90
 11659                                  	; 16/12/2022
 11660 00001916 E987ED                  	jmp	FCB_RET_OK
 11661                                  	
 11662                                  ;	Error -
 11663                                  ;
 11664                                  ;	(al) = error code
 11665                                  
 11666                                  	; 16/12/2022
 11667                                  ;fren90:	
 11668                                  ;	;jmp	FCB_RET_ERR
 11669                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11670                                  ;	jmp	short fcb_close_err
 11671                                  
 11672                                  ;Break <Misbehavior fixers>
 11673                                  ;
 11674                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11675                                  ;   user's space so he may move them at will. Second, they have a small
 11676                                  ;   reserved area that may be used for system information. Third, there was
 11677                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11678                                  ;   usage.
 11679                                  ;
 11680                                  ;   This results in the following misbehavior:
 11681                                  ;
 11682                                  ;	infinite opens of the same file:
 11683                                  ;
 11684                                  ;	While (TRUE) {			While (TRUE) {
 11685                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11686                                  ;	    Read (FCB); 		    Write (FCB);
 11687                                  ;	    }				    }
 11688                                  ;
 11689                                  ;	infinite opens of different files:
 11690                                  ;
 11691                                  ;	While (TRUE) {			While (TRUE) {
 11692                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11693                                  ;	    Read (FCB); 		    Write (FCB);
 11694                                  ;	    }				    }
 11695                                  ;
 11696                                  ;	multiple closes of the same file:
 11697                                  ;
 11698                                  ;	FCBOpen (FCB);
 11699                                  ;	while (TRUE)
 11700                                  ;	    FCBClose (FCB);
 11701                                  ;
 11702                                  ;	I/O after closing file:
 11703                                  ;
 11704                                  ;	FCBOpen (FCB);
 11705                                  ;	while (TRUE) {
 11706                                  ;	    FCBWrite (FCB);
 11707                                  ;	    FCBClose (FCB);
 11708                                  ;	    }
 11709                                  ;
 11710                                  ;   The following is am implementation of a methodology for emulating the
 11711                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11712                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11713                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11714                                  ;   the local machine.
 11715                                  ;
 11716                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11717                                  ;   structures depending on the file itself and the state of operations of the
 11718                                  ;   OS. The information contained in this reserved field is enough to
 11719                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11720                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11721                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11722                                  ;
 11723                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11724                                  ;
 11725                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11726                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11727                                  ;   regenerated.
 11728                                  ;
 11729                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11730                                  ;   longer available. We can make up for this by using the following
 11731                                  ;   information:
 11732                                  ;
 11733                                  ;	The Drive number (from the DPB).
 11734                                  ;	The physical sector of the directory that contains the entry.
 11735                                  ;	The relative position of the entry in the sector.
 11736                                  ;	The first cluster field.
 11737                                  ;	The last used SFT.
 11738                                  ;      OR In the case of a device FCB
 11739                                  ;	The low 6 bits of sf_flags (indicating device type)
 11740                                  ;	The pointer to the device header
 11741                                  ;
 11742                                  ;   We read in the particular directory sector and examine the indicated
 11743                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11744                                  ;
 11745                                  ;   Some key items need to be remembered:
 11746                                  ;
 11747                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11748                                  ;	information. We enforce good behavior on the FCBs.
 11749                                  ;
 11750                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11751                                  ;	open VCs. The VCs may be closed only at process termination.
 11752                                  ;
 11753                                  ;	If this is not an installed version of the DOS, file sharing will
 11754                                  ;	always be present.
 11755                                  ;
 11756                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11757                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11758                                  ;
 11759                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11760                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11761                                  ;	proper OI record.
 11762                                  ;
 11763                                  ;   The test bits are:
 11764                                  ;
 11765                                  ;	00 -> local file
 11766                                  ;	40 -> sharing local
 11767                                  ;	80 -> network
 11768                                  ;	C0 -> local device
 11769                                  
 11770                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11771                                  ;----------------------------------------------------------------------------
 11772                                  ;
 11773                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11774                                  ;	pieces of information into the FCB to allow for subsequent
 11775                                  ;	regeneration. Poke LRU also.
 11776                                  ;
 11777                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11778                                  ;		DS:SI point to the FCB (not an extended one)
 11779                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11780                                  ;		DS:SI preserved
 11781                                  ;		ES:DI point to sft
 11782                                  ;   Registers modified: All
 11783                                  ;
 11784                                  ;
 11785                                  ;----------------------------------------------------------------------------
 11786                                  ;
 11787                                  
 11788                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11789                                  
 11790                                  SaveFCBInfo:
 11791                                  
 11792 00001919 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 11793 0000191E E8BBF9                  	call	IsSFTNet
 11794 00001921 740B                    	JZ	short SaveLocal		; if not network then save local info
 11795                                  ;
 11796                                  ;----- In net support -----
 11797                                  ;
 11798                                  	; 17/05/2019 - Retro DOS v4.0
 11799                                  
 11800                                  	; MSDOS 3.3
 11801                                  	;;mov	ax,[es:di+1Dh]
 11802                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 11803                                  	;;mov	[si+1Ah],ax
 11804                                  	;mov	[si+fcb_net_handle],ax
 11805                                  	;push	es
 11806                                  	;push	di
 11807                                  	;;les	di,[es:di+19h]
 11808                                  	;LES	DI,[ES:DI+sf_netid]
 11809                                  	;;mov	[si+1Ch],di
 11810                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 11811                                  	;;mov 	[si+1Eh],es
 11812                                  	;MOV	[SI+fcb_netID+2],ES
 11813                                  	;pop	di
 11814                                  	;pop	es
 11815                                  
 11816                                  	; MSDOS 6.0
 11817                                  	;mov	ax,[es:di+0Bh]
 11818 00001923 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 11819                                  	;mov	[si+1Ch],ax
 11820 00001927 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 11821                                  	
 11822                                  	;mov	bl,80h
 11823 0000192A B380                    	MOV	BL,FCBNETWORK
 11824                                  ;
 11825                                  ;----- END In net support -----
 11826                                  ;
 11827 0000192C EB65                    	jmp	SHORT SaveSFN
 11828                                  
 11829                                  SaveLocal:
 11830                                  	;IF	Installed
 11831 0000192E E8955A                  	call	CheckShare
 11832                                  	;JZ	short SaveNoShare	; no sharer
 11833                                  	;JMP	short SaveShare		; sharer present
 11834                                  	; 16/12/2022
 11835                                  	; 28/07/2019
 11836 00001931 755B                    	jnz	short SaveShare
 11837                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11838                                  	;JZ	short SaveNoShare	; no sharer
 11839                                  	;JMP	short SaveShare		; sharer present
 11840                                  
 11841                                  SaveNoShare:
 11842                                  	;;test 	word [es:di+5],80h
 11843                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 11844 00001933 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 11845 00001938 7542                    	JNZ	short SaveNoShareDev	; Device
 11846                                  
 11847                                  	; Save no sharing local file information
 11848                                  
 11849                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 11850                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 11851 0000193A 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11852                                  	;mov	[si+1Dh],ax
 11853 0000193E 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11854                                  
 11855                                  	; MSDOS 6.0
 11856                                  
 11857                                  	;SR; Store high byte of directory sector
 11858                                  	;mov	ax,[es:di+1Dh]
 11859 00001941 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11860                                  	
 11861                                  	; SR;
 11862                                  	; We have to store the read-only and archive attributes of the file.
 11863                                  	; We extract it from the SFT and store it in the top two bits of the 
 11864                                  	; sector number ( sector number == 22 bits only )
 11865                                  
 11866                                  	;mov	bl,[es:di+4]
 11867 00001945 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 11868 00001949 88DF                    	mov	bh,bl
 11869 0000194B D0CB                    	ror	bl,1
 11870 0000194D D0E7                    	shl	bh,1
 11871 0000194F 08FB                    	or	bl,bh
 11872 00001951 80E3C0                  	and	bl,0C0h
 11873 00001954 08D8                    	or	al,bl
 11874                                  	;mov	[si+18h],al ; 08/11/2022
 11875 00001956 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 11876                                  
 11877                                  	; MSDOS 6.0 (& MSDOS 3.3)
 11878                                  	;mov	al,[es:di+1Fh]
 11879 00001959 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11880                                  	;mov	[si+1Fh],al
 11881 0000195D 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11882                                  	;mov	ax,[es:di+0Bh]
 11883 00001960 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11884                                  	;mov	[si+1Bh],ax
 11885 00001964 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11886 00001967 B300                    	MOV	BL,0
 11887                                  
 11888                                  	; Create the bits field from the dirty/device bits of the flags word 
 11889                                  	; and the mode byte
 11890                                  
 11891                                  SetFCBBits:
 11892                                  	;mov	ax,[es:di+5]
 11893 00001969 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11894 0000196D 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11895                                  	;or	al,[es:di+2]
 11896 0000196F 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11897                                  	;mov	[si+1Ah], al
 11898 00001973 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11899                                  
 11900                                  	; MSDOS 6.0
 11901                                  	
 11902                                  	; SR;
 11903                                  	; Check if we came here for local file or device. If for local file, 
 11904                                  	; skip setting of SFT index
 11905                                  	
 11906 00001976 08DB                    	or	bl,bl
 11907 00001978 742A                    	jz	short SaveNoSFN		; do not save SFN if local file
 11908                                  
 11909 0000197A EB17                    	JMP	short SaveSFN 		; go and save SFN
 11910                                  
 11911                                  	; Save no sharing local device information
 11912                                  
 11913                                  SaveNoShareDev:
 11914                                  	;mov	ax,[es:di+7]
 11915 0000197C 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11916                                  	;mov	[si+1Ah],ax
 11917 00001980 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11918                                  	;mov	ax,[es:di+9]
 11919 00001983 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11920 00001987 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11921                                  	;mov	bl,40h
 11922 0000198A B340                    	MOV	BL,FCBDEVICE
 11923 0000198C EBDB                    	JMP	SetFCBBits		; go and save SFN
 11924                                  
 11925                                  SaveShare:
 11926                                  	;ENDIF
 11927                                  
 11928                                  ;----- In share support -----
 11929                                  
 11930                                  	;call	far [ss:ShSave]
 11931 0000198E 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11932                                  
 11933                                  ;----- end in share support -----
 11934                                  
 11935                                  	; 17/05/2019
 11936                                  
 11937                                  SaveSFN:
 11938                                  	;lea	ax,[di-6]
 11939 00001993 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11940                                  	
 11941                                  	; Adjust for offset to table.
 11942                                  	
 11943 00001996 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11944                                  
 11945 0000199B 53                      	push	bx			;bx = FCB type (net/Share or local)
 11946                                  	;;mov	bl,53 ; MSDOS 3.3
 11947                                  	;mov	bl,59 ; MSDOS 6.0
 11948 0000199C B33B                    	MOV	BL,SF_ENTRY.size
 11949 0000199E F6F3                    	DIV	BL
 11950                                  	;mov	[si+18h],al
 11951 000019A0 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11952 000019A3 5B                      	pop	bx			;restore bx
 11953                                  
 11954                                  SaveNoSFN:
 11955                                  	;mov	ax,[es:di+5]
 11956 000019A4 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11957 000019A8 243F                    	AND	AL,3Fh			; get real drive
 11958 000019AA 08D8                    	OR	AL,BL
 11959                                  	;mov	[si+19h],al
 11960 000019AC 884419                  	MOV	[SI+fcb_l_drive],AL
 11961                                  
 11962 000019AF 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11963 000019B3 40                      	INC	AX
 11964                                  	;mov	[es:di+15h],ax
 11965 000019B4 26894515                	MOV	[ES:DI+sf_LRU],AX
 11966 000019B8 7506                    	JNZ	short SimpleStuff
 11967                                  	
 11968                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 11969                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 11970                                  	
 11971                                  	;mov	bx,15h
 11972 000019BA BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11973 000019BD E80500                  	call	ResetLRU
 11974                                  
 11975                                  	; Set new LRU to AX
 11976                                  SimpleStuff:
 11977 000019C0 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11978 000019C4 C3                      	retn
 11979                                  
 11980                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11981                                  ;----------------------------------------------------------------------------
 11982                                  ;
 11983                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 11984                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11985                                  ;   at 0.
 11986                                  ;
 11987                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11988                                  ;		ES:DI point to SFT currently being updated
 11989                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11990                                  ;		AX has 8000h
 11991                                  ;   Registers modified: none
 11992                                  ;
 11993                                  ;----------------------------------------------------------------------------
 11994                                  ;
 11995                                  
 11996                                  	; 17/05/2019 - Retro DOS v4.0
 11997                                  ResetLRU:
 11998                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11999                                  	; DOSDATA
 12000                                  
 12001 000019C5 B80080                  	MOV	AX,8000h
 12002 000019C8 06                      	push	es
 12003 000019C9 57                      	push	di
 12004                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12005 000019CA 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12006                                  	;mov	cx,[es:di+4]
 12007 000019CF 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12008                                  	;lea	di,[di+6]
 12009 000019D3 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12010                                  ovScan:
 12011 000019D6 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12012 000019D9 7703                    	JA	short ovLoop
 12013 000019DB 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12014                                  ovLoop:
 12015                                  	;;add	di,53	; MSDOS 3.3
 12016                                  	;add	di,59	; MSDOS 6.0	
 12017 000019DE 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12018 000019E1 E2F3                    	LOOP	ovScan
 12019 000019E3 5F                      	pop	di
 12020 000019E4 07                      	pop	es
 12021 000019E5 268901                  	MOV	[ES:DI+BX],AX
 12022 000019E8 C3                      	retn
 12023                                  
 12024                                  ;IF  0  ; We dont need this routine any more.
 12025                                  ;
 12026                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12027                                  ;----------------------------------------------------------------------------
 12028                                  ;
 12029                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12030                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12031                                  ;   count here and fill in the appropriate field.
 12032                                  ;
 12033                                  ;   Inputs:	ES:DI point to SFT
 12034                                  ;   Outputs:	ES:DI has the open age field filled in.
 12035                                  ;		If open age has wraparound, we will have subtracted 8000h
 12036                                  ;		    from all open ages.
 12037                                  ;   Registers modified: AX
 12038                                  ;
 12039                                  ;----------------------------------------------------------------------------
 12040                                  ;
 12041                                  ;SetOpenAge:
 12042                                  ;	; 20/07/2018 - Retro DOS v3.0
 12043                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12044                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12045                                  ;
 12046                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12047                                  ;
 12048                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12049                                  ;	INC	AX
 12050                                  ;	;mov	[es:di+17h],ax
 12051                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12052                                  ;	JNZ	short SetDone
 12053                                  ;	;mov	bx,17h
 12054                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12055                                  ;	call	ResetLRU
 12056                                  ;SetDone:
 12057                                  ;	MOV	[CS:OpenLRU],AX
 12058                                  ;	retn
 12059                                  ;
 12060                                  ;ENDIF	; SetOpenAge no longer needed
 12061                                  
 12062                                  ; 21/07/2018 - Retro DOS v3.0
 12063                                  ; LRUFCB for MSDOS 6.0 !
 12064                                  
 12065                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12066                                  ;----------------------------------------------------------------------------
 12067                                  ;
 12068                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12069                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12070                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12071                                  ;
 12072                                  ;   Inputs:	none
 12073                                  ;   Outputs:	ES:DI point to SFT
 12074                                  ;		ThisSFT points to SFT
 12075                                  ;		SFT is zeroed
 12076                                  ;		Carry set of closes failed
 12077                                  ;   Registers modified: none
 12078                                  ;
 12079                                  ;----------------------------------------------------------------------------
 12080                                  ;
 12081                                  ; MSDOS 6.0
 12082                                  ;IF 0	; rewritten this routine
 12083                                  ;
 12084                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12085                                  ;	call	save_world
 12086                                  ;	
 12087                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12088                                  ; to find the lease recently used one that is younger than the open age.  We
 12089                                  ; operate be scanning the list n times finding the least age that is greater
 12090                                  ; or equal to the previous minimum age.
 12091                                  ;
 12092                                  ;   BP is the count of times we need to go through this loop.
 12093                                  ;   AX is the current acceptable minimum age to consider
 12094                                  ;
 12095                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12096                                  ;	XOR	AX,AX			; low = 0;
 12097                                  ;
 12098                                  ; If we've scanned the table n times, then we are done.
 12099                                  ;
 12100                                  ;lru1:
 12101                                  ;	CMP	bp,0			; while (k--) {
 12102                                  ;	JZ	short lru75
 12103                                  ;	DEC	bp
 12104                                  ;
 12105                                  ; Set up for scan.
 12106                                  ;
 12107                                  ;   AX is the minimum age for consideration
 12108                                  ;   BX is the minimum age found during the scan
 12109                                  ;   SI is the position of the entry that corresponds to BX
 12110                                  ;
 12111                                  ;	MOV	BX,-1			;     min = 0xffff;
 12112                                  ;	MOV	si,BX			;     pos = 0xffff;
 12113                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12114                                  ;	;mov	cx,[es:di+4]
 12115                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12116                                  ;	;lea	di,[di+6]
 12117                                  ;	LEA	DI,[DI+SFT.SFTable]
 12118                                  ;
 12119                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12120                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12121                                  ; are done.  In both cases, we use the found entry.
 12122                                  ;
 12123                                  ;lru2:
 12124                                  ;	cmp	word [es:di],0
 12125                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12126                                  ;	jz	short lru25
 12127                                  ;	;cmp	word [es:di],-1
 12128                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12129                                  ;	cmp	word [es:di],sf_busy
 12130                                  ;	jnz	short lru3
 12131                                  ;
 12132                                  ; The entry is usable without further scan.  Go and use it.
 12133                                  ;
 12134                                  ;lru25:
 12135                                  ;	MOV	si,DI			;	      pos = i;
 12136                                  ;	JMP	short lru11		;	      goto got;
 12137                                  ;
 12138                                  ; See if the entry is for the network or for the sharer.
 12139                                  ;
 12140                                  ;  If for the sharer or network then
 12141                                  ;	if the age < current minimum AND >= allowed minimum then
 12142                                  ;	    this entry becomes current minimum
 12143                                  ;
 12144                                  ;lru3:
 12145                                  ;	;test	word [es:di+5],8000h
 12146                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12147                                  ;					;	  if (!net[i]
 12148                                  ;	JNZ	short lru35
 12149                                  ;if installed
 12150                                  ;	call	CheckShare		;		&& !sharing)
 12151                                  ;	JZ	short lru5		;	  else
 12152                                  ;ENDIF
 12153                                  ;
 12154                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12155                                  ; current minimum.
 12156                                  ;
 12157                                  ;lru35:
 12158                                  ;	;mov	dx,[es:di+17h]
 12159                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12160                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12161                                  ;	JB	short lru5
 12162                                  ;	CMP	DX,BX
 12163                                  ;	JAE	short lru5		;	      age[i] < min) {
 12164                                  ;
 12165                                  ; entry is new minimum.  Remember his age.
 12166                                  ;
 12167                                  ;	mov	bx,DX			;	      min = age[i];
 12168                                  ;	mov	si,di			;	      pos = i;
 12169                                  ;
 12170                                  ; End of loop.	gp back for more
 12171                                  ;
 12172                                  ;lru5:
 12173                                  ;	;add	di,53
 12174                                  ;	add	di,SF_ENTRY.size
 12175                                  ;	loop	lru2			;	      }
 12176                                  ;
 12177                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12178                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12179                                  ; complete.  Go find LRU.
 12180                                  ;
 12181                                  ;lru6:	
 12182                                  ;	cmp	si,-1			; position not -1?
 12183                                  ;	jz	short lru75		; no, done with everything
 12184                                  ;	lea	ax,[bx+1]		; set new threshold age
 12185                                  ;	jmp	short lru1		; go and loop for more
 12186                                  ;lru65:	
 12187                                  ;	stc
 12188                                  ;	jmp	short LRUDead		;	  return -1;
 12189                                  ;
 12190                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12191                                  ; network entry. We now make a second pass through to find the LRU entry
 12192                                  ; that is local-no-share or has age >= AX
 12193                                  ;
 12194                                  ;lru75:
 12195                                  ;	mov	bx,-1			; min = 0xffff;
 12196                                  ;	mov	si,bx			; pos = 0xffff;
 12197                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12198                                  ;	;mov	cx,[es:di+4]
 12199                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12200                                  ;	;lea	di,[di+6]
 12201                                  ;	LEA	DI,[DI+SFT.SFTable]
 12202                                  ;
 12203                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12204                                  ; then check for lru.
 12205                                  ;
 12206                                  ;lru8:
 12207                                  ;	;test	word [es:di+5],8000h
 12208                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12209                                  ;	jnz	short lru85		; is for network, go check age
 12210                                  ;	call	CheckShare		; sharer here?
 12211                                  ;	jz	short lru86		; no, go check lru
 12212                                  ;
 12213                                  ; Network or sharer.  Check age
 12214                                  ;
 12215                                  ;lru85:
 12216                                  ;	;cmp	[es:di+17h],ax
 12217                                  ;	cmp	[es:di+sf_OpenAge],ax
 12218                                  ;	jb	short lru9		; age is before threshold, skip it
 12219                                  ;
 12220                                  ; Check LRU
 12221                                  ;
 12222                                  ;lru86:
 12223                                  ;	;cmp	[es:di+15h],bx
 12224                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12225                                  ;	jae	short lru9		; no, skip this
 12226                                  ;	mov	si,di			; remember position
 12227                                  ;	;mov	bx,[es:di+15h]
 12228                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12229                                  ;
 12230                                  ; Done with this entry, go back for more.
 12231                                  ;
 12232                                  ;lru9:
 12233                                  ;	;add	di, 53
 12234                                  ;	add	di,SF_ENTRY.size
 12235                                  ;	loop	lru8
 12236                                  ;
 12237                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12238                                  ; out. The conditions here are:
 12239                                  ;
 12240                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12241                                  ;
 12242                                  ;lru10:
 12243                                  ;	cmp	si,-1			; if no one f
 12244                                  ;	jz	short lru65		;     return -1;
 12245                                  ;lru11:
 12246                                  ;	mov	di,si
 12247                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12248                                  ;	MOV	[CS:THISSFT+2],ES
 12249                                  ;
 12250                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12251                                  ; is 0.
 12252                                  ;
 12253                                  ;	;test	word [es:di+5],8000h
 12254                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12255                                  ;	JNZ	short LRUClose
 12256                                  ;IF INSTALLED
 12257                                  ;	call	CheckShare
 12258                                  ;	JZ	short LRUDone
 12259                                  ;ENDIF
 12260                                  ;
 12261                                  ; Repeat close until ref count is 0
 12262                                  ;
 12263                                  ;LRUClose:
 12264                                  ;	push	ss
 12265                                  ;	pop	ds
 12266                                  ;	LES	DI,[THISSFT]
 12267                                  ;	cmp     word [es:di],0
 12268                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12269                                  ;	JZ	short LRUDone 		; nope, all done
 12270                                  ;	call	DOS_CLOSE
 12271                                  ;	jnc	short LRUClose		; no error => clean up
 12272                                  ;	;cmp	al,6
 12273                                  ;	cmp	al,error_invalid_handle
 12274                                  ;	jz	short LRUClose
 12275                                  ;	stc
 12276                                  ;	JMP	short LRUDead
 12277                                  ;LRUDone:
 12278                                  ;	XOR	AL,AL
 12279                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12280                                  ;
 12281                                  ;LRUDead:
 12282                                  ;	call	restore_world
 12283                                  ;	LES     DI,[CS:THISSFT]
 12284                                  ;	jnc	short LRUFCB_retn
 12285                                  ;LRUFCB_err:
 12286                                  ;	; mov	al, 23h	
 12287                                  ;	MOV	AL,error_FCB_unavailable
 12288                                  ;LRUFCB_retn:	
 12289                                  ;	retn:
 12290                                  ;
 12291                                  ;ENDIF	; LRUFCB has been rewritten below.
 12292                                  
 12293                                  ; 17/05/2019 - Retro DOS v4.0
 12294                                  ; LRUFCB for MSDOS 6.0 !
 12295                                  ;----------------------------------------------------------------------------
 12296                                  ;
 12297                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12298                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12299                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12300                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12301                                  ; optimize regeneration operations by keeping track of the current local
 12302                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12303                                  ; local SFT in the SFT Block.
 12304                                  ;
 12305                                  ; Inputs: al = 0 => Regenerate SFT operation
 12306                                  ;	    = 1 => Allocate new SFT for Open/Create
 12307                                  ;
 12308                                  ; Outputs: Carry clear
 12309                                  ;	 	es:di = Address of allocated SFT
 12310                                  ;	  	ThisSFT = Address of allocated SFT
 12311                                  ;
 12312                                  ;	  carry set if closes of net/Share files failed 
 12313                                  ;		al = error_FCB_unavailable
 12314                                  ;
 12315                                  ; Registers affected: None
 12316                                  ;
 12317                                  ;----------------------------------------------------------------------------
 12318                                  
 12319                                  ;LruFCB	PROC	NEAR
 12320                                  LRUFCB:
 12321                                  	; 17/05/2019 - Retro DOS v4.0
 12322                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12323                                  
 12324                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12325                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12326                                  
 12327                                  	; 20/01/2024
 12328                                  
 12329 000019E9 06                      	push	es	; * (MSDOS 6.21)
 12330                                  	
 12331 000019EA E8BEEA                  	call	save_world
 12332                                  	
 12333                                  	;getdseg <ds>		;ds = DOSDATA
 12334 000019ED 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12335                                  
 12336 000019F2 08C0                    	or	al,al		;Check if regenerate allocation
 12337 000019F4 751A                    	jnz	short lru1	;Try to find SFT to use
 12338                                  
 12339                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12340                                  	; local SFT, just return that SFT to reuse
 12341                                  
 12342 000019F6 8B3E[5D10]              	mov	di,[LocalSFT]
 12343 000019FA 0B3E[5F10]              	or	di,[LocalSFT+2]	;is address == 0?
 12344 000019FE 7410                    	jz	short lru1	;invalid local SFT, find one
 12345                                  
 12346                                  	; We have found a valid local SFT. Recycle this SFT
 12347                                  
 12348 00001A00 C43E[5D10]              	les	di,[LocalSFT]
 12349                                  
 12350                                  gotlocalSFT:
 12351 00001A04 893E[9E05]              	mov	[THISSFT],di
 12352 00001A08 8C06[A005]              	mov	[THISSFT+2],es
 12353 00001A0C F8                      	clc
 12354 00001A0D E9AA00                  	jmp	LRUDone		;clear up SFT and return
 12355                                  
 12356                                  lru1:
 12357 00001A10 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12358                                  	;mov	cx,[es:di+4]
 12359 00001A14 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12360                                  	;lea	di,[di+6]
 12361 00001A18 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12362                                  
 12363                                  	; We scan through all the SFTs scanning for a free one. It also 
 12364                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12365                                  	; bx = min. LRU for local SFTs
 12366                                  	; si = pos. of local SFT with min. LRU
 12367                                  	; dx = min. LRU for net/Share SFTs
 12368                                  	; bp = pos. of net/Share SFT with min. LRU
 12369                                  
 12370 00001A1B BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12371 00001A1E 89DE                    	mov	si,bx
 12372 00001A20 89DA                    	mov	dx,bx
 12373 00001A22 89DD                    	mov	bp,bx
 12374                                  
 12375                                  findSFT:
 12376                                  	;See if this SFT is a free one. If so, return it
 12377 00001A24 26830D00                	or	word [es:di],0
 12378                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12379 00001A28 744D                    	jz	short gotSFT	;yes, SFT is free
 12380                                  	;;cmp	word [es:di],-1
 12381                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12382 00001A2A 26833DFF                	cmp	word [es:di],sf_busy ; -1
 12383 00001A2E 7447                    	jz	short gotSFT	;no, can use it
 12384                                  
 12385                                  	; Check if this SFT is local and store its address in LocalSFT. Can be
 12386                                  	; used for a later regen.
 12387                                  
 12388                                  	; 16/12/2022
 12389                                  	; 08/11/2022
 12390                                  	;test	byte [es:di+6],80h
 12391 00001A30 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12392                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12393                                  	;;test	word [es:di+5],8000h
 12394                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12395 00001A35 7532                    	jnz	short lru5	;yes, get net/Share LRU
 12396                                  
 12397                                  ;IF installed
 12398 00001A37 E88C59                  	call	CheckShare	;Share present?
 12399                                  ;ENDIF
 12400 00001A3A 752D                    	jnz	short lru5	;yes, get net/Share LRU
 12401                                  
 12402                                  	;Local SFT, register its address
 12403                                  
 12404                                  	; !!HACK!!!
 12405                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12406                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12407                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12408                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12409                                  	; out the code that previously existed at label 'gotSFT'
 12410                                  
 12411                                  hackpoint:
 12412 00001A3C 893E[5D10]              	mov	[LocalSFT],di
 12413 00001A40 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12414                                  
 12415 00001A44 08C0                    	or	al,al		;Is operation = REGEN?
 12416 00001A46 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12417                                  
 12418                                  	;Get LRU for local files
 12419                                  	
 12420                                  	;cmp	[es:di+15h],bx
 12421 00001A48 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12422 00001A4C 7306                    	jae	short lru4	;no, skip 
 12423                                  
 12424                                  	;mov	bx,[es:di+15h]
 12425 00001A4E 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12426 00001A52 89FE                    	mov	si,di		;store SFT position
 12427                                  
 12428                                  lru4:
 12429                                  	;add	di,59
 12430 00001A54 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12431 00001A57 E2CB                    	loop	findSFT
 12432                                  
 12433                                  	; Check whether we got a net/Share or local SFT. If local SFT 
 12434                                  	; available, we will reuse it instead of net/Share LRU
 12435                                  
 12436 00001A59 89F7                    	mov	di,si
 12437 00001A5B 83FEFF                  	cmp	si,-1		;local SFT available?
 12438 00001A5E 7517                    	jnz	short gotSFT	;yes, return it
 12439                                  
 12440                                  	;No local SFT, see if we got a net/Share SFT
 12441                                  
 12442 00001A60 89EF                    	mov	di,bp
 12443 00001A62 83FDFF                  	cmp	bp,-1		;net/Share SFT available?
 12444 00001A65 752D                    	jnz	short gotnetSFT	;yes, return it
 12445                                  noSFT:
 12446                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12447                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12448                                  	; count is not maintained properly.
 12449                                  
 12450 00001A67 EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12451                                  
 12452                                  	; Handle the LRU for net/Share SFTs
 12453                                  lru5:
 12454                                  	;cmp	[es:di+15h],dx
 12455 00001A69 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12456 00001A6D 73E5                    	jae	short lru4	;no, skip 
 12457                                  
 12458                                  	;mov	dx,[es:di+15h]
 12459 00001A6F 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12460                                  
 12461 00001A73 89FD                    	mov	bp,di		;store SFT position
 12462 00001A75 EBDD                    	jmp	short lru4	;continue with next SFT
 12463                                  
 12464                                  gotSFT:
 12465 00001A77 08C0                    	or	al,al
 12466 00001A79 74C1                    	jz	short hackpoint	;save es:di in LocalSFT
 12467                                  
 12468                                  	; HACK!!!
 12469                                  	; The code here differs from the code at 'hackpoint' only in the 
 12470                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12471                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12472                                  	; has been commented out below and replaced by the code just above.
 12473                                  
 12474                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12475                                  ;
 12476                                  ;	or	al,al		  ;Regen?
 12477                                  ;	jnz	short notlocaluse ;yes, register it and return
 12478                                  ;
 12479                                  ;Register this SFT as a local one
 12480                                  ;
 12481                                  ;	mov	[LocalSFT],di
 12482                                  ;	mov	[LocalSFT+2],es
 12483                                  ;	jmp	gotlocalSFT	;return to caller
 12484                                  ;
 12485                                  ;notlocaluse:
 12486                                  
 12487                                  	; The caller is probably going to use this SFT for a net/Share file.
 12488                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12489                                  	; does not really know whether it is a local file or not. We
 12490                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12491                                  	; registered as a local SFT that can be recycled.
 12492                                  
 12493 00001A7B 8CC0                    	mov	ax,es
 12494 00001A7D 393E[5D10]              	cmp	[LocalSFT],di		;Offset same?
 12495 00001A81 750E                    	jne	short notinvalid
 12496 00001A83 3906[5F10]              	cmp	[LocalSFT+2],ax		;Segments same?
 12497                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12498                                  	; 20/01/2024
 12499 00001A87 7508                    	jne	short notinvalid
 12500                                  zerolocalSFT:	
 12501 00001A89 31C0                    	xor	ax,ax ; 0
 12502 00001A8B A3[5D10]                	mov	[LocalSFT],ax
 12503 00001A8E A3[5F10]                	mov	[LocalSFT+2],ax
 12504                                  	
 12505                                  notinvalid:
 12506 00001A91 E970FF                  	jmp	gotlocalSFT
 12507                                  
 12508                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12509                                  	; Invalidate this variable i.e LocalSFT = NULL
 12510                                  
 12511                                  ;zerolocalSFT:
 12512                                  	;xor	ax,ax ; 0
 12513                                  	;mov	[LocalSFT],ax
 12514                                  	;mov	[LocalSFT+2],ax
 12515                                  	;
 12516                                  	;jmp	gotlocalSFT
 12517                                  
 12518                                  gotnetSFT:
 12519                                  	; We have an SFT that is currently net/Share. If it is going to be
 12520                                  	; used for a regen, we know it has to be a local SFT. Update the
 12521                                  	; LocalSFT variable
 12522                                  
 12523 00001A94 08C0                    	or	al,al
 12524 00001A96 7508                    	jnz	short closenet
 12525                                  
 12526 00001A98 893E[5D10]              	mov	[LocalSFT],di
 12527 00001A9C 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12528                                  closenet:
 12529 00001AA0 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12530 00001AA4 8C06[A005]              	mov	[THISSFT+2],es
 12531                                  
 12532                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12533                                  	; count is 0.
 12534                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12535                                  	; recycled -- no need to check for this.
 12536                                  
 12537                                  LRUClose:
 12538 00001AA8 26833D00                	cmp	word [es:di],0
 12539                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12540 00001AAC 740C                    	jz	short LRUDone	; nope, all done
 12541                                  
 12542 00001AAE E8E514                  	call	DOS_CLOSE
 12543 00001AB1 73F5                    	jnc	short LRUClose	; no error => clean up
 12544                                  
 12545                                  	; Bugbug: I dont know why we are trying to close after we get an
 12546                                  	; error closing. Seems like we could have a potential infinite loop
 12547                                  	; here. This has to be verified.
 12548                                  
 12549 00001AB3 3C06                    	cmp	al,error_invalid_handle ; 6
 12550 00001AB5 74F1                    	je	short LRUClose
 12551                                  errorbadSFT:
 12552 00001AB7 F9                      	stc
 12553 00001AB8 EB05                    	JMP	short LRUDead
 12554                                  LRUDone:
 12555 00001ABA 30C0                    	XOR	AL,AL
 12556 00001ABC E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12557                                  
 12558                                  LRUDead:
 12559 00001ABF E8D2E9                  	call	restore_world		; use macro
 12560                                  	
 12561 00001AC2 07                      	pop	es ; * (MSDOS 6.21)
 12562                                  
 12563                                  	;getdseg <es>
 12564 00001AC3 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12565                                  
 12566 00001AC8 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12567                                  
 12568                                  	;;retnc
 12569                                  	;jc	short LruFCB_err
 12570                                  	;retn
 12571                                  
 12572                                  	; 16/12/2022
 12573                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12574 00001ACD 7302                    	jnc	short LruFCB_retn
 12575                                  	;jc	short LruFCB_err
 12576                                  	;retn
 12577                                  		
 12578                                  LruFCB_err:
 12579 00001ACF B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12580                                  LruFCB_retn:
 12581 00001AD1 C3                      	retn
 12582                                  	
 12583                                  ;LruFCB	ENDP
 12584                                  
 12585                                  ; 17/05/2019 - Retro DOS v4.0
 12586                                  
 12587                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12588                                  
 12589                                  ; --------------------------------------------------------------------------
 12590                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12591                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12592                                  ; to copy the name to different destinations
 12593                                  ;
 12594                                  ; Inputs: ds:si = source string
 12595                                  ;	 es:di = destination string
 12596                                  ;	 cx = length of string
 12597                                  ;
 12598                                  ; Outputs: String copied to destination
 12599                                  ;
 12600                                  ; Registers affected: cx,di,si
 12601                                  ; --------------------------------------------------------------------------
 12602                                  
 12603                                  RegenCopyName:
 12604                                  CopyName:
 12605 00001AD2 AC                      	lodsb			;load character
 12606 00001AD3 E81D36                  	call	UCase		; convert char to upper case
 12607                                  StuffChar2:
 12608 00001AD6 AA                      	STOSB			;store converted character
 12609 00001AD7 E2F9                    	LOOP	CopyName	;
 12610                                  DoneName:
 12611 00001AD9 C3                      	retn
 12612                                  
 12613                                  ; --------------------------------------------------------------------------
 12614                                  
 12615                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12616                                  FCBRegen:
 12617                                  	; called from SFTFromFCB. SS already DOSDATA
 12618                                  
 12619                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12620                                  	; we do not fill, size we do no fill, position we do not fill,
 12621                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12622                                  
 12623                                  	;mov	al,[si+19h]
 12624 00001ADA 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12625                                  
 12626                                  	; We discriminate based on the first two bits in the reserved field.
 12627                                  	
 12628                                  	;test	al,80h
 12629 00001ADD A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12630 00001ADF 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12631                                  
 12632                                  	; The FCB is for a network or a sharing based system. At this point 
 12633                                  	; we have already closed the SFT for this guy and reconnection is 
 12634                                  	; impossible.
 12635                                  	;
 12636                                  	; Remember that he may have given us a FCB with bogus information in
 12637                                  	; it. Check to see if sharing is present or if the redir is present.
 12638                                  	; If either is around, presume that we have cycled out the FCB and 
 12639                                  	; give the hard error. Otherwise, just return with carry set.
 12640                                  
 12641 00001AE1 E8E258                  	call	CheckShare		; test for sharer
 12642 00001AE4 7509                    	JNZ	short RegenFail		; yep, fail this.
 12643                                  	
 12644                                  	;mov	ax,1100h
 12645 00001AE6 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12646 00001AE9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12647                                  			; Return: AL = 00h  not installed, OK to install
 12648                                  			; 01h  not installed, not OK to install
 12649                                  			; FFh  installed
 12650 00001AEB 08C0                    	OR	AL,AL			; is it there?
 12651 00001AED 740C                    	JZ	short RegenDead		; no, just fail the operation
 12652                                  RegenFail:
 12653                                  	; 17/05/2019 - Retro DOS v4.0
 12654                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12655 00001AEF 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12656                                  
 12657                                  	;cmp	ah,10h
 12658 00001AF3 80FC10                  	cmp	AH,FCB_CLOSE
 12659 00001AF6 7403                    	jz	short RegenDead
 12660 00001AF8 E88B01                  	call	FCBHardErr		; massive hard error.
 12661                                  RegenDead:
 12662 00001AFB F9                      	STC				; carry set
 12663                                  FCBRegen_retn:
 12664 00001AFC C3                      	retn
 12665                                  
 12666                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12667                                  	; so fail the operation.
 12668                                  
 12669                                  RegenNoSharing:
 12670 00001AFD E8C658                  	call	CheckShare		; Sharing around?
 12671 00001B00 75ED                    	JNZ	short RegenFail
 12672                                  	
 12673                                  	; Find an SFT for this guy.
 12674                                  	
 12675                                  	; 17/05/2019 - Retro DOS v4.0
 12676                                  
 12677                                  	; MSDOS 3.3
 12678                                  	;call	LRUFCB
 12679                                  	;jc	short FCBRegen_retn
 12680                                  	
 12681                                  	; MSDOS 6.0
 12682 00001B02 50                      	push	ax
 12683 00001B03 B000                    	mov	al,0			;indicate it is a regen operation
 12684 00001B05 E8E1FE                  	call	LRUFCB
 12685 00001B08 58                      	pop	ax
 12686 00001B09 72F1                    	jc	short FCBRegen_retn
 12687                                  
 12688                                  	;mov	word [es:di+2],8002h
 12689 00001B0B 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12690 00001B11 243F                    	AND	AL,3Fh			; get drive number for flags
 12691 00001B13 98                      	CBW
 12692                                  	;or	ax,4000h
 12693 00001B14 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12694                                  
 12695                                  	; The bits field consists of the upper two bits (dirty and device) 
 12696                                  	; from the SFT and the low 4 bits from the open mode.
 12697                                  
 12698                                  	;mov	cl,[si+1Ah]
 12699 00001B17 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12700 00001B1A 88CD                    	MOV	CH,CL
 12701 00001B1C 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12702 00001B1F 08E8                    	OR	AL,CH
 12703                                  	;and	cl,0Fh
 12704 00001B21 80E10F                  	AND	CL,access_mask		; get the mode bits
 12705                                  	;mov	[es:di+2],cl
 12706 00001B24 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12707                                  	;mov	[es:di+5],ax
 12708 00001B28 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12709                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12710 00001B2C 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12711                                  	;mov	[es:di+31h],ax
 12712 00001B30 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12713 00001B34 1E                      	push	ds
 12714 00001B35 56                      	push	si
 12715 00001B36 06                      	push	es
 12716 00001B37 57                      	push	di
 12717 00001B38 16                      	push	ss
 12718 00001B39 07                      	pop	es
 12719 00001B3A BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12720                                  
 12721 00001B3D B90800                  	MOV	CX,8
 12722 00001B40 46                      	INC	SI			; Skip past drive byte to name in FCB
 12723                                  
 12724                                  	; MSDOS 3.3
 12725                                  ;RegenCopyName:
 12726                                  	;lodsb
 12727                                  	;call	UCase
 12728                                  	;stosb
 12729                                  	;loop	RegenCopyName
 12730                                  
 12731                                  	; MSDOS 6.0
 12732 00001B41 E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12733                                  
 12734 00001B44 16                      	push	ss	; SS is DOSDATA
 12735 00001B45 1F                      	pop	ds
 12736                                  
 12737                                  	;mov	byte [ATTRIB],16h
 12738 00001B46 C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12739                                  					; Must set this to something interesting
 12740                                  					; to call DEVNAME.
 12741 00001B4B E80D27                  	call	DEVNAME 		; check for device
 12742 00001B4E 5E                      	pop	si
 12743 00001B4F 07                      	pop	es
 12744 00001B50 5E                      	pop	si
 12745 00001B51 1F                      	pop	ds
 12746 00001B52 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12747                                  
 12748                                  	; Device found. We can ignore disk-specific info
 12749                                  
 12750                                  	;mov	[es:di+5],bh
 12751 00001B54 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12752                                  	;mov	byte [es:di+4],0
 12753 00001B58 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12754                                  					; SS override
 12755                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12756 00001B5D 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12757                                  	;mov	[es:di+7],si
 12758 00001B62 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12759                                  	;mov	[es:di+9],ds
 12760 00001B66 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12761 00001B6A C3                      	retn				; carry is clear
 12762                                  
 12763                                  RegenDeadJ:
 12764 00001B6B EB8E                    	JMP	short RegenDead
 12765                                  
 12766                                  	; File found. Just copy in the remaining pieces.
 12767                                  
 12768                                  RegenFileNoSharing:
 12769                                  	;mov	ax,[es:di+5]
 12770 00001B6D 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12771 00001B71 83E03F                  	AND	AX,03Fh
 12772 00001B74 1E                      	push	ds
 12773 00001B75 56                      	push	si
 12774 00001B76 E8054F                  	call	FIND_DPB
 12775                                  	;mov	[es:di+7],si
 12776 00001B79 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12777                                  	;mov	[es:di+9],ds
 12778 00001B7D 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12779 00001B81 5E                      	pop	si
 12780 00001B82 1F                      	pop	ds
 12781 00001B83 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 12782                                  					; indicator was bogus
 12783                                  	;mov	ax,[si+1Dh]
 12784 00001B85 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 12785                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 12786                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 12787 00001B88 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 12788                                  
 12789                                  	; MSDOS 6.0
 12790                                  
 12791                                  	; SR;
 12792                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 12793                                  	; number
 12794                                  
 12795                                  	;mov	al,[si+18h]
 12796 00001B8C 8A4418                  	mov	al,[si+fcb_sfn]
 12797 00001B8F 24C0                    	and	al,0C0h		;get the 2 attribute bits
 12798 00001B91 88C4                    	mov	ah,al
 12799 00001B93 D0C4                    	rol	ah,1
 12800 00001B95 D0E8                    	shr	al,1
 12801 00001B97 08E0                    	or	al,ah
 12802 00001B99 243F                    	and	al,03Fh		;mask off unused bits
 12803                                  	;mov	[es:di+4],al
 12804 00001B9B 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 12805                                  
 12806                                  	; SR;
 12807                                  	; Update the higher word of the directory sector from the FCB
 12808                                  
 12809                                  	;;mov	al,[si+18h]
 12810 00001B9F 8A4418                  	mov	al,[si+fcb_sfn]
 12811 00001BA2 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 12812 00001BA4 28E4                    	sub	ah,ah
 12813                                  	;mov	[es:di+1Dh],ax
 12814 00001BA6 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 12815                                  
 12816                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12817                                  	;mov	ax,[si+1Bh]
 12818 00001BAA 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 12819                                  	;mov	[es:di+0Bh],ax
 12820 00001BAD 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 12821                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 12822                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 12823 00001BB1 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 12824                                  	;mov	al,[si+1Fh]
 12825 00001BB5 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 12826                                  	;mov  	[es:di+1Fh],al
 12827 00001BB8 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 12828                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12829 00001BBC 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 12830                                  					; Existing FCB entries would be
 12831                                  					; flushed unnecessarily because of
 12832                                  					; check in CheckFCB of the ref_count.
 12833                                  					; July 22/85 - BAS
 12834                                  	;lea	si,[si+1]
 12835 00001BBF 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 12836                                  	;lea	di,[di+20h]
 12837 00001BC2 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 12838                                  	;mov	cx,11
 12839 00001BC5 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 12840                                  	
 12841                                  	; MSDOS 6.0
 12842 00001BC8 E807FF                  	call	RegenCopyName	;copy name to SFT 
 12843                                  	
 12844                                  	; MSDOS 3.3
 12845                                  ;RegenCopyName2:
 12846                                  	;lodsb
 12847                                  	;call    UCase
 12848                                  	;stosb
 12849                                  	;loop    RegenCopyName2
 12850                                  
 12851 00001BCB F8                      	clc
 12852 00001BCC C3                      	retn
 12853                                  
 12854                                  ; 17/05/2019 - Retro DOS v4.0
 12855                                  
 12856                                  ;**	BlastSFT - FIll SFT with Garbage
 12857                                  ; --------------------------------------------------------------------------
 12858                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 12859                                  ;	various garbage values to put into the SFT.  I don't know why,
 12860                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 12861                                  ;	necessary to show that the SFT is free after filling it.
 12862                                  ;
 12863                                  ;	ENTRY	(es:di) = address of SFT
 12864                                  ;		(al) = fill character
 12865                                  ;	EXIT	(ax) = -1
 12866                                  ;		'C' clear
 12867                                  ;	USES	AX, CX, Flags
 12868                                  
 12869                                  BlastSFT:
 12870 00001BCD 57                      	push	di
 12871                                  	;mov	cx,53 ; MSDOS 3.3
 12872                                  	;mov	cx,59 ; MSDOS 6.0
 12873 00001BCE B93B00                  	mov	cx,SF_ENTRY.size
 12874 00001BD1 F3AA                    	rep	stosb
 12875 00001BD3 5F                      	pop	di
 12876 00001BD4 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 12877 00001BD6 268905                  	mov	[es:di],ax
 12878                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 12879                                  	;mov	[es:di+15h],ax
 12880 00001BD9 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 12881 00001BDD 48                      	dec	ax	; -1					    ;
 12882                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 12883 00001BDE 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 12884                                  BlastSFT_retn:
 12885 00001BE2 C3                      	retn				; return with 'C' clear     ;
 12886                                  
 12887                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 12888                                  ; --------------------------------------------------------------------------
 12889                                  ;
 12890                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 12891                                  ;   regenerated.
 12892                                  ;
 12893                                  ;   Inputs:	DS:SI point to FCB (not extended)
 12894                                  ;		AL is SFT index
 12895                                  ;   Outputs:	Carry Set - FCB needs to be regened
 12896                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 12897                                  ;   Registers modified: AX and BX
 12898                                  ;
 12899                                  ; --------------------------------------------------------------------------
 12900                                  
 12901                                  	; 21/01/2024
 12902                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12903                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 12904                                  CheckFCB:
 12905                                  		
 12906                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 12907                                  
 12908                                  	; MSDOS 3.3
 12909                                  
 12910                                  	; LES	DI,[CS:SFTFCB]
 12911                                  
 12912                                  	; MSDOS 6.0
 12913                                  	
 12914                                  	; SR;
 12915                                  	; We check if the given FCB is for a local file. If so, we return a 
 12916                                  	; bad SFT status forcing the caller to regenerate the SFT.
 12917                                  
 12918                                  	;test	byte [si+19h],0C0h
 12919 00001BE3 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 12920 00001BE7 7447                    	jz	short BadSFT		;Local file, return bad SFT
 12921 00001BE9 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 12922                                  
 12923                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12924                                  	;cmp	[es:di+4],al
 12925 00001BEE 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 12926 00001BF2 723C                    	JC	short BadSFT
 12927                                  	;;mov	bl,53 ; MSDOS 3.3
 12928                                  	;mov	bl,59 ; MSDOS 6.0
 12929 00001BF4 B33B                    	MOV	BL,SF_ENTRY.size
 12930 00001BF6 F6E3                    	MUL	BL
 12931                                  	;lea	di,[di+6]
 12932 00001BF8 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 12933 00001BFB 01C7                    	ADD	DI,AX
 12934                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 12935 00001BFD 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 12936                                  	;cmp	[es:di+31h],ax
 12937 00001C01 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 12938 00001C05 7529                    	JNZ	short BadSFT		; must match process
 12939 00001C07 26833D00                	cmp	word [es:di],0
 12940                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 12941 00001C0B 7423                    	JZ	short BadSFT		; must also be in use
 12942                                  	;mov	al,[si+19h]
 12943 00001C0D 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12944                                  	;test	al,80h
 12945 00001C10 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 12946 00001C12 7428                    	JZ	short CheckNoShare	; No. try local or device
 12947                                  
 12948                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 12949                                  	; FCBSHARE is a superset of FCBNETWORK.
 12950                                  
 12951 00001C14 50                      	PUSH	AX
 12952                                  	;and	al,0C0h
 12953 00001C15 24C0                    	AND	AL,FCBMASK
 12954                                  	;cmp	al,0C0h
 12955 00001C17 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 12956 00001C19 58                      	POP	AX
 12957 00001C1A 7516                    	JNZ	short CheckNet		; yes
 12958                                  ;
 12959                                  ;----- In share support -----
 12960                                  ;
 12961                                  	;call	far [cs:JShare+(11*4)]
 12962 00001C1C 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 12963 00001C21 720D                    	JC	short BadSFT
 12964                                  
 12965                                  ; 21/01/2024
 12966                                  %if 0
 12967                                  	JMP	SHORT CheckD
 12968                                  ;
 12969                                  ;----- End in share support -----
 12970                                  ;
 12971                                  	; 09/11/2022
 12972                                  	; (There is not any procedure/sub
 12973                                  	;  which calls or jumps to CheckFirClus here)
 12974                                  	;;;
 12975                                  CheckFirClus:
 12976                                  	;cmp     bx,[es:di+0Bh]
 12977                                  	; 07/12/2022
 12978                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 12979                                  	JNZ	short BadSFT
 12980                                  	;;;
 12981                                  %endif
 12982                                  
 12983                                  CheckD: 
 12984 00001C23 243F                    	AND	AL,3Fh
 12985                                  	;mov	ah,[es:di+5]
 12986 00001C25 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 12987 00001C29 80E43F                  	AND	AH,3Fh
 12988 00001C2C 38C4                    	CMP	AH,AL
 12989                                  	; 16/12/2022
 12990 00001C2E 74B2                    	jz	short BlastSFT_retn	; carry is clear
 12991                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12992                                  	;jnz	short BadSFT
 12993                                  ;CheckD_retn:
 12994                                  	;retn
 12995                                  BadSFT: 
 12996 00001C30 F9                      	STC
 12997 00001C31 C3                      	retn
 12998                                  				
 12999                                  CheckNet:
 13000                                  	; 17/05/2019 - Retro DOS v4.0
 13001                                  	
 13002                                  ;----- In net support -----
 13003                                  
 13004                                  	; MSDOS 3.3
 13005                                  	;;mov	ax,[si+1Ah]
 13006                                  	;mov	ax,[si+fcb_net_handle]
 13007                                  	;;cmp	ax,[es:di+1Dh]
 13008                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13009                                  	;jnz	short BadSFT
 13010                                  	;;cmp	ax,[es:di+19h]
 13011                                  	;cmp	ax,[ES:DI+sf_netid]
 13012                                  	;jnz     short BadSFT
 13013                                  	;;mov	ax,[si+1Eh]
 13014                                  	;mov	ax,[si+fcb_l_attr]
 13015                                  	;;cmp	ax,[es:di+1Bh]
 13016                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13017                                  	;jnz     short BadSFT
 13018                                  
 13019                                  	; MSDOS 6.0
 13020                                  	;mov	ax,[si+1Ch]
 13021 00001C32 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13022                                  	; 09/11/2022
 13023                                  	;cmp	ax,[es:di+0Bh] 
 13024 00001C35 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13025 00001C39 75F5                    	JNZ	short BadSFT
 13026                                  
 13027                                  ;----- END In net support -----
 13028                                  
 13029                                  CheckNet_retn:
 13030 00001C3B C3                      	retn
 13031                                  
 13032                                  CheckNoShare:
 13033                                  
 13034                                  ; 16/12/2022
 13035                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13036                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13037                                  ;	;test	al,40h
 13038                                  ;	test	AL,FCBDEVICE		; Device?
 13039                                  ;	;jnz	short $+2 ; 09/11/2022
 13040                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13041                                  
 13042                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13043                                  	;;mov	bx,[si+1Dh]
 13044                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13045                                  	;;cmp	bx,[es:di+1Dh]
 13046                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13047                                  	;jnz	short BadSFT
 13048                                  	;;mov	bl,[si+1Fh]
 13049                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13050                                  	;;cmp	bl,[es:di+1Fh]
 13051                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13052                                  	;jnz	short BadSFT
 13053                                  	;;mov	bl,[si+1Ah]
 13054                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13055                                  	;;mov	bh,[es:di+5]
 13056                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13057                                  	;xor	bh,bl
 13058                                  	;and	bh,0C0h
 13059                                  	;jnz	short BadSFT
 13060                                  	;;xor	bl,[es:di+2]
 13061                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13062                                  	;and	bl,0Fh
 13063                                  	;jnz	short BadSFT
 13064                                  	;push	di
 13065                                  	;push	si
 13066                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13067                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13068                                  	;;lea	si,[si+1]
 13069                                  	;LEA	SI,[SI+SYS_FCB.name]
 13070                                  	;;mov	cx,11
 13071                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13072                                  	;repe	cmpsb
 13073                                  	;pop	si
 13074                                  	;pop	di
 13075                                  	;jnz	short BadSFT
 13076                                  	;;mov	bx,[si+1Bh]
 13077                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13078                                  	;jmp	short CheckFirClus
 13079                                  
 13080                                  	; MSDOS 6.0
 13081                                  
 13082                                  	; SR;
 13083                                  	; The code below to match a local FCB with its SFT can no longer be
 13084                                  	; used. We just return a no-match status. This check is done right
 13085                                  	; at the top.
 13086                                  
 13087                                  CheckNoShareDev:
 13088                                  	;mov	bx,[si+1Ah]
 13089 00001C3C 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13090                                  	;cmp	bx,[es:di+7]
 13091 00001C3F 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13092 00001C43 75EB                    	JNZ	short BadSFT
 13093                                  	;mov	bx,[si+1Ch]
 13094 00001C45 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13095                                  	;cmp	bx,[es:di+9]
 13096 00001C48 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13097 00001C4C 75E2                    	JNZ	short BadSFT
 13098 00001C4E EBD3                    	JMP	short CheckD
 13099                                  
 13100                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13101                                  ;----------------------------------------------------------------------------
 13102                                  ;
 13103                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13104                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13105                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13106                                  ;	with PID
 13107                                  ;
 13108                                  ;   Inputs:	DS:SI point to FCB
 13109                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13110                                  ;		Carry clear -> OK ES:DI -> SFT
 13111                                  ;		Carry set -> error in ax
 13112                                  ;   Registers modified: ES,DI, AX
 13113                                  ;
 13114                                  ;----------------------------------------------------------------------------
 13115                                  
 13116                                  SFTFromFCB:
 13117                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13118                                  
 13119                                  	; 17/05/2019 - Retro DOS v4.0
 13120                                  
 13121 00001C50 50                      	push	ax
 13122 00001C51 53                      	push	bx
 13123                                  	;mov	al,[si+18h]
 13124 00001C52 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13125 00001C55 E88BFF                  	call	CheckFCB
 13126 00001C58 5B                      	pop	bx
 13127 00001C59 58                      	pop	ax
 13128                                  	;MOV	[CS:THISSFT],DI		; SS override
 13129                                  	;MOV	[CS:THISSFT+2],ES
 13130 00001C5A 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13131 00001C5F 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13132 00001C64 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13133                                  	
 13134                                  	; 09/11/2022 (MSDOS 5.0)
 13135                                  	; 31/05/2019
 13136 00001C66 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13137 00001C67 E841E8                  	call	save_world
 13138 00001C6A E86DFE                  	call	FCBRegen
 13139 00001C6D E824E8                  	call	restore_world		; use macro restore world
 13140 00001C70 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13141                                  
 13142                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13143 00001C71 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13144 00001C75 72C4                    	jc	short CheckNet_retn
 13145                                  
 13146                                  Set_SFT: 
 13147                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13148 00001C77 36C43E[9E05]            	les	di,[ss:THISSFT]
 13149                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13150 00001C7C 36FF36[3C03]            	push	word [ss:PROC_ID]
 13151                                  	;pop	word [es:di+31h]
 13152 00001C81 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13153 00001C85 C3                      	retn				; carry is clear
 13154                                  
 13155                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13156                                  ;----------------------------------------------------------------------------
 13157                                  ;
 13158                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13159                                  ;	unavailable FCB.
 13160                                  ;
 13161                                  ;   Inputs:	none.
 13162                                  ;   Outputs:	none.
 13163                                  ;   Registers modified: all
 13164                                  ;
 13165                                  ;----------------------------------------------------------------------------
 13166                                  
 13167                                  FCBHardErr:
 13168                                  	; 17/05/2019 - Retro DOS v4.0
 13169 00001C86 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13170                                  	;
 13171                                  	;mov	ax,23h
 13172 00001C8B B82300                  	MOV	AX,error_FCB_unavailable
 13173                                  	;;mov	byte [cs:ALLOWED],8
 13174                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13175 00001C8E 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13176                                  	
 13177                                  	;LES	BP,[CS:THISDPB]
 13178 00001C94 26C42E[8A05]            	les	bp,[es:THISDPB]
 13179                                  	
 13180 00001C99 BF0100                  	MOV	DI,1			; Fake some registers
 13181 00001C9C 89F9                    	MOV	CX,DI
 13182                                  	;mov	dx,[es:bp+0Bh]
 13183 00001C9E 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13184 00001CA2 E80D37                  	call	HARDERR
 13185 00001CA5 F9                      	STC
 13186 00001CA6 C3                      	retn
 13187                                  
 13188                                  ;============================================================================
 13189                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13190                                  ;============================================================================
 13191                                  ; 21/07/2018 - Retro DOS v3.0
 13192                                  ; 17/05/2019 - Retro DOS v4.0
 13193                                  
 13194                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13195                                  ;
 13196                                  ;	GetRR
 13197                                  ;	GetExtent
 13198                                  ;	SetExtent
 13199                                  ;	GetExtended
 13200                                  ;	GetRecSize
 13201                                  ;	FCBIO
 13202                                  ;	$FCB_OPEN
 13203                                  ;	$FCB_CREATE
 13204                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13205                                  ;	$FCB_RANDOM_READ_BLOCK
 13206                                  ;	$FCB_SEQ_READ
 13207                                  ;	$FCB_SEQ_WRITE
 13208                                  ;	$FCB_RANDOM_READ
 13209                                  ;	$FCB_RANDOM_WRITE
 13210                                  ;
 13211                                  ;	Revision history:
 13212                                  ;
 13213                                  ;		Created: ARR 4 April 1983
 13214                                  ;			 MZ  6 June  1983 completion of functions
 13215                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13216                                  ;				  times.  Change so successive closes work by
 13217                                  ;				  always returning OK.	Also, detect I/O to
 13218                                  ;				  already closed FCB and return EOF.
 13219                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13220                                  ;				  out of sft into FCB for reconnection
 13221                                  ;
 13222                                  ;	    A000   version 4.00	Jan. 1988
 13223                                  
 13224                                  ; Defintions for FCBOp flags
 13225                                  
 13226                                  RANDOM	equ 2				; random operation
 13227                                  FCBREAD equ 4				; doing a read
 13228                                  BLOCK	equ 8				; doing a block I/O
 13229                                  
 13230                                  ;Break <GetRR - return the random record field in DX:AX>
 13231                                  ;---------------------------------------------------------------------------
 13232                                  ;
 13233                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13234                                  ;	from the FCB pointed to by DS:SI
 13235                                  ;
 13236                                  ;   Inputs:	DS:SI point to an FCB
 13237                                  ;		BX has record size
 13238                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13239                                  ;   Registers modified: none
 13240                                  ;---------------------------------------------------------------------------
 13241                                  
 13242                                  GetRR:
 13243                                  	;mov	ax,[si+21h]
 13244 00001CA7 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13245                                  	;mov	dx,[si+23h]
 13246 00001CAA 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13247 00001CAD 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13248 00001CB0 7202                    	JB	short GetRRBye
 13249 00001CB2 30F6                    	XOR	DH,DH
 13250                                  GetRRBye:
 13251 00001CB4 C3                      	retn
 13252                                  
 13253                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13254                                  ;---------------------------------------------------------------------------
 13255                                  ;
 13256                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13257                                  ;	NR fields in the FCB.
 13258                                  ;
 13259                                  ;   Inputs:	DS:SI - point to FCB
 13260                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13261                                  ;   Registers modified: none
 13262                                  ;---------------------------------------------------------------------------
 13263                                  
 13264                                  GetExtent:
 13265                                  	;mov	al,[si+20h]
 13266 00001CB5 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13267                                  	;mov	dx,[si+0Ch]
 13268 00001CB8 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13269 00001CBB D0E0                    	SHL	AL,1
 13270 00001CBD D1EA                    	SHR	DX,1
 13271 00001CBF D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13272 00001CC1 88D4                    	MOV	AH,DL
 13273 00001CC3 88F2                    	MOV	DL,DH
 13274 00001CC5 30F6                    	XOR	DH,DH
 13275 00001CC7 C3                      	retn
 13276                                  
 13277                                  ;Break <SetExtent - update the extent/NR field>
 13278                                  ;---------------------------------------------------------------------------
 13279                                  ;
 13280                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13281                                  ;	fields
 13282                                  ;
 13283                                  ;   Inputs:	DS:SI point to FCB
 13284                                  ;		DX:AX is a record location in file
 13285                                  ;   Outputs:	Extent/NR fields are filled in
 13286                                  ;   Registers modified: CX
 13287                                  ;---------------------------------------------------------------------------
 13288                                  
 13289                                  SetExtent:
 13290 00001CC8 50                      	push	ax
 13291 00001CC9 52                      	push	dx
 13292 00001CCA 89C1                    	MOV	CX,AX
 13293 00001CCC 247F                    	AND	AL,7FH			; next rec field
 13294                                  	;mov	[si+20h],al
 13295 00001CCE 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13296 00001CD1 80E180                  	AND	CL,80H			; save upper bit
 13297 00001CD4 D1E1                    	SHL	CX,1
 13298 00001CD6 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13299 00001CD8 88E8                    	MOV	AL,CH
 13300 00001CDA 88D4                    	MOV	AH,DL
 13301                                  	;mov	[si+0Ch], ax
 13302 00001CDC 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13303 00001CDF 5A                      	pop	dx
 13304 00001CE0 58                      	pop	ax
 13305 00001CE1 C3                      	retn
 13306                                  
 13307                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13308                                  ;---------------------------------------------------------------------------
 13309                                  ;
 13310                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13311                                  ;
 13312                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13313                                  ;   Outputs:	DS:SI point to the FCB part
 13314                                  ;		zeroflag set if not extended fcb
 13315                                  ;   Registers modified: SI
 13316                                  ;---------------------------------------------------------------------------
 13317                                  
 13318                                  GetExtended:
 13319 00001CE2 89D6                    	MOV	SI,DX			; point to Something
 13320 00001CE4 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13321 00001CE7 7503                    	JNZ	short GetBye		; not there
 13322 00001CE9 83C607                  	ADD	SI,7			; point to FCB
 13323                                  GetBye:
 13324 00001CEC 39D6                    	CMP	SI,DX			; set condition codes
 13325                                  getextd_retn:
 13326 00001CEE C3                      	retn
 13327                                  
 13328                                  ;Break <GetRecSize - return in BX the FCB record size>
 13329                                  ;---------------------------------------------------------------------------
 13330                                  ;
 13331                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13332                                  ;
 13333                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13334                                  ;   Outputs:	BX contains the record size
 13335                                  ;   Registers modified: None
 13336                                  ;---------------------------------------------------------------------------
 13337                                  
 13338                                  	; 22/01/2024
 13339                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13340                                  GetRecSize:
 13341                                  	;mov	bx,[si+0Eh]
 13342 00001CEF 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13343 00001CF2 09DB                    	OR	BX,BX			; is it nul?
 13344                                  	;jz	short getextd_retn
 13345                                  	; 22/01/2024 (BugFix)
 13346 00001CF4 75F8                    	jnz	short getextd_retn
 13347                                  	;MOV	BX,128			; use default size
 13348 00001CF6 B380                    	mov	bl,128
 13349                                  	;mov	[si+0Eh],bx
 13350 00001CF8 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13351 00001CFB C3                      	retn
 13352                                  
 13353                                  ;BREAK <FCBIO - do internal FCB I/O>
 13354                                  ;---------------------------------------------------------------------------
 13355                                  ;
 13356                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13357                                  ;
 13358                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13359                                  ;		DS:DX point to FCB
 13360                                  ;		CX may have count of number of records to xfer
 13361                                  ;   Outputs:	AL has error code
 13362                                  ;   Registers modified: all
 13363                                  ;---------------------------------------------------------------------------
 13364                                  
 13365                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13366                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13367                                  FCBIO:
 13368                                  
 13369                                  FEOF	EQU	1
 13370                                  FTRIM	EQU	2
 13371                                  
 13372                                  %define	FCBErr	byte [bp-1]  ; byte	
 13373                                  %define	cRec	word [bp-3]  ; word	
 13374                                  ;%define RecPos	word [bp-7]  ; dword
 13375                                  %define RecPosL	word [bp-7]  ; word
 13376                                  %define RecPosH	word [bp-5]  ; word
 13377                                  %define	RecSize	word [bp-9]  ; word
 13378                                  ;%define bPos	word [bp-13] ; dword
 13379                                  %define bPosL	word [bp-13] ; word
 13380                                  %define bPosH	word [bp-11] ; word
 13381                                  %define cByte	word [bp-15] ; word	
 13382                                  %define cResult word [bp-17] ; word	
 13383                                  %define	cRecRes	word [bp-19] ; word
 13384                                  %define	FCBOp	byte [bp-20] ; byte
 13385                                  
 13386                                  	;Enter
 13387                                  
 13388 00001CFC 55                      	push	bp
 13389 00001CFD 89E5                    	mov	bp,sp
 13390 00001CFF 83EC14                  	sub	sp,20
 13391                                  	;mov	[bp-20],al
 13392 00001D02 8846EC                  	MOV	FCBOp,AL
 13393                                  	;mov	byte [bp-1],0
 13394 00001D05 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13395 00001D09 E8D6FF                  	call	GetExtended		;   FCB = GetExtended ();
 13396                                  	;test	byte [bp-20],8
 13397 00001D0C F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13398 00001D10 7503                    	JNZ	short GetPos
 13399 00001D12 B90100                  	MOV	CX,1			;	cRec = 1;
 13400                                  GetPos:
 13401                                  	;mov	[bp-3],cx
 13402 00001D15 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13403 00001D18 E89AFF                  	call	GetExtent		;   RecPos = GetExtent ();
 13404 00001D1B E8D1FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13405                                  	;mov	[bp-9],bx
 13406 00001D1E 895EF7                  	MOV	RecSize,BX
 13407                                  	;test	byte [bp-20],2
 13408 00001D21 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13409 00001D25 7403                    	JZ	short GetRec
 13410 00001D27 E87DFF                  	call	GetRR			;	RecPos = GetRR ();
 13411                                  GetRec:
 13412                                  	;mov	[bp-7],ax
 13413 00001D2A 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13414                                  	;mov	[bp-5],dx
 13415 00001D2D 8956FB                  	MOV	RecPosH,DX
 13416 00001D30 E895FF                  	call	SetExtent		;   SetExtent (RecPos);
 13417                                  	;mov	ax,[bp-5]
 13418 00001D33 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13419 00001D36 F7E3                    	MUL	BX
 13420 00001D38 89C7                    	MOV	DI,AX
 13421                                  	;mov	ax,[bp-7]
 13422 00001D3A 8B46F9                  	MOV	AX,RecPosL
 13423 00001D3D F7E3                    	MUL	BX
 13424 00001D3F 01FA                    	ADD	DX,DI
 13425                                  	;mov	[bp-13],ax
 13426 00001D41 8946F3                  	MOV	bPosL,AX
 13427                                  	;mov	[bp-11],dx
 13428 00001D44 8956F5                  	MOV	bPosH,DX
 13429                                  	;mov	ax,[bp-3]
 13430 00001D47 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13431 00001D4A F7E3                    	MUL	BX
 13432                                  	;mov	[bp-15],ax
 13433 00001D4C 8946F1                  	MOV	cByte,AX
 13434                                  
 13435                                  ;hkn; 	SS override
 13436 00001D4F 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13437 00001D54 83D200                  	ADC	DX,0
 13438 00001D57 7419                    	JZ	short DoOper
 13439                                  	;mov	byte [bp-1],2
 13440 00001D59 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13441                                  
 13442                                  ;hkn; 	SS override
 13443 00001D5D 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13444 00001D61 F7D8                    	NEG	AX
 13445 00001D63 7501                    	JNZ	short DoDiv
 13446 00001D65 48                      	DEC	AX
 13447                                  DoDiv:
 13448 00001D66 31D2                    	XOR	DX,DX
 13449 00001D68 F7F3                    	DIV	BX
 13450                                  	;mov	[bp-3],ax
 13451 00001D6A 8946FD                  	MOV	cRec,AX
 13452 00001D6D F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13453                                  	;mov	[bp-15],ax
 13454 00001D6F 8946F1                  	MOV	cByte,AX		;	}
 13455                                  DoOper:
 13456 00001D72 31DB                    	XOR	BX,BX
 13457                                  	;mov	[bp-17],bx
 13458 00001D74 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13459                                  	;cmp	[bp-15],bx
 13460 00001D77 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13461 00001D7A 7506                    	JNZ	short DoGetExt
 13462                                  	;test	byte [bp-1],2
 13463 00001D7C F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13464                                  	;JZ	short DoGetExt
 13465                                  	;JMP	short SkipOp
 13466                                  	; 16/12/2022
 13467 00001D80 7576                    	jnz	short SkipOp
 13468                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13469                                  	;JZ	short DoGetExt
 13470                                  	;JMP	short SkipOp
 13471                                  DoGetExt:
 13472 00001D82 E8CBFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13473 00001D85 730F                    	JNC	short ContinueOp
 13474                                  FCBDeath:
 13475 00001D87 E819E9                  	call	FCB_RET_ERR		; signal error, map for extended
 13476                                  	;mov	word [bp-19],0
 13477 00001D8A C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13478                                  	;mov	byte [bp-1],1
 13479 00001D8F C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13480 00001D93 E9EF00                  	JMP	FCBSave 		; bam!
 13481                                  ContinueOp:
 13482                                  	;mov	ax,[si+10h]
 13483 00001D96 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 13484                                  	;mov	[es:di+11h],ax
 13485 00001D99 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13486                                  	;mov	ax,[si+12h]
 13487 00001D9D 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13488                                  	;mov	[es:di+13h],ax
 13489 00001DA0 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13490                                  	;mov	ax,[bp-13]
 13491 00001DA4 8B46F3                  	MOV	AX,bPosL
 13492                                  	;mov	dx,[bp-11]
 13493 00001DA7 8B56F5                  	MOV	DX,bPosH
 13494                                  	;mov	[es:di+15h],ax
 13495 00001DAA 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13496                                  	;xchg	dx,[es:di+17h]
 13497 00001DAE 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13498 00001DB2 52                      	PUSH	DX			; save away Open age.
 13499                                  	;mov	cx,[bp-15]
 13500 00001DB3 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13501                                  
 13502                                  ;hkn; DOS_Read is in DOSCODE
 13503 00001DB6 BF[5333]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13504                                  	;test	byte [bp-20],4
 13505 00001DB9 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13506 00001DBD 7503                    	JNZ	short DoContext
 13507                                  
 13508                                  ;hkn; DOS_Write is in DOSCODE
 13509 00001DBF BF[6B35]                	MOV	DI,DOS_WRITE
 13510                                  DoContext:
 13511 00001DC2 55                      	push	bp
 13512 00001DC3 1E                      	push	ds
 13513 00001DC4 56                      	push	si
 13514                                  
 13515                                  ;hkn; SS is DOSDATA
 13516 00001DC5 16                      	push	ss
 13517 00001DC6 1F                      	pop	ds
 13518                                  
 13519                                  ;; Fix for disk full
 13520 00001DC7 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE	
 13521                                  	
 13522 00001DC9 5E                      	pop	si
 13523 00001DCA 1F                      	pop	ds
 13524 00001DCB 5D                      	pop	bp
 13525 00001DCC 72B9                    	JC	short FCBDeath
 13526                                  	
 13527 00001DCE 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13528 00001DD4 740A                    	JZ	short NODSKFULL
 13529 00001DD6 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13530                                  	;mov	byte [bp-1],1 
 13531 00001DDC C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13532                                  NODSKFULL:
 13533                                  ;; Fix for disk full
 13534                                  	;mov	[bp-17],cx
 13535 00001DE0 894EEF                  	MOV	cResult,CX
 13536 00001DE3 E833FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13537                                  	;pop	word [es:di+17h]	
 13538 00001DE6 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13539                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 13540                                  	;mov	ax,[es:di+11h]
 13541 00001DEA 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13542                                  	;mov	[si+10h],ax
 13543 00001DEE 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13544                                  	;mov	ax,[es:di+13h]
 13545 00001DF1 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13546                                  	;mov	[si+12h],ax
 13547 00001DF5 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13548                                  					;	}
 13549                                  SkipOp:
 13550                                  	;mov	ax,[bp-17]
 13551 00001DF8 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13552 00001DFB 31D2                    	XOR	DX,DX
 13553                                  	;div	word [bp-9]
 13554 00001DFD F776F7                  	DIV	RecSize
 13555                                  	;mov	[bp-19],ax
 13556 00001E00 8946ED                  	MOV	cRecRes,AX
 13557                                  	;add	[bp-7],ax
 13558 00001E03 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13559                                  	;adc	word [bp-5],0
 13560 00001E06 8356FB00                	ADC	RecPosH,0
 13561                                  
 13562                                  ; If we have not gotten the expected number of records, we signal an EOF
 13563                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13564                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13565                                  ; do we.
 13566                                  
 13567                                  	;cmp	ax,[bp-3]
 13568 00001E0A 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13569 00001E0D 7411                    	JZ	short TryBlank
 13570                                  	;test	byte [bp-20],4
 13571 00001E0F F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13572 00001E13 7507                    	JNZ	short SetEOF
 13573                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13574                                  	; MSDOS 3.3
 13575                                  	;;test	word [es:di+5],80h
 13576                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13577                                  	;JNZ	short TryBlank
 13578                                  	; MSDOS 5.0 & MSDOS 6.0
 13579                                  	;test	byte [es:di+5],80h
 13580 00001E15 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13581 00001E1A 7504                    	jnz	short TryBlank
 13582                                  
 13583                                  SetEOF:
 13584                                  	;mov	byte [bp-1],1
 13585 00001E1C C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13586                                  TryBlank:				;
 13587 00001E20 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13588 00001E22 7426                    	JZ	short SetExt
 13589                                  	;add	word [bp-7],1
 13590 00001E24 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13591                                  	;adc	word [bp-5],0
 13592 00001E28 8356FB00                	ADC	RecPosH,0
 13593                                  	;test	byte [bp-20],4
 13594 00001E2C F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13595 00001E30 7418                    	JZ	short SetExt
 13596                                  	;inc	word [bp-19]
 13597 00001E32 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13598                                  	;mov	byte [bp-1],3
 13599 00001E35 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13600                                  	;mov	cx,[bp-9]
 13601 00001E39 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13602 00001E3C 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13603 00001E3E 30C0                    	XOR	AL,AL
 13604                                  ;hkn; 	SS override
 13605 00001E40 36C43E[2C03]            	les     di,[ss:DMAADD]
 13606                                  	;add	di,[bp-17]
 13607 00001E45 037EEF                  	ADD	DI,cResult
 13608 00001E48 F3AA                    	REP	STOSB			;   }	}
 13609                                  SetExt:
 13610                                  	;mov	dx,[bp-5]
 13611 00001E4A 8B56FB                  	MOV	DX,RecPosH
 13612                                  	;mov	ax,[bp-7]
 13613 00001E4D 8B46F9                  	MOV	AX,RecPosL
 13614                                  	;test	byte [bp-20],2
 13615 00001E50 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 13616 00001E54 7406                    	JZ	short DoSetExt
 13617                                  	;test	byte [bp-20],8
 13618 00001E56 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 13619 00001E5A 7403                    	JZ	short TrySetRR
 13620                                  DoSetExt:
 13621 00001E5C E869FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 13622                                  TrySetRR:
 13623                                  	;test	byte [bp-20],8
 13624 00001E5F F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13625 00001E63 740F                    	JZ	short TryReturn
 13626                                  	;mov	[si+21h],ax
 13627 00001E65 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 13628                                  	;mov	[si+23h],dl
 13629 00001E68 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 13630                                  	;cmp	word [si+0Eh],64
 13631 00001E6B 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 13632 00001E6F 7303                    	JAE	short TryReturn
 13633                                  	;mov	[si+24h],dh
 13634 00001E71 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 13635                                  TryReturn: 
 13636                                  	;test	byte [bp-20],4
 13637 00001E74 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 13638 00001E78 750B                    	JNZ	short FCBSave
 13639 00001E7A 1E                      	push	ds			;	FCB->FDate = date;
 13640 00001E7B E8C8EC                  	call	DATE16			;	FCB->FTime = time;
 13641 00001E7E 1F                      	pop	ds
 13642                                  	;mov	[si+14h],ax
 13643 00001E7F 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13644                                  	;mov	[si+16h],dx
 13645 00001E82 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 13646                                  FCBSave: 
 13647                                  	;test	byte [bp-20],8
 13648 00001E85 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13649 00001E89 7409                    	jz	short DoReturn
 13650                                  	;mov	cx,[bp-19]
 13651 00001E8B 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 13652 00001E8E E839E6                  	call    Get_User_Stack
 13653                                  	;mov	[si+4],cx
 13654 00001E91 894C04                  	MOV	[SI+user_env.user_CX],CX
 13655                                  DoReturn:
 13656                                  	;mov	al,[bp-1]
 13657 00001E94 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 13658                                  	;Leave	
 13659 00001E97 89EC                    	mov     sp,bp
 13660 00001E99 5D                      	pop     bp
 13661 00001E9A C3                      	retn
 13662                                  
 13663                                  ; 22/07/2018 - Retro DOS v3.0
 13664                                  
 13665                                  ;Break <$FCB_Open - open an old-style FCB>
 13666                                  ;---------------------------------------------------------------------------
 13667                                  ;
 13668                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 13669                                  ;	for us and asked to have the rest filled in.
 13670                                  ;
 13671                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13672                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13673                                  ;		FCB has the following fields filled in:
 13674                                  ;		    Time/Date Extent/NR Size
 13675                                  ;---------------------------------------------------------------------------
 13676                                  
 13677                                  _$FCB_OPEN:			; System call 15
 13678                                  
 13679 00001E9B B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 13680                                  
 13681                                  ;hkn; DOS_Open is in DOSCODE
 13682 00001E9E B9[DA2B]                	MOV	CX,DOS_OPEN
 13683                                  
 13684                                  ; The following is common code for Creation and openning of FCBs. AX is
 13685                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 13686                                  ; the FCB
 13687                                  
 13688                                  DoAccess:
 13689 00001EA1 1E                      	push	ds
 13690 00001EA2 52                      	push	dx
 13691 00001EA3 51                      	push	cx
 13692 00001EA4 50                      	push	ax			; save FCB pointer away
 13693                                  
 13694                                  ;hkn; 	OpenBuf is in DOSDATA
 13695 00001EA5 BF[BE03]                	MOV	DI,OPENBUF
 13696 00001EA8 E81E4D                  	call	TransFCB		; crunch the fcb
 13697 00001EAB 58                      	pop	ax
 13698 00001EAC 59                      	pop	cx
 13699 00001EAD 5A                      	pop	dx
 13700 00001EAE 1F                      	pop	ds			; get fcb
 13701 00001EAF 7303                    	JNC	short FindFCB		; everything seems ok
 13702                                  FCBOpenErr:
 13703                                  	; AL has error code
 13704 00001EB1 E9EFE7                  	jmp	FCB_RET_ERR
 13705                                  FindFCB:
 13706 00001EB4 E82BFE                  	call	GetExtended		; DS:SI will point to FCB
 13707                                  
 13708                                  	; 17/05/2019 - Retro DOS v4.0
 13709                                  
 13710                                  	; MSDOS 3.3
 13711                                  	;call	LRUFCB
 13712                                  	;jc	short HardMessage
 13713                                  
 13714                                  	; MSDOS 6.0
 13715 00001EB7 50                      	push	ax
 13716 00001EB8 B001                    	mov	al,1			;indicate Open/Create operation
 13717 00001EBA E82CFB                  	call	LRUFCB			; get a sft entry (no error)
 13718 00001EBD 58                      	pop	ax
 13719 00001EBE 722A                    	jc	short HardMessage
 13720                                  	
 13721                                  	;mov	word [es:di+2],8000h
 13722 00001EC0 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 13723 00001EC6 1E                      	push	ds
 13724 00001EC7 56                      	push	si	
 13725 00001EC8 53                      	push	bx			; save fcb pointer
 13726 00001EC9 89CE                    	MOV	SI,CX
 13727                                  
 13728                                  ;hkn; SS is DOSDATA
 13729 00001ECB 16                      	push	ss
 13730 00001ECC 1F                      	pop	ds			    ; let DOS_Open see variables
 13731 00001ECD FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 13732 00001ECF 5B                      	pop	bx
 13733 00001ED0 5E                      	pop	si
 13734 00001ED1 1F                      	pop	ds			; get fcb
 13735                                  
 13736                                  ;hkn; SS override
 13737 00001ED2 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 13738 00001ED7 7318                    	JNC	short FCBOK		; operation succeeded
 13739                                  failopen:
 13740 00001ED9 50                      	PUSH	AX
 13741 00001EDA B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 13742 00001EDC E8EEFC                  	call	BlastSFT
 13743 00001EDF 58                      	POP	AX
 13744                                  	;cmp	ax,4
 13745 00001EE0 83F804                  	CMP	AX,error_too_many_open_files
 13746 00001EE3 7405                    	JZ	short HardMessage
 13747                                  	;cmp	ax,24h
 13748 00001EE5 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 13749 00001EE8 7505                    	jnz	short DeadFCB
 13750                                  HardMessage:
 13751 00001EEA 50                      	PUSH	AX
 13752 00001EEB E898FD                  	call	FCBHardErr
 13753 00001EEE 58                      	POP	AX
 13754                                  DeadFCB:
 13755                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13756                                  	;jmp	FCB_RET_ERR
 13757 00001EEF EBC0                    	jmp	short FCBOpenErr
 13758                                  FCBOK:
 13759                                  	; MSDOS 6.0
 13760 00001EF1 E8E8F3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 13761 00001EF4 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 13762 00001EF6 E8CD54                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 13763 00001EF9 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 13764                                  ;SR;
 13765                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 13766                                  ; LocalSFT variable to reflect this.
 13767                                  
 13768 00001EFB 36893E[5D10]            	mov	[ss:LocalSFT],di
 13769 00001F00 368C06[5F10]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 13770                                  ;;SR;
 13771                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 13772                                  ;;
 13773                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 13774                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 13775                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 13776                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 13777                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 13778                                  
 13779                                  FCBOK2:
 13780                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13781 00001F05 26FF05                  	inc	word [es:di]
 13782                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 13783 00001F08 E80EFA                  	call	SaveFCBInfo
 13784                                  	; MSDOS 3.3
 13785                                  	;call	SetOpenAge
 13786                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13787                                  	;test	word [es:di+5],80h
 13788                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13789 00001F0B 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 13790 00001F10 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 13791 00001F12 8A04                    	MOV	AL,[SI]			; get drive byte
 13792 00001F14 E8394C                  	call	GETTHISDRV		; convert
 13793                                  	;INC	AL
 13794                                  	; 17/12/2022
 13795 00001F17 40                      	inc	ax
 13796 00001F18 8804                    	MOV	[SI],AL			; stash in good drive letter
 13797                                  FCBNoDrive:
 13798                                  	;mov	word [si+0Eh],128
 13799 00001F1A C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 13800                                  
 13801                                  	;mov	ax,[es:di+0Dh]
 13802 00001F1F 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 13803                                  	;mov	[si+16h],ax
 13804 00001F23 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 13805                                  	;mov	ax,[es:di+0Fh]
 13806 00001F26 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 13807                                  	;mov	[si+14h],ax
 13808 00001F2A 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13809                                  	;mov	ax,[es:di+11h]
 13810 00001F2D 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 13811                                  	;mov	[si+10h],ax
 13812 00001F31 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13813                                  	;mov	ax,[es:di+13h]
 13814 00001F34 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13815                                  	;mov	[si+12h],ax
 13816 00001F38 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13817 00001F3B 31C0                    	XOR	AX,AX			; convenient zero
 13818                                  	;mov	[si+0Ch],ax
 13819 00001F3D 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 13820                                  
 13821                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 13822                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 13823                                  
 13824                                  ;hkn; 	SS override
 13825 00001F40 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 13826                                  	;mov	ah,[es:di+4]
 13827 00001F45 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 13828                                  OpenScan:
 13829                                  	;cmp	al,[si+18h]
 13830 00001F49 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 13831 00001F4C 7407                    	JZ	short SkipCheck
 13832 00001F4E 50                      	push	ax			; preserve count
 13833 00001F4F E891FC                  	call	CheckFCB		; do they match
 13834 00001F52 58                      	pop	ax			; get count back
 13835 00001F53 7309                    	JNC	short OpenFound		; found a match!
 13836                                  SkipCheck:
 13837 00001F55 FEC0                    	INC	AL			; advance to next FCB
 13838 00001F57 38E0                    	CMP	AL,AH			; table full?
 13839 00001F59 75EE                    	JNZ	short OpenScan		; no, go for more
 13840                                  OpenDone:
 13841 00001F5B 30C0                    	xor	al,al			; return success
 13842 00001F5D C3                      	retn
 13843                                  
 13844                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 13845                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 13846                                  ; Consider:
 13847                                  ;
 13848                                  ;   open (foo)	delete (foo) open (bar)
 13849                                  ;
 13850                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 13851                                  ; foo even though foo is no longer needed; this is due to the server closing
 13852                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 13853                                  ; If we were to CLOSE bar, the server would then close the only reference to
 13854                                  ; bar and subsequent I/O would be lost to the redirector.
 13855                                  ;
 13856                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 13857                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 13858                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 13859                                  ; around. This will allow us to access the same file through multiple network
 13860                                  ; connections and NOT prematurely terminate when the ref count on one
 13861                                  ; connection goes to zero.
 13862                                  
 13863                                  OpenFound:
 13864                                  	;mov	[si+18h],al
 13865 00001F5E 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 13866 00001F61 26FF05                  	inc	word [es:di]
 13867                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13868                                  					; remember this new invocation
 13869 00001F64 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 13870                                  	;mov	[es:di+15h],ax
 13871 00001F68 26894515                	MOV	[ES:DI+sf_LRU],AX
 13872                                  ;
 13873                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 13874                                  ; blast it to prevent other reuse.
 13875                                  ;
 13876 00001F6C 16                      	push	ss
 13877 00001F6D 1F                      	pop	ds
 13878 00001F6E C43E[9E05]              	LES	DI,[THISSFT]
 13879 00001F72 26FF0D                  	dec	word [es:di]
 13880                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13881                                  					; free the newly allocated SFT
 13882 00001F75 E88654                  	call	ShareEnd
 13883 00001F78 B043                    	MOV	AL,'C'	 ; 43h
 13884 00001F7A E850FC                  	call	BlastSFT
 13885 00001F7D EBDC                    	JMP	short OpenDone
 13886                                  
 13887                                  ;BREAK	<$FCB_Create - create a new directory entry>
 13888                                  ;----------------------------------------------------------------------------
 13889                                  ;
 13890                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 13891                                  ;	FCB for us and asked to have the rest filled in.
 13892                                  ;
 13893                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13894                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13895                                  ;		FCB has the following fields filled in:
 13896                                  ;		    Time/Date Extent/NR Size
 13897                                  ;----------------------------------------------------------------------------
 13898                                  
 13899                                  _$FCB_CREATE:		; System call 22
 13900                                  
 13901                                  ;hkn; DOS_Create is in DOSCODE
 13902 00001F7F B9[B02A]                	MOV	CX,DOS_CREATE		; routine to call
 13903 00001F82 31C0                    	XOR	AX,AX			; attributes to create
 13904 00001F84 E85BFD                  	call	GetExtended		; get extended FCB
 13905 00001F87 7403                    	JZ	short DoAccessJ		; not an extended FCB
 13906 00001F89 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 13907                                  DoAccessJ:
 13908 00001F8C E912FF                  	JMP	DoAccess		; do dirty work
 13909                                  
 13910                                  ; 22/07/2018 - Retro DOS v3.0
 13911                                  
 13912                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13913                                  ;----------------------------------------------------------------------------
 13914                                  ;
 13915                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13916                                  ;	and write a number of blocks from it.
 13917                                  ;
 13918                                  ;   Inputs:	DS:DX point to an FCB
 13919                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13920                                  ;		AL <> 0 Not enough room on disk for the output
 13921                                  ;
 13922                                  ;----------------------------------------------------------------------------
 13923                                  
 13924                                  _$FCB_RANDOM_WRITE_BLOCK:
 13925                                  	;mov	AL,0Ah	
 13926 00001F8F B00A                    	MOV	AL,RANDOM+BLOCK
 13927 00001F91 E968FD                  	JMP	FCBIO
 13928                                  
 13929                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13930                                  ;----------------------------------------------------------------------------
 13931                                  ;
 13932                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13933                                  ;	and read a number of blocks from it.
 13934                                  ;
 13935                                  ;   Inputs:	DS:DX point to an FCB
 13936                                  ;   Outputs:	AL = error codes defined above
 13937                                  ;
 13938                                  ;----------------------------------------------------------------------------
 13939                                  
 13940                                  _$FCB_RANDOM_READ_BLOCK:
 13941                                  	;mov	AL,0Eh	
 13942 00001F94 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13943 00001F96 E963FD                  	JMP	FCBIO
 13944                                  
 13945                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13946                                  ;----------------------------------------------------------------------------
 13947                                  ;
 13948                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13949                                  ;	memory
 13950                                  ;
 13951                                  ;   Inputs:	DS:DX point to an FCB
 13952                                  ;   Outputs:	AL = error codes defined above
 13953                                  ;
 13954                                  ;----------------------------------------------------------------------------
 13955                                  
 13956                                  _$FCB_SEQ_READ:
 13957                                  	;mov	AL,4	
 13958 00001F99 B004                    	MOV	AL,FCBREAD
 13959 00001F9B E95EFD                  	JMP	FCBIO
 13960                                  
 13961                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13962                                  ;----------------------------------------------------------------------------
 13963                                  ;
 13964                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13965                                  ;	file
 13966                                  ;
 13967                                  ;   Inputs:	DS:DX point to an FCB
 13968                                  ;   Outputs:	AL = error codes defined above
 13969                                  ;
 13970                                  ;----------------------------------------------------------------------------
 13971                                  
 13972                                  _$FCB_SEQ_WRITE:
 13973 00001F9E B000                    	MOV	AL,0
 13974 00001FA0 E959FD                  	jmp	FCBIO
 13975                                  
 13976                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13977                                  ;----------------------------------------------------------------------------
 13978                                  ;
 13979                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13980                                  ;	record from it.
 13981                                  ;
 13982                                  ;   Inputs:	DS:DX point to an FCB
 13983                                  ;   Outputs:	AL = error codes defined above
 13984                                  ;
 13985                                  ;----------------------------------------------------------------------------
 13986                                  
 13987                                  _$FCB_RANDOM_READ:
 13988                                  	;mov	AL,6	
 13989 00001FA3 B006                    	MOV	AL,RANDOM+FCBREAD
 13990 00001FA5 E954FD                  	jmp	FCBIO			; single block
 13991                                  
 13992                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13993                                  ;----------------------------------------------------------------------------
 13994                                  ;
 13995                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13996                                  ;	a record to it.
 13997                                  ;
 13998                                  ;   Inputs:	DS:DX point to an FCB
 13999                                  ;   Outputs:	AL = error codes defined above
 14000                                  ;
 14001                                  ;----------------------------------------------------------------------------
 14002                                  
 14003                                  _$FCB_RANDOM_WRITE:
 14004                                  	;mov	AL,2	
 14005 00001FA8 B002                    	MOV	AL,RANDOM
 14006 00001FAA E94FFD                  	jmp	FCBIO
 14007                                  
 14008                                  ;============================================================================
 14009                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14010                                  ;============================================================================
 14011                                  ; 22/07/2018 - Retro DOS v3.0
 14012                                  ; 17/05/2019 - Retro DOS v4.0
 14013                                  
 14014                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14015                                  
 14016                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14017                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14018                                  
 14019                                  ;**	Search.asm
 14020                                  ;----------------------------------------------------------------------------
 14021                                  ;	Directory search system calls.
 14022                                  ;	These will be passed direct text of the pathname from the user. 
 14023                                  ;	They will need to be passed through the macro expander prior to
 14024                                  ;	being sent through the low-level stuff. 
 14025                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14026                                  ;
 14027                                  ;	$Dir_Search_First	  written
 14028                                  ;	$Dir_Search_Next	  written
 14029                                  ;	$Find_First	  written
 14030                                  ;	$Find_Next		  written
 14031                                  ;	PackName		  written
 14032                                  ;
 14033                                  ;	Modification history:
 14034                                  ;
 14035                                  ;	  Created: ARR 4 April 1983
 14036                                  
 14037                                  ;----------------------------------------------------------------------------
 14038                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14039                                  ;
 14040                                  ; Inputs:
 14041                                  ;	DS:DX Points to unopenned FCB
 14042                                  ; Function:
 14043                                  ;	Directory is searched for first matching entry and the directory
 14044                                  ;	entry is loaded at the disk transfer address
 14045                                  ; Returns:
 14046                                  ;	AL = -1 if no entries matched, otherwise 0
 14047                                  ;----------------------------------------------------------------------------
 14048                                  
 14049                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14050                                  
 14051                                  _$DIR_SEARCH_FIRST:
 14052 00001FAD 368916[A605]            	MOV	[SS:THISFCB],DX
 14053 00001FB2 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14054 00001FB7 89D6                    	MOV	SI,DX
 14055 00001FB9 803CFF                  	CMP	BYTE [SI],0FFH
 14056 00001FBC 7503                    	JNZ	short NORMFCB4
 14057 00001FBE 83C607                  	ADD	SI,7			; Point to drive select byte
 14058                                  NORMFCB4:
 14059 00001FC1 FF34                    	push	word [SI]		; Save original drive byte for later
 14060                                  
 14061 00001FC3 16                      	push	ss
 14062 00001FC4 07                      	pop	es			; get es to address DOSGroup
 14063                                  
 14064 00001FC5 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14065 00001FC8 E8FE4B                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14066 00001FCB 7304                    	JNC	short SearchIt		; no error, go and look
 14067 00001FCD 5B                      	pop	bx			; Clean stack
 14068                                  
 14069                                  ; Error code is in AX
 14070                                  
 14071                                  	; 09/11/2022
 14072                                  dcf_errj:
 14073 00001FCE E9D2E6                  	jmp	FCB_RET_ERR		; error
 14074                                  
 14075                                  SearchIt:
 14076 00001FD1 16                      	push	ss
 14077 00001FD2 1F                      	pop	ds			; get ready for search
 14078 00001FD3 FF36[2C03]              	push	word [DMAADD]
 14079 00001FD7 FF36[2E03]              	push	word [DMAADD+2]
 14080 00001FDB C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14081 00001FE1 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14082                                  	; MSDOS 3.3
 14083                                  	;call	DOS_SEARCH_FIRST
 14084                                  	; MSDOS 6.0
 14085 00001FE5 E88401                  	call	GET_FAST_SEARCH		; search
 14086 00001FE8 8F06[2E03]              	pop	word [DMAADD+2]
 14087 00001FEC 8F06[2C03]              	pop	word [DMAADD]
 14088 00001FF0 7303                    	JNC	short SearchSet		; no error, transfer info
 14089 00001FF2 5B                      	pop	bx			; Clean stack
 14090                                  
 14091                                  ; Error code is in AX
 14092                                  
 14093                                  	; 09/11/2022
 14094                                  	;jmp	FCB_RET_ERR
 14095 00001FF3 EBD9                    	jmp	short dcf_errj
 14096                                  
 14097                                  ; The search was successful (or the search-next). We store the information
 14098                                  ; into the user's FCB for continuation.
 14099                                  
 14100                                  SearchSet:
 14101 00001FF5 BE[BE04]                	MOV	SI,SEARCHBUF
 14102 00001FF8 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14103 00001FFC F606[6C05]FF            	TEST	byte [EXTFCB],0FFh		;
 14104 00002001 7403                    	JZ	short NORMFCB1
 14105 00002003 83C707                  	ADD	DI,7			; Point past the extension
 14106                                  NORMFCB1:
 14107 00002006 5B                      	pop	bx			; Get original drive byte
 14108 00002007 08DB                    	OR	BL,BL
 14109 00002009 7506                    	JNZ	short SearchDrv
 14110 0000200B 8A1E[3603]              	MOV	BL,[CURDRV]
 14111 0000200F FEC3                    	INC	BL
 14112                                  SearchDrv:
 14113 00002011 AC                      	LODSB				; Get correct search contin drive byte
 14114 00002012 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14115 00002014 47                      	INC	DI
 14116                                  	;STOSB				; Store the correct "user" drive byte
 14117                                  					;  at the start of the search info
 14118 00002015 B90A00                  	MOV	CX,20/2
 14119 00002018 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14120 0000201A 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14121                                  					;   byte to AL
 14122 0000201C AA                      	STOSB				; Search contin drive byte at end of
 14123                                  					;   contin info
 14124 0000201D C43E[2C03]              	LES	DI,[DMAADD]
 14125 00002021 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14126 00002026 740D                    	JZ	short NORMFCB2
 14127 00002028 B0FF                    	MOV	AL,0FFh
 14128 0000202A AA                      	STOSB
 14129 0000202B FEC0                    	INC	AL
 14130                                  	;MOV	CX,5
 14131                                  	; 17/12/2022
 14132 0000202D B105                    	mov	cl,5
 14133 0000202F F3AA                    	REP	STOSB
 14134 00002031 A0[6D05]                	MOV	AL,[SATTRIB]
 14135 00002034 AA                      	STOSB
 14136                                  NORMFCB2:
 14137 00002035 88D8                    	MOV	AL,BL			; User Drive byte
 14138 00002037 AA                      	STOSB
 14139                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14140                                  	; 17/12/2022
 14141 00002038 B110                    	mov	cl,16
 14142 0000203A F3A5                    	REP	MOVSW
 14143 0000203C E961E6                  	jmp	FCB_RET_OK
 14144                                  
 14145                                  ;----------------------------------------------------------------------------
 14146                                  ;
 14147                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14148                                  ;
 14149                                  ; Inputs:
 14150                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14151                                  ; Function:
 14152                                  ;	Directory is searched for the next matching entry and the directory
 14153                                  ;	entry is loaded at the disk transfer address
 14154                                  ; Returns:
 14155                                  ;	AL = -1 if no entries matched, otherwise 0
 14156                                  ;----------------------------------------------------------------------------
 14157                                  
 14158                                  _$DIR_SEARCH_NEXT:
 14159 0000203F 368916[A605]            	MOV	[SS:THISFCB],DX
 14160 00002044 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14161 00002049 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14162 0000204F 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14163                                  
 14164 00002055 16                      	push	ss
 14165 00002056 07                      	pop	es
 14166                                  
 14167 00002057 BF[BE04]                	MOV	DI,SEARCHBUF
 14168                                  
 14169 0000205A 89D6                    	MOV	SI,DX
 14170 0000205C 803CFF                  	CMP	BYTE [SI],0FFh
 14171 0000205F 750D                    	JNZ	short NORMFCB6
 14172 00002061 83C606                  	ADD	SI,6
 14173 00002064 AC                      	LODSB
 14174                                  
 14175 00002065 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14176 00002069 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14177                                  NORMFCB6:
 14178 0000206E AC                      	LODSB				; Get original user drive byte
 14179 0000206F 50                      	push	ax			; Put it on stack
 14180 00002070 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14181 00002073 AA                      	STOSB				; Put in correct place
 14182 00002074 B90A00                  	MOV	CX,20/2
 14183 00002077 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14184                                  
 14185 00002079 16                      	push	ss
 14186 0000207A 1F                      	pop	ds
 14187                                  
 14188 0000207B FF36[2C03]              	push	word [DMAADD]
 14189 0000207F FF36[2E03]              	push	word [DMAADD+2]
 14190 00002083 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14191 00002089 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14192 0000208D E8010E                  	call	DOS_SEARCH_NEXT 	; Find it
 14193 00002090 8F06[2E03]              	pop	word [DMAADD+2]
 14194 00002094 8F06[2C03]              	pop	word [DMAADD]
 14195 00002098 7203                    	JC	short SearchNoMore
 14196 0000209A E958FF                  	JMP	SearchSet		; Ok set return
 14197                                  
 14198                                  SearchNoMore:
 14199 0000209D C43E[A605]              	LES	DI,[THISFCB]
 14200 000020A1 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14201 000020A6 7403                    	JZ	short NORMFCB8
 14202 000020A8 83C707                  	ADD	DI,7			; Point past the extension
 14203                                  NORMFCB8:
 14204 000020AB 5B                      	pop	bx			; Get original drive byte
 14205 000020AC 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14206                                  					;  at the right spot
 14207                                  ; error code is in AX
 14208                                  
 14209 000020AF E9F1E5                  	jmp	FCB_RET_ERR
 14210                                  
 14211                                  ; 17/05/2019 - Retro DOS v4.0
 14212                                  
 14213                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14214                                  
 14215                                  ;---------------------------------------------------------------------------
 14216                                  ;
 14217                                  ;   Procedure Name : $FIND_FIRST
 14218                                  ; 
 14219                                  ;   Assembler usage:
 14220                                  ;	    MOV AH, FindFirst
 14221                                  ;	    LDS DX, name
 14222                                  ;	    MOV CX, attr
 14223                                  ;	    INT 21h
 14224                                  ;	; DMA address has datablock
 14225                                  ;
 14226                                  ;   Error Returns:
 14227                                  ;	    AX = error_path_not_found
 14228                                  ;	       = error_no_more_files
 14229                                  ;---------------------------------------------------------------------------
 14230                                  
 14231                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14232                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14233                                  
 14234                                  _$FIND_FIRST:
 14235 000020B2 89D6                    	MOV	SI,DX			; get name in appropriate place
 14236 000020B4 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14237                                  
 14238 000020B9 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14239                                  
 14240 000020BC E8704B                  	call	TransPathSet		; convert the path
 14241 000020BF 7305                    	JNC	short Find_it 		; no error, go and look
 14242                                  FindError:
 14243                                  	;mov	al,3
 14244 000020C1 B003                    	mov	al, error_path_not_found ; error and map into one.
 14245                                  	; 09/11/2022
 14246                                  FF_errj:
 14247 000020C3 E9C7E5                  	jmp	SYS_RET_ERR
 14248                                  Find_it:
 14249 000020C6 16                      	push	ss
 14250 000020C7 1F                      	pop	ds
 14251                                  
 14252 000020C8 FF36[2C03]              	push	word [DMAADD]
 14253 000020CC FF36[2E03]              	push	word [DMAADD+2]
 14254 000020D0 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14255 000020D6 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14256                                  	; MSDOS 3.3
 14257                                  	;call	DOS_SEARCH_FIRST
 14258                                  	; MSDOS 6.0
 14259 000020DA E88F00                  	call	GET_FAST_SEARCH 	; search
 14260 000020DD 8F06[2E03]              	pop	word [DMAADD+2]
 14261 000020E1 8F06[2C03]              	pop	word [DMAADD]
 14262                                  	
 14263                                  	; 16/12/2022
 14264                                  	;JNC	short FindSet 		; no error, transfer info
 14265 000020E5 72DC                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14266                                  	;
 14267                                  	;jmp	SYS_RET_ERR
 14268                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14269                                  ;FFF_errj:
 14270                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14271                                  
 14272                                  FindSet:
 14273 000020E7 BE[BE04]                	MOV	SI,SEARCHBUF
 14274 000020EA C43E[2C03]              	LES	DI,[DMAADD]
 14275 000020EE B91500                  	MOV	CX,21
 14276 000020F1 F3A4                    	REP	MOVSB
 14277 000020F3 56                      	PUSH	SI			; Save pointer to start of entry
 14278                                  	;mov	al,[si+0Bh]
 14279 000020F4 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14280 000020F7 AA                      	STOSB
 14281                                  	;add	si,16h ; 22
 14282 000020F8 83C616                  	ADD	SI,dir_entry.dir_time
 14283 000020FB A5                      	MOVSW				; dir_time
 14284 000020FC A5                      	MOVSW				; dir_date
 14285 000020FD 46                      	INC	SI
 14286 000020FE 46                      	INC	SI			; Skip dir_first
 14287 000020FF A5                      	MOVSW				; dir_size (2 words)
 14288 00002100 A5                      	MOVSW
 14289 00002101 5E                      	POP	SI			; Point back to dir_name
 14290 00002102 E83500                   	CALL	PackName
 14291 00002105 E97CE5                  	jmp	SYS_RET_OK		; bye with no errors
 14292                                  
 14293                                  ;---------------------------------------------------------------------------
 14294                                  ;
 14295                                  ;   Procedure Name : $FIND_NEXT
 14296                                  ;
 14297                                  ;   Assembler usage:
 14298                                  ;	; dma points at area returned by find_first
 14299                                  ;	    MOV AH, findnext
 14300                                  ;	    INT 21h
 14301                                  ;	; next entry is at dma
 14302                                  ;
 14303                                  ;   Error Returns:
 14304                                  ;	    AX = error_no_more_files
 14305                                  ;---------------------------------------------------------------------------
 14306                                  
 14307                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14308                                  _$FIND_NEXT:
 14309 00002108 16                      	push	ss
 14310 00002109 07                      	pop	es
 14311                                  
 14312 0000210A BF[BE04]                	MOV	DI,SEARCHBUF
 14313                                  
 14314 0000210D 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14315                                  
 14316 00002112 B91500                  	MOV	CX,21
 14317 00002115 F3A4                    	REP	MOVSB			; Put the search continuation info
 14318                                  					;  in the right place
 14319 00002117 16                      	push	ss
 14320 00002118 1F                      	pop	ds			; get ready for search
 14321                                  	
 14322 00002119 FF36[2C03]              	push	word [DMAADD]
 14323 0000211D FF36[2E03]              	push	word [DMAADD+2]
 14324 00002121 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14325 00002127 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14326 0000212B E8630D                  	call	DOS_SEARCH_NEXT 	; Find it
 14327 0000212E 8F06[2E03]              	pop	word [DMAADD+2]
 14328 00002132 8F06[2C03]              	pop	word [DMAADD]
 14329 00002136 73AF                    	JNC	short FindSet 		; No error, set info
 14330                                  	;jmp	SYS_RET_ERR
 14331                                  	; 16/12/2022
 14332 00002138 EB89                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14333                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14334                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14335                                  
 14336                                  ;---------------------------------------------------------------------------
 14337                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14338                                  ;
 14339                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14340                                  ;	the ASCIZ format.
 14341                                  ;
 14342                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14343                                  ;		(ES:DI) = destination area (13 bytes)
 14344                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14345                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14346                                  ;---------------------------------------------------------------------------
 14347                                  
 14348                                  	; 25/01/2024 - Retro DOS v4.0
 14349                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F5Ch
 14350                                  
 14351                                  PackName:
 14352                                  ;	Move over 8 characters to cover the name component, then trim it's
 14353                                  ;	trailing blanks.
 14354                                  
 14355 0000213A B90800                  	MOV	CX,8			; Pack the name
 14356 0000213D F3A4                    	REP	MOVSB			; Move all of it
 14357                                  main_kill_tail:
 14358 0000213F 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14359 00002144 7507                    	JNZ	short find_check_dot
 14360 00002146 4F                      	DEC	DI			; Back up over trailing space
 14361 00002147 41                      	INC	CX
 14362 00002148 83F908                  	CMP	CX,8
 14363 0000214B 72F2                    	JB	short main_kill_tail
 14364                                  find_check_dot:
 14365                                  	;CMP	WORD [SI],(" " << 8) | " "
 14366 0000214D 813C2020                	cmp     word [si],2020h 
 14367 00002151 7506                    	JNZ	short got_ext 		; Some chars in extension
 14368 00002153 807C0220                	CMP	BYTE [SI+2]," "
 14369 00002157 740F                    	JZ	short find_done		; No extension
 14370                                  got_ext:
 14371 00002159 B02E                    	MOV	AL,"."	; 2Eh
 14372 0000215B AA                      	STOSB
 14373                                  	;MOV	CX,3
 14374                                  	;; 18/12/2022
 14375                                  	;;mov	cl,3
 14376                                  	;;REP	MOVSB
 14377                                  	;movsb
 14378                                  	;movsb
 14379                                  	;movsb
 14380                                  	; 25/01/2024
 14381 0000215C A5                      	movsw
 14382 0000215D A4                      	movsb
 14383                                  ext_kill_tail:
 14384 0000215E 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14385 00002163 7503                    	JNZ	short find_done
 14386 00002165 4F                      	DEC	DI			; Back up over trailing space
 14387 00002166 EBF6                    	JMP	short ext_kill_tail
 14388                                  find_done:
 14389 00002168 31C0                    	XOR	AX,AX
 14390 0000216A AA                      	STOSB				; NUL terminate
 14391 0000216B C3                      	retn
 14392                                  
 14393                                  ;---------------------------------------------------------------------------
 14394                                  
 14395                                  	; 17/05/2019 - Retro DOS v4.0
 14396                                  GET_FAST_SEARCH:
 14397                                  	; 22/07/2018
 14398                                  	; MSDOS 6.0
 14399                                  	; 17/12/2022
 14400 0000216C 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14401                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14402                                  					;FO.trigger fastopen ;AN000;
 14403                                  	;call	DOS_SEARCH_FIRST
 14404                                  	;retn
 14405                                  	; 17/12/2022
 14406 00002172 E9300C                  	jmp	DOS_SEARCH_FIRST
 14407                                  
 14408                                  ;============================================================================
 14409                                  ; PATH.ASM, MSDOS 6.0, 1991
 14410                                  ;============================================================================
 14411                                  ; 06/08/2018 - Retro DOS v3.0
 14412                                  ; 17/05/2019 - Retro DOS v4.0
 14413                                  
 14414                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14415                                  
 14416                                  ;**	Directory related system calls. These will be passed direct text of the
 14417                                  ;	pathname from the user. They will need to be passed through the macro
 14418                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14419                                  ;	defined in DISPATCH. The system calls are:
 14420                                  ;
 14421                                  ;	$CURRENT_DIR  Written
 14422                                  ;	$RMDIR	  Written
 14423                                  ;	$CHDIR	  Written
 14424                                  ;	$MKDIR	  Written
 14425                                  ;
 14426                                  ;
 14427                                  ;	Modification history:
 14428                                  ;
 14429                                  ;	    Created: ARR 4 April 1983
 14430                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14431                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14432                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14433                                  ;				    current directory.
 14434                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14435                                  
 14436                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14437                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14438                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14439                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14440                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14441                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14442                                  ;	I_Need	cMeta,BYTE
 14443                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14444                                  
 14445                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14446                                  ;----------------------------------------------------------------------------
 14447                                  ;
 14448                                  ;   Procedure Name : $CURRENT_DIR
 14449                                  ;
 14450                                  ;   Assembler usage:
 14451                                  ;		LDS	SI,area
 14452                                  ;		MOV	DL,drive
 14453                                  ;		INT	21h
 14454                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14455                                  ;	    ; current directory.
 14456                                  ;   Error returns:
 14457                                  ;	    AX = error_invalid_drive
 14458                                  ;
 14459                                  ;----------------------------------------------------------------------------
 14460                                  
 14461                                  	; 06/08/2018 - Retro DOS v3.0
 14462                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14463                                  
 14464                                  	; 25/01/2024 - Retro DOS v4.0
 14465                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F9Ch
 14466                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5FB0h
 14467                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6664h
 14468                                  
 14469                                  _$CURRENT_DIR:
 14470 00002175 E810F2                  	call	ECritDisk
 14471 00002178 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14472 0000217A E8B749                  	call	GetVisDrv		; grab it
 14473 0000217D 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14474                                  CurdirErr:
 14475 0000217F E821F2                  	call	LCritDisk
 14476                                  
 14477                                  	; MSDOS 3.3
 14478                                  	;mov	al,0Fh
 14479                                  	
 14480                                  	; MSDOS 6.0
 14481 00002182 1E                      	push	ds
 14482 00002183 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14483 00002188 A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14484 0000218B 1F                      	pop	ds
 14485                                  
 14486                                  curdir_errj:
 14487 0000218C E9FEE4                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14488                                  
 14489                                  CurrentValidate:
 14490 0000218F 1E                      	push	ds			; save destination
 14491 00002190 56                      	push	si
 14492                                  	
 14493                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14494                                  	
 14495                                  	; MSDOS 6.0
 14496 00002191 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14497                                  	; 25/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14498 00002196 C606[4C03]00            	mov	byte [NoSetDir],0 ; *
 14499                                  	
 14500                                  	; 25/01/2024
 14501                                  	;lds     si,[THISCDS]
 14502                                  	
 14503                                  ; 16/12/2022
 14504                                  %if 0
 14505                                  	; 09/11/2022 (following test instruction is nonsense!)
 14506                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14507                                  
 14508                                  	;test	word [si+43h],8000h
 14509                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14510                                  	;jnz	short $+2  ; 09/11/2022	
 14511                                  	jnz	short DoCheck
 14512                                  %endif
 14513                                  
 14514                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14515                                  ; media check.
 14516                                  ;	CMP	word [SI+curdir.ID],0
 14517                                  ;	JZ	short GetDst
 14518                                  DoCheck:
 14519                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14520                                  
 14521                                  	; 25/01/2024
 14522                                  	; MSDOS 6.0
 14523                                  	;push	ds
 14524                                  	;mov	ds,[cs:DosDSeg]
 14525                                  	;mov	byte [NoSetDir],0 ; *
 14526                                  	;pop	ds
 14527                                  
 14528 0000219B BF[BE03]                	MOV	DI,OPENBUF
 14529 0000219E E84721                  	call	ValidateCDS		; output is ES:DI -> CDS
 14530                                  
 14531 000021A1 06                      	push	es	 		; swap source and destination
 14532 000021A2 57                      	push	di
 14533 000021A3 5E                      	pop	si
 14534 000021A4 1F                      	pop	ds
 14535                                  GetDst:
 14536 000021A5 5F                      	pop	di
 14537 000021A6 07                      	pop	es			; get real destination
 14538 000021A7 72D6                    	JC	short CurdirErr
 14539                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14540                                  	;
 14541                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14542                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14543                                  	; 16/12/2022
 14544                                  	;add	si,0  ; add si,curdir.text
 14545                                  	;
 14546                                  	;add	si,[si+4Fh] ; 17/05/2019
 14547 000021A9 03744F                  	ADD	SI,[SI+curdir.end]
 14548 000021AC 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14549 000021AF 7501                    	JNZ	short CurrentCopy
 14550 000021B1 46                      	INC	SI
 14551                                  CurrentCopy:
 14552                                  ;	call	FStrCpy
 14553                                  ;; 10/29/86 E5 char
 14554 000021B2 50                      	PUSH	AX
 14555 000021B3 AC                      	LODSB				; get char
 14556 000021B4 08C0                    	OR	AL,AL
 14557 000021B6 7413                    	JZ	short FOK
 14558 000021B8 3C05                    	CMP	AL,05H
 14559 000021BA 740D                    	JZ	short FCHANGE
 14560 000021BC EB01                    	JMP	short FFF
 14561                                  FCPYNEXT:
 14562 000021BE AC                      	LODSB				; get char
 14563                                  FFF:
 14564 000021BF 3C5C                    	CMP	AL,'\'			; beginning of directory
 14565 000021C1 7508                    	JNZ	short FOK		; no
 14566 000021C3 AA                      	STOSB				; put into user's buffer
 14567 000021C4 AC                      	LODSB				; 1st char of dir is 05?
 14568 000021C5 3C05                    	CMP	AL,05H
 14569 000021C7 7502                    	JNZ	short FOK		; no
 14570                                  FCHANGE:
 14571 000021C9 B0E5                    	MOV	AL,0E5H			; make it E5
 14572                                  FOK:
 14573 000021CB AA                      	STOSB				; put into user's buffer
 14574 000021CC 08C0                    	OR	AL,AL			; final char
 14575 000021CE 75EE                    	JNZ	short FCPYNEXT		; no
 14576 000021D0 58                      	POP	AX
 14577                                  
 14578                                  ;; 10/29/86 E5 char
 14579 000021D1 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14580 000021D3 E8CDF1                  	call	LCritDisk
 14581 000021D6 E9ABE4                  	jmp	SYS_RET_OK		; no more, bye!
 14582                                  
 14583                                  ; 17/05/2019 - Retro DOS v4.0
 14584                                  
 14585                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14586                                  
 14587                                  ;BREAK <$RmDir -- Remove a directory>
 14588                                  ;----------------------------------------------------------------------------
 14589                                  ;
 14590                                  ; Procedure Name : $RmDir
 14591                                  ;
 14592                                  ; Inputs:
 14593                                  ;	DS:DX Points to asciz name
 14594                                  ; Function:
 14595                                  ;	Delete directory if empty
 14596                                  ; Returns:
 14597                                  ;	STD XENIX Return
 14598                                  ;	AX = error_path_not_found If path bad
 14599                                  ;	AX = error_access_denied If
 14600                                  ;		Directory not empty
 14601                                  ;		Path not directory
 14602                                  ;		Root directory specified
 14603                                  ;		Directory malformed (. and .. not first two entries)
 14604                                  ;		User tries to delete a current directory
 14605                                  ;	AX = error_current_directory
 14606                                  ;
 14607                                  ;----------------------------------------------------------------------------
 14608                                  
 14609                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14610                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14611                                  
 14612                                  _$RMDIR:
 14613 000021D9 52                      	push	dx			; Save ptr to name
 14614 000021DA 1E                      	push	ds
 14615 000021DB 89D6                    	mov	si,dx			; Load ptr into si
 14616 000021DD BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14617 000021E0 57                      	push	di
 14618 000021E1 E8534A                  	call	TransPathNoSet		; Translate the name
 14619 000021E4 5F                      	pop	di			; di = ptr to buf for trans name
 14620 000021E5 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14621 000021E7 1F                      	pop	ds
 14622 000021E8 5A                      	pop	dx			; Restore the name
 14623                                  	;mov	al,3
 14624 000021E9 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14625                                  	; 16/12/2022
 14626                                  rmdir_errj: ; 10/08/2018
 14627                                  chdir_errj:
 14628 000021EB EB9F                    	jmp	short curdir_errj
 14629                                  	;jmp	SYS_RET_ERR
 14630                                  rmlset:
 14631 000021ED 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14632 000021F3 7512                    	Jnz	short rmerr		;	return (-1);
 14633 000021F5 16                      	push	ss
 14634 000021F6 07                      	pop	es
 14635 000021F7 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14636                                  rmloop: 
 14637 000021F9 E8A949                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14638 000021FC 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14639 000021FE E828F0                  	call	StrCmp			; Are the 2 paths the same?
 14640 00002201 7404                    	jz	short rmerr		; Yes, report error.
 14641 00002203 FEC0                    	inc	al			; No, inc al to next drive number
 14642 00002205 EBF2                    	jmp	short rmloop		; Go check next drive.
 14643                                  rmerr:
 14644 00002207 1F                      	pop	ds
 14645 00002208 5A                      	pop	dx			; Restore the name
 14646                                  	;mov	al,10h
 14647 00002209 B010                    	mov	al,error_current_directory ; error
 14648                                  	; 16/12/2022
 14649                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14650                                  ;chdir_errj:
 14651 0000220B EBDE                    	jmp	short rmdir_errj
 14652                                  rmcont:
 14653 0000220D 1F                      	pop	ds
 14654 0000220E 5A                      	pop	dx			; Restore the name
 14655 0000220F BE[7532]                	MOV	SI,DOS_RMDIR
 14656 00002212 EB7C                    	JMP	DoDirCall
 14657                                  
 14658                                  ; 17/05/2019 - Retro DOS v4.0
 14659                                  
 14660                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 14661                                  
 14662                                  ;BREAK <$ChDir -- Change current directory on a drive>
 14663                                  ;----------------------------------------------------------------------------
 14664                                  ;
 14665                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 14666                                  ; for setting up the CDS for the specified drive appropriately.  There are
 14667                                  ; several cases to consider:
 14668                                  ;
 14669                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 14670                                  ;	it into a WFP.	We verify the existance of this directory and then
 14671                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 14672                                  ;	directory cluster.
 14673                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 14674                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 14675                                  ;	WFP back into the CDS.
 14676                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 14677                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 14678                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 14679                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 14680                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 14681                                  ;	to process the path but to return the logical CDS and the logical
 14682                                  ;	path.  We then copy the logical path into the logical CDS.
 14683                                  ;
 14684                                  ; Inputs:
 14685                                  ;	DS:DX Points to asciz name
 14686                                  ; Returns:
 14687                                  ;	STD XENIX Return
 14688                                  ;	AX = chdir_path_not_found if error
 14689                                  ;
 14690                                  ;----------------------------------------------------------------------------
 14691                                  
 14692                                  _$CHDIR:
 14693 00002214 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14694 00002217 89D6                    	MOV	SI,DX			; get source
 14695 00002219 E80F4A                  	call	TransPath		; go munge the path and get real CDS
 14696 0000221C 7304                    	JNC	short ChDirCrack	; no errors, try path
 14697                                  ChDirErrP:
 14698                                  	;mov	al,3
 14699 0000221E B003                    	MOV	AL,error_path_not_found
 14700                                  ChDirErr:
 14701                                  	;jmp	SYS_RET_ERR 	; oops!
 14702                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14703 00002220 EBC9                    	jmp	short chdir_errj
 14704                                  
 14705                                  ChDirCrack:
 14706 00002222 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 14707 00002227 75F5                    	JNZ	short ChDirErrP
 14708                                  
 14709                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 14710                                  ; found.
 14711                                  
 14712 00002229 C43E[A205]              	LES	DI,[THISCDS]
 14713 0000222D 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 14714 00002230 74EC                    	JZ	short ChDirErrP		;	error ();
 14715                                  
 14716                                  ; Find out if the directory exists.
 14717                                  
 14718 00002232 E8FD0F                  	call	DOS_CHDIR
 14719                                  	;Jc	short ChDirErr
 14720                                  	; 16/12/2022
 14721 00002235 72B4                    	jc	short chdir_errj
 14722                                  ;
 14723                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 14724                                  ; not network). If one was seen, all we need to do is copy in the text
 14725                                  ;
 14726 00002237 C43E[A205]              	LES	DI,[THISCDS]
 14727                                  	;test	word [es:di+43h],2000h
 14728                                  	; 17/12/2022
 14729 0000223B 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14730                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 14731 00002240 7425                    	JZ	short GotCDS
 14732                                  
 14733                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 14734                                  
 14735 00002242 06                      	push	es	
 14736 00002243 57                      	push	di
 14737 00002244 51                      	push	cx			; save CDS and cluster...
 14738 00002245 E882E2                  	call	Get_User_Stack		; get original text
 14739                                  	
 14740                                  	;mov	di,[si+6]
 14741 00002248 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 14742                                  	;mov	ds,[si+0Eh]
 14743 0000224B 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 14744                                  	
 14745 0000224E BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 14746 00002251 87F7                    	XCHG	SI,DI
 14747 00002253 30C0                    	XOR	AL,AL			; do no splicing
 14748 00002255 57                      	push	di
 14749 00002256 E8DE49                  	call	TransPathNoSet		; Munge path
 14750 00002259 5E                      	pop	si
 14751                                  
 14752                                  ; There should NEVER be an error here.
 14753                                  
 14754                                  ;IF FALSE
 14755                                  ;	JNC SKipErr
 14756                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 14757                                  ;SkipErr:
 14758                                  ;ENDIF
 14759 0000225A C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 14760                                  	;mov	word [es:di+49h],-1
 14761 0000225E 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 14762                                  					; no valid cluster here...
 14763 00002264 59                      	pop	cx
 14764 00002265 5F                      	pop	di
 14765 00002266 07                      	pop	es
 14766                                  
 14767                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 14768                                  
 14769                                  GotCDS:
 14770                                  
 14771                                  ; wfp_start points to the text. See if it is long enough
 14772                                  
 14773                                  	; MSDOS 3.3
 14774                                  	;push	ss
 14775                                  	;pop	ds
 14776                                  	;mov	si,[WFP_START]
 14777                                  	;push	cx
 14778                                  	;call	DStrLen
 14779                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 14780                                  	;pop	cx
 14781                                  	;ja	short ChDirErrP
 14782                                  
 14783                                  	; MSDOS 6.0
 14784 00002267 E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 14785 0000226A 77B2                    	JA	short ChDirErrP
 14786                                  	; MSDOS 3.3 & MSDOS 6.0
 14787                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 14788                                  	; 17/12/2022
 14789 0000226C 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 14790 00002271 7512                    	JNZ	short SkipRecency
 14791                                  	; MSDOS 6.0
 14792                                  	;test	word [es:di+43h],2000h
 14793                                  	; 17/12/2022
 14794 00002273 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14795                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 14796                                  					;PTM. for Join and Subst ;AN000;
 14797 00002278 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 14798 0000227A B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 14799                                  setdirclus:
 14800                                  	;mov	[es:di+49h],cx
 14801 0000227D 26894D49                	MOV	[ES:DI+curdir.ID],CX
 14802 00002281 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 14803                                  SkipRecency:
 14804 00002285 E8D2EF                  	call	FStrCpy
 14805 00002288 30C0                    	XOR	AL,AL
 14806                                  mkdir_ok:
 14807 0000228A E9F7E3                  	jmp	SYS_RET_OK
 14808                                  
 14809                                  ; 17/05/2019 - Retro DOS v4.0
 14810                                  
 14811                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 14812                                  
 14813                                  ;BREAK <$MkDir - Make a directory entry>
 14814                                  ;---------------------------------------------------------------------------
 14815                                  ;
 14816                                  ; Procedure Name : $MkDir
 14817                                  ; Inputs:
 14818                                  ;	DS:DX Points to asciz name
 14819                                  ; Function:
 14820                                  ;	Make a new directory
 14821                                  ; Returns:
 14822                                  ;	STD XENIX Return
 14823                                  ;	AX = mkdir_path_not_found if path bad
 14824                                  ;	AX = mkdir_access_denied  If
 14825                                  ;		Directory cannot be created
 14826                                  ;		Node already exists
 14827                                  ;		Device name given
 14828                                  ;		Disk or directory(root) full
 14829                                  ;---------------------------------------------------------------------------
 14830                                  
 14831                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14832                                  
 14833                                  _$MKDIR:
 14834 0000228D BE[3431]                	MOV	SI,DOS_MKDIR
 14835                                  DoDirCall:
 14836 00002290 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14837                                  
 14838 00002293 56                      	push	si
 14839 00002294 89D6                    	MOV	SI,DX			; get source
 14840 00002296 E89249                  	call	TransPath		; go munge the path
 14841 00002299 5E                      	pop	si
 14842 0000229A 7305                    	JNC	short MkDirCrack	; no errors, try path
 14843                                  MkErrP:
 14844 0000229C B003                    	MOV	AL,error_path_not_found	; oops!
 14845                                  MkErr:
 14846 0000229E E9ECE3                  	jmp	SYS_RET_ERR
 14847                                  MkDirCrack:
 14848 000022A1 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 14849 000022A7 75F3                    	JNZ	short MkErrP
 14850                                  
 14851                                  	; MSDOS 3.3
 14852                                  	;push	ss
 14853                                  	;pop	ds
 14854                                  	;call	si
 14855                                  	;jb	short MkErr
 14856                                  	;;jmp	short mkdir_ok
 14857                                  	;jmp	SYS_RET_OK
 14858                                  
 14859                                  	; MSDOS 6.0
 14860 000022A9 56                      	PUSH	SI			;PTM.			;AN000;
 14861 000022AA E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 14862 000022AD 5E                      	POP	SI			;PTM.			;AN000;
 14863 000022AE 7604                    	JBE	short pathok		;PTM.			;AN000;
 14864                                  	;mov	al,5
 14865 000022B0 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 14866                                  	;jmp	SYS_RET_ERR		;PTM.
 14867 000022B2 EBEA                    	jmp	short MkErr
 14868                                  pathok:
 14869 000022B4 FFD6                    	CALL	SI			; go get file
 14870 000022B6 72E6                    	JC	short MkErr		; no errors
 14871                                  	; 16/12/2022
 14872                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14873 000022B8 EBD0                    	jmp	short mkdir_ok
 14874                                  	;jmp	SYS_RET_OK
 14875                                  
 14876                                  ;----------------------------------------------------------------------------
 14877                                  ;
 14878                                  ; Procedure Name : Check_PathLen
 14879                                  ;
 14880                                  ; Inputs:
 14881                                  ;	nothing
 14882                                  ; Function:
 14883                                  ;	check if final path length greater than 67
 14884                                  ; Returns:
 14885                                  ;	Above flag set if > 67
 14886                                  ;
 14887                                  ;---------------------------------------------------------------------------
 14888                                  
 14889                                  Check_PathLen:
 14890                                  	; 09/09/2018
 14891                                  	;mov	SI,[WFP_START]
 14892 000022BA 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 14893                                  Check_PathLen2:
 14894 000022BF 16                      	push	ss
 14895 000022C0 1F                      	pop	ds
 14896                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 14897 000022C1 51                      	push	CX	
 14898 000022C2 E8ACEF                  	CALL	DStrLen
 14899 000022C5 83F943                  	CMP	CX,DIRSTRLEN ; 67
 14900 000022C8 59                      	POP	CX
 14901 000022C9 C3                      	retn
 14902                                  
 14903                                  ;============================================================================
 14904                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 14905                                  ;============================================================================
 14906                                  ; 07/08/2018 - Retro DOS v3.0
 14907                                  ; 17/05/2019 - Retro DOS v4.0
 14908                                  
 14909                                  ;**	IOCTL system call.
 14910                                  ;----------------------------------------------------------------------------
 14911                                  ;	$IOCTL
 14912                                  ;
 14913                                  ;	  Revision history:
 14914                                  ;
 14915                                  ;		Created: ARR 4 April 1983
 14916                                  ;
 14917                                  ;		GenericIOCTL added:		KGS	22 April 1985
 14918                                  ;
 14919                                  ;		A000	version 4.00	Jan. 1988
 14920                                  ;
 14921                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 14922                                  ;
 14923                                  
 14924                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 14925                                  ;---------------------------------------------------------------------------
 14926                                  ;
 14927                                  ;   Assembler usage:
 14928                                  ;	    MOV     BX, Handle
 14929                                  ;	    MOV     DX, Data
 14930                                  ;
 14931                                  ;	(or LDS     DX,BUF
 14932                                  ;	    MOV     CX,COUNT)
 14933                                  ;
 14934                                  ;	    MOV     AH, Ioctl
 14935                                  ;	    MOV     AL, Request
 14936                                  ;	    INT     21h
 14937                                  ;
 14938                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 14939                                  ;	    attribute word in DX, handle in BX:
 14940                                  ;	    DH = high word of device driver attributes
 14941                                  ;	    DL = low byte of sf_flags
 14942                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 14943                                  ;	    in BX.
 14944                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 14945                                  ;	    into DS:DX.  Return number read in AX.
 14946                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 14947                                  ;	    DS:DX.  Return bytes written in AX.
 14948                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 14949                                  ;	    into DS:DX.  Return number read in AX.
 14950                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 14951                                  ;	    DS:DX.  Return bytes written in AX.
 14952                                  ;	 6  Return input status of handle in BX. If a read will go to the
 14953                                  ;	    device, AL = 0FFh, otherwise 0.
 14954                                  ;	 7  Return output status of handle in BX. If a write will go to the
 14955                                  ;	    device, AL = 0FFh, otherwise 0.
 14956                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 14957                                  ;	    removable media, 0 otherwise.
 14958                                  ;	 9  Return the contents of the device attribute word in DX for the
 14959                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 14960                                  ;	    network. 8000h is the bit for local use.
 14961                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 14962                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 14963                                  ;	    the count and CX is the delay.
 14964                                  ;
 14965                                  ;   Error returns:
 14966                                  ;	    AX = error_invalid_handle
 14967                                  ;	       = error_invalid_function
 14968                                  ;	       = error_invalid_data
 14969                                  ;
 14970                                  ;-------------------------------------------------------------------------------
 14971                                  ;
 14972                                  ;   This is the documentation copied from DOS 4.0 it is much better
 14973                                  ;   than the above
 14974                                  ;
 14975                                  ;	There are several basic forms of IOCTL calls:
 14976                                  ;
 14977                                  ;
 14978                                  ;	** Get/Set device information:	**
 14979                                  ;
 14980                                  ;	ENTRY	(AL) = function code
 14981                                  ;		  0 - Get device information
 14982                                  ;		  1 - Set device information
 14983                                  ;		(BX) = file handle
 14984                                  ;		(DX) = info for "Set Device Information"
 14985                                  ;	EXIT	'C' set if error
 14986                                  ;		  (AX) = error code
 14987                                  ;		'C' clear if OK
 14988                                  ;		  (DX) = info for "Get Device Information"
 14989                                  ;	USES	ALL
 14990                                  ;
 14991                                  ;
 14992                                  ;	**  Read/Write Control Data From/To Handle  **
 14993                                  ;
 14994                                  ;	ENTRY	(AL) = function code
 14995                                  ;		  2 - Read device control info
 14996                                  ;		  3 - Write device control info
 14997                                  ;		(BX) = file handle
 14998                                  ;		(CX) = transfer count
 14999                                  ;		(DS:DX) = address for data
 15000                                  ;	EXIT	'C' set if error
 15001                                  ;		  (AX) = error code
 15002                                  ;		'C' clear if OK
 15003                                  ;		  (AX) = count of bytes transfered
 15004                                  ;	USES	ALL
 15005                                  ;
 15006                                  ;
 15007                                  ;	**  Read/Write Control Data From/To Block Device  **
 15008                                  ;
 15009                                  ;	ENTRY	(AL) = function code
 15010                                  ;		  4 - Read device control info
 15011                                  ;		  5 - Write device control info
 15012                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15013                                  ;		(CX) = transfer count
 15014                                  ;		(DS:DX) = address for data
 15015                                  ;	EXIT	'C' set if error
 15016                                  ;		  (AX) = error code
 15017                                  ;		'C' clear if OK
 15018                                  ;		  (AX) = count of bytes transfered
 15019                                  ;	USES	ALL
 15020                                  ;
 15021                                  ;
 15022                                  ;	**  Get Input/Output Status  **
 15023                                  ;
 15024                                  ;	ENTRY	(AL) = function code
 15025                                  ;		  6 - Get Input status
 15026                                  ;		  7 - Get Output Status
 15027                                  ;		(BX) = file handle
 15028                                  ;	EXIT	'C' set if error
 15029                                  ;		  (AX) = error code
 15030                                  ;		'C' clear if OK
 15031                                  ;		  (AL) = 00 if not ready
 15032                                  ;		  (AL) = FF if ready
 15033                                  ;	USES	ALL
 15034                                  ;
 15035                                  ;
 15036                                  ;	**  Get Drive Information  **
 15037                                  ;
 15038                                  ;	ENTRY	(AL) = function code
 15039                                  ;		  8 - Check for removable media
 15040                                  ;		  9 - Get device attributes
 15041                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15042                                  ;	EXIT	'C' set if error
 15043                                  ;		  (AX) = error code
 15044                                  ;		'C' clear if OK
 15045                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15046                                  ;		  (DX) = device attribute word (func. 9)
 15047                                  ;	USES	ALL
 15048                                  ;
 15049                                  ;
 15050                                  ;	**  Get Redirected bit	**
 15051                                  ;
 15052                                  ;	ENTRY	(AL) = function code
 15053                                  ;		  0Ah - Network stuff
 15054                                  ;		(BX) = file handle
 15055                                  ;	EXIT	'C' set if error
 15056                                  ;		  (AX) = error code
 15057                                  ;		'C' clear if OK
 15058                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15059                                  ;	USES	ALL
 15060                                  ;
 15061                                  ;
 15062                                  ;	**  Change sharer retry parameters  **
 15063                                  ;
 15064                                  ;	ENTRY	(AL) = function code
 15065                                  ;		  0Bh - Set retry parameters
 15066                                  ;		(CX) = retry loop count
 15067                                  ;		(DX) = number of retries
 15068                                  ;	EXIT	'C' set if error
 15069                                  ;		  (AX) = error code
 15070                                  ;		'C' clear if OK
 15071                                  ;	USES	ALL
 15072                                  ;
 15073                                  ;
 15074                                  ;   =================================================================
 15075                                  ;
 15076                                  ;	**  New Standard Control  **
 15077                                  ;
 15078                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15079                                  ;	FORMS ARE OBSOLETE.
 15080                                  ;
 15081                                  ;   =================================================================
 15082                                  ;
 15083                                  ;	ENTRY	(AL) = function code
 15084                                  ;		  0Ch - Control Function subcode
 15085                                  ;		(BX) = File Handle
 15086                                  ;		(CH) = Category Indicator
 15087                                  ;		(CL) = Function within category
 15088                                  ;		(DS:DX) = address for data, if any
 15089                                  ;		(SI) = Passed to device as argument, use depends upon function
 15090                                  ;		(DI) = Passed to device as argument, use depends upon function
 15091                                  ;	EXIT	'C' set if error
 15092                                  ;		  (AX) = error code
 15093                                  ;		'C' clear if OK
 15094                                  ;		  (SI) = Return value, meaning is function dependent
 15095                                  ;		  (DI) = Return value, meaning is function dependent
 15096                                  ;		  (DS:DX) = Return address, use is function dependent
 15097                                  ;	USES	ALL
 15098                                  ;
 15099                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15100                                  ;     (See inc\ioctl.inc for more info)
 15101                                  ;
 15102                                  ;	ENTRY	(AL) = function code
 15103                                  ;		  0Dh - Control Function subcode
 15104                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15105                                  ;		(CH) = Category Indicator
 15106                                  ;		(CL) = Function within category
 15107                                  ;		(DS:DX) = address for data, if any
 15108                                  ;		(SI) = Passed to device as argument, use depends upon function
 15109                                  ;		(DI) = Passed to device as argument, use depends upon function
 15110                                  ;
 15111                                  ;	EXIT	'C' set if error
 15112                                  ;		  (AX) = error code
 15113                                  ;		'C' clear if OK
 15114                                  ;		  (DS:DX) = Return address, use is function dependent
 15115                                  ;	USES	ALL
 15116                                  ;
 15117                                  ;---------------------------------------------------------------------------
 15118                                  	
 15119                                  	; 17/05/2019 - Retro DOS v4.0
 15120                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15121                                  
 15122                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15123                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15124                                  
 15125                                  IOCTLJMPTABLE:	;label	word
 15126                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15127 000022CA [0623]                  	dw	ioctl_getset_data	; 0
 15128 000022CC [0623]                  	dw	ioctl_getset_data   	; 1
 15129 000022CE [5623]                  	dw	ioctl_control_string	; 2
 15130 000022D0 [5623]                  	dw	ioctl_control_string	; 3
 15131 000022D2 [AA24]                  	dw	ioctl_get_dev		; 4
 15132 000022D4 [AA24]                  	dw	ioctl_get_dev		; 5
 15133 000022D6 [7023]                  	dw	ioctl_status		; 6
 15134 000022D8 [7023]                  	dw	ioctl_status		; 7
 15135 000022DA [1124]                  	dw	ioctl_rem_media		; 8
 15136 000022DC [4F24]                  	dw	ioctl_drive_attr	; 9
 15137 000022DE [9C24]                  	dw	ioctl_handle_redir	; A
 15138 000022E0 [8C23]                  	dw	Set_Retry_Parameters	; B
 15139 000022E2 [9A23]                  	dw	GENERICIOCTLHANDLE	; C
 15140 000022E4 [B123]                  	dw	GENERICIOCTL		; D
 15141                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15142 000022E6 [4E25]                  	dw	ioctl_drive_owner	; E
 15143 000022E8 [4E25]                  	dw	ioctl_drive_owner	; F
 15144                                  	; MSDOS 6.0
 15145 000022EA [9A23]                  	dw	query_handle_support	; 10h
 15146 000022EC [B123]                  	dw	query_device_support	; 11h
 15147                                  
 15148                                  	; 11/11/2022
 15149                                  _$IOCTL:
 15150 000022EE 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15151 000022F0 16                      	push	ss
 15152 000022F1 1F                      	pop	ds			;hkn; SS is DOSDATA
 15153                                  
 15154                                  	; MSDOS 3.3
 15155                                  	;cmp	al,0Fh 
 15156                                  	; MSDOS 6.0
 15157 000022F2 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15158 000022F4 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15159                                  
 15160                                  	; 14/01/2024
 15161                                  	; 28/05/2019
 15162                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15163 000022F6 89C7                    	mov	di,ax			; di NOT a PARM
 15164 000022F8 81E7FF00                	and	di,0FFh			; di = al
 15165 000022FC D1E7                    	shl	di,1			; di = index into jmp table
 15166                                  	;pop	AX			; Restore AL for generic IOCTL
 15167                                  
 15168 000022FE 2EFFA5[CA22]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15169                                  
 15170                                  ioctl_bad_funj2:
 15171 00002303 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15172                                  
 15173                                  ;--------------------------------------------------------------------------
 15174                                  ;
 15175                                  ; IOCTL: AL = 0,1
 15176                                  ;
 15177                                  ; ENTRY: DS = DOSDATA
 15178                                  ;
 15179                                  ;--------------------------------------------------------------------------
 15180                                  
 15181                                  ioctl_getset_data:
 15182                                  	; MSDOS 6.0
 15183 00002306 E82544                  	call	SFFromHandle		; ES:DI -> SFT
 15184 00002309 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15185                                  ioctl_bad_handle:
 15186                                  	;mov	al,6
 15187 0000230B B006                    	mov	al,error_invalid_handle
 15188                                  ioctl_error:
 15189 0000230D E97DE3                  	jmp	SYS_RET_ERR
 15190                                  
 15191                                  ioctl_check_permissions:
 15192 00002310 3C00                    	CMP	AL,0
 15193                                  	;mov	al,[es:di+5]
 15194 00002312 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15195 00002316 741B                    	JZ	short ioctl_read	; read the byte
 15196                                  
 15197 00002318 08F6                    	or	dh,dh
 15198 0000231A 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15199                                  	;mov	al,0Dh
 15200 0000231C B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15201                                  	;jmp	SYS_RET_ERR
 15202 0000231E EBED                    	jmp	short ioctl_error
 15203                                  
 15204                                  ioctl_check_device:
 15205 00002320 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15206 00002322 74DF                    	jz	short ioctl_bad_funj2
 15207 00002324 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15208                                  					;   device bit!! He can muck with the
 15209                                  					;   others at will.
 15210 00002327 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15211 0000232C 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15212                                  ioctl_ok:
 15213 00002330 E951E3                  	jmp	SYS_RET_OK
 15214                                  
 15215                                  ioctl_read:
 15216 00002333 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15217 00002338 30E4                    	XOR	AH,AH
 15218 0000233A A880                    	test	AL,devid_device 	; Should I set high byte
 15219 0000233C 740D                    	JZ	short ioctl_no_high	; no
 15220 0000233E C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15221                                  	;les	di,[es:di+7]
 15222 00002343 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15223                                  	;mov	ah,[es:di+5]
 15224 00002347 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15225                                  ioctl_no_high:
 15226 0000234B 89C2                    	MOV	DX,AX
 15227                                  ioctl_set_dx:	; 16/12/2022
 15228 0000234D E87AE1                  	call	Get_User_Stack
 15229                                  	;mov	[si+6],dx
 15230 00002350 895406                  	MOV	[SI+user_env.user_DX],DX
 15231                                  	;;jmp	SYS_RET_OK
 15232                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15233                                  ioctl_ok_j:
 15234                                  	; 16/12/2022
 15235 00002353 E931E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15236                                  	;jmp	short ioctl_ok
 15237                                  	; 26/07/2019
 15238                                  	;jmp	SYS_RET_OK_clc
 15239                                  
 15240                                  ;--------------------------------------------------------------------------
 15241                                  ;
 15242                                  ; IOCTL: AL = 2,3
 15243                                  ;
 15244                                  ; ENTRY: DS = DOSDATA
 15245                                  ;	 SI = user's DS
 15246                                  ;
 15247                                  ;--------------------------------------------------------------------------
 15248                                  
 15249                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15250                                  ioctl_control_string:
 15251 00002356 E8D543                  	call	SFFromHandle		; ES:DI -> SFT
 15252 00002359 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15253                                  	; 07/12/2022
 15254                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15255                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15256                                  	; MSDOS 5.0 & MSDOS 6.0
 15257 0000235B 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15258 00002360 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15259 00002362 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15260 00002367 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15261 0000236B 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15262 0000236D E94201                  	JMP	ioctl_do_string
 15263                                  
 15264                                  ;--------------------------------------------------------------------------
 15265                                  ;
 15266                                  ; IOCTL: AL = 6,7
 15267                                  ;
 15268                                  ; ENTRY: DS = DOSDATA
 15269                                  ;
 15270                                  ;--------------------------------------------------------------------------
 15271                                  
 15272                                  ioctl_status:
 15273 00002370 B401                    	MOV	AH,1
 15274 00002372 2C06                    	SUB	AL,6			; 6=0,7=1
 15275 00002374 7402                    	JZ	short ioctl_get_status
 15276 00002376 B403                    	MOV	AH,3
 15277                                  ioctl_get_status:
 15278 00002378 50                      	PUSH	AX
 15279 00002379 E84213                  	call	GET_IO_SFT
 15280 0000237C 58                      	POP	AX
 15281                                  	;JNC	short DO_IOFUNC
 15282                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15283                                  	; 16/12/2022
 15284 0000237D 728C                    	jc	short ioctl_bad_handle
 15285                                  DO_IOFUNC:
 15286 0000237F E89C21                  	call	IOFUNC
 15287 00002382 88C4                    	MOV	AH,AL
 15288 00002384 B0FF                    	MOV	AL,0FFH
 15289 00002386 7502                    	JNZ	short ioctl_status_ret
 15290 00002388 FEC0                    	INC	AL
 15291                                  ioctl_status_ret:
 15292                                  	;jmp	SYS_RET_OK
 15293                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15294                                  	;jmp	short ioctl_ok_j
 15295                                  	; 16/12/2022
 15296 0000238A EBA4                    	jmp	short ioctl_ok
 15297                                  
 15298                                  ;--------------------------------------------------------------------------
 15299                                  ;
 15300                                  ; IOCTL: AL = B
 15301                                  ;
 15302                                  ; ENTRY: DS = DOSDATA
 15303                                  ;
 15304                                  ;--------------------------------------------------------------------------
 15305                                  
 15306                                  Set_Retry_Parameters:
 15307                                  	; 09/09/2018
 15308 0000238C 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15309 00002390 09D2                    	OR	DX,DX			; zero retries not allowed
 15310 00002392 7475                    	JZ	short ioctl_bad_fun
 15311 00002394 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15312                                  doneok:
 15313                                  	;jmp	SYS_RET_OK		; Done
 15314                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15315                                  	;jmp	short ioctl_status_ret
 15316                                  	; 16/12/2022
 15317 00002398 EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15318                                  
 15319                                  ;--------------------------------------------------------------------------
 15320                                  ;
 15321                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15322                                  ;
 15323                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15324                                  ;	SI:DX -> Users Device Parameter Table
 15325                                  ;	IOCALL -> IOCTL_Req structure
 15326                                  ;
 15327                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15328                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15329                                  ;	call.
 15330                                  ;
 15331                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15332                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15333                                  ;         return address off the stack if the drive is invalid.
 15334                                  ;
 15335                                  ;--------------------------------------------------------------------------
 15336                                  
 15337                                  query_handle_support:	; Entry point for handles
 15338                                  GENERICIOCTLHANDLE:
 15339 0000239A E89143                  	call	SFFromHandle		; Get SFT for device.
 15340 0000239D 726F                    	jc	short ioctl_bad_handlej
 15341                                  
 15342                                  	;test	word [es:di+5],8000h
 15343                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15344                                  	;test	byte [es:di+6],80h
 15345 0000239F 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15346 000023A4 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15347                                  
 15348 000023A6 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15349                                  	;les	di,[es:di+7]
 15350 000023AB 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15351 000023AF EB0F                    	jmp	short Do_GenIOCTL
 15352                                  
 15353                                  query_device_support:	; Entry point for devices:
 15354                                  GENERICIOCTL:
 15355 000023B1 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15356 000023B6 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15357 000023B9 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15358                                  
 15359 000023BB E88101                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15360 000023BE 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15361                                  
 15362                                  Do_GenIOCTL:
 15363                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15364                                  					; Can device handle Generic IOCTL funcs
 15365                                  	; 09/09/2018
 15366                                  	;test	byte [es:di+4],40h
 15367 000023C0 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15368 000023C5 7442                    	jz	short ioctl_bad_fun
 15369                                  
 15370                                  	; 17/05/2019 - Retro DOS v4.0
 15371                                  
 15372                                  	; MSDOS 6.0
 15373                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15374 000023C7 C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15375                                  	;cmp	al,10h
 15376 000023CC 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15377 000023CE 7C0C                    	jl	short SetIOCtlBlock
 15378                                  	
 15379                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15380                                  	;test	byte [es:di+4],80h 
 15381 000023D0 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15382 000023D5 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15383                                  	;
 15384                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15385 000023D7 C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15386                                  
 15387                                  SetIOCtlBlock:
 15388 000023DC 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15389 000023DD 57                      	PUSH	DI			; in DS:SI
 15390                                  					; Setup Generic IOCTL Request Block
 15391                                  	;mov	byte [IOCALL_REQLEN],23
 15392 000023DE C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15393                                  	; 07/09/2018 (MSDOS 3.3)
 15394                                  	;;mov	byte [IOCALL_REQFUNC],19
 15395                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15396                                  	;
 15397 000023E3 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15398 000023E7 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15399 000023EB 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15400 000023EF 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15401 000023F3 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15402 000023F7 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15403 000023FB 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15404                                  
 15405                                  ;hkn; IOCALL is in DOSDATA
 15406 000023FF BB[7C03]                	MOV	BX,IOCALL
 15407                                  
 15408 00002402 16                      	PUSH	SS
 15409 00002403 07                      	POP	ES
 15410                                  					; DS:SI -> Device header.
 15411 00002404 5E                      	POP	SI
 15412 00002405 1F                      	POP	DS
 15413                                  	; 10/08/2018
 15414 00002406 E9E200                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15415                                  
 15416                                  ioctl_bad_fun:
 15417 00002409 B001                    	mov	al, error_invalid_function  ; 1
 15418 0000240B E97FE2                  	jmp	SYS_RET_ERR	
 15419                                  
 15420                                  ioctl_bad_handlej:
 15421 0000240E E9FAFE                  	jmp	ioctl_bad_handle
 15422                                  
 15423                                  ;---------------------------------------------------------------------------
 15424                                  ;
 15425                                  ; IOCTL: AL = 8
 15426                                  ;
 15427                                  ; ENTRY: DS = DOSDATA
 15428                                  ;
 15429                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15430                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15431                                  ;         return address off the stack if the drive is invalid.
 15432                                  ;
 15433                                  ;-------------------------------------------------------------------------
 15434                                  
 15435                                  ioctl_rem_media:
 15436                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15437 00002411 E82B01                  	CALL	Check_If_Net
 15438 00002414 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15439                                  					;   certainly don't know how to do this
 15440                                  					;   call.
 15441                                  	;test	word [es:di+4],800h
 15442                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15443                                  	;test	byte [es:di+5],8
 15444 00002416 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15445 0000241B 74EC                    	JZ	short ioctl_bad_fun		; NO
 15446                                  
 15447                                  ;hkn; SS override for IOCALL
 15448 0000241D 36C606[7E03]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15449 00002423 B00D                    	MOV	AL,REMHL  ; 13
 15450 00002425 88DC                    	MOV	AH,BL			; Unit number
 15451 00002427 36A3[7C03]              	MOV	[SS:IOCALL_REQLEN],AX
 15452 0000242B 31C0                    	XOR	AX,AX
 15453 0000242D 36A3[7F03]              	MOV	[SS:IOCALL_REQSTAT],AX
 15454 00002431 06                      	PUSH	ES
 15455 00002432 1F                      	POP	DS
 15456 00002433 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15457 00002435 16                      	PUSH	SS
 15458 00002436 07                      	POP	ES
 15459                                  
 15460                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15461 00002437 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15462 0000243A 1E                      	push	ds
 15463 0000243B 56                      	push	si
 15464 0000243C E8B622                  	call	DEVIOCALL2
 15465 0000243F 5E                      	pop	si
 15466 00002440 1F                      	pop	ds
 15467                                  
 15468                                  ;hkn; SS override
 15469 00002441 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15470 00002445 250002                  	AND	AX,STBUI ; 200h		; Mask to busy bit
 15471 00002448 B109                    	MOV	CL,9
 15472 0000244A D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15473                                  ioctl_da_ok_j:	; 11/11/2022
 15474 0000244C E935E2                  	jmp	SYS_RET_OK
 15475                                  
 15476                                  ;-------------------------------------------------------------------------
 15477                                  ;
 15478                                  ; IOCTL: AL = 9
 15479                                  ;
 15480                                  ; ENTRY: DS = DOSDATA
 15481                                  ;
 15482                                  ;-------------------------------------------------------------------------
 15483                                  
 15484                                  ioctl_drive_attr:
 15485                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15486 0000244F 88D8                    	mov	al,bl
 15487 00002451 E8FC46                  	call	GETTHISDRV
 15488 00002454 7241                    	jc	short ioctl_drv_err
 15489 00002456 E8B800                  	call	Get_Driver_BL
 15490                                  	; MSDOS 6.0
 15491 00002459 723C                    	JC	short ioctl_drv_err	; drive not valid
 15492                                  
 15493                                  	;mov	dx,[es:di+4]
 15494 0000245B 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15495                                  					; get device attribute word
 15496 0000245F 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15497                                  
 15498                                  ;hkn; SS override
 15499 00002461 36C43E[A205]            	LES	DI,[SS:THISCDS]
 15500                                  	;test	word [es:di+43h],8000h
 15501                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15502                                  	;test	byte [es:di+44h],80h
 15503 00002466 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15504 0000246B 7403                    	JZ	short IOCTLShare
 15505                                  
 15506                                  	;or	dx,1000h ; (MSDOS 3.3)
 15507                                  
 15508                                  ;	Net devices don't return a device attribute word.
 15509                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15510                                  
 15511 0000246D BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15512                                  IOCTLShare:
 15513 00002470 16                      	push	ss
 15514 00002471 1F                      	pop	ds
 15515 00002472 BE[BE03]                	MOV	SI,OPENBUF
 15516 00002475 80C341                  	ADD	BL,"A"	; 41h
 15517 00002478 881C                    	MOV	[SI],BL
 15518 0000247A C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15519 0000247F B80003                  	MOV	AX,0300h
 15520 00002482 F8                      	CLC
 15521                                  	;INT	int_IBM
 15522 00002483 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15523                                  			; DS:SI -> ASCIZ disk device name 
 15524                                  			; (may be full path or only drive
 15525                                  			; specifier--must include the colon)
 15526                                  			; Return: CF clear if absolute disk access allowed
 15527 00002485 7303                    	JNC	short IOCTLLocal	; Not shared
 15528                                  	;OR	DX,0200H		; Shared, bit 9
 15529                                  	; 17/12/2022
 15530 00002487 80CE02                  	or	dh,02h
 15531                                  IOCTLLocal:
 15532                                  	;test	word [es:di+43h],1000h
 15533                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15534                                  	;test	byte [es:di+44h],10h
 15535 0000248A 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15536                                  	;JZ	short ioctl_set_DX
 15537                                  	; 16/12/2022
 15538 0000248F 7403                    	jz	short _ioctl_set_DX
 15539                                  	;OR	DX,8000h
 15540                                  	; 17/12/2022
 15541 00002491 80CE80                  	or	dh,80h
 15542                                  ;ioctl_set_DX:
 15543                                  _ioctl_set_DX:
 15544                                  	; 16/12/2022
 15545 00002494 E9B6FE                  	jmp	ioctl_set_dx
 15546                                  ; 16/12/2022
 15547                                  %if 0	
 15548                                  	call	Get_User_Stack
 15549                                  	MOV	[SI+user_env.user_DX],DX
 15550                                  	;;jmp	SYS_RET_OK
 15551                                  	;; 25/06/2019
 15552                                  	;jmp	SYS_RET_OK_clc
 15553                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15554                                  ioctl_gd_ok_j:
 15555                                  	jmp	short ioctl_da_ok_j
 15556                                  %endif
 15557                                  
 15558                                  ioctl_drv_err:
 15559 00002497 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15560                                  ioctl_gd_err_j:	; 11/11/2022
 15561 00002499 E9F1E1                  	jmp	SYS_RET_ERR
 15562                                  
 15563                                  ;--------------------------------------------------------------------------
 15564                                  ;
 15565                                  ; IOCTL: AL = A
 15566                                  ;
 15567                                  ; ENTRY: DS = DOSDATA
 15568                                  ;
 15569                                  ;--------------------------------------------------------------------------
 15570                                  
 15571                                  ioctl_handle_redir:
 15572 0000249C E88F42                  	call	SFFromHandle		; ES:DI -> SFT
 15573 0000249F 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15574 000024A1 E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15575                                  
 15576                                  ioctl_got_sft:
 15577                                  	;mov	dx,[es:di+5]
 15578 000024A4 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15579                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15580                                  	; 16/12/2022
 15581 000024A8 EBEA                    	jmp	short _ioctl_set_DX
 15582                                  
 15583                                  	; 16/12/2022
 15584                                  ;ioctl_bad_funj:
 15585                                  	;JMP	ioctl_bad_fun
 15586                                  
 15587                                  ;--------------------------------------------------------------------------
 15588                                  ;
 15589                                  ; IOCTL: AL= 4,5
 15590                                  ;
 15591                                  ; ENTRY: DS = DOSDATA
 15592                                  ;	 SI = user's DS
 15593                                  ;
 15594                                  ;
 15595                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15596                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15597                                  ;         return address off the stack if the drive is invalid.
 15598                                  ;
 15599                                  ;-------------------------------------------------------------------------
 15600                                  
 15601                                  ioctl_get_dev:
 15602 000024AA E89200                  	CALL	Check_If_Net
 15603                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15604                                  					; certainly don't know how to do this
 15605                                  					; call.
 15606                                  	; 16/12/2022
 15607 000024AD 7403                    	jz	short ioctl_do_string
 15608                                  ioctl_bad_funj:
 15609 000024AF E957FF                  	JMP	ioctl_bad_fun
 15610                                  
 15611                                  ioctl_do_string:
 15612                                  	;test	word [es:di+4],4000h
 15613                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15614                                  	;test	byte [es:di+5],40h
 15615 000024B2 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15616 000024B7 74F6                    	JZ	short ioctl_bad_funj		; NO
 15617                                  					; assume IOCTL read
 15618 000024B9 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15619                                  
 15620 000024BE A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 15621 000024C0 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 15622                                  
 15623                                  					; it is an IOCTL write
 15624 000024C2 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 15625                                  
 15626                                  ioctl_control_call:
 15627 000024C7 B016                    	MOV	AL,DRDWRHL ; 22
 15628                                  ioctl_setup_pkt:
 15629 000024C9 88DC                    	MOV	AH,BL			; Unit number
 15630 000024CB A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15631 000024CE 31C0                    	XOR	AX,AX
 15632 000024D0 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15633 000024D3 A2[8903]                	MOV	[IOMED],AL
 15634 000024D6 890E[8E03]              	MOV	[IOSCNT],CX
 15635 000024DA 8916[8A03]              	MOV	[IOXAD],DX
 15636 000024DE 8936[8C03]              	MOV	[IOXAD+2],SI
 15637 000024E2 06                      	PUSH	ES
 15638 000024E3 1F                      	POP	DS
 15639 000024E4 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15640 000024E6 16                      	PUSH	SS
 15641 000024E7 07                      	POP	ES
 15642                                  
 15643 000024E8 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15644                                  ioctl_do_IO:
 15645 000024EB E80722                  	call	DEVIOCALL2
 15646                                  
 15647                                  ;hkn; SS override for IOCALL
 15648                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 15649                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15650                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15651 000024EE 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15652 000024F4 7507                    	JNZ	short ioctl_string_err
 15653                                  
 15654                                  ;hkn; SS override
 15655 000024F6 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 15656                                  	; 16/12/2022
 15657 000024FA E987E1                  	jmp	SYS_RET_OK
 15658                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15659                                  	;jmp	short ioctl_gd_ok_j
 15660                                  
 15661                                  ioctl_string_err:
 15662 000024FD 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 15663                                  device_err:
 15664 00002502 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 15665 00002506 89F8                    	MOV	AX,DI
 15666 00002508 E8A330                  	call	SET_I24_EXTENDED_ERROR
 15667                                  
 15668                                  ;hkn; use SS override
 15669                                  ;hkn;	mov	ax,[CS:EXTERR]
 15670 0000250B 36A1[2403]              	mov	ax,[SS:EXTERR]
 15671                                  	;jmp	SYS_RET_ERR
 15672                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15673 0000250F EB88                    	jmp	short ioctl_gd_err_j
 15674                                  
 15675                                  ; 17/05/2019 - Retro DOS v4.0
 15676                                  
 15677                                  ;--------------------------------------------------------------------------
 15678                                  ; Proc name : Get_Driver_BL
 15679                                  ;
 15680                                  ;	DS is DOSDATA
 15681                                  ;	BL is drive number (0=default)
 15682                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 15683                                  ;	No regs modified
 15684                                  ;
 15685                                  ;---------------------------------------------------------------------------
 15686                                  
 15687                                  Get_Driver_BL:
 15688 00002511 50                      	PUSH	AX
 15689 00002512 88D8                    	MOV	AL,BL			; Drive
 15690 00002514 E83946                  	call	GETTHISDRV
 15691 00002517 7224                    	jc	short ioctl_bad_drv
 15692 00002519 30DB                    	XOR	BL,BL			; Unit zero on Net device
 15693 0000251B C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 15694 00002520 C43E[A205]              	LES	DI,[THISCDS]
 15695                                  	;test	word [es:di+43h],8000h
 15696                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15697                                  	;test	byte [es:di+44h],80h
 15698 00002524 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15699                                  	;les	di,[es:di+45h]
 15700 00002529 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 15701 0000252D 750D                    	JNZ	short got_dev_ptr	 ; Is net
 15702 0000252F C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15703                                  	;mov	bl,[es:di+1]
 15704 00002534 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 15705                                  	;les	di,[es:di+13h]
 15706 00002538 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 15707                                  got_dev_ptr:
 15708 0000253C F8                      	CLC
 15709                                  ioctl_bad_drv:
 15710 0000253D 58                      	POP	AX
 15711 0000253E C3                      	retn
 15712                                  
 15713                                  ;-------------------------------------------------------------------------
 15714                                  ; Proc Name : Check_If_Net:
 15715                                  ;
 15716                                  ;
 15717                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 15718                                  ; If no device is found, the return address is popped off the stack, and a
 15719                                  ; jump is made to ioctl_drv_err.
 15720                                  ;
 15721                                  ; On Entry:
 15722                                  ; Registers same as those for Get_Driver_BL
 15723                                  ;
 15724                                  ; On Exit:
 15725                                  ; ZERO flag	- set if not a net device
 15726                                  ;		- reset if net device
 15727                                  ; ES:DI -> the device
 15728                                  ;
 15729                                  ;
 15730                                  ; BUGBUG: This function assumes the following stack setup on entry
 15731                                  ;
 15732                                  ;	  SP+2 -> Error return address
 15733                                  ;	  SP   -> Normal return address
 15734                                  ;
 15735                                  ;-------------------------------------------------------------------------
 15736                                  
 15737                                  Check_If_Net:
 15738                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15739 0000253F E8CFFF                  	CALL	Get_Driver_BL
 15740 00002542 7201                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 15741                                  
 15742                                  ; 30/01/2024 ('Get_Driver_BL' returns with
 15743                                  ;	      'curdir_isnet' condition/ZF, no need to a second test)
 15744                                  %if 0
 15745                                  	;;;
 15746                                  	; (PCDOS 7.1 IBMDOS.COM, Windows ME IO.SYS)
 15747                                  	PUSH	ES
 15748                                  	PUSH	DI
 15749                                  	LES	DI,[THISCDS]
 15750                                  	;test	word [es:di+43h],8000h
 15751                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15752                                  	;test	byte [es:di+44h],80h
 15753                                  	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15754                                  	POP	DI
 15755                                  	POP	ES
 15756                                  	;;;
 15757                                  %endif
 15758 00002544 C3                      	retn
 15759                                  
 15760                                  ioctl_drv_err_pop:
 15761 00002545 58                      	pop	ax			; pop off return address
 15762 00002546 E94EFF                  	jmp	ioctl_drv_err
 15763                                  
 15764                                  ioctl_bad_funj3:
 15765 00002549 E9BDFE                  	jmp	ioctl_bad_fun
 15766                                  
 15767                                  ioctl_string_errj:
 15768 0000254C EBAF                    	jmp	short ioctl_string_err  ; 25/05/2019
 15769                                  
 15770                                  ;--------------------------------------------------------------------------
 15771                                  ;
 15772                                  ; IOCTL: AL = E, F
 15773                                  ;
 15774                                  ; ENTRY: DS = DOSDATA
 15775                                  ;
 15776                                  ;
 15777                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 15778                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15779                                  ;         return address off the stack if the drive is invalid.
 15780                                  ;
 15781                                  ;--------------------------------------------------------------------------
 15782                                  
 15783                                  ioctl_drive_owner:
 15784                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15785 0000254E E8EEFF                  	Call	Check_If_Net
 15786 00002551 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 15787                                  					;   certainly don't know how to do this
 15788                                  					;   call.
 15789                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 15790                                  	; 09/09/2018
 15791                                  	;test	byte [es:di+4],40h
 15792 00002553 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15793 00002558 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 15794                                  	;mov	byte [IOCALL_REQFUNC],23
 15795 0000255A C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 15796 0000255F 3C0E                    	cmp	al,0Eh			; Get Owner ?
 15797 00002561 7405                    	jz	short GetOwner
 15798                                  SetOwner:
 15799 00002563 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 15800                                  GetOwner:
 15801 00002568 B00D                    	MOV	AL,OWNHL ; 13
 15802 0000256A 88DC                    	MOV	AH,BL			; Unit number
 15803 0000256C A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15804 0000256F 31C0                    	XOR	AX,AX
 15805 00002571 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15806 00002574 06                      	PUSH	ES
 15807 00002575 1F                      	POP	DS
 15808 00002576 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15809 00002578 16                      	PUSH	SS
 15810 00002579 07                      	POP	ES
 15811 0000257A BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15812 0000257D 1E                      	push	ds
 15813 0000257E 56                      	push	si
 15814 0000257F E87321                  	call	DEVIOCALL2
 15815 00002582 5E                      	pop	si
 15816 00002583 1F                      	pop	ds
 15817                                  ;hkn; SS override
 15818                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15819                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15820 00002584 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15821 0000258A 75C0                    	jnz	short ioctl_string_errj
 15822 0000258C 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 15823                                  					; owner returned is 1-based.
 15824 00002590 E9F1E0                  	jmp	SYS_RET_OK
 15825                                  
 15826                                  ;============================================================================
 15827                                  ; DELETE.ASM, MSDOS 6.0, 1991
 15828                                  ;============================================================================
 15829                                  ; 07/08/2018 - Retro DOS v3.0
 15830                                  ; 17/05/2019 - Retro DOS v4.0
 15831                                  
 15832                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 15833                                  ;	NAME	DOS_DELETE
 15834                                  
 15835                                  ;
 15836                                  ;	Microsoft Confidential
 15837                                  ;	Copyright (C) Microsoft Corporation 1991
 15838                                  ;	All Rights Reserved.
 15839                                  ;
 15840                                  
 15841                                  ;**	DELETE.ASM - Low level routine for deleting files
 15842                                  ;----------------------------------------------------------------------------
 15843                                  ;		DOS_DELETE
 15844                                  ;		REN_DEL_Check
 15845                                  ;		FastOpen_Delete	       ; DOS 3.3
 15846                                  ;		FastOpen_Update	       ; DOS 3.3
 15847                                  
 15848                                  ;   Revision history:
 15849                                  ;
 15850                                  ;   A000  version 4.00	Jan. 1988
 15851                                  ;   A001  Fastopen Rename fix	April 1989
 15852                                  
 15853                                  ;Installed = TRUE
 15854                                  
 15855                                  ;	i_need	NoSetDir,BYTE
 15856                                  ;	i_need	Creating,BYTE
 15857                                  ;	i_need	DELALL,BYTE
 15858                                  ;	i_need	THISDPB,DWORD
 15859                                  ;	i_need	THISSFT,DWORD
 15860                                  ;	i_need	THISCDS,DWORD
 15861                                  ;	i_need	CURBUF,DWORD
 15862                                  ;	i_need	ATTRIB,BYTE
 15863                                  ;	i_need	SATTRIB,BYTE
 15864                                  ;	i_need	WFP_START,WORD
 15865                                  ;	i_need	REN_WFP,WORD			 ;BN001
 15866                                  ;	i_need	NAME1,BYTE			 ;BN001
 15867                                  ;	i_need	FoundDel,BYTE
 15868                                  ;	i_need	AUXSTACK,BYTE
 15869                                  ;	i_need	VOLCHNG_FLAG,BYTE
 15870                                  ;	i_need	JShare,DWORD
 15871                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 15872                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 15873                                  ;
 15874                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 15875                                  ;
 15876                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 15877                                  ;	i_need	DMAADD,DWORD
 15878                                  ;	i_need	RENAMEDMA,BYTE
 15879                                  
 15880                                  ;----------------------------------------------------------------------------
 15881                                  ;
 15882                                  ; Procedure Name : DOS_DELETE
 15883                                  ;
 15884                                  ; Inputs:
 15885                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15886                                  ;		terminated)
 15887                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15888                                  ;		( = -1 if current dir not involved, else
 15889                                  ;		 Points to first char after last "/" of current dir part)
 15890                                  ;	[THISCDS] Points to CDS being used
 15891                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15892                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15893                                  ; Function:
 15894                                  ;	Delete the specified file(s)
 15895                                  ; Outputs:
 15896                                  ;	CARRY CLEAR
 15897                                  ;		OK
 15898                                  ;	CARRY SET
 15899                                  ;	    AX is error code
 15900                                  ;		error_file_not_found
 15901                                  ;			Last element of path not found
 15902                                  ;		error_path_not_found
 15903                                  ;			Bad path (not in curr dir part if present)
 15904                                  ;		error_bad_curr_dir
 15905                                  ;			Bad path in current directory part of path
 15906                                  ;		error_access_denied
 15907                                  ;			Attempt to delete device or directory
 15908                                  ;		***error_sharing_violation***
 15909                                  ;			Deny both access required, generates an INT 24.
 15910                                  ;			This error is NOT returned. The INT 24H is generated,
 15911                                  ;			  and the file is ignored (not deleted). Delete will
 15912                                  ;			  simply continue on looking for more files.
 15913                                  ;			  Carry will NOT be set in this case.
 15914                                  ; DS preserved, others destroyed
 15915                                  ;
 15916                                  ;----------------------------------------------------------------------------
 15917                                  
 15918                                  FILEFOUND   equ 01h
 15919                                  FILEDELETED equ 10h
 15920                                  
 15921                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15922                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 15923                                  
 15924                                  	; 30/01/2021
 15925                                  
 15926                                  DOS_DELETE:
 15927                                  
 15928                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 15929                                  ;hkn; appropriately at this point.
 15930                                  
 15931 00002593 E82DED                  	call	TestNet
 15932 00002596 7306                    	JNC	short LOCAL_DELETE
 15933                                  
 15934                                  ;IF NOT Installed
 15935                                  ;	transfer NET_DELETE
 15936                                  ;ELSE
 15937                                  	;MOV	AX,(MultNET SHL 8) | 19
 15938                                  	;INT	2FH
 15939                                  	;return
 15940                                  
 15941 00002598 B81311                  	mov	ax,1113h
 15942 0000259B CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 15943                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 15944                                  			;		fully-qualified filename in DOS CS
 15945                                  			; SDA CDS pointer -> current directory structure for drive with file
 15946                                  			; Return: CF set on error
 15947 0000259D C3                      	retn
 15948                                  ;ENDIF
 15949                                  
 15950                                  LOCAL_DELETE:
 15951 0000259E C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 15952 000025A3 E8E2ED                  	call	ECritDisk
 15953                                  	;mov	word [CREATING],0E500h
 15954 000025A6 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 15955 000025AC 8B36[B205]              	MOV	SI,[WFP_START]
 15956                                  SKPNUL:
 15957 000025B0 AC                      	LODSB
 15958 000025B1 08C0                    	OR	AL,AL
 15959 000025B3 75FB                    	JNZ	short SKPNUL		; go to end
 15960 000025B5 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 15961 000025B8 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 15962 000025BC 7506                    	JNZ	short TEST_QUEST
 15963 000025BE 807C022A                	CMP	BYTE [SI+2],"*"
 15964 000025C2 741F                    	JZ	short CHECK_ATTS
 15965                                  TEST_QUEST:
 15966 000025C4 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 15967 000025C7 87FE                    	XCHG	DI,SI
 15968                                  
 15969 000025C9 16                      	push	ss
 15970                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 15971 000025CA 07                      	pop	es ; 17/05/2019
 15972                                  
 15973 000025CB B83F3F                  	MOV	AX,"??" ; 3F3Fh
 15974 000025CE B90400                  	MOV	CX,4		; four sets of "??"
 15975 000025D1 F3AF                    	REPE	SCASW
 15976 000025D3 751C                    	JNZ	short NOT_ALL
 15977 000025D5 87FE                    	XCHG	DI,SI
 15978 000025D7 AD                      	LODSW
 15979 000025D8 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 15980 000025DB 7514                    	JNZ	short NOT_ALL
 15981 000025DD AD                      	LODSW
 15982 000025DE 3D3F3F                  	CMP	AX,"??"
 15983 000025E1 750E                    	JNZ	short NOT_ALL
 15984                                  CHECK_ATTS:
 15985 000025E3 A0[6D05]                	MOV	AL,[SATTRIB]
 15986                                  	;and	al,1Fh
 15987 000025E6 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15988                                  					; Look only at hidden bits
 15989                                  	;cmp	al,1Fh
 15990 000025E8 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15991                                  					; All must be set
 15992 000025EA 7505                    	JNZ	short NOT_ALL
 15993                                  
 15994                                  ; NOTE WARNING DANGER-----
 15995                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 15996                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 15997                                  
 15998 000025EC C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 15999                                  NOT_ALL:
 16000 000025F1 C606[4C03]01            	MOV	byte [NoSetDir],1
 16001 000025F6 E8B119                  	call	GetPathNoSet
 16002 000025F9 7312                    	JNC	short Del_found
 16003 000025FB 750B                    	JNZ	short _bad_path
 16004 000025FD 08C9                    	OR	CL,CL
 16005 000025FF 7407                    	JZ	short _bad_path
 16006                                  No_file:
 16007 00002601 B80200                  	MOV	AX,error_file_not_found
 16008                                  ErrorReturn:
 16009 00002604 F9                      	STC
 16010                                  	;call	LCritDisk
 16011                                  	;retn
 16012                                  	; 18/12/2022
 16013 00002605 E99BED                  	jmp	LCritDisk
 16014                                  
 16015                                  _bad_path:
 16016 00002608 B80300                  	MOV	AX,error_path_not_found
 16017 0000260B EBF7                    	JMP	short ErrorReturn
 16018                                  
 16019                                  Del_found:
 16020 0000260D 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16021 0000260F 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16022 00002614 7405                    	JZ	short NOT_DIR
 16023                                  Del_access_err:
 16024 00002616 B80500                  	MOV	AX,error_access_denied
 16025 00002619 EBE9                    	JMP	short ErrorReturn
 16026                                  
 16027                                  NOT_DIR:
 16028 0000261B 08E4                    	OR	AH,AH			; Check if device name
 16029 0000261D 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16030                                  
 16031                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16032                                  
 16033                                  DELFILE:
 16034 0000261F 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16035                                  
 16036                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16037                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16038                                  
 16039 00002624 1E                      	PUSH	DS
 16040 00002625 8A26[7F05]              	MOV	AH,[DELALL]
 16041 00002629 C53E[E205]              	LDS	DI,[CURBUF]
 16042                                  	
 16043                                  ;hkn; SS override
 16044 0000262D 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16045 00002633 7509                    	JNZ	short DoDelete		; yes
 16046                                  
 16047 00002635 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16048 00002639 7403                    	JZ	short DoDelete		; not read only
 16049                                  
 16050                                  	; 30/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16051                                  Skip_it:
 16052 0000263B 1F                      	POP	DS
 16053 0000263C EB2F                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16054                                  
 16055                                  DoDelete:
 16056 0000263E E88100                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16057                                  	;JNC	short DEL_SHARE_OK
 16058                                  	;POP	DS
 16059                                  	;JMP	SHORT DELNXT		; Skip it
 16060                                  	; 30/01/2024
 16061 00002641 72F8                    	jc	short Skip_it
 16062                                  
 16063                                  DEL_SHARE_OK:
 16064                                  	; 17/05/2019 - Retro DOS v4.0
 16065                                  	; MSDOS 6.0
 16066                                  	;test	byte [di+5],40h
 16067 00002643 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16068                                  					;LB. if already dirty		  ;AN000;
 16069 00002647 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16070 00002649 E8C335                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16071                                  	;or	byte [di+5],40h
 16072 0000264C 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16073                                  yesdirty:
 16074 00002650 8827                    	mov	[bx],ah 
 16075                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16076 00002652 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16077 00002654 1F                      	POP	DS
 16078 00002655 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16079                                  
 16080 0000265A 83FB02                  	CMP	BX,2
 16081 0000265D 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16082                                  	;cmp	bx,[es:bp+0Dh]
 16083 0000265F 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16084 00002663 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16085                                  
 16086 00002665 E80029                  	call	RELEASE 		; Free file data
 16087 00002668 7252                    	JC	short No_fileJ
 16088                                  
 16089                                  ; DOS 3.3  FastOpen
 16090                                  
 16091 0000266A E8C300                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16092                                  
 16093                                  ; DOS 3.3  FastOpen
 16094                                  
 16095                                  DELNXT:
 16096 0000266D C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16097 00002671 E8A118                  	call	GETENTRY		; Registers need to be reset
 16098 00002674 7246                    	JC	short No_fileJ
 16099 00002676 E8D517                  	call	NEXTENT
 16100 00002679 73A4                    	JNC	short DELFILE
 16101 0000267B C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16102                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16103                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16104                                  	;;mov	al,[es:bp+0]
 16105                                  	; 15/12/2022
 16106 0000267F 268A4600                	MOV	AL,[ES:BP]
 16107 00002683 E88134                  	call	FLUSHBUF
 16108 00002686 7234                    	JC	short No_fileJ
 16109                                  ;
 16110                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16111                                  ;
 16112                                  ;   not found not deleted		file not found
 16113                                  ;   not found	  deleted		*** impossible ***
 16114                                  ;	found not deleted		access denied (read-only)
 16115                                  ;	found	  deleted		no error
 16116                                  ;
 16117 00002688 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16118 0000268D 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16119                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16120                                  ; and to force the DOS to issue a media check.
 16121 0000268F F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16122 00002694 741C                    	jz	short No_Set_Flag
 16123 00002696 50                      	PUSH	AX
 16124 00002697 06                      	PUSH	ES
 16125 00002698 57                      	PUSH	DI
 16126 00002699 C43E[A205]              	LES	DI,[THISCDS]
 16127 0000269D 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16128 000026A0 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16129 000026A3 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16130                                  	
 16131                                  	; MSDOS 6.0
 16132 000026A7 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16133 000026A9 E8D604                  	call	Set_Media_ID		;>32mb set volume id to boot record	 ;AN000;
 16134                                  	 
 16135 000026AC E8EF30                  	call	FATREAD_CDS		; force media check
 16136 000026AF 5F                      	POP	DI
 16137 000026B0 07                      	POP	ES
 16138 000026B1 58                      	POP	AX
 16139                                  No_Set_Flag:
 16140                                  	;call	LCritDisk		; carry is clear
 16141                                  	;retn
 16142                                  	; 18/12/2022
 16143 000026B2 E9EEEC                  	jmp	LCritDisk
 16144                                  DelError:
 16145 000026B5 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16146 000026BA 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16147                                  No_fileJ:
 16148 000026BC E942FF                  	JMP	No_file ; 10/08/2018 		; Nope
 16149                                  Del_access_errJ:
 16150 000026BF E954FF                  	JMP	Del_access_err ; 10/08/2018
 16151                                  
 16152                                  ; 08/08/2018 - Retro DOS v3.0
 16153                                  
 16154                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16155                                  ;---------------------------------------------------------------------------
 16156                                  ; Procedure Name : REN_DEL_Check
 16157                                  ;
 16158                                  ; Inputs:
 16159                                  ;	[THISDPB] set
 16160                                  ;	[CURBUF+2]:BX points to entry
 16161                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16162                                  ;	[WFP_Start] points to name
 16163                                  ; Function:
 16164                                  ;	Check for Exclusive access on given file.
 16165                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16166                                  ; Outputs:
 16167                                  ;	ES:BP = [THISDPB]
 16168                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16169                                  ;		last element will be loaded from the directory entry.  This is
 16170                                  ;		so the name given to the sharer doesn't have any meta chars in
 16171                                  ;		it.
 16172                                  ;	Carry set if sharing violation, INT 24H generated
 16173                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16174                                  ;		This is because input AX is preserved.
 16175                                  ;		Caller must set the error if needed.
 16176                                  ;	Carry clear
 16177                                  ;		OK
 16178                                  ; AX,DS,BX,SI,DI preserved
 16179                                  ;---------------------------------------------------------------------------
 16180                                  
 16181                                  REN_DEL_Check:
 16182                                  
 16183 000026C2 1E                      	PUSH	DS
 16184 000026C3 57                      	PUSH	DI
 16185 000026C4 50                      	PUSH	AX
 16186 000026C5 53                      	PUSH	BX
 16187 000026C6 56                      	PUSH	SI		; Save CURBUF pointers
 16188                                  	
 16189 000026C7 16                      	push	ss
 16190 000026C8 07                      	pop	es
 16191                                  
 16192                                  ;hkn; context ES will assume ES to DOSDATA
 16193                                  ;hkn; ASSUME	ES:DOSGROUP
 16194                                  
 16195                                  ;hkn; SS override
 16196 000026C9 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16197 000026CE 89DE                    	MOV	SI,BX
 16198                                  
 16199                                  ;hkn; SS override
 16200 000026D0 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16201 000026D5 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16202 000026D7 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 16203 000026DA E886EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16204 000026DD 49                      	DEC	CX		; Don't include nul in count
 16205 000026DE 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16206 000026E0 E82B47                  	call	SkipBack	; Back up one element
 16207 000026E3 47                      	INC	DI		; Point to start of last element
 16208                                  
 16209                                  	; 17/05/2019 - Retro DOS v4.0
 16210                                  ;hkn; SS override
 16211                                  	; MSDOS 6.0
 16212 000026E4 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16213                                  	;
 16214 000026E9 E84EFA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16215 000026EC 5E                      	POP	SI		; Get back entry pointers
 16216 000026ED 5B                      	POP	BX
 16217 000026EE 53                      	PUSH	BX
 16218 000026EF 56                      	PUSH	SI		; Back on stack
 16219                                  	
 16220 000026F0 16                      	push	ss
 16221 000026F1 1F                      	pop	ds
 16222                                  
 16223                                  ;hkn; context DS will assume ES to DOSDATA
 16224                                  ;hkn; ASSUME	DS:DOSGROUP
 16225                                  
 16226                                  ; Close the file if possible by us.
 16227                                  ;
 16228                                  ;if installed
 16229 000026F2 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16230                                  ;else
 16231                                  ;	Call	ShCloseFile
 16232                                  ;endif
 16233 000026F6 8C1E[A005]              	MOV	[THISSFT+2],DS
 16234                                  
 16235                                  ;hkn; AUXSTACK is in DOSDATA
 16236 000026FA C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16237                                  				; Scratch space
 16238 00002700 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16239 00002702 E8E024                  	call	DOOPEN		; Fill in SFT for share check
 16240 00002705 C43E[9E05]              	LES	DI,[THISSFT]
 16241                                  	;mov	word [es:di+2],10h
 16242 00002709 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16243                                  				; requires exclusive access
 16244                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16245 0000270F 26C7050100              	mov	word [ES:DI],1
 16246 00002714 E8EC4C                  	call	ShareEnter
 16247 00002717 720D                    	jc	short CheckDone
 16248 00002719 C43E[9E05]              	LES	DI,[THISSFT]
 16249                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16250 0000271D 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16251                                  	
 16252 00002722 E8D94C                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16253 00002725 F8                      	CLC
 16254                                  CheckDone:
 16255 00002726 C42E[8A05]              	LES	BP,[THISDPB]
 16256 0000272A 5E                      	POP	SI
 16257 0000272B 5B                      	POP	BX
 16258 0000272C 58                      	POP	AX
 16259 0000272D 5F                      	POP	DI
 16260 0000272E 1F                      	POP	DS
 16261 0000272F C3                      	retn
 16262                                  
 16263                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16264                                  ;---------------------------------------------------------------------------
 16265                                  ; Procedure Name : FastOpen_Delete
 16266                                  ; Inputs:
 16267                                  ;	None
 16268                                  ; Function:
 16269                                  ;	Call FastOpen to delete the dir info.
 16270                                  ; Outputs:
 16271                                  ;	None
 16272                                  ;---------------------------------------------------------------------------
 16273                                  
 16274                                  FastOpen_Delete:
 16275 00002730 9C                      	PUSHF			; save flag
 16276 00002731 56                      	PUSH	SI		; save registers
 16277 00002732 53                      	PUSH	BX
 16278 00002733 50                      	PUSH	AX
 16279                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16280                                  ;hkn; SS override
 16281                                  	; 17/05/2019 - Retro DOS v4.0
 16282                                  	; MSDOS 6.0
 16283 00002734 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16284                                  	
 16285 00002739 B003                    	MOV	AL,FONC_delete	; al = 3
 16286                                  fastinvoke:
 16287                                  ;hkn; FastTable is in DOSDATA
 16288 0000273B BB[320D]                	MOV	BX,FastTable+2
 16289 0000273E FF1F                    	CALL	far [BX]	; call fastopen
 16290 00002740 58                      	POP	AX		; restore registers
 16291 00002741 5B                      	POP	BX
 16292 00002742 5E                      	POP	SI
 16293 00002743 9D                      	POPF			; restore flag
 16294 00002744 C3                      	retn
 16295                                  
 16296                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16297                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16298                                  
 16299                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16300                                  ;---------------------------------------------------------------------------
 16301                                  ; PROCEDURE Name : FastOpen_Rename
 16302                                  ;
 16303                                  ; Inputs:
 16304                                  ;	 REN_WFP   = Path Name
 16305                                  ;	 NAME1	   = New Name
 16306                                  ; Function:
 16307                                  ;	Call FastOpen to rename the dir entry in the cache
 16308                                  ; Outputs:
 16309                                  ;	None
 16310                                  ;---------------------------------------------------------------------------
 16311                                  
 16312                                  FastOpen_Rename:
 16313                                  	; 17/05/2019 - Retro DOS v4.0
 16314                                  	; 08/08/2018 - Retro DOS v3.0
 16315                                  	; MSDOS 6.0
 16316 00002745 9C                      	PUSHF			;AN001 save flag
 16317 00002746 56                      	PUSH	SI		;AN001 save registers
 16318 00002747 57                      	PUSH	DI		;AN001
 16319 00002748 53                      	PUSH	BX		;AN001
 16320 00002749 50                      	PUSH	AX		;AN001
 16321                                  	;
 16322                                  ;hkn; SS override
 16323 0000274A 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16324                                  
 16325                                  ;hkn; NAME1 is in DOSDATA
 16326 0000274F BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16327                                  	;mov	al,6
 16328 00002752 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16329                                  	
 16330                                  ;hkn; FastTable is in DOSDATA
 16331 00002754 BB[320D]                	MOV	BX,FastTable+2
 16332 00002757 FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16333                                  	
 16334 00002759 58                      	POP	AX		; restore registers  ;AN001
 16335 0000275A 5B                      	POP	BX				     ;AN001
 16336 0000275B 5F                      	POP	DI				     ;AN001
 16337 0000275C 5E                      	POP	SI				     ;AN001
 16338 0000275D 9D                      	POPF			; restore flag	     ;AN001
 16339 0000275E C3                      	retn					     ;AN001
 16340                                  
 16341                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16342                                  ;---------------------------------------------------------------------------
 16343                                  ; Procedure Name : FastOpen_Update
 16344                                  ;
 16345                                  ; Inputs:
 16346                                  ;	DL     drive number (A=0,B=1,,,)
 16347                                  ;	CX     first cluster #
 16348                                  ;	AH     0 updates dir entry
 16349                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16350                                  ;	ES:DI  directory entry
 16351                                  ; Function:
 16352                                  ;	Call FastOpen to update the dir info.
 16353                                  ; Outputs:
 16354                                  ;	None
 16355                                  ;---------------------------------------------------------------------------
 16356                                  
 16357                                  FastOpen_Update:
 16358 0000275F 9C                      	PUSHF			; save flag
 16359 00002760 56                      	PUSH	SI
 16360 00002761 53                      	PUSH	BX		; save regs
 16361 00002762 50                      	PUSH	AX
 16362 00002763 B004                    	MOV	AL,FONC_update	; al = 4
 16363 00002765 EBD4                    	JMP	short fastinvoke
 16364                                  
 16365                                  	; 17/05/2019
 16366                                  
 16367                                  	; MSDOS 6.0
 16368                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16369                                  ;---------------------------------------------------------------------------
 16370                                  Fast_Dispatch:
 16371                                  ;hkn; FastTable is in DOSDATA
 16372 00002767 BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16373                                  ;hkn; use SS override
 16374 0000276A 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16375 0000276D C3                      	retn
 16376                                  
 16377                                  ;============================================================================
 16378                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16379                                  ;============================================================================
 16380                                  ; 08/08/2018 - Retro DOS v3.0
 16381                                  ; 17/05/2019 - Retro DOS v4.0
 16382                                  
 16383                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16384                                  ;	NAME	DOS_RENAME
 16385                                  
 16386                                  ;**	Low level routine for renaming files
 16387                                  ;----------------------------------------------------------------------------
 16388                                  ;	DOS_RENAME
 16389                                  ;
 16390                                  ;	Modification history:
 16391                                  ;
 16392                                  ;	    Created: ARR 30 March 1983
 16393                                  
 16394                                  ;----------------------------------------------------------------------------
 16395                                  ;
 16396                                  ; Procedure Name : DOS_RENAME
 16397                                  ;
 16398                                  ; Inputs:
 16399                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16400                                  ;		chars, NUL terminated)
 16401                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16402                                  ;		( = -1 if current dir not involved, else
 16403                                  ;		 Points to first char after last "/" of current dir part)
 16404                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16405                                  ;		chars, NUL terminated)
 16406                                  ;	[THISCDS] Points to CDS being used
 16407                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16408                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16409                                  ; Function:
 16410                                  ;	Rename the specified file(s)
 16411                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16412                                  ; Outputs:
 16413                                  ;	CARRY CLEAR
 16414                                  ;	    OK
 16415                                  ;	CARRY SET
 16416                                  ;	    AX is error code
 16417                                  ;		error_file_not_found
 16418                                  ;			No match for source, or dest path invalid
 16419                                  ;		error_not_same_device
 16420                                  ;			Source and dest are on different devices
 16421                                  ;		error_access_denied
 16422                                  ;			Directory specified (not simple rename),
 16423                                  ;			Device name given, Destination exists.
 16424                                  ;			NOTE: In third case some renames may have
 16425                                  ;			 been done if metas.
 16426                                  ;		error_path_not_found
 16427                                  ;			Bad path (not in curr dir part if present)
 16428                                  ;			SOURCE ONLY
 16429                                  ;		error_bad_curr_dir
 16430                                  ;			Bad path in current directory part of path
 16431                                  ;			SOURCE ONLY
 16432                                  ;		error_sharing_violation
 16433                                  ;			Deny both access required, generates an INT 24.
 16434                                  ; DS preserved, others destroyed
 16435                                  ;
 16436                                  ;----------------------------------------------------------------------------
 16437                                  
 16438                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16439                                  
 16440                                  	; 31/01/2024
 16441                                  
 16442                                  DOS_RENAME:
 16443                                  
 16444                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16445                                  ;hkn; at this point to DOSDATA.
 16446                                  
 16447 0000276E E852EB                  	call	TestNet
 16448 00002771 7306                    	JNC	short LOCAL_RENAME
 16449                                  
 16450                                  ;IF NOT Installed
 16451                                  ;	transfer NET_RENAME
 16452                                  ;ELSE
 16453                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16454                                  	;INT	2FH
 16455                                  	;return
 16456                                  
 16457 00002773 B81111                  	mov     ax, 1111h
 16458 00002776 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16459                                  			; SS = DS = DOS CS, 
 16460                                  			; SDA first filename pointer = offset of fully-qualified old name
 16461                                  			; SDA CDS pointer -> current directory
 16462                                  			; Return: CF set on error
 16463 00002778 C3                      	retn
 16464                                  ;ENDIF
 16465                                  
 16466                                  LOCAL_RENAME:
 16467 00002779 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16468 0000277E 8B36[B205]              	MOV	SI,[WFP_START]
 16469 00002782 8B3E[B405]              	MOV	DI,[REN_WFP]
 16470 00002786 8A04                    	MOV	AL,[SI]
 16471 00002788 8A25                    	MOV	AH,[DI]
 16472 0000278A 0D2020                  	OR	AX,2020H		; Lower case
 16473 0000278D 38E0                    	CMP	AL,AH
 16474 0000278F 7405                    	JZ	short SAMEDRV
 16475 00002791 B81100                  	MOV	AX,error_not_same_device ; 11h
 16476 00002794 F9                      	STC
 16477 00002795 C3                      	retn
 16478                                  
 16479                                  SAMEDRV:
 16480 00002796 FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16481 0000279A FF36[2C03]              	PUSH	WORD [DMAADD]
 16482 0000279E 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16483                                  
 16484                                  ;hkn; RENAMEDMA is in DOSDATA
 16485 000027A2 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16486 000027A8 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16487 000027AD E8D8EB                  	call	ECritDisk
 16488 000027B0 E8F205                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16489                                  					;    points to entry
 16490 000027B3 7314                    	JNC	short Check_Dev
 16491 000027B5 83F812                  	CMP	AX,error_no_more_files ; 12h
 16492 000027B8 7503                    	JNZ	short GOTERR
 16493 000027BA B80200                  	MOV	AX,error_file_not_found ; 2
 16494                                  GOTERR:
 16495 000027BD F9                      	STC
 16496                                  RENAME_POP:
 16497 000027BE 8F06[2C03]              	POP	WORD [DMAADD]
 16498 000027C2 8F06[2E03]              	POP	WORD [DMAADD+2]
 16499                                  	;call	LCritDisk
 16500                                  	;retn
 16501                                  	; 16/12/2022
 16502 000027C6 E9DAEB                  	jmp	LCritDisk
 16503                                  
 16504                                  Check_Dev:
 16505                                  	; 17/05/2019 - Retro DOS v4.0
 16506                                  	;mov	ax,5
 16507 000027C9 B80500                  	MOV	AX,error_access_denied	; Assume error
 16508                                  	
 16509                                  	; MSDOS 6.0
 16510 000027CC 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16511 000027CD C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  check if source a dir  ;AN000;
 16512                                  	;add	si,21
 16513 000027D1 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16514                                  	;test	byte [si+11],10h
 16515 000027D4 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16516 000027D8 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16517 000027DA 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16518 000027DE E8DEFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16519                                  notdir:
 16520 000027E1 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16521 000027E2 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16522                                  
 16523                                  	; MSDOS 3.3 & MSDOS 6.0
 16524 000027E4 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16525 000027E9 75D2                    	JNZ	short GOTERR
 16526                                  
 16527                                  ; At this point a source has been found. There is search continuation info (a
 16528                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16529                                  ; directory entry found.
 16530                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16531                                  ; throughout the RENAME since it is known at this point that the source and
 16532                                  ; destination are both on the same device.
 16533                                  ; [SATTRIB] is also set.
 16534                                  
 16535 000027EB 89DE                    	MOV	SI,BX
 16536                                  	;add	si,26
 16537 000027ED 83C61A                  	ADD	SI,dir_entry.dir_first
 16538 000027F0 E8CFFE                  	call	REN_DEL_Check
 16539 000027F3 7305                    	JNC	short REN_OK1
 16540 000027F5 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16541 000027F8 EBC4                    	JMP	short RENAME_POP
 16542                                  
 16543                                  ;------------------------------------------------------------------------------
 16544                                  ; Check if the source is a file or directory. If file, delete the entry
 16545                                  ; from the Fastopen cache. If directory, rename it later
 16546                                  ;------------------------------------------------------------------------------
 16547                                  
 16548                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16549                                  	; MSDOS 6.0
 16550                                  	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16551                                  	;PUSH	SI
 16552 000027FA C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16553                                  	;add	si,21
 16554 000027FE 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16555                                  	;test	byte [si+11],10h
 16556 00002801 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16557                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16558 00002805 7503                    	jnz	short SWAP_SOURCE ; 31/01/2024
 16559                                  	;POP	SI			;BN00X
 16560                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 16561                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 16562                                  	;POP	SI
 16563                                  
 16564                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16565 00002807 E826FF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16566                                  SWAP_SOURCE:
 16567                                  	; MSDOS 3.3
 16568                                  	;MOV	SI,[REN_WFP]
 16569                                  	;MOV	[WFP_START],SI
 16570                                  	; MSDOS 6.0
 16571 0000280A A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16572 0000280D 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16573 00002811 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16574 00002815 A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16575                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16576 00002818 C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16577                                  	;mov	word [CREATING],0E5FFh
 16578 0000281E C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16579                                  					; A rename is like a CREATE_NEW as far
 16580                                  					; as the destination is concerned.
 16581 00002824 E88317                  	call	GetPathNoSet
 16582                                  
 16583                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16584                                  ;   since no files match the destination name. If it fails for any other
 16585                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16586                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16587                                  ;   if the rename should fail because we haven't built an explicit name by
 16588                                  ;   substituting for the meta chars in it. In this case the destination file
 16589                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16590                                  ;   in the directory entry part.
 16591                                  	
 16592 00002827 7223                    	JC	short NODEST
 16593                                  	
 16594                                  	; MSDOS 6.0
 16595                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16596                                  	; !! MSDOS 3.3 !!
 16597                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 16598                                  
 16599 00002829 08E4                    	OR	AH,AH			; Device?
 16600 0000282B 792C                    	JNS	short SAVEDEST		; No, continue
 16601                                  BAD_ACC:
 16602 0000282D B80500                  	MOV	AX,error_access_denied
 16603 00002830 F9                      	STC
 16604                                  RENAME_CLEAN:
 16605 00002831 9C                      	PUSHF				; Save carry state
 16606 00002832 50                      	PUSH	AX			; and error code (if carry set)
 16607 00002833 A0[7605]                	MOV	AL,[THISDRV]
 16608 00002836 E8CE32                  	call	FLUSHBUF
 16609 00002839 58                      	POP	AX
 16610 0000283A 803E[4A03]00            	CMP	byte [FAILERR],0
 16611 0000283F 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 16612 00002841 9D                      	POPF
 16613 00002842 E979FF                  	JMP	RENAME_POP
 16614                                  
 16615                                  BAD_ERR:
 16616 00002845 58                      	POP	AX			; Saved flags
 16617                                  	; 16/12/202
 16618                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16619                                  BAD_PATH: ; *
 16620 00002846 B80300                  	MOV	AX,error_path_not_found
 16621 00002849 E971FF                  	JMP	GOTERR
 16622                                  
 16623                                  NODEST:
 16624 0000284C 75F8                    	JNZ	short BAD_PATH
 16625 0000284E 803E[4A03]00            	CMP	byte [FAILERR],0
 16626 00002853 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 16627                                  					; because user FAILed on I 24
 16628                                  	; 14/11/2022
 16629 00002855 08C9                    	OR	CL,CL
 16630                                  	;JNZ	short SAVEDEST
 16631                                  	; 17/05/2019
 16632 00002857 74ED                    	jz	short BAD_PATH ; *
 16633                                  ;BAD_PATH: ; *
 16634                                  ;	MOV	AX,error_path_not_found
 16635                                  ;	;STC
 16636                                  ;	;JMP	RENAME_POP
 16637                                  ;	; 17/05/2019
 16638                                  ;	jmp	GOTERR 
 16639                                  
 16640                                  ; 16/12/2022
 16641                                  %if 0
 16642                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16643                                  	or	cl,cl
 16644                                  	jnz	short SAVEDEST
 16645                                  	;jz	short BAD_PATH ; *
 16646                                  BAD_PATH: ; *
 16647                                  	;mov	ax,3
 16648                                  	mov	ax,error_path_not_found
 16649                                  	stc
 16650                                  	jmp	RENAME_POP
 16651                                  %endif
 16652                                  
 16653                                  SAVEDEST:
 16654 00002859 16                      	push	ss
 16655 0000285A 07                      	pop	es
 16656                                  
 16657                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 16658 0000285B BF[5705]                	MOV	DI,NAME2
 16659 0000285E BE[4B05]                	MOV	SI,NAME1
 16660                                  
 16661 00002861 B90B00                  	MOV	CX,11
 16662 00002864 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 16663 00002866 A1[C205]                	MOV	AX,[DIRSTART]
 16664 00002869 A3[6405]                	MOV	[DESTSTART],AX
 16665                                  BUILDDEST:
 16666 0000286C 16                      	push	ss
 16667 0000286D 07                      	pop	es			; needed due to JMP BUILDDEST below
 16668                                  
 16669                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 16670 0000286E BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 16671 00002871 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 16672 00002874 BE[5705]                	MOV	SI,NAME2		; Raw dest
 16673                                  
 16674 00002877 B90B00                  	MOV	CX,11
 16675                                  
 16676                                  	; 17/05/2019 - Retro DOS v4.0
 16677                                  	
 16678                                  	; MSDOS 6.0
 16679 0000287A E81101                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 16680                                  
 16681                                  	; MSDOS 3.3
 16682                                  
 16683                                  ; 08/08/2018 - Retro DOS v3.0
 16684                                  ; MSDOS 6.0 
 16685                                  ;---------------------------------------------------------------------------
 16686                                  ;Procedure: NEW_RENAME
 16687                                  ;
 16688                                  ;Input: DS:SI -> raw string with ?
 16689                                  ;	ES:DI -> destination string
 16690                                  ;	DS:BX -> source string
 16691                                  ;Function: replace ? chars of raw string with chars in source string and
 16692                                  ;	   put in destination string
 16693                                  ;Output: ES:DI-> new string
 16694                                  ;---------------------------------------------------------------------------
 16695                                  ;
 16696                                  ;NEW_RENAME:
 16697                                  ;NEWNAM:
 16698                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 16699                                  ;	LODSB
 16700                                  ;	CMP	AL,"?"
 16701                                  ;	JNZ	short NOCHG
 16702                                  ;	MOV	AL,[BX] 		; Get replace char
 16703                                  ;NOCHG:
 16704                                  ;	STOSB
 16705                                  ;	INC	BX			; Next replace char
 16706                                  ;	LOOP	NEWNAM
 16707                                  ;	; MSDOS 6.0
 16708                                  ;	;retn
 16709                                  
 16710                                  	; MSDOS 3.3 & MSDOS 6.0
 16711                                  	;mov	byte [ATTRIB],16h
 16712 0000287D C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 16713 00002882 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 16714 00002887 E8D119                  	call	DEVNAME 		; Check if we built a device name
 16715 0000288A 73A1                    	JNC	short BAD_ACC
 16716 0000288C 8B1E[6405]              	MOV	BX,[DESTSTART]
 16717 00002890 C42E[8A05]              	LES	BP,[THISDPB]
 16718 00002894 E8AD16                  	call	SETDIRSRCH		; Reset search to start of dir
 16719 00002897 7294                    	JC	short BAD_ACC 		; Screw up
 16720 00002899 E86115                  	call	FINDENTRY		; See if new name already exists
 16721 0000289C 738F                    	JNC	short BAD_ACC 		; Error if found
 16722 0000289E 803E[4A03]00            	CMP	byte [FAILERR],0
 16723 000028A3 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 16724 000028A5 A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 16725 000028A8 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 16726 000028AC 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 16727                                  
 16728                                  	;mov	al,[RENAMEDMA+32]
 16729 000028AE A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 16730 000028B1 A810                    	TEST	AL,attr_directory ; 10h
 16731 000028B3 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 16732                                  					; otherwise the . and .. entries get
 16733                                  					; wiped.
 16734 000028B5 A2[6B05]                	MOV	[ATTRIB],AL
 16735 000028B8 8C1E[A005]              	MOV	[THISSFT+2],DS
 16736                                  
 16737                                  ;hkn; AUXSTACK is in DOSDATA
 16738                                  	;mov	si,RENAMEDMA+145h
 16739 000028BC BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 16740 000028BF 8936[9E05]              	MOV	[THISSFT],SI
 16741                                  	;mov	word [SI+2],2
 16742 000028C3 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 16743 000028C8 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 16744 000028CA E87F21                  	call	RENAME_MAKE		; This is in mknode
 16745 000028CD 7303                    	JNC	short GOT_DEST
 16746                                  BAD_ACCJ:
 16747 000028CF E95BFF                  	JMP	BAD_ACC
 16748                                  
 16749                                  GOT_DEST:
 16750 000028D2 53                      	push	bx
 16751 000028D3 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 16752 000028D7 E8244B                  	call	ShareEnd		; we need to remove it.
 16753 000028DA 5B                      	pop	bx
 16754                                  
 16755                                  ; A zero length entry with the correct new name has now been made at
 16756                                  ;   [CURBUF+2]:BX.
 16757                                  
 16758 000028DB C43E[E205]              	LES	DI,[CURBUF]
 16759                                  
 16760                                  	; MSDOS 6.0
 16761                                  	;test	byte [es:di+5],40h
 16762 000028DF 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16763                                  					;LB. if already dirty		  ;AN000;
 16764 000028E4 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 16765 000028E6 E82633                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16766                                  	;or	byte [es:di+5],40h
 16767 000028E9 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16768                                  yesdirty1:
 16769 000028EE 89DF                    	MOV	DI,BX
 16770                                  	;add	di,11
 16771 000028F0 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 16772                                  
 16773                                  ;hkn; RENAMEDMA is in DOSDATA
 16774                                  	;mov	si,[RENAMEDMA+32]
 16775 000028F3 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 16776                                  	;mov	cx,21
 16777 000028F6 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 16778 000028F9 F3A4                    	REP	MOVSB
 16779 000028FB E87A00                  	CALL	GET_SOURCE
 16780 000028FE 7274                    	JC	short RENAME_OVER
 16781 00002900 89DF                    	MOV	DI,BX
 16782 00002902 8E06[E405]              	MOV	ES,[CURBUF+2]
 16783 00002906 B0E5                    	MOV	AL,DIRFREE ; 0E5h
 16784 00002908 AA                      	STOSB				; "free" the source
 16785 00002909 EB13                    	JMP	SHORT DIRTY_IT
 16786                                  
 16787                                  SIMPLE_RENAME:
 16788 0000290B E86A00                  	CALL	GET_SOURCE		; Get the source back
 16789 0000290E 7264                    	JC	short RENAME_OVER
 16790 00002910 89DF                    	MOV	DI,BX
 16791 00002912 8E06[E405]              	MOV	ES,[CURBUF+2]
 16792                                  
 16793                                  ;hkn; NAME1 is in DOSDATA
 16794 00002916 BE[4B05]                	MOV	SI,NAME1		; New Name
 16795 00002919 B90B00                  	MOV	CX,11
 16796 0000291C F3A4                    	REP	MOVSB
 16797                                  DIRTY_IT:
 16798 0000291E 8B3E[E205]              	MOV	DI,[CURBUF]
 16799                                  
 16800                                  	; MSDOS 6.0
 16801 00002922 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16802                                  					;LB. if already dirty		  ;AN000;
 16803 00002927 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 16804 00002929 E8E332                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16805                                  	
 16806 0000292C 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16807                                  
 16808                                  ;------------------------------------------------------------------------------
 16809                                  ; Check if the source is a directory of file. If directory rename it to the
 16810                                  ; the new name in the Fastopen cache buffer. If file name it has been
 16811                                  ; previously deleted.
 16812                                  ;------------------------------------------------------------------------------
 16813                                  
 16814                                  yesdirty2:
 16815                                  	; MSDOS 6.0
 16816 00002931 56                      	PUSH	SI
 16817 00002932 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 16818 00002936 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16819 00002939 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 16820 0000293D 7403                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 16821 0000293F E803FE                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 16822                                  	; 31/01/2024
 16823                                  	;POP	SI
 16824                                  	;JMP	SHORT NOT_DIRTY1
 16825                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 16826 00002942 5E                      	POP	SI
 16827                                  NOT_DIRTY1:				;;BN00X
 16828                                  NEXT_SOURCE:
 16829                                  ;hkn; RENAMEDMA is in DOSDATA
 16830 00002943 BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 16831                                  
 16832                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 16833                                  ; to enter it before going to RENAME_Next.
 16834                                  
 16835 00002946 E83FEA                  	call	ECritDisk
 16836 00002949 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 16837                                  				  ;  to FF when we made the prev new file).
 16838 0000294E E88C05                  	call	RENAME_NEXT
 16839                                  
 16840                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 16841                                  ; we were before.
 16842                                  
 16843 00002951 7221                    	JC	short RENAME_OVER
 16844                                  
 16845                                  	;lea	si,[bx+26]
 16846 00002953 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 16847 00002956 E869FD                  	call	REN_DEL_Check
 16848 00002959 7306                    	JNC	short REN_OK2
 16849 0000295B B82000                  	MOV	AX,error_sharing_violation ; 20h
 16850 0000295E E9D0FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16851                                  
 16852                                  ;------------------------------------------------------------------------------
 16853                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 16854                                  ; if directory, rename directory name in the Fastopen cache.
 16855                                  ;-----------------------------------------------------------------------------
 16856                                  
 16857                                  REN_OK2:
 16858                                  	; MSDOS 6.0
 16859                                  	;mov	al,[RERNAMEDMA+32]
 16860 00002961 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 16861                                  	;test	al,10h
 16862 00002964 A810                    	TEST	AL,attr_directory	;;BN00X directory
 16863 00002966 7406                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 16864                                  	
 16865                                  	; MSDOS 3.3 & MSDOS 6.0
 16866 00002968 E8C5FD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 16867 0000296B E9FEFE                  	JMP	BUILDDEST		;;BN00X
 16868                                  
 16869                                  	; MSDOS 6.0
 16870                                  Ren_Directory:
 16871 0000296E E8D4FD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 16872 00002971 E9F8FE                  	JMP	BUILDDEST
 16873                                  
 16874                                  RENAME_OVER:
 16875 00002974 F8                      	CLC
 16876 00002975 E9B9FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16877                                  
 16878                                  ;----------------------------------------------------------------------------
 16879                                  ; Procedure: GET_SOURCE
 16880                                  ;
 16881                                  ; Inputs:
 16882                                  ;	RENAMEDMA has source info
 16883                                  ; Function:
 16884                                  ;	Re-find the source
 16885                                  ; Output:
 16886                                  ;	[CURBUF] set
 16887                                  ;	[CURBUF+2]:BX points to entry
 16888                                  ;	Carry set if error (currently user FAILed to I 24)
 16889                                  ; DS preserved, others destroyed
 16890                                  ;----------------------------------------------------------------------------
 16891                                  
 16892                                  GET_SOURCE:
 16893 00002978 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 16894 0000297C C42E[8A05]              	LES	BP,[THISDPB]
 16895 00002980 E8C115                  	call	SETDIRSRCH
 16896 00002983 7214                    	JC	short gs_ret_label	; retc
 16897 00002985 E8B218                  	call	STARTSRCH
 16898 00002988 A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 16899                                  	;call	GETENT
 16900                                  	; 18/12/2022
 16901 0000298B E98A15                  	jmp	GETENT
 16902                                  ;gs_ret_label:
 16903                                  	;retn
 16904                                  
 16905                                  ; MSDOS 6.0 
 16906                                  ;---------------------------------------------------------------------------
 16907                                  ;Procedure: NEW_RENAME
 16908                                  ;
 16909                                  ;Input: DS:SI -> raw string with ?
 16910                                  ;	ES:DI -> destination string
 16911                                  ;	DS:BX -> source string
 16912                                  ;Function: replace ? chars of raw string with chars in source string and
 16913                                  ;	   put in destination string
 16914                                  ;Output: ES:DI-> new string
 16915                                  ;---------------------------------------------------------------------------
 16916                                  
 16917                                  NEW_RENAME:
 16918                                  	; 17/05/2019 - Retro DOS v4.0
 16919                                  NEWNAM:
 16920                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 16921 0000298E AC                      	LODSB
 16922 0000298F 3C3F                    	CMP	AL,"?" ; 3Fh
 16923 00002991 7502                    	JNZ	short NOCHG
 16924 00002993 8A07                    	MOV	AL,[BX] 		; Get replace char
 16925                                  NOCHG:
 16926 00002995 AA                      	STOSB
 16927 00002996 43                      	INC	BX			; Next replace char
 16928 00002997 E2F5                    	LOOP	NEWNAM
 16929                                  	; MSDOS 6.0
 16930                                  gs_ret_label:	; 18/12/2022
 16931 00002999 C3                      	retn
 16932                                  
 16933                                  ;============================================================================
 16934                                  ; FINFO.ASM, MSDOS 6.0, 1991
 16935                                  ;============================================================================
 16936                                  ; 08/08/2018 - Retro DOS v3.0
 16937                                  ; 17/05/2019 - Retro DOS v4.0
 16938                                  
 16939                                  ;**	Low level routines for returning file information and setting file
 16940                                  ;	attributes
 16941                                  ;
 16942                                  ;	GET_FILE_INFO
 16943                                  ;	SET_FILE_ATTRIBUTE
 16944                                  ;
 16945                                  ;	Modification history:
 16946                                  ;
 16947                                  ;	    Created: ARR 30 March 1983
 16948                                  ;
 16949                                  ;	M025: Return access_denied if attempting to set
 16950                                  ;	      attribute of root directory.
 16951                                  ;
 16952                                  
 16953                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 16954                                  
 16955                                  ;---------------------------------------------------------------------------
 16956                                  ; Procedure Name : GET_FILE_INFO
 16957                                  ;
 16958                                  ; Inputs:
 16959                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16960                                  ;		terminated)
 16961                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16962                                  ;		( = -1 if current dir not involved, else
 16963                                  ;		 Points to first char after last "/" of current dir part)
 16964                                  ;	[THISCDS] Points to CDS being used
 16965                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16966                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16967                                  ; Function:
 16968                                  ;	Get Information about a file
 16969                                  ; Returns:
 16970                                  ;	CARRY CLEAR
 16971                                  ;	    AX = Attribute of file
 16972                                  ;	    CX = Time stamp of file
 16973                                  ;	    DX = Date stamp of file
 16974                                  ;	    BX:DI = Size of file (32 bit)
 16975                                  ;	CARRY SET
 16976                                  ;	    AX is error code
 16977                                  ;		error_file_not_found
 16978                                  ;			Last element of path not found
 16979                                  ;		error_path_not_found
 16980                                  ;			Bad path (not in curr dir part if present)
 16981                                  ;		error_bad_curr_dir
 16982                                  ;			Bad path in current directory part of path
 16983                                  ; DS preserved, others destroyed
 16984                                  ;---------------------------------------------------------------------------
 16985                                  
 16986                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16987                                  
 16988                                  GET_FILE_INFO:
 16989                                  
 16990                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 16991                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 16992                                  
 16993 0000299A E826E9                  	call	TestNet
 16994 0000299D 7306                    	JNC	short LOCAL_INFO
 16995                                  
 16996                                  ;IF NOT Installed
 16997                                  ;	transfer NET_GET_FILE_INFO
 16998                                  ;ELSE
 16999                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17000                                  ;	INT	2FH
 17001                                  ;	return
 17002                                  
 17003 0000299F B80F11                  	mov     ax, 110Fh
 17004 000029A2 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17005                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17006                                  			; SDA CDS pointer -> current directory
 17007                                  			; Return: CF set on error, AX = file attributes
 17008 000029A4 C3                      	retn
 17009                                  ;ENDIF
 17010                                  
 17011                                  LOCAL_INFO:
 17012 000029A5 E8E0E9                  	call	ECritDisk
 17013 000029A8 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17014                                  	; MSDOS 3.3
 17015                                  	;call	GETPATH
 17016                                  	; MSDOS 6.0
 17017 000029AD E8D800                  	call	GET_FAST_PATH
 17018                                  	; MSDOS 3.3 & MSDOS 6.0
 17019 000029B0 7312                    	JNC	short info_check_dev
 17020                                  NO_PATH:
 17021 000029B2 750B                    	JNZ	short bad_path1
 17022 000029B4 08C9                    	OR	CL,CL
 17023 000029B6 7407                    	JZ	short bad_path1
 17024                                  info_no_file:
 17025 000029B8 B80200                  	MOV	AX,error_file_not_found
 17026                                  BadRet:
 17027 000029BB F9                      	STC
 17028                                  JustRet:
 17029                                  	;call	LCritDisk
 17030                                  	;retn
 17031                                  	; 18/12/2022
 17032 000029BC E9E4E9                  	jmp	LCritDisk
 17033                                  
 17034                                  bad_path1:
 17035 000029BF B80300                  	MOV	AX,error_path_not_found
 17036 000029C2 EBF7                    	jmp	short BadRet
 17037                                  
 17038                                  info_check_dev:
 17039 000029C4 08E4                    	OR	AH,AH
 17040 000029C6 78F0                    	JS	short info_no_file	; device
 17041                                  
 17042                                  	; MSDOS 6.0
 17043                                  ;SR;
 17044                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17045                                  ;for a root dir
 17046                                  
 17047 000029C8 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17048 000029CD 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17049                                  
 17050 000029CF 30E4                    	xor	ah,ah
 17051 000029D1 B010                    	mov	al,attr_directory ; 10h
 17052                                  	;clc
 17053                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17054                                  	; (DOSCODE:683Eh)
 17055                                  	; 16/12/2022
 17056                                  	;clc
 17057 000029D3 EBE7                    	jmp	short JustRet
 17058                                  
 17059                                  not_root:
 17060                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17061 000029D5 1E                      	PUSH	DS
 17062 000029D6 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17063 000029DA 89DE                    	MOV	SI,BX
 17064 000029DC 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17065 000029DE 89DF                    	MOV	DI,BX
 17066                                  	;mov	cx,[si+16h]
 17067 000029E0 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17068                                  	;mov	dx,[si+18h]
 17069 000029E3 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17070 000029E6 30E4                    	XOR	AH,AH
 17071                                  	;mov	al,[si+0Bh]
 17072 000029E8 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17073                                  	;test	al,10h
 17074 000029EB A810                    	TEST	AL,attr_directory
 17075 000029ED 7506                    	JNZ	short NO_SIZE
 17076                                  	;mov	di,[si+1Ch]
 17077 000029EF 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17078                                  	;mov	bx,[si+1Eh]
 17079 000029F2 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17080                                  NO_SIZE:
 17081 000029F5 1F                      	POP	DS
 17082                                  	;CLC
 17083                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17084                                  	; (DOSCODE:6864h)
 17085                                  	; 16/12/2022
 17086                                  	;clc
 17087 000029F6 EBC4                    	jmp	short JustRet
 17088                                  
 17089                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17090                                  ;-------------------------------------------------------------------------------
 17091                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17092                                  ; Inputs:
 17093                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17094                                  ;		terminated)
 17095                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17096                                  ;		( = -1 if current dir not involved, else
 17097                                  ;		 Points to first char after last "/" of current dir part)
 17098                                  ;	[THISCDS] Points to CDS being used
 17099                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17100                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17101                                  ;	AX is new attributes to give to file
 17102                                  ; Function:
 17103                                  ;	Set File Attributes
 17104                                  ; Returns:
 17105                                  ;	CARRY CLEAR
 17106                                  ;	    No error
 17107                                  ;	CARRY SET
 17108                                  ;	    AX is error code
 17109                                  ;		error_file_not_found
 17110                                  ;			Last element of path not found
 17111                                  ;		error_path_not_found
 17112                                  ;			Bad path (not in curr dir part if present)
 17113                                  ;		error_bad_curr_dir
 17114                                  ;			Bad path in current directory part of path
 17115                                  ;		error_access_denied
 17116                                  ;			Attempt to set an attribute which cannot be set
 17117                                  ;			(attr_directory, attr_volume_ID)
 17118                                  ;		error_sharing_violation
 17119                                  ;			Sharing mode of file did not allow the change
 17120                                  ;			(this request requires exclusive write/read access)
 17121                                  ;			(INT 24H generated)
 17122                                  ; DS preserved, others destroyed
 17123                                  ;----------------------------------------------------------------------------
 17124                                  
 17125                                  SET_FILE_ATTRIBUTE:
 17126                                  
 17127                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17128                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17129                                  
 17130 000029F8 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17131 000029FB 7414                    	JZ	short set_look
 17132                                  _BAD_ACC:
 17133 000029FD C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17134 00002A02 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17135 00002A07 C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17136 00002A0C B80500                  	MOV	AX,error_access_denied ; 5
 17137 00002A0F F9                      	STC
 17138 00002A10 C3                      	retn
 17139                                  
 17140                                  set_look:
 17141 00002A11 E8AFE8                  	call	TestNet
 17142 00002A14 7308                    	JNC	short LOCAL_SET
 17143                                  
 17144                                  ;IF NOT Installed
 17145                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17146                                  ;ELSE
 17147 00002A16 50                      	PUSH	AX
 17148                                  	
 17149                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17150                                  	;INT	2FH
 17151                                  
 17152 00002A17 B80E11                  	mov     ax, 110Eh
 17153 00002A1A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17154                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17155                                  			; SDA CDS pointer -> current directory
 17156                                  			; STACK: WORD new file attributes
 17157                                  			; Return: CF set on error
 17158                                  
 17159 00002A1C 5B                      	POP	BX			; clean stack
 17160 00002A1D C3                      	retn
 17161                                  ;ENDIF
 17162                                  
 17163                                  LOCAL_SET:
 17164 00002A1E E867E9                  	call	ECritDisk
 17165 00002A21 50                      	PUSH	AX			; Save new attributes
 17166 00002A22 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17167 00002A27 E87A15                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17168 00002A2A 7303                    	JNC	short set_check_device
 17169 00002A2C 5B                      	POP	BX			; Clean stack (don't zap AX)
 17170 00002A2D EB83                    	JMP	short NO_PATH
 17171                                  
 17172                                  set_check_device:
 17173 00002A2F 08E4                    	OR	AH,AH
 17174 00002A31 7906                    	JNS	short set_check_share
 17175 00002A33 58                      	POP	AX
 17176 00002A34 E86CE9                  	call	LCritDisk
 17177 00002A37 EBC4                    	JMP	short _BAD_ACC 		; device
 17178                                  
 17179                                  set_check_share:
 17180 00002A39 58                      	POP	AX			; Get new attributes
 17181                                  
 17182                                  	; MSDOS 6.0
 17183 00002A3A 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17184 00002A3F 740A                    	je	short cannot_set_root	; M025: Y: return error
 17185                                  
 17186                                  	; MSDOS 3.3 & MSDOS 6.0
 17187 00002A41 E87EFC                  	call	REN_DEL_Check
 17188 00002A44 730B                    	JNC	short set_do
 17189 00002A46 B82000                  	MOV	AX,error_sharing_violation ; 32
 17190 00002A49 EB3A                    	jmp	short OK_BYE
 17191                                  
 17192                                  	; MSDOS 6.0
 17193                                  cannot_set_root:			; M025:
 17194 00002A4B B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17195 00002A4E F9                      	stc				; M025: to set attr. of root
 17196 00002A4F EB34                    	jmp	short OK_BYE		; M025:
 17197                                  
 17198                                  set_do:
 17199                                  	; MSDOS 3.3 & MSDOS 6.0
 17200 00002A51 C43E[E205]              	LES	DI,[CURBUF]
 17201 00002A55 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17202 00002A5A 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17203                                  
 17204                                  	; MSDOS 6.0
 17205 00002A5E 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17206                                  					;LB. if already dirty		  ;AN000;
 17207 00002A63 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17208 00002A65 E8A731                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17209                                  	
 17210 00002A68 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17211                                  yesdirty3:
 17212 00002A6D A0[7605]                	MOV	AL,[THISDRV]
 17213                                  ;;;; 10/1/86 F.C update fastopen cache
 17214 00002A70 52                      	PUSH	DX
 17215 00002A71 57                      	PUSH	DI
 17216 00002A72 B400                    	MOV	AH,0		  ; dir entry update
 17217 00002A74 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17218 00002A76 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17219 00002A78 E8E4FC                  	call	FastOpen_Update
 17220 00002A7B 5F                      	POP	DI
 17221 00002A7C 5A                      	POP	DX
 17222                                  ;;;; 9/11/86 F.C update fastopen cache
 17223 00002A7D E88730                  	call	FLUSHBUF
 17224 00002A80 7303                    	JNC	short OK_BYE
 17225 00002A82 B80200                  	MOV	AX,error_file_not_found
 17226                                  OK_BYE:
 17227                                  	;call	LCritDisk
 17228                                  	;retn
 17229                                  	; 16/12/2022
 17230 00002A85 E91BE9                  	jmp	LCritDisk
 17231                                  
 17232                                  	; 17/05/2019 - Retro DOS v4.0
 17233                                  
 17234                                  	; MSDOS 6.0
 17235                                  GET_FAST_PATH:
 17236                                  ;hkn; use SS override for FastOpenFlg
 17237 00002A88 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17238                                  					;FO. trigger fastopen	;AN000;
 17239 00002A8E E81315                  	call	GETPATH
 17240 00002A91 9C                      	PUSHF			 	;FO.			;AN000;
 17241 00002A92 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17242                                  					;FO. clear all fastopen flags ;AN000;
 17243 00002A98 9D                      	POPF				;FO.			;AN000;
 17244 00002A99 C3                      	retn
 17245                                  
 17246                                  ;============================================================================
 17247                                  ; DUP.ASM, MSDOS 6.0, 1991
 17248                                  ;============================================================================
 17249                                  ; 08/08/2018 - Retro DOS v3.0
 17250                                  ; 17/05/2019 - Retro DOS v4.0
 17251                                  
 17252                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17253                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17254                                  ;
 17255                                  ;	DOS_DUP
 17256                                  ;
 17257                                  ;	Modification history:
 17258                                  ;
 17259                                  ;	  Created: ARR 30 March 1983
 17260                                  
 17261                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17262                                  ;---------------------------------------------------------------------------
 17263                                  ; Procedure Name : DOS_DUP
 17264                                  ;
 17265                                  ; Inputs:
 17266                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17267                                  ;		(a non net SFT is OK, in this case the ref
 17268                                  ;		 count is simply incremented)
 17269                                  ; Function:
 17270                                  ;	Signal to the devices that a logical open is occurring
 17271                                  ; Returns:
 17272                                  ;	ES:DI point to SFT
 17273                                  ;    Carry clear
 17274                                  ;	SFT ref_count is incremented
 17275                                  ; Registers modified: None.
 17276                                  ; NOTE:
 17277                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17278                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17279                                  ;	that time.
 17280                                  ;---------------------------------------------------------------------------
 17281                                  
 17282                                  DOS_DUP:
 17283                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17284                                  
 17285                                  	; MSDOS 6.0
 17286 00002A9A 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17287 00002A9F 26C43E[9E05]            	les	di,[es:THISSFT]
 17288                                  
 17289                                  	;Entry	Dos_Dup_Direct
 17290                                  DOS_Dup_Direct:
 17291 00002AA4 E835E8                  	call	IsSFTNet
 17292 00002AA7 7503                    	JNZ	short DO_INC
 17293 00002AA9 E8C51B                  	call	DEV_OPEN_SFT
 17294                                  DO_INC:
 17295                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17296 00002AAC 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17297                                  					;   we're in big trouble anyway)
 17298 00002AAF C3                      	retn
 17299                                  
 17300                                  ;============================================================================
 17301                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17302                                  ;============================================================================
 17303                                  ; 08/08/2018 - Retro DOS v3.0
 17304                                  ; 18/05/2019 - Retro DOS v4.0
 17305                                  
 17306                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17307                                  ;NAME	DOS_CREATE
 17308                                  ;----------------------------------------------------------------------------
 17309                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17310                                  ;
 17311                                  ;	DOS_CREATE
 17312                                  ;	DOS_CREATE_NEW
 17313                                  ;	SET_MKND_ERR
 17314                                  ;	SET_Media_ID
 17315                                  ;	SET_EXT_Mode
 17316                                  ;
 17317                                  ;	Revision history:
 17318                                  ;
 17319                                  ;	    A000 version 4.00	  Jan. 1988
 17320                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17321                                  
 17322                                  ;Installed = TRUE
 17323                                  
 17324                                  ;	i_need	THISSFT,DWORD
 17325                                  ;	i_need	THISCDS,DWORD
 17326                                  ;	I_need	EXTERR,WORD
 17327                                  ;	I_Need	ExtErr_locus,BYTE
 17328                                  ;	I_need	JShare,DWORD
 17329                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17330                                  ;	I_need	SATTRIB,BYTE
 17331                                  ;	I_need	CALLVIDM,DWORD
 17332                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17333                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17334                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17335                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17336                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17337                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17338                                  
 17339                                  ;***	DOS_CREATE - Create a File
 17340                                  ;----------------------------------------------------------------------------
 17341                                  ;	DOS_Create is called to create the specified file, truncating
 17342                                  ;	the old one if it exists.
 17343                                  ;
 17344                                  ;	ENTRY	AX is Attribute to create
 17345                                  ;		(ds) = DOSDATA
 17346                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17347                                  ;			terminated)
 17348                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17349                                  ;			( = -1 if current dir not involved, else
 17350                                  ;			 Points to first char after last "/" of current dir part)
 17351                                  ;		[THISCDS] Points to CDS being used
 17352                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17353                                  ;		[THISSFT] Points to SFT to fill in if file created
 17354                                  ;			(sf_mode field set so that FCB may be detected)
 17355                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17356                                  ;
 17357                                  ;	EXIT	sf_ref_count is NOT altered
 17358                                  ;		CARRY CLEAR
 17359                                  ;		    THISSFT filled in.
 17360                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17361                                  ;		CARRY SET
 17362                                  ;		    AX is error code
 17363                                  ;			error_path_not_found
 17364                                  ;				Bad path (not in curr dir part if present)
 17365                                  ;			error_bad_curr_dir
 17366                                  ;				Bad path in current directory part of path
 17367                                  ;			error_access_denied
 17368                                  ;				Attempt to re-create read only file , or
 17369                                  ;				create a second volume id or create a dir
 17370                                  ;			error_sharing_violation
 17371                                  ;				The sharing mode was correct but not allowed
 17372                                  ;				generates an INT 24
 17373                                  ;	USES	all but DS
 17374                                  ;----------------------------------------------------------------------------
 17375                                  
 17376                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17377                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17378                                  
 17379                                  DOS_CREATE:
 17380                                  	; 18/05/2019 - Retro DOS v4.0
 17381                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17382                                  
 17383                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17384                                  ;hkn; this point.
 17385                                  
 17386 00002AB0 30E4                    	XOR	AH,AH		; Truncate is OK
 17387                                  
 17388                                  ;	Enter here from Dos_Create_New
 17389                                  ;
 17390                                  ;	(ah) = 0 iff truncate OK
 17391                                  
 17392                                  Create_inter:
 17393 00002AB2 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17394                                  				; Mask out any meaningless bits
 17395 00002AB4 7511                    	JNZ	short AttErr
 17396 00002AB6 A808                    	TEST	AL,attr_volume_id
 17397 00002AB8 7407                    	JZ	short NoReset
 17398                                  	
 17399                                  	; MSDOS 6.0
 17400                                  	; 16/12/2022
 17401 00002ABA 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17402                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17403                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17404                                  	
 17405 00002ABF B008                    	MOV	AL,attr_volume_id ; 8
 17406                                  NoReset:
 17407 00002AC1 0C20                    	OR	AL,attr_archive ; File changed  ; 20h
 17408 00002AC3 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17409 00002AC5 740A                    	JZ	short ATT_OK
 17410                                  AttErr:
 17411 00002AC7 B80500                  	MOV	AX,5		; Attribute problem
 17412 00002ACA C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17413 00002ACF EB66                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17414                                  				   ;	attr_device to be set.
 17415                                  ATT_OK:
 17416 00002AD1 C43E[9E05]              	LES	DI,[THISSFT]
 17417 00002AD5 06                      	PUSH	ES
 17418 00002AD6 C436[A205]              	LES	SI,[THISCDS]
 17419 00002ADA 83FEFF                  	CMP	SI,-1
 17420 00002ADD 751D                    	JNE	short TEST_RE_NET
 17421                                  
 17422                                  ;	No CDS, it must be redirected.
 17423                                  
 17424 00002ADF 07                      	POP	ES
 17425                                  
 17426                                  	; MSDOS 6.0
 17427                                  ;Extended open hooks
 17428                                  	;test	byte [EXTOPEN_ON],1
 17429 00002AE0 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17430 00002AE5 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17431                                  IFS_extopen:				    ;AN000;EO.
 17432 00002AE7 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17433                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17434 00002AE8 B82E11                  	mov	ax,112Eh
 17435 00002AEB CD2F                    	INT	2FH			    ;AN000;EO.
 17436 00002AED 5B                      	POP	BX			    ;AN000;EO. trash bx
 17437 00002AEE C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17438 00002AF3 C3                      	retn				    ;AN000;EO.
 17439                                  NOEXTOP:				    ;AN000;
 17440                                  ;Extended open hooks
 17441                                  
 17442                                  ;IF NOT Installed
 17443                                  ;	transfer NET_SEQ_CREATE
 17444                                  ;ELSE
 17445 00002AF4 50                      	PUSH	AX
 17446                                  
 17447                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17448                                  	;INT	2FH
 17449                                  
 17450 00002AF5 B81811                  	mov	ax,1118h
 17451 00002AF8 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17452                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17453                                  			; SDA first filename pointer -> fully-qualified name of file
 17454                                  			; STACK: WORD file creation mode???
 17455                                  
 17456 00002AFA 5B                      	POP	BX			; BX is trashed anyway
 17457 00002AFB C3                      	retn
 17458                                  ;ENDIF
 17459                                  
 17460                                  ;	We have a CDS. See if it's network
 17461                                  
 17462                                  TEST_RE_NET:
 17463                                  	;;test	word [es:si+43h],8000h
 17464                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17465                                  	; 07/12/2022
 17466                                  	;test	byte [es:si+44h],80h
 17467                                  	; 17/12/2022
 17468 00002AFC 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17469 00002B01 07                      	POP	ES
 17470 00002B02 7419                    	JZ	short LOCAL_CREATE
 17471                                  
 17472                                  	; MSDOS 6.0
 17473 00002B04 E8BF00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17474 00002B07 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17475                                  	;;or	word [es:di+2],2
 17476                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17477                                  	; 17/12/2022
 17478 00002B09 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17479                                  
 17480                                  ;Extended open hooks
 17481                                  dochk:
 17482 00002B0E F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17483 00002B13 75D2                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17484                                  ;Extended open hooks
 17485                                  
 17486                                  ;IF NOT Installed
 17487                                  ;	transfer NET_CREATE
 17488                                  ;ELSE
 17489 00002B15 50                      	PUSH	AX
 17490                                  	
 17491                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17492                                  	;INT	2FH
 17493                                  	
 17494 00002B16 B81711                  	mov	ax,1117h
 17495 00002B19 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17496                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17497                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17498                                  			; SDA CDS pointer -> current directory
 17499                                  			; Return: CF set on error
 17500                                  
 17501 00002B1B 5B                      	POP	BX			; BX is trashed anyway
 17502                                  ;nomore:
 17503 00002B1C C3                      	retn
 17504                                  ;ENDIF
 17505                                  
 17506                                  ;**	It's a local create. We have a local CDS for it.
 17507                                  
 17508                                  LOCAL_CREATE:
 17509                                  	; MSDOS 6.0
 17510 00002B1D E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17511 00002B20 7205                    	JC	short setdone	;AN000;EO.
 17512                                  	
 17513                                  	; MSDOS 3.3 & MSDOS 6.0
 17514                                  	; 17/12/2022
 17515                                  	;;or	word [es:di+2],2
 17516                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17517                                  	;or	byte [es:di+2],2
 17518 00002B22 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17519                                  setdone:
 17520 00002B27 E85EE8                  	call	ECritDisk
 17521 00002B2A E8F91E                  	call	MakeNode
 17522 00002B2D 7317                    	JNC	short Create_ok
 17523 00002B2F C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17524 00002B34 E86CE8                  	call	LCritDisk
 17525                                  
 17526                                  	;entry	SET_MKND_ERR
 17527                                  SET_MKND_ERR:
 17528                                  
 17529                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17530                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17531                                  
 17532                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17533 00002B37 BB[3E2B]                	MOV     BX,CRTERRTAB
 17534                                  	;XLAT  ; MSDOS 3.3
 17535                                  	; 18/05/2019 - Retro DOS v4.0
 17536 00002B3A 2E                      	CS
 17537 00002B3B D7                      	XLAT
 17538                                  CreatBadRet:
 17539 00002B3C F9                      	STC
 17540 00002B3D C3                      	retn
 17541                                  
 17542                                  ; 13/05/2019 - Retro DOS v4.0
 17543                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17544                                  ; ---------------------------------------------------------------------------
 17545                                  
 17546                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17547                                  
 17548                                  ; 17/07/2018 - Retro DOS v3.0
 17549                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17550                                  
 17551                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17552                                  ;	db	0,5,52h,50h,3,5,20h
 17553                                  
 17554                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17555                                  ;	db	0,5,52h,50h,3,5,20h,2
 17556                                  
 17557                                  ; 08/08/2018
 17558                                  
 17559                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17560 00002B3E 00                      	DB	0			; none
 17561 00002B3F 05                      	DB	error_access_denied	; MakeNode error 1
 17562 00002B40 52                      	DB	error_cannot_make	; MakeNode error 2
 17563 00002B41 50                      	DB	error_file_exists	; MakeNode error 3
 17564 00002B42 03                      	DB	error_path_not_found	; MakeNode error 4
 17565 00002B43 05                      	DB	error_access_denied	; MakeNode error 5
 17566 00002B44 20                      	DB	error_sharing_violation ; MakeNode error 6
 17567                                  	; MSDOS 6.0
 17568 00002B45 02                      	DB	error_file_not_found	; MakeNode error 7
 17569                                  
 17570                                  ; ---------------------------------------------------------------------------
 17571                                  
 17572                                  ; We have just created a new file. This results in the truncation of old
 17573                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17574                                  ; file to the current size.
 17575                                  
 17576                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17577                                  ; drive number to force a Build BPB after Media Check.
 17578                                  
 17579                                  ;;; FASTOPEN 8/29/86
 17580                                  Create_ok:
 17581 00002B46 E8E7FB                  	call	FastOpen_Delete
 17582                                  ;;; FASTOPEN 8/29/86
 17583 00002B49 A0[6D05]                	mov	al,[SATTRIB]
 17584 00002B4C A808                    	test	al,attr_volume_id
 17585 00002B4E 741C                    	jz	short NoVolLabel
 17586 00002B50 C43E[A205]              	LES	DI,[THISCDS]
 17587                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 17588 00002B54 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 17589 00002B57 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 17590 00002B5A 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 17591                                  	
 17592                                  	; 18/05/2019 - Retro DOS v4.0
 17593                                  
 17594                                  	; MSDOS 6.0
 17595 00002B5E B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 17596 00002B60 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 17597                                  	
 17598 00002B63 E822E8                  	call	ECritDisk
 17599 00002B66 E8352C                  	call	FATREAD_CDS		; force a media check
 17600 00002B69 E837E8                  	call	LCritDisk
 17601                                  
 17602                                  NoVolLabel:
 17603 00002B6C B80200                  	MOV	ax,2
 17604 00002B6F C43E[9E05]              	LES	DI,[THISSFT]
 17605                                  ;if installed
 17606                                  	;call	JShare + 14 * 4
 17607 00002B73 FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 17608                                  ;else
 17609                                  ;	Call	ShSU
 17610                                  ;endif
 17611 00002B77 E829E8                  	call	LCritDisk
 17612 00002B7A E94901                  	jmp	SET_SFT_MODE
 17613                                  
 17614                                  ;---------------------------------------------------------------------------
 17615                                  ; Procedure Name : Dos_Create_New
 17616                                  ;
 17617                                  ; Inputs:
 17618                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17619                                  ;		terminated)
 17620                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17621                                  ;		( = -1 if current dir not involved, else
 17622                                  ;		 Points to first char after last "/" of current dir part)
 17623                                  ;	[THISCDS] Points to CDS being used
 17624                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17625                                  ;	[THISSFT] Points to SFT to fill in if file created
 17626                                  ;		(sf_mode field set so that FCB may be detected)
 17627                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17628                                  ;	AX is Attribute to create
 17629                                  ; Function:
 17630                                  ;	Try to create the specified file truncating an old one that exists
 17631                                  ; Outputs:
 17632                                  ;	sf_ref_count is NOT altered
 17633                                  ;	CARRY CLEAR
 17634                                  ;	    THISSFT filled in.
 17635                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 17636                                  ;	CARRY SET
 17637                                  ;	    AX is error code
 17638                                  ;		error_path_not_found
 17639                                  ;			Bad path (not in curr dir part if present)
 17640                                  ;		error_bad_curr_dir
 17641                                  ;			Bad path in current directory part of path
 17642                                  ;		error_access_denied
 17643                                  ;			Create a second volume id or create a dir
 17644                                  ;		error_file_exists
 17645                                  ;			Already a file by this name
 17646                                  ; DS preserved, others destroyed
 17647                                  ;---------------------------------------------------------------------------
 17648                                  
 17649                                  DOS_Create_New:
 17650 00002B7D B401                    	MOV	AH,1		; Truncate is NOT OK
 17651 00002B7F E930FF                  	JMP	Create_inter
 17652                                  
 17653                                  ; MSDOS 6.0
 17654                                  ;---------------------------------------------------------------------------
 17655                                  ; Procedure Name : Set_Media_ID
 17656                                  ;
 17657                                  ; Inputs:
 17658                                  ;	NAME1= Volume ID
 17659                                  ;	BH= 0, delete volume id
 17660                                  ;	    1, set new volume id
 17661                                  ;	DS= DOSGROUP
 17662                                  ; Function:
 17663                                  ;	Set Volume ID to DOS 4.00 Boot record.
 17664                                  ; Outputs:
 17665                                  ;	CARRY CLEAR
 17666                                  ;	    volume id set
 17667                                  ;	CARRY SET
 17668                                  ;	    AX is error code
 17669                                  ;---------------------------------------------------------------------------
 17670                                  
 17671                                  	; 18/05/2019 - Retro DOS v4.0
 17672                                  Set_Media_ID:
 17673 00002B82 50                      	PUSH	AX		;AN000;;>32mb
 17674 00002B83 06                      	PUSH	ES		;AN000;;>32mb
 17675 00002B84 57                      	PUSH	DI		;AN000;;>32mb
 17676                                  
 17677 00002B85 FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 17678 00002B87 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 17679 00002B89 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 17680 00002B8B B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 17681                                  
 17682                                  ;hkn; PACKET_TEMP is in DOSDATA
 17683 00002B8E BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 17684                                  
 17685 00002B91 53                      	PUSH	BX		;AN000;;>32mb
 17686 00002B92 52                      	PUSH	DX		;AN000;;>32mb
 17687 00002B93 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17688                                  
 17689                                  	;invoke	$IOCTL		;AN000;;>32mb
 17690 00002B95 E856F7                  	call	_$IOCTL	
 17691                                  
 17692 00002B98 5A                      	POP	DX		;AN000;;>32mb
 17693 00002B99 5B                      	POP	BX		;AN000;;>32mb
 17694 00002B9A 7224                    	JC	short geterr	;AN000;;>32mb
 17695                                  
 17696 00002B9C 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 17697 00002B9E 7405                    	JZ	short NoName	;AN000;>32mb yes
 17698                                  
 17699                                  ;hkn; NAME1 is in DOSDATA
 17700 00002BA0 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 17701                                  
 17702 00002BA3 EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 17703                                  NoName: 			;AN000;
 17704                                  
 17705                                  ;hkn; NO_NAME_ID is in DOSDATA
 17706 00002BA5 BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 17707                                  
 17708                                  doset:				;AN000;
 17709 00002BA8 89D7                    	MOV	DI,DX		;AN000;;>32mb
 17710                                  	;add	di,6
 17711 00002BAA 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 17712                                  
 17713                                  ;hkn; ES & DS must point to SS
 17714                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 17715 00002BAD 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 17716                                  
 17717 00002BAE 1F                      	POP	DS		;AN000;;>32mb
 17718                                  
 17719                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 17720 00002BAF 16                      	PUSH	SS		;AN000;;>32mb
 17721                                  
 17722 00002BB0 07                      	POP	ES		;AN000;;>32mb
 17723 00002BB1 B90B00                  	MOV	CX,11		;AN000;;>32mb
 17724 00002BB4 F3A4                    	REP	MOVSB		;AN000;;>32mb
 17725 00002BB6 B94608                  	MOV	CX,0846H	;AN001;;>32mb
 17726 00002BB9 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 17727 00002BBB 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17728                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 17729 00002BBD E82EF7                  	call	_$IOCTL	
 17730                                  geterr: 			;AN000;
 17731                                  ;hkn;	PUSH	CS		;AN000;>32mb
 17732 00002BC0 16                      	PUSH	SS		;AN000;>32mb
 17733                                  
 17734 00002BC1 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 17735                                  
 17736 00002BC2 5F                      	POP	DI		;AN000;;>32mb
 17737 00002BC3 07                      	POP	ES		;AN000;;>32mb
 17738 00002BC4 58                      	POP	AX		;AN000;;>32mb
 17739 00002BC5 C3                      	retn			;AN000;>32mb
 17740                                  
 17741                                  ; MSDOS 6.0
 17742                                  ;---------------------------------------------------------------------------
 17743                                  ; Procedure Name : Set_EXT_mode
 17744                                  ;
 17745                                  ; Inputs:
 17746                                  ;	[EXTOPEN_ON]= flag for extended open
 17747                                  ;	SAVE_BX= mode specified in Extended Open
 17748                                  ; Function:
 17749                                  ;	Set mode in ThisSFT
 17750                                  ; Outputs:
 17751                                  ;	carry set,mode is set if from Extended Open
 17752                                  ;	carry clear, mode not set yet
 17753                                  ;---------------------------------------------------------------------------
 17754                                  
 17755                                  ; 13/05/2019 - Retro DOS v4.0
 17756                                  
 17757                                  Set_EXT_mode:
 17758                                  
 17759                                  ;hkn; SS override
 17760 00002BC6 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17761 00002BCC 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 17762 00002BCE 50                      	PUSH	AX			    ;AN000;EO.
 17763                                  
 17764                                  ;hkn; SS override
 17765 00002BCF 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 17766                                  	;or	[es:di+2],ax
 17767 00002BD3 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 17768 00002BD7 58                      	POP	AX			    ;AN000;EO.
 17769 00002BD8 F9                      	STC				    ;AN000;EO.
 17770                                  NOTEX:					    ;AN000;
 17771 00002BD9 C3                      	retn				    ;AN000;EO.
 17772                                  
 17773                                  ;============================================================================
 17774                                  ; OPEN.ASM, MSDOS 6.0, 1991
 17775                                  ;============================================================================
 17776                                  ; 08/08/2018 - Retro DOS v3.0
 17777                                  ; 18/05/2019 - Retro DOS v4.0
 17778                                  
 17779                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 17780                                  ;	NAME	DOS_OPEN
 17781                                  
 17782                                  ;**	OPEN.ASM - File Open
 17783                                  ;----------------------------------------------------------------------------
 17784                                  ;	Low level routines for openning a file from a file spec.
 17785                                  ;	Also misc routines for sharing errors
 17786                                  ;
 17787                                  ;	DOS_Open
 17788                                  ;	Check_Access_AX
 17789                                  ;	SHARE_ERROR
 17790                                  ;	SET_SFT_MODE
 17791                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 17792                                  ;
 17793                                  ;	Revision history:
 17794                                  ;
 17795                                  ;	    Created: ARR 30 March 1983
 17796                                  ;	    A000	version 4.00   Jan. 1988
 17797                                  ;
 17798                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 17799                                  ; 	       remote extended opens and not save_cx.
 17800                                  ;
 17801                                  ;	M035 - if open made from exec then we must set the appropriate bits
 17802                                  ;	       on the stack before calling off to the redir.
 17803                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 17804                                  ;	       to handle open from exec. In this case set the appropriate bit
 17805                                  ;	       else do not.
 17806                                  ;----------------------------------------------------------------------------	
 17807                                  
 17808                                  ;Installed = TRUE
 17809                                  
 17810                                  ;	i_need	NoSetDir,BYTE
 17811                                  ;	i_need	THISSFT,DWORD
 17812                                  ;	i_need	THISCDS,DWORD
 17813                                  ;	i_need	CURBUF,DWORD
 17814                                  ;	i_need	CurrentPDB,WORD
 17815                                  ;	i_need	CURR_DIR_END,WORD
 17816                                  ;	I_need	RetryCount,WORD
 17817                                  ;	I_need	Open_Access,BYTE
 17818                                  ;	I_need	fSharing,BYTE
 17819                                  ;	i_need	JShare,DWORD
 17820                                  ;	I_need	FastOpenFlg,byte
 17821                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 17822                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 17823                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 17824                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 17825                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 17826                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 17827                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 17828                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 17829                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 17830                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 17831                                  ;	I_need	SAVE_BX,WORD			  ;M034
 17832                                  ;
 17833                                  ;	I_need	DOS_FLAG,BYTE
 17834                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 17835                                  
 17836                                  ;Break	<DOS_Open - internal file access>
 17837                                  ;---------------------------------------------------------------------------
 17838                                  ; Procedure Name : DOS_Open
 17839                                  ;
 17840                                  ; Inputs:
 17841                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17842                                  ;		terminated)
 17843                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17844                                  ;		( = -1 if current dir not involved, else
 17845                                  ;		 Points to first char after last "/" of current dir part)
 17846                                  ;	[THISCDS] Points to CDS being used
 17847                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17848                                  ;	[THISSFT] Points to SFT to fill in if file found
 17849                                  ;		(sf_mode field set so that FCB may be detected)
 17850                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17851                                  ;	AX is Access and Sharing mode
 17852                                  ;	  High NIBBLE of AL (Sharing Mode)
 17853                                  ;		sharing_compat	   file is opened in compatibility mode
 17854                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 17855                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 17856                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 17857                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 17858                                  ;	  Low NIBBLE of AL (Access Mode)
 17859                                  ;		open_for_read	file is opened for reading
 17860                                  ;		open_for_write	file is opened for writing
 17861                                  ;		open_for_both	file is opened for both reading and writing.
 17862                                  ;
 17863                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 17864                                  ;		(not checked)
 17865                                  ; Function:
 17866                                  ;	Try to open the specified file
 17867                                  ; Outputs:
 17868                                  ;	sf_ref_count is NOT altered
 17869                                  ;	CARRY CLEAR
 17870                                  ;	    THISSFT filled in.
 17871                                  ;	CARRY SET
 17872                                  ;	    AX is error code
 17873                                  ;		error_file_not_found
 17874                                  ;			Last element of path not found
 17875                                  ;		error_path_not_found
 17876                                  ;			Bad path (not in curr dir part if present)
 17877                                  ;		error_bad_curr_dir
 17878                                  ;			Bad path in current directory part of path
 17879                                  ;		error_invalid_access
 17880                                  ;			Bad sharing mode or bad access mode or bad combination
 17881                                  ;		error_access_denied
 17882                                  ;			Attempt to open read only file for writting, or
 17883                                  ;			open a directory
 17884                                  ;		error_sharing_violation
 17885                                  ;			The sharing mode was correct but not allowed
 17886                                  ;			generates an INT 24 on compatibility mode SFTs
 17887                                  ; DS preserved, others destroyed
 17888                                  ;----------------------------------------------------------------------------
 17889                                  
 17890                                  ; 18/05/2019 - Retro DOS v4.0
 17891                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 17892                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17893                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 17894                                  
 17895                                  DOS_OPEN:
 17896                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 17897                                  
 17898 00002BDA C606[4C03]00            	MOV	byte [NoSetDir],0
 17899 00002BDF E83601                  	CALL	Check_Access_AX
 17900 00002BE2 722B                    	JC	short do_ret_label	    ; retc
 17901                                  
 17902 00002BE4 C43E[9E05]              	LES	DI,[THISSFT]
 17903 00002BE8 30E4                    	XOR	AH,AH
 17904                                  
 17905                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 17906                                  
 17907 00002BEA 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 17908 00002BEE 06                      	PUSH	ES
 17909 00002BEF C436[A205]              	LES	SI,[THISCDS]
 17910                                  	; 18/08/2018
 17911 00002BF3 83FEFF                  	CMP	SI,-1
 17912 00002BF6 7530                    	JNZ	short TEST_RE_NET1
 17913 00002BF8 07                      	POP	ES
 17914                                  
 17915                                  	; MSDOS 6.0
 17916                                  ;Extended open hooks
 17917 00002BF9 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 17918 00002BFE 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 17919                                  _IFS_extopen:									;AN000;
 17920 00002C00 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 17921                                  					    ; with which call was made. This
 17922                                  					    ; has the open access bits. 
 17923                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 17924                                  	
 17925 00002C03 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 17926                                  	;mov	ax,112Eh
 17927                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 17928 00002C04 B82E11                  	mov	ax,(MultNET*256)+46 
 17929 00002C07 CD2F                    	INT	2FH			    ;FT.				;AN000;
 17930 00002C09 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 17931 00002C0A C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 17932                                  
 17933                                  do_ret_label:
 17934 00002C0F C3                      	retn				    ;FT.				;AN000;
 17935                                  _NOEXTOP:
 17936                                  ;Extended open hooks
 17937                                  	;
 17938                                  ;IF NOT Installed
 17939                                  	;transfer NET_SEQ_OPEN
 17940                                  ;ELSE
 17941                                  	
 17942                                  do_net_int2f:
 17943 00002C10 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 17944 00002C15 7409                    	jz	short not_exec_open	; N: just do net open
 17945                                  					; Y: check to see if redir is aware
 17946                                  					;    of this 
 17947                                  	
 17948                                  					; M042 - start
 17949                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 17950 00002C17 F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 17951                                  					; Q: does this redir know how to 
 17952                                  					;    this
 17953 00002C1C 7402                    	jz	short not_exec_open	; N: just do net open
 17954                                  					; Y: set bit 3 of access byte and 
 17955                                  					;    set sharing mode to DENY_WRITE
 17956                                  					; M042 - end
 17957                                  	
 17958                                  	; NOTE: This specific mode has not been set for the code assembled
 17959                                  	; under the "NOT Installed" conditional. Currently Installed is 
 17960                                  	; always one.
 17961                                  					; M035 - set the bits on the stack
 17962                                  	;mov	al,23h
 17963 00002C1E B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 17964                                  	
 17965                                  not_exec_open:
 17966                                  	; MSDOS 3.3 & MSDOS 6.0
 17967 00002C20 50                      	PUSH	AX
 17968                                  
 17969                                  	;MOV	AX,(MultNET SHL 8) OR 22
 17970                                  	;INT	2FH
 17971                                  
 17972 00002C21 B81611                  	mov     ax,1116h
 17973 00002C24 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 17974                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17975                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17976                                  			; STACK: WORD file open mode
 17977                                  			; Return: CF set on error
 17978                                  
 17979 00002C26 5B                      	POP	BX			; clean stack
 17980                                  ;do_ret_label: ; 09/08/2018
 17981 00002C27 C3                      	retn
 17982                                  ;ENDIF
 17983                                  
 17984                                  TEST_RE_NET1:
 17985                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17986                                  	; 17/12/2022
 17987 00002C28 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17988 00002C2D 07                      	POP	ES
 17989                                  	; 18/05/2019
 17990 00002C2E 7409                    	JZ	short LOCAL_OPEN
 17991                                  
 17992                                  ;Extended open hooks
 17993                                  	; MSDOS 6.0
 17994 00002C30 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 17995 00002C35 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 17996                                  ;Extended open hooks
 17997                                  
 17998                                  ;IF NOT Installed
 17999                                  ;	transfer NET_OPEN
 18000                                  ;ELSE
 18001 00002C37 EBD7                    	jmp	short do_net_int2f
 18002                                  ;ENDIF
 18003                                  
 18004                                  LOCAL_OPEN:
 18005                                  	; MSDOS 3.3 & MSDOS 6.0
 18006 00002C39 E84CE7                  	call	ECritDisk
 18007                                  
 18008                                  ; DOS 3.3 FastOPen 6/16/86
 18009                                  
 18010                                  	;or	byte [FastOpenFlg],5
 18011 00002C3C 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18012                                  
 18013 00002C41 E86013                  	call	GETPATH
 18014                                  
 18015                                  ; DOS 3.3 FastOPen 6/16/86
 18016                                  
 18017 00002C44 731D                    	JNC	short Open_found
 18018 00002C46 7511                    	JNZ	short bad_path2
 18019 00002C48 08C9                    	OR	CL,CL
 18020 00002C4A 740D                    	JZ	short bad_path2
 18021                                  OpenFNF:
 18022 00002C4C B80200                  	MOV	AX,error_file_not_found	; 2
 18023                                  OpenBadRet:
 18024                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18025                                  	; 12/08/2018
 18026                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18027                                  	; MSDOS 6.0
 18028 00002C4F 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18029 00002C55 F9                      	STC
 18030                                  	;call	LCritDisk
 18031                                  	; 16/12/2022
 18032 00002C56 E94AE7                  	jmp	LCritDisk
 18033                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18034                                  	;retn 	; 08/09/2018
 18035                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18036                                  	;jmp	Clear_FastOpen
 18037                                  
 18038                                  bad_path2:
 18039 00002C59 B80300                  	MOV	AX,error_path_not_found	; 3
 18040 00002C5C EBF1                    	JMP	short OpenBadRet
 18041                                  
 18042                                  Open_Bad_Access:
 18043 00002C5E B80500                  	MOV	AX,error_access_denied	; 5
 18044 00002C61 EBEC                    	JMP	short OpenBadRet
 18045                                  
 18046                                  Open_found:
 18047 00002C63 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18048 00002C65 08E4                    	OR	AH,AH
 18049 00002C67 783E                    	JS	short open_ok		; Devices don't have attributes
 18050 00002C69 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18051                                  	;mov	al,[es:bx+0Bh]
 18052 00002C6D 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18053 00002C71 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18054 00002C73 75E9                    	JNZ	short Open_Bad_Access
 18055 00002C75 A801                    	TEST	AL,attr_read_only	; check write on read only
 18056 00002C77 742E                    	JZ	short open_ok
 18057                                  
 18058                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18059                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18060                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18061                                  ; processing until the actual write operation:
 18062                                  ;
 18063                                  ; If FCB, then we change the mode to be read_only.
 18064                                  ; If net_FCB, then we change the mode to be read_only.
 18065                                  ; If not open for read then error.
 18066                                  
 18067 00002C79 1E                      	push	ds
 18068 00002C7A 56                      	push	si
 18069 00002C7B C536[9E05]              	LDS	SI,[THISSFT]
 18070                                  	;mov	cx,[si+2]
 18071 00002C7F 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18072                                  	; 17/12/2022
 18073                                  	;test	ch,80h
 18074 00002C82 F6C580                  	test	ch,sf_isFCB>>8
 18075                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18076 00002C85 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18077 00002C87 88CA                    	MOV	DL,CL
 18078 00002C89 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18079 00002C8C 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18080 00002C8F 7508                    	JNZ	short NormalOpen	; no
 18081                                  ResetAccess:
 18082                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18083                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18084                                  	; 16/12/2022
 18085 00002C91 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18086                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18087 00002C94 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18088 00002C97 EB0C                    	JMP	SHORT FillSFT
 18089                                  
 18090                                  ; The SFT is normal. See if the requested access is open_for_read
 18091                                  
 18092                                  NormalOpen:
 18093 00002C99 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18094 00002C9C 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18095 00002C9F 7404                    	JZ	short FillSFT
 18096 00002CA1 5E                      	pop	si
 18097 00002CA2 1F                      	pop	ds
 18098 00002CA3 EBB9                    	JMP	short Open_Bad_Access
 18099                                  ;
 18100                                  ; All done, restore registers and fill the SFT.
 18101                                  ;
 18102                                  FillSFT:
 18103 00002CA5 5E                      	pop	si
 18104 00002CA6 1F                      	pop	ds
 18105                                  open_ok:
 18106 00002CA7 E83B1F                  	call	DOOPEN			; Fill in SFT
 18107                                  
 18108                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18109                                  	; 18/05/2019
 18110                                  	;and	byte [ss:FastOpenFlag],80h
 18111 00002CAA 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18112                                  	; 12/08/2018
 18113                                  	;and	byte [FastOpenFlg],Fast_yes	
 18114                                  
 18115                                  	; MSDOS 6.0
 18116 00002CB0 E84600                  	CALL	DO_SHARE_CHECK
 18117 00002CB3 7303                    	JNC	short SHARE_OK
 18118                                  	;call	LCritDisk
 18119                                  	; 16/12/2022
 18120 00002CB5 E9EBE6                  	jmp	LCritDisk
 18121                                  	;;JMP	short Clear_FastOpen
 18122                                  	;retn	; 18/05/2019
 18123                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18124                                  	;jmp	short Clear_FastOpen	
 18125                                  
 18126                                  	; MSDOS 3.3
 18127                                  ;DO_SHARE_CHECK:
 18128                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18129                                  ;OpenShareRetry:
 18130                                  ;	push	cx			; Save number left to do
 18131                                  ;	call	SHARE_CHECK		; Final Check
 18132                                  ;	pop	cx			; CX = # left
 18133                                  ;	JNC	short SHARE_OK		; No problem with access
 18134                                  ;	call	Idle
 18135                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18136                                  ;OpenShareFail:
 18137                                  ;	LES	DI,[THISSFT]
 18138                                  ;	call	SHARE_ERROR
 18139                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18140                                  	
 18141                                  	;12/08/2018
 18142                                  	;mov	byte [ss:FastOpenFlg],0
 18143                                  	;08/09/2018
 18144                                  	;mov	byte [FastOpenFlg],0
 18145                                  	;call	LCritDisk
 18146                                  	;JMP	short Clear_FastOpen
 18147                                  	;retn
 18148                                  
 18149                                  SHARE_OK:
 18150                                  	; MSDOS 3.3 & MSDOS 6.0
 18151 00002CB8 B80300                  	MOV	AX,3
 18152 00002CBB C43E[9E05]              	LES	DI,[THISSFT]
 18153                                  ;if installed
 18154                                  	;call	JShare + 14 * 4
 18155 00002CBF FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18156                                  ;else
 18157                                  ;	Call	ShSU
 18158                                  ;endif
 18159 00002CC3 E8DDE6                  	call	LCritDisk
 18160                                  	
 18161                                  	;FallThru Set_SFT_Mode
 18162                                  
 18163                                  ;----------------------------------------------------------------------------
 18164                                  ; Procedure Name : SET_SFT_MODE
 18165                                  ;
 18166                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18167                                  ;
 18168                                  ;   Inputs:
 18169                                  ;	ThisSFT points to SFT
 18170                                  ;
 18171                                  ;   Outputs:
 18172                                  ;	Carry clear
 18173                                  ;   Registers modified: AX.
 18174                                  ;---------------------------------------------------------------------------
 18175                                  
 18176                                  ;hkn; called from create. DS already set up to DOSDATA.
 18177                                  
 18178                                  SET_SFT_MODE:
 18179 00002CC6 C43E[9E05]              	LES	DI,[THISSFT]
 18180 00002CCA E8A419                  	call	DEV_OPEN_SFT
 18181                                  	;test	word [es:di+2],8000h
 18182                                  	; 17/12/2022
 18183                                  	;test	byte [es:di+3],80h
 18184 00002CCD 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18185                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18186 00002CD2 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18187 00002CD4 A1[3003]                	MOV	AX,[CurrentPDB]
 18188                                  	;mov	[es:di+31h],ax
 18189 00002CD7 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18190                                  
 18191                                  Clear_FastOpen:
 18192 00002CDB C3                      	retn			       ;;;;; DOS 3.3
 18193                                  
 18194                                  ;----------------------------------------------------------------------------
 18195                                  ; Procedure Name : SHARE_ERROR
 18196                                  ;
 18197                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18198                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18199                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18200                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18201                                  ;---------------------------------------------------------------------------
 18202                                  
 18203                                  SHARE_ERROR:
 18204                                  	; 17/12/2022
 18205                                  	;test	byte [es:di+3],80h
 18206 00002CDC 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18207                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18208 00002CE1 750C                    	JNZ	short _HARD_ERR
 18209 00002CE3 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18210 00002CE7 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18211 00002CEA 80F900                  	CMP	CL,SHARING_COMPAT ; 0
 18212 00002CED 7505                    	JNE	short _NO_HARD_ERR
 18213                                  _HARD_ERR:
 18214 00002CEF E8E646                  	call	SHARE_VIOLATION
 18215                                  	;retnc				; User wants retry
 18216 00002CF2 73E7                    	jnc	short Clear_FastOpen
 18217                                  _NO_HARD_ERR:
 18218 00002CF4 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18219 00002CF7 F9                      	STC
 18220 00002CF8 C3                      	retn
 18221                                  
 18222                                  ; MSDOS 6.0
 18223                                  ;----------------------------------------------------------------------------
 18224                                  ; Procedure Name : DO_SHARE_CHECK
 18225                                  ;
 18226                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18227                                  ; Functions: check file sharing mode is valid
 18228                                  ; Output: carry set, error
 18229                                  ;	  carry clear, share ok
 18230                                  ;----------------------------------------------------------------------------
 18231                                  
 18232                                  	; 18/05/2019 - Retro DOS v4.0
 18233                                  DO_SHARE_CHECK:
 18234 00002CF9 E88CE6                  	call	ECritDisk		; enter critical section
 18235                                  OPN_RETRY:
 18236 00002CFC 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18237                                  OpenShareRetry:
 18238 00002D00 51                      	push	cx			; Save number left to do
 18239 00002D01 E8CF46                  	call	SHARE_CHECK		; Final Check
 18240 00002D04 59                      	pop	cx			; CX = # left
 18241 00002D05 730E                    	JNC	short Share_Ok2		; No problem with access
 18242 00002D07 E874E5                  	call	Idle
 18243 00002D0A E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18244                                  OpenShareFail:
 18245 00002D0C C43E[9E05]              	LES	DI,[THISSFT]
 18246 00002D10 E8C9FF                  	call	SHARE_ERROR
 18247 00002D13 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18248                                  Share_Ok2:
 18249                                  	;call	LCritDisk		; leave critical section
 18250                                  	;retn
 18251                                  	; 18/12/2022
 18252 00002D15 E98BE6                  	jmp	LCritDisk
 18253                                  
 18254                                  ;-----------------------------------------------------------------------------
 18255                                  ; Procedure Name : Check_Access
 18256                                  ;
 18257                                  ; Inputs:
 18258                                  ;	AX is mode
 18259                                  ;	  High NIBBLE of AL (Sharing Mode)
 18260                                  ;		sharing_compat	   file is opened in compatibility mode
 18261                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18262                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18263                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18264                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18265                                  ;	  Low NIBBLE of AL (Access Mode)
 18266                                  ;		open_for_read	file is opened for reading
 18267                                  ;		open_for_write	file is opened for writing
 18268                                  ;		open_for_both	file is opened for both reading and writing.
 18269                                  ; Function:
 18270                                  ;	Check this access mode for correctness
 18271                                  ; Outputs:
 18272                                  ;	[open_access] = AL input
 18273                                  ;	Carry Clear
 18274                                  ;		Mode is correct
 18275                                  ;		AX unchanged
 18276                                  ;	Carry Set
 18277                                  ;		Mode is bad
 18278                                  ;		AX = error_invalid_access
 18279                                  ; No other registers effected
 18280                                  ;----------------------------------------------------------------------------
 18281                                  
 18282                                  Check_Access_AX:
 18283 00002D18 A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18284 00002D1B 53                      	PUSH	BX
 18285                                  
 18286                                  ;	If sharing, then test for special sharing mode for FCBs
 18287                                  
 18288 00002D1C 88C3                    	MOV	BL,AL
 18289 00002D1E 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18290 00002D21 803E[7205]FF            	CMP	byte [FSHARING],-1
 18291 00002D26 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18292 00002D28 80FB70                  	CMP	BL,SHARING_NET_FCB
 18293 00002D2B 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18294                                  CheckShareMode:
 18295 00002D2D 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18296 00002D30 770D                    	JA	short Make_Bad_Access
 18297                                  CheckAccessMode:
 18298 00002D32 88C3                    	MOV	BL,AL
 18299 00002D34 80E30F                  	AND	BL,access_mask
 18300 00002D37 80FB02                  	CMP	BL,2
 18301 00002D3A 7703                    	JA	short Make_Bad_Access
 18302 00002D3C 5B                      	POP	BX
 18303 00002D3D F8                      	CLC
 18304 00002D3E C3                      	retn
 18305                                  
 18306                                  Make_Bad_Access:
 18307 00002D3F B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18308 00002D42 5B                      	POP	BX
 18309 00002D43 F9                      	STC
 18310 00002D44 C3                      	retn
 18311                                  
 18312                                  ;============================================================================
 18313                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18314                                  ;============================================================================
 18315                                  ; 08/08/2018 - Retro DOS v3.0
 18316                                  ; 18/05/2019 - Retro DOS v4.0
 18317                                  
 18318                                  ;**	Low level routine for returning disk drive information from a local
 18319                                  ;	  or NET device
 18320                                  ;
 18321                                  ;	DISK_INFO
 18322                                  ;
 18323                                  ;	  Modification history:
 18324                                  ;
 18325                                  ;		Created: ARR 30 March 1983
 18326                                  
 18327                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18328                                  ;---------------------------------------------------------------------------
 18329                                  ; Procedure Name : DISK_INFO
 18330                                  ;
 18331                                  ; Inputs:
 18332                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18333                                  ;		(It MAY NOT be NUL, error not detected)
 18334                                  ; Function:
 18335                                  ;	Get Interesting Drive Information
 18336                                  ; Returns:
 18337                                  ;	DX = Number of free allocation units
 18338                                  ;	BX = Total Number of allocation units on disk
 18339                                  ;	CX = Sector size
 18340                                  ;	AL = Sectors per allocation unit
 18341                                  ;	AH = FAT ID BYTE
 18342                                  ;	Carry set if error (currently user FAILed to I 24)
 18343                                  ; Segs except ES preserved, others destroyed
 18344                                  ;----------------------------------------------------------------------------
 18345                                  
 18346                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18347                                  ;hkn; DOSDATA. 
 18348                                  
 18349                                  DISK_INFO:
 18350                                  	; 08/08/2018 - Retro DOS v3.0
 18351                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18352                                  
 18353 00002D45 E87BE5                  	call	TestNet
 18354 00002D48 7306                    	JNC	short LOCAL_DSK_INFO
 18355                                  
 18356                                  ;IF NOT Installed
 18357                                  ;	transfer NET_DISK_INFO
 18358                                  ;ELSE
 18359                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18360                                  	;INT	2FH
 18361                                  	;return
 18362                                  
 18363 00002D4A B80C11                  	mov     ax,110Ch
 18364 00002D4D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18365                                  			; ES:DI -> current directory
 18366                                  			; Return: AL = sectors per cluster, BX = total clusters
 18367                                  			; CX = bytes per sector, DX = number of available clusters
 18368 00002D4F C3                      	retn
 18369                                  ;ENDIF
 18370                                  
 18371                                  LOCAL_DSK_INFO:
 18372 00002D50 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18373 00002D55 E830E6                  	call	ECritDisk
 18374 00002D58 E8432A                  	call	FATREAD_CDS		; perform media check.
 18375 00002D5B 7241                    	JC	short CRIT_LEAVE
 18376 00002D5D BB0200                  	MOV	BX,2
 18377 00002D60 E88928                  	call	UNPACK			; Get first FAT sector into CURBUF
 18378 00002D63 7239                    	JC	short CRIT_LEAVE
 18379 00002D65 C536[E205]              	LDS	SI,[CURBUF]
 18380                                  	;mov	ah,[si+20]
 18381 00002D69 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18382                                  
 18383                                  ;hkn; SS is DOSDATA
 18384 00002D6C 16                      	push	ss
 18385 00002D6D 1F                      	pop	ds
 18386                                  	;mov	cx,[es:bp+0Dh]
 18387 00002D6E 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18388                                  
 18389                                  ; Examine the current free count. If it indicates that we have an invalid
 18390                                  ; count, do the expensive calculation.
 18391                                  
 18392                                  	;mov	dx,[es:bp+1Fh]
 18393 00002D72 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18394 00002D76 83FAFF                  	CMP	DX,-1			; is it valid?
 18395 00002D79 7404                    	JZ	short DoScan
 18396                                  
 18397                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18398                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18399                                  ; the count.
 18400                                  
 18401 00002D7B 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18402 00002D7D 7222                    	JB	short GotVal		; yes, trust it.
 18403                                  DoScan:
 18404 00002D7F 31D2                    	XOR	DX,DX
 18405 00002D81 49                      	DEC	CX
 18406                                  SCANFREE:
 18407 00002D82 E86728                  	call	UNPACK
 18408 00002D85 7217                    	JC	short CRIT_LEAVE
 18409 00002D87 7501                    	JNZ	short NOTFREECLUS
 18410 00002D89 42                      	INC	DX			; A free one
 18411                                  NOTFREECLUS:
 18412 00002D8A 43                      	INC	BX			; Next cluster
 18413 00002D8B E2F5                    	LOOP	SCANFREE
 18414 00002D8D 4B                      	DEC	BX			; BX was next cluster. Convert to
 18415                                  ReturnVals:
 18416 00002D8E 4B                      	DEC	BX			; count
 18417                                  	;mov	al,[es:bp+4]
 18418 00002D8F 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18419 00002D93 FEC0                    	INC	AL			; Sectors/cluster
 18420                                  	;mov	cx,[es:bp+2]
 18421 00002D95 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18422                                  	;mov	[es:bp+1Fh],dx
 18423 00002D99 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18424 00002D9D F8                      	CLC
 18425                                  CRIT_LEAVE:
 18426                                  	;call	LCritDisk
 18427                                  	;retn
 18428                                  	; 17/12/2022
 18429 00002D9E E902E6                  	jmp	LCritDisk
 18430                                  
 18431                                  ; We have correctly computed everything previously. Load up registers for
 18432                                  ; return.
 18433                                  
 18434                                  GotVal: 
 18435 00002DA1 89CB                    	MOV	BX,CX			; get cluster count
 18436 00002DA3 EBE9                    	JMP	short ReturnVals
 18437                                  
 18438                                  ;============================================================================
 18439                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18440                                  ;============================================================================
 18441                                  ; 22/07/2018 - Retro DOS v3.0
 18442                                  
 18443                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18444                                  ;	NAME	DOS_SEARCH
 18445                                  
 18446                                  ;**	Low level routines for doing local and NET directory searches
 18447                                  ;
 18448                                  ;	DOS_SEARCH_FIRST
 18449                                  ;	DOS_SEARCH_NEXT
 18450                                  ;	RENAME_NEXT
 18451                                  ;
 18452                                  ;	Revision history:
 18453                                  ;
 18454                                  ;	    Created: ARR 30 March 1983
 18455                                  ;	    A000	version 4.00  Jan. 1988
 18456                                  ;	    A001	PTM 3564 -- search for fastopen
 18457                                  
 18458                                  ;Installed = TRUE
 18459                                  
 18460                                  ;--------------------------------------------------------------------------
 18461                                  ;
 18462                                  ; Procedure Name : DOS_SEARCH_FIRST
 18463                                  ;
 18464                                  ; Inputs:
 18465                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18466                                  ;		terminated)
 18467                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18468                                  ;		( = -1 if current dir not involved, else
 18469                                  ;		 Points to first char after last "/" of current dir part)
 18470                                  ;	[THISCDS] Points to CDS being used
 18471                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18472                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18473                                  ;	[DMAADD] Points to 53 byte buffer
 18474                                  ; Function:
 18475                                  ;	Initiate a search for the given file spec
 18476                                  ; Outputs:
 18477                                  ;	CARRY CLEAR
 18478                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18479                                  ;
 18480                                  ;	LOCAL
 18481                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18482                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18483                                  ;	    11 byte search name with Meta chars in it
 18484                                  ;	    Search Attribute Byte, attribute of search
 18485                                  ;	    WORD LastEnt value
 18486                                  ;	    WORD DirStart
 18487                                  ;	    4 byte pad
 18488                                  ;	    32 bytes of the directory entry found
 18489                                  ;	NET
 18490                                  ;	    21 bytes First byte has high bit set
 18491                                  ;	    32 bytes of the directory entry found
 18492                                  ;
 18493                                  ;	CARRY SET
 18494                                  ;	    AX = error code
 18495                                  ;		error_no_more_files
 18496                                  ;			No match for this file
 18497                                  ;		error_path_not_found
 18498                                  ;			Bad path (not in curr dir part if present)
 18499                                  ;		error_bad_curr_dir
 18500                                  ;			Bad path in current directory part of path
 18501                                  ; DS preserved, others destroyed
 18502                                  ;---------------------------------------------------------------------------
 18503                                  
 18504                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18505                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18506                                  
 18507                                  DOS_SEARCH_FIRST:
 18508                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18509                                  
 18510 00002DA5 C43E[A205]              	LES	DI,[THISCDS]
 18511 00002DA9 83FFFF                  	CMP	DI,-1
 18512 00002DAC 7506                    	JNZ	short TEST_RE_NET2
 18513                                  
 18514                                  ;IF NOT Installed
 18515                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18516                                  ;ELSE
 18517                                  	;mov	ax,1119h
 18518 00002DAE B81911                  	MOV	AX,(MultNET<<8)|25
 18519 00002DB1 CD2F                    	INT	2Fh
 18520 00002DB3 C3                      	retn
 18521                                  ;ENDIF
 18522                                  
 18523                                  TEST_RE_NET2:
 18524                                  	;test	word [es:di+43h],8000h
 18525                                  	; 17/12/2022
 18526                                  	;test	byte [es:di+44h],80h
 18527                                  	; 28/12/2022 (BugFix)
 18528 00002DB4 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8	
 18529                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18530 00002DB9 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18531                                  
 18532                                  ;IF NOT Installed
 18533                                  ;	transfer NET_SEARCH_FIRST
 18534                                  ;ELSE
 18535                                  	;mov	ax,111Bh
 18536 00002DBB B81B11                  	MOV	AX,(MultNET<<8)|27
 18537 00002DBE CD2F                    	INT	2FH
 18538 00002DC0 C3                      	retn
 18539                                  ;ENDIF
 18540                                  	; 18/05/2019 - Retro DOS v4.0
 18541                                  LOCAL_SEARCH_FIRST:
 18542 00002DC1 E8C4E5                  	call	ECritDisk
 18543                                  	; MSDOS 6.0
 18544                                  	;;test	word [DOS34_FLAG],400h
 18545                                  	; 17/12/2022
 18546                                  	;test	byte [DOS34_FLAG+1],04h
 18547 00002DC4 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18548                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18549 00002DC9 7405                    	JZ	short NOFN			;AN000;
 18550                                  	;or	byte [FastOpenFlg],1
 18551 00002DCB 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18552                                  NOFN:						;AN000;
 18553 00002DD0 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18554                                  	; MSDOS 6.0
 18555 00002DD5 E84101                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18556 00002DD8 7305                    	JNC	short norm_GETPATH	;AN000;;FO. no
 18557                                  	;and	byte [FastOpenFlg],80h
 18558 00002DDA 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18559                                  norm_GETPATH:
 18560 00002DDF E8C211                  	call	GETPATH
 18561                                  	; BX = offset NAME1
 18562                                  ;_getdone:
 18563 00002DE2 7318                    	JNC	short find_check_dev
 18564 00002DE4 7511                    	JNZ	short bad_path3
 18565 00002DE6 08C9                    	OR	CL,CL
 18566 00002DE8 740D                    	JZ	short bad_path3
 18567                                  find_no_more:
 18568                                  	;mov	ax,12h
 18569 00002DEA B81200                  	MOV	AX,error_no_more_files
 18570                                  BadBye:
 18571                                  	; MSDOS 6.0
 18572 00002DED 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 18573                                  
 18574 00002DF3 F9                      	STC
 18575                                  	;call	LCritDisk
 18576                                  	;retn
 18577                                  	; 18/12/2022
 18578 00002DF4 E9ACE5                  	jmp	LCritDisk
 18579                                  
 18580                                  bad_path3:
 18581                                  	;mov	ax,3
 18582 00002DF7 B80300                  	MOV	AX,error_path_not_found
 18583 00002DFA EBF1                    	JMP	short BadBye
 18584                                  
 18585                                  find_check_dev:
 18586 00002DFC 08E4                    	OR	AH,AH
 18587 00002DFE 790A                    	JNS	short found_entry
 18588 00002E00 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 18589 00002E06 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 18590                                  found_entry:
 18591                                  
 18592                                  ; We set the physical drive byte here Instead of after found_it; Doing
 18593                                  ; a search-next may not have wfp_start set correctly
 18594                                  
 18595 00002E0A C43E[2C03]              	LES	DI,[DMAADD]
 18596 00002E0E 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 18597 00002E12 AC                      	LODSB
 18598 00002E13 2C40                    	SUB	AL,'A'-1                ; logical drive
 18599 00002E15 AA                      	STOSB				; High bit not set (local)
 18600                                  found_it:
 18601 00002E16 C43E[2C03]              	LES	DI,[DMAADD]
 18602 00002E1A 47                      	INC	DI
 18603                                  
 18604                                  	; MSDOS 6.0
 18605 00002E1B 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 18606                                  	;test	byte [FastOpenFlg],10h
 18607 00002E1C F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 18608 00002E21 7408                    	JZ	short notfast			  ;FO.;AN001;
 18609 00002E23 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 18610 00002E25 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 18611 00002E29 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 18612                                  
 18613                                  notfast:
 18614 00002E2B BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 18615                                  movmov:
 18616                                  ; Special E5 code
 18617 00002E2E A4                      	MOVSB
 18618 00002E2F 26807DFF05              	CMP	BYTE [ES:DI-1],5
 18619 00002E34 7505                    	JNZ	short NOTKANJB
 18620 00002E36 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 18621                                  NOTKANJB:
 18622 00002E3B B90A00                  	MOV	CX,10
 18623 00002E3E F3A4                    	REP	MOVSB
 18624                                  
 18625                                  	; 08/09/2018
 18626 00002E40 1F                      	POP	DS			;FO.;AN001; restore ds
 18627                                  
 18628 00002E41 A0[6B05]                	MOV	AL,[ATTRIB]
 18629 00002E44 AA                      	STOSB
 18630 00002E45 50                      	PUSH	AX			; Save AH device info
 18631 00002E46 A1[4803]                	MOV	AX,[LASTENT]
 18632 00002E49 AB                      	STOSW
 18633 00002E4A A1[C205]                	MOV	AX,[DIRSTART]
 18634 00002E4D AB                      	STOSW
 18635                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 18636 00002E4E 83C704                  	ADD	DI,4
 18637 00002E51 58                      	POP	AX			; Recover AH device info
 18638 00002E52 08E4                    	OR	AH,AH
 18639 00002E54 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 18640 00002E56 833E[E205]FF            	CMP	WORD [CURBUF],-1
 18641 00002E5B 7510                    	JNZ	short OKSTORE
 18642                                  
 18643                                  	; MSDOS 6.0
 18644 00002E5D F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 18645                                  					;AN000;;FO. from fastopen and is good
 18646 00002E62 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 18647                                  
 18648                                  	; The user has specified the root directory itself, rather than some
 18649                                  	; contents of it. We can't "find" that.
 18650                                  
 18651 00002E64 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 18652                                  					;   stuffing a -1 at Lastent
 18653 00002E6A E97DFF                  	JMP	find_no_more
 18654                                  
 18655                                  OKSTORE:
 18656 00002E6D 8E1E[E405]              	MOV	DS,[CURBUF+2]
 18657                                  DOSREL:
 18658                                  	; BX = offset NAME1 (from GETPATH)
 18659 00002E71 89DE                    	MOV	SI,BX			; SI-> start of entry
 18660                                  
 18661                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 18662                                  
 18663                                  	;mov	cx,32
 18664 00002E73 B92000                  	MOV	CX,dir_entry.size
 18665                                  ;;;;; 7/29/86
 18666 00002E76 89F8                    	MOV	AX,DI			; save the 1st byte addr
 18667 00002E78 F3A4                    	REP	MOVSB
 18668 00002E7A 89C7                    	MOV	DI,AX			; restore 1st byte addr
 18669 00002E7C 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 18670 00002E80 7504                    	JNZ	short NO05
 18671 00002E82 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 18672                                  NO05:
 18673                                  
 18674                                  ;;;;; 7/29/86
 18675                                  
 18676                                  ;hkn; FastOpenflg is in DOSDATA use SS
 18677                                  	; 16/12/2022
 18678                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18679                                  	; MSDOS 6.0
 18680                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18681                                  	; 18/05/2019 - Retro DOS v4.0
 18682 00002E86 16                      	push	ss
 18683 00002E87 1F                      	pop	ds
 18684                                  	; 16/12/2022
 18685 00002E88 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 18686                                  
 18687                                  ;hkn; SS is DOSDATA
 18688                                  	;push	ss
 18689                                  	;pop	ds
 18690 00002E8D F8                      	CLC
 18691                                  	;call	LCritDisk
 18692                                  	;retn
 18693                                  	; 16/12/2022
 18694 00002E8E E912E5                  	jmp	LCritDisk
 18695                                  
 18696                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 18697                                  ;----------------------------------------------------------------------------
 18698                                  ;
 18699                                  ; Procedure Name : DOS_SEARCH_NEXT
 18700                                  ;
 18701                                  ; Inputs:
 18702                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 18703                                  ;	    (only first 21 bytes must have valid information)
 18704                                  ; Function:
 18705                                  ;	Look for subsequent matches
 18706                                  ; Outputs:
 18707                                  ;	CARRY CLEAR
 18708                                  ;	    The 53 bytes at DMAADD are updated for next call
 18709                                  ;		(see DOS_SEARCH_FIRST)
 18710                                  ;	CARRY SET
 18711                                  ;	    AX = error code
 18712                                  ;		error_no_more_files
 18713                                  ;			No more files to find
 18714                                  ; DS preserved, others destroyed
 18715                                  ;---------------------------------------------------------------------------
 18716                                  
 18717                                  ;hkn; called from search.asm. DS already set up at this point.
 18718                                  
 18719                                  DOS_SEARCH_NEXT:
 18720 00002E91 C43E[2C03]              	LES	DI,[DMAADD]
 18721 00002E95 268A05                  	MOV	AL,[ES:DI]
 18722 00002E98 A880                    	TEST	AL,80H			; Test for NET
 18723 00002E9A 7406                    	JZ	short LOCAL_SEARCH_NEXT
 18724                                  ;IF NOT Installed
 18725                                  ;	transfer NET_SEARCH_NEXT
 18726                                  ;ELSE
 18727                                  	;mov	ax,111Ch
 18728 00002E9C B81C11                  	MOV	AX,(MultNET<<8)|28
 18729 00002E9F CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 18730                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 18731                                  		     ; Return: CF set on error, AX = DOS error code
 18732                                  		     ; CF clear if successful
 18733 00002EA1 C3                      	retn
 18734                                  ;ENDIF
 18735                                  
 18736                                  LOCAL_SEARCH_NEXT:
 18737                                  	;AL is drive A=1
 18738                                  	;mov	byte [EXTERR_LOCUS],2
 18739 00002EA2 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18740 00002EA7 E8DEE4                  	call	ECritDisk
 18741                                  
 18742                                  ;hkn; DummyCDS is in DOSDATA
 18743 00002EAA C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 18744                                  ;hkn; Segment address is DOSDATA - use ds
 18745                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 18746 00002EB0 8C1E[A405]              	mov	[THISCDS+2],DS
 18747                                  
 18748 00002EB4 0440                    	ADD	AL,'A'-1
 18749 00002EB6 E8DA3B                  	call	InitCDS
 18750                                  
 18751                                  ;	call	GETTHISDRV		; Set CDS pointer
 18752                                  
 18753 00002EB9 7236                    	JC	short No_files		; Bogus drive letter
 18754 00002EBB C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 18755                                  	;les	bp,[es:di+45h]
 18756 00002EBF 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 18757 00002EC3 E8B5D7                  	call	GOTDPB			; [THISDPB] = ES:BP
 18758                                  
 18759                                  	; 16/12/2022
 18760 00002EC6 268A4600                	mov	al,[ES:BP]
 18761                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18762                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 18763 00002ECA A2[7605]                	mov	[THISDRV],AL
 18764                                  	;mov	word [CREATING],0E500h
 18765 00002ECD C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 18766 00002ED3 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18767 00002ED8 C536[2C03]              	LDS	SI,[DMAADD]
 18768 00002EDC AC                      	LODSB				; Drive Byte
 18769                                  
 18770                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 18771                                  RENAME_NEXT:
 18772                                  	;context ES
 18773 00002EDD 16                      	push	ss
 18774 00002EDE 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 18775                                  
 18776                                  ;hkn; NAME1 is in DOSDATA
 18777 00002EDF BF[4B05]                	MOV	DI,NAME1
 18778                                  
 18779 00002EE2 B90B00                  	MOV	CX,11
 18780 00002EE5 F3A4                    	REP	MOVSB			; Search name
 18781 00002EE7 AC                      	LODSB				; Attribute
 18782                                  
 18783                                  ;hkn; SS override
 18784 00002EE8 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 18785 00002EEC AD                      	LODSW				; LastEnt
 18786 00002EED 09C0                    	OR	AX,AX
 18787 00002EEF 7903                    	JNS	short cont_load
 18788                                  No_files:
 18789 00002EF1 E9F6FE                  	JMP	find_no_more
 18790                                  
 18791                                  cont_load:
 18792 00002EF4 50                      	PUSH	AX			; Save LastEnt
 18793 00002EF5 AD                      	LODSW				; DirStart
 18794 00002EF6 89C3                    	MOV	BX,AX
 18795                                  
 18796                                  ;hkn; SS is DOSDATA
 18797                                  	;context DS
 18798 00002EF8 16                      	push	ss
 18799 00002EF9 1F                      	pop	ds
 18800 00002EFA C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 18801                                  	;invoke	SetDirSrch
 18802 00002EFE E84310                  	call	SETDIRSRCH
 18803 00002F01 7303                    	JNC	short SEARCH_GOON
 18804 00002F03 58                      	POP	AX			; Clean stack
 18805 00002F04 EBEB                    	JMP	short No_files
 18806                                  
 18807                                  SEARCH_GOON:
 18808 00002F06 E83113                  	call	STARTSRCH
 18809 00002F09 58                      	POP	AX
 18810 00002F0A E80B10                  	call	GETENT
 18811 00002F0D 72E2                    	JC	short No_files
 18812 00002F0F E83C0F                  	call	NEXTENT
 18813 00002F12 72DD                    	JC	short No_files
 18814 00002F14 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 18815 00002F16 E9FDFE                  	JMP	found_it ; 10/08/2018
 18816                                  
 18817                                  ; MSDOS 6.0
 18818                                  ;---------------------------------------------------------------------------
 18819                                  ;
 18820                                  ; Procedure Name : CHECK_QUESTION
 18821                                  ;
 18822                                  ; Input: [WFP_START]= pointer to final path
 18823                                  ; Function: check '?' char
 18824                                  ; Output: carry clear, if no '?'
 18825                                  ;	 carry set, if '?' exists
 18826                                  ;---------------------------------------------------------------------------
 18827                                  
 18828                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18829                                  CHECK_QUESTION:
 18830                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 18831                                  ;hkn;	PUSH	CS			;AN000;;FO.
 18832 00002F19 16                      	push	ss
 18833 00002F1A 1F                      	POP	DS			;AN000;;FO. ds:si -> final path
 18834                                  	; 16/12/2022
 18835                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18836 00002F1B 8B36[B205]              	MOV	SI,[WFP_START]		;AN000;;FO.
 18837                                  	;mov	si,[ss:WFP_START]
 18838                                  getnext:				;AN000;
 18839 00002F1F AC                      	LODSB				;AN000;;FO. get char
 18840 00002F20 08C0                    	OR	AL,AL			;AN000;;FO. is it null
 18841 00002F22 7405                    	JZ	short NO_Question	;AN000;;FO. yes
 18842 00002F24 3C3F                    	CMP	AL,'?'                  ;AN000;;FO. is '?'
 18843 00002F26 75F7                    	JNZ	short getnext 		;AN000;;FO. no
 18844 00002F28 F9                      	STC				;AN000;;FO.
 18845                                  NO_Question:				;AN000;
 18846 00002F29 C3                      	retn				;AN000;;FO.
 18847                                  
 18848                                  ;============================================================================
 18849                                  ; ABORT.ASM, MSDOS 6.0, 1991
 18850                                  ;============================================================================
 18851                                  ; 23/07/2018 - Retro DOS v3.0
 18852                                  ; 18/05/2019 - Retro DOS v4.0
 18853                                  
 18854                                  ;**
 18855                                  ;
 18856                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 18857                                  ;  If process has NET resources a close all is sent out over the net.
 18858                                  ;
 18859                                  ;   DOS_ABORT
 18860                                  ;
 18861                                  ;   Modification history:
 18862                                  ;
 18863                                  ;       Created: ARR 30 March 1983
 18864                                  ;
 18865                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 18866                                  ;				being terminated only if it is busy.
 18867                                  ;
 18868                                  
 18869                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 18870                                  ;--------------------------------------------------------------------------
 18871                                  ;
 18872                                  ; Procedure Name : DOS_ABORT
 18873                                  ;
 18874                                  ; Inputs:
 18875                                  ;       [CurrentPDB] set to PID of process aborting
 18876                                  ; Function:
 18877                                  ;       Close all files and free all SFTs for this PID
 18878                                  ; Returns:
 18879                                  ;       None
 18880                                  ; All destroyed except stack
 18881                                  ;---------------------------------------------------------------------------
 18882                                  
 18883                                  DOS_ABORT:
 18884 00002F2A 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 18885 00002F2F 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 18886                                  reset_free_jfn:
 18887 00002F34 89CB                    	MOV     BX,CX
 18888 00002F36 51                      	PUSH    CX
 18889 00002F37 4B                      	DEC     BX                      ; get jfn (start with last one)
 18890                                  
 18891 00002F38 E88E38                  	CALL	_$CLOSE
 18892 00002F3B 59                      	POP     CX
 18893 00002F3C E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 18894                                  
 18895                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 18896                                  ; are running in the no-sharing no-network environment, we are simulating the
 18897                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 18898                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 18899                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 18900                                  ;
 18901                                  ; If sharing is loaded, then the following call to close process will
 18902                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 18903                                  ;
 18904                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 18905                                  ; known network resources. These resources are then responsible for cleaning
 18906                                  ; up after this process.
 18907                                  ;
 18908                                  ; Sleazy, eh?
 18909                                  
 18910                                  	;context DS			; SS is DOSDATA
 18911 00002F3E 16                      	push	ss
 18912 00002F3F 1F                      	pop	ds  ; 09/09/2018
 18913                                  
 18914                                  	;CallInstall Net_Abort, MultNET, 29
 18915 00002F40 B81D11                  	mov	ax,111Dh
 18916 00002F43 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 18917                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 18918                                  			; DS???, SS = DOS CS
 18919                                  ;if installed
 18920 00002F45 FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 18921                                  ;else
 18922                                  ;	call 	MFTCloseP
 18923                                  ;endif
 18924                                  
 18925                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 18926                                  ; counts.
 18927                                  					; SS override
 18928 00002F49 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 18929                                  	;mov	cx,[es:di+4]
 18930 00002F4E 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 18931 00002F52 E317                    	jcxz    FCBScanDone
 18932                                  	;lea	di,[di+6]
 18933 00002F54 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 18934 00002F57 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18935                                  FCBTest:
 18936                                  	;cmp	[es:di+31h],ax
 18937 00002F5B 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 18938 00002F5F 7505                    	jnz	short FCBNext		; no, skip it
 18939 00002F61 26C7050000              	mov	word [es:di],0
 18940                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 18941                                  FCBNext:
 18942 00002F66 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 18943 00002F69 E2F0                    	loop    FCBTest
 18944                                  FCBScanDone:
 18945                                  
 18946                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 18947                                  
 18948 00002F6B 31DB                    	XOR     BX,BX
 18949                                  Scan:
 18950 00002F6D 53                      	push    bx
 18951 00002F6E E8D337                  	call	SFFromSFN
 18952 00002F71 5B                      	pop     bx
 18953                                  	;jnc	short Scan1
 18954                                  	;retn
 18955                                  	; 18/12/2022
 18956 00002F72 72B5                    	jc	short NO_Question ; retn
 18957                                  
 18958                                  ;M038
 18959                                  ; Do what the comment above says, check for busy state
 18960                                  
 18961                                  Scan1:
 18962                                  	;cmp	word [es:di],0
 18963                                  	;jz	short scan_next  ; MSDOS 3.3
 18964                                  	; MSDOS 6.0
 18965 00002F74 26833DFF                	cmp	word [es:di],sf_busy ; -1
 18966                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 18967                                  				; Is Sft busy? ;M038
 18968 00002F78 7519                    	jnz	short scan_next
 18969                                  ;
 18970                                  ; we have a SFT that is busy. See if it is for the current process
 18971                                  ;
 18972 00002F7A 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18973                                  	;cmp	[es:di+31h],ax
 18974 00002F7E 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 18975 00002F82 750F                    	jnz	short scan_next
 18976 00002F84 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 18977                                  	;cmp	[es:di+2Fh],ax
 18978 00002F88 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 18979 00002F8C 7505                    	jnz	short scan_next
 18980                                  
 18981                                  ; This SFT is labelled as ours.
 18982                                  
 18983 00002F8E 26C7050000              	mov	word [es:di],0
 18984                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 18985                                  scan_next:
 18986 00002F93 43                      	inc     bx
 18987 00002F94 EBD7                    	jmp     short Scan
 18988                                  
 18989                                  ;============================================================================
 18990                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 18991                                  ;============================================================================
 18992                                  ; 23/07/2018 - Retro DOS v3.0
 18993                                  ; 18/05/2019 - Retro DOS v4.0
 18994                                  
 18995                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 18996                                  ;
 18997                                  ;	DOS_CLOSE
 18998                                  ;	DOS_COMMIT
 18999                                  ;	FREE_SFT
 19000                                  ;	SetSFTTimes
 19001                                  ;
 19002                                  ;	Revision history:
 19003                                  ;
 19004                                  ;	   AN000  version 4.00	Jan. 1988
 19005                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19006                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19007                                  
 19008                                  ;Installed = TRUE
 19009                                  
 19010                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19011                                  ;---------------------------------------------------------------------------
 19012                                  ;
 19013                                  ; Procedure Name : DOS_CLOSE
 19014                                  ;
 19015                                  ; Inputs:
 19016                                  ;	[THISSFT] set to the SFT for the file being used
 19017                                  ; Function:
 19018                                  ;	Close the indicated file via the SFT
 19019                                  ; Returns:
 19020                                  ;	sf_ref_count decremented otherwise
 19021                                  ;	ES:DI point to SFT
 19022                                  ;	Carry set if error
 19023                                  ;	    AX has error code
 19024                                  ; DS preserved, others destroyed
 19025                                  ;---------------------------------------------------------------------------
 19026                                  
 19027                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 19028                                  
 19029                                  ; 18/05/2019 - Retro DOS v4.0
 19030                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19031                                  
 19032                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19033                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19034                                  
 19035                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19036                                  
 19037                                  DOS_CLOSE:
 19038 00002F96 C43E[9E05]              	LES	DI,[THISSFT]
 19039                                  	;mov	bx,[ES:DI+5]
 19040 00002F9A 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19041                                  
 19042                                  ; Network closes are handled entirely by the net code.
 19043                                  
 19044                                  	;;test	bx,8000h
 19045                                  	;TEST	BX,sf_isnet
 19046                                  	; 17/12/2022
 19047                                  	;test	bh,80h
 19048 00002F9E F6C780                  	test	bh,(sf_isnet>>8)
 19049 00002FA1 7406                    	JZ	short LocalClose
 19050                                  
 19051                                  	;CallInstall Net_Close,MultNET,6
 19052 00002FA3 B80611                  	mov     ax,1106h
 19053 00002FA6 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19054                                  			; ES:DI -> SFT
 19055                                  			; SFT DPB field -> DPB of drive containing file
 19056                                  			; Return: CF set on error, AX = DOS error code
 19057                                  			; CF clear if successful
 19058 00002FA8 C3                      	retn
 19059                                  
 19060                                  ; All closes release the sharing information.
 19061                                  ; No commit releases sharing information
 19062                                  ;
 19063                                  ; All closes decrement the ref count.
 19064                                  ; No commit decrements the ref count.
 19065                                  
 19066                                  LocalClose:
 19067 00002FA9 E8DCE3                  	call	ECritDisk
 19068 00002FAC E86501                  	CALL	SetSFTTimes
 19069 00002FAF E8DF00                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19070                                  
 19071                                  ;hkn; SS is DOSDATA
 19072                                  	;Context DS
 19073 00002FB2 16                      	push	ss
 19074 00002FB3 1F                      	pop	ds
 19075                                  
 19076 00002FB4 50                      	push	ax
 19077 00002FB5 53                      	push	bx
 19078 00002FB6 E84544                  	call	ShareEnd
 19079 00002FB9 5B                      	pop	bx
 19080 00002FBA 58                      	pop	ax
 19081                                  
 19082                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19083                                  
 19084                                  CloseEntry:
 19085 00002FBB 50                      	PUSH	AX
 19086                                  
 19087                                  ; File clean or device does not get stamped nor disk looked at.
 19088                                  
 19089                                  	;test	bx,0C0h
 19090                                  	; 17/12/2022
 19091 00002FBC F6C3C0                  	test	bl,devid_file_clean+devid_device
 19092                                  	;TEST	BX,devid_file_clean+devid_device
 19093 00002FBF 7403                    	JZ	short rdir
 19094                                  	; 14/11/2022
 19095 00002FC1 E9BA00                  	JMP	FREE_SFT_OK		; either clean or device
 19096                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19097                                  
 19098                                  ; Retrieve the directory entry for the file
 19099                                  
 19100                                  rdir:
 19101 00002FC4 E8D700                  	CALL	DirFromSFT
 19102                                  	;mov	al,5
 19103 00002FC7 B005                    	MOV	AL,error_access_denied
 19104 00002FC9 7303                    	JNC	short clook
 19105                                  	; 14/11/2022
 19106 00002FCB E9B100                  	JMP	CloseFinish		; pretend the close worked.
 19107                                  	;jc	short CloseFinish ; 24/07/2019
 19108                                  clook:
 19109                                  
 19110                                  ; ES:DI points to entry
 19111                                  ; DS:SI points to SFT
 19112                                  ; ES:BX points to buffer header
 19113                                  
 19114 00002FCE 57                      	push	di
 19115 00002FCF 56                      	push	si
 19116                                  	;lea	si,[si+20h]
 19117 00002FD0 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19118                                  
 19119                                  ; ES:DI point to directory entry
 19120                                  ; DS:SI point to unpacked name
 19121                                  
 19122 00002FD3 E8A1E2                  	call	XCHGP
 19123                                  
 19124                                  ; ES:DI point to unpacked name
 19125                                  ; DS:SI point to directory entry
 19126                                  
 19127 00002FD6 E8D30E                  	call	MetaCompare
 19128 00002FD9 E89BE2                  	call	XCHGP
 19129 00002FDC 5E                      	pop	si
 19130 00002FDD 5F                      	pop	di
 19131 00002FDE 740C                    	JZ	short CLOSE_GO		; Name OK
 19132                                  Bye:	
 19133 00002FE0 89F7                    	MOV	DI,SI
 19134 00002FE2 1E                      	PUSH	DS
 19135 00002FE3 07                      	POP	ES			; ES:DI points to SFT
 19136 00002FE4 16                      	PUSH	SS
 19137 00002FE5 1F                      	POP	DS
 19138 00002FE6 F9                      	STC
 19139                                  	;mov	al,2
 19140 00002FE7 B002                    	MOV	AL,error_file_not_found
 19141 00002FE9 E99300                  	JMP	CloseFinish ; 24/07/2019
 19142                                  
 19143                                  	; 18/05/2019 - Retro DOS v4.0
 19144                                  CLOSE_GO:
 19145                                  	; 03/02/2024
 19146                                  	;mov	al,[si+4]
 19147 00002FEC 8A4404                  	mov	al,[si+SF_ENTRY.sf_attr]
 19148                                  	
 19149                                  	; MSDOS 6.0
 19150                                  	;test	word [si+2],8000h
 19151                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19152                                  	; 17/12/2022
 19153                                  	;test	byte [si+3],80h
 19154 00002FEF F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19155 00002FF3 740A                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19156                                  	; MSDOS 3.3 & MSDOS 6.0
 19157                                  	;mov	ch,[es:di+0Bh]
 19158 00002FF5 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19159                                  
 19160                                  	; 03/02/2024
 19161                                  	;;mov	al,[si+4]
 19162                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr]
 19163                                  
 19164                                  ;hkn; SS override
 19165 00002FF9 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19166                                  	; MSDOS 3.3
 19167                                  	;;call	MatchAttributes
 19168                                  	;;JNZ	short Bye		; attributes do not match
 19169                                  	; 18/05/2019
 19170 00002FFD EB04                    	JMP	SHORT setattr		;FT.
 19171                                  nofcb:
 19172                                  	; 03/02/2024
 19173                                  	; MSDOS 6.0
 19174                                  	;;mov	al,[si+4]
 19175                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19176                                  
 19177 00002FFF 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19178                                  setattr:
 19179                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19180                                  	;or	byte [es:di+0Bh],20h
 19181 00003003 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19182                                  	; MSDOS 6.0
 19183                                  	;mov	ax,[es:di+1Ah]
 19184 00003008 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19185                                  					;F.O. save old first cluster
 19186                                  ;hkn; SS override
 19187 0000300C 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19188                                  
 19189                                  	;mov	ax,[si+0Bh]
 19190 00003010 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19191                                  	;mov	[es:di+1Ah],ax
 19192 00003013 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19193                                  	;mov	ax,[si+11h]
 19194 00003017 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19195                                  	;mov	[es:di+1Ch],ax
 19196 0000301A 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19197                                  	;mov	ax,[si+13h]
 19198 0000301E 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19199                                  	;mov	[es:di+1Eh],ax
 19200 00003021 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19201                                  	;mov	ax,[si+0Fh]
 19202 00003025 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19203                                  	;mov	[es:di+18h],ax
 19204 00003028 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19205                                  	;mov	ax,[si+0Dh]
 19206 0000302C 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19207                                  	;mov	[es:di+16h],ax
 19208 0000302F 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19209                                  
 19210                                  	; MSDOS 6.0
 19211                                  ;; File Tagging
 19212 00003033 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty
 19213                                  				  ;LB. if already dirty		    ;AN000;
 19214 00003038 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19215                                  	; 02/06/2019
 19216 0000303A E8D22B                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19217                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19218                                  	;or	byte [es:bx+5],40h
 19219 0000303D 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19220                                  yesdirty4:
 19221 00003042 1E                      	push	ds
 19222 00003043 56                      	push	si
 19223                                  	; MSDOS 6.0
 19224                                  	;mov	cx,[si+0Bh]
 19225                                  	; 07/12/2022
 19226 00003044 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19227                                  ;hkn; SS override
 19228 00003047 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19229                                  	; MSDOS 3.3 
 19230                                  	;push	ss
 19231                                  	;pop	ds
 19232                                  	;MOV	AL,[THISDRV]
 19233                                  ;;; 10/1/86  update fastopen cache
 19234                                  	; MSDOS 3.3 & MSDOS 6.0
 19235 0000304B 52                      	PUSH	DX
 19236 0000304C B400                    	MOV	AH,0			; dir entry update
 19237 0000304E 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19238                                  	; MSDOS 6.0
 19239 00003050 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19240 00003052 750D                    	JNZ	short do_update2	;AN005; no, do update
 19241 00003054 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19242                                  	;mov	di,[si+1Bh]
 19243 00003056 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19244                                  	;mov	cx,[si+1Dh]
 19245 00003059 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19246                                  	;mov	dh,[si+1Fh]
 19247 0000305C 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19248 0000305F EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19249                                  do_update2:				;AN011;F.O.
 19250                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19251                                  	; 
 19252 00003061 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19253 00003066 7407                    	JZ	short do_update		;AN011;F.O. yes
 19254 00003068 B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19255 0000306A 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19256                                  do_update:				;AN005;
 19257                                  ;hkn; SS is DOSDATA
 19258                                  	;Context DS
 19259 0000306F 16                      	push	ss
 19260 00003070 1F                      	pop	ds
 19261                                  	; MSDOS 3.3 & MSDOS 6.0
 19262 00003071 E8EBF6                  	call	FastOpen_Update 	; invoke fastopen
 19263 00003074 5A                      	POP	DX
 19264                                  
 19265                                  ;;; 10/1/86  update fastopen cache
 19266 00003075 E88F2A                  	call	FLUSHBUF		; flush all relevant buffers
 19267 00003078 5F                      	pop	di
 19268 00003079 07                      	pop	es
 19269                                  	;mov	al,5
 19270 0000307A B005                    	MOV	AL,error_access_denied
 19271 0000307C 7201                    	JC	short CloseFinish
 19272                                  FREE_SFT_OK:
 19273 0000307E F8                      	CLC				; signal no error.
 19274                                  CloseFinish:
 19275                                  
 19276                                  ; Indicate to the device that the SFT is being closed.
 19277                                  
 19278                                  ;;;; 7/21/86
 19279 0000307F 9C                      	PUSHF				; save flag from DirFromSFT
 19280 00003080 E8F615                  	call	DEV_CLOSE_SFT
 19281 00003083 9D                      	POPF
 19282                                  ;;;; 7/21/86
 19283                                  ;
 19284                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19285                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19286                                  ; going to be moving from busy to free.
 19287                                  ;
 19288 00003084 59                      	POP	CX			; get old ref count
 19289 00003085 9C                      	PUSHF
 19290 00003086 49                      	DEC	CX			; if cx != 1
 19291 00003087 7503                    	JNZ	short NoFree		; then do NOT free SFT
 19292 00003089 26890D                  	mov	[es:di],cx
 19293                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19294                                  NoFree:
 19295 0000308C E814E3                  	call	LCritDisk
 19296 0000308F 9D                      	POPF
 19297 00003090 C3                      	retn
 19298                                  
 19299                                  ;---------------------------------------------------------------------------
 19300                                  ;
 19301                                  ; Procedure Name : FREE_SFT
 19302                                  ;
 19303                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19304                                  ; Flags preserved. Return old ref count in AX
 19305                                  ;
 19306                                  ; Note that busy is indicated by the SFT ref count being -1.
 19307                                  ;
 19308                                  ;---------------------------------------------------------------------------
 19309                                  
 19310                                  FREE_SFT:
 19311 00003091 9C                      	PUSHF		; Save carry state
 19312 00003092 268B05                  	mov	ax,[es:di]
 19313                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19314 00003095 48                      	DEC	AX
 19315 00003096 7501                    	JNZ	short SetCount
 19316 00003098 48                      	DEC	AX
 19317                                  SetCount:
 19318 00003099 268705                  	xchg	ax,[es:di]
 19319                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19320 0000309C 9D                      	POPF
 19321 0000309D C3                      	retn
 19322                                  
 19323                                  	; 18/05/2019 - Retro DOS v4.0
 19324                                  
 19325                                  ;----------------------------------------------------------------------------
 19326                                  ;
 19327                                  ; Procedure Name : DirFromSFT
 19328                                  ;
 19329                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19330                                  ;
 19331                                  ;   Inputs:	ES:DI point to SFT
 19332                                  ;		DS = DOSDATA
 19333                                  ;   Outputs:
 19334                                  ;		EXTERR_LOCUS = errLOC_Disk
 19335                                  ;		CurBuf points to buffer
 19336                                  ;		Carry Clear -> operation OK
 19337                                  ;		    ES:DI point to entry
 19338                                  ;		    ES:BX point to buffer
 19339                                  ;		    DS:SI point to SFT
 19340                                  ;		Carry SET   -> operation failed
 19341                                  ;		    registers trashified
 19342                                  ;   Registers modified: ALL
 19343                                  ;----------------------------------------------------------------------------
 19344                                  
 19345                                  DirFromSFT:
 19346                                  	;mov	byte [EXTERR_LOCUS],2
 19347 0000309E C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19348 000030A3 06                      	push	es
 19349 000030A4 57                      	push	di
 19350                                  	; MSDOS 3.3
 19351                                  	;;mov	dx,[es:di+1Dh]
 19352                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19353                                  	; MSDOS 6.0
 19354                                  	;mov	dx,[es:[di+1Dh]
 19355 000030A5 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19356 000030A9 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19357                                  	; 04/02/2024
 19358 000030AD 52                      	push	dx
 19359                                  	;mov	dx,[es:di+1Bh]
 19360 000030AE 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19361                                  	; 04/02/2024
 19362                                  	; 19/05/2019
 19363                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19364                                  	; MSDOS 3.3 & MSDOS 6.0
 19365 000030B2 52                      	PUSH	DX
 19366 000030B3 E8D826                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19367                                  					; [THISDPB] set
 19368 000030B6 5A                      	POP	DX
 19369 000030B7 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19370 000030BB 7225                    	JC	short PopDone
 19371 000030BD 30C0                    	XOR	AL,AL			; Pre read
 19372                                  	;mov	byte [ALLOWED],18h
 19373 000030BF C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19374 000030C4 E84229                  	call	GETBUFFR
 19375 000030C7 7219                    	JC	short PopDone
 19376 000030C9 5E                      	pop	si
 19377 000030CA 1F                      	pop	ds			; Get back SFT pointer
 19378                                  
 19379                                  ;hkn; SS override
 19380 000030CB 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19381                                  	;or	byte [es:di+5],4
 19382 000030D0 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19383 000030D5 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19384                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19385                                  	;lea	di,[di+20] ; MSDOS 6.0
 19386 000030D7 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19387                                  	;mov	al,32
 19388 000030DA B020                    	MOV	AL,dir_entry.size
 19389                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19390 000030DC F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19391 000030DF 01C7                    	ADD	DI,AX			; Point at the entry
 19392 000030E1 C3                      	retn				; carry is clear
 19393                                  PopDone:
 19394 000030E2 5F                      	pop	di
 19395 000030E3 07                      	pop	es
 19396                                  PopDone_retn:
 19397 000030E4 C3                      	retn
 19398                                  
 19399                                  ;----------------------------------------------------------------------------
 19400                                  ;
 19401                                  ;**	DOS_Commit - UPdate Directory Entries
 19402                                  ;
 19403                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19404                                  ;		(DS) = DOSGROUP
 19405                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19406                                  ;	USES	all but DS
 19407                                  ;
 19408                                  ;----------------------------------------------------------------------------
 19409                                  
 19410                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19411                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19412                                  
 19413                                  DOS_COMMIT:
 19414                                  	;hkn; called from srvcall. DS already set up.
 19415 000030E5 C43E[9E05]              	LES	DI,[THISSFT]
 19416                                  	;mov	bx,[es:di+5]
 19417 000030E9 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19418                                  	;test	bx,0C0h
 19419                                  	; 17/12/2022
 19420 000030ED F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19421                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19422 000030F0 75F2                    	jnz	short PopDone_retn
 19423                                  	;test	bx,8000h
 19424                                  	; 17/12/2022
 19425                                  	;test	bh,80h
 19426 000030F2 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19427                                  	;TEST	BX,sf_isnet ; 8000h
 19428 000030F5 7406                    	JZ	short LOCAL_COMMIT
 19429                                  
 19430                                  ;IF NOT Installed
 19431                                  ;	transfer NET_COMMIT
 19432                                  ;ELSE
 19433                                  	;mov	ax,1107h
 19434 000030F7 B80711                  	MOV	AX,(MultNET<<8)|7
 19435 000030FA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19436                                  			; ES:DI -> SFT
 19437                                  			; SFT DPB field -> DPB of drive containing file
 19438                                  			; Return: CF set on error, AX = DOS error code
 19439                                  			; CF clear if successful
 19440                                  localcommit_retn: ; 18/12/2022	
 19441 000030FC C3                      	retn
 19442                                  ;ENDIF
 19443                                  
 19444                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19445                                  ; There are three ways we can do this. One is to enter a critical section to
 19446                                  ; protect a potential free. The second is to increment the ref count to mask
 19447                                  ; the close decrementing.
 19448                                  ;
 19449                                  ; The proper way is to let the caller's of close decide if a decrement should
 19450                                  ; be done. We do this by providing another entry into close after the
 19451                                  ; decrement and after the share information release.
 19452                                  
 19453                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19454                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19455                                  
 19456                                  LOCAL_COMMIT:
 19457 000030FD E888E2                  	call	ECritDisk
 19458                                  	; MSDOS 6.0
 19459 00003100 E885E2                  	call	ECritDisk	;PTM.
 19460 00003103 E80E00                  	call	SetSFTTimes
 19461 00003106 B8FFFF                  	MOV	AX,-1
 19462 00003109 E8AFFE                  	call	CloseEntry
 19463                                  	; MSDOS 6.0
 19464 0000310C 9C                      	PUSHF			;PTM.				;AN000;
 19465 0000310D E86115                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19466 00003110 9D                      	POPF			;PTM.				;AN000;
 19467                                  	;call	LCritDisk	;PTM.				;AN000;
 19468                                  	; 18/12/2022
 19469 00003111 E98FE2                  	jmp	LCritDisk
 19470                                  ;localcommit_retn:
 19471                                  ;	retn
 19472                                  
 19473                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19474                                  ;----------------------------------------------------------------------------
 19475                                  ;
 19476                                  ; Procedure Name : SetSFTTimes
 19477                                  ;
 19478                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19479                                  ;   Reflect these times in other SFT's for the same file.
 19480                                  ;
 19481                                  ;   Inputs:	ES:DI point to SFT
 19482                                  ;		BX = sf_flags set apprpriately
 19483                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19484                                  ;   Registers modified: All except ES:DI, BX, AX
 19485                                  ;
 19486                                  ;----------------------------------------------------------------------------
 19487                                  
 19488                                  SetSFTTimes:
 19489                                  ;	File clean or device does not get stamped nor disk looked at.
 19490                                  	
 19491                                  	;test	bx,0C0h
 19492                                  	; 17/12/2022
 19493 00003114 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19494                                  	;TEST	BX,devid_file_clean+devid_device
 19495                                  	;retnz				; clean or device => no timestamp
 19496 00003117 75E3                    	jnz	short localcommit_retn
 19497                                  
 19498                                  ;	file and dirty. See if date is good
 19499                                  
 19500                                  	;test	bx,4000h
 19501                                  	; 17/12/2022
 19502                                  	;test	bh,40h
 19503 00003119 F6C740                  	test	bh,(sf_close_nodate>>8)
 19504                                  	;TEST	BX,sf_close_nodate
 19505                                  	;retnz				; nodate => no timestamp
 19506 0000311C 75DE                    	jnz	short localcommit_retn
 19507                                  
 19508 0000311E 50                      	push	ax
 19509 0000311F 53                      	push	bx
 19510 00003120 E823DA                  	call	DATE16			; Date/Time to AX/DX
 19511                                  	;mov	[es:di+0Fh],ax
 19512 00003123 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 19513                                  	;mov	[es:di+0Dh],dx
 19514 00003127 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 19515 0000312B 31C0                    	XOR	AX,AX
 19516                                  ;if installed
 19517                                  	;call	JShare + 14 * 4
 19518 0000312D FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 19519                                  ;else
 19520                                  ;	call	ShSU
 19521                                  ;endif
 19522 00003131 5B                      	pop	bx
 19523 00003132 58                      	pop	ax
 19524 00003133 C3                      	retn
 19525                                  
 19526                                  ;============================================================================
 19527                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 19528                                  ;============================================================================
 19529                                  ; 23/07/2018 - Retro DOS v3.0
 19530                                  ; 18/05/2019 - Retro DOS v4.0
 19531                                  
 19532                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 19533                                  
 19534                                  ;TITLE DIRCALL - Directory manipulation internal calls
 19535                                  ;NAME  DIRCALL
 19536                                  
 19537                                  ;**	Low level directory manipulation routines for making removing and
 19538                                  ;	  verifying local or NET directories
 19539                                  ;
 19540                                  ;	DOS_MKDIR
 19541                                  ;	DOS_CHDIR
 19542                                  ;	DOS_RMDIR
 19543                                  ;
 19544                                  ;	Modification history:
 19545                                  ;
 19546                                  ;		Created: ARR 30 March 1983
 19547                                  
 19548                                  ;BREAK <DOS_MkDir - Make a directory entry>
 19549                                  ;---------------------------------------------------------------------------
 19550                                  ;
 19551                                  ; Procedure Name : DOS_MkDir
 19552                                  ;
 19553                                  ; Inputs:
 19554                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19555                                  ;		terminated)
 19556                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19557                                  ;		( = -1 if current dir not involved, else
 19558                                  ;		 Points to first char after last "/" of current dir part)
 19559                                  ;	[THISCDS] Points to CDS being used
 19560                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19561                                  ; Function:
 19562                                  ;	Make a new directory
 19563                                  ; Returns:
 19564                                  ;	Carry Clear
 19565                                  ;		No error
 19566                                  ;	Carry Set
 19567                                  ;	    AX is error code
 19568                                  ;		error_path_not_found
 19569                                  ;			Bad path (not in curr dir part if present)
 19570                                  ;		error_bad_curr_dir
 19571                                  ;			Bad path in current directory part of path
 19572                                  ;		error_access_denied
 19573                                  ;			Already exists, device name
 19574                                  ; DS preserved, Others destroyed
 19575                                  ;---------------------------------------------------------------------------
 19576                                  
 19577                                  ;hkn; called from path.asm. DS already set up.
 19578                                  
 19579                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19580                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 19581                                  
 19582                                  DOS_MKDIR:
 19583 00003134 E88CE1                  	call	TestNet
 19584 00003137 7313                    	JNC	short LOCAL_MKDIR
 19585                                  
 19586                                  ;IF NOT Installed
 19587                                  ;	transfer NET_MKDIR
 19588                                  ;ELSE
 19589                                  	;mov	ax,1103h
 19590 00003139 B80311                  	MOV	AX,(MultNET<<8)|3
 19591 0000313C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 19592                                  			; SS = DOS CS
 19593                                  			; SDA first filename pointer -> fully-qualified directory name
 19594                                  			; SDA CDS pointer -> current directory
 19595                                  			; Return: CF set on error, AX = DOS error code
 19596                                  			; CF clear if successful
 19597 0000313E C3                      	retn
 19598                                  ;ENDIF
 19599                                  
 19600                                  NODEACCERRJ:
 19601                                  	;mov	ax,5
 19602 0000313F B80500                  	MOV	AX,error_access_denied
 19603                                  _BadRet:
 19604 00003142 F9                      	STC
 19605                                  	;call	LCritDisk
 19606                                  	;retn
 19607                                  	; 18/12/2022
 19608 00003143 E95DE2                  	jmp	LCritDisk
 19609                                  
 19610                                  PATHNFJ:
 19611 00003146 E85AE2                  	call	LCritDisk
 19612 00003149 E9EBF9                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 19613                                  
 19614                                  LOCAL_MKDIR:
 19615 0000314C E839E2                  	call	ECritDisk
 19616                                  
 19617                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 19618                                  
 19619 0000314F 8C16[A005]              	MOV	[THISSFT+2],SS
 19620                                  
 19621                                  ;hkn; DOSDATA
 19622 00003153 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 19623                                  
 19624                                  ;  NOTE: Need WORD PTR because MASM takes type of
 19625                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 19626                                  
 19627                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 19628 00003159 C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 19629                                  				; make sure SHARER won't complain.
 19630                                  	;mov	al,10h
 19631 0000315F B010                    	MOV	AL,attr_directory
 19632 00003161 E8C218                  	call	MakeNode
 19633 00003164 72E0                    	JC	short PATHNFJ
 19634 00003166 83F803                  	CMP	AX,3
 19635 00003169 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 19636 0000316B C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 19637 0000316F C53E[E205]              	LDS	DI,[CURBUF]
 19638 00003173 29FE                    	SUB	SI,DI
 19639 00003175 56                      	PUSH	SI		; Pointer to dir_first
 19640                                  	; MSDOS 6.0
 19641                                  	;push	word [DI+8]
 19642 00003176 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 19643                                  	; MSDOS 3.3 & MSDOS 6.0
 19644                                  	;push	word [di+6]
 19645 00003179 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 19646 0000317C 16                      	push	ss
 19647 0000317D 1F                      	pop	ds
 19648 0000317E FF36[C205]              	PUSH	word [DIRSTART]	; Parent for .. entry
 19649 00003182 31C0                    	XOR	AX,AX
 19650 00003184 A3[C205]                	MOV	[DIRSTART],AX	; Null directory
 19651 00003187 E8CF17                  	call	NEWDIR
 19652 0000318A 7276                    	JC	short NODEEXISTSPOPDEL ; No room
 19653 0000318C E8890D                  	call	GETENT		; First entry
 19654 0000318F 7271                    	JC	short NODEEXISTSPOPDEL ; Screw up
 19655 00003191 C43E[E205]              	LES	DI,[CURBUF]
 19656                                  
 19657                                  	; MSDOS 6.0
 19658 00003195 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 19659                                  				 ;LB. if already dirty		    ;AN000;
 19660 0000319A 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 19661 0000319C E8702A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 19662                                  	
 19663                                  	; MSDOS 3.3 & MSDOS 6.0
 19664                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 19665 0000319F 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 19666                                  yesdirty5:
 19667                                  	;;add	di,16 ; MSDOS 3.3
 19668                                  	;add	di,20 ; MSDOS 6.0
 19669 000031A4 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 19670 000031A7 B82E20                  	MOV	AX,202EH	; ". "
 19671 000031AA 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 19672 000031AE E85118                  	call	SETDOTENT
 19673 000031B1 B82E2E                  	MOV	AX,2E2EH	; ".."
 19674 000031B4 5A                      	POP	DX		; Parent
 19675 000031B5 E84A18                  	call	SETDOTENT
 19676 000031B8 C42E[8A05]              	LES	BP,[THISDPB]
 19677                                  	;mov	byte [ALLOWED],18h
 19678 000031BC C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19679 000031C1 5A                      	POP	DX		; Entry sector
 19680                                  	; MSDOS 6.0
 19681 000031C2 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 19682                                  
 19683 000031C6 30C0                    	XOR	AL,AL		; Pre read
 19684 000031C8 E83E28                  	call	GETBUFFR
 19685 000031CB 7262                    	JC	short NODEEXISTSP
 19686 000031CD 8B16[C205]              	MOV	DX,[DIRSTART]
 19687 000031D1 C53E[E205]              	LDS	DI,[CURBUF]
 19688                                  	;or	byte [di+5],4
 19689 000031D5 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19690 000031D9 5E                      	POP	SI		; dir_first pointer
 19691 000031DA 01FE                    	ADD	SI,DI
 19692 000031DC 8914                    	MOV	[SI],DX
 19693 000031DE 31D2                    	XOR	DX,DX
 19694 000031E0 895402                  	MOV	[SI+2],DX	; Zero size
 19695 000031E3 895404                  	MOV	[SI+4],DX
 19696                                  DIRUP:
 19697                                  	; MSDOS 6.0
 19698 000031E6 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 19699                                  	;			 ;LB. if already dirty 		   ;AN000;
 19700 000031EA 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 19701 000031EC E8202A                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 19702                                  	
 19703                                  	; MSDOS 3.3 & MSDOS 6.0
 19704                                  	;or	byte [di+5],40h
 19705 000031EF 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 19706                                  yesdirty6:
 19707 000031F3 16                      	push	ss
 19708 000031F4 1F                      	pop	ds
 19709 000031F5 268A4600                	mov	al,[es:bp]
 19710                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 19711 000031F9 E80B29                  	call	FLUSHBUF
 19712                                  	;mov	ax,5
 19713 000031FC B80500                  	MOV	AX,error_access_denied
 19714                                  	;call	LCritDisk
 19715                                  	;retn
 19716                                  	; 18/12/2022
 19717 000031FF E9A1E1                  	jmp	LCritDisk
 19718                                  
 19719                                  NODEEXISTSPOPDEL:
 19720 00003202 5A                      	POP	DX		; Parent
 19721 00003203 5A                      	POP	DX		; Entry sector
 19722                                  	; MSDOS 6.0 
 19723 00003204 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 19724 00003208 C42E[8A05]              	LES	BP,[THISDPB]
 19725                                  	;mov	byte [ALLOWED],18h
 19726 0000320C C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19727 00003211 30C0                    	XOR	AL,AL		; Pre read
 19728 00003213 E8F327                  	call	GETBUFFR
 19729 00003216 7217                    	JC	short NODEEXISTSP
 19730 00003218 C53E[E205]              	LDS	DI,[CURBUF]
 19731                                  	;or	byte [di+5],4
 19732 0000321C 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19733 00003220 5E                      	POP	SI		; dir_first pointer
 19734 00003221 01FE                    	ADD	SI,DI
 19735                                  	;sub	si,1Ah ; 26
 19736 00003223 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 19737 00003226 C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 19738 00003229 E8BAFF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 19739                                  NODEEXISTS:
 19740 0000322C E910FF                  	JMP	NODEACCERRJ ; 10/08/2018
 19741                                  
 19742                                  NODEEXISTSP:
 19743 0000322F 5E                      	POP	SI		; Clean stack
 19744 00003230 EBFA                    	JMP	short NODEEXISTS
 19745                                  
 19746                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19747                                  
 19748                                  ;BREAK <DOS_ChDir -- Verify a directory>
 19749                                  ;----------------------------------------------------------------------------
 19750                                  ;
 19751                                  ; Procedure Name : DOS_ChDir
 19752                                  ;
 19753                                  ; Inputs:
 19754                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19755                                  ;		terminated)
 19756                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19757                                  ;		( = -1 if current dir not involved, else
 19758                                  ;		 Points to first char after last "/" of current dir part)
 19759                                  ;	[THISCDS] Points to CDS being used May not be NUL
 19760                                  ; Function:
 19761                                  ;	Validate the path for potential new current directory
 19762                                  ; Returns:
 19763                                  ;	NOTE:
 19764                                  ;	    [SATTRIB] is modified by this call
 19765                                  ;	Carry Clear
 19766                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 19767                                  ;		Caller must NOT set ID fields on a NET CDS.
 19768                                  ;	Carry Set
 19769                                  ;	    AX is error code
 19770                                  ;		error_path_not_found
 19771                                  ;			Bad path
 19772                                  ;		error_access_denied
 19773                                  ;			device or file name
 19774                                  ; DS preserved, Others destroyed
 19775                                  ;----------------------------------------------------------------------------
 19776                                  
 19777                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 19778                                  
 19779                                  ; 18/05/2019 - Retro DOS v4.0
 19780                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 19781                                  
 19782                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19783                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 19784                                  
 19785                                  DOS_CHDIR:
 19786 00003232 E88EE0                  	call	TestNet
 19787 00003235 7306                    	JNC	short LOCAL_CHDIR
 19788                                  
 19789                                  ;IF NOT Installed
 19790                                  ;	transfer NET_CHDIR
 19791                                  ;ELSE
 19792                                  	;mov	ax,1105h
 19793 00003237 B80511                  	MOV	AX,(MultNET<<8)|5
 19794 0000323A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 19795                                  			; SS = DOS CS
 19796                                  			; SDA first filename pointer -> fully-qualified directory name
 19797                                  			; SDA CDS pointer -> current directory
 19798                                  			; Return: CF set on error, AX = DOS error code
 19799                                  			; CF clear if successful
 19800 0000323C C3                      	retn
 19801                                  ;ENDIF
 19802                                  
 19803                                  LOCAL_CHDIR:
 19804 0000323D E848E1                  	call	ECritDisk
 19805                                  	; MSDOS 6.0
 19806                                  	;;test	word [es:di+43h],2000h
 19807                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 19808                                  	; 17/12/2022
 19809                                  	;test	byte [es:di+44h],20h
 19810 00003240 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 19811 00003245 7406                    	JZ	short nojoin		   ;PTM.
 19812                                  	;mov	word [es:di+49h], 0FFFFh
 19813 00003247 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 19814                                  nojoin:
 19815                                  	; MSDOS 3.3 & MSDOS 6.0
 19816 0000324D C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 19817                                  	;mov	byte [SATTRIB],16h
 19818 00003252 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19819                                  				; Dir calls can find these
 19820                                  ; DOS 3.3  6/24/86 FastOpen
 19821 00003257 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 19822 0000325C E8450D                  	call	GETPATH
 19823 0000325F 9C                      	PUSHF						;AN000;
 19824 00003260 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 19825 00003265 9D                      	POPF						;AN000;
 19826                                  ; DOS 3.3  6/24/86 FastOpen
 19827                                  
 19828                                  	; MSDOS 3.3
 19829                                  	;mov	byte [FastOpenFlg],0
 19830                                  	
 19831                                  	;mov	ax,3
 19832 00003266 B80300                  	MOV	AX,error_path_not_found
 19833 00003269 7207                    	JC	short ChDirDone
 19834 0000326B 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19835 0000326D 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 19836 00003271 F8                      	CLC
 19837                                  ChDirDone:
 19838                                  	;call	LCritDisk
 19839                                  	;retn
 19840                                  	; 18/12/2022
 19841 00003272 E92EE1                  	jmp	LCritDisk
 19842                                  
 19843                                  ;BREAK <DOS_RmDir -- Remove a directory>
 19844                                  ;----------------------------------------------------------------------------
 19845                                  ;
 19846                                  ; Procedure Name : DOS_RmDir
 19847                                  ;
 19848                                  ; Inputs:
 19849                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19850                                  ;		terminated)
 19851                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19852                                  ;		( = -1 if current dir not involved, else
 19853                                  ;		 Points to first char after last "/" of current dir part)
 19854                                  ;	[THISCDS] Points to CDS being used
 19855                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19856                                  ; Function:
 19857                                  ;	Remove a directory
 19858                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 19859                                  ; Returns:
 19860                                  ;	NOTE:
 19861                                  ;	    [SATTRIB] is modified by this call
 19862                                  ;	Carry Clear
 19863                                  ;		No error
 19864                                  ;	Carry Set
 19865                                  ;	    AX is error code
 19866                                  ;		error_path_not_found
 19867                                  ;			Bad path (not in curr dir part if present)
 19868                                  ;		error_bad_curr_dir
 19869                                  ;			Bad path in current directory part of path
 19870                                  ;		error_access_denied
 19871                                  ;			device or file name, root directory
 19872                                  ;			Bad directory ('.' '..' messed up)
 19873                                  ; DS preserved, Others destroyed
 19874                                  ;----------------------------------------------------------------------------
 19875                                  
 19876                                  ;hkn; called from path.asm. DS already set up.
 19877                                  
 19878                                  ; 18/05/2019 - Retro DOS v4.0
 19879                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 19880                                  
 19881                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19882                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 19883                                  
 19884                                  DOS_RMDIR:
 19885 00003275 E84BE0                  	call	TestNet
 19886 00003278 7306                    	JNC	short LOCAL_RMDIR
 19887                                  
 19888                                  ;IF NOT Installed
 19889                                  ;	transfer NET_RMDIR
 19890                                  ;ELSE
 19891                                  	;mov	ax,1101h
 19892 0000327A B80111                  	MOV	AX,(MultNET<<8)|1
 19893 0000327D CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 19894                                  			; SS = DOS CS
 19895                                  			; SDA first filename pointer -> fully-qualified directory name
 19896                                  			; SDA CDS pointer -> current directory
 19897                                  			; Return: CF set on error, AX = DOS error code
 19898                                  			; CF clear if successful
 19899 0000327F C3                      	retn
 19900                                  ;ENDIF
 19901                                  
 19902                                  LOCAL_RMDIR:
 19903 00003280 E805E1                  	call	ECritDisk
 19904 00003283 C606[4C03]00            	MOV	byte [NoSetDir],0
 19905                                  	;mov	byte [SATTRIB],16h
 19906 00003288 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19907                                  					; Dir calls can find these
 19908 0000328D E8140D                  	call	GETPATH
 19909 00003290 720C                    	JC	short NOPATH		; Path not found
 19910 00003292 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19911 00003294 8B3E[C205]              	MOV	DI,[DIRSTART]
 19912 00003298 09FF                    	OR	DI,DI			; Root ?
 19913 0000329A 750E                    	JNZ	short rmdir_get_buf	; No
 19914 0000329C EB09                    	JMP	SHORT NOTDIRPATH
 19915                                  
 19916                                  NOPATH:
 19917                                  	;mov	ax,3
 19918 0000329E B80300                  	MOV	AX,error_path_not_found
 19919 000032A1 E99EFE                  	JMP	_BadRet
 19920                                  
 19921                                  NOTDIRPATHPOP:
 19922 000032A4 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 19923 000032A5 58                      	POP	AX
 19924                                  NOTDIRPATHPOP2:
 19925 000032A6 58                      	POP	AX
 19926                                  NOTDIRPATH:
 19927 000032A7 E995FE                  	JMP	NODEACCERRJ
 19928                                  
 19929                                  rmdir_get_buf:
 19930 000032AA C53E[E205]              	LDS	DI,[CURBUF]
 19931 000032AE 29FB                    	SUB	BX,DI		; Compute true offset
 19932 000032B0 53                      	PUSH	BX		; Save entry pointer
 19933                                  	
 19934                                  	; MSDOS 6.0
 19935                                  	;push	word [di+8]
 19936 000032B1 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 19937                                  	
 19938                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19939                                  	;push	word [di+6]
 19940 000032B4 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 19941                                  
 19942                                  ;hkn; SS is DOSDATA
 19943                                  	;context DS
 19944 000032B7 16                      	push	ss
 19945 000032B8 1F                      	pop	ds
 19946                                  	;context ES
 19947 000032B9 16                      	push	ss
 19948 000032BA 07                      	pop	es
 19949                                  
 19950                                  ;hkn; NAME1 is in DOSDATA
 19951 000032BB BF[4B05]                	MOV	DI,NAME1
 19952 000032BE B03F                    	MOV	AL,'?'
 19953 000032C0 B90B00                  	MOV	CX,11
 19954 000032C3 F3AA                    	REP	STOSB
 19955 000032C5 30C0                    	XOR	AL,AL
 19956 000032C7 AA                      	STOSB				; Nul terminate it
 19957 000032C8 E86F0F                  	call	STARTSRCH		; Set search
 19958 000032CB E8470C                  	call	GETENTRY		; Get start of directory
 19959 000032CE 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 19960 000032D0 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19961 000032D4 89DE                    	MOV	SI,BX
 19962 000032D6 AD                      	LODSW
 19963                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 19964 000032D7 3D2E20                  	cmp	ax,202Eh ; ". "
 19965 000032DA 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 19966                                  	;add	si,30
 19967 000032DC 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 19968 000032DF AD                      	LODSW
 19969                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 19970                                  	;cmp	ax, '..'
 19971 000032E0 3D2E2E                  	cmp	ax,2E2Eh
 19972 000032E3 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 19973                                  
 19974                                  ;hkn; SS is DOSDATA
 19975                                  	;context DS
 19976 000032E5 16                      	push	ss
 19977 000032E6 1F                      	pop	ds
 19978 000032E7 C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 19979 000032ED E8250C                  	call	GETENTRY		; Get next entry
 19980 000032F0 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 19981                                  	;mov	byte [ATTRIB],16h
 19982 000032F2 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 19983 000032F7 E81A0B                  	call	SRCH			; Do a search
 19984 000032FA 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 19985 000032FC 803E[4A03]00            	CMP	byte [FAILERR],0
 19986 00003301 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 19987 00003303 C42E[8A05]              	LES	BP,[THISDPB]
 19988 00003307 8B1E[C205]              	MOV	BX,[DIRSTART]
 19989 0000330B E85A1C                  	call	RELEASE 		; Release data in sub dir
 19990 0000330E 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 19991 00003310 5A                      	POP	DX			; Sector # of entry
 19992 00003311 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 19993                                  	;mov	byte [ALLOWED],18h
 19994 00003315 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19995 0000331A 30C0                    	XOR	AL,AL			; Pre read
 19996 0000331C E8EA26                  	call	GETBUFFR		; Get sector back
 19997 0000331F 7285                    	JC	short NOTDIRPATHPOP2	; Screw up
 19998 00003321 C53E[E205]              	LDS	DI,[CURBUF]
 19999                                  	;or	byte [di+5],4
 20000 00003325 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20001 00003329 5B                      	POP	BX			; Pointer to start of entry
 20002 0000332A 01FB                    	ADD	BX,DI			; Corrected
 20003 0000332C C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20004                                  
 20005                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20006 0000332F 1E                      	PUSH	DS
 20007                                  
 20008                                  ;hkn; SS is DOSDATA
 20009                                  	;context DS
 20010 00003330 16                      	push	ss
 20011 00003331 1F                      	pop	ds
 20012                                  
 20013                                  	; MSDOS 6.0
 20014 00003332 E8FBF3                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20015                                  
 20016                                  ;	; MSDOS 3.3
 20017                                  ;_FastOpen_Delete:
 20018                                  ;	push	ax
 20019                                  ;	mov	si,[WFP_START]
 20020                                  ;	mov	bx,FastTable
 20021                                  ;	;mov	al,3  ; FONC_delete
 20022                                  ;	mov	al,FONC_delete
 20023                                  ;	call	far [BX+2]  ; FastTable+2
 20024                                  ;	pop	ax
 20025                                  
 20026 00003335 1F                      	POP	DS
 20027                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20028                                  
 20029 00003336 E9ADFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20030                                  
 20031                                  ;============================================================================
 20032                                  ; DISK.ASM, MSDOS 6.0, 1991
 20033                                  ;============================================================================
 20034                                  ; 23/07/2018 - Retro DOS v3.0 
 20035                                  ; 04/05/2019 - Retro DOS v4.0
 20036                                  
 20037                                  ;	TITLE	DISK - Disk utility routines
 20038                                  ;	NAME	Disk
 20039                                  
 20040                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20041                                  ;
 20042                                  ;	SWAPCON
 20043                                  ;	SWAPBACK
 20044                                  ;	DOS_READ
 20045                                  ;	DOS_WRITE
 20046                                  ;	get_io_sft
 20047                                  ;	DirRead
 20048                                  ;	FIRSTCLUSTER
 20049                                  ;	SET_BUF_AS_DIR
 20050                                  ;	FATSecRd
 20051                                  ;	DREAD
 20052                                  ;	CHECK_WRITE_LOCK
 20053                                  ;	CHECK_READ_LOCK
 20054                                  ;
 20055                                  ;	Revision history:
 20056                                  ;
 20057                                  ;		A000   version 4.00  Jan. 1988
 20058                                  ;
 20059                                  ;----------------------------------------------------------------------------
 20060                                  ;
 20061                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20062                                  ;		error happens, DOS retries the entire block assuming that
 20063                                  ;		zero characters were transferred. Modified the code to take
 20064                                  ;		into account the number of characters transfered before
 20065                                  ;		retrying the operation.
 20066                                  ;
 20067                                  ;----------------------------------------------------------------------------
 20068                                  ;
 20069                                  
 20070                                  ;Installed = TRUE
 20071                                  
 20072                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20073                                  
 20074                                  ; **** Drivers for file input from devices ****
 20075                                  ;----------------------------------------------------------------------------
 20076                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20077                                  ;   of handles 0 and 1
 20078                                  ;
 20079                                  ;   Inputs:	DS is DOSDATA
 20080                                  ;   Outputs:	CONSWAP is set to false.
 20081                                  ;   Registers modified: none
 20082                                  ;----------------------------------------------------------------------------
 20083                                  
 20084                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20085                                  
 20086                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20087                                  ; 04/05/2019 - Retro DOS v4.0
 20088                                  
 20089                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20090                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20091                                  
 20092                                  SWAPBACK:
 20093 00003339 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20094 0000333E C3                      	retn
 20095                                  
 20096                                  ;----------------------------------------------------------------------------
 20097                                  ;
 20098                                  ; Procedure Name : SWAPCON
 20099                                  ;
 20100                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20101                                  ;
 20102                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20103                                  ;		DS is DOSDATA
 20104                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20105                                  ;   Registers modified: none
 20106                                  ;--------------------------------------------------------------------------
 20107                                  
 20108                                  SWAPCON:
 20109                                  	; MSDOS 3.3
 20110                                  	;push	es
 20111                                  	;push	di
 20112                                  	;mov	byte [CONSWAP],1
 20113                                  	;les	di,[THISSFT]
 20114                                  	;mov	word [CONSFT],di
 20115                                  	;mov	word [CONSFT+2],es
 20116                                  	;pop	di
 20117                                  	;pop	es
 20118                                  	;retn
 20119                                  
 20120                                  	; MSDOS 6.0
 20121 0000333F C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20122 00003344 50                      	push	ax
 20123 00003345 A1[9E05]                	mov	ax,[THISSFT]
 20124 00003348 A3[E605]                	mov	[CONSFT],ax
 20125 0000334B A1[A005]                	mov	ax,[THISSFT+2]
 20126 0000334E A3[E805]                	mov	[CONSFT+2],ax
 20127 00003351 58                      	pop	ax
 20128 00003352 C3                      	retn
 20129                                  
 20130                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20131                                  ; 04/05/2019 - Retro DOS v4.0
 20132                                  
 20133                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20134                                  ;-----------------------------------------------------------------------------
 20135                                  ;
 20136                                  ; Inputs:
 20137                                  ;	ThisSFT set to the SFT for the file being used
 20138                                  ;	[DMAADD] contains transfer address
 20139                                  ;	CX = No. of bytes to read
 20140                                  ;	DS = DOSDATA
 20141                                  ; Function:
 20142                                  ;	Perform read operation
 20143                                  ; Outputs:
 20144                                  ;    Carry clear
 20145                                  ;	SFT Position and cluster pointers updated
 20146                                  ;	CX = No. of bytes read
 20147                                  ;	ES:DI point to SFT
 20148                                  ;    Carry set
 20149                                  ;	AX is error code
 20150                                  ;	CX = 0
 20151                                  ;	ES:DI point to SFT
 20152                                  ; DS preserved, all other registers destroyed
 20153                                  ;
 20154                                  ;-----------------------------------------------------------------------------
 20155                                  
 20156                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20157                                  
 20158                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20159                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20160                                  
 20161                                  DOS_READ:
 20162 00003353 C43E[9E05]              	LES	DI,[THISSFT]
 20163                                  
 20164                                  ; Verify that the sft has been opened in a mode that allows reading.
 20165                                  
 20166                                  	;mov	al,[es:di+2]
 20167 00003357 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20168                                  	;and	al,0Fh
 20169 0000335B 240F                    	AND	AL,access_mask
 20170                                  	;cmp	al,1
 20171 0000335D 3C01                    	CMP	AL,open_for_write
 20172 0000335F 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20173 00003361 E90306                  	jmp	SET_ACC_ERR
 20174                                  
 20175                                  READ_NO_MODE:
 20176 00003364 E8DC04                  	call	SETUP
 20177 00003367 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20178 00003369 E870DF                  	call	IsSFTNet
 20179 0000336C 7408                    	JZ	short LOCAL_READ
 20180                                  
 20181                                  ;IF NOT Installed
 20182                                  ;	transfer NET_READ
 20183                                  ;ELSE
 20184                                  	;mov	ax,1108h
 20185 0000336E B80811                  	MOV	AX,(MultNET<<8)|8
 20186 00003371 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20187                                  			; ES:DI -> SFT
 20188                                  			; SFT DPB field -> DPB of drive containing file
 20189                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20190                                  			; Return: CF set on error, CX = bytes read
 20191 00003373 C3                      	retn
 20192                                  ;ENDIF
 20193                                  
 20194                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20195                                  ; except return immediately.
 20196                                  
 20197                                  NoIORet:
 20198 00003374 F8                      	CLC
 20199 00003375 C3                      	retn
 20200                                  
 20201                                  LOCAL_READ:
 20202                                  	;test	word [es:di+5],80h
 20203                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20204 00003376 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20205 0000337B 750E                    	JNZ	short READDEV
 20206                                  
 20207                                  	;mov	byte [EXTERR_LOCUS],2
 20208 0000337D C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20209 00003382 E803E0                  	call	ECritDisk
 20210 00003385 E89C05                  	call	DISKREAD
 20211                                  
 20212                                  critexit:
 20213                                  	;call	LCritDisk
 20214                                  	;retn
 20215                                  	; 16/12/2022
 20216 00003388 E918E0                  	jmp	LCritDisk
 20217                                  
 20218                                  ; We are reading from a device. Examine the status of the device to see if we
 20219                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20220                                  ; null device, we can safely indicate no transfer.
 20221                                  
 20222                                  READDEV:
 20223                                  	;mov	byte [EXTERR_LOCUS],4
 20224 0000338B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20225                                  	;mov	bl,[es:di+5]
 20226 00003390 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20227 00003394 C43E[2C03]              	LES	DI,[DMAADD]
 20228                                  	;test	bl,40h
 20229 00003398 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20230 0000339B 7407                    	JZ	short ENDRDDEVJ3
 20231                                  	;test	bl,4
 20232 0000339D F6C304                  	test	BL,devid_device_null	; NUL device?
 20233 000033A0 7405                    	JZ	short TESTRAW 		; NO
 20234 000033A2 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20235                                  ENDRDDEVJ3:
 20236                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20237                                  	;JMP	short ENDRDDEVJ2
 20238                                  	; 16/12/2022
 20239 000033A4 E95601                  	jmp	ENDRDDEV ; 04/05/2019
 20240                                  
 20241                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20242                                  ; bizarre std_con_string_input.
 20243                                  
 20244                                  TESTRAW:
 20245                                  	;test	bl,20h
 20246 000033A7 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20247 000033AA 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20248                                  	;test	bl,1
 20249 000033AC F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20250 000033AF 7461                    	JZ	short NOTRDCON
 20251 000033B1 E97E01                  	JMP	READCON
 20252                                  
 20253                                  DVRDRAW:
 20254 000033B4 06                      	PUSH	ES
 20255 000033B5 1F                      	POP	DS			; Xaddr to DS:DI
 20256                                  
 20257                                  	; 04/05/2019 - Retro DOS v4.0
 20258                                  
 20259                                  	; MSDOS 6.0
 20260                                  ;SR;
 20261                                  ;Check for win386 presence -- if present, do polled read of characters
 20262                                  
 20263 000033B6 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20264 000033BC 7408                    	jz	short ReadRawRetry	;not present
 20265 000033BE F6C301                  	test	bl,devid_device_con_in	;is it console device
 20266 000033C1 7403                    	jz	short ReadRawRetry	;no, do normal read
 20267 000033C3 E9B900                  	jmp	do_polling		;yes, do win386 polling loop
 20268                                  
 20269                                  ReadRawRetry:
 20270 000033C6 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 20271 000033C8 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20272 000033CA 89C2                    	MOV	DX,AX			; Start at 0
 20273 000033CC E89C13                  	call	SETREAD
 20274 000033CF 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20275                                  
 20276                                  ;hkn; SS override
 20277 000033D0 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20278 000033D5 E81A13                  	call	DEVIOCALL
 20279 000033D8 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20280 000033DA B486                    	MOV	AH,86H			; Read error
 20281                                  
 20282                                  ;hkn; SS override
 20283 000033DC 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20284                                  	; MSDOS 3.3
 20285                                  	;test	di,8000h
 20286                                  	;jz	short CRDROK
 20287                                  	; MSDOS 6.0
 20288 000033E1 09FF                    	or	di,di
 20289 000033E3 7923                    	jns	short CRDROK		; no errors
 20290                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20291 000033E5 E8991F                  	call	CHARHARD
 20292 000033E8 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 20293                                  
 20294                                  	; 04/05/2019
 20295                                  
 20296                                  	; MSDOS 6.0
 20297 000033EA 36033E[6C03]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20298 000033EF 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20299                                  
 20300                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20301 000033F4 08C0                    	OR	AL,AL
 20302 000033F6 7410                    	JZ	short CRDROK		; Ignore
 20303 000033F8 3C03                    	CMP	AL,3
 20304 000033FA 7403                    	JZ	short CRDFERR 		; fail.
 20305 000033FC 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20306 000033FD EBC7                    	JMP	short ReadRawRetry	; Retry
 20307                                  
 20308                                  ; We have encountered a device-driver error. We have informed the user of it
 20309                                  ; and he has said for us to fail the system call.
 20310                                  
 20311                                  CRDFERR:
 20312 000033FF 5F                      	POP	DI			; Clean stack
 20313                                  DEVIOFERR:
 20314                                  
 20315                                  ;hkn; SS override
 20316 00003400 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20317 00003405 E95D05                  	jmp	SET_ACC_ERR_DS
 20318                                  
 20319                                  CRDROK:
 20320 00003408 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20321 00003409 89D7                    	MOV	DI,DX
 20322                                  
 20323                                  ;hkn; SS override
 20324 0000340B 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20325                                  	;JMP	SHORT ENDRDDEVJ3
 20326                                  	; 16/12/2022
 20327 00003410 EB6B                    	jmp	short ENDRDDEVJ2
 20328                                  
 20329                                  ; We are going to do a cooked read on some character device. There is a
 20330                                  ; problem here, what does the data look like? Is it a terminal device, line
 20331                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20332                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20333                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20334                                  ; included in data). this "simulates" the way con works in cooked mode
 20335                                  ; reading one line at a time. With file data, however, the lines will look
 20336                                  ; like, LF line CR. This is a little weird.
 20337                                  
 20338                                  NOTRDCON:
 20339 00003412 8CC0                    	MOV	AX,ES
 20340 00003414 8ED8                    	MOV	DS,AX
 20341 00003416 89FB                    	MOV	BX,DI
 20342 00003418 31D2                    	XOR	DX,DX
 20343 0000341A 89D0                    	MOV	AX,DX
 20344 0000341C 51                      	PUSH	CX
 20345 0000341D B90100                  	MOV	CX,1
 20346 00003420 E84813                  	call	SETREAD
 20347 00003423 59                      	POP	CX
 20348                                  
 20349                                  ;hkn; SS override
 20350 00003424 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20351                                  	;lds	si,[si+7]
 20352 00003429 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20353                                  DVRDLP:
 20354 0000342C E8321D                  	call	DSKSTATCHK
 20355 0000342F E8C312                  	call	DEVIOCALL2
 20356 00003432 57                      	PUSH	DI		; Save "count" done
 20357 00003433 B486                    	MOV	AH,86H
 20358                                  
 20359                                  ;hkn; SS override
 20360 00003435 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20361                                  	
 20362                                  	; MSDOS 3.3
 20363                                  	;test	di,8000h
 20364                                  	;jz	short CRDOK
 20365                                  	; MSDOS 6.0
 20366 0000343A 09FF                    	or	di,di
 20367 0000343C 7917                    	jns	short CRDOK
 20368                                  	
 20369 0000343E E8401F                  	call	CHARHARD
 20370 00003441 5F                      	POP	DI
 20371                                  
 20372                                  ;hkn; SS override
 20373 00003442 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20374 00003449 3C01                    	CMP	AL,1
 20375 0000344B 74DF                    	JZ	short DVRDLP		;Retry
 20376 0000344D 3C03                    	CMP	AL,3
 20377 0000344F 74AF                    	JZ	short DEVIOFERR		; FAIL
 20378 00003451 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20379 00003453 EB12                    	JMP	SHORT DVRDIGN
 20380                                  
 20381                                  CRDOK:
 20382 00003455 5F                      	POP	DI
 20383                                  
 20384                                  ;hkn; SS override
 20385 00003456 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20386                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20387 0000345C 751F                    	JNZ	short ENDRDDEVJ2
 20388                                  	; 16/12/2022
 20389                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20390                                  
 20391 0000345E 1E                      	PUSH	DS
 20392                                  
 20393                                  ;hkn; SS override
 20394 0000345F 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20395 00003464 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20396 00003466 1F                      	POP	DS
 20397                                  DVRDIGN:
 20398                                  
 20399                                  ;hkn; SS override
 20400 00003467 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20401 0000346C 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20402 00003473 47                      	INC	DI			; Next character
 20403 00003474 3C1A                    	CMP	AL,1Ah			; ^Z?
 20404                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20405 00003476 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20406                                  	; 16/12/2022
 20407                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20408 00003478 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20409 0000347A E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20410 0000347C 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20411                                  					;  AX=FFFF which is not likely
 20412                                  ENDRDDEVJ2:
 20413                                  	; 16/12/2022
 20414                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20415                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20416 0000347D EB7E                    	jmp	ENDRDDEV
 20417                                  
 20418                                  	; 04/05/2019
 20419                                  
 20420                                  	; MSDOS 6.0
 20421                                  ;SR;
 20422                                  ;Polling code for raw read on CON when WIN386 is present
 20423                                  ;
 20424                                  ;At this point -- ds:di is transfer address
 20425                                  ;		  cx is count
 20426                                  
 20427                                  do_polling:
 20428 0000347F 89FB                    	mov	bx,di			;ds:bx is Xfer address
 20429 00003481 31C0                    	xor	ax,ax
 20430 00003483 89C2                    	mov	dx,ax
 20431 00003485 E8E312                  	call	SETREAD			;prepare device packet
 20432                                  
 20433                                  do_io:
 20434                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 20435                                  
 20436 00003488 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 20437 0000348D 1E                      	push	ds
 20438 0000348E 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 20439 00003493 E85C12                  	call	DEVIOCALL		;call device driver
 20440 00003496 1F                      	pop	ds
 20441                                  	
 20442                                  	;test	word [es:bx+3],8000h
 20443                                  	; 16/12/2022
 20444                                  	;test	byte [es:bx+4],80h
 20445 00003497 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 20446                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 20447 0000349C 7413                    	jz	short check_busy	;no
 20448                                  
 20449 0000349E 1E                      	push	ds
 20450 0000349F 89FA                    	mov	dx,di
 20451                                  
 20452                                  invoke_charhard:	; 07/02/2024
 20453                                  	;invoke charhard		;invoke int 24h handler
 20454 000034A1 E8DD1E                  	call	CHARHARD
 20455 000034A4 89D7                    	mov	di,dx
 20456 000034A6 08C0                    	or	al,al
 20457 000034A8 744D                    	jz	short pop_done_read	;ignore by user, assume read done
 20458 000034AA 3C03                    	cmp	al,3
 20459 000034AC 7438                    	jz	short devrderr		;user asked to fail
 20460 000034AE 1F                      	pop	ds
 20461 000034AF EBD7                    	jmp	short do_io		;user asked to retry
 20462                                  
 20463                                  check_busy:
 20464                                  	;test	word [es:bx+3],200h
 20465                                  	; 16/12/2022
 20466 000034B1 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 20467                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 20468 000034B6 7537                    	jnz	short no_char		;yes, no character available
 20469                                  
 20470                                  ;Character is available. Read in 1 character at a time until all characters
 20471                                  ;are read in or no character is available
 20472                                  
 20473 000034B8 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 20474 000034BD 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 20475 000034C3 1E                      	push	ds
 20476 000034C4 36C536[9E05]            	lds	si,[ss:THISSFT]
 20477 000034C9 E82612                  	call	DEVIOCALL
 20478                                  
 20479 000034CC 89FA                    	mov	dx,di
 20480 000034CE B486                    	mov	ah,86h
 20481                                  	;mov	di,[es:bx+3]
 20482 000034D0 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 20483 000034D4 F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 20484                                  	;jz	short next_char		;no,read next character
 20485                                  	; 07/02/2024
 20486 000034D8 75C7                    	jnz	short invoke_charhard
 20487                                  
 20488                                  ; 07/02/2024
 20489                                  %if 0
 20490                                  	;invoke	charhard		;invoke int 24h handler
 20491                                  	call	CHARHARD
 20492                                  	mov	di,dx			;restore di
 20493                                  	or	al,al			;
 20494                                  	jz	short pop_done_read	;ignore by user,assume read is done
 20495                                  	cmp	al,3
 20496                                  	jz	short devrderr		;user issued a 'fail',indicate error
 20497                                  	pop	ds
 20498                                  	jmp	short do_io		;user issued a retry
 20499                                  %endif
 20500                                  
 20501                                  next_char:
 20502 000034DA 1F                      	pop	ds
 20503 000034DB 89D7                    	mov	di,dx
 20504 000034DD 49                      	dec	cx			;decrement count
 20505 000034DE E318                    	jcxz	done_read		;all characters read in
 20506 000034E0 26FF470E                	inc	word [es:bx+14]		;update transfer address
 20507 000034E4 EBA2                    	jmp	short do_io		;read next character in
 20508                                  
 20509                                  devrderr:
 20510 000034E6 5F                      	pop	di			;discard segment address
 20511 000034E7 36C43E[9E05]            	les	di,[ss:THISSFT]
 20512                                  	;transfer SET_ACC_ERR_DS	;indicate error
 20513 000034EC E97604                  	jmp     SET_ACC_ERR_DS
 20514                                  
 20515                                  no_char:
 20516                                  ;Since no character is available, we let win386 switch the VM out
 20517                                  
 20518 000034EF 50                      	push	ax
 20519 000034F0 B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 20520 000034F2 CD2A                    	int	2Ah			;indicate idle to WIN386
 20521                                  
 20522                                  ;When control returns from WIN386, we continue the raw read
 20523                                  
 20524 000034F4 58                      	pop	ax
 20525 000034F5 EB91                    	jmp	do_io
 20526                                  
 20527                                  pop_done_read:
 20528 000034F7 1F                      	pop	ds
 20529                                  done_read:
 20530 000034F8 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 20531                                  
 20532                                  	; 16/12/2022
 20533                                  
 20534                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20535                                  	;jmp	ENDRDDEV ; 04/05/2019
 20536                                  
 20537                                  	; 04/05/2019 - Retro DOS v4.0
 20538                                  ENDRDDEV:
 20539 000034FD 16                      	push	ss
 20540 000034FE 1F                      	pop	ds
 20541 000034FF EB1F                    	jmp	short endrddev1
 20542                                  
 20543                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20544                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20545                                  
 20546                                  TRANBUF:
 20547 00003501 AC                      	LODSB
 20548 00003502 AA                      	STOSB
 20549 00003503 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 20550 00003505 7503                    	JNZ	short NORMCH
 20551 00003507 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 20552                                  NORMCH:
 20553 0000350A 3C0A                    	CMP	AL,c_LF ; 0Ah
 20554 0000350C E0F3                    	LOOPNZ	TRANBUF
 20555 0000350E 7507                    	JNZ	short ENDRDCON
 20556 00003510 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 20557 00003512 E8CEE1                  	call	OUTT		; Transmit linefeed
 20558 00003515 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 20559                                  ENDRDCON:
 20560                                  ;hkn; SS is DOSDATA
 20561 00003517 16                      	push	ss
 20562 00003518 1F                      	pop	ds
 20563 00003519 E81DFE                  	CALL	SWAPBACK
 20564 0000351C 8936[2200]              	MOV	[CONTPOS],SI
 20565                                  
 20566                                  	; 16/12/2022
 20567                                  ;ENDRDDEV:
 20568                                  ;;hkn; SS is DOSDATA
 20569                                  ;	push	ss
 20570                                  ;	pop	ds
 20571                                  endrddev1:	; 04/05/2019
 20572 00003520 893E[B805]              	MOV	[NEXTADD],DI
 20573 00003524 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20574 00003526 C43E[9E05]              	LES	DI,[THISSFT]
 20575                                  	;and	byte [es:di+5],0BFh
 20576 0000352A 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 20577                                  				; Mark as no more data available
 20578                                  SETSFTC:
 20579                                  	; 31/07/2019
 20580                                  	;call	SETSFT
 20581                                  	;retn
 20582 0000352F E9C704                  	jmp	SETSFT
 20583                                  
 20584                                  ; 16/12/2022
 20585                                  %if 0
 20586                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20587                                  ENDRDDEV:
 20588                                  ;hkn; SS is DOSDATA
 20589                                  	push	ss
 20590                                  	pop	ds
 20591                                  	MOV	[NEXTADD],DI
 20592                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20593                                  	LES	DI,[THISSFT]
 20594                                  	;and	byte [es:di+5],0BFh
 20595                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 20596                                  				; Mark as no more data available
 20597                                  SETSFTC:
 20598                                  	;call	SETSFT
 20599                                  	;retn
 20600                                  	jmp	SETSFT	
 20601                                  %endif
 20602                                  
 20603                                  READCON:
 20604 00003532 E80AFE                  	CALL	SWAPCON
 20605 00003535 8B36[2200]              	MOV	SI,[CONTPOS]
 20606 00003539 09F6                    	OR	SI,SI
 20607 0000353B 75C4                    	JNZ	short TRANBUF
 20608 0000353D 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 20609 00003542 7406                    	JZ	short GETBUF
 20610 00003544 C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 20611                                  GETBUF:
 20612 0000354A 51                      	PUSH	CX
 20613 0000354B 06                      	PUSH	ES
 20614 0000354C 57                      	PUSH	DI
 20615                                  
 20616                                  ;hkn; CONBUF is in DOSDATA
 20617 0000354D BA[7B02]                	MOV	DX,CONBUF
 20618                                  
 20619 00003550 E805DF                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 20620 00003553 5F                      	POP	DI
 20621 00003554 07                      	POP	ES
 20622 00003555 59                      	POP	CX
 20623                                  
 20624                                  ;hkn; CONBUF is in DOSDATA
 20625 00003556 BE[7D02]                	MOV	SI,CONBUF+2
 20626                                  
 20627 00003559 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 20628 0000355C 75A3                    	JNZ	short TRANBUF
 20629 0000355E B01A                    	MOV	AL,1AH
 20630 00003560 AA                      	STOSB
 20631 00003561 4F                      	DEC	DI
 20632 00003562 B00A                    	MOV	AL,c_LF
 20633 00003564 E87CE1                  	call	OUTT		; Send linefeed
 20634 00003567 31F6                    	XOR	SI,SI
 20635 00003569 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 20636                                  
 20637                                  ; 24/07/2018 - Retro DOS v3.0
 20638                                  
 20639                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 20640                                  ;---------------------------------------------------------------------------
 20641                                  ;
 20642                                  ; Procedure Name : DOS_WRITE
 20643                                  ;
 20644                                  ; Inputs:
 20645                                  ;	ThisSFT set to the SFT for the file being used
 20646                                  ;	[DMAADD] contains transfer address
 20647                                  ;	CX = No. of bytes to write
 20648                                  ; Function:
 20649                                  ;	Perform write operation
 20650                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 20651                                  ;		to current sf_position
 20652                                  ; Outputs:
 20653                                  ;    Carry clear
 20654                                  ;	SFT Position and cluster pointers updated
 20655                                  ;	CX = No. of bytes written
 20656                                  ;	ES:DI point to SFT
 20657                                  ;    Carry set
 20658                                  ;	AX is error code
 20659                                  ;	CX = 0
 20660                                  ;	ES:DI point to SFT
 20661                                  ; DS preserved, all other registers destroyed
 20662                                  ;---------------------------------------------------------------------------
 20663                                  
 20664                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 20665                                  ;hkn; point to DOSDATA.
 20666                                  
 20667                                  ; 04/05/2019 - Retro DOS v4.0
 20668                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 20669                                  
 20670                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20671                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 20672                                  
 20673                                  DOS_WRITE:
 20674 0000356B C43E[9E05]              	LES	DI,[THISSFT]
 20675                                  	;mov	al,[ES:DI+2]
 20676 0000356F 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20677                                  	;and	al,0Fh
 20678 00003573 240F                    	AND	AL,access_mask
 20679                                  	;cmp	al,0
 20680 00003575 3C00                    	CMP	AL,open_for_read
 20681 00003577 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 20682                                  BadMode:
 20683 00003579 E9EB03                  	jmp	SET_ACC_ERR
 20684                                  
 20685                                  ; NOTE: The following check for writting to a Read Only File is performed
 20686                                  ;	    ONLY on FCBs!!!!
 20687                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 20688                                  ;	    of a read only file which can then be written to.
 20689                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 20690                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 20691                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 20692                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 20693                                  ;	    to a read-only file.
 20694                                  
 20695                                  Check_FCB_RO:
 20696                                  	;;test	word [es:di+2],8000h
 20697                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 20698                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 20699                                  	
 20700                                  	;test	byte [es:di+3],80h
 20701 0000357C 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 20702 00003581 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 20703                                  
 20704                                  	;test	byte [es:di+4],1
 20705 00003583 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 20706 00003588 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 20707                                  WRITE_NO_MODE:
 20708 0000358A E8B602                  	call	SETUP
 20709 0000358D E84CDD                  	call	IsSFTNet
 20710 00003590 7406                    	JZ	short LOCAL_WRITE
 20711                                  
 20712                                  ;IF NOT Installed
 20713                                  ;	transfer NET_WRITE
 20714                                  ;ELSE
 20715                                  	;mov	ax,1109h
 20716 00003592 B80911                  	MOV	AX,(MultNET<<8)|9
 20717 00003595 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 20718                                  			; ES:DI -> SFT
 20719                                  			; SFT DPB field -> DPB of drive containing file
 20720                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20721                                  			; Return: CF set on error, CX = bytes written
 20722 00003597 C3                      	retn
 20723                                  ;ENDIF
 20724                                  
 20725                                  LOCAL_WRITE:
 20726                                  	;;test	word [es:di+5],80h
 20727                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20728                                  	;jnz	short WRTDEV
 20729                                  
 20730                                  	;test	byte [es:di+5],80h
 20731 00003598 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 20732 0000359D 756E                    	jnz	short WRTDEV
 20733                                  
 20734                                  	;mov	byte [EXTERR_LOCUS],2
 20735 0000359F C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20736 000035A4 E8E1DD                  	call	ECritDisk
 20737                                  
 20738 000035A7 E80605                  	call	DISKWRITE
 20739                                  
 20740                                  	; 04/05/2019 - Retro DOS v4.0
 20741                                  
 20742                                  	; MSDOS 6.0
 20743                                  ; Extended Open
 20744 000035AA 7210                    	JC	short nocommit
 20745                                  	
 20746 000035AC C43E[9E05]              	LES	DI,[THISSFT]
 20747                                  	
 20748                                  	;;test	word [ES:DI+2],4000h
 20749                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 20750                                  	;JZ	short nocommit
 20751                                  	
 20752                                  	;test	byte [ES:DI+3],40h
 20753 000035B0 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 20754 000035B5 7405                    	JZ	short nocommit
 20755                                  	
 20756 000035B7 51                      	PUSH	CX
 20757 000035B8 E82AFB                  	call	DOS_COMMIT
 20758 000035BB 59                      	POP	CX
 20759                                  nocommit:
 20760                                  ; Extended Open
 20761                                  	;call	LCritDisk
 20762                                  	;retn
 20763                                  	; 18/12/2022
 20764 000035BC E9E4DD                  	jmp	LCritDisk
 20765                                  
 20766                                  DVWRTRAW:
 20767 000035BF 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20768 000035C1 E8DA11                  	call	SETWRITE
 20769 000035C4 1E                      	PUSH	DS			; Save seg of transfer
 20770                                  
 20771                                  ;hkn; SS override
 20772 000035C5 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20773 000035CA E82511                  	call	DEVIOCALL		; DS:SI -> DEVICE
 20774                                  
 20775 000035CD 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 20776 000035CF B487                    	MOV	AH,87H
 20777                                  
 20778                                  ;hkn; SS override
 20779 000035D1 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20780                                  
 20781                                  	; MSDOS 3.3
 20782                                  	;test	di,8000h
 20783                                  	;jz	short CWRTROK
 20784                                  
 20785                                  	; MSDOS 6.0
 20786 000035D6 09FF                    	or	di,di
 20787 000035D8 7920                    	jns	short CWRTROK
 20788                                  	
 20789                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20790 000035DA E8A41D                  	call	CHARHARD
 20791                                  
 20792                                  	; 04/05/2019  - Retro DOS v4.0
 20793                                  
 20794                                  	; MSDOS 6.0
 20795 000035DD 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 20796 000035E2 89D3                    	mov	bx,dx			; number of chars xferred	M065
 20797 000035E4 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 20798 000035E9 89DF                    	mov	di,bx			;				M065
 20799                                  	
 20800                                  	; MSDOS 3.3
 20801                                  	;MOV	BX,DX			; Recall transfer addr		M065
 20802                                  
 20803                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20804 000035EB 08C0                    	OR	AL,AL
 20805 000035ED 740B                    	JZ	short CWRTROK 		; Ignore
 20806 000035EF 3C03                    	CMP	AL,3
 20807 000035F1 7403                    	JZ	short CWRFERR
 20808 000035F3 1F                      	POP	DS			; Recover saved seg of transfer
 20809 000035F4 EBC9                    	JMP	short DVWRTRAW		; Try again
 20810                                  CWRFERR:
 20811 000035F6 58                      	POP	AX			; Chuck saved seg of transfer
 20812 000035F7 E905FE                  	JMP	CRDFERR 		; Will pop one more stack element
 20813                                  CWRTROK:
 20814 000035FA 58                      	POP	AX			; Chuck saved seg of transfer
 20815 000035FB 1F                      	POP	DS
 20816 000035FC A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 20817                                  ENDWRDEV:
 20818 000035FF C43E[9E05]              	LES	DI,[THISSFT]
 20819 00003603 89C1                    	MOV	CX,AX
 20820                                  	;call	ADDREC
 20821                                  	;retn
 20822                                  	; 16/12/2022
 20823                                  	; 10/06/2019
 20824 00003605 E91204                  	jmp	ADDREC
 20825                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20826                                  	;call	ADDREC
 20827                                  	;retn
 20828                                  	
 20829                                  WRTNUL:
 20830 00003608 89CA                    	MOV	DX,CX			; Entire transfer done
 20831                                  WRTCOOKJ:
 20832 0000360A E98D00                  	JMP	WRTCOOKDONE
 20833                                  WRTDEV:
 20834                                  	;mov	byte [EXTERR_LOCUS],4
 20835 0000360D C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20836                                  	;or	byte [es:di+5],40h
 20837 00003612 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 20838                                  					; Reset EOF for input
 20839                                  	;mov	bl,[es:di+5]
 20840 00003617 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20841 0000361B 31C0                    	XOR	AX,AX
 20842 0000361D E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 20843 0000361F 1E                      	PUSH	DS
 20844 00003620 88D8                    	MOV	AL,BL
 20845 00003622 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 20846 00003626 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 20847 00003628 31D2                    	XOR	DX,DX			; Set starting point
 20848                                  	;test	al,20h
 20849 0000362A A820                    	test	AL,devid_device_raw	; Raw?
 20850                                  	;JZ	short TEST_DEV_CON
 20851                                  	;JMP	DVWRTRAW
 20852                                  	; 16/12/2022
 20853 0000362C 7591                    	jnz	short DVWRTRAW
 20854                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20855                                  	;JZ	short TEST_DEV_CON
 20856                                  	;JMP	short DVWRTRAW
 20857                                  
 20858                                  TEST_DEV_CON:
 20859                                  	;test	al,2
 20860 0000362E A802                    	test	AL,devid_device_con_out ; Console output device?
 20861 00003630 756E                    	jnz	short WRITECON
 20862                                  	;test	al,4
 20863 00003632 A804                    	test	AL,devid_device_null
 20864 00003634 75D2                    	JNZ	short WRTNUL
 20865 00003636 89D0                    	MOV	AX,DX
 20866 00003638 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 20867 0000363B 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 20868 0000363D 51                      	PUSH	CX
 20869 0000363E B90100                  	MOV	CX,1
 20870 00003641 E85A11                  	call	SETWRITE
 20871 00003644 59                      	POP	CX
 20872                                  
 20873                                  ;hkn; SS override
 20874 00003645 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20875                                  ;
 20876                                  ;SR; Removed X25 support from here
 20877                                  ;
 20878                                  	;lds	si,[si+7]
 20879 0000364A C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20880                                  DVWRTLP:
 20881 0000364D E8111B                  	call	DSKSTATCHK
 20882 00003650 E8A210                  	call	DEVIOCALL2
 20883 00003653 57                      	PUSH	DI
 20884 00003654 B487                    	MOV	AH,87H
 20885                                  
 20886                                  ;hkn; SS override
 20887 00003656 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20888                                  	
 20889                                  	; MSDOS 3.3
 20890                                  	;test	di,8000h
 20891                                  	;jz	short CWROK
 20892                                  
 20893                                  	; MSDOS 6.0
 20894 0000365B 09FF                    	or	di,di
 20895 0000365D 7916                    	jns	short CWROK
 20896                                  	
 20897                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20898 0000365F E81F1D                  	call	CHARHARD
 20899 00003662 5F                      	POP	DI
 20900                                  
 20901                                  ;hkn; SS override
 20902 00003663 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20903 0000366A 3C01                    	CMP	AL,1
 20904 0000366C 74DF                    	JZ	short DVWRTLP 	; Retry
 20905 0000366E 08C0                    	OR	AL,AL
 20906 00003670 740C                    	JZ	short DVWRTIGN	; Ignore
 20907                                  	; 10/08/2018
 20908 00003672 E98AFD                  	JMP	CRDFERR 	; Fail, pops one stack element
 20909                                  CWROK:
 20910 00003675 5F                      	POP	DI
 20911                                  
 20912                                  ;hkn; SS override
 20913 00003676 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 20914 0000367C 741C                    	JZ	short WRTCOOKDONE
 20915                                  DVWRTIGN:
 20916 0000367E 42                      	INC	DX
 20917                                  
 20918                                  ;hkn; SS override for CALLXAD
 20919 0000367F 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 20920 00003684 47                      	INC	DI
 20921 00003685 1E                      	PUSH	DS
 20922 00003686 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20923 0000368B 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 20924 0000368E 1F                      	POP	DS
 20925 0000368F 7409                    	JZ	short WRTCOOKDONE
 20926                                  
 20927                                  ;hkn; SS override
 20928 00003691 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20929 00003698 E2B3                    	LOOP	DVWRTLP
 20930                                  WRTCOOKDONE:
 20931 0000369A 89D0                    	MOV	AX,DX
 20932 0000369C 1F                      	POP	DS
 20933 0000369D E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 20934                                  
 20935                                  WRITECON:
 20936 000036A0 1E                      	PUSH	DS
 20937                                  
 20938                                  ;hkn; SS is DOSDATA
 20939 000036A1 16                      	push	ss
 20940 000036A2 1F                      	pop	ds
 20941 000036A3 E899FC                  	CALL	SWAPCON
 20942 000036A6 1F                      	POP	DS
 20943 000036A7 89DE                    	MOV	SI,BX
 20944 000036A9 51                      	PUSH	CX
 20945                                  WRCONLP:
 20946 000036AA AC                      	LODSB
 20947 000036AB 3C1A                    	CMP	AL,1Ah		; ^Z?
 20948 000036AD 7405                    	JZ	short CONEOF
 20949 000036AF E831E0                  	call	OUTT
 20950 000036B2 E2F6                    	LOOP	WRCONLP
 20951                                  CONEOF:
 20952 000036B4 58                      	POP	AX			; Count
 20953 000036B5 29C8                    	SUB	AX,CX			; Amount actually written
 20954 000036B7 1F                      	POP	DS
 20955 000036B8 E87EFC                  	CALL	SWAPBACK
 20956 000036BB E941FF                  	JMP	ENDWRDEV
 20957                                  
 20958                                  ;---------------------------------------------------------------------------
 20959                                  ;
 20960                                  ; Procedure Name : get_io_sft
 20961                                  ;
 20962                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 20963                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 20964                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 20965                                  ;
 20966                                  ;---------------------------------------------------------------------------
 20967                                  
 20968                                  ; 04/05/2019 - Retro DOS v4.0
 20969                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 20970                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20971                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 20972                                  
 20973                                  GET_IO_SFT:
 20974                                  	;test	byte [SS:CONSWAP],0FFh
 20975 000036BE 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 20976 000036C4 7512                    	JNZ	short GetRedir
 20977                                  GetNormal:
 20978 000036C6 16                      	push	ss
 20979 000036C7 1F                      	pop	ds
 20980 000036C8 06                      	PUSH	ES
 20981 000036C9 57                      	PUSH	DI
 20982 000036CA E86130                  	call	SFFromHandle
 20983 000036CD 7206                    	JC	short RET44P
 20984 000036CF 8CC6                    	MOV	SI,ES
 20985 000036D1 8EDE                    	MOV	DS,SI
 20986 000036D3 89FE                    	MOV	SI,DI
 20987                                  RET44P:
 20988 000036D5 5F                      	POP	DI
 20989 000036D6 07                      	POP	ES
 20990 000036D7 C3                      	retn
 20991                                  GetRedir:
 20992 000036D8 83FB01                  	CMP	BX,1
 20993 000036DB 77E9                    	JA	short GetNormal
 20994 000036DD 36C536[E605]            	LDS	SI,[SS:CONSFT]
 20995 000036E2 F8                      	CLC
 20996                                  get_io_sft_retn:
 20997 000036E3 C3                      	retn
 20998                                  
 20999                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21000                                  ;---------------------------------------------------------------------------
 21001                                  ;
 21002                                  ; Procedure Name : DIRREAD
 21003                                  ;
 21004                                  ; Inputs:
 21005                                  ;	AX = Directory block number (relative to first block of directory)
 21006                                  ;	ES:BP = Base of drive parameters
 21007                                  ;	[DIRSEC] = First sector of first cluster of directory
 21008                                  ;	[CLUSNUM] = Next cluster
 21009                                  ;	[CLUSFAC] = Sectors/Cluster
 21010                                  ; Function:
 21011                                  ;	Read the directory block into [CURBUF].
 21012                                  ; Outputs:
 21013                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21014                                  ;	[SECCLUSPOS] Set
 21015                                  ;	ES:BP unchanged
 21016                                  ;	[CURBUF] Points to Buffer with dir sector
 21017                                  ;	Carry set if error (user said FAIL to I 24)
 21018                                  ; DS preserved, all other registers destroyed.
 21019                                  ;---------------------------------------------------------------------------
 21020                                  
 21021                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21022                                  
 21023                                  DIRREAD:
 21024                                  
 21025                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21026                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21027                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21028                                  ; by DIRStart = 0.
 21029                                  
 21030 000036E4 31D2                    	XOR	DX,DX
 21031 000036E6 833E[C205]00            	CMP	word [DIRSTART],0
 21032 000036EB 7503                    	jnz	short SubDir
 21033 000036ED 92                      	XCHG	AX,DX
 21034 000036EE EB0C                    	JMP	short DoRead
 21035                                  
 21036                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21037                                  
 21038                                  SubDir:
 21039 000036F0 88C2                    	MOV	DL,AL
 21040                                  	;and	dl,[es:bp+4]
 21041 000036F2 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21042                                  
 21043                                  ;	(DX) = sector-in-cluster
 21044                                  
 21045                                  	;mov	cl,[es:bp+5]
 21046 000036F6 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21047 000036FA D3E8                    	SHR	AX,CL
 21048                                  
 21049                                  ;	(DX) = position in cluster
 21050                                  ;	(AX) = number of clusters to skip
 21051                                  
 21052                                  DoRead:
 21053 000036FC 8816[7305]              	MOV	[SECCLUSPOS],DL
 21054 00003700 89C1                    	MOV	CX,AX
 21055 00003702 88D4                    	MOV	AH,DL
 21056                                  
 21057                                  ;	(CX) = number of clusters to skip.
 21058                                  ;	(AH) = remainder
 21059                                  
 21060                                  	; 04/05/2019 - Retro DOS v4.0
 21061                                  
 21062                                  	; MSDOS 6.0
 21063 00003704 8B16[C005]              	MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21064 00003708 8916[0706]              	MOV	[HIGH_SECTOR],DX	  ;>32mb
 21065 0000370C 8B16[BE05]              	MOV	DX,[DIRSEC]
 21066 00003710 00E2                    	ADD	DL,AH
 21067 00003712 80D600                  	ADC	DH,0
 21068 00003715 8316[0706]00            	ADC	word [HIGH_SECTOR],0	  ;>32mb
 21069                                  
 21070 0000371A 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21071 0000371E 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21072 00003722 E319                    	JCXZ	FIRSTCLUSTER
 21073                                  SKPCLLP:
 21074 00003724 E8C51E                  	call	UNPACK
 21075 00003727 72BA                    	jc	short get_io_sft_retn
 21076 00003729 87DF                    	XCHG	BX,DI
 21077 0000372B E8A71E                  	call	IsEOF			; test for eof based on fat size
 21078 0000372E 7302                    	JAE	short HAVESKIPPED
 21079 00003730 E2F2                    	LOOP	SKPCLLP
 21080                                  HAVESKIPPED:
 21081 00003732 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21082 00003736 89FA                    	MOV	DX,DI
 21083 00003738 88E3                    	MOV	BL,AH
 21084 0000373A E85317                  	call	FIGREC
 21085                                  
 21086                                  	;entry	FIRSTCLUSTER
 21087                                  
 21088                                  FIRSTCLUSTER:
 21089                                  	;mov	byte [ALLOWED],18h
 21090 0000373D C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 21091 00003742 30C0                    	XOR	AL,AL		; Indicate pre-read
 21092 00003744 E8C222                  	call	GETBUFFR
 21093 00003747 729A                    	jc	short get_io_sft_retn
 21094                                  
 21095                                  	;entry	SET_BUF_AS_DIR
 21096                                  
 21097                                  SET_BUF_AS_DIR:
 21098                                  
 21099                                  ;	Set the type of CURBUF to be a directory sector.
 21100                                  ;	Only flags are modified.
 21101                                  
 21102 00003749 1E                      	PUSH	DS
 21103 0000374A 56                      	PUSH	SI
 21104 0000374B C536[E205]              	LDS	SI,[CURBUF]
 21105                                  	;or	byte [si+5],4
 21106 0000374F 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21107 00003753 5E                      	POP	SI
 21108 00003754 1F                      	POP	DS
 21109                                  dirread_retn:
 21110 00003755 C3                      	retn
 21111                                  
 21112                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21113                                  ;----------------------------------------------------------------------------
 21114                                  ;
 21115                                  ; Procedure Name : FATSECRD
 21116                                  ; Inputs:
 21117                                  ;	Same as DREAD
 21118                                  ;	DS:BX = Transfer address
 21119                                  ;	CX = Number of sectors
 21120                                  ;	DX = Absolute record number
 21121                                  ;	ES:BP = Base of drive parameters
 21122                                  ; Function:
 21123                                  ;	Calls BIOS to perform FAT read.
 21124                                  ; Outputs:
 21125                                  ;	Same as DREAD
 21126                                  ;---------------------------------------------------------------------------
 21127                                  
 21128                                  	; 04/05/2019 - Retro DOS v4.0
 21129                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21130                                  
 21131                                  FATSECRD:
 21132                                  ;hkn; SS override
 21133                                  	;mov	byte [ss:ALLOWED],18h
 21134 00003756 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21135 0000375C 89CF                    	MOV	DI,CX
 21136                                  	;mov	cl,[es:bp+8]
 21137 0000375E 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21138                                  	; MSDOS 3.3
 21139                                  	;;mov	al,[es:bp+0Fh]
 21140                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE]
 21141                                  	;XOR	AH,AH
 21142                                  	; MSDOS 6.0
 21143                                  	;mov	ax,[es:bp+0Fh]
 21144 00003762 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21145 00003766 30ED                    	XOR	CH,CH
 21146 00003768 52                      	PUSH	DX
 21147                                  NXTFAT:
 21148                                  	; MSDOS 6.0
 21149                                  ;hkn; SS override
 21150 00003769 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21151 00003770 51                      	PUSH	CX			;32mb
 21152 00003771 50                      	PUSH	AX
 21153 00003772 89F9                    	MOV	CX,DI
 21154 00003774 E85B00                  	call	DSKREAD
 21155 00003777 58                      	POP	AX
 21156 00003778 59                      	POP	CX
 21157 00003779 7420                    	JZ	short RET41P		; Carry clear
 21158 0000377B 01C2                    	ADD	DX,AX
 21159 0000377D E2EA                    	LOOP	NXTFAT
 21160 0000377F 5A                      	POP	DX
 21161 00003780 89F9                    	MOV	CX,DI
 21162                                  
 21163                                  ; NOTE FALL THROUGH
 21164                                  
 21165                                  ;Break	<DREAD -- DO A DISK READ>
 21166                                  ;---------------------------------------------------------------------------
 21167                                  ;
 21168                                  ; Procedure Name : DREAD
 21169                                  ;
 21170                                  ; Inputs:
 21171                                  ;	DS:BX = Transfer address
 21172                                  ;	CX = Number of sectors
 21173                                  ;	DX = Absolute record number	      (LOW)
 21174                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21175                                  ;	ES:BP = Base of drive parameters
 21176                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21177                                  ; Function:
 21178                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21179                                  ;	errors, will call HARDERRRW for further action.
 21180                                  ; Outputs:
 21181                                  ;	Carry set if error (currently user FAILED to INT 24)
 21182                                  ; DS,ES:BP preserved. All other registers destroyed.
 21183                                  ;---------------------------------------------------------------------------
 21184                                  
 21185                                  	;entry	DREAD
 21186                                  DREAD:
 21187 00003782 E84D00                  	call	DSKREAD
 21188 00003785 74CE                    	jz	short dirread_retn	; Carry clear
 21189                                  ;hkn; SS override
 21190 00003787 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21191 0000378D E89A00                  	call	HARDERRRW
 21192 00003790 3C01                    	CMP	AL,1			; Check for retry
 21193 00003792 74EE                    	JZ	short DREAD
 21194 00003794 3C03                    	CMP	AL,3			; Check for FAIL
 21195 00003796 F8                      	CLC
 21196 00003797 7501                    	JNZ	short NO_CAR		; Ignore
 21197 00003799 F9                      	STC
 21198                                  NO_CAR:
 21199 0000379A C3                      	retn
 21200                                  RET41P: 
 21201 0000379B 5A                      	POP	DX
 21202 0000379C C3                      	retn
 21203                                  
 21204                                  ; 24/07/2018 - Retro DOS v3.0
 21205                                  
 21206                                  ;Break	<CHECK_WRITE_LOCK>
 21207                                  ;---------------------------------------------------------------------------
 21208                                  ;
 21209                                  ; Procedure Name : CHECK_WRITE_LOCK
 21210                                  ;
 21211                                  ; Inputs:
 21212                                  ;	output of SETUP
 21213                                  ;	ES:DI -> SFT
 21214                                  ; Function:
 21215                                  ;	check write lock
 21216                                  ; Outputs:
 21217                                  ;	Carry set if error
 21218                                  ;	Carry clear if ok
 21219                                  ;
 21220                                  ;----------------------------------------------------------------------------
 21221                                  
 21222                                  	; 04/05/2019 - Retro DOS v4.0
 21223                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21224                                  
 21225                                  CHECK_WRITE_LOCK:
 21226                                  	; MSDOS 6.0
 21227                                  	;test	byte [es:di+4],8
 21228 0000379D 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21229                                  	;JZ	short write_cont			     ;no
 21230                                  	;;call	SET_ACC_ERR_DS
 21231                                  	;;retn
 21232                                  	;;jnz	SET_ACC_ERR_DS
 21233                                  	; 19/08/2018
 21234                                  	;jz	short write_cont
 21235                                  	;jmp	SET_ACC_ERR_DS
 21236                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21237 000037A2 7403                    	JZ	short write_cont
 21238                                  	;call	SET_ACC_ERR_DS
 21239                                  	;retn
 21240                                  	; 16/12/2022
 21241 000037A4 E9BE01                  	jmp	SET_ACC_ERR_DS
 21242                                  
 21243                                  write_cont:				;
 21244 000037A7 51                      	PUSH	CX			;save reg
 21245 000037A8 09C9                    	OR	CX,CX			;
 21246 000037AA 7501                    	JNZ	short Not_Truncate	;
 21247 000037AC 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21248                                  Not_Truncate:				;
 21249 000037AD B080                    	MOV	AL,80H			;check write access
 21250 000037AF E8D83B                  	call	LOCK_CHECK		;check lock
 21251 000037B2 59                      	POP	CX			;restore reg
 21252 000037B3 7305                    	JNC	short WRITE_OK		;lock ok
 21253 000037B5 E86501                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21254 000037B8 73ED                    	JNC	short write_cont	;retry
 21255                                  WRITE_OK:				;
 21256 000037BA C3                      	retn				;
 21257                                  
 21258                                  ;Break	<CHECK_READ_LOCK>
 21259                                  ;---------------------------------------------------------------------------
 21260                                  ;
 21261                                  ; Procedure Name : CHECK_READ_LOC
 21262                                  ;
 21263                                  ; Inputs:
 21264                                  ;	ES:DI -> SFT
 21265                                  ;	output of SETUP
 21266                                  ; Function:
 21267                                  ;	check read lock
 21268                                  ; Outputs:
 21269                                  ;	Carry set if error
 21270                                  ;	Carry clear if ok
 21271                                  ;----------------------------------------------------------------------------
 21272                                  
 21273                                  CHECK_READ_LOCK:
 21274                                  	; MSDOS 6.0
 21275                                  	;test	byte [es:di+4],8
 21276 000037BB 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21277                                  	;JZ	short do_retry			   	     ; no
 21278                                  	;;call	SET_ACC_ERR
 21279                                  	;;retn
 21280                                  	;;jnz	SET_ACC_ERR
 21281                                  	; 16/12/2022
 21282                                  	; 28/07/2019
 21283 000037C0 7403                    	jz	short do_retry
 21284 000037C2 E9A201                  	jmp	SET_ACC_ERR
 21285                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21286                                  	;JZ	short do_retry
 21287                                  	;call	SET_ACC_ERR
 21288                                  	;retn
 21289                                  do_retry:				;
 21290 000037C5 30C0                    	xor	al,al			;check read access
 21291 000037C7 E8C03B                  	call	LOCK_CHECK		;check lock
 21292 000037CA 7305                    	JNC	short READLOCK_OK 	;lock ok
 21293 000037CC E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21294 000037CF 73F4                    	JNC	short do_retry		;retry
 21295                                  READLOCK_OK:				;
 21296 000037D1 C3                      	retn				;
 21297                                  
 21298                                  ;============================================================================
 21299                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21300                                  ;============================================================================
 21301                                  ; 24/07/2018 - Retro DOS v3.0
 21302                                  ; 04/05/2019 - Retro DOS v4.0
 21303                                  
 21304                                  ;	TITLE	DISK2 - Disk utility routines
 21305                                  ;	NAME	Disk2
 21306                                  
 21307                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21308                                  ;
 21309                                  ;	DskRead
 21310                                  ;	DWRITE
 21311                                  ;	DSKWRITE
 21312                                  ;	HarderrRW
 21313                                  ;	SETUP
 21314                                  ;	BREAKDOWN
 21315                                  ;	READ_LOCK_VIOLATION
 21316                                  ;	WRITE_LOCK_VIOLATION
 21317                                  ;	DISKREAD
 21318                                  ;	SET_ACC_ERR_DS
 21319                                  ;	SET_ACC_ERR
 21320                                  ;	SETSFT
 21321                                  ;	SETCLUS
 21322                                  ;	AddRec
 21323                                  ;
 21324                                  ;	Revision history:
 21325                                  ;
 21326                                  ;		AN000 version 4.00 Jan. 1988
 21327                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21328                                  
 21329                                  ; 04/05/2019 - Retro DOS v4.0
 21330                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21331                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21332                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21333                                  
 21334                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21335                                  ;---------------------------------------------------------------------------
 21336                                  ;
 21337                                  ; Procedure Name : DSKREAD
 21338                                  ;
 21339                                  ; Inputs:
 21340                                  ;	DS:BX = Transfer addr
 21341                                  ;	CX = Number of sectors
 21342                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21343                                  ;	DX = Absolute record number	       (LOW)
 21344                                  ;	ES:BP = Base of drive parameters
 21345                                  ; Function:
 21346                                  ;	Call BIOS to perform disk read
 21347                                  ; Outputs:
 21348                                  ;	DI = CX on entry
 21349                                  ;	CX = Number of sectors unsuccessfully transfered
 21350                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21351                                  ;	Zero set if OK (from BIOS) (carry clear)
 21352                                  ;	Zero clear if error (carry clear)
 21353                                  ; SI Destroyed, others preserved
 21354                                  ;---------------------------------------------------------------------------
 21355                                  
 21356                                  DSKREAD:
 21357 000037D2 51                      	PUSH	CX
 21358                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21359 000037D3 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21360                                  	;mov	al,[es:bp+1]
 21361 000037D7 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21362 000037DB 53                      	PUSH	BX
 21363 000037DC 06                      	PUSH	ES
 21364 000037DD E88B0F                  	call	SETREAD
 21365 000037E0 EB27                    	JMP	short DODSKOP
 21366                                  
 21367                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21368                                  ;--------------------------------------------------------------------------
 21369                                  ;
 21370                                  ; Procedure Name : DWRITE
 21371                                  ;
 21372                                  ; Inputs:
 21373                                  ;	DS:BX = Transfer address
 21374                                  ;	CX = Number of sectors
 21375                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21376                                  ;	DX = Absolute record number	       (LOW)
 21377                                  ;	ES:BP = Base of drive parameters
 21378                                  ;	[ALLOWED] must be set in case HARDERR called
 21379                                  ; Function:
 21380                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21381                                  ;	errors, will call HARDERRRW for further action.
 21382                                  ; Output:
 21383                                  ;	Carry set if error (currently, user FAILed to I 24)
 21384                                  ; BP preserved. All other registers destroyed.
 21385                                  ;----------------------------------------------------------------------------
 21386                                  
 21387                                  	;entry	DWRITE
 21388                                  DWRITE:
 21389 000037E2 E81600                  	CALL	DSKWRITE
 21390 000037E5 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 21391                                  
 21392                                  ;hkn; SS override
 21393 000037E7 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 21394 000037ED E83A00                  	call	HARDERRRW
 21395 000037F0 3C01                    	CMP	AL,1		; Check for retry
 21396 000037F2 74EE                    	JZ	short DWRITE
 21397 000037F4 3C03                    	CMP	AL,3		; Check for FAIL
 21398 000037F6 F8                      	CLC
 21399 000037F7 7501                    	JNZ	short NO_CAR2 	; Ignore
 21400 000037F9 F9                      	STC
 21401                                  NO_CAR2:
 21402                                  dw_ret_label:
 21403 000037FA C3                      	retn
 21404                                  
 21405                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 21406                                  ;---------------------------------------------------------------------------
 21407                                  ;
 21408                                  ; Procedure Name : DSKWRITE
 21409                                  ;
 21410                                  ; Inputs:
 21411                                  ;	DS:BX = Transfer addr
 21412                                  ;	CX = Number of sectors
 21413                                  ;	DX = Absolute record number	       (LOW)
 21414                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21415                                  ;	ES:BP = Base of drive parameters
 21416                                  ; Function:
 21417                                  ;	Call BIOS to perform disk read
 21418                                  ; Outputs:
 21419                                  ;	DI = CX on entry
 21420                                  ;	CX = Number of sectors unsuccessfully transfered
 21421                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21422                                  ;	Zero set if OK (from BIOS) (carry clear)
 21423                                  ;	Zero clear if error (carry clear)
 21424                                  ; SI Destroyed, others preserved
 21425                                  ;
 21426                                  ;----------------------------------------------------------------------------
 21427                                  
 21428                                  	;entry	DSKWRITE
 21429                                  DSKWRITE:
 21430 000037FB 51                      	PUSH	CX
 21431                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21432 000037FC 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21433                                  	;mov	al,[es:bp+1]
 21434 00003800 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21435 00003804 53                      	PUSH	BX
 21436 00003805 06                      	PUSH	ES
 21437 00003806 E8950F                  	call	SETWRITE
 21438                                  DODSKOP:
 21439 00003809 8CD9                    	MOV	CX,DS		; Save DS
 21440 0000380B 1F                      	POP	DS		; DS:BP points to DPB
 21441 0000380C 1E                      	PUSH	DS
 21442                                  
 21443                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 21444 0000380D 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 21445 00003811 E8E10E                  	call	DEVIOCALL2
 21446                                  
 21447 00003814 8ED9                    	MOV	DS,CX		; Restore DS
 21448 00003816 07                      	POP	ES		; Restore ES
 21449 00003817 5B                      	POP	BX
 21450                                  
 21451                                  ;hkn; SS override
 21452 00003818 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 21453 0000381D 5F                      	POP	DI
 21454 0000381E 29F9                    	SUB	CX,DI
 21455 00003820 F7D9                    	NEG	CX		; Number of sectors not transferred
 21456                                  
 21457                                  ;hkn; SS override
 21458 00003822 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 21459                                  	;test	ax,8000h
 21460                                  	; 17/12/2022
 21461                                  	;test	ah,80h
 21462 00003826 F6C480                  	test	ah,(STERR>>8)
 21463                                  	;test	AX,STERR
 21464 00003829 C3                      	retn
 21465                                  
 21466                                  ;Break	<HardErrRW - map extended errors and call harderr>
 21467                                  ;---------------------------------------------------------------------------
 21468                                  ;
 21469                                  ; Procedure Name : HardErrRW
 21470                                  ;
 21471                                  ; Inputs:
 21472                                  ;	AX is error code from read or write
 21473                                  ;	Other registers set as per HARDERR
 21474                                  ; Function:
 21475                                  ;	Checks the error code for special extended
 21476                                  ;	errors and maps them if needed. Then invokes
 21477                                  ;	Harderr
 21478                                  ; Outputs:
 21479                                  ;	Of HARDERR
 21480                                  ; AX may be modified prior to call to HARDERR.
 21481                                  ; No other registers altered.
 21482                                  ;
 21483                                  ;---------------------------------------------------------------------------
 21484                                  
 21485                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21486                                  HARDERRRW:
 21487                                  	;cmp	al,0Fh
 21488 0000382A 3C0F                    	CMP	AL,error_I24_wrong_disk
 21489 0000382C 7512                    	JNZ	short DO_ERR				; Nothing to do
 21490                                  
 21491                                  	; MSDOS 3.3
 21492                                  	;push	ds
 21493                                  	;push	si
 21494                                  	;lds	si,[ss:CALLVIDRW]
 21495                                  	;mov	[ss:EXTERRPT+2], ds
 21496                                  	;mov	[ss:EXTERRPT], si
 21497                                  	;pop	si
 21498                                  	;pop	ds
 21499                                  
 21500                                  	; MSDOS 6.0
 21501 0000382E 50                      	push	ax
 21502 0000382F 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 21503 00003833 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 21504 00003837 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 21505 0000383B 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 21506 0000383F 58                      	pop	ax
 21507                                  DO_ERR:
 21508                                  	;;call	HARDERR
 21509                                  	;;retn
 21510                                  	; 16/12/2022
 21511                                  	; 10/06/2019
 21512 00003840 E96F1B                  	jmp	HARDERR	
 21513                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21514                                  	;call	HARDERR
 21515                                  	;retn
 21516                                  
 21517                                  ; 24/07/2018 - Retro DOS v3.0
 21518                                  
 21519                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 21520                                  ;----------------------------------------------------------------------------
 21521                                  ;
 21522                                  ; Procedure Name : SETUP
 21523                                  ;
 21524                                  ; Inputs:
 21525                                  ;	ES:DI point to SFT (value also in THISSFT)
 21526                                  ;	DMAAdd contains transfer address
 21527                                  ;	CX = Byte count
 21528                                  ;	DS = DOSDATA
 21529                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 21530                                  ;		2nd of caller of caller.
 21531                                  ; Outputs:
 21532                                  ;	    CX = byte count
 21533                                  ;	    [THISDPB] = Base of drive parameters if file
 21534                                  ;		      = Pointer to device header if device or NET
 21535                                  ;	    ES:DI Points to SFT
 21536                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 21537                                  ;	    [TRANS] = 0 (No transfers yet)
 21538                                  ;	    BytPos = Byte position in file
 21539                                  ;
 21540                                  ;	The following fields are relevant to local files (not devices) only:
 21541                                  ;
 21542                                  ;	    SecPos = Position of first sector (local files only)
 21543                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 21544                                  ;	    [CLUSNUM] = First cluster (local files only)
 21545                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 21546                                  ;	    [THISDRV] = Physical unit number (local files only)
 21547                                  ;
 21548                                  ;      RETURNS ONE LEVEL UP WITH:
 21549                                  ;	   CX = 0
 21550                                  ;	   CARRY = Clear
 21551                                  ;	IF AN ERROR IS DETECTED
 21552                                  ; All other registers destroyed
 21553                                  ;----------------------------------------------------------------------------
 21554                                  
 21555                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 21556                                  
 21557                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 21558                                  
 21559                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21560                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 21561                                  
 21562                                  SETUP:
 21563                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 21564                                  
 21565                                  	;lds 	si,[es:di+7]
 21566 00003843 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 21567                                  
 21568                                  ;hkn; SS override
 21569 00003847 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 21570                                  
 21571                                  ;hkn; SS is DOSDATA
 21572 0000384C 16                      	push	ss
 21573 0000384D 1F                      	pop	ds
 21574                                  
 21575 0000384E 8936[8A05]              	MOV	[THISDPB],SI
 21576                                  
 21577 00003852 8B1E[2C03]              	MOV	BX,[DMAADD]
 21578 00003856 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 21579 0000385A C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 21580                                  	;mov	ax,[es:di+15h]
 21581 0000385F 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 21582                                  	;mov	dx,[es:di+17h]
 21583 00003863 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 21584 00003867 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 21585 0000386B A3[CE05]                	MOV	[BYTPOS],AX
 21586                                  	;test	word [es:di+5],8080h
 21587 0000386E 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 21588 00003874 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 21589 00003876 06                      	PUSH	ES
 21590 00003877 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 21591                                  
 21592                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21593                                  	;;mov	bl,[es:bp+0]
 21594                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 21595                                  	; 05/12/2022
 21596 0000387B 268A5E00                	mov	bl,[es:bp]
 21597                                  	
 21598 0000387F 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 21599                                  	;mov	bx,[es:bp+2]
 21600 00003883 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21601                                  
 21602                                  	;; MSDOS 3.3
 21603                                  	;cmp	dx,bx
 21604                                  	;jnb	short EOFERR
 21605                                  	;div	bx
 21606                                  	;mov	[SECPOS],ax
 21607                                  	;mov	[BYTSECPOS],dx
 21608                                  	;mov	dx,ax
 21609                                  	;;and	al,[es:bp+4]
 21610                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 21611                                  	;mov	[SECCLUSPOS],al
 21612                                  	;mov	ax,cx
 21613                                  	;;mov	cl,[es:bp+5]
 21614                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21615                                  	;shr	dx,cl
 21616                                  	;mov	[CLUSNUM],dx
 21617                                  	;pop	es
 21618                                  	;mov	cx,ax
 21619                                  
 21620                                  	; 04/05/2019 - Retro DOS v4.0
 21621                                  
 21622                                  	; MSDOS 6.0
 21623                                  ;M039: Optimized this section.
 21624 00003887 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 21625 00003888 E83C05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 21626 0000388B 8916[CC05]              	MOV	[BYTSECPOS],DX
 21627 0000388F A3[C405]                	MOV	[SECPOS],AX
 21628 00003892 890E[C605]              	MOV	[SECPOS+2],CX
 21629 00003896 89CA                    	MOV	DX,CX
 21630                                  
 21631 00003898 89C3                    	MOV	BX,AX
 21632                                  	;and	bl,[es:bp+4]
 21633 0000389A 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 21634 0000389E 881E[7305]              	MOV	[SECCLUSPOS],BL
 21635                                  
 21636 000038A2 E84905                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 21637 000038A5 59                      	POP	CX			;CX = byte count.
 21638 000038A6 751F                    	JNZ	short EOFERR		;cluster number above 64k
 21639                                  	;cmp	ax,[es:bp+0Dh]
 21640 000038A8 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 21641 000038AC 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 21642                                  
 21643 000038AE A3[BC05]                	MOV	[CLUSNUM],AX
 21644 000038B1 07                      	POP	ES			; ES:DI point to SFT
 21645                                  ;M039
 21646                                  
 21647                                  NOSETSTUFF:
 21648 000038B2 89C8                    	MOV	AX,CX		; AX = Byte count.
 21649 000038B4 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 21650 000038B8 730C                    	JNC	short setup_OK	; Must be less than 64
 21651 000038BA A1[2C03]                	MOV	AX,[DMAADD]
 21652 000038BD F7D8                    	NEG	AX		; Amount of room left in segment (know
 21653                                  				;    less than 64K since max value of CX
 21654                                  				;    is FFFF).
 21655 000038BF 7501                    	JNZ	short NoDec
 21656 000038C1 48                      	DEC	AX
 21657                                  NoDec:
 21658 000038C2 89C1                    	MOV	CX,AX		; Can do this much
 21659 000038C4 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 21660                                  setup_OK:
 21661 000038C6 C3                      	retn
 21662                                  
 21663                                  EOFERR:
 21664 000038C7 07                      	POP	ES		; ES:DI point to SFT
 21665 000038C8 31C9                    	XOR	CX,CX		; No bytes read
 21666                                  ;;;;;;;;;;; 7/18/86
 21667                                  	; MSDOS 3.3
 21668                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 21669                                  ;;;;;;;;;;;
 21670                                  NOROOM:
 21671 000038CA 5B                      	POP	BX		; Kill return address
 21672 000038CB F8                      	CLC
 21673 000038CC C3                      	retn			; RETURN TO CALLER OF CALLER
 21674                                  
 21675                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 21676                                  ;---------------------------------------------------------------------------
 21677                                  ;
 21678                                  ; Procedure Name : BREAKDOWN
 21679                                  ;
 21680                                  ; Inputs:
 21681                                  ;	CX = Length of disk transfer in bytes
 21682                                  ;	ES:BP = Base of drive parameters
 21683                                  ;	[BYTSECPOS] = Byte position within first sector
 21684                                  ;	DS = DOSDATA
 21685                                  ; Outputs:
 21686                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 21687                                  ;	[SECCNT] = No. of whole sectors to transfer
 21688                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 21689                                  ; AX, BX, DX destroyed. No other registers affected.
 21690                                  ;---------------------------------------------------------------------------
 21691                                  
 21692                                  BREAKDOWN:
 21693 000038CD A1[CC05]                	MOV	AX,[BYTSECPOS]
 21694 000038D0 89CB                    	MOV	BX,CX
 21695 000038D2 09C0                    	OR	AX,AX
 21696 000038D4 740E                    	JZ	short SAVFIR	; Partial first sector?
 21697                                  	;sub	ax,[es:bp+2]
 21698 000038D6 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 21699 000038DA F7D8                    	NEG	AX		; Max number of bytes left in first sector
 21700 000038DC 29C3                    	SUB	BX,AX		; Subtract from total length
 21701 000038DE 7304                    	JAE	short SAVFIR
 21702 000038E0 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 21703 000038E2 31DB                    	XOR	BX,BX		; And no bytes are left
 21704                                  SAVFIR:
 21705 000038E4 A3[D205]                	MOV	[BYTCNT1],AX
 21706 000038E7 89D8                    	MOV	AX,BX
 21707 000038E9 31D2                    	XOR	DX,DX
 21708                                  	;div	word [ES:BP+2]
 21709 000038EB 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 21710 000038EF A3[D605]                	MOV	[SECCNT],AX
 21711 000038F2 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 21712                                  	; MSDOS 3.3
 21713                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 21714                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 21715                                  	;CMP	AX,1
 21716                                  	;retnz
 21717                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 21718                                  	;MOV	[BYTCNT2],AX
 21719                                  	;MOV	[SECCNT],DX	; DX = 0
 21720                                  _RET45:
 21721 000038F6 C3                      	retn
 21722                                  
 21723                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 21724                                  
 21725                                  ;----------------------------------------------------------------------------
 21726                                  ;
 21727                                  ; Procedure Name : READ_LOCK_VIOLATION
 21728                                  ;
 21729                                  ; ES:DI points to SFT. This entry used by NET_READ
 21730                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 21731                                  ; Else do retrys.
 21732                                  ; ES:DI,DS,CX preserved
 21733                                  ;
 21734                                  ;----------------------------------------------------------------------------
 21735                                  
 21736                                  READ_LOCK_VIOLATION:
 21737 000038F7 C606[7505]00            	MOV	byte [READOP],0
 21738                                  ERR_ON_CHECK:
 21739                                  	;;test	word [es:di+2],8000h
 21740                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21741                                  	;JNZ	short HARD_ERR
 21742                                  
 21743                                  	; 04/05/2019
 21744                                  	;test	byte [es:di+3],80h
 21745 000038FC 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21746 00003901 750E                    	JNZ	short HARD_ERR
 21747                                  
 21748 00003903 51                      	PUSH	CX
 21749                                  	;mov	cl,[es:di+2]
 21750 00003904 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 21751                                  	;and	cl,0F0h
 21752 00003908 80E1F0                  	AND	CL,SHARING_MASK
 21753                                  	;cmp	cl,0
 21754 0000390B 80F900                  	CMP	CL,SHARING_COMPAT
 21755 0000390E 59                      	POP	CX
 21756 0000390F 7505                    	JNE	short NO_HARD_ERR
 21757                                  HARD_ERR:
 21758 00003911 E88C3A                  	call	LOCK_VIOLATION
 21759 00003914 73E0                    	jnc	short _RET45		; User wants Retrys
 21760                                  NO_HARD_ERR:
 21761 00003916 31C9                    	XOR	CX,CX			;No bytes transferred
 21762                                  	;mov	ax,21h
 21763 00003918 B82100                  	MOV	AX,error_lock_violation
 21764 0000391B F9                      	STC
 21765                                  RET3:		; 06/02/2024
 21766 0000391C C3                      	retn
 21767                                  
 21768                                  ;----------------------------------------------------------------------------
 21769                                  ;
 21770                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 21771                                  ;
 21772                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 21773                                  ; This entry used by NET_WRITE
 21774                                  ;
 21775                                  ;----------------------------------------------------------------------------
 21776                                  
 21777                                  WRITE_LOCK_VIOLATION:
 21778 0000391D C606[7505]01            	MOV	byte [READOP],1
 21779 00003922 EBD8                    	JMP	short ERR_ON_CHECK
 21780                                  
 21781                                  ; 04/05/2019 - Retro DOS v4.0
 21782                                  
 21783                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 21784                                  
 21785                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 21786                                  ;----------------------------------------------------------------------------
 21787                                  ;
 21788                                  ; Procedure Name : DISKREAD
 21789                                  ;
 21790                                  ; Inputs:
 21791                                  ;	Outputs of SETUP
 21792                                  ; Function:
 21793                                  ;	Perform disk read
 21794                                  ; Outputs:
 21795                                  ;    Carry clear
 21796                                  ;	CX = No. of bytes read
 21797                                  ;	ES:DI point to SFT
 21798                                  ;	SFT offset and cluster pointers updated
 21799                                  ;    Carry set
 21800                                  ;	CX = 0
 21801                                  ;	ES:DI point to SFT
 21802                                  ;	AX has error code
 21803                                  ;----------------------------------------------------------------------------
 21804                                  
 21805                                  ;hkn; called from disk.asm. DS already set up.
 21806                                  
 21807                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21808                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 21809                                  
 21810                                  DISKREAD:
 21811                                  	;mov	ax,[es:di+11h]
 21812 00003924 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 21813                                  	;mov	bx,[es:di+13h]
 21814 00003928 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 21815 0000392C 2B06[CE05]              	SUB	AX,[BYTPOS]
 21816 00003930 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 21817 00003934 7225                    	JB	short RDERR		;Read starts past EOF
 21818 00003936 750A                    	JNZ	short ENUF		;More than 64k to EOF
 21819 00003938 09C0                    	OR	AX,AX
 21820 0000393A 741F                    	JZ	short RDERR		;Read starts at EOF
 21821 0000393C 39C8                    	CMP	AX,CX
 21822 0000393E 7302                    	JAE	short ENUF		;I/O fits
 21823 00003940 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 21824                                  ENUF:
 21825                                  	; MSDOS 3.3
 21826                                  	;test	byte [es:di+4],8
 21827                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 21828                                  	;jnz	short SET_ACC_ERR
 21829                                  	;call	LOCK_CHECK
 21830                                  	;jnb	short _READ_OK
 21831                                  	;call	READ_LOCK_VIOLATION
 21832                                  	;jnb	short ENUF
 21833                                  	;retn
 21834                                  
 21835                                  	; MSDOS 6.0
 21836 00003942 E876FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 21837                                  	;JNC	short _READ_OK 		; There are no locks
 21838                                  	;retn
 21839                                  	; 06/02/2024
 21840 00003945 72D5                    	jc	short RET3
 21841                                  
 21842                                  _READ_OK:
 21843 00003947 C42E[8A05]              	LES	BP,[THISDPB]
 21844 0000394B E87FFF                  	CALL	BREAKDOWN
 21845 0000394E 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 21846                                  
 21847 00003952 E89D13                  	call	FNDCLUS
 21848                                       	; MSDOS 6.0			;M022 conditional removed here
 21849 00003955 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 21850                                  					; migrated from 330a - HKN
 21851 00003957 09C9                    	OR	CX,CX
 21852 00003959 7413                    	JZ	short SKIPERR
 21853                                  RDERR:
 21854 0000395B B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 21855 0000395D E92402                  	jmp	WRTERR22
 21856                                  
 21857                                  ;RDLASTJ: 
 21858                                  	;JMP	RDLAST                  ;M039
 21859                                  
 21860                                  SETSFTJ2: 
 21861 00003960 E99600                  	JMP	SETSFT
 21862                                  
 21863                                  CANOT_READ:
 21864                                  	; MSDOS 3.3
 21865                                  	;POP	CX		;M039.
 21866                                  	; MSDOS 3.3 & MSDOS 6.0
 21867 00003963 59                      	POP	CX              ;Clean stack.
 21868 00003964 5B                      	POP	BX
 21869                                  
 21870                                  	;entry	SET_ACC_ERR_DS
 21871                                  SET_ACC_ERR_DS:
 21872                                  
 21873                                  ;hkn; SS is DOSDATA
 21874                                  	;Context DS
 21875 00003965 16                      	push	ss
 21876 00003966 1F                      	pop	ds
 21877                                  
 21878                                  	;entry	SET_ACC_ERR
 21879                                  SET_ACC_ERR:
 21880 00003967 31C9                    	XOR	CX,CX
 21881                                  	;mov	ax,5
 21882 00003969 B80500                  	MOV	AX,error_access_denied
 21883 0000396C F9                      	STC
 21884 0000396D C3                      	retn
 21885                                  
 21886                                  SKIPERR:
 21887 0000396E 8916[BA05]              	MOV	[LASTPOS],DX
 21888 00003972 891E[BC05]              	MOV	[CLUSNUM],BX
 21889 00003976 833E[D205]00            	CMP	word [BYTCNT1],0
 21890 0000397B 7405                    	JZ	short RDMID
 21891                                  
 21892 0000397D E8E813                  	call	BUFRD
 21893 00003980 72E3                    	JC	short SET_ACC_ERR_DS
 21894                                  
 21895                                  RDMID:
 21896 00003982 833E[D605]00            	CMP	word [SECCNT],0
 21897                                  	;JZ	RDLAST ; 10/08/2018
 21898 00003987 7453                    	jz	short RDLAST
 21899                                  
 21900 00003989 E87414                  	call	NEXTSEC
 21901 0000398C 72D2                    	JC	short SETSFTJ2
 21902                                  
 21903 0000398E C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 21904                                  ONSEC:
 21905 00003993 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 21906 00003997 8B0E[D605]              	MOV	CX,[SECCNT]
 21907 0000399B 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21908                                  RDLP:
 21909 0000399F E88F14                  	call	OPTIMIZE
 21910 000039A2 72C1                    	JC	short SET_ACC_ERR_DS
 21911                                  
 21912 000039A4 57                      	PUSH	DI                      ;DI = Next physical cluster.
 21913 000039A5 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 21914 000039A6 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 21915                                  	;mov	byte [ALLOWED],38h
 21916 000039A7 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 21917 000039AC 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 21918                                  
 21919 000039B0 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 21920 000039B1 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 21921                                  
 21922                                  	; 04/05/2019 - Retro DOS v4.0
 21923                                  
 21924                                  	; MSDOS 6.0
 21925 000039B2 E84722                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 21926                                  
 21927                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21928 000039B5 E8CAFD                  	call	DREAD
 21929                                  
 21930                                  	; MSDOS 3.3 
 21931                                  	;pop	bx
 21932                                  	;pop	dx
 21933                                  	;jc	short CANOT_READ
 21934                                  	;add	bx,dx	; (bx = Extent end)
 21935                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 21936                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 21937                                  	;call	SETVISIT
 21938                                  	; ->***
 21939                                  ;M039
 21940                                  	; MSDOS 6.0 
 21941 000039B8 59                      	pop	cx
 21942 000039B9 5A                      	pop	dx
 21943 000039BA 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 21944 000039BF 72A2                    	jc	short CANOT_READ
 21945                                  
 21946 000039C1 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 21947                                  
 21948                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 21949                                  ;            sectors, also termed an "Extent".)
 21950                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 21951                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 21952                                  ;       ES:BP -> Drive Parameter Block (DPB).
 21953                                  ;
 21954                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 21955                                  ;	buffers must be "read" into the transfer memory block, so that the
 21956                                  ;       transfer memory reflects the most recent data.
 21957                                  
 21958 000039C6 E85E00                  	call	DskRdBufScan
 21959                                  
 21960                                  	;Context DS
 21961 000039C9 16                      	push	ss
 21962 000039CA 1F                      	pop	ds
 21963                                          
 21964 000039CB 59                      	pop	cx
 21965 000039CC 5B                              pop	bx
 21966                                  
 21967                                  ;       CX = # of sector remaining.
 21968                                  ;       BX = Next physical cluster.
 21969                                  
 21970                                  ;M039
 21971                                  
 21972                                  ;;;;;;;;
 21973                                  ;	; 25/07/2018 - Retro DOS v3.0
 21974                                  ;	; ***->
 21975                                  ;	; MSDOS 3.3
 21976                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 21977                                  ;bufq:
 21978                                  ;;	DX = Extent start.
 21979                                  ;;	BX = Extent end.
 21980                                  ;;	 AL = Drive #.
 21981                                  ;;     DS:DI-> 1st buffer in queue.
 21982                                  ;
 21983                                  ;	;or	byte [di+5],20h
 21984                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 21985                                  ;	;cmp	al,[di+4]	
 21986                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 21987                                  ;	jnz	short bufq3
 21988                                  ;	;cmp	[di+6],dx
 21989                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 21990                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 21991                                  ;	;cmp	[di+6],bx
 21992                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 21993                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 21994                                  ;	
 21995                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 21996                                  ;
 21997                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 21998                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 21999                                  ;;      as MRU (Most Recently Used).
 22000                                  ;
 22001                                  ;	;test	byte [di+5],40h
 22002                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22003                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22004                                  ;	pop	ax ; transfer address
 22005                                  ;	push	ax
 22006                                  ;	push	di
 22007                                  ;	push	dx
 22008                                  ;	;sub	dx,[di+6]
 22009                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22010                                  ;	neg	dx
 22011                                  ;
 22012                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22013                                  ;;           block.
 22014                                  ;
 22015                                  ;	mov	si,di
 22016                                  ;	mov	di,ax
 22017                                  ;	mov	ax,dx
 22018                                  ;	;mov	cx,[es:bp+6]	
 22019                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22020                                  ;	mul	cx
 22021                                  ;	add	di,ax
 22022                                  ;
 22023                                  ;	lea	si,[si+16]
 22024                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22025                                  ;	shr	cx,1
 22026                                  ;	push	es
 22027                                  ;	mov	es,[SS:DMAADD+2]
 22028                                  ;
 22029                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22030                                  ;;      DS:SI-> Buffer sector data.
 22031                                  ;;      ES:DI-> Destination within Transfer memory block.
 22032                                  ;
 22033                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22034                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22035                                  ;	;rep	movsb                   ;Copy last byte.
 22036                                  ;	jnc	short bufq1
 22037                                  ;	movsb
 22038                                  ;bufq1:
 22039                                  ;	pop	es
 22040                                  ;	pop	dx
 22041                                  ;	pop	di
 22042                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22043                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22044                                  ;bufq2:
 22045                                  ;	call	SCANPLACE
 22046                                  ;bufq3:
 22047                                  ;	call	SKIPVISIT
 22048                                  ;	jnz	short bufq
 22049                                  ;	
 22050                                  ;	push	ss
 22051                                  ;	pop	ds
 22052                                  ;	pop	cx
 22053                                  ;	pop	cx
 22054                                  ;	pop	bx	
 22055                                  ;bufq4:
 22056                                  ;;;;;;;
 22057 000039CD E30D                    	JCXZ	RDLAST
 22058                                  
 22059 000039CF E8031C                  	call	IsEOF			; test for eof on fat size
 22060 000039D2 7325                    	JAE	short SETSFT
 22061                                  
 22062 000039D4 B200                    	MOV	DL,0
 22063 000039D6 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22064 000039DA EBC3                    	JMP	short RDLP ; 19/05/2019
 22065                                  
 22066                                  RDLAST:
 22067 000039DC A1[D405]                	MOV	AX,[BYTCNT2]
 22068 000039DF 09C0                    	OR	AX,AX
 22069 000039E1 7416                    	JZ	short SETSFT
 22070 000039E3 A3[D205]                	MOV	[BYTCNT1],AX
 22071                                  
 22072 000039E6 E81714                  	call	NEXTSEC
 22073 000039E9 720E                    	JC	short SETSFT
 22074                                  
 22075 000039EB C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22076 000039F1 E87413                  	call	BUFRD
 22077                                  	; 10/08/2018
 22078                                  
 22079 000039F4 7303                    	JNC	short SETSFT
 22080 000039F6 E96CFF                  	JMP	SET_ACC_ERR_DS
 22081                                  
 22082                                  ;------------------------------------------------------------------------------
 22083                                  ;
 22084                                  ; Procedure Name : SETSFT
 22085                                  ; Inputs:
 22086                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22087                                  ;		and set cluster fields
 22088                                  ; Function:
 22089                                  ;	Update [THISSFT] based on the transfer
 22090                                  ; Outputs:
 22091                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22092                                  ;	ES:DI points to [THISSFT]
 22093                                  ;	CX No. of bytes transferred
 22094                                  ;	Carry clear
 22095                                  ;
 22096                                  ;----------------------------------------------------------------------------
 22097                                  
 22098                                  	;entry	SETSFT
 22099                                  
 22100                                  ; 26/07/2018 - Retro DOS v3.0
 22101                                  SETSFT:
 22102 000039F9 C43E[9E05]              	LES	DI,[THISSFT]
 22103                                  
 22104                                  ; Same as SETSFT except ES:DI already points to SFT
 22105                                  	;entry	SETCLUS
 22106                                  SETCLUS:	
 22107 000039FD 8B0E[B805]              	MOV	CX,[NEXTADD]
 22108 00003A01 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22109                                  	;;test	word [es:di+5],80h
 22110                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22111                                  	;JNZ	short ADDREC		; don't set clusters if device
 22112                                  
 22113                                  	; 04/05/2019 - Retro DOS v4.0
 22114                                  	;test	byte [es:di+5],80h
 22115 00003A05 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22116 00003A0A 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22117                                  
 22118 00003A0C A1[BC05]                	MOV	AX,[CLUSNUM]
 22119                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22120                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22121 00003A0F 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22122 00003A13 A1[BA05]                	MOV	AX,[LASTPOS]
 22123                                  	;mov	[es:di+19h],ax
 22124 00003A16 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22125                                  
 22126                                  ;----------------------------------------------------------------------------
 22127                                  ;
 22128                                  ; Procedure : AddRec
 22129                                  ; Inputs:
 22130                                  ;	ES:DI points to SFT
 22131                                  ;	CX is No. Bytes transferred
 22132                                  ; Function:
 22133                                  ;	Update the SFT offset based on the transfer
 22134                                  ; Outputs:
 22135                                  ;	sf_position updated to point to first byte after transfer
 22136                                  ;	ES:DI points to SFT
 22137                                  ;	CX No. of bytes transferred
 22138                                  ;	Carry clear
 22139                                  ;----------------------------------------------------------------------------
 22140                                  
 22141                                  	;entry	AddRec
 22142                                  ADDREC:
 22143 00003A1A E309                    	JCXZ	RET28		; If no records read,  don't change position
 22144                                  	;add	[es:di+15h],cx
 22145 00003A1C 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22146                                  	;adc	word [es:di+17h], 0
 22147 00003A20 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22148                                  RET28:	
 22149 00003A25 F8                      	CLC
 22150 00003A26 C3                      	retn
 22151                                  
 22152                                  ; 25/07/2018
 22153                                  ; MSDOS 6.0
 22154                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22155                                  ;----------------------------------------------------------------------------
 22156                                  ;
 22157                                  ; Procedure Name : DskRdBufScan
 22158                                  ;
 22159                                  ; Inputs:
 22160                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22161                                  ;            sectors, also termed an "Extent".)
 22162                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22163                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22164                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22165                                  ;
 22166                                  ; Function:
 22167                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22168                                  ;	"read" into the transfer memory block, so that the transfer memory
 22169                                  ;	reflects the most recent data.
 22170                                  ;
 22171                                  ; Outputs:
 22172                                  ;       Transfer memory updated as required.
 22173                                  ;
 22174                                  ; Uses:
 22175                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22176                                  ;       SS override for all global variables.
 22177                                  ;
 22178                                  ; Notes:
 22179                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22180                                  ;	than the FIRST.
 22181                                  ;----------------------------------------------------------------------------
 22182                                  ;M039: Created
 22183                                  
 22184                                  ; 04/05/2019 - Retro DOS v4.0
 22185                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22186                                  
 22187                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22188                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22189                                  
 22190                                  ;procedure DskRdBufScan,NEAR
 22191                                  ;
 22192                                  ;ASSUME  DS:NOTHING
 22193                                  
 22194                                  DskRdBufScan:
 22195 00003A27 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22196 00003A2D 743C                    	je	short bufx		     ; -no, skip all work.
 22197                                  
 22198 00003A2F 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22199 00003A34 89DE                    	mov     si,bx
 22200 00003A36 01D1                    	add     cx,dx
 22201 00003A38 83D600                  	adc     si,0
 22202                                  
 22203 00003A3B E8661F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22204                                  	;mov	ax,[di+2]
 22205 00003A3E 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22206 00003A41 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22207                                  		
 22208                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22209                                  	;;mov	al,[es:bp+0]
 22210                                  	;mov	al,[es:bp+DPB.DRIVE]
 22211                                  	; 15/12/2022
 22212 00003A45 268A4600                	mov	al,[es:bp]
 22213                                  
 22214                                  ;       BX:DX = Extent start.
 22215                                  ;       SI:CX = Extent end + 1.
 22216                                  ;          AL = Drive #.
 22217                                  ;       DS:DI-> 1st buffer in queue.
 22218                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22219                                  
 22220                                  bufq:	
 22221                                  	;cmp	al,[di+4]
 22222 00003A49 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22223 00003A4C 7514                    	jne	short bufq1        	;  -no, jump.
 22224                                  
 22225                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22226                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22227                                  
 22228                                  	;cmp	bx,[di+8]
 22229 00003A4E 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22230 00003A51 7503                    	jne	short bufq01
 22231                                  	;cmp	dx,[di+6]
 22232 00003A53 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22233                                  bufq01:
 22234 00003A56 770A                    	ja	short bufq1
 22235                                  
 22236                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22237                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22238                                  
 22239                                  	;cmp	si,[di+8]
 22240 00003A58 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22241 00003A5B 7503                    	jne	short bufq02
 22242                                  	;cmp	cx,[di+6]
 22243 00003A5D 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22244                                  bufq02:
 22245 00003A60 770A                    	ja	short bufq2
 22246                                  bufq1:	
 22247 00003A62 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22248 00003A67 8B3D                    	mov	di,[di]
 22249                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22250 00003A69 75DE                    	jne	short bufq		; -no, do next buffer
 22251                                  bufx:
 22252 00003A6B C3                      	retn				;Exit.
 22253                                  
 22254                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22255                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22256                                  ;       as MRU (Most Recently Used).
 22257                                  
 22258                                  bufq2:	
 22259 00003A6C 50                      	push	ax
 22260                                  	;test	byte [di+5],40h
 22261 00003A6D F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22262 00003A71 742F                    	jz	short bufq3                    ; -no, jump.
 22263                                  
 22264                                  ;       SaveReg <cx,dx,si,di,es>
 22265 00003A73 51                      	push	cx
 22266 00003A74 52                      	push	dx
 22267 00003A75 56                      	push	si
 22268 00003A76 57                      	push	di
 22269 00003A77 06                      	push	es
 22270                                  
 22271 00003A78 89D0                    	mov     ax,dx
 22272                                  	;sub	ax,[di+6]
 22273 00003A7A 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22274 00003A7D F7D8                    	neg	ax
 22275                                  
 22276                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22277                                  ;            block. (Note: the upper word of the sector # may be ignored
 22278                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22279                                  ;            is imposed by the input parameters of the disk read operation.)
 22280                                  
 22281                                  	;lea	si,[di+20]
 22282 00003A7F 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22283                                  	;mov	cx,[es:bp+2]
 22284 00003A82 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22285 00003A86 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22286 00003A88 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22287 00003A8D 01C7                    	add	di,ax
 22288 00003A8F 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22289 00003A94 D1E9                    	shr	cx,1
 22290                                  
 22291                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22292                                  ;       DS:SI-> Buffer sector data.
 22293                                  ;       ES:DI-> Destination within Transfer memory block.
 22294                                  
 22295 00003A96 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22296                                  	;; 04/05/2019
 22297                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22298                                  	;;rep	movsb                   ;Copy last byte.
 22299                                  	;jnc	short bufq03	
 22300                                  	;movsb
 22301                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22302 00003A98 83D100                  	adc	cx,0
 22303 00003A9B F3A4                    	rep	movsb
 22304                                  bufq03:
 22305                                  	;RestoreReg <es,di,si,dx,cx>
 22306 00003A9D 07                      	pop	es
 22307 00003A9E 5F                      	pop	di
 22308 00003A9F 5E                      	pop	si
 22309 00003AA0 5A                      	pop	dx
 22310 00003AA1 59                      	pop	cx
 22311                                  
 22312                                  ;       DS:DI -> current buffer.
 22313                                  bufq3:	
 22314 00003AA2 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22315                                          ;invoke SCANPLACE
 22316 00003AA4 E80F1F                  	call	SCANPLACE
 22317 00003AA7 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22318 00003AAC 58                      	pop	ax
 22319                                  	;jne	short bufq		; -no, jump.
 22320                                  	;;jmp	short bufx		; -yes, exit.
 22321                                  	;; 12/06/2019
 22322                                  	;retn
 22323                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22324 00003AAD 759A                    	jne	short bufq
 22325                                  	;jmp	short bufx
 22326                                  	; 09/02/2024
 22327 00003AAF C3                      	retn	; Exit
 22328                                  
 22329                                  ;EndProc DskRdBufScan
 22330                                  
 22331                                  ;============================================================================
 22332                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22333                                  ;============================================================================
 22334                                  ; 04/05/2019 - Retro DOS v4.0
 22335                                  ; 24/07/2018 - Retro DOS v3.0
 22336                                  
 22337                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22338                                  ;----------------------------------------------------------------------------
 22339                                  ;
 22340                                  ; Procedure Name : DISKWRITE
 22341                                  ;
 22342                                  ; Inputs:
 22343                                  ;       Outputs of SETUP
 22344                                  ; Function:
 22345                                  ;       Perform disk write
 22346                                  ; Outputs:
 22347                                  ;    Carry clear
 22348                                  ;       CX = No. of bytes written
 22349                                  ;       ES:DI point to SFT
 22350                                  ;       SFT offset and cluster pointers updated
 22351                                  ;    Carry set
 22352                                  ;       CX = 0
 22353                                  ;       ES:DI point to SFT
 22354                                  ;       AX has error code
 22355                                  ;----------------------------------------------------------------------------
 22356                                  
 22357                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 22358                                  
 22359                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 22360                                  
 22361                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22362                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 22363                                  
 22364                                  DISKWRITE:
 22365                                  	; MSDOS 3.3
 22366                                  	; IBMDOS.COM - Offset 436Dh
 22367                                  	;;test	byte [es:di+4],8
 22368                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22369                                  	;jz	short write_cont
 22370                                  	;jmp	SET_ACC_ERR_DS
 22371                                  ;write_cont:
 22372                                  	;push	cx
 22373                                  	;or	cx,cx
 22374                                  	;jnz	short Not_Truncate
 22375                                  	;;mov	cx,-1
 22376                                  	;dec	cx
 22377                                  ;Not_Truncate:
 22378                                  	;call	LOCK_CHECK
 22379                                  	;pop	cx
 22380                                  	;jnb	short _WRITE_OK
 22381                                  	;call	WRITE_LOCK_VIOLATION
 22382                                  	;jnb	short DISKWRITE
 22383                                  	;retn
 22384                                  
 22385                                  	; MSDOS 6.0
 22386 00003AB0 E8EAFC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 22387                                  	; 19/08/2018
 22388 00003AB3 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 22389 00003AB5 C3                      	retn
 22390                                  
 22391                                  WRTEOFJ:
 22392 00003AB6 E9DE01                  	JMP     WRTEOF
 22393                                  
 22394                                  _WRITE_OK:
 22395                                   	; 27/07/2018
 22396                                  	; IBMDOS.COM - Offset 438Eh
 22397                                  	
 22398                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22399                                  	;and	word [es:di+5],0BFBFh
 22400 00003AB9 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 22401                                  				; Mark file as dirty, clear no date on close
 22402                                  
 22403                                  	; 04/05/2019 - Retro DOS v4.0
 22404                                  
 22405                                  	; MSDOS 6.0
 22406                                  	; mov 	ax,[es:di+11h]
 22407 00003ABF 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 22408 00003AC3 A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 22409                                  	;mov	ax,[es:di+13h]
 22410 00003AC6 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 22411 00003ACA A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 22412                                  
 22413                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 22414                                  
 22415                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22416 00003ACD C42E[8A05]              	LES     BP,[THISDPB]
 22417                                  
 22418 00003AD1 E8F9FD                  	call	BREAKDOWN
 22419                                  
 22420 00003AD4 A1[CE05]                	MOV     AX,[BYTPOS]
 22421 00003AD7 8B16[D005]              	MOV     DX,[BYTPOS+2]
 22422 00003ADB E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 22423 00003ADD 01C8                    	ADD     AX,CX
 22424 00003ADF 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 22425                                  
 22426                                  	;mov	bx,[es:bp+2]
 22427 00003AE2 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 22428                                  
 22429                                  	; MSDOS 3.3
 22430                                  	;cmp	dx,bx
 22431                                  	;jnb	short WRTERR33
 22432                                  	;div	bx
 22433                                  	;mov	bx,ax
 22434                                  	;OR	DX,DX
 22435                                  	;JNZ	short CALCLUS
 22436                                  	;dec	ax
 22437                                  ;CALCLUS:
 22438                                  	; MSDOS 3.3
 22439                                  	;mov	cl,[es:bp+5]
 22440                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22441                                  	;shr	ax,cl
 22442                                  	;push	ax
 22443                                  	;push	dx
 22444                                  	;push	es
 22445                                  	;les	di,[THISSFT]
 22446                                  	;;mov	ax,[es:di+11h]
 22447                                  	;;mov	dx,[es:di+13h]
 22448                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 22449                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 22450                                  	;pop	es
 22451                                  	;;DX:AX = current file size (in bytes).
 22452                                  	;;div	word [es:bp+2]
 22453                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22454                                  	;mov	cx,ax
 22455                                  	;or	dx,dx
 22456                                  	;jz	short NORND
 22457                                  	;inc	ax
 22458                                  ;NORND:
 22459                                  	; MSDOS 6.0
 22460 00003AE6 E8DE02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 22461 00003AE9 89C6                    	MOV	SI,AX
 22462 00003AEB 890E[0706]                      MOV	[HIGH_SECTOR],CX
 22463                                  
 22464                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 22465                                  
 22466 00003AEF 09D2                    	OR	DX,DX
 22467 00003AF1 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 22468 00003AF2 89CA                    	MOV	DX,CX			;M039
 22469 00003AF4 7506                    	JNZ	short CALCLUS
 22470 00003AF6 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 22471 00003AF9 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 22472                                  
 22473                                  CALCLUS:
 22474                                  	; MSDOS 6.0
 22475 00003AFC E8EF02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 22476 00003AFF 5A                      	POP	DX
 22477                                  
 22478                                  ;       AX = Last cluster to write.
 22479                                  ;       DX = # of bytes in last sector to write (the "tail").
 22480                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 22481                                  
 22482 00003B00 50                      	PUSH	AX
 22483 00003B01 52                      	PUSH	DX
 22484                                  ;M039
 22485 00003B02 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 22486 00003B06 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 22487 00003B09 E8BB02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 22488 00003B0C 890E[0E06]              	mov	[TEMP_VAR2],cx
 22489 00003B10 890E[CA05]              	mov	[VALSEC+2],cx
 22490 00003B14 89C1                    	mov	cx,ax
 22491 00003B16 89F3                    	mov	bx,si
 22492                                  
 22493                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 22494                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 22495                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 22496                                  ;                     DX = # of bytes in last sector of current file.
 22497                                  ;M039
 22498 00003B18 09D2                    	OR	DX,DX
 22499 00003B1A 7408                    	JZ	short NORND
 22500 00003B1C 83C001                  	ADD	AX,1            	;Round up if any remainder	;AC000;
 22501 00003B1F 8316[CA05]00            	ADC	word [VALSEC+2],0
 22502                                  NORND:	
 22503                                  	; MSDOS 3.3 & MSDOS 6.0
 22504 00003B24 A3[C805]                	MOV     [VALSEC],AX
 22505                                  
 22506                                  ;       [VALSEC] = Last sector of current file.
 22507                                  
 22508 00003B27 31C0                    	XOR     AX,AX
 22509 00003B29 A3[DE05]                	MOV     [GROWCNT],AX
 22510 00003B2C A3[E005]                	MOV     [GROWCNT+2],AX
 22511 00003B2F 58                      	POP     AX
 22512                                  
 22513                                  	; MSDOS 6.0
 22514 00003B30 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 22515 00003B34 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 22516 00003B38 7264                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 22517 00003B3A 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 22518 00003B3C 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 22519 00003B3E 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 22520 00003B42 EB09                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 22521                                  lowsec:
 22522 00003B44 BF0000                  	MOV	DI,0			;F.C. >32mb
 22523                                  	; MSDOS 3.3 & MSDOS 6.0
 22524 00003B47 29CB                    	SUB	BX,CX			; Number of full sectors
 22525 00003B49 7253                    	JB	short NOGROW
 22526 00003B4B 7444                    	JZ	short TESTTAIL
 22527                                  yesgrow:
 22528                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22529 00003B4D 89D1                    	MOV     CX,DX
 22530 00003B4F 93                      	XCHG    AX,BX
 22531                                  	;mul	word [es:bp+2]
 22532 00003B50 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 22533                                  	
 22534                                  	; MSDOS 6.0
 22535 00003B54 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb save dx		;AN000;
 22536 00003B58 A3[0E06]                	MOV	[TEMP_VAR2],AX		;M039; F.C. >32mb save ax	;AN000;
 22537 00003B5B 89F8                    	MOV	AX,DI			;F.C. >32mb			;AN000;
 22538                                  	;mul	word [es:bp+2]
 22539 00003B5D 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 22540                                  	
 22541 00003B61 0306[0706]              	ADD	AX,[HIGH_SECTOR]	;F.C. >32mb add lower value	;AN000;
 22542 00003B65 89C2                    	MOV	DX,AX			;F.C. >32mb DX:AX is the result of ;AN000;
 22543 00003B67 A1[0E06]                	MOV	AX,[TEMP_VAR2]		;M039; F.C. >32mb a 32 bit multiply ;AN000;
 22544                                  
 22545                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22546 00003B6A 29C8                    	SUB     AX,CX			; Take off current "tail"
 22547 00003B6C 83DA00                  	SBB     DX,0			; 32-bit extension
 22548 00003B6F 01D8                    	ADD     AX,BX			; Add on new "tail"
 22549 00003B71 83D200                  	ADC     DX,0			; ripple tim's head off
 22550 00003B74 EB21                    	JMP     SHORT SETGRW
 22551                                  
 22552                                  HAVSTART:
 22553                                  	;int 3
 22554 00003B76 89C1                    	MOV     CX,AX
 22555 00003B78 E89711                  	call	SKPCLP
 22556                                  	;JCXZ	DOWRTJ
 22557                                  	; 16/12/2022
 22558 00003B7B E357                    	jcxz	DOWRT
 22559                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22560                                  	;jcxz	DOWRTJ
 22561                                  
 22562 00003B7D E83C13                  	call	ALLOCATE
 22563                                  	;JNC	short DOWRTJ
 22564                                  	; 16/12/2022
 22565 00003B80 7352                    	jnc	short DOWRT
 22566                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22567                                  	;jnc	short DOWRTJ
 22568                                  
 22569                                  	;entry   WRTERR
 22570                                  WRTERR:
 22571 00003B82 B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort	;AN000;
 22572                                  
 22573                                  	;entry WRTERR22
 22574                                  WRTERR22:
 22575 00003B84 A0[7605]                	MOV     AL,[THISDRV]		;MS.				;AN000;
 22576                                  
 22577                                  	; 27/07/2018
 22578                                  WRTERR33:
 22579                                  	;MOV	CX,0			;No bytes transferred
 22580 00003B87 31C9                    	XOR     CX,CX
 22581                                  
 22582 00003B89 C43E[9E05]              	LES     DI,[THISSFT]
 22583                                  	;CLC ; 19/05/2019
 22584                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22585                                  	; 16/12/2022
 22586                                  	;clc
 22587 00003B8D C3                      	retn
 22588                                  
 22589                                  	; 16/12/2022
 22590                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22591                                  ;DOWRTJ:
 22592                                  	;JMP	short DOWRT
 22593                                  
 22594                                  ACC_ERRWJ:
 22595                                  	; 10/08/2018
 22596                                  	;JMP	SET_ACC_ERRW
 22597                                  	; 16/12/2022
 22598 00003B8E E9D4FD                  	jmp	SET_ACC_ERR_DS
 22599                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22600                                  	;jmp	SET_ACC_ERRW
 22601                                  
 22602                                  TESTTAIL:
 22603 00003B91 29D0                    	SUB     AX,DX
 22604 00003B93 7609                    	JBE	short NOGROW
 22605 00003B95 31D2                    	XOR     DX,DX
 22606                                  SETGRW:
 22607 00003B97 A3[DE05]                	MOV	[GROWCNT],AX
 22608 00003B9A 8916[E005]              	MOV	[GROWCNT+2],DX
 22609                                  NOGROW:
 22610 00003B9E 58                      	POP     AX
 22611 00003B9F 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 22612 00003BA3 E84C11                  	call	FNDCLUS
 22613 00003BA6 72E6                    	JC	short ACC_ERRWJ
 22614 00003BA8 891E[BC05]              	MOV     [CLUSNUM],BX
 22615 00003BAC 8916[BA05]              	MOV     [LASTPOS],DX
 22616                                  
 22617 00003BB0 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 22618 00003BB2 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 22619 00003BB4 E3C0                    	JCXZ    HAVSTART        ; See if no more data
 22620 00003BB6 51                      	PUSH    CX              ; No. of clusters short of first
 22621 00003BB7 89C1                    	MOV     CX,AX
 22622 00003BB9 E80013                  	call	ALLOCATE
 22623 00003BBC 59                      	POP     CX
 22624 00003BBD 72C3                    	JC	short WRTERR
 22625 00003BBF 8B16[BA05]              	MOV     DX,[LASTPOS]
 22626 00003BC3 42                      	INC     DX
 22627 00003BC4 49                      	DEC     CX
 22628 00003BC5 7405                    	JZ	short NOSKIP
 22629 00003BC7 E84811                  	call	SKPCLP
 22630 00003BCA 72C2                    	JC	short ACC_ERRWJ
 22631                                  NOSKIP:
 22632 00003BCC 891E[BC05]              	MOV     [CLUSNUM],BX
 22633 00003BD0 8916[BA05]              	MOV     [LASTPOS],DX
 22634                                  DOWRT:
 22635 00003BD4 833E[D205]00            	CMP     word [BYTCNT1],0
 22636 00003BD9 7409                    	JZ	short WRTMID
 22637 00003BDB 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22638 00003BDF E8BF11                  	call	BUFWRT
 22639 00003BE2 72AA                    	JC	short ACC_ERRWJ
 22640                                  WRTMID:
 22641 00003BE4 A1[D605]                	MOV     AX,[SECCNT]
 22642 00003BE7 09C0                    	OR      AX,AX
 22643                                  	; 20/11/2022
 22644 00003BE9 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 22645 00003BEB 0106[C405]              	ADD     [SECPOS],AX
 22646                                  	; 19/05/2019
 22647                                  	; MSDOS 6.0
 22648 00003BEF 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 22649 00003BF4 E80912                  	call	NEXTSEC
 22650                                  	; 16/12/2022
 22651 00003BF7 7295                    	JC	short ACC_ERRWJ
 22652                                  	;JC	short SET_ACC_ERRW	;M039
 22653 00003BF9 C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 22654 00003BFE 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 22655 00003C02 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22656 00003C06 8B0E[D605]              	MOV     CX,[SECCNT]
 22657                                  WRTLP:
 22658 00003C0A E82412                  	call	OPTIMIZE
 22659 00003C0D 7248                    	JC	short SET_ACC_ERRW
 22660                                  	; 16/12/2022
 22661                                  	;JC	short ACC_ERRWJ
 22662                                  
 22663                                  ;M039
 22664                                  ;       DI = Next physical cluster.
 22665                                  ;       AX = # sectors remaining.
 22666                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 22667                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22668                                  ;	     sectors, also termed an "Extent".)
 22669                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22670                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22671                                  ;
 22672                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22673                                  ;	are in Extent; they are being over-written.
 22674                                  
 22675 00003C0F 57                      	push    di
 22676 00003C10 50                      	push    ax
 22677                                  
 22678                                  	; MSDOS 3.3
 22679                                  	; IBMDOS.COM (1987) - Offset 4497h
 22680                                  	;push	dx
 22681                                  	;push	bx
 22682                                  	;mov	al,[es:bp]
 22683                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 22684                                  	;mov	bx,cx
 22685                                  	;add	bx,dx	; (bx = Extent end)
 22686                                  
 22687                                  ;	DX = Extent start.
 22688                                  ;	BX = Extent end.
 22689                                  ;	AL = Drive #.
 22690                                  
 22691                                  	;call	SETVISIT
 22692                                  
 22693                                  ;wbufq1:
 22694                                  	;;or	byte [di+5],20h
 22695                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22696                                  	;;cmp	al,[di+4]	
 22697                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 22698                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 22699                                  	;;cmp	[di+6],dx
 22700                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 22701                                  	;jb	short wbufq2
 22702                                  	;;cmp	[di+6],bx
 22703                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 22704                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 22705                                  
 22706                                  	;; Buffer sector is in the Extent
 22707                                  
 22708                                  	;;mov	word [di+4],20FFh
 22709                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 22710                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 22711                                  	;				; .buf_flags, AH = 0, reset/clear
 22712                                  	;call	SCANPLACE
 22713                                  ;wbufq2:
 22714                                  	;call	SKIPVISIT
 22715                                  	;jnz	short wbufq1
 22716                                  	;pop	bx
 22717                                  	;pop	dx
 22718                                  
 22719                                          ; MSDOS 6.0
 22720 00003C11 E82D01                  	call	DskWrtBufPurge		;DS trashed.
 22721                                  
 22722                                  ;ASSUME DS:NOTHING
 22723                                  ;M039
 22724                                  	; MSDOS 3.3 & MSDOS 6.0
 22725                                  ;hkn; SS override for DMAADD and ALLOWED
 22726 00003C14 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 22727                                  	;mov	byte [ss:ALLOWED],38h
 22728 00003C19 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22729                                  
 22730                                  ;	put logic from DWRITE in-line here so we can modify it
 22731                                  ;	for DISK FULL conditions.
 22732                                  
 22733                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22734                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 22735                                  
 22736                                  	; 16/12/2022
 22737                                  	; MSDOS 3.3 (& MSDOS 5.0)
 22738                                  	;call	DWRITE
 22739                                  
 22740                                  ;DWRITE_OKAY:
 22741                                  
 22742                                  	; 16/12/2022
 22743                                  	; MSDOS 5.0 (& MSDOS 3.3)
 22744                                  	;pop	cx
 22745                                  	;pop	bx
 22746                                  	;push	ss
 22747                                  	;pop	ds
 22748                                  	;jc	short SET_ACC_ERRW
 22749                                  	;jcxz	WRTLAST
 22750                                  	;mov	dl,0
 22751                                  	;inc	word [LASTPOS]
 22752                                  	;jmp	short WRTLP
 22753                                  
 22754                                  	; 16/12/2022
 22755                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22756                                  DWRITE_LUP:
 22757                                  	; 23/07/2019 - Retro DOS v3.2
 22758                                  
 22759                                  	; MSDOS 6.0
 22760 00003C1F E8D9FB                  	call	DSKWRITE
 22761 00003C22 7417                    	jz	short DWRITE_OKAY
 22762                                  
 22763                                  ;;	int	3
 22764                                  
 22765 00003C24 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 22766 00003C26 7423                    	jz	short DWRITE_DISK_FULL
 22767                                  
 22768                                  	; 16/12/2022
 22769                                  
 22770                                  ;;hkn; SS override
 22771 00003C28 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 22772 00003C2E E8F9FB                  	call	HARDERRRW
 22773 00003C31 3C01                    	CMP	AL,1		; Check for retry
 22774 00003C33 74EA                    	JZ	short DWRITE_LUP
 22775                                  
 22776                                  	; 16/12/2022
 22777                                  	; 23/07/2019
 22778                                  	;POP	CX ; *4*
 22779                                  	;POP	BX ; *5*
 22780                                  	;
 22781                                  	;push	ss
 22782                                  	;pop	ds
 22783                                  	;
 22784                                  
 22785                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22786                                  
 22787                                  	; 16/12/2022
 22788 00003C35 3C03                    	CMP	AL,3		; Check for FAIL
 22789 00003C37 F8                      	CLC
 22790 00003C38 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 22791 00003C3A F9                      	STC
 22792                                  
 22793                                  DWRITE_OKAY:
 22794                                  	; 16/12/2022
 22795                                  	; 23/07/2019
 22796                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22797 00003C3B 59                      	POP	CX ; *4*
 22798 00003C3C 5B                      	POP	BX ; *5*
 22799                                  
 22800                                  ;       CX = # sectors remaining.
 22801                                  ;       BX = Next physical cluster.
 22802                                  
 22803                                  ;hkn; SS override
 22804                                          ;Context DS
 22805                                  	; 16/12/2022
 22806                                  	;push	ss
 22807                                  	;pop	ds
 22808                                  
 22809                                  	; 16/12/2022
 22810 00003C3D 7218                    	jc	short SET_ACC_ERRW
 22811                                  
 22812                                  	; 16/12/2022
 22813 00003C3F 16                      	push	ss
 22814 00003C40 1F                      	pop	ds
 22815                                  
 22816 00003C41 E317                    	JCXZ    WRTLAST
 22817                                  
 22818                                  	; 10/02/2024
 22819 00003C43 B200                    	MOV	DL,0
 22820                                  	;xor	dl,dl ; 23/07/2019
 22821 00003C45 FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 22822 00003C49 EBBF                    	JMP     short WRTLP
 22823                                  
 22824                                  	; 23/07/2019 - Retro DOS v3.2
 22825                                  	; 09/08/2018
 22826                                  	; MSDOS 6.0
 22827                                  DWRITE_DISK_FULL:
 22828                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 22829                                  	; 16/12/2022
 22830 00003C4B 16                      	push	ss
 22831 00003C4C 1F                      	pop	ds
 22832 00003C4D 59                      	pop	cx		; unjunk stack
 22833 00003C4E 5B                      	pop	bx
 22834 00003C4F C606[0B06]01            	mov	byte [DISK_FULL],1
 22835                                  	;stc
 22836 00003C54 E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 22837                                  
 22838                                  	; 16/12/2022
 22839                                  SET_ACC_ERRW:
 22840 00003C57 E90BFD                  	jmp	SET_ACC_ERR_DS
 22841                                  
 22842                                  WRTLAST:
 22843 00003C5A A1[D405]                	MOV     AX,[BYTCNT2]
 22844 00003C5D 09C0                    	OR      AX,AX
 22845 00003C5F 7413                    	JZ	short FINWRT
 22846 00003C61 A3[D205]                	MOV     [BYTCNT1],AX
 22847 00003C64 E89911                  	call	NEXTSEC
 22848 00003C67 72EE                    	JC	short SET_ACC_ERRW
 22849 00003C69 C706[CC05]0000          	MOV     word [BYTSECPOS],0
 22850 00003C6F E82F11                  	call	BUFWRT
 22851 00003C72 72E3                    	JC	short SET_ACC_ERRW
 22852                                  FINWRT:
 22853 00003C74 C43E[9E05]              	LES     DI,[THISSFT]
 22854 00003C78 A1[DE05]                	MOV     AX,[GROWCNT]
 22855 00003C7B 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 22856 00003C7F 09C0                    	OR      AX,AX
 22857 00003C81 7502                    	JNZ	short UPDATE_size
 22858 00003C83 E30F                    	JCXZ    SAMSIZ
 22859                                  UPDATE_size:
 22860                                  	;add	[es:di+11h],ax
 22861 00003C85 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 22862                                  	;adc	[es:di+13h],cx
 22863 00003C89 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 22864                                  
 22865                                  ; Make sure that all other SFT's see this growth also.
 22866                                  
 22867 00003C8D B80100                  	MOV     AX,1
 22868                                  ;if installed
 22869                                  	;Call	JShare + 14 * 4
 22870 00003C90 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22871                                  ;else
 22872                                  ;	Call    ShSU
 22873                                  ;endif
 22874                                  
 22875                                  SAMSIZ:
 22876 00003C94 E966FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 22877                                  
 22878                                  	; 16/12/2022
 22879                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22880                                  ;SET_ACC_ERRW:
 22881                                  	;jmp	SET_ACC_ERR_DS
 22882                                  
 22883                                  WRTEOF:
 22884 00003C97 89C1                    	MOV     CX,AX
 22885 00003C99 09D1                    	OR      CX,DX
 22886 00003C9B 746C                    	JZ	short KILLFIL
 22887 00003C9D 83E801                  	SUB     AX,1
 22888 00003CA0 83DA00                  	SBB     DX,0
 22889                                  
 22890                                  	; MSDOS 3.3
 22891                                  	;;div	word [es:bp+2]
 22892                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22893                                  	;;mov	cl,[es:bp+5]
 22894                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 22895                                  	;shr	ax,cl
 22896                                  
 22897                                  	; MSDOS 6.0
 22898 00003CA3 53                      	PUSH	BX
 22899                                  	;mov	bx,[es:bp+2]
 22900 00003CA4 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 22901 00003CA8 E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 22902 00003CAB 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 22903 00003CAC 89CA                    	MOV	DX,CX			      ;M039
 22904 00003CAE 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 22905 00003CB2 E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 22906                                  
 22907 00003CB5 89C1                    	MOV     CX,AX
 22908 00003CB7 E83810                  	call	FNDCLUS
 22909                                  SET_ACC_ERRWJ2:
 22910 00003CBA 729B                    	JC	short SET_ACC_ERRW
 22911                                  
 22912 00003CBC E326                    	JCXZ    RELFILE
 22913 00003CBE E8FB11                  	call	ALLOCATE
 22914                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 22915                                  	; 16/12/2022
 22916 00003CC1 7303                    	jnc	short UPDATE
 22917 00003CC3 E9BCFE                  	JMP	WRTERR
 22918                                  UPDATE:
 22919 00003CC6 C43E[9E05]              	LES	DI,[THISSFT]
 22920 00003CCA A1[CE05]                	MOV	AX,[BYTPOS]
 22921                                  	;mov	[es:di+11h],ax
 22922 00003CCD 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 22923 00003CD1 A1[D005]                	MOV	AX,[BYTPOS+2]
 22924                                  	;mov	[es:di+13h],ax
 22925 00003CD4 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 22926                                  ;
 22927                                  ; Make sure that all other SFT's see this growth also.
 22928                                  ;
 22929 00003CD8 B80200                  	MOV     AX,2
 22930                                  ;if installed
 22931                                  	;Call	JShare + 14 * 4
 22932 00003CDB FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22933                                  ;else
 22934                                  ;	Call    ShSU
 22935                                  ;endif
 22936 00003CDF 31C9                    	XOR     CX,CX
 22937 00003CE1 E936FD                  	jmp	ADDREC
 22938                                  
 22939                                  	; 16/12/2022
 22940                                  ;WRTERRJ: 
 22941                                  	;JMP	WRTERR
 22942                                  
 22943                                  ;;;;;;;;;;;;;;;; 7/18/86
 22944                                  ;;;;;;;;;;;;;;;;
 22945                                  
 22946                                  RELFILE:
 22947                                  	; MSDOS 6.0
 22948 00003CE4 06                      	PUSH	ES			;AN002; BL Reset Lstclus and cluspos to
 22949 00003CE5 C43E[9E05]              	LES	DI,[THISSFT]		;AN002; BL beginning of file if current
 22950                                  	;cmp	dx,[es:di+19h]
 22951 00003CE9 263B5519                	CMP	DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 22952 00003CED 730E                    	JAE	short SKIPRESET			;AN002; BL
 22953                                  	;mov	[es:di+19h],0
 22954 00003CEF 26C745190000            	MOV	word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 22955                                  	;mov	dx,[es:di+0Bh]
 22956 00003CF5 268B550B                	MOV	DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 22957                                  	;mov	[es:di+35h],dx
 22958 00003CF9 26895535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 22959                                  SKIPRESET:					;AN002; BL
 22960 00003CFD 07                      	POP	ES                    		;AN002; BL
 22961                                  ;
 22962 00003CFE BAFFFF                  	MOV	DX,0FFFFH
 22963 00003D01 E86612                  	call	RELBLKS
 22964                                  	; 16/12/2022
 22965                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22966 00003D04 73C0                    	jnc	short UPDATE
 22967                                  SET_ACC_ERRWJ:
 22968                                  	;JC	short SET_ACC_ERRWJ2
 22969                                  	;JMP	SHORT UPDATE
 22970                                  	; 16/12/2022
 22971 00003D06 E95CFC                  	jmp	SET_ACC_ERR_DS
 22972                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22973                                  	;JC	short SET_ACC_ERRWJ2
 22974                                  	;JMP	SHORT UPDATE
 22975                                  
 22976                                  KILLFIL:
 22977 00003D09 31DB                    	XOR	BX,BX
 22978 00003D0B 06                      	PUSH	ES
 22979 00003D0C C43E[9E05]              	LES	DI,[THISSFT]
 22980                                  	;mov	[es:di+19h],bx
 22981 00003D10 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 22982                                  	;mov	[es:di+35h],bx ; 04/05/2019
 22983 00003D14 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 22984                                  	;xchg	bx,[es:di+0Bh]
 22985 00003D18 26875D0B                	XCHG	BX,[ES:DI+SF_ENTRY.sf_firclus]
 22986 00003D1C 07                      	POP	ES
 22987                                  
 22988 00003D1D 09DB                    	OR	BX,BX
 22989                                  	;JZ	short UPDATEJ
 22990                                  	; 16/12/2022
 22991 00003D1F 74A5                    	jz	short UPDATE
 22992                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22993                                  	;jz	short UPDATEJ
 22994                                  
 22995                                  ;; 10/23/86 FastOpen update
 22996 00003D21 06                      	PUSH	ES			; since first cluster # is 0
 22997 00003D22 55                      	PUSH	BP			; we must delete the old cache entry
 22998 00003D23 50                      	PUSH	AX
 22999 00003D24 51                      	PUSH	CX
 23000 00003D25 52                      	PUSH	DX
 23001 00003D26 C42E[8A05]              	LES	BP,[THISDPB]		; get current DPB
 23002                                  	; 15/12/2022
 23003 00003D2A 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23004                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23005                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23006 00003D2E 89D9                    	MOV	CX,BX			; first cluster #
 23007 00003D30 B402                    	MOV	AH,2			; delete cache entry by drive:firclus
 23008 00003D32 E82AEA                  	call	FastOpen_Update		; call fastopen
 23009 00003D35 5A                      	POP	DX
 23010 00003D36 59                      	POP	CX
 23011 00003D37 58                      	POP	AX
 23012 00003D38 5D                      	POP	BP
 23013 00003D39 07                      	POP	ES
 23014                                  ;; 10/23/86 FastOpen update
 23015                                  
 23016 00003D3A E82B12                  	call	RELEASE
 23017 00003D3D 72C7                    	JC	short SET_ACC_ERRWJ
 23018                                  UPDATEJ:
 23019                                  	; 20/11/2022
 23020 00003D3F EB85                    	JMP	short UPDATE ; 10/08/2018
 23021                                  
 23022                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23023                                  ;----------------------------------------------------------------------------
 23024                                  ;
 23025                                  ; Procedure Name : DskWrtBufPurge
 23026                                  ;
 23027                                  ; Inputs:
 23028                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23029                                  ;	     sectors, also termed an "Extent".)
 23030                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23031                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23032                                  ;
 23033                                  ; Function:
 23034                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23035                                  ;	are in Extent; they are being over-written.
 23036                                  ;
 23037                                  ; Outputs:
 23038                                  ;       (Same as Input.)
 23039                                  ; Uses:
 23040                                  ;       All registers except DS,AX,SI,DI preserved.
 23041                                  ;       SS override for all global variables.
 23042                                  ;----------------------------------------------------------------------------
 23043                                  ;M039: Created
 23044                                  
 23045                                  ;procedure   DskWrtBufPurge,NEAR
 23046                                  ;
 23047                                  ;ASSUME  DS:NOTHING
 23048                                  
 23049                                  ; 04/05/2019 - Retro DOS v4.0
 23050                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23051                                  
 23052                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23053                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23054                                  
 23055                                  DskWrtBufPurge:
 23056                                  	;SaveReg <bx,cx>
 23057 00003D41 53                      	push	bx
 23058 00003D42 51                      	push	cx
 23059                                  
 23060 00003D43 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23061 00003D48 89DE                    	mov	si,bx
 23062 00003D4A 01D1                    	add	cx,dx
 23063 00003D4C 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23064                                  
 23065                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23066                                  	;;mov	al,[es:bp+0]
 23067                                  	;mov	al,[es:bp+DPB.DRIVE]
 23068                                  	; 15/12/2022
 23069 00003D4F 268A4600                	mov	al,[es:bp]
 23070                                  
 23071                                  ;	BX:DX = Extent start.
 23072                                  ;	SI:CX = Extent end + 1.
 23073                                  ;	AL = Drive #
 23074                                  
 23075 00003D53 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23076 00003D59 7431                    	je	short nosc		; -no, jump.
 23077                                  
 23078                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23079                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23080                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23081                                  
 23082 00003D5B 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23083 00003D60 752A                    	jne	short nosc		; -no, jump.
 23084                                  
 23085 00003D62 50                      	push    ax
 23086 00003D63 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23087 00003D67 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23088                                  
 23089                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23090                                  	;jbe	short sc5		; -yes, jump.
 23091                                  
 23092 00003D6C 39FE                    	cmp	si,di
 23093 00003D6E 7502                    	jne	short sc01
 23094 00003D70 39C1                    	cmp	cx,ax
 23095                                  sc01: 
 23096 00003D72 7617                    	jbe	short sc5
 23097                                  
 23098 00003D74 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23099 00003D79 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23100                                  	
 23101                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23102                                  	;jae	short sc5		; -yes, jump.
 23103                                  
 23104 00003D7C 39FB                    	cmp	bx,di
 23105 00003D7E 7502                    	jne	short sc02
 23106 00003D80 39C2                    	cmp	dx,ax
 23107                                  sc02:
 23108 00003D82 7307                    	jnb	short sc5
 23109                                  
 23110 00003D84 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23111                                  sc5:	
 23112 00003D8B 58                      	pop     ax
 23113                                  
 23114                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23115                                  ;	written.
 23116                                  
 23117                                  nosc:	
 23118 00003D8C E8151C                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23119                                  
 23120                                  _bufq:	
 23121                                  	;cmpo	al,[di+4]
 23122 00003D8F 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23123 00003D92 7527                    	jne	short bufq5		; -no, jump.
 23124                                  
 23125                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23126                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23127                                  
 23128                                  	;cmp	bx,[di+8]
 23129 00003D94 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23130 00003D97 7503                    	jne	short bufq04
 23131                                  	;cmp	dx,[di+6]
 23132 00003D99 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23133                                  bufq04:
 23134 00003D9C 771D                    	ja	short bufq5
 23135                                  
 23136                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23137                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23138                                  
 23139                                  	;cmp	si,[di+8]
 23140 00003D9E 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23141 00003DA1 7503                    	jne	short bufq05
 23142                                  	;cmp	cx,[di+6]
 23143 00003DA3 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23144                                  bufq05:
 23145 00003DA6 7613                    	jbe	short bufq5
 23146                                  
 23147                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23148                                  
 23149                                  	;test	byte [di+5],40h
 23150 00003DA8 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23151 00003DAC 7403                    	jz	short bufq4		; -no, jump.
 23152 00003DAE E8641E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23153                                  bufq4:
 23154                                  	;mov	word [di+4],20FFh
 23155 00003DB1 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23156                                  
 23157 00003DB6 E8FD1B                  	call	SCANPLACE
 23158 00003DB9 EB02                    	jmp     short bufq6
 23159                                  bufq5: 
 23160 00003DBB 8B3D                    	mov     di,[di]
 23161                                  	;mov	di,[di+BUFFINFO.buf_next]
 23162                                  bufq6: 
 23163 00003DBD 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23164 00003DC2 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23165                                  	
 23166                                  	;RestoreReg <cx,bx>
 23167 00003DC4 59                      	pop	cx
 23168 00003DC5 5B                      	pop	bx
 23169 00003DC6 C3                      	retn
 23170                                  
 23171                                  ;EndProc DskWrtBufPurge
 23172                                  
 23173                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23174                                  ;----------------------------------------------------------------------------
 23175                                  ;
 23176                                  ; Procedure Name : DIV32
 23177                                  ;
 23178                                  ; Inputs:
 23179                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23180                                  ; Function:
 23181                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23182                                  ; Outputs:
 23183                                  ;       CX:AX = quotient , DX= remainder
 23184                                  ; Uses:
 23185                                  ;       All registers except AX,CX,DX preserved.
 23186                                  ;----------------------------------------------------------------------------
 23187                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23188                                  
 23189                                  ; 04/05/2019 - Retro DOS v4.0
 23190                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23191                                  
 23192                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23193                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23194                                  
 23195                                  DIV32:
 23196 00003DC7 81FB0002                	cmp	bx,512
 23197 00003DCB 7515                    	jne	short div5
 23198                                  
 23199 00003DCD 89D1                    	mov	cx,dx
 23200 00003DCF 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23201 00003DD1 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23202 00003DD5 88E0                    	mov	al,ah
 23203 00003DD7 88CC                    	mov	ah,cl
 23204 00003DD9 88E9                    	mov	cl,ch
 23205 00003DDB 30ED                    	xor	ch,ch
 23206 00003DDD D1E9                    	shr	cx,1
 23207 00003DDF D1D8                    	rcr	ax,1
 23208 00003DE1 C3                      	retn
 23209                                  div5:	
 23210 00003DE2 89C1                    	mov	cx,ax
 23211 00003DE4 89D0                    	mov	ax,dx
 23212 00003DE6 31D2                    	xor	dx,dx
 23213 00003DE8 F7F3                    	div	bx              ; 0:AX/BX
 23214 00003DEA 91                      	xchg	cx,ax
 23215 00003DEB F7F3                    	div	bx              ; DX:AX/BX
 23216 00003DED C3                      	retn
 23217                                  
 23218                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23219                                  ;----------------------------------------------------------------------------
 23220                                  ;
 23221                                  ; Procedure Name : SHR32
 23222                                  ;
 23223                                  ; Inputs:
 23224                                  ;	DX:AX = 32 bit sector number
 23225                                  ; Function:
 23226                                  ;       Perform 32 bit shift right
 23227                                  ; Outputs:
 23228                                  ;	AX = cluster number
 23229                                  ;	ZF = 1 if no error
 23230                                  ;	   = 0 if error (cluster number > 64k)
 23231                                  ; Uses:
 23232                                  ;       DX,CX
 23233                                  ;---------------------------------------------------------------------------
 23234                                  ; M017	- SHR32 rewritten for better performance
 23235                                  ; M039	- Additional optimization
 23236                                  
 23237                                  ; 04/05/2019 - Retro DOS v4.0
 23238                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23239                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23240                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23241                                  
 23242                                  SHR32:
 23243                                  	;mov	cl,[es:bp+5]
 23244 00003DEE 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23245 00003DF2 30ED                    	xor	ch,ch	    ;ZF=1
 23246 00003DF4 E306                    	jcxz	norota
 23247                                  
 23248                                  rotashft2:
 23249 00003DF6 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23250 00003DF8 D1D8                    	rcr	ax,1	    ;ZF not affected.
 23251 00003DFA E2FA                    	loop	rotashft2
 23252                                  norota:
 23253 00003DFC C3                      	retn
 23254                                  
 23255                                  ;============================================================================
 23256                                  ; DIR.ASM, MSDOS 6.0, 1991
 23257                                  ;============================================================================
 23258                                  ; 27/07/2018 - Retro DOS v3.0
 23259                                  ; 19/05/2019 - Retro DOS v4.0
 23260                                  
 23261                                  ;	TITLE	DIR - Directory and path cracking
 23262                                  ;	NAME	Dir
 23263                                  
 23264                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23265                                  ;---------------------------------------------------------------------------
 23266                                  ;
 23267                                  ; Procedure Name : FINDENTRY,SEARCH
 23268                                  ;
 23269                                  ; Inputs:
 23270                                  ;	[THISDPB] set
 23271                                  ;	[SECCLUSPOS] = 0
 23272                                  ;	[DIRSEC] = Starting directory sector number
 23273                                  ;	[CLUSNUM] = Next cluster of directory
 23274                                  ;	[CLUSFAC] = Sectors/Cluster
 23275                                  ;	[NAME1] = Name to look for
 23276                                  ; Function:
 23277                                  ;	Find file name in disk directory.
 23278                                  ;	"?" matches any character.
 23279                                  ; Outputs:
 23280                                  ;	Carry set if name not found
 23281                                  ;	ELSE
 23282                                  ;	Zero set if attributes match (always except when creating)
 23283                                  ;	AH = Device ID (bit 7 set if not disk)
 23284                                  ;	[THISDPB] = Base of drive parameters
 23285                                  ;	DS = DOSGROUP
 23286                                  ;	ES = DOSGROUP
 23287                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23288                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23289                                  ;	[CURBUF] has directory record with match
 23290                                  ;	[NAME1] has file name
 23291                                  ;	[LASTENT] is entry number of the entry
 23292                                  ; All other registers destroyed.
 23293                                  ;----------------------------------------------------------------------------
 23294                                  
 23295                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23296                                  ;hkn; this point.
 23297                                  
 23298                                  SEARCH:
 23299                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23300                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23301                                  
 23302                                  	; 19/05/2019 - Retro DOS v4.0
 23303                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23304                                  
 23305                                  	; 27/07/2018 - Retro DOS v3.0
 23306                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23307                                  	; 15/03/2018 - Retro DOS v2.0
 23308                                  
 23309                                  	;entry	FindEntry
 23310                                  FINDENTRY:
 23311 00003DFD E83A04                  	call	STARTSRCH
 23312 00003E00 A0[6B05]                	MOV	AL,[ATTRIB]
 23313                                  	;and	al,9Eh
 23314 00003E03 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23315                                  	;cmp	al,8
 23316 00003E05 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23317 00003E07 7503                    	JNZ	short NOTVOLSRCH	; No
 23318 00003E09 E87301                  	CALL	SETROOTSRCH		; Yes force search of root
 23319                                  NOTVOLSRCH:
 23320 00003E0C E80601                  	CALL	GETENTRY
 23321 00003E0F 7303                    	JNC	short SRCH
 23322 00003E11 E99500                  	JMP	SETESRET
 23323                                  
 23324                                  	;entry	Srch
 23325                                  SRCH:
 23326 00003E14 1E                      	PUSH	DS
 23327 00003E15 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23328                                  
 23329                                  ;	(DS:BX) = directory entry address
 23330                                  
 23331 00003E19 8A27                    	mov	ah,[BX]
 23332                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23333 00003E1B 08E4                    	OR	AH,AH			; End of directory?
 23334 00003E1D 743A                    	JZ	short FREE
 23335                                  
 23336                                  ;hkn; SS override
 23337 00003E1F 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23338 00003E24 7433                    	JZ	short FREE
 23339                                  	;test	byte [bx+0Bh],8
 23340 00003E26 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23341                                  					; Volume ID file?
 23342 00003E2A 7405                    	JZ	short CHKFNAM 		; NO
 23343                                  
 23344                                  ;hkn; SS override
 23345 00003E2C 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 23346                                  CHKFNAM:
 23347                                  ;	Context ES
 23348 00003E31 8CD6                    	MOV	SI,SS
 23349 00003E33 8EC6                    	MOV	ES,SI
 23350 00003E35 89DE                    	MOV	SI,BX
 23351                                  
 23352                                  ;hkn; NAME1 is in DOSDATA
 23353 00003E37 BF[4B05]                	MOV	DI,NAME1
 23354                                  ;;;;; 7/29/86
 23355                                  
 23356                                  ;hkn; SS override for NAME1
 23357 00003E3A 36803E[4B05]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 23358 00003E40 7506                    	JNZ	short NO_E5
 23359 00003E42 36C606[4B05]05          	MOV	BYTE [SS:NAME1],05H
 23360                                  NO_E5:
 23361                                  ;;;;; 7/29/86
 23362 00003E48 E86100                  	CALL	MetaCompare
 23363 00003E4B 7428                    	JZ	short FOUND
 23364 00003E4D 1F                      	POP	DS
 23365                                  
 23366                                  	;entry	NEXTENT
 23367                                  NEXTENT:
 23368 00003E4E C42E[8A05]              	LES	BP,[THISDPB]
 23369 00003E52 E86600                  	CALL	NEXTENTRY
 23370 00003E55 73BD                    	JNC	short SRCH
 23371 00003E57 EB50                    	JMP	SHORT SETESRET
 23372                                  
 23373                                  FREE:
 23374 00003E59 1F                      	POP	DS
 23375 00003E5A 8B0E[4803]              	MOV	CX,[LASTENT]
 23376 00003E5E 3B0E[D805]              	CMP	CX,[ENTFREE]
 23377 00003E62 7304                    	JAE	short TSTALL
 23378 00003E64 890E[D805]              	MOV	[ENTFREE],CX
 23379                                  TSTALL:
 23380 00003E68 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 23381                                  NEXTENTJ:
 23382 00003E6C 74E0                    	je	short NEXTENT 		; No - continue search
 23383 00003E6E 890E[DA05]              	MOV	[ENTLAST],CX
 23384 00003E72 F9                      	STC
 23385 00003E73 EB34                    	JMP	SHORT SETESRET
 23386                                  
 23387                                  FOUND:
 23388                                  ; We have a file with a matching name. We must now consider the attributes:
 23389                                  ; ATTRIB	Action
 23390                                  ; ------	------
 23391                                  ; Volume_ID	Is Volume_ID in test?
 23392                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 23393                                  ;		If create then Is ATTRIB equal to test?
 23394                                  
 23395 00003E75 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 23396 00003E77 1F                      	POP	DS
 23397 00003E78 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 23398                                  	;and	ah,9Eh
 23399 00003E7C 80E4DE                  	AND	AH,~attr_ignore
 23400                                  	;lea	si,[si+15]
 23401 00003E7F 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 23402                                  					; point to first cluster field
 23403                                  	;test	ch,8
 23404 00003E82 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 23405 00003E85 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 23406                                  	;test	ah,8
 23407 00003E87 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 23408                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 23409                                  	; 16/12/2022
 23410 00003E8A 74C2                    	jz	short NEXTENT ; 19/05/2019
 23411                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23412                                  	;JZ	short NEXTENTJ
 23413 00003E8C 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 23414 00003E8E EB11                    	JMP	SHORT RETFF		; Found Volume ID
 23415                                  check_one_volume_id:
 23416                                  	;CMP	ah,8
 23417 00003E90 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 23418                                  	;JZ	short NEXTENTJ		; Yes, continue search
 23419                                  	; 16/12/2022
 23420 00003E93 74B9                    	je	short NEXTENT ; 19/05/2019
 23421                                  	;JZ	short NEXTENTJ
 23422 00003E95 E8B603                  	CALL	MatchAttributes
 23423 00003E98 7407                    	JZ	SHORT RETFF
 23424 00003E9A F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 23425                                  	; 16/12/2022
 23426                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 23427 00003E9F 74AD                    	jz	short NEXTENT ; 19/05/2019
 23428                                  RETFF:
 23429 00003EA1 C42E[8A05]              	LES	BP,[THISDPB]
 23430                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23431                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 23432                                  	; 15/12/2022
 23433 00003EA5 268A6600                	MOV	AH,[ES:BP]
 23434                                  SETESRET:
 23435 00003EA9 16                      	PUSH	SS
 23436 00003EAA 07                      	POP	ES
 23437 00003EAB C3                      	retn
 23438                                  
 23439                                  ;----------------------------------------------------------------------------
 23440                                  ;
 23441                                  ; Procedure Name : MetaCompare
 23442                                  ;
 23443                                  ; Inputs:
 23444                                  ;	DS:SI -> 11 character FCB style name NO '?'
 23445                                  ;	    Typically this is a directory entry.  It MUST be in upper case
 23446                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 23447                                  ;	    Typically this is a FCB or SFT.  It MUST be in upper case
 23448                                  ; Function:
 23449                                  ;	Compare FCB style names allowing for ? match to any char
 23450                                  ; Outputs:
 23451                                  ;	Zero if match else NZ
 23452                                  ; Destroys CX,SI,DI all others preserved
 23453                                  ;----------------------------------------------------------------------------
 23454                                  
 23455                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23456                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 23457                                  
 23458                                  MetaCompare:
 23459 00003EAC B90B00                  	MOV	CX,11
 23460                                  WILDCRD:
 23461 00003EAF F3A6                    	REPE	CMPSB
 23462 00003EB1 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 23463                                  CHECK_META:
 23464 00003EB3 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 23465 00003EB8 74F5                    	JZ	short WILDCRD
 23466                                  MetaRet:
 23467 00003EBA C3                       	retn				; Zero set, Match
 23468                                  
 23469                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 23470                                  ;----------------------------------------------------------------------------
 23471                                  ;
 23472                                  ; Procedure Name : NEXTENTRY
 23473                                  ;
 23474                                  ; Inputs:
 23475                                  ;	Same as outputs of GETENTRY, above
 23476                                  ; Function:
 23477                                  ;	Update BX, and [LASTENT] for next directory entry.
 23478                                  ;	Carry set if no more.
 23479                                  ;----------------------------------------------------------------------------
 23480                                  
 23481                                  NEXTENTRY:
 23482                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23483                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 23484                                  
 23485                                  	; 19/05/2019 - Retro DOS v4.0
 23486                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 23487                                  
 23488                                  	; 27/07/2018 - Retro DOS v3.0
 23489                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 23490                                  	; 15/03/2018 - Retro DOS v2.0
 23491                                  
 23492 00003EBB A1[4803]                	MOV	AX,[LASTENT]
 23493 00003EBE 3B06[DA05]              	CMP	AX,[ENTLAST]
 23494 00003EC2 7422                    	JZ	short NONE
 23495 00003EC4 40                      	INC	AX
 23496                                  	;ADD	BX,32
 23497 00003EC5 8D5F20                  	LEA	BX,[BX+32]
 23498 00003EC8 39D3                    	CMP	BX,DX
 23499                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 23500                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 23501                                  	; 16/12/2022
 23502 00003ECA 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 23503 00003ECC 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 23504 00003ED0 FEC3                    	INC	BL
 23505 00003ED2 3A1E[7705]              	CMP	BL,[CLUSFAC]
 23506 00003ED6 7215                    	JB	short SAMECLUS
 23507 00003ED8 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 23508 00003EDC E8F616                  	call	IsEOF
 23509 00003EDF 7305                    	JAE	short NONE
 23510                                  	; 23/07/2019
 23511 00003EE1 83FB02                  	CMP	BX,2
 23512                                  	;JB	short NONE
 23513                                  	;JMP	short GETENT
 23514                                  	; 16/12/2022
 23515 00003EE4 7332                    	jnb	short GETENT
 23516                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23517                                  	;JB	short NONE
 23518                                  	;JMP	short GETENT
 23519                                  NONE:
 23520 00003EE6 F9                      	STC
 23521 00003EE7 C3                      	retn
 23522                                  HAVIT:
 23523 00003EE8 A3[4803]                	MOV	[LASTENT],AX
 23524 00003EEB F8                      	CLC
 23525                                  nextentry_retn:
 23526 00003EEC C3                      	retn
 23527                                  SAMECLUS:
 23528 00003EED 881E[7305]              	MOV	[SECCLUSPOS],BL
 23529 00003EF1 A3[4803]                	MOV	[LASTENT],AX
 23530 00003EF4 1E                      	PUSH	DS
 23531 00003EF5 C53E[E205]              	LDS	DI,[CURBUF]
 23532                                  	; 19/05/2019
 23533                                  	; MSDOS 6.0
 23534                                  	;mov	dx,[di+8]
 23535 00003EF9 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 23536                                  ;hkn; SS override
 23537 00003EFC 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 23538                                  	;mov	dx,[di+6]
 23539 00003F01 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 23540                                  	;inc	dx ; MSDOS 3.3
 23541                                  	; MSDOS 6.0
 23542 00003F04 83C201                  	ADD	DX,1				;AN000; >32mb
 23543 00003F07 368316[0706]00          	ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 23544                                  	; MSDOS 3.3 & MSDOS 6.0
 23545 00003F0D 1F                      	POP	DS
 23546 00003F0E E82CF8                  	call	FIRSTCLUSTER
 23547 00003F11 31DB                    	XOR	BX,BX
 23548 00003F13 EB21                    	JMP	short SETENTRY
 23549                                  
 23550                                  ;----------------------------------------------------------------------------
 23551                                  ;
 23552                                  ; Procedure Name : GETENTRY
 23553                                  ;
 23554                                  ; Inputs:
 23555                                  ;	[LASTENT] has directory entry
 23556                                  ;	ES:BP points to drive parameters
 23557                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 23558                                  ; Function:
 23559                                  ;	Locates directory entry in preparation for search
 23560                                  ;	GETENT provides entry for passing desired entry in AX
 23561                                  ; Outputs:
 23562                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 23563                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 23564                                  ;	[LASTENT] = New directory entry number
 23565                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 23566                                  ;	Carry set if error (currently user FAILed to I 24)
 23567                                  ;----------------------------------------------------------------------------
 23568                                  
 23569                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23570                                  GETENTRY:
 23571                                  	; 27/07/2018 - Retro DOS v3.0
 23572 00003F15 A1[4803]                	MOV	AX,[LASTENT]
 23573                                  
 23574                                  	;entry	GETENT
 23575                                  GETENT:
 23576 00003F18 A3[4803]                	MOV	[LASTENT],AX
 23577                                  ;
 23578                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 23579                                  ; directory.
 23580                                  ;
 23581 00003F1B B105                    	mov	cl,5			; shift left by 5 = mult by 32
 23582 00003F1D D3C0                    	rol	ax,cl			; keep hight order bits
 23583 00003F1F 89C2                    	mov	dx,ax
 23584                                  	; 19/05/2019 - Retro DOS v4.0
 23585                                  	;and	ax,0FFE0h
 23586                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23587                                  	;and	ax,~(32-1)		; mask off high order bits
 23588                                  	; 16/12/2022
 23589 00003F21 24E0                    	and	al,0E0h ; ~31
 23590 00003F23 83E21F                  	and	dx,1Fh
 23591                                  	;and	dx,32-1			; mask off low order bits
 23592                                  ;
 23593                                  ; DX:AX contain the byte offset of the required directory entry from the
 23594                                  ; beginning of the directory. Convert this to a sector number. Round the
 23595                                  ; sector size down to a multiple of 32.
 23596                                  ;
 23597                                  	;mov	bx,[es:bp+2]
 23598 00003F26 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 23599 00003F2A 80E3E0                  	and	bl,0E0h
 23600                                  	;AND	BL,255-31		; Must be multiple of 32
 23601 00003F2D F7F3                    	DIV	BX
 23602                                  	; 14/02/2024
 23603                                  	;MOV	BX,DX			; Position within sector
 23604                                  				; NOTE: This BX value is not used in DIRREAD
 23605                                  				; Erdogan Tan - 14/02/2024
 23606                                  	;PUSH	BX
 23607 00003F2F 52                      	push	dx
 23608                                  	;
 23609 00003F30 E8B1F7                  	call	DIRREAD
 23610 00003F33 5B                      	POP	BX
 23611                                  	;retc
 23612 00003F34 72B6                    	jc	short nextentry_retn
 23613                                  SETENTRY:
 23614 00003F36 8B16[E205]              	MOV	DX,[CURBUF]
 23615                                  	;add	dx,16 ; MSDOS 3.3
 23616                                  	;add	dx,20 ; MSDOS 6.0 
 23617 00003F3A 83C214                  	ADD	DX,BUFINSIZ
 23618 00003F3D 01D3                    	ADD	BX,DX
 23619                                  	;add	dx,[es:bp+2]
 23620 00003F3F 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 23621 00003F43 C3                      	retn
 23622                                  
 23623                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 23624                                  ;----------------------------------------------------------------------------
 23625                                  ;
 23626                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 23627                                  ;
 23628                                  ; Inputs:
 23629                                  ;	BX cluster number of start of directory
 23630                                  ;	ES:BP Points to DPB
 23631                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 23632                                  ; Function:
 23633                                  ;	Set up a directory search
 23634                                  ; Outputs:
 23635                                  ;	[DIRSTART] = BX
 23636                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 23637                                  ;	Carry set if error (currently user FAILed to I 24)
 23638                                  ; destroys AX,DX,BX
 23639                                  ;----------------------------------------------------------------------------
 23640                                  
 23641                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23642                                  SETDIRSRCH:
 23643 00003F44 09DB                    	OR	BX,BX
 23644 00003F46 7437                    	JZ	short SETROOTSRCH
 23645 00003F48 891E[C205]              	MOV	[DIRSTART],BX
 23646                                  	;mov	al,[es:bp+4]
 23647 00003F4C 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 23648 00003F50 FEC0                    	INC	AL
 23649 00003F52 A2[7705]                	MOV	[CLUSFAC],AL
 23650                                  
 23651                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23652                                  	;SAVE	<SI>
 23653 00003F55 56                      	push	si
 23654                                  	;test	byte [FastOpenFlg],2
 23655 00003F56 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 23656 00003F5B 7507                    	JNZ	short UNP_OK
 23657                                  
 23658                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23659                                  	;invoke	UNPACK
 23660 00003F5D E88C16                  	call	UNPACK
 23661 00003F60 7302                    	JNC	short UNP_OK
 23662                                  	;RESTORE <SI>
 23663 00003F62 5E                      	pop	si
 23664                                  	;return
 23665 00003F63 C3                      	retn
 23666                                  
 23667                                  UNP_OK:
 23668 00003F64 893E[BC05]              	MOV	[CLUSNUM],DI
 23669 00003F68 89DA                    	MOV	DX,BX
 23670 00003F6A 30DB                    	XOR	BL,BL
 23671 00003F6C 881E[7305]              	MOV	[SECCLUSPOS],BL
 23672                                  	;invoke	FIGREC
 23673 00003F70 E81D0F                  	call	FIGREC
 23674                                  	;RESTORE <SI>
 23675 00003F73 5E                      	pop	si
 23676                                  	
 23677                                  	; 19/05/2019 - Retro DOS v4.0
 23678                                  
 23679                                  	; MSDOS 6.0
 23680                                  	;PUSH	DX			   ;AN000; >32mb
 23681                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 23682                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 23683                                  	;POP	DX			   ;AN000; >32mb
 23684                                  
 23685                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23686                                  	;push	dx
 23687                                  	;mov	dx,[HIGH_SECTOR]
 23688                                  	;mov	[DIRSEC+2],dx
 23689                                  	;pop	dx
 23690                                  	;MOV	[DIRSEC],dx
 23691                                  	; 16/12/2022
 23692 00003F74 A1[0706]                	mov	ax,[HIGH_SECTOR]
 23693 00003F77 A3[C005]                	mov	[DIRSEC+2],AX
 23694 00003F7A 8916[BE05]              	MOV	[DIRSEC],DX
 23695                                  
 23696                                  	; 16/12/2022
 23697                                  	; cf=0 (at the return of FIGREC)
 23698                                  	;CLC
 23699 00003F7E C3                      	retn
 23700                                  
 23701                                  	;entry	SETROOTSRCH
 23702                                  SETROOTSRCH:
 23703 00003F7F 31C0                    	XOR	AX,AX
 23704 00003F81 A3[C205]                	MOV	[DIRSTART],AX
 23705 00003F84 A2[7305]                	MOV	[SECCLUSPOS],AL
 23706 00003F87 48                      	DEC	AX
 23707 00003F88 A3[BC05]                	MOV	[CLUSNUM],AX
 23708                                  	;mov	ax,[es:bp+0Bh]
 23709 00003F8B 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 23710                                  	; 19/05/2019
 23711                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 23712                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 23713 00003F8F 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 23714 00003F93 29D0                    	SUB	AX,DX
 23715 00003F95 A2[7705]                	MOV	[CLUSFAC],AL
 23716 00003F98 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 23717                                  	; MSDOS 6.0
 23718 00003F9C C706[C005]0000          	MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 23719 00003FA2 F8                      	CLC
 23720 00003FA3 C3                      	retn
 23721                                  
 23722                                  ;============================================================================
 23723                                  ; DIR2.ASM, MSDOS 6.0, 1991
 23724                                  ;============================================================================
 23725                                  ; 27/07/2018 - Retro DOS v3.0
 23726                                  ; 19/05/2019 - Retro DOS v4.0 
 23727                                  
 23728                                  ;	TITLE	DIR2 - Directory and path cracking
 23729                                  ;	NAME	Dir2
 23730                                  
 23731                                  ;Break	<GETPATH -- PARSE A WFP>
 23732                                  ;----------------------------------------------------------------------------
 23733                                  ;
 23734                                  ; Procedure Name : GETPATH
 23735                                  ;
 23736                                  ; Inputs:
 23737                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 23738                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 23739                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23740                                  ;		( = -1 if current dir not involved, else
 23741                                  ;		 Points to first char after last "/" of current dir part)
 23742                                  ;	[THISCDS] Points to CDS being used
 23743                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 23744                                  ;	[NoSetDir] set
 23745                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 23746                                  ; Function:
 23747                                  ;	Crack the path
 23748                                  ; Outputs:
 23749                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 23750                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 23751                                  ;	ID1 field of [THISCDS] updated appropriately
 23752                                  ;	[ATTRIB] = [SATTRIB]
 23753                                  ;	ES:BP Points to DPB
 23754                                  ;	Carry set if bad path
 23755                                  ;	   SI Points to path element causing failure
 23756                                  ;	   Zero set
 23757                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23758                                  ;	      start a search on the last directory
 23759                                  ;	      CL is zero if there is a bad name in the path
 23760                                  ;	      CL is non-zero if the name was simply not found
 23761                                  ;		 [ENTFREE] may have free spot in directory
 23762                                  ;		 [NAME1] is the name.
 23763                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23764                                  ;	   Zero reset
 23765                                  ;	      File in middle of path or bad name in path or attribute mismatch
 23766                                  ;		or path too long or malformed path
 23767                                  ;	ELSE
 23768                                  ;	   [CurBuf] = -1 if root directory
 23769                                  ;	   [CURBUF] contains directory record with match
 23770                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23771                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 23772                                  ;	   AH = device ID
 23773                                  ;	      bit 7 of AH set if device SI and BX
 23774                                  ;	      will point DOSGROUP relative The firclus
 23775                                  ;	      field of the device entry contains the device pointer
 23776                                  ;	   [NAME1] Has name looked for
 23777                                  ;	   If last element is a directory zero is set and:
 23778                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23779                                  ;	      are set up to start a search on it.
 23780                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23781                                  ;	      like that for a file (except for zero flag)
 23782                                  ;	   If last element is a file zero is reset
 23783                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23784                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23785                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 23786                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 23787                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 23788                                  ; DS preserved, Others destroyed
 23789                                  ;---------------------------------------------------------------------------
 23790                                  
 23791                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 23792                                  ;hkn; DS already set up at this point.
 23793                                  
 23794                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23795                                  GETPATH:
 23796                                  	;mov	word [CREATING],0E500h
 23797 00003FA4 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 23798                                  
 23799                                  ; Same as GetPath only CREATING and DELALL already set
 23800                                  
 23801                                  	;entry	GetPathNoSet
 23802                                  GetPathNoSet:
 23803                                  	;mov	byte [EXTERR_LOCUS],2	
 23804 00003FAA C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 23805 00003FAF C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 23806                                  
 23807                                  ; See if the input indicates a device that has already been detected. If so,
 23808                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 23809                                  
 23810 00003FB5 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 23811                                  	;cmp	word [DI+1],5C3Ah
 23812                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 23813 00003FB9 817D013A5C              	cmp	word [DI+1],':\'
 23814 00003FBE 7438                    	JZ	short CrackIt
 23815                                  
 23816                                  ; Let ChkDev find it in the device list
 23817                                  
 23818 00003FC0 83C703                  	ADD	DI,3
 23819                                  	; 18/08/2018
 23820                                  	;MOV	SI,DI			; let CHKDEV see the original name
 23821                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23822                                  	; 16/12/2022
 23823                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 23824 00003FC3 E8A400                  	CALL	CHKDEV
 23825 00003FC6 722E                    	JC	short InternalError
 23826                                  
 23827                                  Build_devJ:
 23828 00003FC8 A0[6D05]                	MOV	AL,[SATTRIB]
 23829 00003FCB A2[6B05]                	MOV	[ATTRIB],AL
 23830                                  	;mov	byte [EXTERR_LOCUS],1
 23831 00003FCE C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 23832                                  					; "finding" a char device
 23833                                  					; set LOCUS to Unknown. This makes
 23834                                  					; certain idiotic problems reported
 23835                                  					; by a certain 3 letter OEM go away.
 23836                                  
 23837                                  ; Take name in name1 and pack it back into where wfp_start points. This
 23838                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 23839                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 23840                                  ; wfp into the share set.
 23841                                  ;
 23842                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 23843                                  ; non-space seen +1.  This position is kept in DX.
 23844                                  
 23845                                  ;hkn; SS is DOSDATA
 23846 00003FD3 16                      	push	ss
 23847 00003FD4 07                      	pop	es
 23848                                  
 23849                                  ;hkn; NAME1 is in DOSDATA
 23850 00003FD5 BE[4B05]                	mov	si,NAME1
 23851 00003FD8 8B3E[B205]              	mov	di,[WFP_START]
 23852 00003FDC 89FA                    	mov	dx,di
 23853 00003FDE B90800                  	mov	cx,8			; 8 chars in device name
 23854                                  MoveLoop:
 23855 00003FE1 AC                      	lodsb
 23856 00003FE2 AA                      	stosb
 23857 00003FE3 3C20                    	cmp	al," "
 23858 00003FE5 7402                    	jz	short NoSave
 23859                                  
 23860 00003FE7 89FA                    	mov	dx,di
 23861                                  NoSave:
 23862 00003FE9 E2F6                    	loop	MoveLoop
 23863                                  
 23864                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 23865                                  ; at this point.
 23866                                  
 23867 00003FEB 89D7                    	mov	di,dx
 23868 00003FED C60500                  	mov	byte [di],0		; end of string
 23869 00003FF0 E8C702                  	call	Build_device_ent	; Clears carry sets zero
 23870 00003FF3 FEC0                    	INC	AL			; reset zero
 23871 00003FF5 C3                      	retn
 23872                                  
 23873                                  InternalError:
 23874                                  InternalError_loop:
 23875 00003FF6 EBFE                    	JMP	short InternalError_loop	; freeze
 23876                                  
 23877                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 23878                                  
 23879                                  CrackIt:
 23880                                  ; 15/02/2024
 23881                                  %if 0
 23882                                  	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 23883                                  	CMP	SI,-1			; valid?
 23884                                  	JNZ	short LOOK_SING		; Yes, use it.
 23885                                  	LEA	SI,[DI+3]		; skip D:\.
 23886                                  LOOK_SING:
 23887                                  %endif
 23888                                  	;mov	byte [ATTRIB],16h
 23889 00003FF8 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 23890                                  					; Attributes to search through Dirs
 23891 00003FFD C43E[A205]              	LES	DI,[THISCDS]
 23892 00004001 B8FFFF                  	MOV	AX,-1
 23893                                  	;mov	bx,[es:di+73]
 23894 00004004 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 23895 00004008 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 23896                                  
 23897                                  ; AX = -1
 23898                                  ; BX = cluster number of current directory. THis number is -1 if the media
 23899                                  ;      has been uncertainly changed.
 23900                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 23901                                  ;      may be -1 if no current directory part has been used.
 23902                                  
 23903 0000400C 39C6                    	CMP	SI,AX			; if Current directory is not part
 23904 0000400E 7440                    	JZ	short NO_CURR_D		; then we must crack from root
 23905 00004010 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 23906                                  
 23907                                  ; DOS 3.3  6/25/86
 23908 00004012 743C                    	JZ	short NO_CURR_D		; no, crack from the root
 23909                                  	;test	byte [FastOpenFlg],1
 23910 00004014 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 23911 00004019 7442                    	JZ	short GOT_SEARCH_CLUSTER	; no
 23912 0000401B 06                      	PUSH	ES			; save registers
 23913 0000401C 57                      	PUSH	DI
 23914 0000401D 51                      	PUSH	CX
 23915 0000401E FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 23916 00004021 56                      	PUSH	SI
 23917 00004022 53                      	PUSH	BX
 23918                                  
 23919 00004023 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 23920 00004027 8B36[B205]              	MOV	SI,[WFP_START]
 23921                                  
 23922                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 23923 0000402B BB[300D]                	MOV	BX,FastOpenTable
 23924 0000402E BF[460D]                	MOV	DI,Dir_Info_Buff
 23925 00004031 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 23926                                  	;mov	al,1
 23927 00004034 B001                    	MOV	AL,FONC_Look_up
 23928 00004036 1E                      	PUSH	DS
 23929 00004037 07                      	POP	ES
 23930                                  	;call	far [BX+2]
 23931 00004038 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 23932 0000403B 7208                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 23933                                  					; Go to Got_Srch_cluster
 23934 0000403D 803C00                  	CMP	BYTE [SI],0		;fastopen has current dir info?
 23935 00004040 7404                    	JE	short GO_Chk_end	;yes. Go to got_search_cluster
 23936 00004042 F9                      	stc
 23937 00004043 EB01                    	jmp	short GO_Chk_end	;Go to No_Curr_D
 23938                                  GO_Chk_end1:
 23939 00004045 F8                      	clc
 23940                                  GO_Chk_end:				; restore registers
 23941 00004046 5B                      	POP	BX
 23942 00004047 5E                      	POP	SI
 23943 00004048 8F44FF                  	POP	word [SI-1]
 23944 0000404B 59                      	POP	CX
 23945 0000404C 5F                      	POP	DI
 23946 0000404D 07                      	POP	ES
 23947 0000404E 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 23948                                  
 23949                                  ; DOS 3.3  6/25/86
 23950                                  ;
 23951                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 23952                                  ; of path and go crack from root.
 23953                                  
 23954                                  NO_CURR_D:
 23955 00004050 8B36[B205]              	MOV	SI,[WFP_START]
 23956 00004054 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 23957 00004057 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23958 0000405B EB3C                    	JMP	short ROOTPATH
 23959                                  
 23960                                  ; We are able to crack from the current directory part. Go set up for search
 23961                                  ; of specified cluster.
 23962                                  
 23963                                  GOT_SEARCH_CLUSTER:
 23964 0000405D C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23965 00004061 E8E0FE                  	call	SETDIRSRCH
 23966                                  	;JC	short SETFERR
 23967                                  	;JMP	short FINDPATH
 23968                                  	; 16/12/2022
 23969 00004064 7344                    	jnc	short FINDPATH ; 17/08/2018
 23970                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23971                                  	;JC	short SETFERR
 23972                                  	;JMP	short FINDPATH
 23973                                  SETFERR:
 23974 00004066 30C9                    	XOR	CL,CL			; set zero
 23975 00004068 F9                      	STC
 23976 00004069 C3                      	retn
 23977                                  
 23978                                  ;---------------------------------------------------------------------------
 23979                                  ;
 23980                                  ; Procedure Name : ChkDev
 23981                                  ;
 23982                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 23983                                  ;   device.
 23984                                  ; Blasts CX,SI,DI,AX,BX
 23985                                  ;---------------------------------------------------------------------------
 23986                                  
 23987                                  CHKDEV:
 23988 0000406A 89FE                    	MOV	SI,DI
 23989 0000406C 8CD7                    	MOV	DI,SS
 23990 0000406E 8EC7                    	MOV	ES,DI
 23991                                  
 23992 00004070 BF[4B05]                	MOV	DI,NAME1
 23993 00004073 B90900                  	MOV	CX,9
 23994                                  TESTLOOP:
 23995 00004076 E87910                  	call	GETLET
 23996                                  
 23997 00004079 3C2E                    	CMP	AL,'.'
 23998 0000407B 740E                    	JZ	short TESTDEVICE
 23999 0000407D E8C810                  	call	PATHCHRCMP
 24000 00004080 7407                    	JZ	short NOTDEV
 24001 00004082 08C0                    	OR	AL,AL
 24002 00004084 7405                    	JZ	short TESTDEVICE
 24003                                  
 24004 00004086 AA                      	STOSB
 24005 00004087 E2ED                    	LOOP	TESTLOOP
 24006                                  NOTDEV:
 24007 00004089 F9                      	STC
 24008 0000408A C3                      	retn
 24009                                  
 24010                                  TESTDEVICE:
 24011 0000408B 83C102                  	ADD	CX,2
 24012 0000408E B020                    	MOV	AL,' '
 24013 00004090 F3AA                    	REP	STOSB
 24014 00004092 8CD0                    	MOV	AX,SS
 24015 00004094 8ED8                    	MOV	DS,AX
 24016                                  	;call	DEVNAME
 24017                                  	;retn
 24018                                  	; 18/12/2022
 24019 00004096 E9C201                  	jmp	DEVNAME
 24020                                  
 24021                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24022                                  ;----------------------------------------------------------------------------
 24023                                  ;
 24024                                  ; Procedure Name : ROOTPATH,FINDPATH
 24025                                  ;
 24026                                  ; Inputs:
 24027                                  ;	Same as FINDPATH but,
 24028                                  ;	SI Points to asciz string of path which is assumed to start at
 24029                                  ;		the root (no leading '/').
 24030                                  ; Function:
 24031                                  ;	Search from root for path
 24032                                  ; Outputs:
 24033                                  ;	Same as FINDPATH but:
 24034                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24035                                  ;	[NoSetDir] is ignored.
 24036                                  ;----------------------------------------------------------------------------
 24037                                  
 24038                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24039                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24040                                  
 24041                                  ROOTPATH:
 24042 00004099 E8E3FE                  	call	SETROOTSRCH
 24043 0000409C 803C00                  	CMP	BYTE [SI],0
 24044 0000409F 7509                    	JNZ	short FINDPATH
 24045                                  
 24046                                  ; Root dir specified
 24047 000040A1 A0[6D05]                	MOV	AL,[SATTRIB]
 24048 000040A4 A2[6B05]                	MOV	[ATTRIB],AL
 24049 000040A7 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 24050                                  					; (dir), clears carry.
 24051 000040A9 C3                      	retn
 24052                                  
 24053                                  ; Inputs:
 24054                                  ;	[ATTRIB] Set to get through directories
 24055                                  ;	[SATTRIB] Set to find last element
 24056                                  ;	ES:BP Points to DPB
 24057                                  ;	SI Points to asciz string of path (no leading '/').
 24058                                  ;	[SECCLUSPOS] = 0
 24059                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24060                                  ;	[CLUSNUM] = Cluster # of next cluster
 24061                                  ;	[CLUSFAC] = Sectors per cluster
 24062                                  ;	[NoSetDir] set
 24063                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24064                                  ;		( = -1 if current dir not involved, else
 24065                                  ;		 Points to first char after last "/" of current dir part)
 24066                                  ;	[THISCDS] Points to CDS being used
 24067                                  ;	[CREATING] and [DELALL] set
 24068                                  ; Function:
 24069                                  ;	Parse path name
 24070                                  ; Outputs:
 24071                                  ;	ID1 field of [THISCDS] updated appropriately
 24072                                  ;	[ATTRIB] = [SATTRIB]
 24073                                  ;	ES:BP Points to DPB
 24074                                  ;	[THISDPB] = ES:BP
 24075                                  ;	Carry set if bad path
 24076                                  ;	   SI Points to path element causing failure
 24077                                  ;	   Zero set
 24078                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24079                                  ;	      start a search on the last directory
 24080                                  ;	      CL is zero if there is a bad name in the path
 24081                                  ;	      CL is non-zero if the name was simply not found
 24082                                  ;		 [ENTFREE] may have free spot in directory
 24083                                  ;		 [NAME1] is the name.
 24084                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24085                                  ;	   Zero reset
 24086                                  ;	      File in middle of path or bad name in path
 24087                                  ;		or path too long or malformed path
 24088                                  ;	ELSE
 24089                                  ;	   [CURBUF] contains directory record with match
 24090                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24091                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24092                                  ;	   [NAME1] Has name looked for
 24093                                  ;	   AH = device ID
 24094                                  ;	      bit 7 of AH set if device SI and BX
 24095                                  ;	      will point DOSGROUP relative The firclus
 24096                                  ;	      field of the device entry contains the device pointer
 24097                                  ;	   If last element is a directory zero is set and:
 24098                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24099                                  ;	      are set up to start a search on it,
 24100                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24101                                  ;	      like that for a file (except for zero flag)
 24102                                  ;	   If last element is a file zero is reset
 24103                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24104                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24105                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24106                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24107                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24108                                  ; Destroys all other registers
 24109                                  
 24110                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24111                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24112                                  
 24113                                      	;entry	FINDPATH
 24114                                  FINDPATH:
 24115 000040AA 06                      	PUSH	ES			; Save ES:BP
 24116 000040AB 56                      	PUSH	SI
 24117 000040AC 89F7                    	MOV	DI,SI
 24118 000040AE 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24119 000040B2 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24120 000040B7 740E                    	JZ	short NOIDS		; No current dir part
 24121 000040B9 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24122 000040BD 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24123 000040BF C43E[A205]              	LES	DI,[THISCDS]
 24124                                  	;mov	[es:di+73],cx
 24125 000040C3 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory cluster
 24126                                  NOIDS:
 24127                                  
 24128                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24129                                  ; character in the string. CX,DI may be destroyed.
 24130                                  ;
 24131                                  ;	invoke	NAMETRANS
 24132                                  ;	MOV	CL,AL
 24133                                  ;
 24134                                  ; The above is the slow method. The name has *already* been munged by
 24135                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24136                                  ; the name until ., \ or 0 is hit.
 24137                                  
 24138 000040C7 8CD0                    	MOV	AX,SS
 24139 000040C9 8EC0                    	MOV	ES,AX
 24140                                  
 24141                                  ;hkn; Name1 is in DOSDATA
 24142 000040CB BF[4B05]                	MOV	DI,NAME1
 24143 000040CE B82020                  	MOV	AX,'  ' ; 2020h
 24144 000040D1 AA                      	STOSB
 24145 000040D2 AB                      	STOSW
 24146 000040D3 AB                      	STOSW
 24147 000040D4 AB                      	STOSW
 24148 000040D5 AB                      	STOSW
 24149 000040D6 AB                      	STOSW
 24150                                  
 24151                                  ;hkn; Name1 is in DOSDATA
 24152 000040D7 BF[4B05]                	MOV	DI,NAME1
 24153 000040DA 30E4                    	XOR	AH,AH			; bits for CL
 24154                                  GetNam:
 24155                                  	; 19/05/2019 - Retro DOS v4.0
 24156                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24157                                  
 24158                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24159                                  	; 16/12/2022
 24160                                  	;inc	cl ; not required !	
 24161                                  	
 24162 000040DC AC                      	LODSB
 24163 000040DD 3C2E                    	CMP	AL,'.'	; 2Eh
 24164 000040DF 7412                    	JZ	short _SetExt
 24165 000040E1 08C0                    	OR	AL,AL
 24166 000040E3 7424                    	JZ	short _GetDone
 24167 000040E5 3C5C                    	CMP	AL,'\'	; 5Ch
 24168 000040E7 7420                    	JZ	short _GetDone
 24169 000040E9 3C3F                    	CMP	AL,'?'	; 3Fh
 24170 000040EB 7503                    	JNZ	short StoNam
 24171 000040ED 80CC01                  	OR	AH,1
 24172                                  StoNam: 
 24173 000040F0 AA                      	STOSB
 24174 000040F1 EBE9                    	JMP	short GetNam
 24175                                  _SetExt:
 24176 000040F3 BF[5305]                	MOV	DI,NAME1+8
 24177                                  GetExt:
 24178 000040F6 AC                      	LODSB
 24179 000040F7 08C0                    	OR	AL,AL
 24180 000040F9 740E                    	JZ	short _GetDone
 24181 000040FB 3C5C                    	CMP	AL,'\'
 24182 000040FD 740A                    	JZ	short _GetDone
 24183 000040FF 3C3F                    	CMP	AL,'?'
 24184 00004101 7503                    	JNZ	short StoExt
 24185 00004103 80CC01                  	OR	AH,1
 24186                                  StoExt: 
 24187 00004106 AA                      	STOSB
 24188 00004107 EBED                    	JMP	short GetExt
 24189                                  _GetDone:
 24190 00004109 4E                      	DEC	SI
 24191 0000410A 88E1                    	MOV	CL,AH  ; ?*!
 24192 0000410C 80C980                  	OR	CL,80H
 24193 0000410F 5F                      	POP	DI			; Start of this element
 24194 00004110 07                      	POP	ES			; Restore ES:BP
 24195 00004111 39FE                    	CMP	SI,DI
 24196 00004113 7503                    	JNZ	short check_device
 24197 00004115 E9EA00                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24198                                  check_device:
 24199 00004118 56                      	PUSH	SI			; Start of next element
 24200 00004119 8A04                    	MOV	AL,[SI]
 24201 0000411B 08C0                    	OR	AL,AL
 24202 0000411D 7508                    	JNZ	short NOT_LAST
 24203                                  
 24204                                  ; for last element of the path switch to the correct search attributes
 24205                                  
 24206 0000411F 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24207 00004123 883E[6B05]              	MOV	[ATTRIB],BH
 24208                                  
 24209                                  NOT_LAST:
 24210                                  
 24211                                  ; check name1 to see if we have a device...
 24212                                  
 24213 00004127 06                      	PUSH	ES			; Save ES:BP
 24214                                  
 24215                                  ;hkn; SS is DOSDATA
 24216                                  	;context ES
 24217 00004128 16                      	push	ss
 24218 00004129 07                      	pop	es
 24219 0000412A E82E01                  	call	DEVNAME 		; blast BX
 24220 0000412D 07                      	POP	ES			; Restore ES:BP
 24221 0000412E 720B                    	JC	short FindFile		; Not a device
 24222 00004130 08C0                    	OR	AL,AL			; Test next char again
 24223 00004132 7403                    	JZ	short GO_BDEV
 24224 00004134 E9CF00                  	JMP	FILEINPATH		; Device name in middle of path
 24225                                  
 24226                                  GO_BDEV:
 24227 00004137 5E                      	POP	SI			; Points to NUL at end of path
 24228 00004138 E98DFE                  	JMP	Build_devJ
 24229                                  
 24230                                  FindFile:
 24231                                  ;;;; 7/28/86
 24232 0000413B 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24233 00004140 7505                    	JNZ	short NOE5		; no
 24234 00004142 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24235                                  NOE5:
 24236                                  ;;;; 7/28/86
 24237 00004147 57                      	PUSH	DI			; Start of this element
 24238 00004148 06                      	PUSH	ES			; Save ES:BP
 24239 00004149 51                      	PUSH	CX			; CL return from NameTrans
 24240                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24241                                  
 24242 0000414A E89702                  	CALL	LookupPath		; call fastopen to get dir entry
 24243 0000414D 7303                    	JNC	short DIR_FOUND		; found dir entry
 24244                                  
 24245                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24246 0000414F E8ABFC                  	call	FINDENTRY
 24247                                  DIR_FOUND:
 24248 00004152 59                      	POP	CX
 24249 00004153 07                      	POP	ES
 24250 00004154 5F                      	POP	DI
 24251 00004155 7303                    	JNC	short LOAD_BUF
 24252 00004157 E9D100                  	JMP	BADPATHPOP
 24253                                  
 24254                                  LOAD_BUF:
 24255 0000415A C53E[E205]              	LDS	DI,[CURBUF]
 24256                                  	;test	byte [bx+0Bh],10h
 24257 0000415E F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24258 00004162 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24259 00004164 E99F00                  	JMP	FILEINPATH		; Error or end of path
 24260                                  
 24261                                  ; if we are not setting the directory, then check for end of string
 24262                                  
 24263                                  GO_NEXT:
 24264                                  ;hkn; SS override
 24265 00004167 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24266 0000416D 7423                    	JZ	short SetDir
 24267 0000416F 89FA                    	MOV	DX,DI			; Save pointer to entry
 24268 00004171 8CD9                    	MOV	CX,DS
 24269                                  
 24270                                  ;hkn; SS is DOSDATA
 24271                                  	;context DS
 24272 00004173 16                      	push	ss
 24273 00004174 1F                      	pop	ds
 24274 00004175 5F                      	POP	DI			; Start of next element
 24275                                  	; 19/05/2019 - Retro DOS v4.0
 24276                                  	; MSDOS 6.0
 24277 00004176 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24278 0000417B 740B                    	JZ	short _nofast			; the FastOpen
 24279 0000417D F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24280 00004182 7404                    	JZ	short _nofast			; no
 24281 00004184 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24282                                  _nofast:
 24283 00004188 803D00                  	CMP	BYTE [DI],0
 24284                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24285                                  	;;JMP	_SETRET  ; retn		; Got it
 24286                                  	;retn	; 05/09/2018
 24287                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24288                                  	;jmp	_SETRET
 24289                                  	; 16/12/2022
 24290 0000418B 7421                    	jz	short _SETRET
 24291                                  
 24292                                  NEXT_ONE:
 24293 0000418D 57                      	PUSH	DI			; Put start of next element back on stack
 24294 0000418E 89D7                    	MOV	DI,DX
 24295 00004190 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24296                                  SetDir:
 24297 00004192 8B14                    	MOV	DX,[SI] 		; Dir_first
 24298                                  
 24299                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24300 00004194 1E                      	PUSH	DS		      ; save [curbuf+2]
 24301                                  ;hkn; SS is DOSDATA
 24302 00004195 16                      	push	ss
 24303 00004196 1F                      	pop	ds		      ; set DS Dosgroup
 24304                                  	;test	byte [FastOpenFlg],2
 24305 00004197 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24306 0000419C 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 24307 0000419E 89D3                    	MOV	BX,DX		      ; not found
 24308 000041A0 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 24309 000041A4 50                      	PUSH	AX		      ; save device id (AH)
 24310 000041A5 E89CFD                  	call	SETDIRSRCH
 24311 000041A8 58                      	POP	AX		      ; restore device id (AH)
 24312 000041A9 83C402                  	ADD	SP,2		      ; pop ds in stack
 24313 000041AC EB3E                    	JMP	short FAST_OPEN_SKIP
 24314                                  
 24315                                  	; 16/12/2022
 24316                                  _SETRET:
 24317 000041AE C3                      	retn
 24318                                  
 24319                                  DO_NORMAL:
 24320 000041AF 1F                      	POP	DS			; DS = [curbuf + 2]
 24321                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24322                                  
 24323 000041B0 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 24324 000041B2 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 24325 000041B4 53                      	PUSH	BX
 24326 000041B5 50                      	PUSH	AX
 24327 000041B6 56                      	PUSH	SI
 24328 000041B7 51                      	PUSH	CX
 24329                                  	;push	word [di+6]
 24330 000041B8 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 24331                                  	; 19/05/2019
 24332                                  	; MSDOS 6.0
 24333                                  	;push	word [di+8]
 24334 000041BB FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 24335 000041BE 89D3                    	MOV	BX,DX
 24336                                  
 24337                                  ;hkn; SS is DOSDATA
 24338                                  	;context DS
 24339 000041C0 16                      	push	ss
 24340 000041C1 1F                      	pop	ds
 24341                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 24342 000041C2 E87FFD                  	call	SETDIRSRCH		; the entry sector buffer
 24343                                  	; 19/05/2019
 24344                                  	; MSDOS 6.0
 24345 000041C5 8F06[0706]              	POP	word [HIGH_SECTOR]
 24346 000041C9 5A                      	POP	DX
 24347 000041CA 720A                    	JC	short SKIP_GETB
 24348                                  	;mov	byte [ALLOWED],18h
 24349 000041CC C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 24350 000041D1 30C0                    	XOR	AL,AL
 24351                                  	;invoke	GETBUFFR		; Get the entry buffer back
 24352 000041D3 E83318                  	call	GETBUFFR
 24353                                  SKIP_GETB:
 24354 000041D6 59                      	POP	CX
 24355 000041D7 5E                      	POP	SI
 24356 000041D8 58                      	POP	AX
 24357 000041D9 5B                      	POP	BX
 24358 000041DA 7305                    	JNC	short SET_THE_BUF
 24359 000041DC 5F                      	POP	DI			; Start of next element
 24360 000041DD 89FE                    	MOV	SI,DI			; Point with SI
 24361 000041DF EB21                    	JMP	SHORT _BADPATH
 24362                                  
 24363                                  SET_THE_BUF:
 24364 000041E1 E865F5                  	call	SET_BUF_AS_DIR
 24365 000041E4 8B3E[E205]              	MOV	DI,[CURBUF]
 24366 000041E8 01FE                    	ADD	SI,DI			; Get the offsets back
 24367 000041EA 01FB                    	ADD	BX,DI
 24368                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24369                                  FAST_OPEN_SKIP:
 24370 000041EC 5F                      	POP	DI			; Start of next element
 24371 000041ED E89802                  	CALL	InsertPath		; insert dir entry info
 24372                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24373 000041F0 8A05                    	MOV	AL,[DI]
 24374 000041F2 08C0                    	OR	AL,AL
 24375 000041F4 74B8                    	JZ	short _SETRET		; At end
 24376 000041F6 47                      	INC	DI			; Skip over "/"
 24377 000041F7 89FE                    	MOV	SI,DI			; Point with SI
 24378 000041F9 E84C0F                  	call	PATHCHRCMP
 24379 000041FC 7503                    	JNZ	short find_bad_name	; oops
 24380 000041FE E9A9FE                  	JMP	FINDPATH		; Next element
 24381                                  
 24382                                  find_bad_name:
 24383 00004201 4E                      	DEC	SI			; Undo above INC to get failure point
 24384                                  _BADPATH:
 24385 00004202 30C9                    	XOR	CL,CL			; Set zero
 24386 00004204 EB2C                    	JMP	SHORT BADPRET
 24387                                  
 24388                                  FILEINPATH:
 24389 00004206 5F                      	POP	DI			; Start of next element
 24390                                  
 24391                                  ;hkn; SS is DOSDATA
 24392                                  	;context DS			; Got to from one place with DS gone
 24393 00004207 16                      	push	ss
 24394 00004208 1F                      	pop	ds
 24395                                  
 24396                                  ; DOS 3.3 FastOpen
 24397                                  	;test	byte [FastOpenFlg],1
 24398 00004209 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 24399 0000420E 740B                    	JZ	short NO_FAST		; device info to fastopen
 24400                                  	;test	byte [FastOpenFlg],2
 24401 00004210 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24402 00004215 7404                    	JZ	short NO_FAST
 24403 00004217 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 24404                                  					 ; success
 24405                                  NO_FAST:
 24406                                  ; DOS 3.3 FastOpen
 24407 0000421B 8A05                    	MOV	AL,[DI]
 24408 0000421D 08C0                    	OR	AL,AL
 24409 0000421F 7404                    	JZ	short INCRET
 24410 00004221 89FE                    	MOV	SI,DI			; Path too long
 24411 00004223 EB0D                    	JMP	SHORT BADPRET
 24412                                  
 24413                                  INCRET:
 24414                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24415                                  
 24416 00004225 E86002                  	CALL   InsertPath		; insert dir entry info
 24417                                  
 24418                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24419 00004228 FEC0                    	INC	AL			; Reset zero
 24420                                  	; 16/12/2022	
 24421                                  ;_SETRET:
 24422 0000422A C3                      	retn
 24423                                  
 24424                                  BADPATHPOP:
 24425 0000422B 5E                      	POP	SI			; Start of next element
 24426 0000422C 8A04                    	MOV	AL,[SI]
 24427 0000422E 89FE                    	MOV	SI,DI			; Start of bad element
 24428 00004230 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 24429                                  BADPRET:
 24430 00004232 A0[6D05]                	MOV	AL,[SATTRIB]
 24431 00004235 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 24432 00004238 F9                      	STC
 24433 00004239 C3                      	retn
 24434                                  
 24435                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 24436                                  ;---------------------------------------------------------------------------
 24437                                  ;
 24438                                  ; Procedure Name : STARTSRCH
 24439                                  ;
 24440                                  ; Inputs:
 24441                                  ;	[THISDPB] Set
 24442                                  ; Function:
 24443                                  ;	Set up a search for GETENTRY and NEXTENTRY
 24444                                  ; Outputs:
 24445                                  ;	ES:BP = Drive parameters
 24446                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 24447                                  ; Destroys ES,BP,AX
 24448                                  ;--------------------------------------------------------------------------
 24449                                  
 24450                                  STARTSRCH:
 24451 0000423A C42E[8A05]              	LES	BP,[THISDPB]
 24452 0000423E 31C0                    	XOR	AX,AX
 24453 00004240 A3[4803]                	MOV	[LASTENT],AX
 24454 00004243 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 24455 00004246 48                      	DEC	AX
 24456 00004247 A3[D805]                	MOV	[ENTFREE],AX
 24457 0000424A A3[DA05]                	MOV	[ENTLAST],AX
 24458 0000424D C3                      	retn
 24459                                  
 24460                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 24461                                  ;----------------------------------------------------------------------------
 24462                                  ; Procedure Name : MatchAttributes
 24463                                  ;
 24464                                  ; Input:    [Attrib] = attribute to search for
 24465                                  ;	    CH = found attribute
 24466                                  ; Output:   JZ <match>
 24467                                  ;	    JNZ <nomatch>
 24468                                  ; Registers modified: noneski
 24469                                  ;----------------------------------------------------------------------------
 24470                                  
 24471                                  MatchAttributes:
 24472 0000424E 50                      	PUSH	AX
 24473                                  
 24474                                  ;hkn; SS override
 24475 0000424F 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 24476 00004253 F6D0                    	NOT	AL			; AL <- SearchSet'
 24477 00004255 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 24478                                  	;and	al,16h
 24479 00004257 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 24480                                  ;
 24481                                  ; the result is non-zero if an attribute is not in the search set
 24482                                  ; and in the found set and in the important set. This means that we do not
 24483                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 24484                                  ;
 24485 00004259 58                      	POP	AX
 24486 0000425A C3                      	retn
 24487                                  
 24488                                  ; 19/05/2019 - Retro DOS v4.0
 24489                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 24490                                  
 24491                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24492                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 24493                                  
 24494                                  ;Break <DevName - Look for name of device>
 24495                                  ;---------------------------------------------------------------------------
 24496                                  ;
 24497                                  ; Procedure Name : DevName
 24498                                  ;
 24499                                  ; Inputs:
 24500                                  ;	DS,ES:DOSDATA
 24501                                  ;	Filename in NAME1
 24502                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 24503                                  ; Function:
 24504                                  ;	Determine if file is in list of I/O drivers
 24505                                  ; Outputs:
 24506                                  ;	Carry set if not a device
 24507                                  ;	ELSE
 24508                                  ;	Zero flag set
 24509                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 24510                                  ;	     bits 0-4 set from low byte of attribute word
 24511                                  ;	DEVPT = DWORD pointer to Device header of device
 24512                                  ; BX destroyed, others preserved
 24513                                  ;---------------------------------------------------------------------------
 24514                                  
 24515                                  DEVNAME:
 24516                                  	; 28/07/2018 - Retro DOS v3.0
 24517                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 24518                                  
 24519 0000425B 56                      	PUSH	SI
 24520 0000425C 57                      	PUSH	DI
 24521 0000425D 51                      	PUSH	CX
 24522 0000425E 50                      	PUSH	AX
 24523                                  
 24524                                  ; E5 special code
 24525 0000425F FF36[4B05]              	PUSH	WORD [NAME1]
 24526 00004263 803E[4B05]05            	CMP	byte [NAME1],5
 24527 00004268 7505                    	JNZ	short NOKTR
 24528 0000426A C606[4B05]E5            	MOV	byte [NAME1],0E5h
 24529                                  NOKTR:
 24530                                  	;test	byte [ATTRIB],8
 24531 0000426F F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 24532                                  					; If looking for VOL id don't find devs
 24533 00004274 7521                    	JNZ	short RET31
 24534                                  
 24535                                  ;hkn; NULDEV is in DOSDATA
 24536 00004276 BE[4800]                	MOV	SI,NULDEV
 24537                                  LOOKIO:
 24538                                  	; 21/11/2022
 24539                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 24540                                  	; 17/12/2022
 24541                                  	;test	byte [si+5],80h
 24542 00004279 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 24543                                  	;;test	word [si+4],8000h
 24544                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 24545 0000427D 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 24546 0000427F 89F0                    	MOV	AX,SI
 24547                                  	;add	si,10
 24548 00004281 83C60A                  	ADD	SI,SYSDEV.NAME
 24549                                  
 24550                                  ;hkn; NAME1 is in DOSDATA
 24551 00004284 BF[4B05]                	MOV	DI,NAME1
 24552 00004287 B90400                  	MOV	CX,4			; All devices are 8 letters
 24553 0000428A F3A7                    	REPE	CMPSW			; Check for name in list
 24554 0000428C 89C6                    	MOV	SI,AX
 24555 0000428E 7415                    	JZ	short IOCHK		; Found it?
 24556                                  SKIPDEV:
 24557 00004290 C534                    	LDS	SI,[SI]			; Get address of next device
 24558 00004292 83FEFF                  	CMP	SI,-1			; At end of list?
 24559 00004295 75E2                    	JNZ	short LOOKIO
 24560                                  RET31:	
 24561 00004297 F9                      	STC				; Not found
 24562                                  RETNV:	
 24563 00004298 8CD1                    	MOV	CX,SS
 24564 0000429A 8ED9                    	MOV	DS,CX
 24565                                  
 24566 0000429C 8F06[4B05]              	POP	WORD [NAME1]
 24567 000042A0 58                      	POP	AX
 24568 000042A1 59                      	POP	CX
 24569 000042A2 5F                      	POP	DI
 24570 000042A3 5E                      	POP	SI
 24571 000042A4 C3                      	RETN
 24572                                  
 24573                                  IOCHK:
 24574                                  ;hkn; SS override for DEVPT
 24575 000042A5 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 24576                                  	;mov	bh,[si+4]
 24577 000042AA 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 24578 000042AD 80CFC0                  	OR	BH,0C0h
 24579 000042B0 80E7DF                  	and	bh,0DFh
 24580                                  	;AND	BH,~(020h)		; Clears Carry
 24581 000042B3 368936[9A05]            	MOV	[SS:DEVPT],SI
 24582 000042B8 EBDE                    	JMP	short RETNV
 24583                                  
 24584                                  ;BREAK <Build_device_ent - Make a Directory entry>
 24585                                  ;---------------------------------------------------------------------------
 24586                                  ; Procedure Name : Build_device_ent
 24587                                  ;
 24588                                  ; Inputs:
 24589                                  ;	[NAME1] has name
 24590                                  ;	BH is attribute field (supplied by DEVNAME)
 24591                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 24592                                  ; Function:
 24593                                  ;	Build a directory entry for a device at DEVFCB
 24594                                  ; Outputs:
 24595                                  ;	BX points to DEVFCB
 24596                                  ;	SI points to dir_first field
 24597                                  ;	AH = input BH
 24598                                  ;	AL = 0
 24599                                  ;	dir_first = DEVPT
 24600                                  ;	Zero Set, Carry Clear
 24601                                  ; DS,ES,BP preserved, others destroyed
 24602                                  ;--------------------------------------------------------------------------
 24603                                  
 24604                                  Build_device_ent:
 24605 000042BA B82020                  	MOV	AX,"  " ; 2020h
 24606                                  
 24607                                  ;hkn; DEVFCB is in DOSDATA
 24608 000042BD BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 24609                                  
 24610                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 24611                                  
 24612 000042C0 AB                      	STOSW
 24613 000042C1 AA                      	STOSB				; Blank out extent field
 24614                                  	;mov	al,40h
 24615 000042C2 B040                    	MOV	AL,attr_device
 24616                                  
 24617                                  ;	Fill Dir_attr
 24618                                  
 24619 000042C4 AA                      	STOSB				; Set attribute field
 24620 000042C5 31C0                    	XOR	AX,AX
 24621 000042C7 B90A00                  	MOV	CX,10
 24622                                  
 24623                                  ; Fill dir_pad
 24624                                  
 24625 000042CA F3AB                    	REP	STOSW			; Fill rest with zeros
 24626 000042CC E877C8                  	call	DATE16
 24627                                  
 24628                                  ;hkn; DEVFCB is in DOSDATA
 24629 000042CF BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 24630 000042D2 92                      	XCHG	AX,DX
 24631                                  
 24632                                  ; Fill dir_time
 24633                                  
 24634 000042D3 AB                      	STOSW
 24635 000042D4 92                      	XCHG	AX,DX
 24636                                  
 24637                                  ; Fill dir_date
 24638                                  
 24639 000042D5 AB                      	STOSW
 24640 000042D6 89FE                    	MOV	SI,DI			; SI points to dir_first field
 24641 000042D8 A1[9A05]                	MOV	AX,[DEVPT]
 24642                                  
 24643                                  ; Fill dir_first
 24644                                  
 24645 000042DB AB                      	STOSW				; Dir_first points to device
 24646 000042DC A1[9C05]                	MOV	AX,[DEVPT+2]
 24647                                  ;
 24648                                  ; Fill dir_size_l
 24649                                  ;
 24650 000042DF AB                      	STOSW
 24651 000042E0 88FC                    	MOV	AH,BH			; Put device atts in AH
 24652                                  
 24653                                  ;hkn; DEVFCB is in DOSDATA
 24654 000042E2 BB[4B05]                	MOV	BX,DEVFCB
 24655 000042E5 30C0                    	XOR	AL,AL			; Set zero, clear carry
 24656 000042E7 C3                      	retn
 24657                                  
 24658                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 24659                                  ;----------------------------------------------------------------------------
 24660                                  ;
 24661                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 24662                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 24663                                  ;   If invalid, reset original CDS to root.
 24664                                  ;
 24665                                  ;   Inputs:	ThisCDS points to CDS of interest
 24666                                  ;		SS:DI points to temp buffer
 24667                                  ;   Outputs:	The current directory string is validated on the appropriate
 24668                                  ;		    drive
 24669                                  ;		ThisDPB changed
 24670                                  ;		ES:DI point to CDS
 24671                                  ;		Carry set if error (currently user FAILed to I 24)
 24672                                  ;   Registers modified: all
 24673                                  ;----------------------------------------------------------------------------
 24674                                  
 24675                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24676                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 24677                                  
 24678                                  ValidateCDS:
 24679                                  	; 19/05/2019 - Retro DOS v4.0
 24680                                  	; 28/07/2018 - Retro DOS v3.0
 24681                                  
 24682                                     %define  Temp	[bp-2]	; word
 24683                                     %define  SaveCDS	[bp-6]	; dword
 24684                                     %define  SaveCDSL	[bp-6]	; word
 24685                                     %define  SaveCDSH	[bp-4]	; word
 24686                                  
 24687                                  	;Enter
 24688 000042E8 55                      	push	bp
 24689 000042E9 89E5                    	mov	bp,sp
 24690 000042EB 83EC06                  	sub	sp,6
 24691                                  
 24692 000042EE 897EFE                  	MOV	Temp,DI
 24693                                  
 24694                                  ;hkn; SS override
 24695 000042F1 36C536[A205]            	LDS	SI,[SS:THISCDS]
 24696 000042F6 8976FA                  	MOV	SaveCDSL,SI
 24697 000042F9 8C5EFC                  	MOV	SaveCDSH,DS
 24698                                  	;EnterCrit critDisk
 24699 000042FC E889D0                  	call	ECritDisk
 24700                                  	; 21/11/2022
 24701                                  	;test	byte [SI+curdir.flags+1],80h
 24702                                  	;test	word [si+67],8000h
 24703                                  	; 17/12/2022
 24704                                  	;test	byte [SI+68],80h
 24705 000042FF F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 24706                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 24707 00004303 7403                    	JZ	short _DoSplice
 24708 00004305 E98D00                  	JMP	FatFail
 24709                                  _DoSplice:
 24710 00004308 30D2                    	XOR	DL,DL
 24711 0000430A 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 24712                                  
 24713                                  ;hkn; SS is DOSDATA
 24714                                  	;Context ES
 24715 0000430F 16                      	push	ss
 24716 00004310 07                      	pop	es
 24717                                  	;Invoke	FStrcpy
 24718 00004311 E846CF                  	call	FStrCpy
 24719 00004314 8B76FE                  	MOV	SI,Temp
 24720                                  
 24721                                  ;hkn; SS is DOSDATA
 24722                                  	;Context DS
 24723 00004317 16                      	push	ss
 24724 00004318 1F                      	pop	ds	
 24725                                  	;Invoke	Splice
 24726 00004319 E8932B                  	call	Splice
 24727                                  
 24728                                   ;hkn; SS is DOSDATA
 24729                                  	;Context DS			;   FatReadCDS (ThisCDS);
 24730 0000431C 16                      	push	ss
 24731 0000431D 1F                      	pop	ds
 24732 0000431E 8816[4C03]              	MOV	[NoSetDir],DL
 24733 00004322 C43E[A205]              	LES	DI,[THISCDS]
 24734                                  	;SAVE	<BP>
 24735 00004326 55                      	push	bp
 24736                                  	;Invoke	FATREAD_CDS
 24737 00004327 E87414                  	call	FATREAD_CDS	
 24738                                  	;RESTORE <BP>
 24739 0000432A 5D                      	pop	bp
 24740 0000432B 7268                    	JC	short FatFail
 24741                                  
 24742 0000432D C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 24743                                  	;cmp	word [si+73],-1
 24744 00004331 837C49FF                	CMP	word [SI+curdir.ID],-1
 24745 00004335 7550                    	JNZ	short RestoreCDS
 24746                                  
 24747                                  ;hkn; SS is DOSDATA
 24748                                  	;Context ES
 24749 00004337 16                      	push	ss
 24750 00004338 07                      	pop	es
 24751                                  
 24752                                  ;hkn; SS override
 24753                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 24754 00004339 36FF36[B205]            	push	word [SS:WFP_START]
 24755                                  	;cmp	si,[bp-6]
 24756 0000433E 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 24757 00004341 750B                    	JNZ	short DoChdir
 24758                                  	;mov	di,[bp-2]
 24759 00004343 8B7EFE                  	MOV	DI,Temp
 24760                                  
 24761                                  ;hkn; SS override
 24762 00004346 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 24763                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 24764 0000434B E80CCF                  	call	FStrCpy
 24765                                  DoChdir:
 24766                                  ;hkn; SS is DOSDATA
 24767                                  	;Context DS
 24768 0000434E 16                      	push	ss
 24769 0000434F 1F                      	pop	ds
 24770                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 24771 00004350 FF36[6D05]              	push	word [SATTRIB]
 24772 00004354 55                      	push	bp
 24773                                  	;Invoke	DOS_ChDir
 24774 00004355 E8DAEE                  	call	DOS_CHDIR
 24775                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 24776 00004358 5D                      	pop	bp
 24777 00004359 5B                      	pop	bx
 24778 0000435A 8F06[B205]              	pop	word [WFP_START]
 24779 0000435E 881E[6D05]              	MOV	[SATTRIB],BL
 24780 00004362 C576FA                  	LDS	SI,SaveCDS
 24781 00004365 730F                    	JNC	short SetCluster	;	if (c == -1) {
 24782                                  
 24783                                  ;hkn; SS override for THISCDS
 24784 00004367 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 24785 0000436C 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 24786 00004371 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 24787 00004373 884C03                  	MOV	[SI+3],CL		;	    }
 24788                                  SetCluster:
 24789                                  	; 16/02/2024
 24790                                  	;;mov	word [si+73],0FFFFh
 24791                                  	;MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 24792                                  	;
 24793 00004376 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 24794                                  	; 21/11/2022
 24795                                  	;test	byte [si+curdir.flags+1],20h
 24796                                  	; 19/05/2019
 24797                                  	; MSDOS 6.0
 24798                                  	; 17/12/2022
 24799                                  	;test	byte [si+68],20h
 24800 0000437B F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 24801                                  	;;test	word [si+67],2000h
 24802                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 24803 0000437F 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 24804 00004381 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 24805                                  _setdirclus:
 24806                                  	;mov	[si+73],cx
 24807 00004384 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 24808                                  RestoreCDS:
 24809 00004387 C47EFA                  	LES	DI,SaveCDS
 24810 0000438A 36893E[A205]            	MOV	[SS:THISCDS],DI
 24811 0000438F 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 24812 00004394 F8                      	CLC
 24813                                  FatFail:
 24814                                  	;LeaveCrit critDisk
 24815 00004395 E80BD0                  	call	LCritDisk
 24816                                  
 24817                                  	;les	di,[bp-6]
 24818 00004398 C47EFA                  	LES	DI,SaveCDS
 24819                                  	;Leave
 24820 0000439B 89EC                    	mov	sp,bp
 24821 0000439D 5D                      	pop	bp
 24822 0000439E C3                      	retn
 24823                                  
 24824                                  ; 28/07/2018 - Retro DOS v3.0
 24825                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 24826                                  
 24827                                  ;Break	<CheckThisDevice - Check for being a device>
 24828                                  ;---------------------------------------------------------------------------
 24829                                  ;
 24830                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 24831                                  ;   device specified. We will return carry if there is a device present. 
 24832                                  ;   The forms of devices we will recognize are:
 24833                                  ;
 24834                                  ;	[path]device
 24835                                  ;
 24836                                  ;   Note that the drive letter has *already* been removed. All other forms
 24837                                  ;   are not considered to be devices. If such a device is found we change
 24838                                  ;   the source pointer to point to the device component.
 24839                                  ;
 24840                                  ;   Inputs:	ES is DOSDATA
 24841                                  ;		DS:SI contains name
 24842                                  ;   Outputs:	ES is DOSDATA
 24843                                  ;		DS:SI point to name or device
 24844                                  ;		Carry flag set if device was found
 24845                                  ;		Carry flag reset otherwise
 24846                                  ;   Registers Modified: all except ES:DI, DS
 24847                                  ;----------------------------------------------------------------------------
 24848                                  
 24849                                  CheckThisDevice:
 24850 0000439F 57                      	push	di
 24851 000043A0 56                      	push	si
 24852 000043A1 89F7                    	MOV	DI,SI
 24853                                  
 24854                                  ; Check for presence of \dev\ (Dam multiplan!)
 24855                                  
 24856 000043A3 8A04                    	MOV	AL,[SI]
 24857 000043A5 E8A00D                  	call	PATHCHRCMP		; is it a path char?
 24858 000043A8 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 24859 000043AA 46                      	INC	SI			; simulate LODSB
 24860                                  
 24861                                  ; We have the leading path separator. Look for DEV part.
 24862                                  
 24863 000043AB AD                      	LODSW
 24864 000043AC 0D2020                  	OR	AX,2020h
 24865 000043AF 3D6465                  	cmp	ax,"de"
 24866                                  	;CMP	AX,"e"<< 8 + "d"
 24867 000043B2 752D                    	JNZ	short NotDevice		; not "de", assume not device
 24868 000043B4 AC                      	LODSB
 24869 000043B5 0C20                    	OR	AL,20h
 24870 000043B7 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 24871 000043B9 7526                    	JNZ	short NotDevice
 24872 000043BB AC                      	LODSB
 24873 000043BC E8890D                  	call	PATHCHRCMP		; do we have the last path separator?
 24874 000043BF 7520                    	JNZ	short NotDevice		; no. go for it.
 24875                                  
 24876                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 24877                                  ; SI and DevName may destroy DS.
 24878                                  
 24879                                  ParseDev:
 24880 000043C1 1E                      	push	ds
 24881 000043C2 56                      	push	si			; preserve the source pointer
 24882 000043C3 E8C00C                  	call	NameTrans		; advance DS:SI
 24883 000043C6 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 24884 000043C9 F9                      	STC				; simulate a Carry return from DevName
 24885 000043CA 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 24886                                  
 24887                                  ;hkn; SS is DOSDATA
 24888 000043CC 16                      	push	ss
 24889 000043CD 1F                      	pop	ds
 24890                                  
 24891                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 24892                                  ;
 24893                                  ; SR;
 24894                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 24895                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 24896                                  ; old call set the volume attribute bit.
 24897                                  
 24898 000043CE A0[6D05]                	mov	al,[SATTRIB]
 24899 000043D1 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 24900                                  
 24901                                  ; M026 - end
 24902                                  
 24903 000043D4 E884FE                  	call	DEVNAME
 24904                                  
 24905                                  SkipSearch:
 24906 000043D7 5E                      	pop	si
 24907 000043D8 1F                      	pop	ds
 24908                                  
 24909                                  ; SI points to the beginning of the potential device. If we have a device
 24910                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 24911                                  ; original value. At this point Carry set indicates FILE.
 24912                                  
 24913                                  CheckReturn:
 24914 000043D9 5F                      	pop	di			; get original SI
 24915 000043DA 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 24916 000043DC 89FE                    	MOV	SI,DI
 24917                                  Check_Done:
 24918 000043DE 5F                      	pop	di
 24919 000043DF F5                      	CMC				; invert carry. Carry => device
 24920 000043E0 C3                      	retn
 24921                                  NotDevice:
 24922 000043E1 F9                      	STC
 24923 000043E2 EBF5                    	JMP	short CheckReturn
 24924                                  
 24925                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 24926                                  ;-----------------------------------------------------------------------------
 24927                                  ;
 24928                                  ; Procedure Name : LookupPath
 24929                                  ;
 24930                                  ; Output  DS:SI -> path name,
 24931                                  ;	  ES:DI -> dir entry info buffer
 24932                                  ;	  ES:CX -> extended dir info buffer
 24933                                  ;
 24934                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 24935                                  ;			     FastOpen, DS:SI points to char just one after
 24936                                  ;			     the last char of path name which is fully or
 24937                                  ;			     partially found in FastOPen
 24938                                  ;	  carry flag set : FastOpen not in memory or path name not found
 24939                                  ;
 24940                                  ;----------------------------------------------------------------------------
 24941                                  
 24942                                  LookupPath:
 24943                                  ;	PUSH	AX
 24944                                  
 24945                                  ;hkn; SS override
 24946                                  	;test	byte [ss:FastOpenFlg],1
 24947 000043E4 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 24948 000043EA 7503                    	JNZ	short FASTINST			    ; and this routine is
 24949                                  NOLOOK:
 24950 000043EC E99700                  	JMP	NOLOOKUP			    ; executed once
 24951                                  
 24952                                  FASTINST:
 24953                                  ;hkn; SS override
 24954                                  	;test	byte [ss:FastOpenFlg],8
 24955 000043EF 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 24956 000043F5 75F5                    	JNZ	short NOLOOK			    ; yes
 24957                                  
 24958 000043F7 BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 24959                                  
 24960                                  ;hkn; SS override
 24961 000043FA 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 24962 000043FF BF[460D]                	MOV	DI,Dir_Info_Buff
 24963 00004402 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24964 00004405 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 24965 00004407 1E                      	PUSH	DS
 24966 00004408 07                      	POP	ES
 24967                                  
 24968                                  ;hkn; SS override
 24969                                  	;call	far [bx+2]
 24970 00004409 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 24971 0000440C 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 24972                                  
 24973 0000440E 8D5CFE                  	LEA	BX,[SI-2]
 24974                                  
 24975                                  ;hkn; SS override
 24976 00004411 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 24977 00004416 745D                    	JZ	short NOTFOUND			    ; no
 24978                                  
 24979                                  	; 19/05/2019 - Retro DOS v4.0
 24980                                  
 24981                                  	; MSDOS 6.0				    ; fully or partially found
 24982 00004418 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 24983 0000441B 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 24984 0000441D 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 24985                                  
 24986                                  ;hkn; SS override for attrib/sattrib
 24987 0000441E 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 24988 00004423 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 24989 00004428 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 24990                                  	;mov	ch,[es:di+0Bh]
 24991 0000442D 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 24992 00004431 E81AFE                  	call	MatchAttributes 		    ;AN000;FO.;
 24993                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 24994 00004434 59                      	POP	CX				    ;AN000;FO.;
 24995 00004435 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 24996                                  parfnd:
 24997                                  
 24998                                  ;hkn; SS override
 24999 00004437 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25000 0000443C 89CB                    	MOV	BX,CX
 25001                                  	; MSDOS 6.0
 25002                                  	;mov	ax,[bx+7]
 25003 0000443E 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25004                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25005 00004441 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25006 00004445 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25007 00004448 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25008                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25009                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25010                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25011 0000444C 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25012 0000444F 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25013                                  
 25014 00004453 06                      	PUSH	ES				    ; save ES
 25015                                  ;hkn; SS override
 25016 00004454 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25017 00004459 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25018                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25019 0000445C 07                      	POP	ES				    ; pop ES
 25020                                  ;SR;
 25021                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25022                                  ;indicate it is not a root dir
 25023                                  
 25024 0000445D 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25025 00004464 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25026 00004469 89FB                    	MOV	BX,DI				    ; start of entry
 25027                                  	;lea	si,[di+1Ah]
 25028 0000446B 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25029                                  						    ; dir_first field in the
 25030                                  						    ; dir entry
 25031                                  ;hkn; SS override for FastOpenFlg
 25032                                  	;or	byte [ss:FastOpenFlg],2
 25033 0000446E 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25034                                  ;	POP	AX
 25035 00004474 C3                      	RETN
 25036                                  NOTFOUND:
 25037 00004475 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25038 00004478 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25039 0000447A 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25040                                  Partial_Success:
 25041                                  	;and	byte [SS:FastOpenFlg],0FBh
 25042 00004480 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25043                                  NOLOOKUP:
 25044                                  ;	POP	AX
 25045 00004486 F9                      	STC
 25046 00004487 C3                      	RETN
 25047                                  
 25048                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25049                                  ;-----------------------------------------------------------------------------
 25050                                  ;
 25051                                  ; Procedure Name : InsertPath
 25052                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25053                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25054                                  ;	  DS = DOSDATA
 25055                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25056                                  ;
 25057                                  ;-----------------------------------------------------------------------------
 25058                                  
 25059                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25060                                  
 25061                                  InsertPath:
 25062 00004488 9C                      	PUSHF
 25063                                  ;hkn; SS override for FastOpenFlag
 25064                                  	;test	byte [SS:FastOpenFlg], 1
 25065 00004489 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25066 0000448F 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25067                                  	;test	byte [ss:FastOpenFlg],2
 25068 00004491 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25069 00004497 740D                    	JZ	short INSERT_DIR_INFO		; no
 25070                                  	;and	byte [ss:FastOpenFlg],0FDh
 25071 00004499 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25072 0000449F 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25073 000044A4 EB5E                    	JMP	short GET_NEXT2
 25074                                  INSERT_DIR_INFO:				; save registers
 25075 000044A6 1E                      	PUSH	DS
 25076 000044A7 06                      	PUSH	ES
 25077 000044A8 53                      	PUSH	BX
 25078 000044A9 56                      	PUSH	SI
 25079 000044AA 57                      	PUSH	DI
 25080 000044AB 51                      	PUSH	CX
 25081 000044AC 50                      	PUSH	AX
 25082                                  
 25083                                  ;hkn; SS override
 25084 000044AD 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25085 000044B2 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25086                                  	;mov	ax,[di+6]
 25087 000044B5 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25088                                  	; MSDOS 6.0
 25089                                  	;mov	[ss:si+1],ax
 25090 000044B8 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25091                                  	; 19/05/2019 - Retro DOS v4.0
 25092 000044BC 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25093                                  
 25094                                  ;hkn; SS is DOSDATA
 25095 000044BF 16                      	push	ss
 25096 000044C0 1F                      	pop	ds
 25097                                  	; MSDOS 3.3	
 25098                                  	;;mov	[si+1],ax	
 25099                                  	;MOV	[SI+FEI.dirsec],AX
 25100                                  	; MSDOS 6.0
 25101                                  	;mov	[si+3],ax
 25102 000044C1 894403                  	MOV	[SI+FEI.dirsec+2],AX  ;AN000;>32mb save high dir sector
 25103                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25104 000044C4 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25105                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25106                                  	;mov	[si+3],ax ; MSDOS 3.3
 25107 000044C7 894405                  	MOV	[SI+FEI.clusnum],AX
 25108                                  	; MSDOS 6.0
 25109 000044CA A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25110                                  	;mov	[si+7],ax
 25111 000044CD 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25112 000044D0 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25113                                  	;mov	[si+9],ax
 25114 000044D3 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25115                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25116 000044D6 89D8                    	MOV	AX,BX
 25117                                  	;;add	di,16  ; MSDOS 3.3
 25118                                  	;add	di,20  ; MSDOS 6.0
 25119 000044D8 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25120 000044DB 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25121                                  	;mov	cl,32
 25122 000044DD B120                    	MOV	CL,dir_entry.size
 25123 000044DF F6F1                    	DIV	CL
 25124                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25125 000044E1 8804                    	mov	[si],al
 25126                                  
 25127 000044E3 1E                      	PUSH	DS
 25128 000044E4 07                      	POP	ES
 25129                                  
 25130 000044E5 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25131 000044E9 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25132                                  	;cmp	word [di+1Ah],0
 25133 000044EB 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25134                                  					; never insert info when file is empty
 25135 000044EF 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25136                                  
 25137 000044F1 56                      	PUSH	SI			; ES:BX -> extended info
 25138 000044F2 5B                      	POP	BX
 25139                                  
 25140                                  	;mov	al,2
 25141 000044F3 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25142 000044F5 BE[300D]                	MOV	SI,FastOpenTable
 25143                                  	;call	far [es:si+2]
 25144                                  	; 07/12/2022
 25145 000044F8 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25146                                  
 25147 000044FC F8                      	CLC
 25148                                  SKIP_INSERT:
 25149 000044FD 58                      	POP	AX
 25150 000044FE 59                      	POP	CX			; restore registers
 25151 000044FF 5F                      	POP	DI
 25152 00004500 5E                      	POP	SI
 25153 00004501 5B                      	POP	BX
 25154 00004502 07                      	POP	ES
 25155 00004503 1F                      	POP	DS
 25156                                  GET_NEXT2:
 25157                                  	;or	[ss:FastOpenFlg],8
 25158 00004504 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25159                                  					; we got dir info from fastopen so
 25160                                  GET_NEXT_ELEMENT:
 25161 0000450A 9D                      	POPF
 25162 0000450B C3                      	RETN
 25163                                  
 25164                                  ;============================================================================
 25165                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25166                                  ;============================================================================
 25167                                  ; 17/07/2018 - Retro DOS v3.0
 25168                                  ; 30/04/2019 - Retro DOS v4.0
 25169                                  
 25170                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25171                                  
 25172                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25173                                  
 25174                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25175                                  
 25176                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25177                                  ;DEV001s:
 25178                                  ;		length of packets
 25179 0000450C 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25180                                  ;LenTab: db	22,14,22,13,15,14
 25181                                  
 25182                                  ;	Error Function
 25183                                  
 25184                                  CmdTab:
 25185 00004512 8604                    	DB	86h, DEVRD	; 0 input
 25186 00004514 8605                    	DB	86h, DEVRDND	; 1 input status
 25187 00004516 8708                    	DB	87h, DEVWRT	; 2 output
 25188 00004518 870A                    	DB	87h, DEVOST	; 3 output status
 25189 0000451A 8607                    	DB	86h, DEVIFL	; 4 input flush
 25190 0000451C 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25191                                  
 25192                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25193                                  
 25194                                  ;CmdTab:
 25195                                  ;	db	86h, 4
 25196                                  ;	db	86h, 5
 25197                                  ;	db	87h, 8
 25198                                  ;	db	87h, 10
 25199                                  ;	db	86h, 7
 25200                                  ;	db	86h, 5
 25201                                  
 25202                                  ;DEV001E:
 25203                                  
 25204                                  ; 30/04/2019 - Retro DOS v4.0
 25205                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25206                                  
 25207                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25208                                  ;----------------------------------------------------------------------------
 25209                                  ;
 25210                                  ; Procedure Name : IOFUNC
 25211                                  ;
 25212                                  ; Inputs:
 25213                                  ;	DS:SI Points to SFT
 25214                                  ;	AH is function code
 25215                                  ;		= 0 Input
 25216                                  ;		= 1 Input Status
 25217                                  ;		= 2 Output
 25218                                  ;		= 3 Output Status
 25219                                  ;		= 4 Flush
 25220                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25221                                  ;				   present.
 25222                                  ;	AL = character if output
 25223                                  ; Function:
 25224                                  ;	Perform indicated I/O to device or file
 25225                                  ; Outputs:
 25226                                  ;	AL is character if input
 25227                                  ;	If a status call
 25228                                  ;		zero set if not ready
 25229                                  ;		zero reset if ready (character in AL for input status)
 25230                                  ; For regular files:
 25231                                  ;	Input Status
 25232                                  ;		Gets character but restores position
 25233                                  ;		Zero set on EOF
 25234                                  ;	Input
 25235                                  ;		Gets character advances position
 25236                                  ;		Returns ^Z on EOF
 25237                                  ;	Output Status
 25238                                  ;		Always ready
 25239                                  ; AX altered, all other registers preserved
 25240                                  ;----------------------------------------------------------------------------
 25241                                  
 25242                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25243                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25244                                  
 25245                                  IOFUNC:
 25246 0000451E 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25247                                  					; DEVIOBUF
 25248 00004523 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25249 0000452A 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25250 00004531 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25251                                  	;test	byte [si+6],80h
 25252                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25253 00004535 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25254 00004539 7403                    	JZ	short IOTO22		;AN000;
 25255 0000453B E9A500                  	JMP	IOTOFILE		;AN000;
 25256                                  IOTO22:
 25257                                  	;test	word [si+5],80h
 25258                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25259 0000453E F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25260 00004542 7503                    	JNZ	short IOTO33		;AN000;
 25261 00004544 E99C00                  	JMP	IOTOFILE		;AN000;
 25262                                  IOTO33:
 25263 00004547 06                      	push	es ; * (MSDOS 6.21)
 25264 00004548 E860BF                  	call	save_world
 25265 0000454B 8CDA                    	MOV	DX,DS
 25266 0000454D 8CD3                    	MOV	BX,SS
 25267 0000454F 8EDB                    	MOV	DS,BX
 25268 00004551 8EC3                    	MOV	ES,BX
 25269 00004553 31DB                    	XOR	BX,BX
 25270 00004555 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25271 00004558 7503                    	jnz	short _no_sys_wait
 25272                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25273                                  	; 16/12/2022
 25274 0000455A 80CF04                  	or	bh,04h
 25275                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25276                                  				    ; It is up to device driver to carry out
 25277                                  				    ; appropriate action.
 25278                                  _no_sys_wait:
 25279 0000455D 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25280 00004561 31DB                    	XOR	BX,BX
 25281 00004563 881E[8903]              	MOV	[IOMED],BL
 25282                                  
 25283 00004567 88E3                    	MOV	BL,AH		 	; get function
 25284 00004569 2E8AA7[0C45]            	MOV	AH,[cs:BX+LenTab]
 25285 0000456E D1E3                    	SHL	BX,1
 25286 00004570 2E8B8F[1245]            	MOV	CX,[cs:BX+CmdTab]
 25287 00004575 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25288 00004578 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25289 0000457C 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25290                                  
 25291 00004580 8EDA                    	MOV	DS,DX
 25292 00004582 E86D01                  	CALL	DEVIOCALL
 25293 00004585 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25294 0000458A 21FF                    	and	di,di
 25295 0000458C 7834                    	js	short DevErr
 25296                                  OKDevIO:
 25297 0000458E 8CD0                    	MOV	AX,SS
 25298 00004590 8ED8                    	MOV	DS,AX
 25299                                  
 25300                                  	;cmp	ch,5
 25301 00004592 80FD05                  	CMP	CH,DEVRDND
 25302 00004595 7506                    	JNZ	short DNODRD
 25303 00004597 A0[8903]                	MOV	AL,[IORCHR]
 25304 0000459A A2[BC03]                	MOV	[DEVIOBUF],AL
 25305                                  
 25306                                  DNODRD: 
 25307 0000459D 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 25308 000045A1 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 25309                                  	;and	ah,2
 25310 000045A3 80E402                  	AND	AH,STBUI>>8
 25311                                  
 25312                                  QuickReturn:				;AN000; 2/13/KK
 25313 000045A6 E8EBBE                  	call	restore_world
 25314 000045A9 07                      	pop	es ; * (MSDOS 6.21)
 25315                                  
 25316                                  	; SR;
 25317                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 25318                                  	; IoStatFail = -1 (set after return from the I24)
 25319                                  
 25320                                  	; MSDOS 6.0
 25321 000045AA 9C                      	pushf
 25322 000045AB 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 25323 000045AF 98                      	cbw				;sign extend to word
 25324 000045B0 83F8FF                  	cmp	ax,-1
 25325 000045B3 7507                    	jne	short not_fail_ret
 25326 000045B5 36FE06[8300]            	inc	byte [ss:IoStatFail]
 25327 000045BA 9D                      	popf
 25328 000045BB C3                      	retn
 25329                                  
 25330                                  not_fail_ret:
 25331 000045BC 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 25332 000045C0 9D                      	popf
 25333 000045C1 C3                      	retn
 25334                                  
 25335                                  DevErr:
 25336 000045C2 88CC                    	MOV	AH,CL
 25337 000045C4 E8BA0D                  	call	CHARHARD
 25338 000045C7 3C01                    	CMP	AL,1
 25339 000045C9 7507                    	JNZ	short NO_RETRY
 25340 000045CB E8C6BE                  	call	restore_world
 25341                                  	; 12/05/2019
 25342 000045CE 07                      	pop	es ; * (MSDOS 6.21)		
 25343 000045CF E94CFF                  	JMP	IOFUNC	; 10/08/2018
 25344                                  
 25345                                  NO_RETRY:
 25346                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 25347                                  	; ready so that DOS doesn't get caught in a status loop when user 
 25348                                  	; simply wants to ignore the error.
 25349                                  	;
 25350                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 25351                                  	; should be checked by the caller on return
 25352                                  
 25353                                  					; SS override
 25354 000045D2 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 25355                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 25356                                  
 25357                                  	; SR;
 25358                                  	; Check if user failed
 25359                                  
 25360                                  	; MSDOS 6.0
 25361 000045D8 3C03                    	cmp	al,3
 25362 000045DA 7505                    	jnz	short not_fail
 25363 000045DC 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 25364                                  not_fail:
 25365 000045E1 EBAB                    	JMP	short OKDevIO
 25366                                  
 25367                                  IOTOFILE:
 25368 000045E3 08E4                    	OR	AH,AH
 25369 000045E5 7421                    	JZ	short IOIN
 25370 000045E7 FECC                    	DEC	AH
 25371 000045E9 7405                    	JZ	short IOIST
 25372 000045EB FECC                    	DEC	AH
 25373 000045ED 7411                    	JZ	short IOUT
 25374                                  IOUT_retn:	; 18/12/2022
 25375 000045EF C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 25376                                  IOIST:
 25377                                  	;push	word [si+15h]
 25378 000045F0 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 25379                                  	;push	word [si+17h]
 25380 000045F3 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 25381 000045F6 E80F00                  	CALL	IOIN
 25382                                  	;pop	word [si+17h]
 25383 000045F9 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 25384                                  	;pop	word [si+15h]
 25385 000045FC 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 25386 000045FF C3                      	retn
 25387                                  IOUT:
 25388 00004600 E82500                  	CALL	SETXADDR
 25389 00004603 E865EF                  	call	DOS_WRITE
 25390                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 25391                                  	; 18/12/2022
 25392 00004606 EB54                    	jmp	RESTXADDR
 25393                                  ;IOUT_retn:
 25394                                  	;retn			; come crying to me when things don't
 25395                                  				; work ARR
 25396                                  IOIN:
 25397 00004608 E81D00                  	CALL	SETXADDR
 25398                                  					; SS override for DOS34_FLAG
 25399                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 25400                                  	;or	word [ss:DOS34_FLAG],40h
 25401                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25402                                  	; 16/12/2022
 25403 0000460B 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 25404 00004611 E83FED                  	CALL	DOS_READ
 25405                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 25406                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 25407                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25408                                  	; 16/12/2022
 25409 00004614 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 25410 0000461A 09C9                    	OR	CX,CX			; Check EOF
 25411 0000461C E83D00                  	CALL	RESTXADDR
 25412                                  					; SS override
 25413 0000461F 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 25414 00004623 75CA                    	jnz	short IOUT_retn	
 25415 00004625 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 25416 00004627 C3                      	retn
 25417                                  
 25418                                  SETXADDR:
 25419                                  					; SS override
 25420 00004628 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 25421                                  
 25422 0000462D 06                      	push	es ; * (MSDOS 6.21)
 25423                                  
 25424 0000462E E87ABE                  	call	save_world
 25425                                  					; SS override for DMAADD and THISSFT
 25426 00004631 36FF36[2C03]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 25427 00004636 36FF36[2E03]            	PUSH	WORD [SS:DMAADD+2]
 25428 0000463B 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 25429                                  
 25430 00004640 16                      	push	ss
 25431 00004641 1F                      	pop	ds
 25432                                  
 25433 00004642 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 25434 00004646 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 25435 0000464A 890E[2E03]              	MOV	[DMAADD+2],CX
 25436 0000464E 8B0E[8A03]              	MOV	CX,[IOXAD]
 25437 00004652 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 25438 00004656 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 25439 0000465A EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 25440                                  
 25441                                  RESTXADDR:
 25442 0000465C 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 25443 00004660 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 25444 00004664 8F06[2C03]              	POP	WORD [DMAADD]
 25445                                  
 25446 00004668 E829BE                  	call	restore_world
 25447                                  
 25448 0000466B 07                      	pop	es ; * (MSDOS 6.21)
 25449                                  					; SS override
 25450                                  RESTRET:
 25451 0000466C 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 25452                                  
 25453                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 25454                                  ; 21/11/2022
 25455                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 25456                                  
 25457                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 25458                                  
 25459                                  ;----------------------------------------------------------------------------
 25460                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 25461                                  ;
 25462                                  ;	Dev_Open_SFT issues an open call to the device associated with
 25463                                  ;	the SFT.
 25464                                  ;
 25465                                  ;	ENTRY	(ES:DI) = SFT
 25466                                  ;	EXIT	none
 25467                                  ;	USES	all
 25468                                  ;----------------------------------------------------------------------------
 25469                                  
 25470                                  DEV_OPEN_SFT:
 25471 00004671 06                      	push	es ; * (MSDOS 6.21)
 25472 00004672 E836BE                  	call	save_world
 25473                                  	;mov	al,0Dh	
 25474 00004675 B00D                    	MOV	AL,DEVOPN
 25475 00004677 EB06                    	JMP	SHORT DO_OPCLS
 25476                                  
 25477                                  ;----------------------------------------------------------------------------
 25478                                  ; Procedure Name : DEV_CLOSE_SFT
 25479                                  ;
 25480                                  ; Inputs:
 25481                                  ;	ES:DI Points to SFT
 25482                                  ; Function:
 25483                                  ;	Issue a CLOSE call to the correct device
 25484                                  ; Outputs:
 25485                                  ;	None
 25486                                  ; ALL preserved
 25487                                  ;----------------------------------------------------------------------------
 25488                                  
 25489                                  DEV_CLOSE_SFT:
 25490 00004679 06                      	push	es ; * (MSDOS 6.21)
 25491 0000467A E82EBE                  	call	save_world
 25492                                  	;mov	al,0Eh	
 25493 0000467D B00E                    	MOV	AL,DEVCLS
 25494                                  
 25495                                  	; Main entry for device open and close. AL contains the function 
 25496                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 25497                                  	; open/close to block devices. This allows networks to function but 
 25498                                  	; does NOT hang up with bogus change-line code.
 25499                                  
 25500                                  	;entry	DO_OPCLS
 25501                                  DO_OPCLS:
 25502                                  	; Is the SFT for the net? If so, no action necessary.
 25503                                  
 25504                                  	; MSDOS 6.0
 25505                                  	;test	word [es:di+5],8000h
 25506                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 25507 0000467F 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25508 00004684 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 25509 00004686 30E4                    	XOR	AH,AH			; Unit
 25510                                  	;test	byte [es:di+5],80h
 25511 00004688 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 25512                                  	;les	di,[es:di+7]
 25513 0000468D 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 25514 00004691 7513                    	JNZ	short GOT_DEV_ADDR
 25515                                  
 25516                                  	; We are about to call device open/close on a block driver. If no 
 25517                                  	; sharing then just short circuit to done.
 25518                                  	
 25519                                  	; MSDOS 6.0
 25520                                  					; SS override
 25521 00004693 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 25522 00004699 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 25523                                  
 25524                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25525                                  	;mov	ah,[es:di+1]
 25526 0000469B 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 25527 0000469F 268A0D                  	mov	cl,[es:di]
 25528                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 25529                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 25530                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 25531 000046A2 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 25532                                  GOT_DEV_ADDR:				; ES:DI -> device
 25533                                  	;test	word [es:di+4],800h
 25534                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 25535 000046A6 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 25536 000046AB 7440                    	JZ	short OPCLS_DONE	; Device can't
 25537 000046AD 06                      	PUSH	ES
 25538 000046AE 1F                      	POP	DS
 25539 000046AF 89FE                    	MOV	SI,DI			; DS:SI -> device
 25540                                  
 25541                                  OPCLS_RETRY:
 25542                                  	;Context ES
 25543 000046B1 16                      	push	ss
 25544 000046B2 07                      	pop	es
 25545                                  					; DEVCALL is in DOSDATA
 25546 000046B3 BF[5A03]                	MOV	DI,DEVCALL
 25547                                  
 25548 000046B6 89FB                    	MOV	BX,DI
 25549 000046B8 50                      	PUSH	AX
 25550                                  	;mov	al,13
 25551 000046B9 B00D                    	MOV	AL,DOPCLHL
 25552 000046BB AA                      	STOSB				; Length
 25553 000046BC 58                      	POP	AX
 25554 000046BD 86E0                    	XCHG	AH,AL
 25555 000046BF AA                      	STOSB				; Unit
 25556 000046C0 86E0                    	XCHG	AH,AL
 25557 000046C2 AA                      	STOSB				; Command
 25558 000046C3 26C7050000              	MOV	WORD [ES:DI],0		; Status
 25559 000046C8 50                      	PUSH	AX			; Save Unit,Command
 25560                                  	;invoke	DEVIOCALL2
 25561 000046C9 E82900                  	call	DEVIOCALL2
 25562                                  
 25563                                  	;mov	di,[es:bx+3]
 25564 000046CC 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 25565                                  	;test	di,8000h
 25566                                  	;jz	short OPCLS_DONEP	
 25567 000046D0 21FF                    	and	di,di
 25568 000046D2 7918                    	jns	short OPCLS_DONEP	; No error
 25569                                  	; 21/11/2022
 25570                                  	;test	word [si+4],8000h
 25571                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25572                                  	;test	word [si+5],80h
 25573 000046D4 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25574 000046D8 7404                    	JZ	short BLKDEV
 25575 000046DA B486                    	MOV	AH,86H			; Read error in data, Char dev
 25576 000046DC EB04                    	JMP	SHORT HRDERR
 25577                                  BLKDEV:
 25578 000046DE 88C8                    	MOV	AL,CL			; Drive # in AL
 25579 000046E0 B406                    	MOV	AH,6			; Read error in data, Blk dev
 25580                                  HRDERR:
 25581                                  	;invoke	CHARHARD
 25582 000046E2 E89C0C                  	call	CHARHARD
 25583 000046E5 3C01                    	cmp	al,1
 25584 000046E7 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 25585                                  					;  Note that FAIL is essentually IGNORED
 25586 000046E9 58                      	POP	AX			; Get back Unit, Command
 25587 000046EA EBC5                    	JMP	short OPCLS_RETRY
 25588                                  OPCLS_DONEP:
 25589 000046EC 58                      	POP	AX			; Clean stack
 25590                                  OPCLS_DONE:
 25591 000046ED E8A4BD                  	call	restore_world
 25592 000046F0 07                      	pop	es ; * (MSDOS 6.21)
 25593 000046F1 C3                      	retn
 25594                                  
 25595                                  ; 30/04/2019 - Retro DOS v4.0
 25596                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 25597                                  
 25598                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25599                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 25600                                  
 25601                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 25602                                  ;----------------------------------------------------------------------------
 25603                                  ;**	DevIoCall  - Call Device
 25604                                  ;
 25605                                  ;	ENTRY	DS:SI Points to device SFT
 25606                                  ;		ES:BX Points to request data
 25607                                  ;	EXIT	DS:SI -> Device driver
 25608                                  ;	USES	DS:SI,AX
 25609                                  ;----------------------------------------------------------------------------
 25610                                  ;**	DevIoCall2 - Call Device
 25611                                  ;
 25612                                  ;	ENTRY	DS:SI Points to DPB
 25613                                  ;		ES:BX Points to request data
 25614                                  ;	EXIT	DS:SI -> Device driver
 25615                                  ;	USES	DS:SI,AX
 25616                                  ;----------------------------------------------------------------------------
 25617                                  
 25618                                  DEVIOCALL:
 25619                                  					; SS override for CALLSSEC, 
 25620                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 25621 000046F2 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 25622                                  
 25623                                  	;entry	DEVIOCALL2
 25624                                  DEVIOCALL2:
 25625                                  	;EnterCrit critDevice
 25626 000046F5 E8C5CC                  	call	ECritDevice
 25627                                  
 25628                                  	; MSDOS 6.0
 25629                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 25630                                  	;test	byte [si+5],80h
 25631 000046F8 F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 25632 000046FC 7548                    	jnz	short chardev2		;AN000; >32mb no
 25633                                  
 25634                                  	; 16/12/2022
 25635                                  	; 22/11/2022
 25636 000046FE 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 25637 00004702 3C04                    	cmp	al,DEVRD	; 4
 25638 00004704 7408                    	je	short chkext	
 25639 00004706 3C08                    	cmp	al,DEVWRT	; 8
 25640 00004708 7404                    	je	short chkext
 25641 0000470A 3C09                    	cmp	al,DEVWRTV	; 9
 25642 0000470C 7538                    	jne	short chardev2
 25643                                  
 25644                                  	; 16/12/2022
 25645                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25646                                  	;;cmp	byte [es:bx+2],4
 25647                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 25648                                  	;JZ	short chkext		;AN000; >32mb   yes
 25649                                  	;;cmp	byte [es:bx+2],8
 25650                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 25651                                  	;JZ	short chkext		;AN000; >32mb   yes
 25652                                  	;;cmp	byte [es:bx+2],9
 25653                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 25654                                  	;				;AN000; >32mb write/verify ?
 25655                                  	;JNZ	short chardev2		;AN000; >32mb no
 25656                                  chkext:
 25657 0000470E E89900                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 25658 00004711 7255                    	JC	short dev_exit		;AN000;LB. done
 25659                                  
 25660                                  	;test	byte [si+4],2
 25661 00004713 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 25662 00004717 741D                    	JZ	short chksector		;AN000;>32mb   no
 25663 00004719 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 25664 0000471D 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 25665 00004721 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 25666 00004728 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 25667 0000472C 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 25668 00004730 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 25669 00004734 EB10                    	JMP	short chardev2		;AN000; >32mb
 25670                                  chksector:				;AN000; >32mb
 25671 00004736 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 25672 0000473C 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 25673                                  	;mov	word [es:bx+3],8107h
 25674 0000473E 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 25675                                  					;AN000; >32mb
 25676 00004744 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 25677                                  
 25678                                  chardev2:				;AN000;
 25679                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 25680                                  	; preserved
 25681                                  
 25682                                  	;mov	ax,[si+6]
 25683 00004746 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 25684 00004749 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25685 0000474D 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 25686 00004752 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25687                                  
 25688                                  	;mov	ax,[si+8]
 25689 00004757 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 25690 0000475A 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25691 0000475E 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25692                                  
 25693                                  	; MSDOS 6.0
 25694 00004763 E84001                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 25695 00004766 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 25696                                  
 25697                                  dev_exit:
 25698                                  	;LeaveCrit critDevice
 25699                                  	;call	LCritDevice
 25700                                  	;retn
 25701                                  	; 18/12/2022
 25702 00004768 E96DCC                  	jmp	LCritDevice
 25703                                  
 25704                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 25705                                  ; 22/11/2022
 25706                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 25707                                  
 25708                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 25709                                  ;---------------------------------------------------------------------------
 25710                                  ;
 25711                                  ; Procedure Name : SETREAD, SETWRITE
 25712                                  ;
 25713                                  ; Inputs:
 25714                                  ;	DS:BX = Transfer Address
 25715                                  ;	CX = Record Count
 25716                                  ;	DX = Starting Record
 25717                                  ;	AH = Media Byte
 25718                                  ;	AL = Unit Code
 25719                                  ; Function:
 25720                                  ;	Set up the device call header at DEVCALL
 25721                                  ; Output:
 25722                                  ;	ES:BX Points to DEVCALL
 25723                                  ; No other registers effected
 25724                                  ;
 25725                                  ;---------------------------------------------------------------------------
 25726                                  
 25727                                  SETREAD:
 25728 0000476B 57                      	PUSH	DI
 25729 0000476C 51                      	PUSH	CX
 25730 0000476D 50                      	PUSH	AX
 25731 0000476E B104                    	MOV	CL,DEVRD ; mov cl,4
 25732                                  SETCALLHEAD:
 25733 00004770 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 25734 00004772 16                      	PUSH	SS
 25735 00004773 07                      	POP	ES
 25736                                  					; DEVCALL is in DOSDATA
 25737 00004774 BF[5A03]                	MOV	DI,DEVCALL
 25738                                  
 25739 00004777 AA                      	STOSB				; length
 25740 00004778 58                      	POP	AX			; 
 25741 00004779 AA                      	STOSB				; Unit
 25742 0000477A 50                      	PUSH	AX
 25743 0000477B 88C8                    	MOV	AL,CL
 25744 0000477D AA                      	STOSB				; Command code
 25745 0000477E 31C0                    	XOR	AX,AX
 25746 00004780 AB                      	STOSW				; Status
 25747 00004781 83C708                  	ADD	DI,8			; Skip link fields
 25748 00004784 58                      	POP	AX
 25749 00004785 86E0                    	XCHG	AH,AL
 25750 00004787 AA                      	STOSB				; Media byte
 25751 00004788 86C4                    	XCHG	AL,AH
 25752 0000478A 50                      	PUSH	AX
 25753 0000478B 89D8                    	MOV	AX,BX
 25754 0000478D AB                      	STOSW
 25755                                  
 25756 0000478E 8CD8                    	MOV	AX,DS
 25757 00004790 AB                      	STOSW				; Transfer addr
 25758                                  
 25759 00004791 59                      	POP	CX			; Real AX
 25760 00004792 58                      	POP	AX			; Real CX
 25761 00004793 AB                      	STOSW				; Count
 25762                                  
 25763 00004794 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 25764 00004795 AB                      	STOSW				; Start
 25765 00004796 91                      	XCHG	AX,CX
 25766 00004797 87D1                    	XCHG	DX,CX
 25767 00004799 5F                      	POP	DI
 25768                                  					; DEVCALL is in DOSDATA
 25769 0000479A BB[5A03]                	MOV	BX,DEVCALL
 25770 0000479D C3                      	retn
 25771                                  
 25772                                  	;entry	SETWRITE
 25773                                  SETWRITE:
 25774                                  
 25775                                  ; Inputs:
 25776                                  ;	DS:BX = Transfer Address
 25777                                  ;	CX = Record Count
 25778                                  ;	DX = Starting Record
 25779                                  ;	AH = Media Byte
 25780                                  ;	AL = Unit Code
 25781                                  ; Function:
 25782                                  ;	Set up the device call header at DEVCALL
 25783                                  ; Output:
 25784                                  ;	ES:BX Points to DEVCALL
 25785                                  ; No other registers effected
 25786                                  
 25787 0000479E 57                      	PUSH	DI
 25788 0000479F 51                      	PUSH	CX
 25789 000047A0 50                      	PUSH	AX
 25790 000047A1 B108                    	MOV	CL,DEVWRT ; mov cl,8
 25791 000047A3 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 25792 000047A8 EBC6                    	JMP	SHORT SETCALLHEAD
 25793                                  
 25794                                  ; 30/04/2019 - Retro DOS v4.0
 25795                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 25796                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25797                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 25798                                  
 25799                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 25800                                  ;---------------------------------------------------------------------------
 25801                                  ;
 25802                                  ; Procedure Name : RW_SC
 25803                                  ;
 25804                                  ; Inputs:
 25805                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 25806                                  ;	 [SC_STATUS]= SC validity status
 25807                                  ;	 [SEQ_SECTOR]= last sector read
 25808                                  ; Function:
 25809                                  ;	Read from or write through secondary cache
 25810                                  ; Output:
 25811                                  ;	ES:BX Points to DEVCALL
 25812                                  ;	carry clear, I/O is not done
 25813                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 25814                                  ;	carry set, I/O is done
 25815                                  ;
 25816                                  ;----------------------------------------------------------------------------
 25817                                  
 25818                                  RW_SC:
 25819                                  	; SS override for all variables used.
 25820                                  	
 25821 000047AA 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 25822 000047B0 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 25823 000047B2 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 25824 000047B8 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 25825 000047BA 51                      	PUSH	CX			    ;AN000;LB.
 25826 000047BB 52                      	PUSH	DX			    ;AN000;LB. yes
 25827 000047BC 1E                      	PUSH	DS			    ;AN000;LB. save registers
 25828 000047BD 56                      	PUSH	SI			    ;AN000;LB.
 25829 000047BE 06                      	PUSH	ES			    ;AN000;LB.
 25830 000047BF 57                      	PUSH	DI			    ;AN000;LB.
 25831                                  
 25832 000047C0 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 25833 000047C5 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 25834 000047CB 7408                    	JZ	short doread		    ;AN000;LB. yes
 25835 000047CD E8C400                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 25836 000047D0 E98E00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 25837                                  scexit4:				    ;AN000;
 25838 000047D3 F8                      	CLC				    ;AN000;LB. I/O not done yet
 25839 000047D4 C3                      	retn				    ;AN000;LB.
 25840                                  doread: 				    ;AN000;
 25841 000047D5 E82601                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 25842 000047D8 720A                    	JC	short readSC		    ;AN000;LB.
 25843 000047DA 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 25844 000047E1 F9                      	STC				    ;AN000;LB. set carry
 25845 000047E2 EB6B                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 25846                                  readSC: 				    ;AN000;
 25847 000047E4 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 25848 000047E8 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 25849 000047ED 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 25850 000047F2 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 25851 000047F7 83F800                  	CMP	AX,0			    ;AN000;LB. greater than 64K
 25852 000047FA 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 25853                                  chklow: 						
 25854 000047FC 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 25855 000047FF 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 25856 00004801 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 25857 00004808 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 25858 0000480C 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 25859                                  readsr:
 25860 00004810 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 25861 00004814 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 25862 00004818 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 25863 0000481C 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 25864                                  
 25865 00004820 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 25866 00004824 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 25867 00004828 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25868 0000482C 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 25869 00004830 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 25870 00004836 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 25871 0000483A 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 25872 0000483E 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 25873 00004842 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 25874 00004846 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 25875 0000484A 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 25876                                  saveseq2:				    ;AN000;
 25877 0000484E F8                      	CLC				    ;AN000;LB. clear carry
 25878                                  saveseq:				    ;AN000;	
 25879 0000484F 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 25880 00004853 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 25881 00004857 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 25882 0000485B 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 25883 0000485F EB01                    	JMP	short scexit 		    ;AN000;LB.	
 25884                                  scexit2:				    ;AN000;LB.
 25885 00004861 F8                      	CLC				    ;AN000;LB.	clear carry
 25886                                  scexit: 				    ;AN000;		
 25887 00004862 5F                      	POP	DI			    ;AN000;LB.
 25888 00004863 07                      	POP	ES			    ;AN000;LB. restore registers
 25889 00004864 5E                      	POP	SI			    ;AN000;LB.
 25890 00004865 1F                      	POP	DS			    ;AN000;LB.
 25891 00004866 5A                      	POP	DX			    ;AN000;LB.
 25892 00004867 59                      	POP	CX			    ;AN000;LB.
 25893 00004868 C3                      	retn				    ;AN000;LB.
 25894                                  
 25895                                  ;Break	<IN_SC -- check if in secondary cache>
 25896                                  ;--------------------------------------------------------------------------
 25897                                  ;
 25898                                  ; Procedure Name : IN_SC
 25899                                  ;
 25900                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25901                                  ;	   [CURSC_DRIVE]= current SC drive
 25902                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25903                                  ;	   [SC_CACHE_COUNT]= SC count
 25904                                  ;	   [HIGH_SECTOR]:DX= sector number
 25905                                  ; Function:
 25906                                  ;	Check if the sector is in secondary cache
 25907                                  ; Output:
 25908                                  ;	carry clear, in SC
 25909                                  ;	   CX= the index in the secondary cache
 25910                                  ;	carry set, not in SC
 25911                                  ;
 25912                                  ;---------------------------------------------------------------------------
 25913                                  
 25914                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25915                                  IN_SC:
 25916                                  	; SS override for all variables used
 25917 00004869 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 25918 0000486D 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 25919 00004872 751E                    	JNZ	short outrange2		    ;AN000;;LB. no
 25920 00004874 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 25921 00004878 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 25922 0000487A 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 25923 0000487F 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 25924 00004884 83F800                  	CMP	AX,0			    ;AN000;;LB. greater than 64K
 25925 00004887 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 25926 00004889 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 25927 0000488E 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 25928 00004890 F8                      	CLC				    ;AN000;;LB. clear carry
 25929                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 25930                                  	; 16/12/2022
 25931 00004891 C3                      	retn	; 30/04/2019
 25932                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25933                                  	;jmp	short inexit
 25934                                  
 25935                                  outrange2:				    ;AN000;;LB. set carry
 25936 00004892 F9                      	STC				    ;AN000;;LB.
 25937                                  inexit: 				    ;AN000;;LB.
 25938 00004893 C3                      	retn				    ;AN000;;LB.
 25939                                  
 25940                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 25941                                  ;---------------------------------------------------------------------------
 25942                                  ;
 25943                                  ; Procedure Name : Invalidate_Sc
 25944                                  ;
 25945                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25946                                  ;	   [CURSC_DRIVE]= current SC drive
 25947                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25948                                  ;	   [SC_CACHE_COUNT]= SC count
 25949                                  ;	   [SC_STATUS]= SC status word
 25950                                  ;	   [HIGH_SECTOR]:DX= sector number
 25951                                  ;
 25952                                  ; Function:
 25953                                  ;	invalidate secondary cache if in there
 25954                                  ; Output:
 25955                                  ;	[SC_STATUS] is updated
 25956                                  ;---------------------------------------------------------------------------
 25957                                  
 25958                                  INVALIDATE_SC:
 25959                                  	; SS override for all variables used
 25960                                  
 25961 00004894 E8D2FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 25962 00004897 720C                    	JC	short outrange		    ;AN000;;LB. no
 25963 00004899 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 25964 0000489C D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 25965 0000489E F7D0                    	NOT	AX			    ;AN000;;LB.
 25966 000048A0 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 25967                                  outrange:				    ;AN000;;LB.
 25968 000048A5 C3                      	retn				    ;AN000;;LB.
 25969                                  
 25970                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 25971                                  ; 22/11/2022
 25972                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 25973                                  
 25974                                  ;Break	<VIRREAD- virtually read data into buffer>
 25975                                  ;--------------------------------------------------------------------------
 25976                                  ;
 25977                                  ; Procedure Name : SC_FLAG
 25978                                  ;
 25979                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 25980                                  ;		     1, continuous sectors were read into SC
 25981                                  ; Function:
 25982                                  ;	   Move data from SC to buffer
 25983                                  ; Output:
 25984                                  ;	 carry clear, data is moved to buffer
 25985                                  ;	 carry set, bad sector or exceeds maximum sector
 25986                                  ;	   SC_FLAG =0
 25987                                  ;	   CALLSCNT=1
 25988                                  ;	   SC_STATUS= -1 if succeeded
 25989                                  ;     
 25990                                  ;		       0 if failed
 25991                                  ;--------------------------------------------------------------------------
 25992                                  
 25993                                  VIRREAD:
 25994                                  	; SS override for all variables used
 25995                                  
 25996 000048A6 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 25997 000048AC 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 25998 000048AE 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 25999 000048B2 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26000 000048B6 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26001 000048BA 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26002 000048BE 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26003 000048C4 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26004                                  
 26005                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26006 000048CB 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26007 000048D1 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26008 000048D3 1E                      	PUSH	DS			    ;AN000;;LB.
 26009 000048D4 56                      	PUSH	SI			    ;AN000;;LB.
 26010 000048D5 06                      	PUSH	ES			    ;AN000;;LB.
 26011 000048D6 57                      	PUSH	DI			    ;AN000;;LB.
 26012 000048D7 52                      	PUSH	DX			    ;AN000;;LB.
 26013 000048D8 51                      	PUSH	CX			    ;AN000;;LB.
 26014 000048D9 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 26015 000048DB E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC t
 26016 000048DE 59                      	POP	CX
 26017 000048DF 5A                      	POP	DX			    ;AN000;;LB.
 26018 000048E0 5F                      	POP	DI			    ;AN000;;LB.
 26019 000048E1 07                      	POP	ES			    ;AN000;;LB.
 26020 000048E2 5E                      	POP	SI			    ;AN000;;LB.
 26021 000048E3 1F                      	POP	DS			    ;AN000;;LB.
 26022 000048E4 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26023                                  scerror:				    ;AN000;
 26024 000048E6 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26025 000048ED 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26026 000048F4 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26027 000048FA F9                      	STC				    ;AN000;;LB. carry set
 26028 000048FB C3                      	retn				    ;AN000;;LB.
 26029                                  sc2end: 				    ;AN000;
 26030 000048FC F8                      	CLC				    ;AN000;;LB. carry clear
 26031 000048FD C3                      	retn				    ;AN000;;LB.
 26032                                  
 26033                                  ; 30/04/2019 - Retro  DOS v4.0
 26034                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26035                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26036                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26037                                  
 26038                                  ;Break	<SC2BUF- move data from SC to buffer>
 26039                                  ;----------------------------------------------------------------------------
 26040                                  ;
 26041                                  ; Procedure Name : SC2BUF
 26042                                  ;
 26043                                  ; Inputs:  [SC_STATUS] = SC validity status
 26044                                  ;	   [SC_SECTOR_SIZE] = request sector size
 26045                                  ;	   [SC_CACHE_PTR] = pointer to SC
 26046                                  ; Function:
 26047                                  ;	   Move data from SC to buffer
 26048                                  ; Output:
 26049                                  ;	   carry clear, in SC  and data is moved
 26050                                  ;	   carry set, not in SC and data is not moved
 26051                                  ;---------------------------------------------------------------------------
 26052                                  
 26053                                  SC2BUF:
 26054                                  	; SS override for all variables used
 26055 000048FE E868FF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 26056 00004901 7241                    	JC	short noSC		    ;AN000;LB. no
 26057 00004903 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 26058 00004906 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 26059 00004908 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 26060 0000490D 7435                    	JZ	short noSC		    ;AN000;LB. invalid
 26061                                  ;entry SC2BUF2
 26062                                  SC2BUF2:				    ;AN000;
 26063 0000490F 89C8                    	MOV	AX,CX			    ;AN000;LB. times index with
 26064 00004911 36F726[AD0D]            	MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 26065 00004916 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 26066 0000491B 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26067 00004920 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 26068 00004922 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26069 00004924 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26070 00004929 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26071 0000492E 368B0E[AD0D]            	MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26072 00004933 D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26073                                  ;entry MOVWORDS
 26074                                  MOVWORDS:				    ;AN000;
 26075 00004935 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26076 0000493B 7403                    	JZ	short nodd		    ;AN000;LB. no
 26077 0000493D D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26078 0000493F 66                      	DB	66H			    ;AN000;LB. use double word move
 26079                                  nodd:
 26080 00004940 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 26081 00004942 F8                      	CLC				    ;AN000;LB. clear carry
 26082 00004943 C3                      	retn				    ;AN000;LB. exit
 26083                                  noSC:					    ;AN000;
 26084 00004944 F9                      	STC				    ;AN000;LB. set carry
 26085                                  sexit:					    ;AN000;
 26086 00004945 C3                      	retn				    ;AN000;LB.
 26087                                  
 26088                                  ;============================================================================
 26089                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 26090                                  ;============================================================================
 26091                                  ; 29/07/2018 - Retro DOS v3.0
 26092                                  ; 19/05/2019 - Retro DOS v4.0
 26093                                  
 26094                                  ;	TITLE	MKNODE - Node maker
 26095                                  ;	NAME	MKNODE
 26096                                  
 26097                                  ;**	MKNODE.ASM
 26098                                  ;----------------------------------------------------------------------------
 26099                                  ;	Low level routines for making a new local file system node
 26100                                  ;	and filling in an SFT from a directory entry
 26101                                  ;
 26102                                  ;	BUILDDIR
 26103                                  ;	SETDOTENT
 26104                                  ;	MakeNode
 26105                                  ;	NEWENTRY
 26106                                  ;	FREEENT
 26107                                  ;	NEWDIR
 26108                                  ;	DOOPEN
 26109                                  ;	RENAME_MAKE
 26110                                  ;	CHECK_VIRT_OPEN
 26111                                  ;
 26112                                  ;	Revision history:
 26113                                  ;
 26114                                  ;	 AN000	version 4.0  Jan. 1988
 26115                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26116                                  
 26117                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26118                                  ;----------------------------------------------------------------------------
 26119                                  ;
 26120                                  ; Procedure Name : BUILDDIR,NEWDIR
 26121                                  ;
 26122                                  ; Inputs:
 26123                                  ;       ES:BP Points to DPB
 26124                                  ;       [THISSFT] Set if using NEWDIR entry point
 26125                                  ;               (used by ALLOCATE)
 26126                                  ;       [LASTENT] current last valid entry number in directory if no free
 26127                                  ;               entries
 26128                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26129                                  ; Function:
 26130                                  ;       Grow directory if no free entries and not root
 26131                                  ; Outputs:
 26132                                  ;       CARRY SET IF FAILURE
 26133                                  ;       ELSE
 26134                                  ;          AX entry number of new entry
 26135                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26136                                  ;               AX = first entry of new dir
 26137                                  ;       GETENT should be called to set [LASTENT]
 26138                                  ;
 26139                                  ;----------------------------------------------------------------------------
 26140                                  
 26141                                  ; 19/05/2019 - Retro DOS v4.0
 26142                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26143                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26144                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26145                                  
 26146                                  BUILDDIR:
 26147                                  	; 29/07/2018 - Retro DOS v3.0
 26148                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26149                                  
 26150 00004946 A1[D805]                        MOV     AX,[ENTFREE]
 26151 00004949 83F8FF                          CMP     AX,-1
 26152 0000494C 7402                            JZ	short CHECK_IF_ROOT
 26153 0000494E F8                              CLC
 26154 0000494F C3                              retn
 26155                                  
 26156                                  CHECK_IF_ROOT:
 26157 00004950 833E[C205]00                    CMP     word [DIRSTART],0
 26158 00004955 7502                            JNZ	short NEWDIR
 26159 00004957 F9                              STC
 26160                                  builddir_retn:
 26161 00004958 C3                              retn				; Can't grow root
 26162                                  
 26163                                  	;entry   NEWDIR
 26164                                  NEWDIR:        
 26165 00004959 8B1E[C205]              	MOV     BX,[DIRSTART]
 26166 0000495D 09DB                            OR      BX,BX
 26167 0000495F 7405                            JZ	short NULLDIR
 26168 00004961 E83F06                  	call	GETEOF
 26169 00004964 72F2                            jc	short builddir_retn	; Screw up
 26170                                  NULLDIR:
 26171 00004966 B90100                          MOV     CX,1
 26172 00004969 E85005                  	call	ALLOCATE
 26173 0000496C 72EA                            jc	short builddir_retn
 26174 0000496E 8B16[C205]                      MOV     DX,[DIRSTART]
 26175 00004972 09D2                            OR      DX,DX
 26176 00004974 750D                            JNZ	short ADDINGDIR
 26177 00004976 E8CBF5                  	call	SETDIRSRCH
 26178 00004979 72DD                            jc	short builddir_retn
 26179 0000497B C706[4803]FFFF                  MOV     word [LASTENT],-1
 26180 00004981 EB2B                            JMP     SHORT GOTDIRREC
 26181                                  ADDINGDIR:
 26182 00004983 53                              PUSH    BX
 26183 00004984 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26184 00004988 E84A0C                          call	IsEOF
 26185 0000498B 5B                              POP     BX
 26186 0000498C 7219                            JB	short NOTFIRSTGROW
 26187                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26188 0000498E 891E[BC05]                      MOV     [CLUSNUM],BX
 26189 00004992 51                              PUSH    CX
 26190 00004993 50                              PUSH    AX
 26191 00004994 55                              PUSH    BP
 26192 00004995 B401                            MOV     AH,1			; CLUSNUM update
 26193                                  	; 15/12/2022
 26194 00004997 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26195                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26196                                  	;;mov	dl,[es:bp+0]
 26197                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26198 0000499B 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26199 0000499F 89DD                            MOV     BP,BX 			; CLUSNUM
 26200 000049A1 E8BBDD                  	call	FastOpen_Update
 26201 000049A4 5D                              POP     BP
 26202 000049A5 58                              POP     AX
 26203 000049A6 59                              POP     CX
 26204                                  
 26205                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26206                                  NOTFIRSTGROW:
 26207 000049A7 89DA                            MOV     DX,BX
 26208 000049A9 30DB                            XOR     BL,BL
 26209 000049AB E8E204                  	call	FIGREC
 26210                                  GOTDIRREC:
 26211                                  	;mov	cl,[es:bp+4]
 26212 000049AE 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26213 000049B2 FEC1                            INC     CL
 26214 000049B4 30ED                            XOR     CH,CH
 26215                                  ZERODIR:
 26216 000049B6 51                              PUSH    CX
 26217                                  	;mov	byte [ALLOWED],18h
 26218 000049B7 C606[4B03]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 26219 000049BC B0FF                            MOV     AL,0FFH
 26220 000049BE E84810                          call	GETBUFFR
 26221 000049C1 7302                            JNC	short GET_SSIZE
 26222 000049C3 59                              POP     CX
 26223 000049C4 C3                              retn
 26224                                  
 26225                                  GET_SSIZE:
 26226                                  	;mov	cx,[es:bp+2]
 26227 000049C5 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26228 000049C9 06                              PUSH    ES
 26229 000049CA C43E[E205]                      LES     DI,[CURBUF]
 26230                                  	;or	byte [es:di+5],4
 26231 000049CE 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26232 000049D3 57                              PUSH    DI
 26233                                  	;;add	di,16	; MSDOS 3.3
 26234                                  	;add	di,20	; MSDOS 6.0	
 26235 000049D4 83C714                          ADD     DI,BUFINSIZ
 26236 000049D7 31C0                            XOR     AX,AX
 26237 000049D9 D1E9                            SHR     CX,1
 26238 000049DB F3AB                            REP     STOSW
 26239 000049DD 7301                            JNC	short EVENZ
 26240 000049DF AA                              STOSB
 26241                                  EVENZ:
 26242 000049E0 5F                              POP     DI
 26243                                  
 26244                                  	; MSDOS 6.0
 26245 000049E1 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26246                                  					;LB. if already dirty		  ;AN000;
 26247 000049E6 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26248 000049E8 E82412                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26249                                          
 26250                                  	;or	byte [es:di+5],40h
 26251 000049EB 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26252                                  yesdirty7:
 26253 000049F0 07                              POP	ES
 26254 000049F1 59                              POP	CX
 26255                                  
 26256                                  	; 19/05/2019 - Retro DOS v4.0
 26257                                  
 26258                                  	; MSDOS 3.3
 26259                                  	;INC	DX
 26260                                  
 26261                                  	; MSDOS 6.0
 26262 000049F2 83C201                  	add	dx,1
 26263 000049F5 8316[0706]00            	adc	word [HIGH_SECTOR],0
 26264                                  
 26265 000049FA E2BA                            LOOP    ZERODIR
 26266                                  
 26267 000049FC A1[4803]                        MOV     AX,[LASTENT]
 26268 000049FF 40                              INC     AX
 26269 00004A00 F8                              CLC
 26270 00004A01 C3                              retn
 26271                                  
 26272                                  ;--------------------------------------------------------------------------
 26273                                  ;
 26274                                  ; Procedure Name : SETDOTENT
 26275                                  ;
 26276                                  ; set up a . or .. directory entry for a directory.
 26277                                  ;
 26278                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 26279                                  ;               AX contains ". " or ".."
 26280                                  ;               DX contains first cluster of entry
 26281                                  ;
 26282                                  ;----------------------------------------------------------------------------
 26283                                  
 26284                                  SETDOTENT:
 26285                                  ;	Fill in name field
 26286 00004A02 AB                              STOSW
 26287 00004A03 B90400                          MOV     CX,4
 26288 00004A06 B82020                          MOV     AX,"  " ; 2020h
 26289 00004A09 F3AB                            REP     STOSW
 26290 00004A0B AA                              STOSB
 26291                                  
 26292                                  ;	Set up attribute
 26293                                  	;mov	al, 10h
 26294 00004A0C B010                            MOV     AL,attr_directory
 26295 00004A0E AA                              STOSB
 26296                                  
 26297                                  ;	Initialize time and date of creation
 26298 00004A0F 83C70A                          ADD     DI,10
 26299 00004A12 8B36[9E05]                      MOV     SI,[THISSFT]
 26300                                  	;mov	ax,[si+0Dh]
 26301 00004A16 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 26302 00004A19 AB                              STOSW
 26303                                  	;mov	ax,[si+0Fh]
 26304 00004A1A 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 26305 00004A1D AB                      	STOSW
 26306                                  
 26307                                  ;	Set up first cluster field
 26308 00004A1E 89D0                            MOV     AX,DX
 26309 00004A20 AB                              STOSW
 26310                                  
 26311                                  ;	0 file size
 26312 00004A21 31C0                            XOR     AX,AX
 26313 00004A23 AB                              STOSW
 26314 00004A24 AB                              STOSW
 26315 00004A25 C3                              retn
 26316                                  
 26317                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 26318                                  ;---------------------------------------------------------------------------
 26319                                  ;
 26320                                  ; Procedure Name : MakeNode
 26321                                  ;
 26322                                  ; Inputs:
 26323                                  ;       AL - attribute to create
 26324                                  ;       AH = 0 if it is ok to truncate a file already by this name
 26325                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 26326                                  ;               (AH ignored on dirs and devices)
 26327                                  ;
 26328                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 26329                                  ;               a name already existant is ALWAYS an error in these cases.
 26330                                  ;
 26331                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 26332                                  ;               terminated)
 26333                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 26334                                  ;               ( = -1 if current dir not involved, else
 26335                                  ;                Points to first char after last "/" of current dir part)
 26336                                  ;       [THISCDS] Points to CDS being used
 26337                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 26338                                  ; Function:
 26339                                  ;       Make a new node
 26340                                  ; Outputs:
 26341                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 26342                                  ;       CARRY SET IF ERROR
 26343                                  ;          AX = 1 A node by this name exists and is a directory
 26344                                  ;          AX = 2 A new node could not be created
 26345                                  ;          AX = 3 A node by this name exists and is a disk file
 26346                                  ;               (AH was NZ on input)
 26347                                  ;          AX = 4 Bad Path
 26348                                  ;               SI return from GetPath maintained
 26349                                  ;          AX = 5 Attribute mismatch
 26350                                  ;          AX = 6 Sharing Violation
 26351                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 26352                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 26353                                  ;       ELSE
 26354                                  ;          AX = 0 Disk Node
 26355                                  ;          AX = 3 Device Node (error in some cases)
 26356                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 26357                                  ;               containing new node.
 26358                                  ;          [CURBUF+2]:BX Points to entry
 26359                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 26360                                  ;          [THISSFT] is filled in
 26361                                  ;               sf_mode = unchanged.
 26362                                  ;          Attribute byte in entry is input AL
 26363                                  ; DS preserved, others destroyed
 26364                                  ;
 26365                                  ;-------------------------------------------------------------------------
 26366                                  
 26367                                  ; 19/05/2019 - Retro DOS v4.0
 26368                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 26369                                  
 26370                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26371                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 26372                                  
 26373                                  MakeNode:
 26374                                  	;mov	word [CREATING],0E5FFh
 26375 00004A26 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 26376 00004A2C 50                              PUSH    AX              ; Save AH value
 26377 00004A2D C606[4C03]00            	MOV	byte [NoSetDir],0
 26378 00004A32 A2[6D05]                	MOV	[SATTRIB],AL
 26379 00004A35 E872F5                  	call	GetPathNoSet
 26380 00004A38 88CA                            MOV     DL,CL           ; Save CL info
 26381 00004A3A 89C1                            MOV     CX,AX           ; Device ID to CH
 26382 00004A3C 58                              POP     AX              ; Get back AH
 26383 00004A3D 732E                            JNC	short make_exists ; File existed
 26384 00004A3F 7505                            JNZ	short make_err_4 ; Path bad
 26385 00004A41 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 26386 00004A44 7406                            JZ	short make_type	; Name simply not found, and no metas
 26387                                  make_err_4:
 26388 00004A46 B004                            MOV     AL,4            ; case 1 bad path
 26389                                  make_err_ret:
 26390 00004A48 30E4                            XOR     AH,AH
 26391 00004A4A F9                              STC
 26392                                  ;make_retn:	; 22/11/2022
 26393 00004A4B C3                              retn
 26394                                  
 26395                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 26396                                  RENAME_MAKE:
 26397                                  make_type:
 26398                                  ;Extended Open hooks
 26399                                  	; MSDOS 6.0
 26400                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 26401 00004A4C F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 26402 00004A51 7411                    	JZ	short make_type2	;FT. no				;AN000;
 26403 00004A53 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 26404                                  					;FT. set for extended open ;AN000;
 26405                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 26406 00004A58 F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 26407 00004A5D 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 26408 00004A5F F9                      	STC				;FT. set carry			;AN000;
 26409 00004A60 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 26410                                  	; 22/11/2022
 26411                                  make_retn:
 26412                                  	;return
 26413 00004A63 C3                      	retn				;FT.				;AN000;
 26414                                  
 26415                                  ;	Extended Open hooks
 26416                                  
 26417                                  make_type2:
 26418 00004A64 C43E[9E05]                      LES     DI,[THISSFT]
 26419 00004A68 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 26420 00004A6A F9                              STC                     ; Not found
 26421 00004A6B EB5A                            JMP     short make_new
 26422                                  
 26423                                  ; The node exists. It may be either a device, directory or file:
 26424                                  ;   Zero set => directory
 26425                                  ;   High bit of CH on => device
 26426                                  ;   else => file
 26427                                  
 26428                                  make_exists:
 26429 00004A6D 7448                            JZ	short make_exists_dir
 26430 00004A6F B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 26431                                  	;test	byte [ATTRIB],18h
 26432 00004A71 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 26433 00004A76 753B                            JNZ	short make_err_ret_5
 26434                                  				; Cannot already exist as Disk or Device Node
 26435                                                                  ;       if making DIR or Volume ID
 26436 00004A78 08ED                            OR      CH,CH
 26437 00004A7A 781A                            JS	short make_share ; No further checks on attributes if device
 26438 00004A7C 08E4                            OR      AH,AH
 26439 00004A7E 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 26440 00004A80 51                              PUSH    CX              ; Save device ID
 26441 00004A81 8E06[E405]                      MOV     ES,[CURBUF+2]
 26442                                  	;mov	ch,[es:bx+0Bh]
 26443 00004A85 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 26444                                  	;test	ch,1
 26445 00004A89 F6C501                  	test	CH,attr_read_only
 26446 00004A8C 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 26447 00004A8E E8BDF7                  	call	MatchAttributes
 26448 00004A91 59                              POP     CX              ; Devid back in CH
 26449 00004A92 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 26450 00004A94 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 26451                                  make_share:
 26452 00004A96 30E4                            XOR     AH,AH
 26453 00004A98 50                              PUSH    AX              ; Save Disk or Device node
 26454 00004A99 51                              PUSH    CX              ; Save Device ID
 26455 00004A9A 88EC                            MOV     AH,CH           ; Device ID to AH
 26456 00004A9C E84601                          CALL    DOOPEN          ; Fill in SFT for share check
 26457 00004A9F C43E[9E05]                      LES     DI,[THISSFT]
 26458 00004AA3 56                      	push	si
 26459 00004AA4 53                      	push	bx		; Save CURBUF pointers
 26460 00004AA5 E85B29                  	call	ShareEnter
 26461 00004AA8 735A                            jnc	short MakeEndShare
 26462                                  
 26463                                  ; User failed request.
 26464 00004AAA 5B                      	pop	bx
 26465 00004AAB 5E                      	pop	si
 26466 00004AAC 59                      	pop	cx
 26467 00004AAD 58                      	pop	ax
 26468                                  
 26469                                  Make_Share_ret:
 26470 00004AAE B006                            MOV     AL,6
 26471 00004AB0 EB96                            JMP	short make_err_ret
 26472                                  
 26473                                  make_err_ret_5P:
 26474 00004AB2 59                              POP     CX              ; Get back device ID
 26475                                  make_err_ret_5:
 26476 00004AB3 B005                            MOV     AL,5            ; Attribute mismatch
 26477                                          ; 22/11/2022
 26478 00004AB5 EB91                    	JMP     short make_err_ret
 26479                                  
 26480                                  make_exists_dir:
 26481 00004AB7 B001                            MOV     AL,1            ; exists as directory, always an error
 26482                                  	; 22/11/2022
 26483 00004AB9 EB8D                    	JMP     short make_err_ret
 26484                                  
 26485                                  make_save:
 26486 00004ABB 50                              PUSH    AX              ; Save whether Disk or File
 26487 00004ABC 89C8                            MOV     AX,CX           ; Device ID to AH
 26488 00004ABE E87400                          CALL    NEWENTRY
 26489 00004AC1 58                              POP     AX              ; 0 if Disk, 3 if File
 26490 00004AC2 739F                            jnc	short make_retn
 26491 00004AC4 B002                            MOV     AL,2            ; create failed case 2
 26492                                  make_save_retn:
 26493 00004AC6 C3                              retn
 26494                                  
 26495                                  make_new:
 26496 00004AC7 E8F1FF                          call    make_save
 26497 00004ACA 72FA                            jc	short make_save_retn	; case 2 fail
 26498                                  	;test	byte [ATTRIB],10h
 26499 00004ACC F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 26500 00004AD1 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 26501                                  					; so don't tell the sharer about them
 26502 00004AD3 50                      	push	ax
 26503 00004AD4 53                      	push	bx
 26504 00004AD5 56                      	push	si		
 26505 00004AD6 E82A29                          call	ShareEnter
 26506 00004AD9 5E                      	pop	si
 26507 00004ADA 5B                      	pop	bx
 26508 00004ADB 58                      	pop	ax
 26509 00004ADC 73E8                    	jnc	short make_save_retn
 26510                                  
 26511                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 26512                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 26513                                  ; possible: delete the newly created directory entry and return share_error.
 26514                                  
 26515 00004ADE 50                              PUSH    AX
 26516 00004ADF C43E[E205]                      LES     DI,[CURBUF]
 26517                                  	;mov	byte [es:bx],0E5h
 26518 00004AE3 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 26519                                  	
 26520                                  	; MSDOS 6.0
 26521                                  	;test	byte [es:di+5],40h
 26522 00004AE7 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 26523                                  					;LB. if already dirty		  ;AN000;
 26524 00004AEC 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 26525                                  	; 22/11/2022
 26526 00004AEE E81E11                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 26527                                  	;or	byte [es:di+5],40h
 26528 00004AF1 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 26529                                  yesdirty8:
 26530 00004AF6 C42E[8A05]                      LES     BP,[THISDPB]
 26531                                  	; 15/12/2022
 26532 00004AFA 268A4600                        mov	al,[ES:BP]
 26533                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26534                                  	;;mov	al,[es:bp+0]
 26535                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 26536 00004AFE E80610                          call	FLUSHBUF		; write out buffer.
 26537 00004B01 58                              POP     AX
 26538 00004B02 EBAA                            jmp	short Make_Share_ret
 26539                                  
 26540                                  ; We have found an existing file. We have also entered it into the share set.
 26541                                  ; At this point we need to call newentry to correctly address the problem of
 26542                                  ; getting rid of old data (create an existing file) or creating a new
 26543                                  ; directory entry (create a new file). Unfortunately, this operation may
 26544                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 26545                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 26546                                  ; the share set now, do the operation and then reassert the share access.
 26547                                  ;
 26548                                  ; We are allowed to do this! There is no window! After all, we are in
 26549                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 26550                                  
 26551                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26552                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 26553                                  
 26554                                  MakeEndShare:
 26555 00004B04 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 26556 00004B08 31C0                            XOR     AX,AX
 26557 00004B0A E87BC8                  	call	ECritSFT
 26558 00004B0D 268705                  	xchg	AX,[ES:DI]
 26559                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 26560 00004B10 50                      	push	ax
 26561 00004B11 57                      	push	di
 26562 00004B12 06                      	push	es
 26563 00004B13 9C                              PUSHF
 26564 00004B14 E8E728                          call	ShareEnd                ; remove sharing
 26565 00004B17 9D                              POPF
 26566 00004B18 07                      	pop	es
 26567 00004B19 5F                      	pop	di
 26568 00004B1A 268F05                          pop	word [ES:DI]	
 26569                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 26570 00004B1D E883C8                  	call	LCritSFT
 26571                                  	; 22/11/2022
 26572                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 26573 00004B20 5B                      	pop	bx
 26574 00004B21 5E                      	pop	si
 26575 00004B22 59                      	pop	cx
 26576 00004B23 58                      	pop	ax
 26577 00004B24 E894FF                          CALL    make_save
 26578                                  
 26579                                  ; If the user failed, we do not reenter into the sharing set.
 26580                                  
 26581 00004B27 729D                            jc	short make_save_retn	; bye if error
 26582 00004B29 50                      	push	ax
 26583 00004B2A 53                      	push	bx
 26584 00004B2B 56                      	push	si
 26585 00004B2C 9C                              PUSHF
 26586 00004B2D E8D328                          call	ShareEnter
 26587 00004B30 9D                              POPF
 26588 00004B31 5E                      	pop	si
 26589 00004B32 5B                      	pop	bx
 26590 00004B33 58                      	pop	ax
 26591                                  
 26592                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 26593                                  
 26594                                  makeendshare_retn:
 26595 00004B34 C3                              retn
 26596                                  
 26597                                  ;---------------------------------------------------------------------------
 26598                                  ;
 26599                                  ; Procedure Name : NEWENTRY
 26600                                  ;
 26601                                  ; Inputs:
 26602                                  ;       [THISSFT] set
 26603                                  ;       [THISDPB] set
 26604                                  ;       [LASTENT] current last valid entry number in directory if no free
 26605                                  ;               entries
 26606                                  ;       [VOLID] set if a volume ID was found during search
 26607                                  ;	Attrib Contains attributes for new file
 26608                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26609                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 26610                                  ;               NC means file existed (device)
 26611                                  ;               C  means file did not exist
 26612                                  ;       AH = Device ID byte
 26613                                  ;       If FILE
 26614                                  ;           [CURBUF+2]:BX points to start of directory entry
 26615                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26616                                  ;       If device
 26617                                  ;           DS:BX points to start of "fake" directory entry
 26618                                  ;           DS:SI points to dir_first of "fake" directory entry
 26619                                  ;               (has DWORD pointer to device header)
 26620                                  ; Function:
 26621                                  ;       Make a new directory entry
 26622                                  ;       If an old one existed it is truncated first
 26623                                  ; Outputs:
 26624                                  ;       Carry set if error
 26625                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 26626                                  ;               vol ID, user FAILed to I 24
 26627                                  ;       else
 26628                                  ;               outputs of DOOPEN
 26629                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 26630                                  ;
 26631                                  ;----------------------------------------------------------------------------
 26632                                  
 26633                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26634                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 26635                                  
 26636                                  NEWENTRY:
 26637 00004B35 C42E[8A05]                      LES     BP,[THISDPB]
 26638 00004B39 7316                            JNC	short EXISTENT	
 26639 00004B3B 803E[4A03]00                    CMP     byte [FAILERR],0
 26640 00004B40 F9                              STC
 26641 00004B41 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 26642 00004B43 E800FE                          CALL    BUILDDIR        ; Try to build dir
 26643 00004B46 72EC                            jc	short makeendshare_retn	; Failed
 26644 00004B48 E8CDF3                          call	GETENT          ; Point at that free entry
 26645 00004B4B 72E7                            jc	short makeendshare_retn	; Failed
 26646 00004B4D EB0E                            JMP     SHORT FREESPOT
 26647                                  
 26648                                  ERRRET3:
 26649 00004B4F F9                              STC
 26650                                  newentry_retn:
 26651 00004B50 C3                              retn
 26652                                  
 26653                                  EXISTENT:
 26654 00004B51 08E4                            OR      AH,AH           ; Check if file is I/O device
 26655 00004B53 7903                            JNS	short NOT_DEV1
 26656 00004B55 E98D00                          JMP     DOOPEN          ; If so, proceed with open
 26657                                  
 26658                                  NOT_DEV1:
 26659 00004B58 E82C01                          call	FREEENT		; Free cluster chain
 26660 00004B5B 72F3                            jc	short newentry_retn ; Failed
 26661                                  FREESPOT:
 26662                                  	;test	byte [ATTRIB],8
 26663 00004B5D F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 26664 00004B62 7407                            JZ	short NOTVOLID
 26665 00004B64 803E[7B05]00                    CMP     BYTE [VOLID],0
 26666 00004B69 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 26667                                  NOTVOLID:
 26668 00004B6B 8E06[E405]                      MOV     ES,[CURBUF+2]
 26669 00004B6F 89DF                            MOV     DI,BX
 26670                                  
 26671 00004B71 BE[4B05]                        MOV     SI,NAME1
 26672                                  
 26673 00004B74 B90500                          MOV     CX,5
 26674 00004B77 F3A5                            REP     MOVSW
 26675 00004B79 A4                              MOVSB                   ; Move name into dir entry
 26676 00004B7A A0[6B05]                	MOV	AL,[ATTRIB]
 26677 00004B7D AA                      	STOSB                   ; Attributes
 26678                                  
 26679                                  ;; File Tagging for Create DOS 4.00
 26680 00004B7E B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 26681                                  ;; File Tagging for Create DOS 4.00
 26682                                  
 26683 00004B80 31C0                            XOR     AX,AX
 26684 00004B82 F3AB                            REP     STOSW           ; Zero pad
 26685 00004B84 E8BFBF                          call	DATE16
 26686 00004B87 92                              XCHG    AX,DX
 26687 00004B88 AB                              STOSW                   ; dir_time
 26688 00004B89 92                              XCHG    AX,DX
 26689 00004B8A AB                              STOSW                   ; dir_date
 26690 00004B8B 31C0                            XOR     AX,AX
 26691 00004B8D 57                              PUSH    DI              ; Correct SI input value
 26692                                  				; 	(recomputed for new buffer)
 26693 00004B8E AB                              STOSW                   ; Zero dir_first and size
 26694 00004B8F AB                              STOSW
 26695 00004B90 AB                              STOSW
 26696                                  updnxt:
 26697 00004B91 8B36[E205]              	MOV	SI,[CURBUF]
 26698                                  
 26699                                  	; 19/05/2019 - Retro DOS v4.0
 26700                                  
 26701                                  	; MSDOS 6.0
 26702 00004B95 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26703                                  				;LB. if already dirty		  ;AN000;
 26704 00004B9A 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 26705 00004B9C E87010                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 26706                                          
 26707                                  	;or	byte [es:si+5],40h
 26708 00004B9F 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26709                                  yesdirty9:
 26710 00004BA4 C42E[8A05]                      LES     BP,[THISDPB]
 26711                                  	; 15/12/2022
 26712 00004BA8 268A4600                	MOV	AL,[ES:BP]
 26713                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26714                                  	;;mov	al,[es:bp+0]
 26715                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 26716 00004BAC 50                              PUSH    AX
 26717 00004BAD 53                              PUSH    BX
 26718                                  
 26719                                  ; If we have a file, we need to increment the open ref. count so that
 26720                                  ; we have some protection against invalid media changes if an Int 24
 26721                                  ; error occurs.
 26722                                  ; Do nothing for a device.
 26723                                  
 26724 00004BAE 06                      	push	es
 26725 00004BAF 57                      	push	di
 26726 00004BB0 C43E[9E05]                      LES     DI,[THISSFT]
 26727                                  	;test	word [es:di+5],80h
 26728                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 26729 00004BB4 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26730 00004BB9 751A                            jnz	short GotADevice
 26731 00004BBB 1E                      	push	ds
 26732 00004BBC 53                      	push	bx
 26733 00004BBD C51E[8A05]                      LDS     BX,[THISDPB]
 26734                                  	;mov	[es:di+7],bx
 26735 00004BC1 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 26736 00004BC5 8CDB                            MOV     BX,DS
 26737                                  	;mov	[es:di+9],bx
 26738 00004BC7 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 26739 00004BCB 5B                      	pop	bx
 26740 00004BCC 1F                      	pop	ds ; need to use DS for segment later on
 26741 00004BCD E8A1FA                  	call	DEV_OPEN_SFT    ; increment ref. count
 26742 00004BD0 C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 26743                                  GotADevice:
 26744 00004BD5 5F                      	pop	di
 26745 00004BD6 07                      	pop	es
 26746                                  
 26747 00004BD7 E82D0F                          call	FLUSHBUF
 26748 00004BDA E8F900                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 26749 00004BDD 5B                              POP     BX
 26750 00004BDE 58                              POP     AX
 26751 00004BDF 5E                              POP     SI              ; Get SI input back
 26752 00004BE0 88C4                            MOV     AH,AL           ; Get I/O driver number back
 26753 00004BE2 7301                    	jnc	short DOOPEN    ; Failed
 26754 00004BE4 C3                      	retn
 26755                                  	
 26756                                  ;NOTE FALL THROUGH
 26757                                  
 26758                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 26759                                  
 26760                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26761                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 26762                                  
 26763                                  ; DOOPEN
 26764                                  ;----------------------------------------------------------------------------
 26765                                  ;
 26766                                  ; Inputs:
 26767                                  ;       [THISDPB] points to DPB if file
 26768                                  ;       [THISSFT] points to SFT being used
 26769                                  ;       AH = Device ID byte
 26770                                  ;       If FILE
 26771                                  ;           [CURBUF+2]:BX points to start of directory entry
 26772                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26773                                  ;       If device
 26774                                  ;           DS:BX points to start of "fake" directory entry
 26775                                  ;           DS:SI points to dir_first of "fake" directory entry
 26776                                  ;               (has DWORD pointer to device header)
 26777                                  ; Function:
 26778                                  ;       Fill in SFT from dir entry
 26779                                  ; Outputs:
 26780                                  ;       CARRY CLEAR
 26781                                  ;       sf_ref_count and sf_mode fields not altered
 26782                                  ;       sf_flags high byte = 0
 26783                                  ;       sf_flags low byte = AH except
 26784                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 26785                                  ;       sf_attr sf_date sf_time sf_name set from entry
 26786                                  ;       sf_position = 0
 26787                                  ;       If device
 26788                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 26789                                  ;           sf_size = 0
 26790                                  ;       If file
 26791                                  ;           sf_firclus sf_size set from entry
 26792                                  ;           sf_devptr = [THISDPB]
 26793                                  ;           sf_cluspos = 0
 26794                                  ;           sf_lstclus = sf_firclus
 26795                                  ;           sf_dirsec sf_dirpos set
 26796                                  ; DS,SI,BX preserved, others destroyed
 26797                                  ;
 26798                                  ;----------------------------------------------------------------------------
 26799                                  
 26800                                  	;entry	DOOPEN
 26801                                  DOOPEN:
 26802                                  ;	Generate and store attribute
 26803                                  
 26804 00004BE5 88E6                            MOV     DH,AH           ; AH to different place
 26805 00004BE7 C43E[9E05]                      LES     DI,[THISSFT]
 26806                                  	;add	di,4
 26807 00004BEB 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 26808 00004BEE 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 26809                                                                  ;   attribute of 0 (for R/O testing etc).
 26810 00004BF0 08F6                            OR      DH,DH           ; See if our assumption good.
 26811 00004BF2 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 26812 00004BF4 8E1E[E405]                      MOV     DS,[CURBUF+2]
 26813                                  	;mov	al,[BX+0Bh]
 26814 00004BF8 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 26815                                  				; If file, get attrib from dir entry
 26816                                  DEV_SFT1:
 26817 00004BFB AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 26818                                  
 26819                                  ;	Generate and store flags word
 26820                                  
 26821 00004BFC 31C0                            XOR     AX,AX
 26822 00004BFE 88F0                            MOV     AL,DH
 26823                                  	;or	al,40h
 26824 00004C00 0C40                            OR      AL,devid_file_clean
 26825 00004C02 AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 26826                                  
 26827                                  ;	Generate and store device pointer
 26828                                  
 26829 00004C03 1E                              PUSH    DS
 26830                                  	;lds	ax,[bx+1Ah]
 26831 00004C04 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 26832 00004C07 08F6                            OR      DH,DH
 26833 00004C09 7805                            JS	short DEV_SFT2
 26834                                  
 26835                                  ;hkn; SS override
 26836 00004C0B 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 26837                                  DEV_SFT2:
 26838 00004C10 AB                              STOSW 			; store offset
 26839 00004C11 8CD8                            MOV     AX,DS
 26840 00004C13 1F                              POP     DS
 26841 00004C14 AB                      	STOSW			; store segment
 26842                                  				; ES:DI -> sf_firclus
 26843                                  
 26844                                  ;	Generate pointer to, generate and store first cluster 
 26845                                  ;	(irrelevant for devices)
 26846                                  
 26847 00004C15 56                              PUSH    SI              ; Save pointer to dir_first
 26848 00004C16 A5                              MOVSW                   ; dir_first -> sf_firclus
 26849                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 26850                                  
 26851                                  ;	Copy time/date of last modification
 26852                                  
 26853                                  	;sub	si,6
 26854 00004C17 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 26855                                  				; DS:SI->dir_time
 26856 00004C1A A5                              MOVSW                   ; dir_time -> sf_time
 26857                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 26858 00004C1B A5                              MOVSW                   ; dir_date -> sf_date
 26859                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 26860                                  
 26861                                  ;	Generate and store file size (0 for devices)
 26862                                  
 26863 00004C1C AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 26864 00004C1D AD                              LODSW                   ; dir_size_l in AX, DS:SI -> dir_size_h
 26865 00004C1E 89C1                            MOV     CX,AX           ; dir_size_l in CX
 26866 00004C20 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 26867 00004C21 08F6                            OR      DH,DH
 26868 00004C23 7904                            JNS	short FILE_SFT1
 26869 00004C25 31C0                            XOR     AX,AX
 26870 00004C27 89C1                            MOV     CX,AX           ; Devices are open ended
 26871                                  FILE_SFT1:
 26872 00004C29 91                              XCHG    AX,CX
 26873 00004C2A AB                              STOSW                   ; Low word of sf_size
 26874 00004C2B 91                              XCHG    AX,CX
 26875 00004C2C AB                              STOSW                   ; High word of sf_size
 26876                                                                  ; ES:DI -> sf_position
 26877                                  ; Initialize position to 0
 26878                                  
 26879 00004C2D 31C0                            XOR     AX,AX
 26880 00004C2F AB                              STOSW
 26881 00004C30 AB                              STOSW                   ; sf_position
 26882                                                                  ; ES:DI -> sf_cluspos
 26883                                  
 26884                                  ; Generate cluster optimizations for files
 26885                                  
 26886 00004C31 08F6                            OR      DH,DH
 26887 00004C33 7843                            JS	short DEV_SFT3
 26888 00004C35 AB                              STOSW                   ; sf_cluspos ; 19h
 26889                                  	;mov	ax,[bx+1Ah]
 26890 00004C36 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 26891                                  	; 19/05/2019
 26892                                  	; MSDOS 3.3
 26893                                  	;STOSW 			; sf_lstclus ; 1Bh
 26894                                  	; MSDOS 6.0
 26895 00004C39 57                              PUSH	DI              ;AN004; save dirsec offset
 26896                                  	;sub	di,1Bh
 26897 00004C3A 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 26898                                  	;mov	[es:di+35h],ax
 26899 00004C3D 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 26900 00004C41 5F                              POP	DI              ;AN004; restore dirsec offset
 26901                                  
 26902                                  ; DOS 3.3  FastOpen  6/13/86
 26903                                  
 26904 00004C42 1E                      	PUSH	DS
 26905                                  
 26906                                  ;hkn; SS is DOSDATA
 26907 00004C43 16                      	push	ss
 26908 00004C44 1F                      	pop	ds
 26909                                  	;test	byte [FastOpenFlg],4
 26910 00004C45 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 26911 00004C4A 7411                    	JZ	short Not_FastOpen
 26912                                  
 26913                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 26914 00004C4C BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 26915                                  
 26916                                  	;mov	ax,[si+1]
 26917 00004C4F 8B4401                          MOV     AX,[SI+FEI.dirsec]
 26918 00004C52 AB                              STOSW                   ; sf_dirsec
 26919                                  	; MSDOS 6.0
 26920                                  	;mov	ax,[si+3]
 26921 00004C53 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 26922                                  				;;; changed for >32mb
 26923 00004C56 AB                              STOSW                   ; sf_dirsec
 26924                                  	; 19/08//2018
 26925 00004C57 8A04                    	mov	al,[SI]
 26926                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 26927 00004C59 AA                              STOSB                   ; sf_dirpos
 26928 00004C5A 1F                              POP	DS
 26929 00004C5B EB19                            JMP     short Next_Name
 26930                                  
 26931                                  ; DOS 3.3  FastOpen  6/13/86
 26932                                  
 26933                                  Not_FastOpen:
 26934                                          ;POP     DS		; normal path
 26935                                  
 26936                                  ;hkn; SS override
 26937                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 26938                                  	; 16/12/2022
 26939                                  	; 28/07/2019
 26940 00004C5D 8B36[E205]              	mov	si,[CURBUF]
 26941 00004C61 1F                      	pop	ds
 26942                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26943                                  	;pop	ds
 26944                                  	;mov	si,[ss:CURBUF]
 26945                                  	
 26946                                  	;mov	ax,[si+6]
 26947 00004C62 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 26948 00004C65 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26949                                  	; 19/05/2019        
 26950                                  	; MSDOS 6.0
 26951                                  	;mov	ax,[si+8]
 26952 00004C66 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 26953 00004C69 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26954                                          
 26955 00004C6A 89D8                    	MOV     AX,BX
 26956                                  	;;add	si,16	; MSDOS 3.3	
 26957                                  	;add	si,20	; MSDOS 6.0
 26958 00004C6C 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 26959 00004C6F 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 26960                                          ;mov	cl,32
 26961 00004C71 B120                    	MOV     CL,dir_entry.size
 26962 00004C73 F6F1                            DIV     CL
 26963 00004C75 AA                              STOSB                   ; sf_dirpos
 26964                                  Next_Name:
 26965 00004C76 EB03                            JMP     SHORT FILE_SFT2
 26966                                  
 26967                                  DEV_SFT3:
 26968                                  	;add	di,7
 26969 00004C78 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 26970                                  FILE_SFT2:
 26971                                  
 26972                                  ; Copy in the object's name
 26973                                  
 26974 00004C7B 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 26975 00004C7D B90B00                          MOV     CX,11
 26976 00004C80 F3A4                            REP     MOVSB           ; sf_name
 26977 00004C82 5E                              POP     SI              ; recover DS:SI -> dir_first
 26978                                  
 26979                                  ;hkn; SS is DOSDATA
 26980 00004C83 16                              push	ss
 26981 00004C84 1F                      	pop	ds
 26982 00004C85 F8                              CLC
 26983 00004C86 C3                              retn
 26984                                  
 26985                                  ;---------------------------------------------------------------------------
 26986                                  ;
 26987                                  ; Procedure Name : FREEENT
 26988                                  ;
 26989                                  ; Inputs:
 26990                                  ;       ES:BP -> DPB
 26991                                  ;       [CURBUF] Set
 26992                                  ;       [CURBUF+2]:BX points to directory entry
 26993                                  ;       [CURBUF+2]:SI points to above dir_first
 26994                                  ; Function:
 26995                                  ;       Free the cluster chain for the entry if present
 26996                                  ; Outputs:
 26997                                  ;       Carry set if error (currently user FAILed to I 24)
 26998                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 26999                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 27000                                  ;---------------------------------------------------------------------------
 27001                                  
 27002                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27003                                  FREEENT:
 27004 00004C87 1E                              PUSH    DS
 27005 00004C88 C53E[E205]                      LDS     DI,[CURBUF]
 27006 00004C8C 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 27007                                  	; 19/05/2019 - Retro DOS v4.0
 27008                                  	; MSDOS 6.0
 27009 00004C8E 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]	;F.C. >32mb	;AN000;
 27010                                  ;hkn; SS override
 27011 00004C91 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 27012 00004C96 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 27013 00004C99 1F                              POP     DS
 27014 00004C9A 83F902                  	CMP	CX,2
 27015 00004C9D 7235                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 27016                                  	;cmp	cx,[es:bp+0Dh]
 27017 00004C9F 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 27018 00004CA3 772F                            JA	short RET1	; Treat like zero length file (firclus mucked)
 27019 00004CA5 29FB                            SUB     BX,DI
 27020 00004CA7 53                              PUSH    BX              ; Save offset
 27021 00004CA8 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27022 00004CAC 52                              PUSH    DX              ; Save sector number
 27023 00004CAD 89CB                            MOV     BX,CX
 27024 00004CAF E8B602                          call	RELEASE         ; Free any data allocated
 27025 00004CB2 5A                              POP     DX
 27026 00004CB3 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27027 00004CB7 7302                            JNC	short GET_BUF_BACK
 27028 00004CB9 5B                              POP     BX
 27029                                  freeent_retn:
 27030 00004CBA C3                              retn			; Screw up
 27031                                  
 27032                                  GET_BUF_BACK:
 27033                                  	;mov	byte [ALLOWED],18h
 27034 00004CBB C606[4B03]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 27035 00004CC0 30C0                            XOR     AL,AL
 27036 00004CC2 E8440D                  	call	GETBUFFR        ; Get sector back
 27037 00004CC5 5B                              POP     BX              ; Get offset back
 27038 00004CC6 72F2                            jc	short freeent_retn
 27039 00004CC8 E87EEA                  	call	SET_BUF_AS_DIR
 27040 00004CCB 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 27041 00004CCF 89DE                            MOV     SI,BX
 27042                                  	;add	si,1Ah
 27043 00004CD1 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 27044                                  RET1:
 27045 00004CD4 F8                              CLC
 27046 00004CD5 C3                              retn
 27047                                  
 27048                                  ;---------------------------------------------------------------------------
 27049                                  ;
 27050                                  ; Procedure Name : CHECK_VIRT_OPEN
 27051                                  ;
 27052                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 27053                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 27054                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 27055                                  ; flag [VIRTUAL_OPEN].
 27056                                  ; No registers affected (including flags).
 27057                                  ; On input, [THISSFT] points to current SFT.
 27058                                  ;
 27059                                  ;---------------------------------------------------------------------------
 27060                                  
 27061                                  CHECK_VIRT_OPEN:
 27062 00004CD6 50                      	PUSH    AX
 27063 00004CD7 9F                              lahf                    ; preserve flags
 27064 00004CD8 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 27065 00004CDD 7410                            JZ	short ALL_CLOSED
 27066 00004CDF C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 27067 00004CE4 06                      	push	es
 27068 00004CE5 57                      	push	di
 27069 00004CE6 C43E[9E05]                      LES     DI,[THISSFT]
 27070 00004CEA E88CF9                          call	DEV_CLOSE_SFT
 27071 00004CED 5F                      	pop	di
 27072 00004CEE 07                      	pop	es
 27073                                  
 27074                                  ALL_CLOSED:
 27075 00004CEF 9E                              sahf                    ; restore flags
 27076 00004CF0 58                              POP     AX
 27077 00004CF1 C3                              retn
 27078                                  
 27079                                  ;============================================================================
 27080                                  ; ROM.ASM, MSDOS 6.0, 1991
 27081                                  ;============================================================================
 27082                                  ; 29/07/2018 - Retro DOS v3.0
 27083                                  ; 20/05/2019 - Retro DOS v4.0
 27084                                  
 27085                                  ;	TITLE	ROM - Miscellaneous routines
 27086                                  ;	NAME	ROM
 27087                                  
 27088                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 27089                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 27090                                  ;
 27091                                  ;	SKPCLP
 27092                                  ;	FNDCLUS
 27093                                  ;	BUFSEC
 27094                                  ;	BUFRD
 27095                                  ;	BUFWRT
 27096                                  ;	NEXTSEC
 27097                                  ;	OPTIMIZE
 27098                                  ;	FIGREC
 27099                                  ;	ALLOCATE
 27100                                  ;	RESTFATBYT
 27101                                  ;	RELEASE
 27102                                  ;	RELBLKS
 27103                                  ;	GETEOF
 27104                                  ;
 27105                                  ;	Modification history:
 27106                                  ;
 27107                                  ;		Created: ARR 30 March 1983
 27108                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 27109                                  
 27110                                  ;Break   <FNDCLUS -- Skip over allocation units>
 27111                                  ;--------------------------------------------------------------------------
 27112                                  ;
 27113                                  ; Procedure Name : FNDCLUS
 27114                                  ;
 27115                                  ; Inputs:
 27116                                  ;       CX = No. of clusters to skip
 27117                                  ;       ES:BP = Base of drive parameters
 27118                                  ;       [THISSFT] point to SFT
 27119                                  ; Outputs:
 27120                                  ;       BX = Last cluster skipped to
 27121                                  ;       CX = No. of clusters remaining (0 unless EOF)
 27122                                  ;       DX = Position of last cluster
 27123                                  ;       Carry set if error (currently user FAILed to I 24)
 27124                                  ; DI destroyed. No other registers affected.
 27125                                  ;--------------------------------------------------------------------------
 27126                                  
 27127                                  ; 20/05/2019 - Retro DOS v4.0
 27128                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27129                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27130                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27131                                  
 27132                                  FNDCLUS:
 27133 00004CF2 06                      	PUSH	ES
 27134 00004CF3 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27135                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27136                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27137 00004CF7 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27138                                  	;mov	dx,[es:di+19h]
 27139 00004CFB 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27140 00004CFF 09DB                    	OR	BX,BX
 27141 00004D01 7424                    	JZ	short NOCLUS
 27142                                  
 27143 00004D03 29D1                            SUB     CX,DX
 27144 00004D05 7308                            JNB	short FINDIT
 27145                                  
 27146 00004D07 01D1                            ADD     CX,DX
 27147 00004D09 31D2                            XOR     DX,DX
 27148                                  	;mov	bx,[es:di+0Bh]
 27149 00004D0B 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27150                                  FINDIT:
 27151 00004D0F 07                              POP	ES
 27152 00004D10 E313                    	JCXZ	RET9
 27153                                  
 27154                                  	;entry	SKPCLP
 27155                                  SKPCLP:
 27156 00004D12 E8D708                  	call	UNPACK
 27157 00004D15 7214                            jc	short fndclus_retn	; retc
 27158                                  
 27159                                  	; 09/09/2018
 27160                                  
 27161                                  	; MSDOS 3.3
 27162                                  	;push	bx
 27163                                  	;mov	bx,di
 27164                                  	;call	IsEOF
 27165                                  	;pop	bx	
 27166                                  	;jae	short RET9
 27167                                  
 27168                                  	; 20/05/2019 - Retro DOS v4.0
 27169                                  
 27170                                  	; MSDOS 6.0
 27171 00004D17 87DF                    	xchg	bx,di
 27172 00004D19 E8B908                  	call	IsEOF
 27173 00004D1C 87DF                    	xchg	bx,di
 27174 00004D1E 7305                    	jae	short RET9
 27175                                  
 27176 00004D20 87DF                            XCHG    BX,DI
 27177 00004D22 42                              INC     DX
 27178                                  
 27179 00004D23 E2ED                    	LOOP	SKPCLP			; RMFS
 27180                                  RET9:	
 27181 00004D25 F8                      	CLC
 27182 00004D26 C3                              retn
 27183                                  NOCLUS:
 27184 00004D27 07                              POP	ES
 27185 00004D28 41                              INC	CX
 27186 00004D29 4A                              DEC	DX
 27187 00004D2A F8                              CLC
 27188                                  
 27189                                  fndclus_retn:
 27190 00004D2B C3                              retn
 27191                                  
 27192                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27193                                  ;--------------------------------------------------------------------------
 27194                                  ;
 27195                                  ; Procedure Name : BUFSEC
 27196                                  ;
 27197                                  ; Inputs:
 27198                                  ;       AH = priority of buffer
 27199                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27200                                  ;       ES:BP = Base of drive parameters
 27201                                  ;       [CLUSNUM] = Physical cluster number
 27202                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27203                                  ;       [BYTCNT1] = Size of transfer
 27204                                  ; Function:
 27205                                  ;       Insure specified sector is in buffer, flushing buffer before
 27206                                  ;       read if necessary.
 27207                                  ; Outputs:
 27208                                  ;       ES:DI = Pointer to buffer
 27209                                  ;       SI = Pointer to transfer address
 27210                                  ;       CX = Number of bytes
 27211                                  ;       [NEXTADD] updated
 27212                                  ;       [TRANS] set to indicate a transfer will occur
 27213                                  ;       Carry set if error (user FAILed to I 24)
 27214                                  ;--------------------------------------------------------------------------
 27215                                  
 27216                                  BUFSEC:
 27217 00004D2C 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27218 00004D30 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27219                                  	;mov	byte [ALLOWED],38h
 27220 00004D34 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27221 00004D39 E85401                          CALL    FIGREC
 27222 00004D3C E8CA0C                  	call	GETBUFFR
 27223 00004D3F 72EA                            jc	short fndclus_retn
 27224                                  
 27225 00004D41 C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 27226 00004D46 8B36[B805]                      MOV     SI,[NEXTADD]
 27227 00004D4A 89F7                            MOV     DI,SI
 27228 00004D4C 8B0E[D205]                      MOV     CX,[BYTCNT1]
 27229 00004D50 01CF                            ADD     DI,CX
 27230 00004D52 893E[B805]                      MOV     [NEXTADD],DI
 27231 00004D56 C43E[E205]                      LES     DI,[CURBUF]
 27232                                  	;or	byte [es:di+5],8
 27233 00004D5A 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 27234                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 27235                                  	;lea	di,[di+20] ; MSDOS 6.0
 27236 00004D5F 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 27237 00004D62 033E[CC05]                      ADD     DI,[BYTSECPOS]
 27238 00004D66 F8                              CLC
 27239 00004D67 C3                              retn
 27240                                  
 27241                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 27242                                  
 27243                                  ;---------------------------------------------------------------------------
 27244                                  ;
 27245                                  ; Procedure Name : BUFRD
 27246                                  ;
 27247                                  ; Do a partial sector read via one of the system buffers
 27248                                  ; ES:BP Points to DPB
 27249                                  ; Carry set if error (currently user FAILed to I 24)
 27250                                  ;
 27251                                  ; DS - set to DOSDATA
 27252                                  ;
 27253                                  ;----------------------------------------------------------------------------
 27254                                  
 27255                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27256                                  	; 20/05/2019 - Retro DOS v4.0
 27257                                  BUFRD:
 27258 00004D68 06                              PUSH	ES
 27259 00004D69 31C0                            xor	ax, ax			; pre-read sector
 27260 00004D6B E8BEFF                          CALL    BUFSEC
 27261 00004D6E 7303                            JNC	short BUF_OK
 27262                                  
 27263                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 27264 00004D70 07                              POP	ES
 27265 00004D71 EB2B                            JMP     SHORT RBUFPLACED
 27266                                  
 27267                                  BUF_OK:
 27268 00004D73 8CC3                            MOV     BX,ES
 27269 00004D75 8E06[2E03]                      MOV     ES,[DMAADD+2]
 27270 00004D79 8EDB                            MOV     DS,BX
 27271 00004D7B 87FE                    	XCHG    DI,SI
 27272 00004D7D D1E9                            SHR     CX,1
 27273                                  ;M039
 27274                                  	; MSDOS 3.3
 27275                                  	;JNC	short EVENRD
 27276                                  	;MOVSB
 27277                                  ;EVENRD:
 27278                                  	;REP     MOVSW
 27279                                  
 27280                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 27281                                  ;       DS:SI-> Source within Buffer.
 27282                                  ;       ES:DI-> Destination within Transfer memory block.
 27283                                  
 27284                                  	; MSDOS 6.0
 27285 00004D7F F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 27286                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27287                                  	;rep	movsb                   ;Copy last byte.
 27288                                  	; 16/12/2022
 27289 00004D81 7301                    	jnc	short EVENRD ; **** 20/05/2019
 27290 00004D83 A4                      	movsb ; ****
 27291                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27292                                  	;adc	cx,0
 27293                                  	;rep	movsb
 27294                                  ;M039
 27295                                  EVENRD: ; ****
 27296 00004D84 07                              POP	ES
 27297                                  ;hkn; SS override
 27298 00004D85 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 27299                                  	;;lea	bx,[di+16]
 27300                                  	;lea	bx,[di+20] ; MSDOS 6.0
 27301 00004D8A 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 27302 00004D8D 29DE                            SUB     SI,BX                   ; Position in buffer
 27303 00004D8F E82B0C                          call	PLACEBUF
 27304                                  	;cmp	si,[es:bp+2]
 27305 00004D92 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 27306 00004D96 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 27307                                  ;M039
 27308                                  	; MSDOS 3.3
 27309                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27310                                                                          ;  even though it is MRU.
 27311                                          ; MSDOS 6.0
 27312 00004D98 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 27313                                  ;M039					; chucking even though it is MRU.
 27314                                  
 27315                                  RBUFPLACEDC:
 27316 00004D9D F8                              CLC
 27317                                  RBUFPLACED:
 27318 00004D9E 16                      	push	ss
 27319 00004D9F 1F                      	pop	ds
 27320 00004DA0 C3                              retn
 27321                                  
 27322                                  ;----------------------------------------------------------------------------
 27323                                  ;
 27324                                  ; Procedure : BUFWRT
 27325                                  ;
 27326                                  ; Do a partial sector write via one of the system buffers
 27327                                  ; ES:BP Points to DPB
 27328                                  ; Carry set if error (currently user FAILed to I 24)
 27329                                  ;
 27330                                  ; DS - set to DOSDATA
 27331                                  ;
 27332                                  ;----------------------------------------------------------------------------
 27333                                  
 27334                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27335                                  	; 20/05/2019 - Retro DOS v4.0
 27336                                  BUFWRT:
 27337 00004DA1 A1[C405]                        MOV     AX,[SECPOS]
 27338                                          ; MSDOS 6.0
 27339 00004DA4 83C001                  	ADD	AX,1            	; Set for next sector
 27340 00004DA7 A3[C405]                        MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 27341 00004DAA 8316[C605]00                    ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 27342 00004DAF A1[C605]                        MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 27343 00004DB2 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 27344 00004DB6 B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 27345 00004DB8 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 27346 00004DBA 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 27347 00004DBC A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 27348                                  
 27349                                  	; MSDOS 3.3
 27350                                  	;INC	AX
 27351                                  	;MOV	[SECPOS],AX ; 09/09/2018
 27352                                  
 27353                                  	; 20/05/2019
 27354                                  	; MSDOS 3.3 & MSDOS 6.0
 27355 00004DBF 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 27356 00004DC3 B001                            MOV     AL,1
 27357 00004DC5 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 27358                                  _doread:
 27359 00004DC7 30C0                            XOR     AL,AL
 27360                                  NOREAD:
 27361 00004DC9 06                              PUSH	ES
 27362 00004DCA E85FFF                          CALL    BUFSEC
 27363 00004DCD 72A1                    	JC	short BUF_IO_FAIL
 27364 00004DCF 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 27365 00004DD3 D1E9                            SHR     CX,1
 27366                                  ;M039
 27367                                  	; MSDOS 3.3
 27368                                  	;JNC	short EVENWRT ; 09/09/2018
 27369                                  	;MOVSB
 27370                                  ;EVENWRT:
 27371                                  	;REP	MOVSW
 27372                                  
 27373                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 27374                                  ;       DS:SI-> Source within Transfer memory block.
 27375                                  ;       ES:DI-> Destination within Buffer.
 27376                                  
 27377                                  	; MSDOS 6.0
 27378 00004DD5 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 27379                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27380                                  	;rep	movsb                   ;Copy last byte.
 27381                                  	; 16/12/2022
 27382 00004DD7 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 27383 00004DD9 A4                      	movsb ; ****
 27384                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27385                                  	;adc	cx,0
 27386                                  	;rep	movsb
 27387                                  ;M039
 27388                                  EVENWRT: ; ****
 27389 00004DDA 07                              POP	ES
 27390                                  
 27391                                  ;hkn; SS override
 27392 00004DDB 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 27393                                  
 27394                                  	; MSDOS 6.0
 27395 00004DE0 F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27396                                  					;LB. if already dirty		  ;AN000;
 27397 00004DE4 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 27398 00004DE6 E8260E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27399                                  	
 27400                                  	;or	byte [bx+5],40h
 27401 00004DE9 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27402                                  yesdirty10:
 27403                                  	;;lea	si,[bx+16]
 27404                                  	;lea	si,[bx+20] ; MSDOS 6.0
 27405 00004DED 8D7714                          LEA     SI,[BX+BUFINSIZ]
 27406 00004DF0 29F7                            SUB     DI,SI                   ; Position in buffer
 27407                                  ;M039
 27408                                  	; MSDOS 3.3
 27409                                  	;MOV	SI,DI
 27410                                  	;MOV	DI,BX
 27411                                  	;call	PLACEBUF
 27412                                  	;;cmp	si,[es:bp+2]
 27413                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27414                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 27415                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27416                                                                          ;  even though it is MRU.
 27417                                  	; 10/02/2024
 27418 00004DF2 16                      	push	ss
 27419 00004DF3 1F                      	pop	ds
 27420                                  
 27421                                  	; MSDOS 6.0
 27422                                  	;cmp	di,[es:bp+2]
 27423 00004DF4 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27424 00004DF8 7204                    	JB	short WBUFPLACED	; No, leave buf where it is
 27425                                  
 27426                                  	; 10/02/2024
 27427                                  	;MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 27428                                  					; chucking even though it is MRU.
 27429 00004DFA 891E[6D00]              	mov	[BufferQueue],bx
 27430                                  ;M039
 27431                                  
 27432                                  WBUFPLACED:
 27433 00004DFE F8                      	CLC
 27434                                  	; 10/02/2024
 27435                                  	;push	ss
 27436                                  	;pop	ds
 27437 00004DFF C3                      	retn
 27438                                  
 27439                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 27440                                  ;---------------------------------------------------------------------------
 27441                                  ;
 27442                                  ; Procedure Name : NEXTSEC
 27443                                  ;
 27444                                  ; Compute the next sector to read or write
 27445                                  ; ES:BP Points to DPB
 27446                                  ;
 27447                                  ;---------------------------------------------------------------------------
 27448                                  
 27449                                  NEXTSEC:
 27450 00004E00 F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 27451                                  	;JZ	short CLRET
 27452                                  	; 29/02/2024
 27453 00004E05 7427                    	jz	short CLRET2
 27454                                  
 27455 00004E07 A0[7305]                	MOV	AL,[SECCLUSPOS]
 27456 00004E0A FEC0                    	INC	AL
 27457                                  	;cmp	al,[es:bp+4]
 27458 00004E0C 263A4604                	CMP	AL,[ES:BP+DPB.CLUSTER_MASK]
 27459 00004E10 7618                    	JBE	short SAVPOS
 27460                                  
 27461 00004E12 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 27462 00004E16 E8BC07                  	call	IsEOF
 27463 00004E19 7314                    	JAE	short NONEXT
 27464                                  
 27465 00004E1B E8CE07                  	call	UNPACK
 27466                                  	;JC	short NONEXT
 27467                                  	; 26/02/2024
 27468 00004E1E 7210                    	jc	short NONEXT2
 27469                                  clusgot:
 27470 00004E20 893E[BC05]              	MOV	[CLUSNUM],DI
 27471 00004E24 FF06[BA05]              	INC	word [LASTPOS]
 27472 00004E28 B000                    	MOV	AL,0
 27473                                  SAVPOS:
 27474 00004E2A A2[7305]                	MOV	[SECCLUSPOS],AL
 27475                                  CLRET:
 27476 00004E2D F8                              CLC
 27477                                  CLRET2:		; 29/02/2024
 27478 00004E2E C3                      	retn
 27479                                  NONEXT:
 27480 00004E2F F9                      	STC
 27481                                  NONEXT2:	; 26/02/2024
 27482 00004E30 C3                      	retn
 27483                                  
 27484                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 27485                                  ;----------------------------------------------------------------------------
 27486                                  ;
 27487                                  ; Procedure Name : OPTIMIZE
 27488                                  ;
 27489                                  ; Inputs:
 27490                                  ;       BX = Physical cluster
 27491                                  ;       CX = No. of records
 27492                                  ;       DL = sector within cluster
 27493                                  ;       ES:BP = Base of drive parameters
 27494                                  ;       [NEXTADD] = transfer address
 27495                                  ; Outputs:
 27496                                  ;       AX = No. of records remaining
 27497                                  ;       BX = Transfer address
 27498                                  ;       CX = No. or records to be transferred
 27499                                  ;       DX = Physical sector address            (LOW)
 27500                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 27501                                  ;       DI = Next cluster
 27502                                  ;       [CLUSNUM] = Last cluster accessed
 27503                                  ;       [NEXTADD] updated
 27504                                  ;       Carry set if error (currently user FAILed to I 24)
 27505                                  ; ES:BP unchanged. Note that segment of transfer not set.
 27506                                  ;
 27507                                  ;---------------------------------------------------------------------------
 27508                                  
 27509                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27510                                  OPTIMIZE:
 27511 00004E31 52                      	PUSH    DX
 27512 00004E32 53                              PUSH    BX
 27513                                  	;mov	al,[es:bp+4]
 27514 00004E33 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 27515 00004E37 FEC0                            INC     AL              ; Number of sectors per cluster
 27516 00004E39 88C4                            MOV     AH,AL
 27517 00004E3B 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 27518 00004E3D 89CA                            MOV     DX,CX
 27519                                  	;MOV	CX,0
 27520                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27521                                  	; 16/12/2022
 27522 00004E3F 31C9                    	xor	cx,cx	; sub cx,cx
 27523                                  OPTCLUS:
 27524                                  ; AL has number of sectors available in current cluster
 27525                                  ; AH has number of sectors available in next cluster
 27526                                  ; BX has current physical cluster
 27527                                  ; CX has number of sequential sectors found so far
 27528                                  ; DX has number of sectors left to transfer
 27529                                  ; ES:BP Points to DPB
 27530                                  ; ES:SI has FAT pointer
 27531                                  
 27532                                  do_norm3:
 27533 00004E41 E8A807                          call	UNPACK
 27534 00004E44 7237                            JC	short OP_ERR
 27535                                  clusgot2:
 27536 00004E46 00C1                    	ADD	CL,AL
 27537 00004E48 80D500                          ADC     CH,0
 27538 00004E4B 39D1                            CMP     CX,DX
 27539 00004E4D 7333                            JAE	short BLKDON
 27540 00004E4F 88E0                            MOV     AL,AH
 27541 00004E51 43                              INC     BX
 27542 00004E52 39DF                            CMP     DI,BX
 27543 00004E54 74EB                            JZ	short OPTCLUS
 27544 00004E56 4B                              DEC     BX
 27545                                  FINCLUS:
 27546 00004E57 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 27547 00004E5B 29CA                            SUB     DX,CX           ; Number of sectors still needed
 27548 00004E5D 52                              PUSH    DX
 27549 00004E5E 89C8                            MOV     AX,CX
 27550                                  	;mul	word[ES:BP+2]
 27551 00004E60 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 27552                                  				; Number of sectors times sector size
 27553 00004E64 8B36[B805]                      MOV     SI,[NEXTADD]
 27554 00004E68 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 27555 00004E6A A3[B805]                        MOV     [NEXTADD],AX
 27556 00004E6D 58                              POP     AX              ; Number of sectors still needed
 27557 00004E6E 5A                              POP     DX              ; Starting cluster
 27558 00004E6F 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 27559 00004E71 011E[BA05]                      ADD     [LASTPOS],BX
 27560 00004E75 5B                              POP     BX              ; BL = sector position within cluster
 27561 00004E76 E81700                  	call	FIGREC
 27562 00004E79 89F3                            MOV     BX,SI
 27563 00004E7B F8                      	CLC
 27564 00004E7C C3                              retn
 27565                                  OP_ERR:
 27566 00004E7D 83C404                          ADD     SP,4
 27567 00004E80 F9                      	STC
 27568 00004E81 C3                              retn
 27569                                  BLKDON:
 27570 00004E82 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 27571 00004E84 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 27572 00004E86 FECC                            DEC     AH              ; Adjust to mean position within cluster
 27573 00004E88 8826[7305]                      MOV     [SECCLUSPOS],AH
 27574 00004E8C 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 27575 00004E8E EBC7                            JMP     SHORT FINCLUS
 27576                                  
 27577                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 27578                                  ;---------------------------------------------------------------------------
 27579                                  ;
 27580                                  ; Procedure Name : FIGREC
 27581                                  ;
 27582                                  ; Inputs:
 27583                                  ;       DX = Physical cluster number
 27584                                  ;       BL = Sector position within cluster
 27585                                  ;       ES:BP = Base of drive parameters
 27586                                  ; Outputs:
 27587                                  ;       DX = physical sector number           (LOW)
 27588                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 27589                                  ; No other registers affected.
 27590                                  ;
 27591                                  ;---------------------------------------------------------------------------
 27592                                  
 27593                                  	; 10/06/2019
 27594                                  	; 20/05/2019 - Retro DOS v4.0
 27595                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 27596                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27597                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 27598                                  FIGREC:
 27599 00004E90 51                              PUSH    CX
 27600                                  	;mov	cl,[es:bp+5]
 27601 00004E91 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 27602 00004E95 4A                              DEC     DX
 27603 00004E96 4A                              DEC     DX
 27604                                  
 27605                                  	; MSDOS 3.3
 27606                                  	;SHL	DX,CL
 27607                                  
 27608                                  ;hkn; SS override HIGH_SECTOR
 27609                                  	; MSDOS 6.0
 27610 00004E97 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 27611 00004E9E 08C9                    	OR	CL,CL				;F.C. >32mb
 27612 00004EA0 740C                    	JZ	short noshift			;F.C. >32mb
 27613 00004EA2 30ED                    	XOR	CH,CH 				;F.C. >32mb
 27614                                  rotleft:					;F.C. >32mb
 27615 00004EA4 F8                      	CLC					;F.C. >32mb
 27616 00004EA5 D1D2                    	RCL	DX,1				;F.C. >32mb
 27617                                  	; 10/06/2019
 27618 00004EA7 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 27619 00004EAC E2F6                    	LOOP	rotleft				;F.C. >32mb
 27620                                  noshift:
 27621                                  	; MSDOS 3.3 & MSDOS 6.0
 27622 00004EAE 08DA                            OR      DL,BL
 27623                                  	;add	dx,[es:bp+0Bh]
 27624 00004EB0 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 27625                                  	; MSDOS 6.0
 27626                                  	; 10/06/2019
 27627 00004EB4 368316[0706]00                  ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 27628                                  	; MSDOS 3.3 & MSDOS 6.0        
 27629 00004EBA 59                      	POP     CX
 27630                                  figrec_retn:
 27631 00004EBB C3                              retn
 27632                                  
 27633                                  ; 20/05/2019 - Retro DOS v4.0
 27634                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 27635                                  
 27636                                  ; 30/07/2018 - Retro DOS v3.0
 27637                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 27638                                  
 27639                                  ;Break   <ALLOCATE -- Assign disk space>
 27640                                  ;---------------------------------------------------------------------------
 27641                                  ;
 27642                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 27643                                  ;
 27644                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 27645                                  ;   FAT-chained onto the end of the existing file.
 27646                                  ;
 27647                                  ;   The DPB contains the cluster # of the last free cluster allocated
 27648                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 27649                                  ;   numbered clusters, looking for the necessary free blocks.
 27650                                  ;
 27651                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 27652                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 27653                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 27654                                  ;
 27655                                  ;       If we get to the end of the disk without satisfaction:
 27656                                  ;
 27657                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 27658                                  ;               return (insufficient_disk_space)
 27659                                  ;           ELSE
 27660                                  ;               dpb_next_free = 2; start scan over from the beginning.
 27661                                  ;
 27662                                  ;   Note that there is no multitasking interlock. There is no race when
 27663                                  ;   examining the entrys in an in-core FAT block since there will be no
 27664                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 27665                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 27666                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 27667                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 27668                                  ;   satisfied. We can't allow another activation to think this cluster is
 27669                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 27670                                  ;   allocated.
 27671                                  ;
 27672                                  ;   Note that when we run out of space this algorithem will scan from
 27673                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 27674                                  ;   redundantly scanning the later part of the disk. This only happens when
 27675                                  ;   we run out of space, so sue me.
 27676                                  ;
 27677                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27678                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27679                                  ;                                                                          ;
 27680                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 27681                                  ;   explanation:
 27682                                  ;
 27683                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 27684                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 27685                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 27686                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 27687                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 27688                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 27689                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 27690                                  ;   the
 27691                                  ;           LOOP   findfre         ; alloc more if needed
 27692                                  ;   instruction when the first cluster is allocated to the nul file. The
 27693                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 27694                                  ;
 27695                                  ;   This method is obviously useless (because it is non-reentrant) for
 27696                                  ;   multitasking, and will have to be changed. Storing the required value on
 27697                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 27698                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 27699                                  ;   problems with INT 24 well.
 27700                                  ;
 27701                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27702                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27703                                  ;                                                                          ;
 27704                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 27705                                  ;               CX = No. of clusters to allocate
 27706                                  ;               ES:BP = Base of drive parameters
 27707                                  ;               [THISSFT] = Points to SFT
 27708                                  ;
 27709                                  ;       EXIT    'C' set if insufficient space
 27710                                  ;                 [FAILERR] can be tested to see the reason for failure
 27711                                  ;                 CX = max. no. of clusters that could be added to file
 27712                                  ;               'C' clear if space allocated
 27713                                  ;                 BX = First cluster allocated
 27714                                  ;                 FAT is fully updated
 27715                                  ;                 sf_FIRCLUS field of SFT set if file was null
 27716                                  ;
 27717                                  ;       USES    ALL but SI, BP
 27718                                  
 27719                                  ;callmagic  proc near
 27720                                  ;       push    ds                             ;push segment of routine 
 27721                                  ;       push    Offset MagicPatch              ;push offset for routine
 27722                                  ;       retf                                   ;simulate jmp far
 27723                                  ;                                              ;far return address is on
 27724                                  ;                                              ;stack, so far return from
 27725                                  ;                                              ;call will return this routine
 27726                                  ;callmagic  endp
 27727                                  
 27728                                  ALLOCATE:
 27729                                  	; 10/09/2018
 27730                                  ;BEGIN MAGICDRV MODIFICATIONS
 27731                                  ;
 27732                                  ;7/5/92 scottq
 27733                                  ;
 27734                                  ;This is the disk compression patch location which allows
 27735                                  ;the disk compression software to fail allocations if the
 27736                                  ;FAT would allows allocation, but the free space for compressed
 27737                                  ;data would not.
 27738                                  ;        
 27739                                  ;;;	call    far ptr MAGICPATCH
 27740                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 27741                                  ;;; but we do know the segment and offset of the routine
 27742                                  ;;; so simulate a far call to dosdata:magicpatch
 27743                                  ;;; note dosassume above, so DS -> dosdata
 27744                                  
 27745                                  	; MSDOS 6.0
 27746                                          ;clc				;clear carry so we fall through
 27747                                  	;				;if no patch is present
 27748                                  	;push	cs			;push segment for far return
 27749                                          ;call	callmagic		;this is a near call
 27750                                          ;jnc	short Regular_Allocate_Path
 27751                                  	;jmp	Disk_Full_Return
 27752                                  
 27753                                  ;Regular_Allocate_Path:
 27754                                  	; 20/05/2019 - Retro DOS v4.0
 27755                                  ;END MAGICDRV MODIFICATIONS
 27756                                  
 27757                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27758                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 27759                                  
 27760 00004EBC 53                              PUSH    BX                      ; save (bx)
 27761 00004EBD 31DB                            XOR     BX,BX
 27762 00004EBF E82A07                  	call	UNPACK
 27763 00004EC2 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 27764 00004EC6 5B                              POP     BX
 27765 00004EC7 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 27766                                  
 27767 00004EC9 51                              PUSH    CX
 27768 00004ECA 53                              PUSH    BX
 27769                                  
 27770 00004ECB 89DA                            MOV     DX,BX
 27771                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 27772                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 27773 00004ECD 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 27774 00004ED1 83FB02                          cmp     bx,2
 27775 00004ED4 7709                            ja	short FINDFRE
 27776                                  
 27777                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 27778                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 27779                                  
 27780                                  ads1:
 27781                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 27782                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 27783 00004ED6 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 27784 00004EDC BB0100                          mov     bx,1                    ; Counter next instruction so first
 27785                                                                          ;       cluster examined is 2
 27786                                  
 27787                                  ;   Scanning both forwards and backwards for a free cluster
 27788                                  ;
 27789                                  ;       (BX) = forwards scan pointer
 27790                                  ;       (CX) = clusters remaining to be allocated
 27791                                  ;       (DX) = current last cluster in file
 27792                                  ;       (TOS) = last cluster of file
 27793                                  
 27794                                  FINDFRE:
 27795 00004EDF 43                              INC     BX
 27796                                  	;cmp	bx,[es:bp+0Dh]
 27797 00004EE0 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 27798 00004EE4 7757                    	ja	short ads7	; at end of disk
 27799 00004EE6 E80307                          call	UNPACK          ; check out this cluster
 27800 00004EE9 722F                            jc	short ads4	; FAT error             [INTERR?]
 27801 00004EEB 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 27802                                  
 27803                                  ;   Have found a free cluster. Chain it to the file
 27804                                  ;
 27805                                  ;       (BX) = found free cluster #
 27806                                  ;       (DX) = current last cluster in file
 27807                                  
 27808                                  	;;mov	[es:bp+1Ch],bx
 27809                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 27810 00004EED 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 27811 00004EF1 92                              xchg    ax,dx           ; save (dx) in ax
 27812 00004EF2 BA0100                          mov     dx,1            ; mark this free guy as "1"
 27813 00004EF5 E84807                  	call	PACK            ; set special "temporary" mark
 27814 00004EF8 7220                            jc	short ads4	; FAT error             [INTERR?]
 27815                                  	;;cmp	word [es:bp+1Eh],-1
 27816                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27817 00004EFA 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27818 00004EFF 7404                            JZ	short NO_ALLOC	; No
 27819                                  	;;dec	word [es:bp+1Eh]
 27820                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 27821 00004F01 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 27822                                  NO_ALLOC:
 27823 00004F05 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 27824 00004F06 87DA                            XCHG    BX,DX
 27825 00004F08 89D0                            MOV     AX,DX
 27826 00004F0A E83307                  	call	PACK            ; link free cluster onto file
 27827                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 27828                                                                  ;    cluster 0 with FIRCLUS value.
 27829 00004F0D 720B                            jc	short ads4	; FAT error [INTERR?]
 27830 00004F0F 93                              xchg    BX,AX           ; (BX) = last one we looked at
 27831 00004F10 89DA                            mov     dx,bx           ; (dx) = current end of file
 27832 00004F12 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 27833                                  
 27834                                  ;   We've successfully extended the file. Clean up and exit
 27835                                  ;
 27836                                  ;       (BX) = last cluster in file
 27837                                  
 27838 00004F14 BAFFFF                          MOV     DX,0FFFFH
 27839 00004F17 E82607                  	call	PACK            ; mark last cluster EOF
 27840                                  
 27841                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 27842                                  ;   2 whole bytes. Hope its worth it...
 27843                                  ;
 27844                                  ;       'C' set if error
 27845                                  ;       calling (BX) and (CX) pushed on stack
 27846                                  
 27847                                  ads4:   
 27848 00004F1A 5B                      	POP     BX
 27849 00004F1B 59                              POP     CX              ; Don't need this stuff since we're successful
 27850 00004F1C 729D                            jc	short figrec_retn
 27851 00004F1E E8CB06                          call	UNPACK          ; Get first cluster allocated for return
 27852                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 27853 00004F21 7298                            jc	short figrec_retn
 27854 00004F23 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 27855 00004F26 7293                            jc	short figrec_retn
 27856 00004F28 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 27857 00004F2A 09FF                            OR      DI,DI           ; clear 'C'
 27858 00004F2C 758D                    	jnz	short figrec_retn ; we were extending an existing file
 27859                                  
 27860                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 27861                                  ;   info
 27862                                  dofastk:
 27863                                  	; 20/05/2019
 27864                                  	; MSDOS 6.0
 27865                                  	;push	dx ; * MSDOS 6.0
 27866                                  	;;mov	dl,[es:bp+0]
 27867                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 27868                                  	;mov	dl,[es:bp]
 27869                                  
 27870                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27871                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 27872                                  	
 27873                                  	; 16/12/2022
 27874                                  	;push	dx ; *
 27875                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 27876                                  	; 15/12/2022
 27877                                  	;mov	dl,[es:bp]
 27878                                  	
 27879                                  	; MSDOS 3.3 & MSDOS 6.0
 27880 00004F2E 06                      	PUSH	ES
 27881 00004F2F C43E[9E05]              	LES     DI,[THISSFT]
 27882                                  	;mov	[es:di+0Bh],bx
 27883 00004F33 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 27884                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 27885                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 27886 00004F37 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 27887 00004F3B 07                      	POP	ES
 27888                                  	;retn
 27889                                  
 27890                                  	;pop	dx ; * MSDOS 6.0
 27891                                  
 27892                                  	; 16/12/2022
 27893                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27894                                  	;pop	dx ; *
 27895                                  
 27896 00004F3C C3                      	retn	
 27897                                  
 27898                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 27899                                  ;   of the disk...
 27900                                  
 27901                                  ads7:   
 27902 00004F3D 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 27903 00004F42 7592                    	jnz	short ads1	; start scan from front of disk
 27904                                  
 27905                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 27906                                  ;   the space back to the free list and tell the caller how much he could have
 27907                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 27908                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 27909                                  ;
 27910                                  ;       (CX) = clusters remaining to be allocated
 27911                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 27912                                  ;       (TOS+1) = # of clusters wanted to allocate
 27913                                  
 27914 00004F44 5B                              POP     BX              ; (BX) = last cluster of file
 27915 00004F45 BAFFFF                          MOV     DX,0FFFFH
 27916 00004F48 E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 27917 00004F4B 58                              POP     AX              ; No. of clusters requested
 27918                                                                  ; Don't "retc". We are setting Carry anyway,
 27919                                                                  ;   Alloc failed, so proceed with return CX
 27920                                                                  ;   setup.
 27921 00004F4C 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 27922 00004F4E E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 27923                                                                  ;   Alloc failed.
 27924                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 27925                                          ; MSDOS 6.0
 27926 00004F51 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 27927 00004F56 F9                              STC
 27928 00004F57 C3                              retn
 27929                                  
 27930                                  ;-----------------------------------------------------------------------
 27931                                  ;
 27932                                  ; Procedure Name : RESTFATBYT
 27933                                  ;
 27934                                  ; SEE ALLOCATE CAVEAT
 27935                                  ;       Carry set if error (currently user FAILed to I 24)
 27936                                  ;-----------------------------------------------------------------------
 27937                                  
 27938                                  RESTFATBYT:
 27939 00004F58 53                              PUSH    BX
 27940 00004F59 52                              PUSH    DX
 27941 00004F5A 57                              PUSH    DI
 27942 00004F5B 31DB                            XOR     BX,BX
 27943 00004F5D 8B16[9605]                      MOV     DX,[FATBYT]
 27944 00004F61 E8DC06                  	call	PACK
 27945 00004F64 5F                              POP     DI
 27946 00004F65 5A                              POP     DX
 27947 00004F66 5B                              POP     BX
 27948                                  ; 16/12/2022
 27949                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27950                                  ;RELEASE_flush:
 27951 00004F67 C3                      	retn
 27952                                  
 27953                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 27954                                  ;---------------------------------------------------------------------------
 27955                                  ;
 27956                                  ; Procedure Name : RELEASE
 27957                                  ;
 27958                                  ; Inputs:
 27959                                  ;       BX = Cluster in file
 27960                                  ;       ES:BP = Base of drive parameters
 27961                                  ; Function:
 27962                                  ;       Frees cluster chain starting with [BX]
 27963                                  ;       Carry set if error (currently user FAILed to I 24)
 27964                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 27965                                  ;
 27966                                  ;-----------------------------------------------------------------------------
 27967                                  
 27968                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27969                                  	; 20/05/2019 - Retro DOS v4.0
 27970                                  RELEASE:
 27971 00004F68 31D2                            XOR     DX,DX
 27972                                  
 27973                                  	;entry	RELBLKS
 27974                                  RELBLKS:
 27975                                  
 27976                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 27977                                  ;   and free the rest in the chain.
 27978                                  
 27979 00004F6A E87F06                  	call	UNPACK
 27980 00004F6D 7224                    	jc	short RELEASE_flush
 27981 00004F6F 7422                    	jz	short RELEASE_flush
 27982 00004F71 89F8                            MOV     AX,DI
 27983 00004F73 52                              PUSH    DX
 27984 00004F74 E8C906                  	call	PACK
 27985 00004F77 5A                              POP     DX
 27986 00004F78 7219                    	jc	short RELEASE_flush
 27987 00004F7A 09D2                            OR      DX,DX
 27988 00004F7C 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 27989                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 27990                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27991 00004F7E 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27992 00004F83 7404                            JZ	short NO_DEALLOC	; No
 27993 00004F85 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 27994                                  NO_DEALLOC:
 27995 00004F89 89C3                            MOV     BX,AX
 27996 00004F8B 48                              dec     ax              ; check for "1"
 27997 00004F8C 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 27998 00004F8E E84406                  	call	IsEOF
 27999 00004F91 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 28000                                  
 28001                                  	; 16/12/2022
 28002                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28003                                  ;%if 0
 28004                                  RELEASE_flush:
 28005                                  	; MSDOS 6.0
 28006 00004F93 268A4600                	mov	al,[es:bp]
 28007                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28008 00004F97 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 28009 00004F98 51                      	push	cx		;  them to be preserved.
 28010 00004F99 06                      	push	es
 28011 00004F9A 55                      	push	bp
 28012 00004F9B E8690B                  	call	FLUSHBUF	; commit buffers for this drive
 28013 00004F9E 5D                      	pop	bp
 28014 00004F9F 07                      	pop	es
 28015 00004FA0 59                      	pop	cx
 28016 00004FA1 5E                      	pop	si
 28017                                  ;%endif
 28018                                  RET12:
 28019 00004FA2 C3                      	retn
 28020                                  
 28021                                  ;Break	<GETEOF -- Find the end of a file>
 28022                                  ;------------------------------------------------------------------------
 28023                                  ;
 28024                                  ; Procedure Name : GETEOF
 28025                                  ;
 28026                                  ; Inputs:
 28027                                  ;       ES:BP Points to DPB
 28028                                  ;       BX = Cluster in a file
 28029                                  ;       DS = CS
 28030                                  ; Outputs:
 28031                                  ;       BX = Last cluster in the file
 28032                                  ;       Carry set if error (currently user FAILed to I 24)
 28033                                  ; DI destroyed. No other registers affected.
 28034                                  ;
 28035                                  ;--------------------------------------------------------------------------
 28036                                  
 28037                                  GETEOF:
 28038 00004FA3 E84606                  	call	UNPACK
 28039 00004FA6 72FA                            jc	short RET12
 28040 00004FA8 53                              PUSH    BX
 28041 00004FA9 89FB                            MOV     BX,DI
 28042 00004FAB E82706                  	call	IsEOF
 28043 00004FAE 5B                              POP     BX
 28044 00004FAF 73F1                            JAE     short RET12
 28045 00004FB1 89FB                            MOV     BX,DI
 28046 00004FB3 EBEE                            JMP     short GETEOF
 28047                                  
 28048                                  ;============================================================================
 28049                                  ; FCB.ASM, MSDOS 6.0, 1991
 28050                                  ;============================================================================
 28051                                  ; 30/07/2018 - Retro DOS v3.0
 28052                                  ; 20/05/2019 - Retro DOS v4.0
 28053                                  
 28054                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 28055                                  ;	NAME	FCB
 28056                                  
 28057                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 28058                                  ;		  filename characters
 28059                                  ;
 28060                                  ;	MakeFcb
 28061                                  ;	NameTrans
 28062                                  ;	PATHCHRCMP
 28063                                  ;	GetLet
 28064                                  ;	UCase
 28065                                  ;	GetLet3
 28066                                  ;	GetCharType
 28067                                  ;	TESTKANJ
 28068                                  ;	NORMSCAN
 28069                                  ;	DELIM
 28070                                  ;
 28071                                  ;	Revision history:
 28072                                  ;
 28073                                  ;		A000  version 4.00  Jan. 1988
 28074                                  ;	
 28075                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 28076                                  
 28077                                  TableLook	EQU	-1
 28078                                  
 28079                                  SCANSEPARATOR	EQU	1
 28080                                  DRVBIT		EQU	2
 28081                                  NAMBIT		EQU	4
 28082                                  EXTBIT		EQU	8
 28083                                  
 28084                                  ;----------------------------------------------------------------------------
 28085                                  ;
 28086                                  ; Procedure : MakeFcb
 28087                                  ;
 28088                                  ;----------------------------------------------------------------------------
 28089                                  
 28090                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28091                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 28092                                  MAKEFCB:
 28093                                  ;hkn; SS override
 28094 00004FB5 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 28095 00004FBB 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 28096                                  	;test	al,2
 28097 00004FBD A802                    	test	AL,DRVBIT	; Use current drive field if default?
 28098 00004FBF 7504                    	JNZ	short DEFDRV
 28099 00004FC1 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 28100                                  DEFDRV:
 28101 00004FC5 47                      	INC	DI
 28102 00004FC6 B90800                  	MOV	CX,8
 28103                                  	;test	al,4
 28104 00004FC9 A804                    	test	AL,NAMBIT	; Use current name fields as default?
 28105 00004FCB 93                      	XCHG	AX,BX		; Save bits in BX
 28106 00004FCC B020                    	MOV	AL," "
 28107 00004FCE 7404                    	JZ	short FILLB	; If not, go fill with blanks
 28108 00004FD0 01CF                    	ADD	DI,CX
 28109 00004FD2 31C9                    	XOR	CX,CX		; Don't fill any
 28110                                  FILLB:
 28111 00004FD4 F3AA                    	REP	STOSB
 28112 00004FD6 B103                    	MOV	CL,3
 28113 00004FD8 F6C308                  	test	BL,EXTBIT	; Use current extension as default
 28114 00004FDB 7404                    	JZ	short FILLB2
 28115 00004FDD 01CF                    	ADD	DI,CX
 28116 00004FDF 31C9                    	XOR	CX,CX
 28117                                  FILLB2:
 28118 00004FE1 F3AA                    	REP	STOSB
 28119 00004FE3 91                      	XCHG	AX,CX		; Put zero in AX
 28120 00004FE4 AB                      	STOSW
 28121 00004FE5 AB                      	STOSW			; Initialize two words after to zero
 28122 00004FE6 83EF10                  	SUB	DI,16		; Point back at start
 28123                                  	;test	bl,1
 28124 00004FE9 F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 28125 00004FEC 7409                    	JZ	short SKPSPC
 28126 00004FEE E88D00                  	CALL	SCANB		; Peel off blanks and tabs
 28127 00004FF1 E82701                  	CALL	DELIM		; Is it a one-time-only delimiter?
 28128 00004FF4 7504                    	JNZ	short NOSCAN
 28129 00004FF6 46                      	INC	SI		; Skip over the delimiter
 28130                                  SKPSPC:
 28131 00004FF7 E88400                  	CALL	SCANB		; Always kill preceding blanks and tabs
 28132                                  NOSCAN:
 28133 00004FFA E8F500                  	CALL	GETLET
 28134 00004FFD 761E                    	JBE	short NODRV	; Quit if termination character
 28135 00004FFF 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 28136 00005002 7519                    	JNZ	short NODRV
 28137 00005004 46                      	INC	SI		; Skip over colon
 28138 00005005 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 28139 00005007 760F                    	JBE	short BADDRV	; Drive letter out of range
 28140                                  
 28141 00005009 50                      	PUSH	AX
 28142 0000500A E8271B                  	call	GetVisDrv
 28143 0000500D 58                      	POP	AX
 28144 0000500E 730A                    	JNC	short HAVDRV
 28145                                  
 28146                                  	; 20/05/2019 - Retro DOS v4.0
 28147                                  	; MSDOS 6.0
 28148                                  ;hkn; SS override
 28149 00005010 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28150                                  					; if not FAT drive ;AN000;
 28151 00005016 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28152                                  BADDRV:
 28153 00005018 B2FF                    	MOV	DL,-1
 28154                                  HAVDRV:
 28155 0000501A AA                      	STOSB			; Put drive specifier in first byte
 28156 0000501B 46                      	INC	SI
 28157 0000501C 4F                      	DEC	DI		; Counteract next two instructions
 28158                                  NODRV:
 28159 0000501D 4E                      	DEC	SI		; Back up
 28160 0000501E 47                      	INC	DI		; Skip drive byte
 28161                                  
 28162                                  	;entry	NORMSCAN
 28163                                  NORMSCAN:
 28164 0000501F B90800                  	MOV	CX,8
 28165 00005022 E82700                  	CALL	GETWORD 	; Get 8-letter file name
 28166 00005025 803C2E                  	CMP	BYTE [SI],"."
 28167 00005028 7515                    	JNZ	short NODOT
 28168 0000502A 46                      	INC	SI		; Skip over dot if present
 28169                                  
 28170                                  	; MSDOS 6.0
 28171                                  ;hkn; SS override
 28172                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28173                                  	; 10/06/2019
 28174 0000502B 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28175 00005031 7406                    	JZ	short VOLOK				;AN000;
 28176 00005033 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28177 00005034 B90200                  	MOV	CX,2					;AN000;
 28178 00005037 EB03                    	JMP	SHORT contvol				;AN000;
 28179                                  VOLOK:
 28180 00005039 B90300                  	MOV	CX,3		; Get 3-letter extension
 28181                                  contvol:
 28182 0000503C E81300                  	CALL	MUSTGETWORD
 28183                                  NODOT:
 28184 0000503F 88D0                    	MOV	AL,DL
 28185                                  
 28186                                  	; MSDOS 6.0
 28187                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28188                                  	; 18/12/2022
 28189 00005041 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28190                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28191                                  
 28192 00005047 C3                      	retn
 28193                                  
 28194                                  NONAM:
 28195 00005048 01CF                    	ADD	DI,CX
 28196 0000504A 4E                      	DEC	SI
 28197 0000504B C3                      	retn
 28198                                  
 28199                                  GETWORD:
 28200 0000504C E8A300                  	CALL	GETLET		
 28201 0000504F 76F7                    	JBE	short NONAM	; Exit if invalid character
 28202 00005051 4E                      	DEC	SI
 28203                                  
 28204                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 28205                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 28206                                  
 28207                                  MUSTGETWORD:
 28208 00005052 E89D00                  	CALL	GETLET
 28209                                  
 28210                                  ;	If spaceFlag is set then we allow spaces in a pathname
 28211                                  
 28212                                  ;IF NOT TABLELOOK
 28213                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 28214                                  ;ENDIF
 28215 00005055 750C                    	JNZ	short MustCheckCX
 28216                                  
 28217                                  ;hkn; SS override
 28218 00005057 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 28219 0000505D 7419                    	JZ	short FILLNAM
 28220 0000505F 3C20                    	CMP	AL," "
 28221 00005061 7515                    	JNZ	short FILLNAM
 28222                                  
 28223                                  MustCheckCX:
 28224 00005063 E3ED                    	JCXZ	MUSTGETWORD
 28225 00005065 49                      	DEC	CX
 28226 00005066 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 28227 00005068 7504                    	JNZ	short NOSTAR
 28228 0000506A B03F                    	MOV	AL,"?"
 28229 0000506C F3AA                    	REP	STOSB
 28230                                  NOSTAR:
 28231 0000506E AA                      	STOSB
 28232 0000506F 3C3F                    	CMP	AL,"?"
 28233 00005071 75DF                    	JNZ	short MUSTGETWORD
 28234 00005073 80CA01                  	OR	DL,1		; Flag ambiguous file name
 28235 00005076 EBDA                    	JMP	short MUSTGETWORD
 28236                                  FILLNAM:
 28237 00005078 B020                    	MOV	AL," "
 28238 0000507A F3AA                    	REP	STOSB
 28239 0000507C 4E                      	DEC	SI
 28240 0000507D C3                      	retn
 28241                                  
 28242                                  SCANB:
 28243 0000507E AC                      	LODSB
 28244 0000507F E8A100                  	CALL	SPCHK
 28245 00005082 74FA                    	JZ	short SCANB
 28246 00005084 4E                      	DEC	SI
 28247                                  scanb_retn:
 28248 00005085 C3                      	retn
 28249                                  
 28250                                  ;----------------------------------------------------------------------------
 28251                                  ;
 28252                                  ; Procedure Name : NameTrans
 28253                                  ;
 28254                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 28255                                  ; allow spaces in pathnames
 28256                                  ;
 28257                                  ;   Inputs:	DS:SI points to start of path element
 28258                                  ;   Outputs:	Name1 has unpacked name, uppercased
 28259                                  ;		ES = DOSGroup
 28260                                  ;		DS:SI advanced after name
 28261                                  ;   Registers modified: DI,AX,DX,CX
 28262                                  ;
 28263                                  ;----------------------------------------------------------------------------
 28264                                  
 28265                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28266                                  	; 20/05/2019 - Retro DOS v4.0
 28267                                  NameTrans:
 28268                                  ;hkn; SS override
 28269 00005086 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 28270 0000508C 16                      	push	ss
 28271 0000508D 07                      	pop	es
 28272                                  
 28273                                  ;hkn; NAME1 is in DOSDATA
 28274 0000508E BF[4B05]                	MOV	DI,NAME1
 28275 00005091 57                      	PUSH	DI
 28276 00005092 B82020                  	MOV	AX,'  '
 28277 00005095 B90500                  	MOV	CX,5
 28278 00005098 AA                      	STOSB
 28279 00005099 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 28280 0000509B 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 28281 0000509D 88C2                    	MOV	DL,AL
 28282 0000509F AA                      	STOSB
 28283 000050A0 5F                      	POP	DI
 28284                                  
 28285 000050A1 E87BFF                  	CALL	NORMSCAN
 28286                                  
 28287                                  ;hkn; SS override for NAME1
 28288 000050A4 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 28289 000050AA 75D9                    	jnz	short scanb_retn
 28290 000050AC 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 28291 000050B2 C3                      	retn
 28292                                  
 28293                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 28294                                  ;============================================================================
 28295                                  
 28296                                  ; 20/05/2019 - Retro DOS v4.0
 28297                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28298                                  
 28299                                  ;If TableLook
 28300                                  
 28301                                  ;hkn; Table	SEGMENT
 28302                                  ;	PUBLIC	CharType
 28303                                  ;----------------------------------------------------------------------------
 28304                                  
 28305                                  ; Character type table for file name scanning
 28306                                  ; Table provides a mapping of characters to validity bits.
 28307                                  ; Four bits are provided for each character. Values 7Dh and above
 28308                                  ; have all bits set, so that part of the table is chopped off, and
 28309                                  ; the translation routine is responsible for screening these values.
 28310                                  ; The bit values are defined in DOSSYM.INC
 28311                                  
 28312                                  ;	      ; ^A and NUL
 28313                                  ;CharType:
 28314                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28315                                  ;	      ; ^C and ^B
 28316                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28317                                  ;	      ; ^E and ^D
 28318                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28319                                  ;	      ; ^G and ^F
 28320                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28321                                  ;	      ; TAB and BS
 28322                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28323                                  ;	      ; ^K and ^J
 28324                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28325                                  ;	      ; ^M and ^L
 28326                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28327                                  ;	      ; ^O and ^N
 28328                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28329                                  ;	      ; ^Q and ^P
 28330                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28331                                  ;	      ; ^S and ^R
 28332                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28333                                  ;	      ; ^U and ^T
 28334                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28335                                  ;	      ; ^W and ^V
 28336                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28337                                  ;	      ; ^Y and ^X
 28338                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28339                                  ;	      ; ESC and ^Z
 28340                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28341                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28343                                  ;	      ; ^_ and ^^
 28344                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28345                                  ;	      ; ! and SPACE
 28346                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 28347                                  ;	      ; # and "
 28348                                  ;	 db   LOW (NOT FFCB+FCHK)
 28349                                  ;	      ; $ - )
 28350                                  ;	 db   3 dup (0FFh)
 28351                                  ;	      ; + and *
 28352                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 28353                                  ;	      ; - and '
 28354                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 28355                                  ;	      ; / and .
 28356                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 28357                                  ;	      ; 0 - 9
 28358                                  ;	 db   5 dup (0FFh)
 28359                                  ;	      ; ; and :
 28360                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28361                                  ;	      ; = and <
 28362                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28363                                  ;	      ; ? and >
 28364                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28365                                  ;	      ; A - Z
 28366                                  ;	 db   13 dup (0FFh)
 28367                                  ;	      ; \ and [
 28368                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 28369                                  ;	      ; ^ and ]
 28370                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28371                                  ;	      ; _ - {
 28372                                  ;	 db   15 dup (0FFh)
 28373                                  ;	      ; } and |
 28374                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28375                                  
 28376                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 28377                                  ;					; character in the table
 28378                                  
 28379                                  ;FCHK	equ 1		; normal name char, no chks needed
 28380                                  ;FDELIM	equ 2		; is a delimiter
 28381                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 28382                                  ;FFCB	equ 8		; is valid in an FCB
 28383                                  
 28384                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28385                                  ;----------------------------------------------------------------------------
 28386                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 28387                                  
 28388                                  CharType: ; 63 bytes
 28389 000050B3 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 28390 000050BB 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 28391 000050C3 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 28392 000050CB FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 28393 000050D3 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 28394 000050DB FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 28395 000050E3 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 28396 000050EB FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 28397                                  
 28398                                  CharType_last equ ($ - CharType) * 2
 28399                                  
 28400                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 28401                                  ;----------------------------------------------------------------------------
 28402                                  ;CharType:
 28403                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28404                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28405                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28406                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28407                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 28408                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 28409                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28410                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 28411                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28412                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28413                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28414                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 28415                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28416                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28417                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28418                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 28419                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28420                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28421                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28422                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28423                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28424                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28425                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28426                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28427                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28428                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28429                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28430                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28431                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28432                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28433                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28434                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28435                                  
 28436                                  ;hkn; Table	ENDS
 28437                                  
 28438                                  ;ENDIF
 28439                                  
 28440                                  ; 20/05/2019 - Retro DOS v4.0
 28441                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 28442                                  
 28443                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28444                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 28445                                  
 28446                                  ;----------------------------------------------------------------------------
 28447                                  ;
 28448                                  ; Procedure Names : GetLet, UCase, GetLet3
 28449                                  ;
 28450                                  ; These routines take a character, convert it to upper case, and check
 28451                                  ; for delimiters.  Three different entry points:
 28452                                  ;	GetLet -  DS:[SI] = character to convert
 28453                                  ;	UCase  -  AL = character to convert
 28454                                  ;	GetLet3 - AL = character
 28455                                  ;		  [BX] = translation table to use
 28456                                  ;
 28457                                  ;	Exit (in all cases) : AL = upper case character
 28458                                  ;			      CY set if char is control char other than TAB
 28459                                  ;			      ZF set if char is a delimiter
 28460                                  ;	Uses : AX, flags
 28461                                  ;
 28462                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 28463                                  ; inline version.  Return with carry set is only possible in the inline
 28464                                  ; version. The table lookup version is the one in use.
 28465                                  ;
 28466                                  ;----------------------------------------------------------------------------
 28467                                  
 28468                                  ; This entry point has character at [SI]
 28469                                  
 28470                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 28471                                  GETLET:	
 28472 000050F2 AC                      	LODSB
 28473                                  
 28474                                  ; This entry point has character in AL
 28475                                  
 28476                                  	;entry	UCase
 28477                                  UCase:	
 28478                                  	; 09/08/2018
 28479                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 28480                                  _UCase:
 28481 000050F3 53                      	PUSH	BX
 28482 000050F4 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 28483                                  
 28484                                  ; Convert the character in AL to upper case
 28485                                  
 28486                                  gl_0:
 28487 000050F7 3C61                    	CMP	AL,"a"
 28488 000050F9 7214                    	JB	short gl_2	; Already upper case, go check type
 28489 000050FB 3C7A                    	CMP	AL,"z"
 28490 000050FD 7702                    	JA	short gl_1
 28491 000050FF 2C20                    	SUB	AL,20H		; Convert to upper case
 28492                                  
 28493                                  ; Map European character to upper case
 28494                                  
 28495                                  gl_1:
 28496 00005101 3C80                    	CMP	AL,80H
 28497 00005103 720A                    	JB	short gl_2	; Not EuroChar, go check type
 28498 00005105 2C80                    	SUB	AL,80H		; translate to upper case with this index
 28499                                  
 28500                                  	; M048 - Start 
 28501                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 28502                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 28503                                  	; preserve it.
 28504                                  
 28505                                  	; 09/08/2018 - Retro DOS v3.0
 28506                                  	; MSDOS 3.3
 28507                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 28508                                  	;CS	XLAT
 28509                                  
 28510                                  	; 20/05/2019 - Retro DOS v4.0
 28511                                  
 28512                                  	; MSDOS 6.0
 28513 00005107 1E                      	push	ds
 28514                                  	;getdseg <ds>
 28515 00005108 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 28516 0000510D D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 28517 0000510E 1F                      	pop	ds
 28518                                  
 28519                                  	; M048 - End
 28520                                  
 28521                                  ; Now check the type
 28522                                  
 28523                                  ;If TableLook
 28524                                  gl_2:
 28525                                  	; 20/05/2019 - Retro DOS v4.0
 28526 0000510F 50                      	PUSH	AX
 28527                                  
 28528                                  	; MSDOS 3.3
 28529                                  	;mov	bx,CharType
 28530                                  	;; 09/08/2018
 28531                                  	;;xlat	byte [cs:bx]
 28532                                  	;cs	xlat	
 28533                                  	
 28534                                  	; MSDOS 6.0
 28535 00005110 E81800                  	CALL	GetCharType	; returns type flags in AL
 28536                                  	
 28537                                  	;test	al,1	
 28538 00005113 A801                    	TEST	AL,FCHK 	; test for normal character
 28539 00005115 58                      	POP	AX
 28540 00005116 5B                      	POP	BX
 28541 00005117 C3                      	RETN
 28542                                  
 28543                                  ; This entry has character in AL and lookup table in BX
 28544                                  
 28545                                  	; MSDOS 6.0
 28546                                  ;	;entry GetLet3
 28547                                  GETLET3: ; 10/08/2018
 28548 00005118 53                      	PUSH	BX
 28549 00005119 EBDC                    	JMP	short gl_0
 28550                                  ;ELSE
 28551                                  ;
 28552                                  ;gl_2:
 28553                                  ;	POP	BX
 28554                                  ;	CMP	AL,"."
 28555                                  ;	retz
 28556                                  ;	CMP	AL,'"'
 28557                                  ;	retz
 28558                                  ;	CALL	PATHCHRCMP
 28559                                  ;	retz
 28560                                  ;	CMP	AL,"["
 28561                                  ;	retz
 28562                                  ;	CMP	AL,"]"
 28563                                  ;	retz
 28564                                  ;ENDIF
 28565                                  
 28566                                  ;---------------------------------------------------------------------
 28567                                  ;
 28568                                  ; DELIM - check if character is a delimiter
 28569                                  ;	Entry : AX = character to check
 28570                                  ;	Exit  : ZF set if character is not a delimiter
 28571                                  ;	Uses  : Flags
 28572                                  ;
 28573                                  ;--------------------------------------------------------------------
 28574                                  
 28575                                  	;entry	DELIM
 28576                                  DELIM:
 28577                                  ;IF TableLook
 28578                                  	; 20/05/2019 - Retro DOS v4.0
 28579 0000511B 50                      	PUSH	AX
 28580                                  
 28581                                  	; MSDOS 3.3
 28582                                  	;push	bx
 28583                                  	;mov	bx,CharType
 28584                                  	;;09/08/2018
 28585                                  	;;xlat	byte [cs:bx]
 28586                                  	;cs	xlat
 28587                                  	;pop	bx
 28588                                  
 28589                                  	; MSDOS 6.0
 28590 0000511C E80C00                  	CALL	GetCharType
 28591                                  	
 28592                                  	;test	al,2
 28593 0000511F A802                    	TEST	AL,FDELIM
 28594 00005121 58                      	POP	AX
 28595 00005122 C3                      	RETN
 28596                                  ;ELSE
 28597                                  ;	CMP	AL,":"
 28598                                  ;	retz
 28599                                  ;
 28600                                  ;	CMP	AL,"<"
 28601                                  ;	retz
 28602                                  ;	CMP	AL,"|"
 28603                                  ;	retz
 28604                                  ;	CMP	AL,">"
 28605                                  ;	retz
 28606                                  ;
 28607                                  ;	CMP	AL,"+"
 28608                                  ;	retz
 28609                                  ;	CMP	AL,"="
 28610                                  ;	retz
 28611                                  ;	CMP	AL,";"
 28612                                  ;	retz
 28613                                  ;	CMP	AL,","
 28614                                  ;	retz
 28615                                  ;ENDIF
 28616                                  
 28617                                  ;-------------------------------------------------------------------------
 28618                                  ;
 28619                                  ;  SPCHK - checks to see if a character is a space or equivalent
 28620                                  ;	Entry : AL = character to check
 28621                                  ;	Exit  : ZF set if character is a space
 28622                                  ;	Uses  : flags
 28623                                  ;
 28624                                  ;-------------------------------------------------------------------------
 28625                                  
 28626                                  	;entry SPCHK
 28627                                  SPCHK:
 28628                                  ;IF TableLook
 28629                                  	; 20/05/2019 - Retro DOS v4.0
 28630 00005123 50                      	PUSH	AX
 28631                                  
 28632                                  	; MSDOS 3.3
 28633                                  	;push	bx
 28634                                  	;mov	bx,CharType
 28635                                  	;; 09/08/2018
 28636                                  	;;xlat	byte [cs:bx]
 28637                                  	;cs	xlat
 28638                                  	;pop	bx
 28639                                  
 28640                                  	; MSDOS 6.0
 28641 00005124 E80400                  	CALL	GetCharType
 28642                                  	
 28643                                  	;test	al,4
 28644 00005127 A804                    	TEST	AL,FSPCHK
 28645 00005129 58                      	POP	AX
 28646 0000512A C3                      	RETN
 28647                                  ;ELSE
 28648                                  ;	CMP	AL,9		; Filter out tabs too
 28649                                  ;	retz
 28650                                  ;; WARNING! " " MUST be the last compare
 28651                                  ;	CMP	AL," "
 28652                                  ;	return
 28653                                  ;ENDIF
 28654                                  
 28655                                  ;-------------------------------------------------------------------------
 28656                                  ;
 28657                                  ;  GetCharType - return flag bits indicating character type
 28658                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 28659                                  ;	defined above at label CharType.
 28660                                  ;
 28661                                  ;	Entry : AL = character to return type flags for
 28662                                  ;	Exit  : AL = type flags
 28663                                  ;	Uses  : AL, flags
 28664                                  ;
 28665                                  ;-------------------------------------------------------------------------
 28666                                  
 28667                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28668                                  
 28669                                  	; 20/05/2019 - Retro DOS v4.0
 28670                                  	; MSDOS 6.0
 28671                                  GetCharType:
 28672                                  	;cmp	al,7Eh
 28673 0000512B 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 28674 0000512D 7316                    	jae	short gct_90		; return standard value
 28675                                  
 28676 0000512F 53                      	push	bx
 28677 00005130 BB[B350]                	mov	bx,CharType		; load lookup table
 28678 00005133 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 28679                                  	;xlat	cs:[bx] 		; get flags
 28680 00005135 2ED7                    	cs	xlat	
 28681 00005137 5B                      	pop	bx
 28682                                  
 28683                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 28684                                  ; we have to shift the flags down to the low nibble
 28685                                  
 28686 00005138 7308                    	jnc	short gct_80		; carry clear, no shift needed
 28687                                  
 28688 0000513A D0E8                    	shr	al,1			; we want high nibble, shift it down
 28689 0000513C D0E8                    	shr	al,1
 28690 0000513E D0E8                    	shr	al,1
 28691 00005140 D0E8                    	shr	al,1
 28692                                  gct_80:
 28693 00005142 240F                    	and	al,0Fh			; clear the unused nibble
 28694 00005144 C3                      	retn
 28695                                  gct_90:
 28696 00005145 B00F                    	mov	al,0Fh			; set all flags
 28697 00005147 C3                      	retn
 28698                                  
 28699                                  ;----------------------------------------------------------------------------
 28700                                  ;
 28701                                  ; Procedure : PATHCHRCMP
 28702                                  ;
 28703                                  ;----------------------------------------------------------------------------
 28704                                  
 28705                                  PATHCHRCMP:
 28706 00005148 3C2F                    	CMP	AL,'/'
 28707 0000514A 7606                    	JBE	short PathRet
 28708 0000514C 3C5C                    	CMP	AL,'\'
 28709 0000514E C3                      	retn
 28710                                  GotFor:
 28711 0000514F B05C                    	MOV	AL,'\'
 28712 00005151 C3                      	retn
 28713                                  PathRet:
 28714 00005152 74FB                    	JZ	short GotFor
 28715 00005154 C3                      	retn
 28716                                  
 28717                                  ;============================================================================
 28718                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 28719                                  ;============================================================================
 28720                                  ; 30/07/2018 - Retro DOS v3.0
 28721                                  ; 29/04/2019 - Retro DOS v4.0
 28722                                  
 28723                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 28724                                  
 28725                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 28726                                  
 28727                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 28728                                  ;	NAME	IBMCTRLC
 28729                                  
 28730                                  ;**	Low level routines for detecting special characters on CON input,
 28731                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 28732                                  ;	process termination code, and the INT 0 divide overflow handler.
 28733                                  ;
 28734                                  ;	FATAL
 28735                                  ;	FATAL1
 28736                                  ;	reset_environment
 28737                                  ;	DSKSTATCHK
 28738                                  ;	SPOOLINT
 28739                                  ;	STATCHK
 28740                                  ;	CNTCHAND
 28741                                  ;	DIVOV
 28742                                  ;	CHARHARD
 28743                                  ;	HardErr
 28744                                  ;
 28745                                  ;	Revision history:
 28746                                  ;
 28747                                  ;	    AN000	version 4.0   Jan 1988
 28748                                  ;	    A002	PTM    -- dir >lpt3 hangs
 28749                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 28750                                  ;
 28751                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 28752                                  ;	      flags register. In order to return to user normally DOS used to
 28753                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 28754                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 28755                                  ;
 28756                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 28757                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 28758                                  ;	      charhard.
 28759                                  
 28760                                  ; 29/04/2019 - Retro DOS v4.0
 28761                                  	; MSDOS 6.0
 28762                                  ;		public	LowInt23Addr		
 28763                                  LowInt23Addr: ;	LABEL	DWORD
 28764 00005155 [E710]0000              	DW	LowInt23, 0
 28765                                  
 28766                                  ;		public	LowInt24Addr
 28767                                  LowInt24Addr: ;	LABEL	DWORD
 28768 00005159 [FB10]0000              	DW	LowInt24, 0
 28769                                  
 28770                                  ;		public	LowInt28Addr
 28771                                  LowInt28Addr: ;	LABEL	DWORD
 28772 0000515D [0F11]0000              	DW	LowInt28, 0
 28773                                  
 28774                                  ;Break	<Checks for ^C in CON I/O>
 28775                                  
 28776                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28777                                  ; 05/05/2019 - Retro DOS v4.0
 28778                                  
 28779                                  ;---------------------------------------------------------------------------
 28780                                  ;
 28781                                  ; Procedure Name : DSKSTATCHK
 28782                                  ;
 28783                                  ; Check for ^C if only one level in
 28784                                  ;
 28785                                  ;---------------------------------------------------------------------------
 28786                                  
 28787                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 28788                                  
 28789                                  DSKSTATCHK:        
 28790                                  	;CMP	BYTE [INDOS],1
 28791 00005161 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 28792                                  	;retnz			; Do NOTHING
 28793                                  	; 16/12/2022
 28794 00005167 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 28795                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28796                                  	;jz	short _RET37 ; dskstatchk1
 28797                                  	;retn
 28798                                  ;_RET37:
 28799                                  ;dskstatchk1:
 28800 00005169 51                      	PUSH    CX
 28801 0000516A 06                              PUSH    ES
 28802 0000516B 53                              PUSH    BX
 28803 0000516C 1E                              PUSH    DS
 28804 0000516D 56                              PUSH    SI
 28805                                          
 28806                                  	;PUSH	CS
 28807                                          ;POP	ES
 28808                                          ;PUSH	CS
 28809                                          ;POP	DS
 28810                                  
 28811 0000516E 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 28812 00005170 8EC3                    	MOV	ES,BX		; for deviocall2
 28813 00005172 8EDB                    	MOV	DS,BX
 28814                                  
 28815                                  	; 16/12/2022
 28816                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28817                                  
 28818                                  	; 05/05/2019
 28819                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 28820                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 28821                                  	;mov	word [ss:DSKSTST],0
 28822                                  
 28823                                  	; 16/12/2022
 28824                                  	; 25/06/2019
 28825 00005174 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 28826 00005179 C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 28827 0000517E C706[9503]0000          	mov	word [DSKSTST],0
 28828                                  
 28829 00005184 BB[9203]                        MOV     BX,DSKSTCALL
 28830                                  
 28831                                  	;LDS	SI,[ss:BCON]
 28832                                          ; 25/062019
 28833 00005187 C536[3200]              	lds	si,[BCON]
 28834                                  
 28835                                  ; 16/12/2022
 28836                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28837                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 28838                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 28839                                  ;	mov	word [ss:DSKSTST],0
 28840                                  ;	mov	bx,DSKSTCALL
 28841                                  ;	lds	si,[ss:BCON]
 28842                                  
 28843 0000518B E867F5                  	CALL	DEVIOCALL2
 28844                                   	; 15/03/2018
 28845                                  	;;test	word [ss:DSKSTST],200h
 28846                                          ;TEST	WORD [SS:DSKSTST],STBUI
 28847                                  	; 05/05/2019
 28848 0000518E 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 28849 00005194 7408                    	jz	short _GotCh		; No characters available
 28850                                  
 28851 00005196 30C0                            XOR     AL,AL                   ; Set zero
 28852                                  RET36:
 28853 00005198 5E                              POP     SI
 28854 00005199 1F                              POP     DS
 28855 0000519A 5B                              POP     BX
 28856 0000519B 07                              POP     ES
 28857 0000519C 59                              POP     CX
 28858                                  	; 16/12/2022
 28859                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28860                                  _RET37:
 28861 0000519D C3                              RETN
 28862                                  
 28863                                  _GotCh:
 28864 0000519E 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 28865                                  
 28866 000051A2 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 28867 000051A4 75F2                            JNZ     SHORT RET36
 28868 000051A6 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 28869 000051AC 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 28870 000051B2 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 28871                                  	; 09/09/2018
 28872 000051B7 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 28873 000051BE 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 28874 000051C5 E82DF5                  	CALL	DEVIOCALL2              ; Eat the ^C
 28875 000051C8 5E                              POP     SI
 28876 000051C9 1F                              POP     DS
 28877 000051CA 5B                              POP     BX                      ; Clean stack
 28878 000051CB 07                              POP     ES
 28879 000051CC 59                              POP     CX
 28880 000051CD E9D000                          JMP	CNTCHAND ; 10/08/2018
 28881                                  
 28882                                  	; 05/05/2019
 28883                                  NOSTOP:
 28884                                  	; MSDOS 6.0
 28885 000051D0 3C10                    	CMP	AL,"P"-"@"
 28886 000051D2 7509                    	JNZ	short check_next
 28887                                  				    	; SS override
 28888 000051D4 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 28889 000051DA 7406                    	JZ	short INCHKJ		; no
 28890 000051DC C3                      	retn
 28891                                  check_next:
 28892                                  	;IF	NOT TOGLPRN
 28893                                  	;CMP	AL,"N"-"@"
 28894                                  	;JZ	short INCHKJ
 28895                                  	;ENDIF
 28896                                  
 28897 000051DD 3C03                    	CMP	AL,"C"-"@"
 28898 000051DF 7401                    	JZ	short INCHKJ
 28899                                  check_end:
 28900 000051E1 C3                      	retn
 28901                                  
 28902                                  	; MSDOS 3.3
 28903                                          ;CMP     AL,"P"-"@"  ; cmp al,16	
 28904                                          ;JZ	short INCHKJ
 28905                                  
 28906                                  	; 15/04/2018
 28907                                          ;;IF	NOT TOGLPRN
 28908                                          ;CMP	AL,"N"-"@"
 28909                                          ;JZ	SHORT INCHKJ
 28910                                          ;;ENDIF
 28911                                  	
 28912                                  	;CMP     AL,"C"-"@"  ; cmp al,3	
 28913                                          ;JZ	short INCHKJ
 28914                                  	;RETN
 28915                                  
 28916                                  	; 08/09/2018
 28917                                  INCHKJ:	; 10/08/2018
 28918 000051E2 E9A500                  	JMP	INCHK
 28919                                  
 28920                                  ;----------------------------------------------------------------------------
 28921                                  ;
 28922                                  ; Procedure Name : SpoolInt
 28923                                  ;
 28924                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 28925                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 28926                                  ; the middle of an INT 24.
 28927                                  ;
 28928                                  ;----------------------------------------------------------------------------
 28929                                  
 28930                                  SPOOLINT:
 28931 000051E5 9C                              PUSHF
 28932                                  	; 15/03/2018
 28933 000051E6 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 28934 000051EC 7423                            JZ      SHORT POPFRET
 28935 000051EE 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 28936 000051F4 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 28937                                  
 28938                                  	; 30/07/2018
 28939                                  
 28940                                  	; Note that we are going to allow an external program to issue system 
 28941                                  	; calls at this time. We MUST preserve IdleInt across this.
 28942                                  
 28943 000051F6 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 28944                                  
 28945                                  	; 05/05/2019 - Retro DOS v4.0
 28946                                   
 28947                                  	; MSDOS 6.0
 28948 000051FB 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 28949 00005201 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 28950 00005203 CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 28951 00005205 EB05                    	jmp	short spool_ret_addr
 28952                                  
 28953                                  do_low_int28:
 28954                                  	;call	far [ss:LowInt28Addr]
 28955 00005207 2EFF1E[5D51]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 28956                                  
 28957                                  spool_ret_addr:
 28958                                  	;INT	int_spooler		; INT 28h
 28959                                  
 28960 0000520C 368F06[5803]            	POP	WORD [SS:IDLEINT]
 28961                                  POPFRET:
 28962 00005211 9D                              POPF
 28963                                  _RET18:  
 28964 00005212 C3                      	RETN
 28965                                  
 28966                                  ; 05/05/2019 - Retro DOS v4.0
 28967                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 28968                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28969                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 28970                                  
 28971                                  ;----------------------------------------------------------------------------
 28972                                  ;
 28973                                  ; Procedure Name : STATCHK
 28974                                  ;
 28975                                  ;----------------------------------------------------------------------------
 28976                                  
 28977                                  STATCHK:
 28978 00005213 E84BFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 28979                                                                          ; input redirection
 28980 00005216 53                              PUSH    BX
 28981 00005217 31DB                            XOR     BX,BX
 28982 00005219 E8A2E4                          CALL	GET_IO_SFT
 28983 0000521C 5B                              POP     BX
 28984 0000521D 72F3                            JC      SHORT _RET18
 28985                                  
 28986 0000521F B401                            MOV     AH,1
 28987 00005221 E8FAF2                          CALL	IOFUNC
 28988 00005224 74BF                            JZ      SHORT SPOOLINT
 28989 00005226 3C13                            CMP     AL,'S'-'@'
 28990 00005228 75A6                            JNZ     SHORT NOSTOP
 28991                                  
 28992                                  	; 05/05/2019
 28993                                  	; MSDOS 6.0			; SS override
 28994 0000522A 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 28995 00005230 75AF                    	JNZ	short check_end		; AN000; yes
 28996                                  
 28997 00005232 30E4                            XOR     AH,AH
 28998 00005234 E8E7F2                          CALL	IOFUNC                  ; Eat Cntrl-S
 28999 00005237 EB4A                            JMP     SHORT PAUSOSTRT
 29000                                  PRINTOFF:
 29001                                  PRINTON:
 29002 00005239 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 29003                                  
 29004                                  	; 30/07/2018 - Retro DOS v3.0
 29005 0000523E 53                      	PUSH	BX
 29006 0000523F BB0400                  	MOV	BX,4
 29007 00005242 E879E4                  	call	GET_IO_SFT
 29008 00005245 5B                      	POP	BX
 29009 00005246 72CA                    	jc	short _RET18
 29010 00005248 06                      	PUSH	ES
 29011 00005249 57                      	PUSH	DI
 29012 0000524A 1E                      	PUSH	DS
 29013 0000524B 07                      	POP	ES
 29014 0000524C 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 29015                                  	;test	word [es:di+5],800h
 29016                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 29017                                  	; 05/05/2019
 29018 0000524E 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 29019 00005253 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 29020                                  
 29021                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 29022                                  					; See if allowed
 29023 00005255 50                      	push	ax
 29024 00005256 B82611                  	mov	ax,1126h
 29025 00005259 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29026                                  			; Return: CF set on error, AX = error code
 29027                                  			; STACK unchanged
 29028 0000525B 58                      	pop	ax
 29029                                  
 29030 0000525C 730F                    	JNC	short NORM_PR 		; Echo is OK
 29031                                  
 29032                                  					; SS override
 29033 0000525E 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 29034                                  
 29035                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 29036                                  
 29037 00005264 50                      	push    ax
 29038 00005265 B82411                  	mov     ax,1124h
 29039 00005268 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29040                                  			; ES:DI -> SFT, SS = DOS CS
 29041 0000526A 58                      	pop     ax
 29042                                  
 29043 0000526B EB10                    	JMP	SHORT RETP6
 29044                                  NORM_PR:
 29045 0000526D 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 29046 00005273 7505                    	JNZ	short PRNOPN
 29047 00005275 E801F4                  	call	DEV_CLOSE_SFT
 29048 00005278 EB03                    	JMP	SHORT RETP6
 29049                                  PRNOPN:
 29050 0000527A E8F4F3                  	call	DEV_OPEN_SFT
 29051                                  RETP6:
 29052 0000527D 5F                      	POP	DI
 29053 0000527E 07                      	POP	ES
 29054                                  STATCHK_RETN:
 29055 0000527F C3                              RETN
 29056                                  PAUSOLP:
 29057 00005280 E862FF                          CALL    SPOOLINT
 29058                                  PAUSOSTRT:
 29059 00005283 B401                            MOV     AH,1
 29060 00005285 E896F2                          CALL	IOFUNC
 29061 00005288 74F6                            JZ      SHORT PAUSOLP
 29062                                  INCHK:
 29063 0000528A 53                              PUSH    BX
 29064 0000528B 31DB                            XOR     BX,BX
 29065 0000528D E82EE4                          CALL	GET_IO_SFT
 29066 00005290 5B                              POP     BX
 29067 00005291 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 29068 00005293 30E4                            XOR     AH,AH
 29069 00005295 E886F2                          CALL	IOFUNC
 29070                                  	; 30/07/2018
 29071                                  	; MSDOS 3.3
 29072                                          ;CMP	AL,'P'-'@' ;cmp al,16
 29073                                          ;JNZ	SHORT NOPRINT
 29074                                  
 29075                                  	;cmp	byte [SS:SCAN_FLAG],0
 29076                                  	;JZ	SHORT PRINTON	
 29077                                  	;mov	byte [ss:SCAN_FLAG],0
 29078                                  
 29079                                  	; 05/05/2019
 29080                                  	; MSDOS 6.0
 29081 00005298 3C10                    	CMP	AL,"P"-"@"
 29082                                  	;;;;  7/14/86	ALT_Q key fix
 29083 0000529A 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 29084                                  ;NOPRINT:	
 29085                                  	;IF	NOT TOGLPRN
 29086                                  	;CMP	AL,"N"-"@"
 29087                                  	;JZ	short PRINTOFF
 29088                                  	;ENDIF
 29089 0000529C 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 29090                                  	;retnz
 29091 0000529E 75DF                    	jnz	short STATCHK_RETN
 29092                                  
 29093                                  	; !! NOTE: FALL THROUGH !!
 29094                                  
 29095                                  ;---------------------------------------------------------------------------
 29096                                  ;
 29097                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 29098                                  ;
 29099                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 29100                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 29101                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 29102                                  ; processing to continue; 2) the original interrupt return address to the code
 29103                                  ; that performed the function call in the first place. If the user CTRL-C
 29104                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 29105                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 29106                                  ; is simulated.
 29107                                  ;
 29108                                  ;---------------------------------------------------------------------------
 29109                                  
 29110                                  CNTCHAND:
 29111                                  	; MSDOS 6.0			; SS override
 29112                                  					; AN002; from RAWOUT
 29113                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 29114                                  	;JNZ	short around_deadlock 	; AN002;
 29115                                  
 29116                                  	; 05/05/2019 - Retro DOS v4.0
 29117 000052A0 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 29118 000052A6 7508                    	JNZ	short around_deadlock 	; AN002;
 29119                                  
 29120 000052A8 B003                            MOV     AL,3			; Display "^C"
 29121 000052AA E8CAC4                          CALL	BUFOUT
 29122 000052AD E865C3                          CALL	CRLF
 29123                                  around_deadlock:
 29124 000052B0 16                              PUSH    SS
 29125 000052B1 1F                              POP     DS
 29126 000052B2 803E[5703]00                    CMP     BYTE [CONSWAP],0
 29127 000052B7 7403                            JZ      SHORT NOSWAP
 29128 000052B9 E87DE0                          CALL	SWAPBACK
 29129                                  NOSWAP:
 29130 000052BC FA                      	CLI				; Prepare to play with stack
 29131 000052BD 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 29132 000052C1 8B26[8405]              	MOV	SP,[USER_SP]
 29133 000052C5 E8CCB1                          CALL	restore_world       ; User registers now restored
 29134                                  
 29135                                  	; 30/07/2018 - Retro DOS v3.0 
 29136                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 29137                                          ; 14/03/2018 - Retro DOS v2.0
 29138                                  	;MOV	BYTE [CS:INDOS],0	
 29139                                          ;MOV	BYTE [CS:ERRORMODE],0
 29140                                          ;MOV	[CS:ConC_Spsave],SP
 29141                                  	;clc	;30/07/2018
 29142                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 29143                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 29144                                  			; Return: return via RETF 2 with CF set
 29145                                  			; DOS will abort program with errorlevel 0
 29146                                  			; else
 29147                                  			; interrupted DOS call continues
 29148                                  
 29149                                  	; 05/05/2019 - Retro DOS v4.0
 29150                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29151                                  
 29152                                  	; CS was used to address these variables. We have to use DOSDATA
 29153                                  	
 29154 000052C8 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29155                                  			; (pop es, after 'call restore_world')	
 29156 000052C9 1E                      	push	ds
 29157                                  	;getdseg <ds>			; ds -> dosdata
 29158 000052CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29159 000052CF C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29160 000052D4 C606[2003]00            	mov	byte [ERRORMODE],0
 29161 000052D9 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29162                                  	; User SP has changed because of push. Adjust for it
 29163 000052DD 8306[3203]02            	add	word [ConC_Spsave],2
 29164                                  
 29165 000052E2 803E[1112]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29166 000052E7 1F                       	pop	ds	; restore ds
 29167 000052E8 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29168 000052EA F8                      	CLC				
 29169 000052EB CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29170 000052ED EB06                    	jmp	short ctrlc_ret_addr
 29171                                  
 29172                                  	; 05/05/2019
 29173                                  do_low_int23:
 29174 000052EF F8                      	clc
 29175 000052F0 2EFF1E[5551]            	call	far [cs:LowInt23Addr]	
 29176                                  
 29177                                  	; 30/07/2018 
 29178                                  
 29179                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29180                                  
 29181                                  ; The user has returned to us. The circumstances we allow are:
 29182                                  ;
 29183                                  ;   IRET	We retry the operation by redispatching the system call
 29184                                  ;   CLC/RETF	POP the stack and retry
 29185                                  ;   ... 	Exit the current process with ^C exit
 29186                                  ;
 29187                                  ; User's may RETURN to us and leave interrupts on. 
 29188                                  ; Turn 'em off just to be sure
 29189                                  
 29190                                  ctrlc_ret_addr: ; 05/05/2019
 29191                                  
 29192 000052F5 FA                      	CLI
 29193                                  
 29194                                  	; MSDOS 3.3 
 29195                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 29196                                  	;PUSHF				; and the flags (maybe new call)
 29197                                  	;POP	AX
 29198                                  
 29199                                  	; 05/05/2019
 29200                                  	; MSDOS 6.0
 29201                                  
 29202                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 29203                                  
 29204 000052F6 50                      	push	ax
 29205 000052F7 8CD8                    	mov	ax,ds
 29206                                  	;getdseg <ds>			; ds -> dosdata
 29207 000052F9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29208 000052FE A3[0A0D]                	mov	[TEMPSEG],ax
 29209 00005301 58                      	pop	ax
 29210 00005302 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 29211 00005305 9C                      	pushf				; and the flags (maybe new call)
 29212 00005306 58                      	pop	ax
 29213                                  
 29214                                  ; See if the input stack is identical to the output stack
 29215                                  
 29216                                  	; MSDOS 3.3
 29217                                  	;CMP	SP,[CS:ConC_Spsave]
 29218                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29219                                  
 29220                                  	; MSDOS 6.0
 29221 00005307 3B26[3203]              	CMP	SP,[ConC_Spsave]
 29222 0000530B 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29223                                  
 29224                                  ; Repeat the operation by redispatching the system call.
 29225                                  
 29226                                  ctrlc_repeat:
 29227                                  	; MSDOS 3.3
 29228                                  	;MOV	AX,[CS:USER_IN_AX]
 29229                                  	; 05/05/2019
 29230                                  	; MSDOS 6.0
 29231 0000530D A1[3A03]                	mov	ax,[USER_IN_AX]
 29232 00005310 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 29233                                  	; MSDOS 3.3 & MSDOS 6.0 
 29234                                  	;transfer COMMAND
 29235                                  COMMANDJ:
 29236 00005314 E930B0                  	JMP	COMMAND
 29237                                  
 29238                                  ; The current SP is NOT the same as the input SP. Presume that he 
 29239                                  ; RETF'd leaving some flags on the stack and examine the input
 29240                                  
 29241                                  ctrlc_try_new:
 29242 00005317 83C402                  	ADD	SP,2			; pop those flags
 29243                                  	;;test	ax,1
 29244                                  	;TEST	AX,f_Carry		; did he return with carry?
 29245 0000531A A801                    	test	al,f_Carry ; test al,1
 29246 0000531C 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 29247                                  
 29248                                  	; MSDOS 6.0
 29249 0000531E 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 29250                                  
 29251                                  	; Well...  time to abort the user.  
 29252                                  	; Signal a ^C exit and use the EXIT system call..
 29253                                  
 29254                                  ctrlc_abort:
 29255                                  	; MSDOS 3.3
 29256                                          ;;MOV	AX,(EXIT SHL 8) + 0
 29257                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 29258                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 29259                                          ;transfer COMMAND	    ; give up by faking $EXIT
 29260                                  	;;JMP	SHORT COMMANDJ
 29261                                  	;JMP	COMMAND
 29262                                  
 29263                                  	; 05/05/2019 - Retro DOS v4.0
 29264                                  	; MSDOS 6.0
 29265 00005322 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 29266 00005325 1E                      	push	ds
 29267                                  	;getdseg <ds>			; ds -> dosdata
 29268 00005326 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 29269 0000532B C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 29270 00005330 1F                      	pop	ds
 29271                                  	;transfer COMMAND		; give up by faking $EXIT
 29272 00005331 EBE1                    	JMP	SHORT COMMANDJ
 29273                                  	;JMP	COMMAND
 29274                                  
 29275                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 29276                                  ;----------------------------------------------------------------------------
 29277                                  ;
 29278                                  ; Procedure Name : DIVOV
 29279                                  ;
 29280                                  ; Default handler for division overflow trap
 29281                                  ;
 29282                                  ;----------------------------------------------------------------------------
 29283                                  
 29284                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29285                                  DIVOV: 
 29286                                  	; 05/05/2019 - Retro DOS v4.0
 29287                                  	; 30/07/2018
 29288                                  	; 07/07/2018 - Retro DOS v3.0
 29289 00005333 BE[F109]                	mov	si,DIVMES
 29290 00005336 2E8B1E[040A]            	mov	bx,[cs:DivMesLen]
 29291                                  	;mov	ax,cs
 29292                                  	;mov	ss,ax
 29293                                  	; 05/05/2019
 29294                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 29295 0000533B 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 29296 00005340 BC[A007]                	mov     sp,AUXSTACK
 29297                                  	;call	RealDivOv ; MSDOS 3.3
 29298 00005343 E80200                  	call	_OUTMES ; MSDOS 6.0
 29299 00005346 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 29300                                  
 29301                                  ; 30/07/2018
 29302                                  
 29303                                  ; MSDOS 6.0
 29304                                  ;---------------------------------------------------------------------------
 29305                                  ;
 29306                                  ; Procedure Name : OutMes
 29307                                  ;
 29308                                  ;
 29309                                  ; OutMes: perform message output
 29310                                  ; Inputs:   SS:SI points to message
 29311                                  ;	    BX has message length
 29312                                  ; Outputs:  message to BCON
 29313                                  ;
 29314                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29315                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29316                                  ;NB. This procedure is called only from DIVOV. -SR
 29317                                  ;
 29318                                  ;---------------------------------------------------------------------------
 29319                                  
 29320                                  ;MSDOS 3.3
 29321                                  ;---------------------------------------------------------------------------
 29322                                  ; RealDivOv: perform actual divide overflow stuff.
 29323                                  ; Inputs:   none
 29324                                  ; Outputs:  message to BCON
 29325                                  ;---------------------------------------------------------------------------
 29326                                  
 29327                                  	; 05/05/2019 - Retro DOS v4.0
 29328                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 29329                                  
 29330                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29331                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 29332                                  
 29333                                  ;---------------------------------------------------------------------------
 29334                                  ;
 29335                                  ; Procedure Name : OutMes
 29336                                  ;
 29337                                  ; OutMes: perform message output
 29338                                  ; Inputs:   SS:SI points to message
 29339                                  ;	    BX has message length
 29340                                  ; Outputs:  message to BCON
 29341                                  ;
 29342                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29343                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29344                                  ;NB. This procedure is called only from DIVOV. -SR
 29345                                  ;
 29346                                  ;---------------------------------------------------------------------------
 29347                                  
 29348                                  	; 30/07/2018
 29349                                  	; MSDOS 6.0
 29350                                  _OUTMES:
 29351                                  	; MSDOS 3.3
 29352                                  ;RealDivOv:
 29353                                  	; 07/07/2018 - Retro DOS v3.0
 29354                                          ;Context ES
 29355 00005348 16                      	push	ss ; 05/05/2019
 29356                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 29357 00005349 07                      	POP	ES
 29358                                          ;Context DS
 29359 0000534A 16                      	push	ss ; 05/05/2019	
 29360                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 29361 0000534B 1F                      	POP	DS
 29362 0000534C C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 29363 00005351 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 29364 00005356 C706[9503]0000                  MOV     WORD [DSKSTST],0
 29365                                  	; BX = [DivMesLen] = 19
 29366 0000535C 891E[A403]                      MOV     [DSKSTCNT],BX
 29367 00005360 BB[9203]                        MOV     BX,DSKSTCALL
 29368 00005363 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 29369                                  	; 08/09/2018
 29370                                  	;mov	[DEVIOBUF_PTR],si
 29371                                  	; MSDOS 6.0
 29372                                  					; CS is used for string, fill in 
 29373                                  					; segment address 
 29374 00005367 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 29375                                  
 29376 0000536B C536[3200]                      LDS     SI,[BCON]
 29377 0000536F E883F3                          CALL	DEVIOCALL2
 29378                                  
 29379                                  	;; 14/03/2018
 29380                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 29381                                  	;; 08/09/2018
 29382                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 29383                                          ;MOV	WORD [CS:DSKSTCNT],1
 29384                                          
 29385                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29386                                  
 29387                                  	; ES still points to DOSDATA. ES is
 29388                                  					; not destroyed by deviocall2. So use
 29389                                  					; ES override.
 29390                                  
 29391 00005372 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 29392 00005379 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 29393                                  
 29394 00005380 C3                      	RETN
 29395                                  
 29396                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 29397                                  ;---------------------------------------------------------------------------
 29398                                  ;
 29399                                  ; Procedure Name : CHARHARD
 29400                                  ;
 29401                                  ;
 29402                                  ; Character device error handler
 29403                                  ; Same function as HARDERR
 29404                                  ;
 29405                                  ;---------------------------------------------------------------------------
 29406                                  
 29407                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29408                                  CHARHARD:
 29409                                  	; 05/05/2019 - Retro DOS v4.0
 29410                                  	; 30/07/2018
 29411                                  	; 08/07/2018 - Retro DOS v3.0
 29412                                  
 29413                                  	; MSDOS 6.0
 29414                                  		   			; M024 - start
 29415 00005381 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 29416                                  	;jne	short @f		; Y: allow fail
 29417 00005387 750B                    	jne	short chard1
 29418                                  
 29419 00005389 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 29420                                  
 29421 0000538C 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 29422 00005392 7503                    	jnz	short ctrlp		; Y: 
 29423                                  ;@@:
 29424                                  chard1:					; M024 - end
 29425                                  	; MSDOS 6.0 & MSDOS 3.3
 29426                                  
 29427                                  ; Character device error handler
 29428                                  ; Same function as HARDERR
 29429                                  
 29430                                  	;or	ah,38h
 29431 00005394 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 29432                                  ctrlp:			; SS override for Allowed and EXITHOLD
 29433 00005397 368826[4B03]            	mov	[SS:ALLOWED],ah
 29434                                  
 29435                                  	; 15/03/2018
 29436 0000539C 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 29437 000053A1 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 29438 000053A6 56                              PUSH    SI
 29439                                  	;and	di,0FFh
 29440 000053A7 81E7FF00                        AND     DI,STECODE
 29441 000053AB 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 29442 000053AD E86400                          CALL    FATALC
 29443 000053B0 5E                              POP     SI
 29444                                  	;return
 29445 000053B1 C3                              RETN
 29446                                  
 29447                                  ;---------------------------------------------------------------------------
 29448                                  ;
 29449                                  ; Procedure Name : HardErr
 29450                                  ;
 29451                                  ; Hard disk error handler. Entry conditions:
 29452                                  ;	DS:BX = Original disk transfer address
 29453                                  ;	DX = Original logical sector number
 29454                                  ;	CX = Number of sectors to go (first one gave the error)
 29455                                  ;	AX = Hardware error code
 29456                                  ;	DI = Original sector transfer count	
 29457                                  ;	ES:BP = Base of drive parameters
 29458                                  ;	[READOP] = 0 for read, 1 for write
 29459                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 29460                                  ; Output:
 29461                                  ;	[FAILERR] will be set if user responded FAIL
 29462                                  ;
 29463                                  ;--------------------------------------------------------------------------
 29464                                  
 29465                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29466                                  HARDERR:
 29467                                  	; 05/05/2019 - Retro DOS v4.0
 29468                                  	; 30/07/2018
 29469                                  	; 08/07/2018 - Retro DOS v3.0
 29470 000053B2 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 29471                                          ;and	di,0FFh
 29472 000053B3 81E7FF00                	AND     DI,STECODE              ; And off status bits
 29473                                          ;CMP	DI,WRECODE		; Write Protect Error?
 29474                                  	;cmp	di,0
 29475 000053B7 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 29476 000053BA 750A                            JNZ     short NOSETWRPERR
 29477 000053BC 50                              PUSH    AX
 29478                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29479                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29480                                          ;;MOV	AL,[ES:BP+0]
 29481                                  	; 15/12/2022
 29482 000053BD 268A4600                	mov	al,[ES:BP]
 29483                                          	; 15/03/2018
 29484 000053C1 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 29485 000053C5 58                              POP     AX
 29486                                  NOSETWRPERR:
 29487 000053C6 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 29488 000053C8 01C2                            ADD     DX,AX                   ; First sector number to retry
 29489 000053CA 52                              PUSH    DX
 29490                                  	; 08/07/2018
 29491                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 29492 000053CB 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 29493 000053CF 5A                              POP     DX
 29494 000053D0 01C3                            ADD     BX,AX                   ; First address for retry
 29495 000053D2 30E4                            XOR     AH,AH                   ; Flag disk section in error
 29496                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 29497 000053D4 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 29498 000053D8 721A                            JB      SHORT ERRINT
 29499 000053DA FEC4                            INC     AH                      ; Flag for FAT
 29500                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 29501                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 29502 000053DC 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 29503 000053E0 7308                    	JAE	short TESTDIR 		; No
 29504                                  		 ; Err in FAT must force recomp of freespace
 29505                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 29506                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 29507 000053E2 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 29508 000053E8 EB0A                    	JMP	SHORT ERRINT
 29509                                  TESTDIR:
 29510 000053EA FEC4                            INC     AH
 29511                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 29512 000053EC 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 29513 000053F0 7202                            JB      SHORT ERRINT
 29514 000053F2 FEC4                            INC     AH                      ; Must be in data area
 29515                                  ERRINT:
 29516 000053F4 D0E4                            SHL     AH,1                    ; Make room for read/write bit
 29517 000053F6 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 29518                                  
 29519                                  	; 15/08/2018
 29520                                  					; SS override for allowed and EXITHOLD
 29521 000053FB 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 29522                                  
 29523                                          ;entry   FATAL
 29524                                  FATAL:
 29525                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29526                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29527                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 29528                                  	; 15/12/2022
 29529 00005400 268A4600                	MOV	AL,[ES:BP]        
 29530                                  
 29531                                  	;entry   FATAL1
 29532                                  FATAL1:  
 29533                                  	; 15/03/2018      
 29534 00005404 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 29535 00005409 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 29536                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 29537                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 29538 0000540E 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 29539 00005412 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 29540                                  
 29541                                  	; DI has the INT-24-style extended error. We now map the error code 
 29542                                  	; for this into the normalized get extended error set by using the 
 29543                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 29544                                  	; the device returned codes and leave all others beyond the look up 
 29545                                  	; table alone.
 29546                                  
 29547                                  	; 08/07/2018 - Retro DOS v3.0
 29548                                  FATALC:
 29549 00005414 E89701                  	call	SET_I24_EXTENDED_ERROR
 29550                                  	;cmp	di,0Ch
 29551 00005417 83FF0C                  	CMP	DI,error_I24_gen_failure
 29552 0000541A 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 29553 0000541C BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 29554                                  					;  Only come via GetExtendedError
 29555                                  ;** ----------------------------------------------------------------
 29556                                  ;
 29557                                  ; Entry point used by REDIRector on Network I 24 errors.
 29558                                  ;
 29559                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 29560                                  ;
 29561                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 29562                                  ;     EXITHOLD set for restore of ES:BP.
 29563                                  ; ------------------------------------------------------------------
 29564                                  	;entry	NET_I24_ENTRY
 29565                                  NET_I24_ENTRY:
 29566                                  GOT_RIGHT_CODE:
 29567 0000541F 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 29568 00005425 7404                            JZ	SHORT NoSetFail
 29569 00005427 B003                    	MOV	AL,3
 29570 00005429 EB6C                    	JMP	short FailRet
 29571                                  NoSetFail:
 29572 0000542B 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 29573 00005430 16                              PUSH	SS
 29574 00005431 07                              POP	ES
 29575                                      
 29576                                  	; Wango!!! We may need to free some user state info... In 
 29577                                  	; particular, we may have locked down a JFN for a user and he may 
 29578                                  	; NEVER return to us. Thus,we need to free it here and then 
 29579                                  	; reallocate it when we come back.
 29580                                  
 29581 00005432 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 29582 00005438 740C                    	JZ	short _NoFree
 29583 0000543A 1E                      	push	ds
 29584 0000543B 56                      	push	si
 29585 0000543C 36C536[AE05]            	LDS	SI,[SS:PJFN]
 29586 00005441 C604FF                  	MOV	BYTE [SI],0FFH
 29587 00005444 5E                      	pop	si
 29588 00005445 1F                      	pop	ds
 29589                                  
 29590                                  _NoFree:
 29591 00005446 FA                      	CLI
 29592                                  					; Prepare to play with stack
 29593 00005447 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 29594 0000544C 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 29595                                  
 29596                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29597                                  
 29598                                  	;; Extended Open hooks
 29599                                  					; AN000;IFS.I24 error disabled
 29600                                  	;test	byte [ss:EXTOPEN_ON],2
 29601 00005451 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 29602 00005457 7404                    	JZ	short i24yes		; AN000;IFS.no
 29603                                  faili24:				; AN000;
 29604 00005459 B003                    	MOV	AL,3			; AN000;IFS.fake fail
 29605 0000545B EB29                    	JMP	short passi24 		; AN000;IFS.exit
 29606                                  i24yes: 				; AN000;
 29607                                  	;; Extended Open hooks
 29608                                  
 29609 0000545D 368E16[8605]                    MOV     SS,[SS:USER_SS]
 29610 00005462 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 29611                                  
 29612                                  	;;int	24h	
 29613                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 29614                                  					; must preserve ES
 29615                                  	; 05/05/2019
 29616 00005467 26803E[1112]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 29617 0000546D 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 29618 0000546F CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 29619                                  					; must preserve ES
 29620 00005471 EB05                    	jmp	short criterr_ret_addr
 29621                                  
 29622                                  do_low_int24:
 29623                                  	; 05/05/2019
 29624                                  	; MSDOS 6.0
 29625 00005473 2EFF1E[5951]            	call    far [cs:LowInt24Addr]
 29626                                  criterr_ret_addr:
 29627 00005478 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 29628 0000547D 268C16[8605]                    MOV     [ES:USER_SS],SS
 29629 00005482 8CC5                            MOV     BP,ES
 29630 00005484 8ED5                            MOV     SS,BP
 29631                                  passi24:
 29632 00005486 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 29633 0000548B 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 29634 00005490 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 29635 00005496 FB                              STI
 29636                                  FailRet:
 29637 00005497 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 29638                                  	
 29639                                  	; 08/07/2018
 29640                                  
 29641                                  	; Triage the user's reply.
 29642                                  
 29643 0000549C 3C01                    	CMP	AL,1
 29644 0000549E 723D                    	JB	short CheckIgnore	; 0 => ignore
 29645 000054A0 7445                    	JZ	short CheckRetry	; 1 => retry
 29646 000054A2 3C03                    	CMP	AL,3			; 3 => fail
 29647 000054A4 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 29648                                  
 29649                                  	; The reply was fail. See if we are allowed to fail.
 29650                                  
 29651                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 29652                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 29653                                  	;test	byte [ss:ALLOWED],8
 29654 000054A6 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 29655 000054AC 7443                    	jz	short DoAbort	; No, do abort
 29656                                  DoFail:
 29657 000054AE B003                    	MOV	AL,3		; just in case...
 29658                                  				; AN000;EO. I24 error disabled
 29659                                  	; 05/05/2019
 29660                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 29661 000054B0 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 29662 000054B6 7505                    	jnz	short CleanUp 		; AN000;EO. no
 29663                                  	
 29664 000054B8 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 29665                                  CleanUp:
 29666 000054BD 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 29667 000054C3 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 29668                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29669                                  	;jnz	short CleanUp2
 29670                                  	;retn
 29671                                  	; 17/12/2022
 29672 000054C9 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 29673                                  CleanUp2:
 29674 000054CB 1E                      	push	ds
 29675 000054CC 56                      	push	si
 29676 000054CD 50                      	push	ax
 29677 000054CE 36A1[AA05]              	MOV	AX,[ss:SFN]
 29678 000054D2 36C536[AE05]            	LDS	SI,[ss:PJFN]
 29679 000054D7 8804                    	MOV	[SI],AL
 29680 000054D9 58                      	pop	ax
 29681 000054DA 5E                      	pop	si
 29682 000054DB 1F                      	pop	ds
 29683                                  Cleanup_retn:
 29684 000054DC C3                      	retn
 29685                                  
 29686                                  	; The reply was IGNORE. See if we are allowed to ignore.
 29687                                  
 29688                                  CheckIgnore:
 29689                                  	;test	byte [ss:ALLOWED],20h
 29690 000054DD 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 29691 000054E3 74C9                    	jz	short DoFail			 ; No, do fail
 29692 000054E5 EBD6                    	jmp	short CleanUp
 29693                                  
 29694                                  	; The reply was RETRY. See if we are allowed to retry.
 29695                                  
 29696                                  CheckRetry:
 29697                                  	;test	byte [ss:ALLOWED],10h
 29698 000054E7 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 29699 000054ED 74BF                    	jz	short DoFail			; No, do fail
 29700 000054EF EBCC                    	JMP	short CleanUp
 29701                                  
 29702                                  	; The reply was ABORT.
 29703                                  DoAbort:
 29704 000054F1 16                      	push	ss
 29705 000054F2 1F                      	pop	ds
 29706                                  
 29707 000054F3 803E[5703]00            	CMP	byte [CONSWAP],0
 29708 000054F8 7403                    	JZ	short NOSWAP2
 29709 000054FA E83CDE                  	call	SWAPBACK
 29710                                  NOSWAP2:
 29711                                  	; See if we are to truly abort. If we are in the process of aborting, 
 29712                                  	; turn this abort into a fail.
 29713                                  
 29714                                  	;test	[fAborting],0FFh
 29715                                  	;jnz	short DoFail
 29716                                  
 29717 000054FD 803E[5903]00            	cmp	byte [fAborting],0
 29718 00005502 75AA                    	JNZ	short DoFail
 29719                                  
 29720                                  	; Set return code
 29721                                  
 29722 00005504 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 29723 00005509 30C0                    	XOR	AL,AL
 29724                                  
 29725                                  	; we are truly aborting the process. Go restore information from 
 29726                                  	; the PDB as necessary.
 29727                                  
 29728 0000550B E9940D                  	jmp	exit_inner
 29729                                  
 29730                                  ;** --------------------------------------------------------------------------
 29731                                  ;
 29732                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 29733                                  ; different, then an old-style return is performed. If they are the same,
 29734                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 29735                                  ; the source of the terminate addresses.
 29736                                  ;
 29737                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 29738                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 29739                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 29740                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 29741                                  ; flag that will indicate that if any abort code is seen, we just continue the
 29742                                  ; operation. In essence, we dis-allow the abort response.
 29743                                  ;
 29744                                  ; output:   none.
 29745                                  ; ----------------------------------------------------------------------------
 29746                                  
 29747                                  	;entry	reset_environment
 29748                                  	
 29749                                  reset_environment:
 29750                                  	; 30/07/2018 - Retro DOS v3.0
 29751                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 29752                                  
 29753                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 29754                                  
 29755 0000550E 1E                      	PUSH	DS			; save PDB of process
 29756                                  
 29757                                  	; There are no critical sections in force. Although we may enter 
 29758                                  	; here with critical sections locked down, they are no longer 
 29759                                  	; relevant. We may safely free all allocated resources.
 29760                                  
 29761 0000550F B482                    	MOV	AH,82h
 29762                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 29763                                  	;int	2Ah 	
 29764 00005511 CD2A                    	INT	int_IBM
 29765                                  
 29766                                  					; SS override
 29767 00005513 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 29768                                  
 29769                                  					; DOS 4.00 doesn't need it
 29770                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 29771                                  					; Allow REDIR to clear some stuff
 29772                                  					; On process exit.
 29773 00005519 B82211                  	mov     ax, 1122h
 29774 0000551C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 29775                                  			; SS = DOS CS
 29776                                  	;mov	al,22h	
 29777 0000551E B022                    	MOV	AL,int_terminate
 29778 00005520 E8E1B9                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 29779                                  
 29780 00005523 59                      	POP	CX			; get ThisPDB
 29781 00005524 06                      	push	es
 29782 00005525 53                      	push	bx			; save return address
 29783                                  
 29784 00005526 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 29785 0000552B 8EDB                    	MOV	DS,BX
 29786 0000552D A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 29787                                  
 29788                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 29789                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 29790                                  	; is not Exit_keep_process
 29791                                  	
 29792 00005530 39D8                    	CMP	AX,BX
 29793 00005532 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 29794 00005534 39CB                    	CMP	BX,CX
 29795 00005536 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 29796 00005538 50                      	PUSH	AX			; save parent
 29797                                  
 29798                                  					; SS override
 29799                                  	;cmp	byte [SS:EXIT_TYPE],3
 29800 00005539 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 29801 0000553F 7406                    	JZ	short reset_to_parent 	; keeping this process
 29802                                  
 29803                                  	; We are truly removing a process. Free all allocation blocks 
 29804                                  	; belonging to this PDB
 29805                                  
 29806                                  	;invoke	arena_free_process
 29807 00005541 E8960D                  	call	arena_free_process
 29808                                  
 29809                                  	; Kill off remainder of this process. Close file handles and signal 
 29810                                  	; to relevant network folks that this process is dead. Remember that 
 29811                                  	; CurrentPDB is STILL the current process!
 29812                                  
 29813                                  	;invoke	DOS_ABORT
 29814 00005544 E8E3D9                  	call	DOS_ABORT
 29815                                  
 29816                                  reset_to_parent:
 29817                                  					; SS override
 29818 00005547 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 29819                                  
 29820                                  reset_return:				; come here for normal return
 29821                                  	;Context DS			; DS is used to refer to DOSDATA  
 29822 0000554C 16                      	push	ss
 29823 0000554D 1F                      	pop	ds	
 29824                                  
 29825 0000554E B0FF                    	MOV	AL,-1
 29826                                  
 29827                                  	; make sure that everything is clean In this case ignore any errors, 
 29828                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 29829                                  
 29830                                  	;EnterCrit critDisk
 29831 00005550 E835BE                  	call	ECritDisk
 29832                                  	;invoke	FLUSHBUF
 29833 00005553 E8B105                  	call	FLUSHBUF
 29834                                  	;LeaveCrit critDisk
 29835 00005556 E84ABE                  	call	LCritDisk
 29836                                  
 29837                                  	; Decrement open ref. count if we had done a virtual open earlier.
 29838                                  
 29839 00005559 E87AF7                  	call	CHECK_VIRT_OPEN
 29840 0000555C FA                      	CLI
 29841 0000555D C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 29842 00005562 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 29843 00005567 C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 29844 0000556C 8F06[8005]              	POP	WORD [EXITHOLD]
 29845 00005570 8F06[8205]              	POP	WORD [EXITHOLD+2]
 29846                                  
 29847                                  	; Snake into multitasking... Get stack from CurrentPDB person
 29848                                  
 29849 00005574 8E1E[3003]              	MOV	DS,[CurrentPDB]
 29850 00005578 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 29851 0000557C 8B262E00                	MOV	SP,[PDB.USER_STACK]
 29852                                  
 29853 00005580 E811AF                  	call	restore_world
 29854                                  
 29855                                  	; 05/05/2019
 29856 00005583 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 29857                                  
 29858                                  	; MSDOS 6.0
 29859 00005584 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 29860 00005585 8CD8                    	mov	ax,ds			; and not on stack.
 29861                                  	;getdseg <ds>			; ds -> dosdata
 29862 00005587 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 29863 0000558C A3[0A0D]                	mov	[TEMPSEG],ax
 29864 0000558F 58                      	pop	ax
 29865                                  					; set up ds to DOSDATA
 29866                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 29867 00005590 A3[8405]                	mov	[USER_SP],ax
 29868                                  
 29869 00005593 58                      	POP	AX			; suck off CS:IP of interrupt...
 29870 00005594 58                      	POP	AX
 29871 00005595 58                      	POP	AX
 29872                                  
 29873                                  ; M011 : BEGIN
 29874                                  
 29875                                  	; MSDOS 3.3
 29876                                  ;	MOV	AX,0F202h	; STI
 29877                                  
 29878                                  	; MSDOS 6.0
 29879 00005596 9F                      	LAHF
 29880 00005597 86E0                    	XCHG	AH,AL
 29881 00005599 2402                    	AND	AL,2
 29882 0000559B B4F2                    	MOV	AH,0F2h
 29883                                  
 29884                                  ; M011 : END
 29885                                  
 29886                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29887 0000559D 50                      	PUSH	AX
 29888                                   
 29889                                  	;PUSH	word [CS:EXITHOLD+2]
 29890                                  	;PUSH	word [CS:EXITHOLD]
 29891                                  	
 29892                                  	; MSDOS 6.0
 29893 0000559E FF36[8205]              	PUSH	word [EXITHOLD+2]
 29894 000055A2 FF36[8005]              	PUSH	word [EXITHOLD]
 29895                                  
 29896                                  	;MOV	AX,[CS:USER_SP]
 29897                                  
 29898                                  	; MSDOS 6.0
 29899 000055A6 A1[8405]                	MOV	AX,[USER_SP]
 29900 000055A9 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 29901                                  
 29902 000055AD CF                      	IRET			; Long return back to user terminate address
 29903                                  
 29904                                  ;---------------------------------------------------------------------------
 29905                                  ;
 29906                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 29907                                  ;
 29908                                  ; This routine handles extended error codes.
 29909                                  ; Input : DI = error code from device
 29910                                  ; Output: All EXTERR fields are set
 29911                                  ;
 29912                                  ;--------------------------------------------------------------------------
 29913                                  
 29914                                  SET_I24_EXTENDED_ERROR:
 29915 000055AE 50                      	PUSH	AX
 29916                                  					; ErrMap24End is in DOSDATA
 29917 000055AF B8[BB0E]                	MOV	AX,ErrMap24End
 29918 000055B2 2D[AB0E]                	SUB	AX,ErrMap24
 29919                                  					; Change to dosdata to access 
 29920                                  					; ErrMap24 and EXTERR -SR
 29921                                  	; 05/05/2019 - Retro DOS v4.0
 29922                                  	
 29923                                  	; MSDOS 6.0
 29924 000055B5 1E                      	push	ds
 29925                                  	;getdseg <ds>			; ds ->dosdata
 29926 000055B6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29927                                  
 29928                                  	; AX is the index of the first unavailable error. Do not translate 
 29929                                  	; if greater or equal to AX.
 29930                                  
 29931 000055BB 39C7                    	CMP	DI,AX
 29932 000055BD 89F8                    	MOV	AX,DI
 29933 000055BF 7306                    	JAE	short NoTrans
 29934                                  
 29935                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 29936 000055C1 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 29937 000055C5 30E4                    	XOR	AH,AH
 29938                                  NoTrans:
 29939                                  	;MOV	[CS:EXTERR],AX
 29940 000055C7 A3[2403]                	mov	[EXTERR],AX
 29941 000055CA 1F                      	pop	ds
 29942                                  	;assume	ds:nothing
 29943 000055CB 58                      	POP	AX
 29944                                  
 29945                                  	; Now Extended error is set correctly. Translate it to get correct 
 29946                                  	; error locus class and recommended action.
 29947                                  
 29948 000055CC 56                      	PUSH	SI
 29949                                  					; ERR_TABLE_24 is in DOSCODE 
 29950 000055CD BE[5B0E]                	MOV	SI,ERR_TABLE_24
 29951 000055D0 E8F4B0                  	call	CAL_LK			; Set other extended error fields
 29952 000055D3 5E                      	POP	SI
 29953 000055D4 C3                      	retn
 29954                                  
 29955                                  ;============================================================================
 29956                                  ; FAT.ASM, MSDOS 6.0, 1991
 29957                                  ;============================================================================
 29958                                  ; 30/07/2018 - Retro DOS v3.0
 29959                                  ; 20/05/2019 - Retro DOS v4.0
 29960                                  
 29961                                  ;	TITLE	FAT - FAT maintenance routines
 29962                                  ;	NAME	FAT
 29963                                  
 29964                                  ;**	FAT.ASM
 29965                                  ;----------------------------------------------------------------------------
 29966                                  ;	Low level local device routines for performing disk change sequence,
 29967                                  ;	setting cluster validity, and manipulating the FAT
 29968                                  ;
 29969                                  ;	IsEof
 29970                                  ;	UNPACK
 29971                                  ;	PACK
 29972                                  ;	MAPCLUSTER
 29973                                  ;	FATREAD_SFT
 29974                                  ;	FATREAD_CDS
 29975                                  ;	FAT_operation
 29976                                  ;
 29977                                  ;	Revision history:
 29978                                  ;
 29979                                  ;	  AN000  version Jan. 1988
 29980                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 29981                                  ;
 29982                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 29983                                  ;	       from CL0FATENTRY rather than disk.
 29984                                  
 29985                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 29986                                  
 29987                                  ;Break <IsEOF - check the quantity in BX for EOF>
 29988                                  ;----------------------------------------------------------------------------
 29989                                  ;
 29990                                  ; Procedure Name : IsEOF
 29991                                  ;
 29992                                  ; IsEOF - check the fat value in BX for eof.
 29993                                  ;
 29994                                  ;   Inputs:	ES:BP point to DPB
 29995                                  ;		BX has fat value
 29996                                  ;   Outputs:	JAE eof
 29997                                  ;   Registers modified: none
 29998                                  ;
 29999                                  ;---------------------------------------------------------------------------
 30000                                  
 30001                                  IsEOF:
 30002                                  	;cmp	word [es:bp+0Dh],0FF6h
 30003 000055D5 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 30004 000055DB 730B                    	JAE	short EOF16			; yes, check for eof there
 30005                                  
 30006                                  ;J.K. 8/27/86
 30007                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 30008                                  ;of any media that has "F0"(Other) as a MediaByte.
 30009                                  ;Hopely, this does not create any side effect for those who may use any value
 30010                                  ;other than "FF8-FFF" as an EOF for their own file.
 30011                                  
 30012 000055DD 81FBF00F                	cmp	bx,0FF0h
 30013 000055E1 7404                    	je	short IsEOF_other
 30014                                  
 30015 000055E3 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 30016                                  IsEOF_other:
 30017 000055E7 C3                      	retn
 30018                                  EOF16:
 30019 000055E8 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 30020 000055EB C3                      	retn
 30021                                  
 30022                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 30023                                  
 30024                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 30025                                  ;---------------------------------------------------------------------------
 30026                                  ;
 30027                                  ; Procedur Name : UNPACK
 30028                                  ;
 30029                                  ; Inputs:
 30030                                  ;	BX = Cluster number (may be full 16-bit quantity)
 30031                                  ;	ES:BP = Base of drive parameters
 30032                                  ; Outputs:
 30033                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 30034                                  ;	Zero set means DI=0 (free cluster)
 30035                                  ;	Carry set means error (currently user FAILed to I 24)
 30036                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 30037                                  ;
 30038                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 30039                                  ;
 30040                                  ;----------------------------------------------------------------------------
 30041                                  	
 30042                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30043                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 30044                                  
 30045                                  	; 20/05/2019 - Retro DOS v4.0
 30046                                  UNPACK:
 30047                                  	; MSDOS 6.0			; M014 - Start
 30048 000055EC 09DB                    	or	bx,bx			; Q: are we unpacking cluster 0
 30049 000055EE 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 30050 000055F0 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 30051 000055F4 09FF                    	or	di,di 			; return z if di=0
 30052 000055F6 C3                      	retn				; done
 30053                                  up_cont:				; M014 - End
 30054                                  	; MSDOS 3.3 & MSDOS 6.0
 30055                                  	;cmp	bx,[es:bp+0Dh]
 30056 000055F7 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 30057 000055FB 7726                    	JA	short HURTFAT
 30058 000055FD E8DC00                  	CALL	MAPCLUSTER
 30059 00005600 721E                    	jc	short _DoContext
 30060 00005602 8B3D                    	MOV	DI,[DI]
 30061 00005604 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 30062 00005606 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 30063 0000560A 81FEF60F                	CMP	SI,4096-10
 30064 0000560E 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 30065 00005610 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 30066 00005612 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 30067                                  High12:
 30068 00005614 D1EF                    	SHR	DI,1
 30069 00005616 D1EF                    	SHR	DI,1
 30070 00005618 D1EF                    	SHR	DI,1
 30071 0000561A D1EF                    	SHR	DI,1
 30072                                  Unpack12:
 30073 0000561C 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 30074                                  _DoContext:
 30075 00005620 16                      	PUSH	SS
 30076 00005621 1F                      	POP	DS
 30077 00005622 C3                      	retn
 30078                                  HURTFAT:
 30079                                  	;;mov	word [es:bp+1Eh],0FFFFh
 30080                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30081 00005623 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 30082 00005629 50                      	PUSH	AX
 30083 0000562A B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 30084                                  
 30085                                  ;hkn; SS override
 30086 0000562C 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 30087                                  ;
 30088                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 30089                                  ;
 30090 00005632 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 30091 00005635 E8C8FD                  	call	FATAL
 30092 00005638 3C03                    	CMP	AL,3
 30093 0000563A F8                      	CLC
 30094 0000563B 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 30095 0000563D F9                      	STC				; User said FAIL
 30096                                  OKU_RET:
 30097 0000563E 58                      	POP	AX
 30098                                  hurtfat_retn:
 30099 0000563F C3                      	retn
 30100                                  
 30101                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 30102                                  
 30103                                  ;Break	<PACK -- PACK FAT ENTRIES>
 30104                                  ;----------------------------------------------------------------------------
 30105                                  ;
 30106                                  ; Procedure Name : PACK
 30107                                  ;
 30108                                  ; Inputs:
 30109                                  ;	BX = Cluster number
 30110                                  ;	DX = Data
 30111                                  ;	ES:BP = Pointer to drive DPB
 30112                                  ; Outputs:
 30113                                  ;	The data is stored in the FAT at the given cluster.
 30114                                  ;	SI,DX,DI all destroyed
 30115                                  ;	Carry set means error (currently user FAILed to I 24)
 30116                                  ;	No other registers affected
 30117                                  ;
 30118                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 30119                                  ;
 30120                                  ;---------------------------------------------------------------------------
 30121                                  
 30122                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30123                                  	; 20/05/2019 - Retro DOS v4.0
 30124                                  PACK:
 30125                                  	; MSDOS 6.0			; M014 - start
 30126 00005640 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 30127 00005642 7505                    	jnz	short p_cont		; N: proceed with normal pack
 30128 00005644 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 30129 00005648 C3                      	retn				; done
 30130                                  p_cont:					; M014 - end
 30131                                  	; MSDOS 3.3 & MSDOS 6.0
 30132 00005649 E89000                  	CALL	MAPCLUSTER
 30133 0000564C 72D2                    	JC	short _DoContext
 30134 0000564E 8B35                    	MOV	SI,[DI]
 30135 00005650 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 30136 00005652 51                      	PUSH	CX			; move data to upper 12 bits
 30137 00005653 B104                    	MOV	CL,4
 30138 00005655 D3E2                    	SHL	DX,CL
 30139 00005657 59                      	POP	CX
 30140 00005658 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 30141 0000565B EB14                    	JMP	SHORT PACKIN
 30142                                  ALIGNED:
 30143                                  	;cmp	word [es:bp+0Dh],0FF6h
 30144 0000565D 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 30145 00005663 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 30146 00005665 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30147 00005669 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30148 0000566D EB02                    	JMP	SHORT PACKIN		; MZ go store
 30149                                  Pack16:
 30150 0000566F 31F6                    	XOR	SI,SI			; MZ no original data
 30151                                  PACKIN:
 30152 00005671 09D6                    	OR	SI,DX
 30153 00005673 8935                    	MOV	[DI],SI
 30154                                  
 30155                                  ;hkn; SS override
 30156 00005675 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30157                                  	; MSDOS 6.0
 30158 0000567A F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30159                                  					;LB. if already dirty		  ;AN000;
 30160 0000567E 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30161                                  	; 10/06/2019
 30162 00005680 E88C05                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30163                                  	
 30164                                  	;or	byte [si+5],40h
 30165 00005683 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30166                                  yesdirty11:				;LB.				;AN000;
 30167                                  ;hkn; SS override
 30168 00005687 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30169                                  ;hkn; SS is DOSDATA
 30170 0000568D 16                      	push	ss
 30171 0000568E 1F                      	pop	ds
 30172 0000568F 74AE                    	jz	short hurtfat_retn	; Carry clear
 30173 00005691 50                      	PUSH	AX
 30174 00005692 53                      	PUSH	BX
 30175 00005693 51                      	PUSH	CX
 30176 00005694 A1[8E05]                	MOV	AX,[CLUSSAVE]
 30177 00005697 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30178                                  	;;add	si,16 ; MSDOS 3.3
 30179                                  	;add	si,20 ; MSDOS 6.0
 30180 0000569B 83C614                  	ADD	SI,BUFINSIZ
 30181 0000569E 8824                    	MOV	[SI],AH
 30182                                  ;hkn; SS is DOSDATA
 30183                                  	;Context DS
 30184 000056A0 16                      	push	ss
 30185 000056A1 1F                      	pop	ds
 30186                                  	
 30187 000056A2 50                      	PUSH	AX
 30188                                  	
 30189                                  	; MSDOS 6.0
 30190 000056A3 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 30191 000056A7 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 30192                                  
 30193                                  	; MSDOS 3.3 & MSDOS 6.0
 30194 000056AB 8B16[9005]              	MOV	DX,[CLUSSEC]
 30195 000056AF BE0100                  	MOV	SI,1
 30196 000056B2 30C0                    	XOR	AL,AL
 30197 000056B4 E85403                  	call	GETBUFFRB
 30198 000056B7 58                      	POP	AX
 30199 000056B8 721C                    	JC	short POPP_RET
 30200 000056BA C53E[E205]              	LDS	DI,[CURBUF]
 30201                                  	
 30202                                  	; MSDOS 6.0
 30203 000056BE F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 30204                                  					;LB. if already dirty		  ;AN000;
 30205 000056C2 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 30206 000056C4 E84805                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 30207                                  	
 30208                                  	;or	byte [di+5],40h
 30209 000056C7 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 30210                                  yesdirty12:
 30211                                  	;;add	di,16
 30212                                  	;add	di,20 ; MSDOS 6.0
 30213 000056CB 83C714                  	ADD	DI,BUFINSIZ
 30214 000056CE 4F                      	DEC	DI
 30215                                  	;add	di,[es:bp+2]
 30216 000056CF 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 30217 000056D3 8805                    	MOV	[DI],AL
 30218 000056D5 F8                      	CLC
 30219                                  POPP_RET:
 30220 000056D6 16                      	PUSH	SS
 30221 000056D7 1F                      	POP	DS
 30222 000056D8 59                      	POP	CX
 30223 000056D9 5B                      	POP	BX
 30224 000056DA 58                      	POP	AX
 30225 000056DB C3                      	retn
 30226                                  
 30227                                  ; 31/07/2018 - Retro DOS v3.0
 30228                                  
 30229                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 30230                                  ;---------------------------------------------------------------------------
 30231                                  ;
 30232                                  ; Procedure Name : MAPCLUSTER
 30233                                  ;
 30234                                  ; Inputs:
 30235                                  ;	ES:BP Points to DPB
 30236                                  ;	BX Is cluster number
 30237                                  ; Function:
 30238                                  ;	Get a pointer to the cluster
 30239                                  ; Outputs:
 30240                                  ;	DS:DI Points to contents of FAT for given cluster
 30241                                  ;	DS:SI Points to start of buffer
 30242                                  ;	Zero Not set if cluster data is in high 12 bits of word
 30243                                  ;	Zero set if cluster data is in low 12 or 16 bits
 30244                                  ;	Carry set if failed.
 30245                                  ; SI is destroyed.
 30246                                  ;
 30247                                  ;---------------------------------------------------------------------------
 30248                                  
 30249                                  	; 20/05/2019 - Retro DOS v4.0
 30250                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 30251                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30252                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 30253                                  
 30254                                  MAPCLUSTER:
 30255                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 30256 000056DC C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 30257                                  	;SAVE	<AX,BX,CX,DX>
 30258 000056E1 50                      	push	ax
 30259 000056E2 53                      	push	bx
 30260 000056E3 51                      	push	cx
 30261 000056E4 52                      	push	dx
 30262 000056E5 89D8                    	MOV	AX,BX			; AX = BX
 30263 000056E7 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 30264 000056ED 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 30265 000056EF D1E8                    	SHR	AX,1			; AX = BX/2
 30266                                  Map16:	
 30267                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 30268 000056F1 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 30269                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30270 000056F3 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 30271 000056F5 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 30272 000056F7 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 30273                                  
 30274                                  ;IF FastDiv
 30275                                  ;
 30276                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 30277                                  ; case and apply a really fast algorithm to get the desired results
 30278                                  ;
 30279                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 30280                                  ; Fast method takes 39+20*4=119
 30281                                  ;
 30282                                  ; This saves a bunch.
 30283                                  
 30284 000056FB 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 30285 000056FF 7510                    	jne	short _DoDiv		; 4  for no jump
 30286 00005701 89C2                    	MOV	DX,AX			; 2  get set for remainder
 30287 00005703 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 30288 00005707 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 30289                                  	; MDOS 3.3
 30290                                  	;shr	al,1	
 30291                                  	; MDOS 6.0
 30292 00005709 D1EF                    	shr	di,1			; 2
 30293 0000570B D0D8                    	rcr	al,1			; 2
 30294                                  	; MDOS 3.3 (& MSDOS 6.0)
 30295 0000570D 30E4                    	xor	ah,ah			; 3
 30296 0000570F EB04                    	jmp	short DivDone		; 16
 30297                                  _DoDiv:
 30298                                  ;ENDIF
 30299                                  	; MSDOS 3.3
 30300                                  	;xor	dx,dx
 30301                                  	; MSDOS 6.0
 30302 00005711 89FA                    	mov	dx,di			; 2
 30303                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 30304 00005713 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 30305                                  ;IF FastDiv
 30306                                  DivDone:
 30307                                  ;ENDIF
 30308                                  	;add	ax,[es:bp+6]
 30309 00005715 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 30310 00005719 49                      	DEC	CX			; CX is sector size - 1
 30311                                  	;SAVE	<AX,DX,CX>
 30312 0000571A 50                      	push	ax
 30313 0000571B 52                      	push	dx
 30314 0000571C 51                      	push	cx
 30315 0000571D 89C2                    	MOV	DX,AX
 30316                                  
 30317                                  	; MSDOS 6.0
 30318 0000571F C706[0706]0000          	MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 30319                                  	; MDOS 3.3 (& MSDOS 6.0)
 30320 00005725 30C0                    	XOR	AL,AL
 30321 00005727 BE0100                  	MOV	SI,1
 30322                                  	;invoke	GETBUFFRB
 30323 0000572A E8DE02                  	call	GETBUFFRB
 30324                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 30325 0000572D 59                      	pop	cx
 30326 0000572E 58                      	pop	ax
 30327 0000572F 5A                      	pop	dx
 30328 00005730 7257                    	JC	short MAP_POP
 30329                                  
 30330 00005732 C536[E205]              	LDS	SI,[CURBUF]
 30331                                  	;;lea	di,[si+16]
 30332                                  	;lea	di,[si+20] ; MSDOS 6.0
 30333 00005736 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30334 00005739 01C7                    	ADD	DI,AX
 30335 0000573B 39C8                    	CMP	AX,CX
 30336 0000573D 7537                    	JNZ	short MAPRET
 30337 0000573F 8A05                    	MOV	AL,[DI]
 30338                                  	;Context DS		 	;hkn; SS is DOSDATA
 30339 00005741 16                      	push	ss
 30340 00005742 1F                      	pop	ds	
 30341 00005743 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 30342 00005747 A2[8E05]                	MOV	[CLUSSAVE],AL
 30343 0000574A 8916[9005]              	MOV	[CLUSSEC],DX
 30344                                  	; MSDOS 6.0
 30345 0000574E C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 30346 00005754 42                      	INC	DX
 30347 00005755 C706[0706]0000          	MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 30348                                  	; MDOS 3.3 (& MSDOS 6.0)
 30349 0000575B 30C0                    	XOR	AL,AL
 30350 0000575D BE0100                  	MOV	SI,1
 30351                                  	;invoke	GETBUFFRB
 30352 00005760 E8A802                  	call	GETBUFFRB
 30353 00005763 7224                    	JC	short MAP_POP
 30354 00005765 C536[E205]              	LDS	SI,[CURBUF]
 30355 00005769 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30356 0000576C 8A05                    	MOV	AL,[DI]
 30357                                  	;Context DS			;hkn; SS is DOSDATA
 30358 0000576E 16                      	push	ss
 30359 0000576F 1F                      	pop	ds
 30360 00005770 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 30361                                  
 30362                                  ;hkn; CLUSSAVE is in DOSDATA
 30363 00005773 BF[8E05]                	MOV	DI,CLUSSAVE
 30364                                  MAPRET:
 30365                                  	;RESTORE <DX,CX,BX>
 30366 00005776 5A                      	pop	dx
 30367 00005777 59                      	pop	cx
 30368 00005778 5B                      	pop	bx
 30369 00005779 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 30370 0000577B 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 30371 00005781 7302                    	JAE	short MapSet		; MZ no, set flags
 30372 00005783 89D8                    	MOV	AX,BX
 30373                                  MapSet:
 30374 00005785 A801                    	TEST	AL,1			; set zero flag if not on boundary
 30375                                  	;RESTORE <AX>
 30376 00005787 58                      	pop	ax
 30377 00005788 C3                      	retn
 30378                                  
 30379                                  MAP_POP:
 30380                                  	;RESTORE <DX,CX,BX,AX>
 30381 00005789 5A                      	pop	dx
 30382 0000578A 59                      	pop	cx
 30383 0000578B 5B                      	pop	bx
 30384 0000578C 58                      	pop	ax
 30385                                  fatread_sft_retn: ; 17/12/2022
 30386 0000578D C3                      	retn
 30387                                  
 30388                                  ; 20/05/2019 - Retro DOS v4.0
 30389                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 30390                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30391                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 30392                                  
 30393                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 30394                                  ;----------------------------------------------------------------------------
 30395                                  ;
 30396                                  ; Procedure Name : FATREAD_SFT
 30397                                  ;
 30398                                  ; Inputs:
 30399                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 30400                                  ;		giving a NET SFT will produce system crashing results).
 30401                                  ;	DS DOSDATA
 30402                                  ; Function:
 30403                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 30404                                  ;	if disk changed.
 30405                                  ;	In other respects, same as FATREAD_CDS.
 30406                                  ;	(note ES:DI destroyed!)
 30407                                  ; Outputs:
 30408                                  ;	Carry set if error (currently user FAILed to I 24)
 30409                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 30410                                  ;	as far as invalidating curdir_ID is concerned.
 30411                                  ;	Since getting a true disk changed on this call is a screw up
 30412                                  ;	anyway, that's the way it goes.
 30413                                  ;
 30414                                  ;---------------------------------------------------------------------------
 30415                                  
 30416                                  FATREAD_SFT:
 30417 0000578E 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 30418                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30419                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30420                                  	; 15/12/2022
 30421 00005792 268A4600                	mov	AL,[ES:BP]
 30422 00005796 A2[7605]                	MOV	[THISDRV],AL
 30423 00005799 E8DFAE                  	call	GOTDPB			;Set THISDPB
 30424                                  	;CALL	FAT_GOT_DPB
 30425                                  	; 17/12/2022
 30426 0000579C EB78                    	jmp	FAT_GOT_DPB
 30427                                  ;fatread_sft_retn:
 30428                                  	;retn
 30429                                  
 30430                                  ;----------------------------------------------------------------------------
 30431                                  ;
 30432                                  ; Procedure Name : FATREAD_CDS
 30433                                  ;
 30434                                  ; Inputs:
 30435                                  ;	DS:DOSDATA
 30436                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 30437                                  ;		giving a NET or NUL CDS will produce system crashing results).
 30438                                  ; Function:
 30439                                  ;	If disk may have been changed, media is determined and buffers are
 30440                                  ;	flagged invalid. If not, no action is taken.
 30441                                  ; Outputs:
 30442                                  ;	ES:BP = Drive parameter block
 30443                                  ;	THISDPB = ES:BP
 30444                                  ;	THISDRV set
 30445                                  ;	Carry set if error (currently user FAILed to I 24)
 30446                                  ; DS preserved , all other registers destroyed
 30447                                  ;
 30448                                  ;---------------------------------------------------------------------------
 30449                                  
 30450                                  	; 20/05/2019 - Retro DOS v4.0
 30451                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 30452                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30453                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 30454                                  
 30455                                  FATREAD_CDS:
 30456 0000579E 06                      	PUSH	ES
 30457 0000579F 57                      	PUSH	DI
 30458                                  	;les	bp,[es:di+45h]
 30459 000057A0 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 30460                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30461                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30462                                  	; 15/12/2022
 30463 000057A4 268A4600                	mov	AL,[ES:BP]
 30464 000057A8 A2[7605]                	MOV	[THISDRV],AL
 30465 000057AB E8CDAE                  	call	GOTDPB			;Set THISDPB
 30466 000057AE E86500                  	CALL	FAT_GOT_DPB
 30467 000057B1 5F                      	POP	DI			;Get back CDS pointer
 30468 000057B2 07                      	POP	ES
 30469 000057B3 72D8                    	jc	short fatread_sft_retn
 30470 000057B5 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 30471                                  
 30472                                  ;	Media changed. We now need to find all CDS structures which use this
 30473                                  ;	DPB and invalidate their ID pointers.
 30474                                  
 30475                                  MED_CHANGE:
 30476 000057B7 31C0                    	XOR	AX,AX
 30477 000057B9 48                      	DEC	AX			; AX = -1
 30478 000057BA 1E                      	PUSH	DS
 30479 000057BB 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 30480 000057BF 30ED                    	XOR	CH,CH			; CX is number of structures
 30481                                  	;lds	si,[es:di+45h]
 30482 000057C1 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 30483                                  
 30484                                  ;hkn; SS override
 30485                                  
 30486                                  ;	Find all CDSs with this DevPtr
 30487                                  ;
 30488                                  ;	(ax) = -1
 30489                                  ;	(ds:si) = DevPtr
 30490                                  
 30491 000057C5 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 30492                                  frcd20: 
 30493                                  	;;test	word [es:di+43h],8000h
 30494                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 30495 000057CA 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 30496 000057CF 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 30497                                  
 30498                                  	; MSDOS 3.3
 30499                                  	;push	es
 30500                                  	;push	di
 30501                                  	;les	di,[es:di+45h]
 30502                                  	;;les	di,[ES:DI+curdir.devptr]
 30503                                  	;call	POINTCOMP
 30504                                  	;pop	di
 30505                                  	;pop	es
 30506                                  	;jnz	short frcd25
 30507                                  
 30508                                  	; MSDOS 6.0
 30509 000057D1 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 30510 000057D5 7512                    	jne	short frcd25		; no match
 30511 000057D7 8CDB                    	mov	bx,ds
 30512 000057D9 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 30513 000057DD 750A                    	jne	short frcd25		; CDS not for this drive
 30514                                  
 30515                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30516                                  	;test	[es:di+49h],ax
 30517 000057DF 26854549                	test	[ES:DI+curdir.ID],AX
 30518 000057E3 7404                    	JZ	short frcd25		; If root (0), leave root
 30519                                  	;mov	[es:di+49h],ax
 30520 000057E5 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 30521                                  frcd25:	
 30522                                  	;;add	di,81  ; MSDOS 3.3
 30523                                  	;add	di,88  ; MSDOS 6.0	 
 30524 000057E9 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 30525 000057EC E2DC                    	LOOP	frcd20
 30526 000057EE 1F                      	POP	DS
 30527                                  NO_CHANGE:
 30528 000057EF C42E[8A05]              	LES	BP,[THISDPB]
 30529 000057F3 F8                      	CLC
 30530 000057F4 C3                      	retn
 30531                                  
 30532                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 30533                                  ;----------------------------------------------------------------------------
 30534                                  ;
 30535                                  ; Procedure Name : FAT_operation
 30536                                  ;
 30537                                  ;----------------------------------------------------------------------------
 30538                                  
 30539                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30540                                  
 30541                                  FAT_operation:
 30542                                  	; 31/07/2018 - Retro DOS v3.0
 30543                                  FATERR:
 30544                                  	;mov	word [es:bp+1Eh],-1
 30545                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 30546 000057F5 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 30547                                  					; Err in FAT must force recomp of freespace
 30548                                  	;and	di,0FFh
 30549 000057FB 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 30550                                  	;mov	byte [ALLOWED],18h
 30551 000057FF C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30552                                  	;mov	ah,1Ah
 30553 00005804 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 30554 00005806 A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 30555 00005809 E8F8FB                  	call	FATAL1
 30556 0000580C C42E[8A05]              	LES	BP,[THISDPB]
 30557 00005810 3C03                    	CMP	AL,3
 30558 00005812 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 30559 00005814 F9                      	STC				; User said FAIL
 30560 00005815 C3                      	retn
 30561                                  
 30562                                  FAT_GOT_DPB:
 30563                                  	;Context DS			;hkn; SS is DOSDATA
 30564 00005816 16                      	push	ss			
 30565 00005817 1F                      	pop	ds
 30566                                  	;mov	al,0Fh
 30567 00005818 B00F                    	MOV	AL,DMEDHL
 30568                                  	;mov	ah,[es:bp+1]
 30569 0000581A 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 30570 0000581E A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 30571 00005821 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 30572 00005826 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30573                                  	;;mov	al,[es:bp+16h]
 30574                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 30575 0000582C 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30576 00005830 A2[6703]                	MOV	[CALLMED],AL
 30577 00005833 06                      	PUSH	ES
 30578 00005834 1E                      	PUSH	DS
 30579                                  
 30580                                  ;hkn; DEVCALL is in DOSDATA
 30581 00005835 BB[5A03]                	MOV	BX,DEVCALL
 30582                                  	;;lds	si,[es:bp+12h]
 30583                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 30584 00005838 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 30585 0000583C 07                      	POP	ES			; ES:BX Points to call header
 30586 0000583D E8B5EE                  	call	DEVIOCALL2
 30587                                  	;Context DS		 	;hkn; SS is DOSDATA
 30588 00005840 16                      	push	ss
 30589 00005841 1F                      	pop	ds
 30590 00005842 07                      	POP	ES			; Restore ES:BP
 30591 00005843 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30592                                  	;test	di,8000h
 30593                                  	;jnz	short FATERR
 30594 00005847 09FF                    	or	di,di
 30595 00005849 78AA                    	js	short FATERR		; have error
 30596 0000584B 30E4                    	XOR	AH,AH
 30597                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 30598                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 30599 0000584D 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 30600 00005851 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 30601                                  ; See if we had changed volume id by creating one on the diskette
 30602 00005854 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 30603 00005858 7508                    	jnz	short CHECK_BYT
 30604 0000585A C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 30605 0000585F E9A600                  	jmp	GOGETBPB		; Need to get device driver to read in
 30606                                  					; new volume label.
 30607                                  CHECK_BYT:
 30608 00005862 0A26[6803]              	OR	AH,[CALLRBYT]
 30609                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30610                                  	;JMP	short NEWDSK
 30611                                  	; 17/12/2022
 30612 00005866 7864                    	js	short NEWDSK
 30613                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30614                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30615                                  	;JMP	short NEWDSK
 30616                                  
 30617                                  CHECK_ZR:
 30618 00005868 743C                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 30619 0000586A F8                      	CLC
 30620 0000586B C3                      	retn				; If Media not changed (NZ)
 30621                                  
 30622                                  DISK_CHNG_ERR:
 30623 0000586C 06                      	PUSH	ES
 30624 0000586D 55                      	PUSH	BP
 30625                                  	;;les	bp,[es:bp+12h]
 30626                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 30627 0000586E 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 30628                                  	;;test	word [es:bp+4],800h
 30629                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 30630 00005872 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 30631 00005877 5D                      	POP	BP
 30632 00005878 07                      	POP	ES
 30633 00005879 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 30634 0000587B 1E                      	PUSH	DS			; Save buffer pointer for ignore
 30635 0000587C 57                      	PUSH	DI
 30636 0000587D 16                      	push	ss			;hkn; SS is DOSDATA
 30637 0000587E 1F                      	pop	ds
 30638                                  	;mov	byte [ALLOWED],18h
 30639 0000587F C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30640 00005884 06                      	PUSH	ES
 30641 00005885 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 30642 00005889 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 30643 0000588D 07                      	POP	ES
 30644 0000588E 893E[2803]              	MOV	[EXTERRPT],DI
 30645                                  	;mov	ax,0Fh
 30646 00005892 B80F00                  	MOV	AX,error_I24_wrong_disk
 30647 00005895 C606[7505]01            	MOV	byte [READOP],1		; Write
 30648                                  	;invoke	HARDERR
 30649 0000589A E815FB                  	call	HARDERR
 30650 0000589D 5F                      	POP	DI			; Get back buffer for ignore
 30651 0000589E 1F                      	POP	DS
 30652 0000589F 3C03                    	CMP	AL,3
 30653                                  FAIL_OPJ2:
 30654 000058A1 741C                    	JZ	short FAIL_OP
 30655 000058A3 E970FF                  	JMP	FAT_GOT_DPB		; Retry
 30656                                  
 30657                                  CHKBUFFDIRT:
 30658                                  	; 20/05/2019 - Retro DOS v4.0
 30659                                  
 30660                                  	; MSDOS 3.3
 30661                                  	;lds	di,[BUFFHEAD]
 30662                                  
 30663                                  	; MSDOS 6.0
 30664                                  	;cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 30665                                  	; 03/03/2024
 30666                                  	; ds=ss
 30667                                  	;;;
 30668 000058A6 833E[7100]00            	cmp	word [DirtyBufferCount],0 ; (Win ME IO.SYS - BIOSCODE:0C7A7h)
 30669                                  	;;;
 30670 000058AB 741F                    	je	short NEWDSK			; no, skip the check
 30671 000058AD E8F400                  	call	GETCURHEAD			; get pointer to first buffer
 30672                                  nbuffer:
 30673                                  	;cmp	al,[di+4]
 30674 000058B0 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 30675 000058B3 750E                    	jne	short lfnxt			; no, go for next buffer
 30676                                  	;test   byte [di+5],40h
 30677 000058B5 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 30678 000058B9 7408                    	jz	short lfnxt			; no, go for next buffer
 30679                                  	;Context DS
 30680 000058BB 16                      	push	ss
 30681 000058BC 1F                      	pop	ds
 30682 000058BD F8                      	clc
 30683 000058BE C3                      	retn
 30684                                  
 30685                                  FAIL_OP:					; This label & code is here
 30686                                  	;Context DS				;  for reachability
 30687 000058BF 16                      	push	ss
 30688 000058C0 1F                      	pop	ds
 30689 000058C1 F9                      	STC
 30690 000058C2 C3                      	retn
 30691                                  
 30692                                  lfnxt:
 30693                                  	; 15/08/2018 - Retro DOS v3.0
 30694                                  	; MSDOS 3.3
 30695                                  	;lds	di,[di]
 30696                                  
 30697                                  	; 20/05/2019 - Retro DOS v4.0
 30698 000058C3 8B3D                    	mov	di,[di]
 30699                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 30700                                  	
 30701                                  	; MSDOS 3.3
 30702                                  	;cmp	di,-1
 30703                                  	;jne	short nbuffer
 30704                                  	
 30705                                  	; MSDOS 6.0
 30706 000058C5 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 30707 000058CA 75E4                    	jne	short nbuffer			; no, check this guy also
 30708                                  
 30709                                  ; If no dirty buffers, assume Media changed
 30710                                  NEWDSK:
 30711                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 30712                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30713 000058CC 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 30714                                  						;  recompute
 30715                                  	; MSDOS 3.3
 30716                                  	;call	SETVISIT
 30717                                  	; MSDOS 6.0
 30718 000058D2 E8CF00                  	call	 GETCURHEAD
 30719                                  nxbuffer:
 30720                                  	; MSDOS 3.3
 30721                                  	;or 	byte [di+5],20h
 30722                                  	; MSDOS 3.3 & MSDOS 6.0
 30723                                  	;cmp	[di+4],al
 30724 000058D5 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 30725 000058D8 7510                    	jne	short lfnxt2
 30726                                  	;test	byte [di+5],40h
 30727 000058DA F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 30728 000058DE 758C                    	jnz	short DISK_CHNG_ERR
 30729                                  	;mov	word [di+4],20FFh
 30730 000058E0 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 30731 000058E5 E8CE00                  	call	SCANPLACE
 30732                                  	; MSDOS 6.0
 30733 000058E8 EB02                    	jmp	short skpbuff
 30734                                  lfnxt2:
 30735 000058EA 8B3D                    	mov	di,[di]
 30736                                  	;mov	di,[di+BUFFINFO.buf_next]
 30737                                  skpbuff:
 30738                                  	; MSDOS 6.0
 30739 000058EC 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 30740 000058F1 75E2                    	jne	short nxbuffer
 30741                                  
 30742 000058F3 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 30743 000058F9 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 30744 000058FB 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 30745 00005900 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 30746 00005902 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 30747                                  ;lfnxt2:
 30748                                  	; MSDOS 3.3
 30749                                  	;call	SKIPVISIT
 30750                                  	;jnz	short nxbuffer
 30751                                  GOGETBPB:
 30752                                  	; MSDOS 3.3 & MSDOS 6.0
 30753                                  	;;lds	di,[es:bp+12h]
 30754                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 30755 00005908 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 30756                                  	; 20/05/2019
 30757                                  	;test	word [di+4],2000h
 30758                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 30759 0000590C F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 30760 00005910 7510                    	JNZ	short GETFREEBUF
 30761                                  	;context DS	    		;hkn; SS is DOSDATA
 30762 00005912 16                      	push	ss
 30763 00005913 1F                      	pop	ds
 30764 00005914 BB0200                  	MOV	BX,2
 30765 00005917 E8D2FC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 30766                                  FAIL_OPJ:
 30767 0000591A 72A3                    	JC	short FAIL_OP
 30768 0000591C C53E[E205]              	LDS	DI,[CURBUF]
 30769 00005920 EB13                    	JMP	SHORT GOTGETBUF
 30770                                  
 30771                                  GETFREEBUF:
 30772 00005922 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 30773 00005923 55                      	PUSH	BP
 30774                                  	; MSDOS 3.3
 30775                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 30776                                  	; MSDOS 6.0
 30777 00005924 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 30778                                  ;hkn; SS override
 30779 00005926 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 30780 0000592B E87600                  	call	GETCURHEAD		;LB.			  ;AN000;
 30781                                  	; MSDOS 3.3 & MSDOS 6.0
 30782 0000592E E83E02                  	call	BUFWRITE
 30783 00005931 5D                      	POP	BP
 30784 00005932 07                      	POP	ES
 30785                                  	;JC	short FAIL_OPJ
 30786 00005933 728A                    	jc	short FAIL_OP
 30787                                  GOTGETBUF:
 30788                                  	;;add	di,16
 30789                                  	;add	di,20 ; MSDOS 6.0
 30790 00005935 83C714                  	ADD	DI,BUFINSIZ
 30791                                  
 30792                                  ;hkn; SS override
 30793 00005938 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 30794                                  	;Context DS			;hkn; SS is DOSDATA
 30795 0000593D 16                      	push	ss
 30796 0000593E 1F                      	pop	ds
 30797 0000593F 893E[6803]              	MOV	[CALLXAD],DI
 30798                                  	;mov	al,16h
 30799 00005943 B016                    	MOV	AL,DBPBHL
 30800                                  	;mov	ah,[es:bp+1]
 30801 00005945 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 30802 00005949 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 30803 0000594C C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 30804 00005951 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30805                                  	;;mov	al,[es:bp+16h]
 30806                                  	;mov	al,[es:bp+17h]
 30807 00005957 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30808 0000595B A2[6703]                	MOV	[CALLMED],AL
 30809 0000595E 06                      	PUSH	ES
 30810 0000595F 1E                      	PUSH	DS
 30811                                  	;;push	word [es:bp+14h]
 30812                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 30813 00005960 26FF7615                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 30814                                  	;;push	word [es:bp+12h]
 30815                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 30816 00005964 26FF7613                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 30817                                  
 30818                                  ;hkn; DEVCALL is in DOSDATA
 30819 00005968 BB[5A03]                	MOV	BX,DEVCALL
 30820 0000596B 5E                      	POP	SI
 30821 0000596C 1F                      	POP	DS			; DS:SI Points to device header
 30822 0000596D 07                      	POP	ES			; ES:BX Points to call header
 30823                                  	;invoke	DEVIOCALL2
 30824 0000596E E884ED                  	call	DEVIOCALL2
 30825 00005971 07                      	POP	ES			; Restore ES:BP
 30826                                  	;Context DS
 30827 00005972 16                      	push	ss		 	;hkn; SS is DOSDATA
 30828 00005973 1F                      	pop	ds
 30829 00005974 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30830                                  	; MSDOS 3.3
 30831                                  	;test	di,8000h
 30832                                  	;jnz	short FATERRJ
 30833                                  	; MSDOS 6.0
 30834 00005978 09FF                    	or	di,di
 30835 0000597A 7825                    	js	short FATERRJ 		; have error
 30836                                  
 30837                                  ; 04/03/2024
 30838                                  %if 0
 30839                                  	;;mov	al,[es:bp+16h]
 30840                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 30841                                  	MOV	AL,[ES:BP+DPB.MEDIA]
 30842                                  %endif
 30843                                  
 30844 0000597C C536[6C03]              	LDS	SI,[CALLBPB]
 30845                                  	;;mov	word [es:bp+1Ch],0
 30846                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 30847 00005980 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 30848                                  	;invoke	$SETDPB
 30849 00005986 E8BFB6                  	call	_$SETDPB
 30850                                  
 30851                                  ;hkn; SS override
 30852 00005989 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 30853                                  	;mov	al,[es:bp+8]
 30854 0000598E 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 30855                                  
 30856                                  	; MSDOS 3.3
 30857                                  	;;mov	ah,[es:bp+0Fh]
 30858                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 30859                                  	;;mov	[DI-8],ax
 30860                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 30861                                  
 30862                                  	; MSDOS 6.0
 30863                                  	;mov	[di-0Ah],al
 30864 00005992 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 30865                                  						;>32mb		  ;AN000;
 30866                                  	;mov	ax,[es:bp+0Fh]
 30867 00005995 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 30868                                  	;mov	[di-9h],ax			  ;AC000;
 30869 00005999 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 30870                                  					;>32mb Correct buffer info ;AC000;
 30871                                  	;Context DS			;hkn; SS is DOSDATA
 30872 0000599C 16                      	push	ss
 30873 0000599D 1F                      	pop	ds
 30874 0000599E 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 30875 000059A0 C3                      	retn
 30876                                  
 30877                                  FATERRJ: 
 30878 000059A1 E951FE                  	JMP	FATERR
 30879                                  
 30880                                  ;============================================================================
 30881                                  ; STDBUF.ASM
 30882                                  ;============================================================================
 30883                                  ; Retro DOS v2.0 - 12/03/2018
 30884                                  
 30885                                  ;
 30886                                  ; Standard buffer management for MSDOS
 30887                                  ;
 30888                                  
 30889                                  ;.xlist
 30890                                  ;.xcref
 30891                                  ;INCLUDE STDSW.ASM
 30892                                  ;.cref
 30893                                  ;.list
 30894                                  
 30895                                  ;TITLE	STDBUF - MSDOS buffer management
 30896                                  ;NAME	STDBUF
 30897                                  
 30898                                  ;INCLUDE BUF.ASM
 30899                                  
 30900                                  ;============================================================================
 30901                                  ; BUF.ASM
 30902                                  ;============================================================================
 30903                                  ; 31/07/2018 - Retro DOS v3.0
 30904                                  ; Retro DOS v2.0 - 12/03/2018
 30905                                  ;
 30906                                  ; buffer management for MSDOS
 30907                                  ;
 30908                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 30909                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 30910                                  ;
 30911                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 30912                                  ;
 30913                                  ;SETVISIT:
 30914                                  ;	; 31/07/2018 - Retro DOS v3.0
 30915                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 30916                                  ;; Inputs:
 30917                                  ;;      None
 30918                                  ;; Function:
 30919                                  ;;      Set up a scan of I/O buffers
 30920                                  ;; Outputs:
 30921                                  ;;      All visit flags = 0
 30922                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 30923                                  ;;                    may cause a scan to stop in the middle leaving some
 30924                                  ;;                    visit flags set, and some not set.
 30925                                  ;;      DS:DI Points to [BUFFHEAD]
 30926                                  ;; No other registers altered
 30927                                  ;
 30928                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30929                                  ;	PUSH    AX
 30930                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 30931                                  ;	;mov	al,0DFh
 30932                                  ;	mov	al,~buf_visit
 30933                                  ;SETLOOP:
 30934                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 30935                                  ;	;and	[DI+5],al
 30936                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 30937                                  ;       LDS     DI,[DI]
 30938                                  ;       CMP     DI,-1
 30939                                  ;       JNZ     SHORT SETLOOP
 30940                                  ;       POP     AX ; 09/09/2018
 30941                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30942                                  ;SVISIT_RETN:
 30943                                  ;       RETN
 30944                                  ;
 30945                                  ;SKIPVISIT:
 30946                                  ;	; 31/07/2018 - Retro DOS v3.0
 30947                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 30948                                  ;
 30949                                  ;; Inputs:
 30950                                  ;;      DS:DI Points to a buffer
 30951                                  ;; Function:
 30952                                  ;;      Skip visited buffers
 30953                                  ;; Outputs:
 30954                                  ;;      DS:DI Points to next unvisited buffer
 30955                                  ;;      Zero is set if skip to LAST buffer
 30956                                  ;; No other registers altered
 30957                                  ;
 30958                                  ;       CMP     DI,-1
 30959                                  ;       ;retz
 30960                                  ;       JZ	SHORT SVISIT_RETN
 30961                                  ;
 30962                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 30963                                  ;       ;;;retnz
 30964                                  ;       ;;JNZ	SHORT SVISIT_RETN
 30965                                  ;
 30966                                  ;	;test	byte [di+5],20h
 30967                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 30968                                  ;	JNZ	short SKIPLOOP
 30969                                  ;	
 30970                                  ;	push	ax
 30971                                  ;	or	al,1
 30972                                  ;	pop	ax
 30973                                  ;	retn	
 30974                                  ;
 30975                                  ;SKIPLOOP:
 30976                                  ;	LDS     DI,[DI]
 30977                                  ;       JMP     SHORT SKIPVISIT
 30978                                  
 30979                                  ;============================================================================
 30980                                  ; BUF.ASM, MSDOS 6.0, 1991
 30981                                  ;============================================================================
 30982                                  ; 31/07/2018 - Retro DOS v3.0
 30983                                  ; 04/05/2019 - Retro DOS v4.0
 30984                                  
 30985                                  ;	TITLE	BUF - MSDOS buffer management
 30986                                  ;	NAME	BUF
 30987                                  
 30988                                  ;**	BUF.ASM - Low level routines for buffer cache management
 30989                                  ;
 30990                                  ;	GETCURHEAD
 30991                                  ;	ScanPlace
 30992                                  ;	PLACEBUF
 30993                                  ;	PLACEHEAD
 30994                                  ;	PointComp
 30995                                  ;	GETBUFFR
 30996                                  ;	GETBUFFRB
 30997                                  ;	FlushBuf
 30998                                  ;	BufWrite
 30999                                  ;	SET_RQ_SC_PARMS
 31000                                  ;
 31001                                  ;	Revision history:
 31002                                  ;
 31003                                  ;		AN000  version 4.00  Jan. 1988
 31004                                  ;		A004   PTM 3765 -- Disk reset failed
 31005                                  ;		M039 DB 10/17/90 - Disk write optimization
 31006                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 31007                                  
 31008                                  ;Break	<GETCURHEAD -- Get current buffer header>
 31009                                  ;----------------------------------------------------------------------------
 31010                                  ; Procedure Name : GetCurHead
 31011                                  ; Inputs:
 31012                                  ;	 No Inputs
 31013                                  ; Function:
 31014                                  ;	Returns the pointer to the first buffer in Queue
 31015                                  ;	and updates FIRST_BUFF_ADDR
 31016                                  ;       and invalidates LASTBUFFER (recency pointer)
 31017                                  ; Outputs:
 31018                                  ;	DS:DI = pointer to the first buffer in Queue
 31019                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 31020                                  ;       LASTBUFFER = -1
 31021                                  ; No other registers altered
 31022                                  ;----------------------------------------------------------------------------
 31023                                  
 31024                                  ; 04/05/2019 - Retro DOS v4.0
 31025                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 31026                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31027                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 31028                                  
 31029                                  GETCURHEAD:
 31030 000059A4 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 31031 000059A9 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 31032 000059B0 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 31033 000059B5 C3                      	retn
 31034                                  
 31035                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 31036                                  ;----------------------------------------------------------------------------
 31037                                  ; Procedure Name : ScanPlace
 31038                                  ; Inputs:
 31039                                  ;	Same as PLACEBUF
 31040                                  ; Function:
 31041                                  ;	Save scan location and call PLACEBUF
 31042                                  ; Outputs:
 31043                                  ;	DS:DI Points to saved scan location
 31044                                  ; All registers, except DS:DI, preserved.
 31045                                  ;----------------------------------------------------------------------------
 31046                                  ;M039: Rewritten to preserve registers.
 31047                                  
 31048                                  ;SCANPLACE:
 31049                                  ;	; 31/07/2018 - Retro DOS v3.0
 31050                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31051                                  ;	push	es
 31052                                  ;	les	si,[di]
 31053                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 31054                                  ;	call	PLACEBUF
 31055                                  ;	push	es
 31056                                  ;	pop	ds
 31057                                  ;	mov	di,si
 31058                                  ;	pop	es
 31059                                  ;scanplace_retn:
 31060                                  ;	retn	
 31061                                  	
 31062                                  	; MSDOS 6.0
 31063                                  SCANPLACE:
 31064 000059B6 FF35                    	push	word [di]
 31065                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 31066 000059B8 E80200                  	call	PLACEBUF
 31067 000059BB 5F                      	pop	di
 31068 000059BC C3                      	retn
 31069                                  
 31070                                  ;----------------------------------------------------------------------------
 31071                                  ; Procedure Name : PlaceBuf
 31072                                  ; Input:
 31073                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 31074                                  ; Function:
 31075                                  ;	Remove buffer from queue and re-insert it in proper place.
 31076                                  ; NO registers altered
 31077                                  ;----------------------------------------------------------------------------
 31078                                  
 31079                                  ;procedure PLACEBUF,NEAR
 31080                                  
 31081                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31082                                  	; 20/05/2019 - Retro DOS v4.0
 31083                                  PLACEBUF:
 31084                                  	; 31/07/2018 - Retro DOS v3.0
 31085                                  
 31086                                  	; MSDOS 6.0
 31087 000059BD 50                      	push	AX			;Save only regs we modify	;AN000;
 31088 000059BE 53                      	push	BX							;AN000;
 31089 000059BF 56                      	push	SI							;AN000;
 31090                                  	
 31091 000059C0 8B05                    	mov	ax,[di]
 31092                                  	;mov	ax,[di+BUFFINFO.buf_next]
 31093 000059C2 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 31094                                  	
 31095 000059C7 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 31096 000059C9 7420                    	je	short nret			;Yes, special case	;AN000;
 31097 000059CB 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 31098 000059CD 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 31099 000059CF 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 31100 000059D3 EB16                    	jmp	short nret 			;Continue with repositioning;AN000;
 31101                                  not_first:
 31102                                  	;mov	si,[di+2]
 31103 000059D5 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 31104 000059D8 8904                    	mov	[si],ax
 31105                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 31106 000059DA 96                      	xchg	si,ax
 31107                                  	;mov	[si+2],ax
 31108 000059DB 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 31109                                  	
 31110 000059DE 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 31111 000059E1 893C                    	mov	[si],di
 31112                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 31113 000059E3 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 31114 000059E6 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 31115 000059E9 891D                    	mov	[di],bx
 31116                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 31117                                  nret:									;AN000;
 31118 000059EB 5E                      	pop	SI							;AN000;
 31119 000059EC 5B                      	pop	BX							;AN000;
 31120 000059ED 58                      	pop	AX							;AN000;
 31121                                  									;AN000;
 31122                                  	;cmp	byte [di+4],0FFh
 31123 000059EE 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 31124 000059F2 7505                            jne	short pbx			; M039: -no, jump.
 31125 000059F4 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 31126                                  pbx:	
 31127 000059F9 C3                      	retn								;AN000;
 31128                                  
 31129                                  	; 31/07/2018 - Retro DOS v3.0
 31130                                  
 31131                                  	; MSDOS 3.3
 31132                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31133                                  
 31134                                  ;PLACEBUF:
 31135                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31136                                  ;	
 31137                                  ;       CALL	save_world
 31138                                  ;       LES     CX,[DI]
 31139                                  ;       CMP     CX,-1           	; Buf is LAST?
 31140                                  ;       JZ      SHORT NRET		; Buffer already last
 31141                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 31142                                  ;       PUSH    DS
 31143                                  ;       POP     ES              	; Buf is ES:DI
 31144                                  ;	; 15/03/2018
 31145                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 31146                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 31147                                  ;       JNZ     SHORT BUFLOOP
 31148                                  ;       MOV     [SS:BUFFHEAD],CX
 31149                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 31150                                  ;       JMP     SHORT LOOKEND
 31151                                  ;BUFLOOP:
 31152                                  ;	; 31/07/2018
 31153                                  ;	mov	ax,ds
 31154                                  ;	mov	bx,si
 31155                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31156                                  ;       LDS     SI,[SI]
 31157                                  ;       CALL    POINTCOMP
 31158                                  ;       jnz	short BUFLOOP
 31159                                  ;	;
 31160                                  ;	mov	ds,ax
 31161                                  ;	mov	si,bx
 31162                                  ;	mov	[SI],cx
 31163                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 31164                                  ;	mov	[SI+2],bp
 31165                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 31166                                  ;LOOKEND:
 31167                                  ;	mov	ax,ds
 31168                                  ;	mov	bx,si
 31169                                  ;       LDS     SI,[SI]
 31170                                  ;       CMP     SI,-1
 31171                                  ;       jnz     short LOOKEND
 31172                                  ;GOTHEEND:
 31173                                  ;       mov	ds,ax
 31174                                  ;	mov	[BX],di
 31175                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 31176                                  ;       MOV     WORD [ES:DI],-1
 31177                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 31178                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 31179                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 31180                                  ;NRET:
 31181                                  ;       CALL	restore_world
 31182                                  ;	
 31183                                  ;	;cmp	byte [di+4],-1
 31184                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 31185                                  ;	jnz     short scanplace_retn
 31186                                  ;	call    PLACEHEAD
 31187                                  ;	retn
 31188                                  
 31189                                  ;EndProc PLACEBUF
 31190                                  
 31191                                  ;M039 - Removed PLACEHEAD.
 31192                                  ;----------------------------------------------------------------------------
 31193                                  ; places buffer at head
 31194                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 31195                                  ;	ONE IN THE LIST!!!!!!!
 31196                                  ; BUGBUG ---- this routine can be removed because it has only
 31197                                  ; BUGBUG ---- one instruction. This routine is called from
 31198                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 31199                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 31200                                  ; BUGBUG ---- But kept as it is for modularity
 31201                                  ;----------------------------------------------------------------------------
 31202                                  ;procedure   PLACEHEAD,NEAR
 31203                                  ;	mov	word ptr [BufferQueue], di
 31204                                  ;	ret
 31205                                  ;EndProc PLACEHEAD
 31206                                  ;M039
 31207                                  
 31208                                  ;----------------------------------------------------------------------------
 31209                                  ; Procedure Name : PLACEHEAD
 31210                                  ;
 31211                                  ; SAME AS PLACEBUF except places buffer at head
 31212                                  ;----------------------------------------------------------------------------
 31213                                  
 31214                                  	; MSDOS 3.3 (Retro DOS v3.0)
 31215                                  	; 05/09/2018
 31216                                  	; MSDOS 2.11 (Retro DOS v2.0)
 31217                                  ;PLACEHEAD:
 31218                                  ;	; 31/07/2018 - Retro DOS v3.0
 31219                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 31220                                  ;
 31221                                  ;       CALL	save_world
 31222                                  ;       PUSH	DS
 31223                                  ;       POP	ES
 31224                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31225                                  ;       LDS     SI,[SS:BUFFHEAD]
 31226                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 31227                                  ;	CALL    POINTCOMP
 31228                                  ;       JZ      SHORT GOTHEEND2
 31229                                  ;	MOV	[ES:DI],SI
 31230                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 31231                                  ;       MOV	[ES:DI+2],DS
 31232                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 31233                                  ;       MOV	[SS:BUFFHEAD],DI
 31234                                  ;       MOV	[SS:BUFFHEAD+2],ES
 31235                                  ;LOOKEND2:
 31236                                  ;       mov	ax,ds
 31237                                  ;	mov	bx,si
 31238                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31239                                  ;       LDS     SI,[SI]
 31240                                  ;       CALL    POINTCOMP
 31241                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 31242                                  ;       mov	ds,ax
 31243                                  ;	mov	word [bx],-1
 31244                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 31245                                  ;	mov	word [bx+2],-1
 31246                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 31247                                  ;GOTHEEND2:
 31248                                  ;      	call	restore_world
 31249                                  ;placehead_retn:
 31250                                  ;	retn
 31251                                  
 31252                                  ; 20/05/2019 - Retro DOS v4.0
 31253                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 31254                                  
 31255                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 31256                                  ;----------------------------------------------------------------------------
 31257                                  ;
 31258                                  ; Procedure Name : PointComp
 31259                                  ; Inputs:
 31260                                  ;         DS:SI & ES:DI
 31261                                  ; Function:
 31262                                  ;          Checks for ((SI==DI) && (ES==DS))
 31263                                  ;	   Assumes that pointers are normalized for the
 31264                                  ;	   same segment
 31265                                  ;
 31266                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 31267                                  ; DO NOT USE FOR < or >
 31268                                  ; No Registers altered
 31269                                  ;
 31270                                  ;----------------------------------------------------------------------------
 31271                                  
 31272                                  POINTCOMP:
 31273                                  	; 31/07/2018 - Retro DOS v3.0
 31274                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 31275 000059FA 39FE                    	CMP	SI,DI
 31276 000059FC 750A                    	jnz	short _ret_label	; return if nz
 31277                                  	;jnz	short placehead_retn 
 31278 000059FE 51                      	PUSH	CX
 31279 000059FF 52                      	PUSH	DX
 31280 00005A00 8CD9                    	MOV	CX,DS
 31281 00005A02 8CC2                    	MOV	DX,ES
 31282 00005A04 39D1                    	CMP	CX,DX
 31283 00005A06 5A                      	POP	DX
 31284 00005A07 59                      	POP	CX
 31285                                  _ret_label:
 31286 00005A08 C3                      	retn
 31287                                  
 31288                                  ; 01/08/2018 - Retro DOS v3.0
 31289                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 31290                                  
 31291                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 31292                                  
 31293                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 31294                                  ;----------------------------------------------------------------------------
 31295                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 31296                                  ;	It gets the specified local sector into one of the I/O buffers
 31297                                  ;	and shuffles the queue
 31298                                  ; 
 31299                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31300                                  ;		       ELSE no pre-read
 31301                                  ;		(DX) = Desired physical sector number	      (LOW)
 31302                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31303                                  ;		(ES:BP) = Pointer to drive parameters
 31304                                  ;		ALLOWED set in case of INT 24
 31305                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31306                                  ;		'C' clear if OK
 31307                                  ;		CURBUF Points to the Buffer for the sector
 31308                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31309                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31310                                  ;----------------------------------------------------------------------------
 31311                                  
 31312                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 31313                                  ;----------------------------------------------------------------------------
 31314                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 31315                                  ;	It gets the specified sector into one of the I/O buffers
 31316                                  ;	and shuffles the queue. We need a special entry point so that
 31317                                  ;	we can read the alternate FAT sector if the first read fails, also
 31318                                  ;	so we can mark the buffer as a FAT sector.
 31319                                  ; 
 31320                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31321                                  ;		       ELSE no pre-read
 31322                                  ;		(DX) = Desired physical sector number	     (LOW)
 31323                                  ;		(SI) != 0
 31324                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31325                                  ;		(ES:BP) = Pointer to drive parameters
 31326                                  ;		ALLOWED set in case of INT 24
 31327                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31328                                  ;		'C' clear if OK
 31329                                  ;		CUR ddBUF Points to the Buffer for the sector
 31330                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31331                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31332                                  ;----------------------------------------------------------------------------
 31333                                  
 31334                                  	; 20/05/2019 - Retro DOS v4.0
 31335                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 31336                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31337                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 31338                                  GETBUFFR:
 31339 00005A09 31F6                    	XOR	SI,SI
 31340                                  
 31341                                  ;	This entry point is called for FAT buffering with SI != 0
 31342                                  
 31343                                  GETBUFFRB:
 31344 00005A0B A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 31345                                  	; 15/12/2022
 31346 00005A0E 268A4600                	mov	al,[ES:BP]
 31347                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31348                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 31349 00005A12 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 31350                                  	; MSDOS 6.0
 31351                                  ;hkn; SS override
 31352 00005A16 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 31353                                  
 31354                                  ;	See if this is the buffer that was most recently returned.
 31355                                  ;	A big performance win if it is.
 31356                                  
 31357 00005A1B 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 31358 00005A1E 7412                    	je	short getb5			; No
 31359                                  	;cmp	dx,[di+6]
 31360 00005A20 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31361 00005A23 750D                    	JNZ	short getb5			; Wrong sector
 31362                                  	
 31363                                  	; MSDOS 6.0
 31364                                  	;cmp	cx,[di+8]
 31365 00005A25 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 31366 00005A28 7508                    	JNZ	short getb5			; F.C. >32mb		;AN000;
 31367                                  	
 31368                                  	;cmp	al,[di+4]
 31369 00005A2A 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31370                                  	;JZ	getb35				; Just asked for same buffer
 31371 00005A2D 7503                    	jnz	short getb5
 31372                                  	;jmp	getb35
 31373                                  	; 17/12/2022
 31374                                  	; 28/07/2019
 31375 00005A2F E9C800                  	jmp	getb35x
 31376                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31377                                  	;jmp	getb35
 31378                                  
 31379                                  ;	It's not the buffer most recently returned. See if it's in the
 31380                                  ;	cache.
 31381                                  ;
 31382                                  ;	(cx:dx) = sector #
 31383                                  ;	(al) = drive #
 31384                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31385                                  ;	??? list may be incomplete ???
 31386                                  
 31387                                  getb5:	
 31388                                  	; MSDOS 3.3
 31389                                  	;lds	di,[SS:BUFFHEAD]
 31390                                  	; MSDOS 6.0
 31391 00005A32 E86FFF                  	CALL	GETCURHEAD			; get Q Head
 31392                                  getb10:	
 31393                                  	;cmp	dx,[di+6]
 31394 00005A35 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31395 00005A38 750D                    	jne	short getb12			; wrong sector lo
 31396                                  	
 31397                                  	; MSDOS 6.0
 31398                                  	;cmp	cx,[di+8]
 31399 00005A3A 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 31400 00005A3D 7508                    	jne	short getb12			; wrong sector hi
 31401                                  	
 31402                                  	;cmp	al,[di+4]
 31403 00005A3F 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31404                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 31405 00005A42 7503                    	jne	short getb12
 31406 00005A44 E98D00                  	jmp	getb25
 31407                                  getb12:	
 31408                                  	; MSDOS 3.3
 31409                                  	;;mov	di,[DI]
 31410                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 31411                                  	;
 31412                                  	; 15/08/2018
 31413                                  	;lds	di,[di]
 31414                                  
 31415                                  	;cmp	di,-1 ; 0FFFFh
 31416                                  	;jne	short getb10
 31417                                  	;lds	di,[SS:BUFFHEAD]
 31418                                  
 31419                                  	; MSDOS 6.0
 31420 00005A47 8B3D                    	mov	di,[di]
 31421                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 31422 00005A49 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 31423 00005A4E 75E5                    	jne	short getb10			; no, continue looking
 31424                                  
 31425                                  ;	The requested sector is not available in the buffers. DS:DI now points
 31426                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 31427                                  ;	new sector into it.
 31428                                  ;
 31429                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 31430                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 31431                                  ;	him, we should take LRU. And the above lookup shouldn't be
 31432                                  ;	down a chain, but should be hashed.
 31433                                  ;
 31434                                  ;	(DS:DI) = first buffer in the queue
 31435                                  ;	(CX:DX) = sector # we want
 31436                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31437                                  
 31438                                  	; MSDOS 3.3 & MSDOS 6.0
 31439                                  ;hkn; SS override
 31440 00005A50 51                      	PUSH	CX  ; MSDOS 6.0
 31441 00005A51 56                      	push	si
 31442 00005A52 52                      	push	dx
 31443 00005A53 55                      	push	bp
 31444 00005A54 06                      	push	es
 31445 00005A55 E81701                  	CALL	BUFWRITE			; Write out the dirty buffer
 31446 00005A58 07                      	pop	es
 31447 00005A59 5D                      	pop	bp
 31448 00005A5A 5A                      	pop	dx
 31449 00005A5B 5E                      	pop	si
 31450 00005A5C 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 31451                                  	;jc	short getbx			; if got hard error
 31452 00005A61 7303                    	jnc	short getb13
 31453 00005A63 E99E00                  	jmp	getbx
 31454                                  
 31455                                  getb13:
 31456                                  	; MSDOS 6.0
 31457 00005A66 E89301                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 31458                                  
 31459                                  ;	We're ready to read in the buffer, if need be. If the caller
 31460                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 31461                                  
 31462 00005A69 30E4                    	XOR	AH,AH				; initial flags
 31463                                  ;hkn; SS override
 31464                                  	;test	byte [ss:PREREAD],0FFh
 31465                                  	;jnz	short getb20
 31466 00005A6B 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 31467 00005A70 754A                    	JNZ	short getb20			; no, we're done
 31468                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 31469                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31470 00005A72 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 31471 00005A75 B90100                  	MOV	CX,1
 31472 00005A78 56                      	push	si
 31473 00005A79 57                      	push	di
 31474 00005A7A 52                      	push	dx
 31475                                  	; MSDOS 6.0
 31476 00005A7B 06                      	push	es ; ***
 31477                                  
 31478                                  ; Note: As far as I can tell, all disk reads into buffers go through
 31479                                  ;	this point. -mrw 10/88
 31480                                  	
 31481 00005A7C 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 31482 00005A82 7407                    	jz	short getb14
 31483 00005A84 1E                      	push	ds ; **
 31484 00005A85 53                      	push	bx ; *
 31485 00005A86 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 31486                                  getb14:
 31487                                  ;M039: Eliminated redundant HMA code.
 31488                                  
 31489                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31490 00005A8B 09F6                    	OR	SI,SI			; FAT sector ?
 31491 00005A8D 7407                    	JZ	short getb15		
 31492                                  
 31493 00005A8F E8C4DC                  	call	FATSECRD
 31494                                  	;mov	ah,2
 31495 00005A92 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 31496                                  
 31497 00005A94 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 31498                                  
 31499                                  getb15:
 31500 00005A96 E8E9DC                  	call	DREAD			; Buffer is marked free if read barfs
 31501 00005A99 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 31502                                  getb17:
 31503                                  	; 17/12/2022	
 31504                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31505                                  ;%if 0
 31506                                  	; MSDOS 6.0							  ;I001
 31507 00005A9B 9C                      	pushf								  ;I001
 31508 00005A9C 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 31509 00005AA2 7411                    	jz	short not_in_hma	; no				  ;I001
 31510                                  	;mov	cx,[es:bp+2]
 31511 00005AA4 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 31512 00005AA8 D1E9                    	shr	cx,1							  ;I001
 31513 00005AAA 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 31514 00005AAB 89DE                    	mov	si,bx							  ;I001
 31515 00005AAD 5F                      	pop	di ; *							  ;I001
 31516 00005AAE 07                      	pop	es ; **							  ;I001
 31517 00005AAF FC                      	cld								  ;I001
 31518 00005AB0 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 31519 00005AB1 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 31520 00005AB3 06                      	push	es							  ;I001
 31521 00005AB4 1F                      	pop	ds							  ;I001
 31522                                  ;%endif
 31523                                  
 31524                                  ; 17/12/2022
 31525                                  %if 0
 31526                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31527                                  	; MSDOS 5.0
 31528                                  	pushf
 31529                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 31530                                  	jz	short not_in_hma	; no
 31531                                  	popf
 31532                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 31533                                  	shr	cx,1
 31534                                  	mov	si,bx
 31535                                  	pop	di ; *
 31536                                  	pop	es ; **
 31537                                  	cld
 31538                                  	rep	movsw
 31539                                  	push	es
 31540                                  	pop	ds
 31541                                  	jmp	short getb19 ; 27/11/2022
 31542                                  %endif
 31543                                  
 31544                                  not_in_hma:								  ;I001
 31545 00005AB5 9D                      	popf							 	  ;I001
 31546                                  getb19:
 31547 00005AB6 07                      	pop	es ; ***
 31548 00005AB7 5A                      	pop	dx
 31549 00005AB8 5F                      	pop	di
 31550 00005AB9 5E                      	pop	si
 31551 00005ABA 7248                    	JC	short getbx
 31552                                  
 31553                                  ;	The buffer has the data setup in it (if we were to read)
 31554                                  ;	Setup the various buffer fields
 31555                                  ;
 31556                                  ;	(ds:di) = buffer address
 31557                                  ;	(es:bp) = DPB address
 31558                                  ;	(HIGH_SECTOR:DX) = sector #
 31559                                  ;	(ah) = BUF_FLAGS value
 31560                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 31561                                  
 31562                                  ;hkn; SS override
 31563                                  getb20:	; MSDOS 6.0
 31564 00005ABC 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 31565                                  	;mov	[di+8],cx
 31566 00005AC1 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 31567                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31568                                   	;mov	[di+6],dx
 31569 00005AC4 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 31570                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 31571                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 31572 00005AC7 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 31573                                  	;;mov	[di+0Ch],es
 31574                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 31575 00005ACA 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 31576                                  	; 15/12/2022
 31577 00005ACD 268A4600                	mov	al,[es:bp]
 31578                                  	;mov	al,[es:bp+0]
 31579                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31580                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 31581                                  	;mov	[di+4],ax
 31582 00005AD1 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 31583                                  getb25:	
 31584                                  	; MSDOS 3.3
 31585                                  	;mov     ax,1
 31586                                  
 31587                                  	; MSDOS 6.0
 31588                                  	;mov	byte [di+0Ah],1
 31589 00005AD4 C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 31590 00005AD8 31C0                    	XOR	AX,AX
 31591                                  
 31592                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31593 00005ADA 09F6                    	OR	SI,SI				; FAT sector ?
 31594 00005ADC 740B                    	JZ	short getb30
 31595                                  
 31596                                  	;mov	al,[es:bp+8]
 31597 00005ADE 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 31598                                  	
 31599                                  	; MSDOS 6.0
 31600 00005AE2 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 31601                                  	;mov	ax,[es:bp+0Fh]
 31602 00005AE5 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 31603                                  						;  sectors
 31604                                  	; MSDOS 3.3
 31605                                  	;;mov	ah,[es:bp+0Fh]
 31606                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31607                                  
 31608                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 31609                                  ;		is set
 31610                                  
 31611                                  getb30:	
 31612                                  	; MSDOS 6.0
 31613                                  	;mov	[di+0Bh],ax
 31614 00005AE9 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 31615                                  
 31616                                  	; MSDOS 3.3
 31617                                  	;;mov	[di+8],ax ; 15/08/2018	
 31618                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 31619                                  
 31620 00005AEC E8CEFE                  	CALL	PLACEBUF
 31621                                  
 31622                                  ;hkn; SS override for next 4
 31623                                  getb35: 
 31624                                  	; 17/12/2022
 31625                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31626                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 31627                                  	;MOV	[SS:CURBUF+2],DS
 31628                                  	;MOV	[SS:LastBuffer+2],DS
 31629                                  	;MOV	[SS:CURBUF],DI
 31630                                  	;MOV	[SS:LastBuffer],DI
 31631                                  	;CLC
 31632                                  
 31633                                  	; 17/12/2022
 31634                                  	; 07/12/2022
 31635                                  	; Retro DOS v4.0
 31636 00005AEF 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 31637 00005AF4 36893E[1E00]            	mov	[ss:LastBuffer],di
 31638 00005AF9 F8                      	clc
 31639                                  getb35x: ; 28/07/2019
 31640 00005AFA 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 31641 00005AFF 36893E[E205]            	MOV	[ss:CURBUF],di
 31642                                  
 31643                                  ;	Return with 'C' set appropriately
 31644                                  ;	(dx) = caller's original value
 31645                                  
 31646                                  getbx:	
 31647 00005B04 16                      	push	ss
 31648 00005B05 1F                      	pop	ds
 31649                                  	;retn
 31650                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31651                                  getbuffrb_retn:
 31652                                  ;flushbuf_retn:	; 17/12/2022
 31653 00005B06 C3                      	retn
 31654                                  
 31655                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 31656                                  ;----------------------------------------------------------------------------
 31657                                  ; Input:
 31658                                  ;	DS = DOSGROUP
 31659                                  ;	AL = Physical unit number local buffers only
 31660                                  ;	   = -1 for all units and all remote buffers
 31661                                  ; Function:
 31662                                  ;	Write out all dirty buffers for unit, and flag them as clean
 31663                                  ;	Carry set if error (user FAILed to I 24)
 31664                                  ;	    Flush operation completed.
 31665                                  ; DS Preserved, all others destroyed (ES too)
 31666                                  ;----------------------------------------------------------------------------
 31667                                  
 31668                                  	; 20/05/2019 - Retro DOS v4.0
 31669                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 31670                                  
 31671                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31672                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 31673                                  FLUSHBUF:
 31674                                  	; MSDOS 3.3
 31675                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 31676                                  	;lds	di,[BUFFHEAD]
 31677                                  
 31678                                  	; MSDOS 6.0
 31679 00005B07 E89AFE                  	call	GETCURHEAD
 31680                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31681 00005B0A 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31682 00005B10 7508                    	jnz	short scan_buf_queue
 31683 00005B12 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 31684 00005B18 7423                    	je	short end_scan
 31685                                  	
 31686                                  scan_buf_queue:
 31687 00005B1A E82900                  	call	CHECKFLUSH
 31688                                  	;push	ax  ; MSDOS 3.3
 31689                                  	; MSDOS 6.0
 31690                                  	;mov	ah,[di+4]
 31691 00005B1D 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 31692 00005B20 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 31693 00005B25 7408                    	je	short free_the_buf
 31694                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31695 00005B27 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31696 00005B2D 7405                    	jz	short dont_free_the_buf
 31697                                  	; MSDOS 3.3
 31698                                  	;;mov	al,[di+4]
 31699                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 31700                                  	;cmp	[SS:WPERR],al					;hkn;
 31701                                  	; 15/08/2018
 31702                                  	;jne	short dont_free_the_buf	
 31703                                  free_the_buf:
 31704                                  	; MSDOS 6.0 (& MSDOS 3.3)
 31705 00005B2F C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 31706                                  dont_free_the_buf:
 31707                                  	;pop	ax  ; MSDOS 3.3 	   	
 31708                                  
 31709                                  	; MSDOS 3.3
 31710                                  	;mov	di,[DI]
 31711                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 31712                                  	;
 31713                                  	; 15/08/2018
 31714                                  	;lds	di,[di]
 31715                                  	;
 31716                                  	;cmp	di,-1 ; 0FFFFh
 31717                                  	;jnz	short scan_buf_queue 
 31718                                  	
 31719                                  	; MSDOS 6.0
 31720 00005B34 8B3D                    	mov	di,[di]
 31721                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 31722 00005B36 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 31723 00005B3B 75DD                    	jne	short scan_buf_queue
 31724                                  
 31725                                  end_scan:
 31726 00005B3D 16                      	push	ss
 31727 00005B3E 1F                      	pop	ds
 31728                                  	; 01/08/2018 - Retro DOS v3.0
 31729                                  	;cmp	byte [FAILERR],0
 31730                                  	;jne	short bad_flush
 31731                                  	;retn
 31732                                  ;bad_flush:
 31733                                  	;stc
 31734                                  	;retn
 31735                                  
 31736                                  	; 17/12/2022
 31737                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31738                                  	; 01/08/2018 - Retro DOS v3.0
 31739 00005B3F 803E[4A03]01            	cmp	byte [FAILERR],1
 31740 00005B44 F5                      	cmc
 31741                                  flushbuf_retn:
 31742 00005B45 C3                      	retn
 31743                                  	
 31744                                  	; 17/12/2022
 31745                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31746                                  	;cmp	byte [FAILERR],0
 31747                                  	;jne	short bad_flush
 31748                                  	;retn
 31749                                  ;bad_flush:
 31750                                  	;stc
 31751                                  	;retn
 31752                                  
 31753                                  ;----------------------------------------------------------------------------
 31754                                  ;
 31755                                  ; Procedure Name : CHECKFLUSH
 31756                                  ;
 31757                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 31758                                  ;	   DS:DI - pointer to buffer
 31759                                  ;
 31760                                  ; Function : Write out a buffer if it is dirty
 31761                                  ;
 31762                                  ; Carry set if problem (currently user FAILed to I 24)
 31763                                  ;
 31764                                  ;----------------------------------------------------------------------------
 31765                                  
 31766                                  CHECKFLUSH:
 31767                                  	; MSDOS 6.0
 31768 00005B46 B4FF                    	mov	ah, -1 ; 01/08/2018 Retro DOS v3.0
 31769                                  	;cmp	[di+4],ah
 31770 00005B48 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 31771 00005B4B 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 31772 00005B4D 38C4                    	CMP	AH,AL			; 
 31773 00005B4F 7406                    	JZ	short DOBUFFER		; do this buffer
 31774                                  	;cmp	al,[di+4]
 31775 00005B51 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31776 00005B54 F8                      	CLC
 31777 00005B55 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 31778                                  DOBUFFER:
 31779                                  	;test	byte [di+5],40h
 31780 00005B57 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31781 00005B5B 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 31782 00005B5D 50                      	PUSH	AX
 31783                                  	;push	word [di+4]
 31784 00005B5E FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 31785 00005B61 E80B00                  	CALL	BUFWRITE
 31786 00005B64 58                      	POP	AX
 31787 00005B65 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 31788                                  	;and	ah,0BFh
 31789 00005B67 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 31790                                  	;mov	[di+4],ax
 31791 00005B6A 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 31792                                  LEAVE_BUF:
 31793 00005B6D 58                      	POP	AX			; Search info
 31794                                  checkflush_retn:
 31795 00005B6E C3                      	retn
 31796                                  
 31797                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 31798                                  ;----------------------------------------------------------------------------
 31799                                  ;
 31800                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 31801                                  ;
 31802                                  ;	ENTRY	DS:DI Points to the buffer
 31803                                  ;
 31804                                  ;	EXIT	Buffer marked free
 31805                                  ;		Carry set if error (currently user FAILed to I 24)
 31806                                  ;
 31807                                  ;	USES	All buf DS:DI
 31808                                  ;		HIGH_SECTOR
 31809                                  ;----------------------------------------------------------------------------
 31810                                  
 31811                                  	; 20/05/2019 - Retro DOS v4.0
 31812                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 31813                                  
 31814                                  
 31815                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31816                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 31817                                  
 31818                                  BUFWRITE:
 31819                                  	; 10/09/2018
 31820                                  	; 01/08/2018 - Retro DOS v3.0
 31821                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 31822 00005B6F B8FF00                  	MOV	AX,00FFH
 31823                                  	;xchg	ax,[di+4]
 31824 00005B72 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 31825 00005B75 3CFF                    	CMP	AL,0FFH
 31826 00005B77 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 31827                                  	;test	ah,40h
 31828 00005B79 F6C440                  	test	AH,buf_dirty
 31829 00005B7C 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 31830                                  	; MSDOS 6.0
 31831 00005B7E E89400                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 31832                                  
 31833                                  ;hkn; SS override
 31834 00005B81 363A06[2203]            	CMP	AL,[SS:WPERR]
 31835 00005B86 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 31836                                  
 31837                                  ;hkn; SS override
 31838                                  	; MSDOS 6.0
 31839 00005B88 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 31840                                  	
 31841                                  	;;les	bp,[di+10] ; MSDOS 3.3
 31842                                  	;les	bp,[di+13] ; MSDOS 6.0
 31843 00005B8C C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 31844                                  	;;lea	bx,[di+16]
 31845                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31846 00005B8F 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 31847                                  	;mov	dx,[di+6]
 31848 00005B92 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 31849                                  	
 31850                                  	; MSDOS 6.0
 31851                                  	;mov	cx,[di+8]
 31852 00005B95 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 31853                                  
 31854                                  ;hkn; SS override
 31855 00005B98 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 31856 00005B9D 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 31857                                  	; MSDOS 3.3
 31858                                  	;; mov	cx,[DI+8]
 31859                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 31860                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 31861 00005BA0 30ED                    	XOR	CH,CH
 31862                                  	;;mov	ah,ch ; MSDOS 3.3
 31863                                  
 31864                                  ;hkn; SS override for ALLOWED
 31865                                  	;mov	byte [SS:ALLOWED],18h
 31866 00005BA2 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 31867                                  	;test	byte [di+5],8
 31868                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 31869                                  	;test	ah,8
 31870 00005BA8 F6C408                  	test	AH,buf_isDATA
 31871 00005BAB 7406                    	JZ	short NO_IGNORE
 31872                                  	;or	byte [SS:ALLOWED],20h
 31873 00005BAD 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 31874                                  NO_IGNORE:
 31875                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 31876                                  	; MSDOS 6.0
 31877                                  	;mov	ax,[di+11]
 31878 00005BB3 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 31879                                  
 31880 00005BB6 57                      	PUSH	DI		; Save buffer pointer
 31881 00005BB7 31FF                    	XOR	DI,DI		; Indicate failure
 31882                                  
 31883 00005BB9 1E                      	push	ds ; *
 31884 00005BBA 53                      	push	bx ; **
 31885                                  WRTAGAIN:
 31886 00005BBB 57                      	push	di ; ***
 31887 00005BBC 51                      	push	cx ; ****
 31888 00005BBD 50                      	push	ax ; *****
 31889                                  	;MOV	CX,1
 31890                                  	; 17/12/2022
 31891                                  	; ch = 0
 31892 00005BBE B101                    	mov	cl,1 ; 24/07/2019
 31893                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31894                                  	;mov	cx,1
 31895 00005BC0 53                      	push	bx ; ******
 31896 00005BC1 52                      	push	dx ; *******
 31897 00005BC2 1E                      	push	ds ; ********
 31898                                  
 31899                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 31900                                  
 31901                                  	; MSDOS 6.0
 31902 00005BC3 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 31903 00005BC9 7418                    	jz	short NBUFFINHMA
 31904 00005BCB 51                      	push	cx
 31905 00005BCC 06                      	push	es
 31906 00005BCD 89DE                    	mov	si,bx
 31907 00005BCF 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 31908 00005BD3 D1E9                    	shr	cx,1
 31909 00005BD5 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 31910 00005BDA 89FB                    	mov	bx,di
 31911 00005BDC FC                      	cld
 31912 00005BDD F3A5                    	rep	movsw
 31913 00005BDF 06                      	push	es
 31914 00005BE0 1F                      	pop	ds
 31915 00005BE1 07                      	pop	es
 31916 00005BE2 59                      	pop	cx
 31917                                  NBUFFINHMA:
 31918 00005BE3 E8FCDB                  	call	DWRITE		; Write out the dirty buffer
 31919 00005BE6 1F                      	pop	ds ; ********
 31920 00005BE7 5A                      	pop	dx ; *******
 31921 00005BE8 5B                      	pop	bx ; ******
 31922 00005BE9 58                      	pop	ax ; *****
 31923 00005BEA 59                      	pop	cx ; ****
 31924 00005BEB 5F                      	pop	di ; ***
 31925 00005BEC 7201                    	JC	short NOSET
 31926 00005BEE 47                      	INC	DI		; If at least ONE write succeedes, the operation
 31927                                  NOSET:				;	succeedes.
 31928 00005BEF 01C2                    	ADD	DX,AX
 31929 00005BF1 E2C8                    	LOOP	WRTAGAIN
 31930 00005BF3 5B                      	pop	bx ; **
 31931 00005BF4 1F                      	pop	ds ; *
 31932 00005BF5 09FF                    	OR	DI,DI		; Clears carry
 31933 00005BF7 7501                    	JNZ	short BWROK	; At least one write worked
 31934 00005BF9 F9                      	STC			; DI never got INCed, all writes failed.
 31935                                  BWROK:	
 31936 00005BFA 5F                      	POP	DI
 31937 00005BFB C3                      	retn
 31938                                  
 31939                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 31940                                  ;----------------------------------------------------------------------------
 31941                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 31942                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 31943                                  ;	SC_DRIVE even if SC is disabled to save the testing
 31944                                  ;	code and time
 31945                                  ;
 31946                                  ;	ENTRY	ES:BP = drive parameter block
 31947                                  ;
 31948                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 31949                                  ;		[SC_DRIVE]= drive #
 31950                                  ;
 31951                                  ;	USES	Flags
 31952                                  ;----------------------------------------------------------------------------
 31953                                  
 31954                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31955                                  ; 04/05/2019 - Retro DOS v4.0
 31956                                  
 31957                                  SET_RQ_SC_PARMS:
 31958                                  ;hkn; SS override for all variables used in this procedure.
 31959 00005BFC 50                      	push	ax
 31960                                  	;mov	ax,[es:bp+2]
 31961 00005BFD 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 31962 00005C01 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 31963                                  	;;mov	al,[es:bp+0]
 31964                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31965                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 31966                                  	; 15/12/2022
 31967 00005C05 268A4600                	mov	al,[ES:BP]
 31968 00005C09 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 31969 00005C0D 58                      	pop	ax
 31970                                  srspx:	
 31971 00005C0E C3                      	retn					;LB. return
 31972                                  
 31973                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 31974                                  ;----------------------------------------------------------------------------
 31975                                  ; Input:
 31976                                  ;	none
 31977                                  ; Function:
 31978                                  ;	increment dirty buffers count
 31979                                  ; Output:
 31980                                  ;	dirty buffers count is incremented
 31981                                  ;
 31982                                  ; All registers preserved
 31983                                  ;----------------------------------------------------------------------------
 31984                                  
 31985                                  INC_DIRTY_COUNT:
 31986                                  ;; BUGBUG  ---- remove this routine
 31987                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 31988 00005C0F 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 31989 00005C14 C3                      	retn
 31990                                  
 31991                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 31992                                  ;----------------------------------------------------------------------------
 31993                                  ; Input:
 31994                                  ;	none
 31995                                  ; Function:
 31996                                  ;	decrement dirty buffers count
 31997                                  ; Output:
 31998                                  ;	dirty buffers count is decremented
 31999                                  ;
 32000                                  ; All registers preserved
 32001                                  ;----------------------------------------------------------------------------
 32002                                  
 32003                                  DEC_DIRTY_COUNT:
 32004 00005C15 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 32005 00005C1B 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 32006 00005C1D 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 32007                                  					; error condition to underflow here? ;hkn;
 32008                                  ddcx:	
 32009 00005C22 C3                      	retn
 32010                                  
 32011                                  ;============================================================================
 32012                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 32013                                  ;============================================================================
 32014                                  ; 02/08/2018 - Retro DOS v3.0
 32015                                  ; 29/04/2019 - Retro DOS v4.0
 32016                                  
 32017                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 32018                                  
 32019                                  ; Pseudo EXEC system call for DOS
 32020                                  
 32021                                  ;	TITLE	MSPROC - process maintenance
 32022                                  ;	NAME	MSPROC
 32023                                  
 32024                                  ; =========================================================================
 32025                                  ;**	Process related system calls and low level routines for DOS 2.X.
 32026                                  ;	I/O specs are defined in DISPATCH.
 32027                                  ;
 32028                                  ;	$WAIT
 32029                                  ;	$EXEC
 32030                                  ;	$Keep_process
 32031                                  ;	Stay_resident
 32032                                  ;	$EXIT
 32033                                  ;	$ABORT
 32034                                  ;	abort_inner
 32035                                  ;
 32036                                  ;	Modification history:
 32037                                  ;
 32038                                  ;		Created: ARR 30 March 1983
 32039                                  ;		AN000	version 4.0 jan. 1988
 32040                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 32041                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 32042                                  ;
 32043                                  ;		M000	added support for loading programs into UMBs 7/9/90
 32044                                  ;
 32045                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 32046                                  ;		       dossym.inc. 7/30/90
 32047                                  ;		M005 - Support for EXE programs with out STACK segment and 
 32048                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 32049                                  ;		       stack is provided at the end of the program. Note that
 32050                                  ;		       only SP is changed.
 32051                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 32052                                  ;
 32053                                  ;		M028 - 4b04 implementation
 32054                                  ;
 32055                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 32056                                  ;			in memory block >= 64K, sp = 0. If memory block
 32057                                  ;			obtained is <64K, point sp at the end of the memory
 32058                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 32059                                  ;			added for a stack segment which may be needed if it
 32060                                  ;			is loaded in low memory situations.
 32061                                  ;
 32062                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 32063                                  ;
 32064                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 32065                                  ;			a bad environment if it reached 32767 bytes. Changed
 32066                                  ;			to allow 32768 bytes of environment.
 32067                                  ;
 32068                                  ;		M047 - Release the allocated UMB when we failed to load a 
 32069                                  ;		       COM file high. Also ensure that if the biggest block
 32070                                  ;		       into which we load the com file is less than 64K then
 32071                                  ;		       we provide atleast 256 bytes of stack to the user.
 32072                                  ;
 32073                                  ;		M050 - Made Lie table search CASE insensitive
 32074                                  ;
 32075                                  ;		M060 - Removed special version table from the kernal and
 32076                                  ;                      put it in a device drive which puts the address
 32077                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 32078                                  ;		       as a DWORD.
 32079                                  ;
 32080                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 32081                                  ;		       entry do not try to load low if there is no space in
 32082                                  ;		       UMBs.
 32083                                  ;
 32084                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 32085                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 32086                                  ;		       change return address to LeaveDos if AL=5.
 32087                                  ;
 32088                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 32089                                  ;                      controls building a version of MSDOS.SYS that only
 32090                                  ;                      runs programs from a fixed list (defined in the
 32091                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 32092                                  ;                      for details.  This feature is used to build a
 32093                                  ;                      "special" version of DOS that can be handed out to
 32094                                  ;                      OEM/ISV customers as part of a "service" disk.
 32095                                  ;
 32096                                  ; =========================================================================
 32097                                  
 32098                                  ;SAVEXIT  EQU  10
 32099                                  
 32100                                  ;BREAK	<$WAIT - return previous process error code>
 32101                                  ; =========================================================================
 32102                                  ;	$WAIT - Return previous process error code.
 32103                                  ;
 32104                                  ;	Assembler usage:
 32105                                  ;
 32106                                  ;	    MOV     AH, WaitProcess
 32107                                  ;	    INT     int_command
 32108                                  ;
 32109                                  ;	ENTRY	none
 32110                                  ;	EXIT	(ax) = exit code
 32111                                  ;	USES	all
 32112                                  ; =========================================================================
 32113                                  
 32114                                  	; 20/05/2019 - Retro DOS v4.0
 32115                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 32116                                  
 32117                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32118                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 32119                                  _$WAIT:
 32120                                  	; 02/08/2018 - Retro DOS v3.0
 32121                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 32122                                  
 32123 00005C23 31C0                    	xor	AX,AX
 32124 00005C25 368706[3403]            	xchg	AX,[ss:exit_code]
 32125 00005C2A E957AA                  	jmp	SYS_RET_OK
 32126                                  
 32127                                  ; =========================================================================
 32128                                  ;BREAK <$exec - load/go a program>
 32129                                  ;	EXEC.ASM - EXEC System Call
 32130                                  ;
 32131                                  ;
 32132                                  ; Assembler usage:
 32133                                  ;	    lds     DX, Name
 32134                                  ;	    les     BX, Blk
 32135                                  ;	    mov     AH, Exec
 32136                                  ;	    mov     AL, FUNC
 32137                                  ;	    int     INT_COMMAND
 32138                                  ;
 32139                                  ;	AL  Function
 32140                                  ;	--  --------
 32141                                  ;	 0  Load and execute the program.
 32142                                  ;	 1  Load, create the program header but do not
 32143                                  ;	    begin execution.
 32144                                  ;	 3  Load overlay. No header created.
 32145                                  ;
 32146                                  ;	    AL = 0 -> load/execute program
 32147                                  ;
 32148                                  ;	    +---------------------------+
 32149                                  ;	    | WORD segment address of	|
 32150                                  ;	    | environment.		|
 32151                                  ;	    +---------------------------+
 32152                                  ;	    | DWORD pointer to ASCIZ	|
 32153                                  ;	    | command line at 80h	|
 32154                                  ;	    +---------------------------+
 32155                                  ;	    | DWORD pointer to default	|
 32156                                  ;	    | FCB to be passed at 5Ch	|
 32157                                  ;	    +---------------------------+
 32158                                  ;	    | DWORD pointer to default	|
 32159                                  ;	    | FCB to be passed at 6Ch	|
 32160                                  ;	    +---------------------------+
 32161                                  ;
 32162                                  ;	    AL = 1 -> load program
 32163                                  ;
 32164                                  ;	    +---------------------------+
 32165                                  ;	    | WORD segment address of	|
 32166                                  ;	    | environment.		|
 32167                                  ;	    +---------------------------+
 32168                                  ;	    | DWORD pointer to ASCIZ	|
 32169                                  ;	    | command line at 80h	|
 32170                                  ;	    +---------------------------+
 32171                                  ;	    | DWORD pointer to default	|
 32172                                  ;	    | FCB to be passed at 5Ch	|
 32173                                  ;	    +---------------------------+
 32174                                  ;	    | DWORD pointer to default	|
 32175                                  ;	    | FCB to be passed at 6Ch	|
 32176                                  ;	    +---------------------------+
 32177                                  ;	    | DWORD returned value of	|
 32178                                  ;	    | CS:IP			|
 32179                                  ;	    +---------------------------+
 32180                                  ;	    | DWORD returned value of	|
 32181                                  ;	    | SS:IP			|
 32182                                  ;	    +---------------------------+
 32183                                  ;
 32184                                  ;	    AL = 3 -> load overlay
 32185                                  ;
 32186                                  ;	    +---------------------------+
 32187                                  ;	    | WORD segment address where|
 32188                                  ;	    | file will be loaded.	|
 32189                                  ;	    +---------------------------+
 32190                                  ;	    | WORD relocation factor to |
 32191                                  ;	    | be applied to the image.	|
 32192                                  ;	    +---------------------------+
 32193                                  ;
 32194                                  ; Returns:
 32195                                  ;	    AX = error_invalid_function
 32196                                  ;	       = error_bad_format
 32197                                  ;	       = error_bad_environment
 32198                                  ;	       = error_not_enough_memory
 32199                                  ;	       = error_file_not_found
 32200                                  ; =========================================================================
 32201                                  ;
 32202                                  ;   Revision history:
 32203                                  ;
 32204                                  ;	 A000	version 4.00  Jan. 1988
 32205                                  ;
 32206                                  ; =========================================================================
 32207                                  
 32208                                  Exec_Internal_Buffer		EQU	OPENBUF
 32209                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 32210                                  
 32211                                  ; =========================================================================
 32212                                  
 32213                                  ;IF1		; warning message on buffers
 32214                                  ;%out	Please make sure that the following are contiguous and of the
 32215                                  ;%out	following sizes:
 32216                                  ;%out
 32217                                  ;%out	OpenBuf     128
 32218                                  ;%out	RenBuf	    128
 32219                                  ;%out	SearchBuf    53
 32220                                  ;%out	DummyCDS    curdirLen
 32221                                  ;ENDIF
 32222                                  
 32223                                  ; =========================================================================
 32224                                  
 32225                                  ; =========================================================================
 32226                                  ;
 32227                                  ; =========================================================================
 32228                                  
 32229                                  	; 20/05/2019 - Retro DOS v4.0
 32230                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 32231                                  
 32232                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32233                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 32234                                  	
 32235                                  _$EXEC:
 32236                                  	; 02/08/2018 - Retro DOS v3.0
 32237                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 32238                                  
 32239                                  EXEC001S:
 32240                                  	;LocalVar    Exec_Blk		,DWORD
 32241                                  	;LocalVar    Exec_Func		,BYTE
 32242                                  	;LocalVar    Exec_Load_High	,BYTE
 32243                                  	;LocalVar    Exec_FH		,WORD
 32244                                  	;LocalVar    Exec_Rel_Fac	,WORD
 32245                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 32246                                  	;LocalVar    Exec_Environ	,WORD
 32247                                  	;LocalVar    Exec_Size		,WORD
 32248                                  	;LocalVar    Exec_Load_Block	,WORD
 32249                                  	;LocalVar    Exec_DMA		,WORD
 32250                                  	;LocalVar    ExecNameLen 	,WORD
 32251                                  	;LocalVar    ExecName		,DWORD
 32252                                  	;
 32253                                  	;LocalVar    Exec_DMA_Save	,WORD
 32254                                  	;LocalVar    Exec_NoStack	,BYTE
 32255                                  
 32256                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32257                                  	;%define	Exec_Blk	dword [bp-4]
 32258                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 32259                                  	%define		Exec_BlkL	word [bp-4]	
 32260                                  	%define		Exec_BlkH	word [bp-2]
 32261                                  	%define		Exec_Func	byte [bp-5]
 32262                                  	%define		Exec_Load_High	byte [bp-6]
 32263                                  	%define		Exec_FH		word [bp-8]
 32264                                  	%define		Exec_Rel_Fac	word [bp-10]
 32265                                  	%define		Exec_Res_Len_Para word [bp-12]
 32266                                  	%define		Exec_Environ	word [bp-14]
 32267                                  	%define		Exec_Size	word [bp-16]
 32268                                  	%define		Exec_Load_Block	word [bp-18]
 32269                                  	%define		Exec_DMA	word [bp-20]
 32270                                  	%define		ExecNameLen	word [bp-22]
 32271                                  	;%define	ExecName	dword [bp-26]
 32272                                  	%define		ExecName	[bp-26] ; 09/08/2018
 32273                                  	%define		ExecNameL	word [bp-26]	
 32274                                  	%define		ExecNameH	word [bp-24]
 32275                                  	; MSDOS 6.0
 32276                                  	%define		Exec_DMA_Save	word [bp-28]
 32277                                  	%define		Exec_NoStack	byte [bp-29]
 32278                                  	
 32279                                  	; ==================================================================
 32280                                  	; validate function
 32281                                  	; ==================================================================
 32282                                  		      	
 32283                                  	; M068 - Start
 32284                                  	;
 32285                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 32286                                  	; possibility that the count may not be decremented all the way to
 32287                                  	; 0. A typical case is if the program for which we intended to keep 
 32288                                  	; the A20 off for a sufficiently long time (A20OFF_COUNT int 21 
 32289                                  	; calls), exits pre-maturely due to error conditions.
 32290                                  
 32291                                  	; MSDOS 6.0
 32292 00005C2D 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 32293                                  
 32294                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 32295                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 32296                                  	; bit set in DOS_FLAG by ExecReady is not cleared in msdisp.asm
 32297                                  
 32298 00005C33 3C05                    	cmp	al,5			; Q: is this ExecReady call
 32299                                  	;jne	short @f
 32300 00005C35 7505                    	jne	short Exec_@f		; N: continue
 32301                                  					; Y: change ret addr. to LeaveDos.
 32302 00005C37 59                      	pop	cx			; Note CX is not input to ExecReady
 32303 00005C38 B9[4C04]                	mov	cx,LeaveDOS
 32304 00005C3B 51                      	push	cx
 32305                                  ;@@:
 32306                                  Exec_@f:
 32307                                  	; M068 - End
 32308                                  	
 32309                                  	;Enter
 32310                                  
 32311 00005C3C 55                      	push	bp
 32312 00005C3D 89E5                    	mov	bp,sp
 32313                                  	;;sub	sp,26	; MSDOS 3.3
 32314                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 32315                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 32316                                  	; 17/12/2022
 32317                                  	; 20/05/2019
 32318 00005C3F 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 32319                                  
 32320                                  	; MSDOS 6.0
 32321 00005C42 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 32322                                  					; M030
 32323 00005C44 7614                    	jna	short Exec_Check_2
 32324                                  
 32325                                  	; MSDOS 3.3
 32326                                  	;cmp	AL,3
 32327                                  	;jna	short Exec_Check_2
 32328                                  
 32329                                  Exec_Bad_Fun:
 32330 00005C46 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 32331                                  					; Extended Error Locus	;smr;SS Override
 32332                                  	;mov	al,1
 32333 00005C4C B001                    	mov	al,error_invalid_function
 32334                                  
 32335                                  Exec_Ret_Err:
 32336                                  	;Leave
 32337 00005C4E 89EC                    	mov	sp,bp
 32338 00005C50 5D                      	pop	bp
 32339                                  	;transfer SYS_RET_ERR
 32340 00005C51 E939AA                  	jmp	SYS_RET_ERR
 32341                                  
 32342                                  	; MSDOS 6.0
 32343                                  ExecReadyJ:
 32344 00005C54 E8CE17                  	call	ExecReady		; M028
 32345 00005C57 E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 32346                                  
 32347                                  Exec_Check_2:
 32348 00005C5A 3C02                    	cmp	AL,2			
 32349 00005C5C 74E8                    	je	short Exec_Bad_Fun
 32350                                  
 32351                                  	; MSDOS 6.0
 32352 00005C5E 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 32353 00005C60 74E4                    	je	short Exec_Bad_Fun
 32354                                  	
 32355 00005C62 3C05                    	cmp	al,5			; M028 ; M030
 32356 00005C64 74EE                    	je	short ExecReadyJ	; M028
 32357                                  
 32358                                  	;mov	[bp-4],bx
 32359 00005C66 895EFC                  	mov	Exec_BlkL,BX		; stash args
 32360                                  	;mov	[bp-2],es
 32361 00005C69 8C46FE                  	mov	Exec_BlkH,ES
 32362                                  	;mov	[bp-5],al
 32363 00005C6C 8846FB                  	mov	Exec_Func,AL
 32364                                  	;mov	byte [bp-6],0
 32365 00005C6F C646FA00                	mov	Exec_Load_High,0
 32366                                  
 32367                                  	;mov	[bp-26],dx
 32368 00005C73 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 32369                                  	;mov	[bp-24],ds
 32370 00005C76 8C5EE8                  	mov	ExecNameH,DS
 32371 00005C79 89D6                    	mov	SI,DX			; move pointer to convenient place
 32372                                  	;invoke	DStrLen
 32373 00005C7B E8F3B5                  	call	DStrLen
 32374                                  	;mov	[bp-22],cx
 32375 00005C7E 894EEA                  	mov	ExecNameLen,CX		; save length
 32376                                  
 32377                                  	; MSDOS 6.0
 32378 00005C81 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 32379 00005C85 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 32380                                  
 32381 00005C89 30C0                    	xor	AL,AL			; open for reading
 32382 00005C8B 55                      	push	BP
 32383                                  
 32384                                  	; MSDOS 6.0
 32385                                  	;or	byte [ss:DOS_FLAG],1
 32386 00005C8C 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 32387                                  					; the redir that this open call is
 32388                                  					; due to an exec.
 32389                                  
 32390                                  	;invoke	$OPEN			; is the file there?
 32391 00005C92 E80613                  	call	_$OPEN
 32392                                  
 32393                                  	; MSDOS 6.0
 32394 00005C95 9C                      	pushf
 32395                                  	; 02/06/2019
 32396                                  	;and	byte [ss:DOS_FLAG],0FEh
 32397 00005C96 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 32398 00005C9C 9D                      	popf
 32399                                  
 32400 00005C9D 5D                      	pop	BP
 32401                                  
 32402                                  	; MSDOS 3.3 & MSDOS 6.0
 32403 00005C9E 72AE                    	jc	short Exec_Ret_Err
 32404                                  
 32405                                  	;mov	[bp-8],ax
 32406 00005CA0 8946F8                  	mov	Exec_FH,AX
 32407 00005CA3 89C3                    	mov	BX,AX
 32408 00005CA5 30C0                    	xor	AL,AL
 32409                                  	;invoke	$Ioctl
 32410 00005CA7 E844C6                  	call	_$IOCTL
 32411 00005CAA 7207                    	jc	short Exec_BombJ
 32412                                  
 32413                                  	;test	dl,80h
 32414 00005CAC F6C280                  	test	DL,devid_ISDEV
 32415 00005CAF 740A                    	jz	short Exec_Check_Environ
 32416                                  
 32417                                  	;mov	al,2
 32418 00005CB1 B002                    	mov	AL,error_file_not_found
 32419                                  Exec_BombJ:
 32420 00005CB3 E9CA00                  	jmp	Exec_Bomb
 32421                                  
 32422                                  BadEnv:
 32423                                  	;mov	al,0Ah
 32424 00005CB6 B00A                    	mov	AL,error_bad_environment
 32425 00005CB8 E9C500                  	jmp	Exec_Bomb
 32426                                  
 32427                                  Exec_Check_Environ:
 32428                                  	;mov	word [bp-18],0
 32429 00005CBB C746EE0000              	mov	Exec_Load_Block,0
 32430                                  	;mov	word [bp-14],0
 32431 00005CC0 C746F20000              	mov	Exec_Environ,0
 32432                                  					; overlays... no environment
 32433                                  	;test	byte [bp-5],2
 32434 00005CC5 F646FB02                	test	Exec_Func,exec_func_overlay
 32435 00005CC9 7552                    	jnz	short Exec_Read_Header
 32436                                  
 32437                                  	;lds	si,[bp-4]
 32438 00005CCB C576FC                  	lds	SI,Exec_Blk		; get block
 32439 00005CCE 8B04                    	mov	ax,[SI]
 32440                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 32441 00005CD0 09C0                    	or	AX,AX
 32442 00005CD2 750C                    	jnz	short Exec_Scan_Env
 32443                                  
 32444 00005CD4 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 32445                                  	;mov	ax,[44]
 32446 00005CD9 A12C00                  	mov	AX,[PDB.ENVIRON]
 32447                                  
 32448                                  ; MSDOS 6.0
 32449                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 32450                                  ;
 32451                                  ; Exec_environ is being correctly initialized after the environment has been
 32452                                  ; allocated and copied form the parent's env. It must not be initialized here.
 32453                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 32454                                  ; parent's environment.
 32455                                  ;	mov	Exec_Environ,AX
 32456                                  ;
 32457                                  ;----------------------------------------------------------------------------
 32458                                  
 32459                                  	;mov	[bp-14],ax
 32460                                  	;mov	Exec_Environ,ax
 32461                                  
 32462 00005CDC 09C0                    	or	AX,AX
 32463 00005CDE 743D                    	jz	short Exec_Read_Header
 32464                                  
 32465                                  Exec_Scan_Env:
 32466 00005CE0 8EC0                    	mov	ES,AX
 32467 00005CE2 31FF                    	xor	DI,DI
 32468                                  	;mov	cx,7FFFh ; MSDOS 3.3
 32469 00005CE4 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 32470 00005CE7 30C0                    	xor	AL,AL
 32471                                  
 32472                                  Exec_Get_Environ_Len:
 32473 00005CE9 F2AE                    	repnz	scasb			; find that nul byte
 32474 00005CEB 75C9                    	jnz	short BadEnv
 32475                                  
 32476 00005CED 49                      	dec	CX			; Dec CX for the next nul byte test
 32477 00005CEE 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 32478                                  
 32479 00005CF0 AE                      	scasb				; is there another nul byte?
 32480 00005CF1 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 32481                                  
 32482 00005CF3 57                      	push	DI
 32483                                  	;lea	bx,[DI+11h]
 32484 00005CF4 8D5D11                  	lea	BX,[DI+0Fh+2]
 32485                                  	;add	bx,[bp-22]
 32486 00005CF7 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 32487                                  					; remember argv[0] length
 32488                                  					; round up and remember argc
 32489 00005CFA B104                    	mov	CL,4
 32490 00005CFC D3EB                    	shr	BX,CL			; number of paragraphs needed
 32491 00005CFE 06                      	push	ES
 32492                                  	;invoke	$Alloc			; can we get the space?
 32493 00005CFF E84306                  	call	_$ALLOC
 32494 00005D02 1F                      	pop	DS
 32495 00005D03 59                      	pop	CX
 32496                                  
 32497                                  	;jnc	short Exec_Save_Environ
 32498                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 32499                                  	; 17/12/2022
 32500 00005D04 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 32501                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32502                                  	;jnc	short Exec_Save_Environ
 32503                                  	;jmp	SHORT Exec_No_Mem
 32504                                  
 32505                                  Exec_Save_Environ:
 32506 00005D06 8EC0                    	mov	ES,AX
 32507                                  	;mov	[bp-14],ax
 32508 00005D08 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 32509 00005D0B 31F6                    	xor	SI,SI
 32510 00005D0D 89F7                    	mov	DI,SI
 32511 00005D0F F3A4                    	rep	movsb			; copy the environment
 32512 00005D11 B80100                  	mov	AX,1
 32513 00005D14 AB                      	stosw
 32514                                  	;lds	si,[bp-26]
 32515 00005D15 C576E6                  	lds	SI,ExecName
 32516                                  	;mov	cx,[bp-22]
 32517 00005D18 8B4EEA                  	mov	CX,ExecNameLen
 32518 00005D1B F3A4                    	rep	movsb
 32519                                  
 32520                                  Exec_Read_Header:
 32521                                  	; We read in the program header into the above data area and
 32522                                  	; determine where in this memory the image will be located.
 32523                                  
 32524                                  	;Context DS
 32525 00005D1D 16                      	push	ss
 32526 00005D1E 1F                      	pop	ds
 32527                                  	;mov	cx,26
 32528 00005D1F B91A00                  	mov	CX,exec_header_len	; header size
 32529 00005D22 BA[C80F]                	mov	DX,exec_signature
 32530 00005D25 06                      	push	ES
 32531 00005D26 1E                      	push	DS
 32532 00005D27 E88304                  	call	ExecRead
 32533 00005D2A 1F                      	pop	DS
 32534 00005D2B 07                      	pop	ES
 32535 00005D2C 7250                    	jc	short Exec_Bad_File
 32536                                  
 32537 00005D2E 09C0                    	or	AX,AX
 32538 00005D30 744C                    	jz	short Exec_Bad_File
 32539                                  	;cmp	ax,26
 32540 00005D32 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 32541 00005D35 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 32542                                  
 32543 00005D37 F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 32544 00005D3D 7504                    	jnz	short Exec_Check_Sig
 32545                                  
 32546                                  	;mov	byte [bp-6],0FFh
 32547 00005D3F C646FAFF                	mov	Exec_Load_High,-1
 32548                                  
 32549                                  Exec_Check_Sig:
 32550 00005D43 A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 32551                                  	;cmp	ax,5A4Dh ; 'MZ'
 32552 00005D46 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 32553 00005D49 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32554                                  
 32555                                  	;cmp	ax,4D5Ah ; 'ZM'
 32556 00005D4B 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 32557 00005D4E 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32558                                  
 32559                                  Exec_Com_Filej:
 32560 00005D50 E9E901                  	jmp	Exec_Com_File
 32561                                  
 32562                                  	; We have the program header... determine memory requirements
 32563                                  
 32564                                  Exec_Save_Start:
 32565 00005D53 A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 32566 00005D56 B105                    	mov	CL,5			; convert to paragraphs
 32567 00005D58 D3E0                    	shl	AX,CL
 32568 00005D5A 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 32569                                  	;mov	[bp-12],ax
 32570 00005D5E 8946F4                  	mov	Exec_Res_Len_Para,AX
 32571                                  
 32572                                  		; Do we need to allocate memory?
 32573                                  		; Yes if function is not load-overlay
 32574                                  
 32575                                  	;test	byte [bp-5],2
 32576 00005D61 F646FB02                	test	Exec_Func,exec_func_overlay
 32577 00005D65 7445                    	jz	short Exec_Allocate	; allocation of space
 32578                                  
 32579                                  		; get load address from block
 32580                                  
 32581                                  	;les	di,[bp-4]
 32582 00005D67 C47EFC                  	les	DI,Exec_Blk
 32583 00005D6A 268B05                  	mov	ax,[es:di]
 32584                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 32585                                  	;mov	[bp-20],ax
 32586 00005D6D 8946EC                  	mov	Exec_DMA,AX
 32587                                  
 32588                                  	; 17/12/2022
 32589                                  	;;mov	ax,[es:di+2]
 32590                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 32591                                  	;;mov	[bp-10],ax
 32592                                  	;mov	Exec_Rel_Fac,AX
 32593                                  
 32594                                  	; 17/12/2022
 32595                                  	; 30/11/2022 (!most proper code!)
 32596                                  	;mov	dx,[es:di+2]
 32597 00005D70 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 32598                                  	;mov	[bp-10],dx
 32599 00005D74 8956F6                  	mov	Exec_Rel_Fac,dx
 32600                                  	; ax = Exec_DMA
 32601 00005D77 E9DE00                  	jmp	Exec_Find_Res
 32602                                  
 32603                                  ; 17/12/2022
 32604                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32605                                  ; 27/09/2023
 32606                                  %if 0
 32607                                  	; 02/06/2019 - Retro DOS v4.0
 32608                                  	;mov	ax,[bp-20]  ; *+*
 32609                                  	mov	AX,Exec_DMA ; *+*
 32610                                  	; 10/08/2018
 32611                                  	jmp	Exec_Find_Res		; M000
 32612                                  %endif
 32613                                  
 32614                                  Exec_No_Mem:
 32615                                  	;mov	al,8
 32616 00005D7A B008                    	mov	AL,error_not_enough_memory
 32617 00005D7C EB02                    	jmp	short Exec_Bomb
 32618                                  
 32619                                  Exec_Bad_File:
 32620                                  	;mov	al,0Bh
 32621 00005D7E B00B                    	mov	AL,error_bad_format
 32622                                  
 32623                                  Exec_Bomb:
 32624                                  	;mov	bx,[bp-8]
 32625 00005D80 8B5EF8                  	mov	BX,Exec_FH
 32626 00005D83 E84004                  	call	Exec_Dealloc
 32627                                  	;LeaveCrit CritMem
 32628 00005D86 E81AB6                  	call	LCritMEM
 32629                                  	;save	<AX,BP>
 32630 00005D89 50                      	push	ax
 32631 00005D8A 55                      	push	bp
 32632                                  	;invoke	$CLOSE
 32633 00005D8B E83B0A                  	call	_$CLOSE
 32634                                  	;restore <BP,AX>
 32635 00005D8E 5D                      	pop	bp
 32636 00005D8F 58                      	pop	ax
 32637 00005D90 E9BBFE                  	jmp	Exec_Ret_Err
 32638                                  
 32639                                  Exec_Chk_Mem: 
 32640                                  
 32641                                  ; 17/12/2022
 32642                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32643                                  ;%if 0
 32644                                  	; MSDOS 6.0    			; M063 - Start
 32645                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32646                                  	; 10/06/2019
 32647 00005D93 A0[0203]                	mov	al,[AllocMethod]
 32648                                  	;mov	bl,[ss:ALLOCMSAVE]
 32649 00005D96 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 32650                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 32651 00005D9A 881E[0203]              	mov	[AllocMethod],bl
 32652                                  	
 32653 00005D9E F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32654 00005DA1 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32655                                  	;				; N: continue
 32656                                  	;
 32657 00005DA3 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32658 00005DA5 74D3                    	jz	short Exec_No_Mem	; N: no memory
 32659                                  	; 02/06/2019
 32660                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32661 00005DA7 A1[8A00]                	mov	ax,[SAVE_AX]
 32662                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 32663                                  					; M063 - End
 32664 00005DAA EB2B                    	jmp	short Exec_Norm_Alloc1
 32665                                  ;%endif
 32666                                  
 32667                                  ; 17/12/2022
 32668                                  %if 0
 32669                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32670                                  	; MSDOS 6.0    			; M063 - Start
 32671                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32672                                  	mov	bl,[ss:ALLOCMSAVE]
 32673                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32674                                  
 32675                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32676                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32677                                  	;				; N: continue
 32678                                  	;
 32679                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32680                                  	jz	short Exec_No_Mem	; N: no memory
 32681                                  
 32682                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32683                                  	jmp	short Exec_Norm_Alloc	;    Try again
 32684                                  					; M063 - End
 32685                                  %endif
 32686                                  
 32687                                  Exec_Allocate:
 32688                                  	; 09/09/2018
 32689                                  
 32690                                  	; M005 - START
 32691                                  	; If there is no STACK segment for this exe file and if this
 32692                                  	; not an overlay and the resident size is less than 64K - 
 32693                                  	; 256 bytes we shall add 256 bytes to the programs 
 32694                                  	; resident memory requirement and set Exec_SP to this value.
 32695                                  	
 32696                                  	; 17/12/2022
 32697 00005DAC 29DB                    	sub	bx,bx ; 0	
 32698                                  
 32699                                  	; MSDOS 6.0
 32700                                  	;;mov	byte [bp-29],0
 32701                                  	;mov	Exec_NoStack,0
 32702                                  	; 17/12/2022
 32703 00005DAE 885EE3                  	mov	Exec_NoStack,bl ; 0
 32704 00005DB1 391E[D60F]              	cmp	[exec_SS],bx ; 0
 32705                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 32706 00005DB5 7511                    	jne	short ea1		; Y: continue normal processing
 32707 00005DB7 391E[D80F]              	cmp	[exec_SP],bx ; 0
 32708                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 32709 00005DBB 750B                    	jne	short ea1		; Y: continue normal processing
 32710                                  
 32711                                  	;inc	byte [bp-29]
 32712 00005DBD FE46E3                  	inc	Exec_NoStack
 32713 00005DC0 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 32714 00005DC3 7303                    	jae	short ea1		; Y: don't set Exec_SP
 32715                                  
 32716 00005DC5 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 32717                                  ea1:
 32718                                  	; M005 - END
 32719                                  
 32720                                  	; MSDOS 6.0			; M000 - start
 32721                                  	; 20/05/2019
 32722                                  	; (ds = ss = DOSDATA)
 32723 00005DC8 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 32724                                  					; Q: is the alloc strat high_first
 32725 00005DCD 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 32726                                  					; Y: set high_only bit
 32727 00005DCF 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 32728                                  					; M000 - end
 32729                                  Exec_Norm_Alloc:
 32730 00005DD4 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd
 32731                                  Exec_Norm_Alloc1:	; 02/06/2019
 32732                                  					; M000: attempt at allocating memory
 32733                                  	; MSDOS 3.3
 32734                                  	;push	ax			; M000
 32735                                  
 32736 00005DD7 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 32737 00005DDA 1E                      	push	DS
 32738                                  	;invoke	$Alloc			; should have carry set and BX has max
 32739 00005DDB E86705                  	call	_$ALLOC
 32740 00005DDE 1F                      	pop	DS
 32741                                  
 32742                                  	; MSDOS 6.0
 32743 00005DDF A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 32744                                  	; MSDOS 3.3
 32745                                  	;pop	ax			; M000
 32746                                  
 32747 00005DE2 83C010                  	add	AX,10h			; room for header
 32748 00005DE5 83FB11                  	cmp	BX,11h			; enough room for a header
 32749                                  	; MSDOS 6.0
 32750 00005DE8 72A9                    	jb	short Exec_Chk_Mem	; M000
 32751                                  	; MSDOS 3.3	
 32752                                  	;jb	short Exec_No_Mem
 32753                                  
 32754 00005DEA 39D8                    	cmp	AX,BX			; is there enough for bare image?
 32755                                  	; MSDOS 6.0
 32756 00005DEC 77A5                    	ja	short Exec_Chk_Mem	; M000
 32757                                  	; MSDOS 3.3
 32758                                  	;ja	short Exec_No_Mem
 32759                                  
 32760                                  	;test	byte [bp-6],0FFh
 32761 00005DEE F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 32762 00005DF2 7518                    	jnz	short Exec_BX_Max	; use max
 32763                                  
 32764                                  	; 09/09/2018
 32765                                  
 32766 00005DF4 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 32767                                  	; MSDOS 6.0
 32768 00005DF8 7299                    	jc	short Exec_Chk_Mem	; M000
 32769                                  	; MSDOS 3.3
 32770                                  	;jc	short Exec_No_Mem
 32771                                  
 32772 00005DFA 39D8                    	cmp	AX,BX			; enough space?
 32773                                  	; MSDOS 6.0
 32774 00005DFC 7795                    	ja	short Exec_Chk_Mem	; M000: nope...
 32775                                  	; MSDOS 3.3
 32776                                  	;ja	short Exec_No_Mem
 32777                                  
 32778 00005DFE 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 32779 00005E02 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 32780 00005E06 7204                    	jc	short Exec_BX_Max
 32781                                  
 32782 00005E08 39D8                    	cmp	AX,BX
 32783 00005E0A 7602                    	jbe	short Exec_Got_Block
 32784                                  
 32785                                  Exec_BX_Max:
 32786 00005E0C 89D8                    	mov	AX,BX
 32787                                  
 32788                                  Exec_Got_Block:
 32789                                  	; 03/08/2018 - Retro DOS v3.0
 32790                                  
 32791 00005E0E 1E                      	push	DS
 32792 00005E0F 89C3                    	mov	BX,AX
 32793                                  	;mov	[bp-16],bx
 32794 00005E11 895EF0                  	mov	Exec_Size,BX
 32795                                  	;invoke	$Alloc			; get the space
 32796 00005E14 E82E05                  	call	_$ALLOC
 32797 00005E17 1F                      	pop	DS
 32798                                  	; MSDOS 6.0
 32799                                  	;jc	short Exec_Chk_Mem	; M000
 32800                                  	; MSDOS 3.3
 32801                                  	;;jc	short Exec_No_Mem
 32802                                  	; 20/05/2019
 32803 00005E18 7303                    	jnc	short ea0
 32804 00005E1A E976FF                  	jmp	Exec_Chk_Mem
 32805                                  ea0:
 32806                                  	; MSDOS 6.0
 32807 00005E1D 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 32808 00005E21 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 32809                                  
 32810                                  ;M029; Begin changes
 32811                                  ; This code does special handling for programs with no stack segment. If so,
 32812                                  ;check if the current block is larger than 64K. If so, we do not modify
 32813                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 32814                                  ;case Exec_SS is not changed.
 32815                                  
 32816                                  	; MSDOS 6.0
 32817                                  	;cmp	byte [bp-29],0
 32818 00005E25 807EE300                	cmp	Exec_NoStack,0
 32819                                  	;je	@f
 32820 00005E29 7412                    	je	short ea2
 32821                                  
 32822 00005E2B 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 32823                                  	;jae	@f			; Y: Exec_SP = 0
 32824 00005E2F 730C                    	jae	short ea2
 32825                                  
 32826                                  ;Make Exec_SP point at the top of the memory block
 32827                                  
 32828 00005E31 B104                    	mov	cl,4
 32829 00005E33 D3E3                    	shl	bx,cl			; get byte offset
 32830 00005E35 81EB0001                	sub	bx,100h			; take care of PSP
 32831 00005E39 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 32832                                  ea2:
 32833                                  ;@@:
 32834                                  ;M029; end changes
 32835                                  
 32836                                  	;mov	[bp-18],ax
 32837 00005E3D 8946EE                  	mov	Exec_Load_Block,AX
 32838 00005E40 83C010                  	add	AX,10h
 32839                                  	;test	byte [bp-6],0FFh
 32840 00005E43 F646FAFF                	test	Exec_Load_High,-1
 32841 00005E47 7409                    	jz	short Exec_Use_AX	; use ax for load info
 32842                                  
 32843                                  	;add	ax,[bp-16]
 32844 00005E49 0346F0                  	add	AX,Exec_Size		; go to end
 32845                                  	;sub	ax,[bp-12]
 32846 00005E4C 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 32847 00005E4F 83E810                  	sub	AX,10h			; drop off pdb
 32848                                  
 32849                                  Exec_Use_AX:
 32850                                  	;mov	[bp-10],ax
 32851 00005E52 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 32852                                  	;mov	[bp-20],ax
 32853 00005E55 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 32854                                  
 32855                                  	; Determine the location in the file of the beginning of
 32856                                  	; the resident
 32857                                  
 32858                                  ; 17/12/2022
 32859                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32860                                  ;%if 0
 32861                                  
 32862                                  Exec_Find_Res:
 32863                                  	; MSDOS 6.0
 32864                                  	;;mov	dx,[bp-20]
 32865                                  	;mov	DX,Exec_DMA ; *+*
 32866                                  	;;mov	[bp-28],dx
 32867                                  	;mov	Exec_DMA_Save,DX
 32868                                  
 32869                                  	; 17/12/2022
 32870                                  	; AX = Exec_DMA
 32871                                  
 32872                                  	; 02/06/2019 - Retro DOS v4.0
 32873                                  	;mov	[bp-28],ax ; *+*
 32874 00005E58 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 32875                                  
 32876                                  ;%endif
 32877                                  
 32878                                  ; 17/12/2022
 32879                                  %if 0
 32880                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32881                                  Exec_Find_Res:
 32882                                  	;mov	dx,[bp-20]
 32883                                  	mov	DX,Exec_DMA ; *+*
 32884                                  	;mov	[bp-28],dx
 32885                                  	mov	Exec_DMA_Save,DX
 32886                                  %endif
 32887                                  
 32888                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32889 00005E5B 8B16[D00F]              	mov	DX,[exec_par_dir]
 32890 00005E5F 52                      	push	DX
 32891 00005E60 B104                    	mov	CL,4
 32892 00005E62 D3E2                    	shl	DX,CL			; low word of location
 32893 00005E64 58                      	pop	AX
 32894 00005E65 B10C                    	mov	CL,12
 32895 00005E67 D3E8                    	shr	AX,CL			; high word of location
 32896 00005E69 89C1                    	mov	CX,AX			; CX <- high
 32897                                  
 32898                                  		; Read in the resident image (first, seek to it)
 32899                                  	;mov	bx,[bp-8]
 32900 00005E6B 8B5EF8                  	mov	BX,Exec_FH
 32901 00005E6E 1E                      	push	DS
 32902 00005E6F 30C0                    	xor	AL,AL
 32903                                  	;invoke	$Lseek			; Seek to resident
 32904 00005E71 E8CF0A                  	call	_$LSEEK
 32905 00005E74 1F                      	pop	DS
 32906 00005E75 7303                    	jnc	short Exec_Big_Read
 32907                                  
 32908 00005E77 E906FF                  	jmp	Exec_Bomb
 32909                                  
 32910                                  Exec_Big_Read:				; Read resident into memory
 32911                                  	;mov	bx,[bp-12]
 32912 00005E7A 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 32913 00005E7D 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 32914 00005E81 7203                    	jb	short Exec_Read_OK
 32915                                  
 32916 00005E83 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 32917                                  
 32918                                  Exec_Read_OK:
 32919                                  	;sub	[bp-12],bx
 32920 00005E86 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 32921 00005E89 53                      	push	BX
 32922 00005E8A B104                    	mov	CL,4
 32923 00005E8C D3E3                    	shl	BX,CL			; Get count in bytes from paras
 32924 00005E8E 89D9                    	mov	CX,BX			; Count in correct register
 32925 00005E90 1E                      	push	DS
 32926                                  	;mov	ds,[bp-20]
 32927 00005E91 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 32928                                  
 32929 00005E94 31D2                    	xor	DX,DX
 32930 00005E96 51                      	push	CX			; Save our count
 32931 00005E97 E81303                  	call	ExecRead
 32932 00005E9A 59                      	pop	CX			; Get old count to verify
 32933 00005E9B 1F                      	pop	DS
 32934 00005E9C 7248                    	jc	short Exec_Bad_FileJ
 32935                                  
 32936 00005E9E 39C1                    	cmp	CX,AX			; Did we read enough?
 32937 00005EA0 5B                      	pop	BX			; Get paragraph count back
 32938 00005EA1 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 32939                                  
 32940                                  	; The read did not match the request. If we are off by 512
 32941                                  	; bytes or more then the header lied and we have an error.
 32942                                  
 32943 00005EA3 29C1                    	sub	CX,AX
 32944 00005EA5 81F90002                	cmp	CX,512
 32945 00005EA9 733B                    	jae	short Exec_Bad_FileJ
 32946                                  
 32947                                  	; We've read in CX bytes... bump DTA location
 32948                                  
 32949                                  ExecCheckEnd:
 32950                                  	;add	[bp-20],bx
 32951 00005EAB 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 32952                                  	;test	word [bp-12],0FFFFh
 32953 00005EAE F746F4FFFF              	test	Exec_Res_Len_Para,-1
 32954 00005EB3 75C5                    	jnz	short Exec_Big_Read
 32955                                  
 32956                                  	; The image has now been read in. We must perform relocation
 32957                                  	; to the current location.
 32958                                  
 32959                                  exec_do_reloc:
 32960                                  	;mov	cx,[bp-10]
 32961 00005EB5 8B4EF6                  	mov	CX,Exec_Rel_Fac
 32962 00005EB8 A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 32963 00005EBB 01C8                    	add	AX,CX			; and relocate him
 32964 00005EBD A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 32965                                  
 32966 00005EC0 A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 32967 00005EC3 A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 32968                                  
 32969 00005EC6 C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 32970 00005ECA A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 32971 00005ECD 8CC0                    	mov	AX,ES			; rms;NSS
 32972 00005ECF 01C8                    	add	AX,CX			; relocated...
 32973 00005ED1 A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 32974                                  
 32975 00005ED4 31C9                    	xor	CX,CX
 32976 00005ED6 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 32977                                  	;mov	bx,[bp-8]
 32978 00005EDA 8B5EF8                  	mov	BX,Exec_FH
 32979 00005EDD 1E                      	push	DS
 32980 00005EDE 31C0                    	xor	AX,AX
 32981                                  	;invoke	$Lseek
 32982 00005EE0 E8600A                  	call	_$LSEEK
 32983 00005EE3 1F                      	pop	DS
 32984 00005EE4 7303                    	jnc	short exec_get_entries
 32985                                  
 32986                                  Exec_Bad_FileJ:
 32987 00005EE6 E995FE                  	jmp	Exec_Bad_File
 32988                                  
 32989                                  exec_get_entries:
 32990 00005EE9 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 32991                                  
 32992                                  exec_read_reloc:
 32993 00005EED 52                      	push	DX
 32994                                  	;mov	dx,OPENBUF
 32995 00005EEE BA[BE03]                	mov	DX,Exec_Internal_Buffer
 32996                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 32997                                  	;mov	cx,396 ; MSDOS 6.0
 32998 00005EF1 B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 32999 00005EF4 1E                      	push	DS
 33000 00005EF5 E8B502                  	call	ExecRead
 33001 00005EF8 07                      	pop	ES
 33002 00005EF9 5A                      	pop	DX
 33003 00005EFA 72EA                    	jc	short Exec_Bad_FileJ
 33004                                  
 33005                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 33006                                  	;mov	cx,99 ;  MSDOS 6.0
 33007 00005EFC B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 33008                                  					; Pointer to byte location in header
 33009                                  	;mov	di,OPENBUF
 33010 00005EFF BF[BE03]                	mov	DI,Exec_Internal_Buffer
 33011                                  	;mov	si,[bp-10]
 33012 00005F02 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 33013                                  
 33014                                  exec_reloc_one:
 33015 00005F05 09D2                    	or	DX,DX			; Any more entries?
 33016 00005F07 7416                    	jz	short Exec_Set_PDBJ
 33017                                  
 33018                                  exec_get_addr:
 33019 00005F09 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 33020 00005F0C 8CD8                    	mov	AX,DS			; Relocate address of item
 33021                                  
 33022                                  	; MSDOS 6.0
 33023                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 33024                                  	;add	ax,[bp-28]
 33025 00005F0E 0346E4                  	add	AX,Exec_DMA_Save
 33026                                  
 33027 00005F11 8ED8                    	mov	DS,AX
 33028 00005F13 0137                    	add	[BX],SI
 33029 00005F15 83C704                  	add	DI,4
 33030 00005F18 4A                      	dec	DX
 33031 00005F19 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 33032                                  
 33033                                  	; We've exhausted a single buffer's worth. Read in the next
 33034                                  	; piece of the relocation table.
 33035                                  
 33036 00005F1B 06                      	push	ES
 33037 00005F1C 1F                      	pop	DS
 33038 00005F1D EBCE                    	jmp	short exec_read_reloc
 33039                                  
 33040                                  Exec_Set_PDBJ:
 33041                                  	; MSDOS 6.0
 33042                                  	
 33043                                  	; We now determine if this is a buggy exe packed file and if
 33044                                  	; so we patch in the right code. Note that fixexepatch will
 33045                                  	; point to a ret if dos loads low. The load segment as 
 33046                                  	; determined above will be in exec_dma_save
 33047                                  	
 33048 00005F1F 06                      	push	es
 33049 00005F20 50                      	push	ax			; M030
 33050 00005F21 51                      	push	cx			; M030
 33051                                  	;mov	es,[bp-28]
 33052 00005F22 8E46E4                  	mov	es,Exec_DMA_Save
 33053 00005F25 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 33054 00005F29 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 33055 00005F2E 36FF16[1212]            	call	word [ss:FixExePatch]
 33056                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33057                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 33058                                  	;call	word [ss:Rational386PatchPtr]
 33059 00005F33 59                      	pop	cx			; M030
 33060 00005F34 58                      	pop	ax			; M030
 33061 00005F35 07                      	pop	es
 33062                                  
 33063 00005F36 E9DE00                  	jmp	Exec_Set_PDB
 33064                                  
 33065                                  Exec_No_Memj:
 33066 00005F39 E93EFE                  	jmp	Exec_No_Mem
 33067                                  
 33068                                  	; we have a .COM file. First, determine if we are merely
 33069                                  	; loading an overlay.
 33070                                  
 33071                                  Exec_Com_File:
 33072                                  	;test	byte [bp-5],2
 33073 00005F3C F646FB02                	test	Exec_Func,exec_func_overlay
 33074 00005F40 742D                    	jz	short Exec_Alloc_Com_File
 33075                                  	;lds	si,[bp-4]
 33076 00005F42 C576FC                  	lds	SI,Exec_Blk		; get arg block
 33077 00005F45 AD                      	lodsw				; get load address
 33078                                  	;mov	[bp-20],ax
 33079 00005F46 8946EC                  	mov	Exec_DMA,AX
 33080 00005F49 B8FFFF                  	mov	AX,0FFFFh
 33081 00005F4C EB63                    	jmp	short Exec_Read_Block	; read it all!
 33082                                  
 33083                                  Exec_Chk_Com_Mem:			
 33084                                  	; MSDOS 6.0	     		; M063 - Start
 33085 00005F4E 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33086 00005F52 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 33087 00005F57 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33088 00005F5C F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33089 00005F5F 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 33090                                  					; N: continue
 33091                                  	
 33092 00005F61 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33093 00005F63 74D4                    	jz	short Exec_No_Memj	; N: no memory
 33094                                  	
 33095                                  	;mov	ax,[bp-18]
 33096 00005F65 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated
 33097 00005F68 31DB                    	xor	bx,bx			; M047: bx => free arena
 33098 00005F6A E87502                  	call	ChangeOwner		; M047: free this block
 33099                                  	
 33100 00005F6D EB0E                    	jmp	short Exec_Norm_Com_Alloc
 33101                                  					; M063 - End
 33102                                  	
 33103                                  	; We must allocate the max possible size block (ick!)
 33104                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 33105                                  	; size of block.
 33106                                  
 33107                                  Exec_Alloc_Com_File:
 33108                                  	; MSDOS 6.0			; M000 -start
 33109 00005F6F 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 33110                                  					; Q: is the alloc strat high_first
 33111 00005F75 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 33112                                  					; Y: set high_only bit
 33113 00005F77 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 33114                                  					; M000 - end
 33115                                  Exec_Norm_Com_Alloc:			; M000
 33116                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33117 00005F7D BBFFFF                  	mov	BX,0FFFFh
 33118                                  	;invoke	$Alloc			; largest piece available as error
 33119 00005F80 E8C203                  	call	_$ALLOC
 33120 00005F83 09DB                    	or	BX,BX
 33121                                  	; MSDOS 6.0
 33122 00005F85 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 33123                                  	; MSDOS 3.3
 33124                                  	;jz	short Exec_No_Memj
 33125                                  
 33126                                  	;mov	[bp-16],bx
 33127 00005F87 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 33128 00005F8A 53                      	push	BX
 33129                                  	;invoke	$ALLOC			; largest piece available
 33130 00005F8B E8B703                  	call	_$ALLOC
 33131 00005F8E 5B                      	pop	BX			; get size of block...
 33132                                  	;mov	[bp-18],ax
 33133 00005F8F 8946EE                  	mov	Exec_Load_Block,AX
 33134                                  
 33135 00005F92 83C010                  	add	AX,10h			; increment for header
 33136                                  	;mov	[bp-20],ax
 33137 00005F95 8946EC                  	mov	Exec_DMA,AX
 33138                                  
 33139 00005F98 31C0                    	xor	AX,AX			; presume 64K read...
 33140 00005F9A 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 33141 00005F9E 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 33142                                  
 33143 00005FA0 89D8                    	mov	AX,BX			; convert size to bytes
 33144 00005FA2 B104                    	mov	CL,4
 33145 00005FA4 D3E0                    	shl	AX,CL
 33146                                  	; 17/12/2022
 33147                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33148                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 33149                                  	; MSDOS 5.0
 33150                                  	;cmp	AX,100h   
 33151                                  	; 02/06/2019 - Retro DOS v4.0
 33152                                  	; MSDOS 6.0
 33153                                          ; 17/12/2022
 33154 00005FA6 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 33155 00005FA9 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33156                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 33157                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 33158                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33159                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 33160                                  
 33161                                  					; M047: size of the block is < 64K
 33162 00005FAB 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 33163                                  
 33164                                  Exec_Read_Com:
 33165                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33166 00005FAE 2D0001                  	sub	AX,100h 		; remember size of psp
 33167                                  Exec_Read_Block:
 33168 00005FB1 50                      	push	AX			; save number to read
 33169                                  	;mov	bx,[bp-8]
 33170 00005FB2 8B5EF8                  	mov	BX,Exec_FH		; of com file
 33171 00005FB5 31C9                    	xor	CX,CX			; but seek to 0:0
 33172 00005FB7 89CA                    	mov	DX,CX
 33173 00005FB9 31C0                    	xor	AX,AX			; seek relative to beginning
 33174                                  	;invoke	$Lseek			; back to beginning of file
 33175 00005FBB E88509                  	call	_$LSEEK
 33176 00005FBE 59                      	pop	CX			; number to read
 33177                                  	;mov	ds,[bp-20]
 33178 00005FBF 8E5EEC                  	mov	DS,Exec_DMA
 33179 00005FC2 31D2                    	xor	DX,DX
 33180 00005FC4 51                      	push	CX
 33181 00005FC5 E8E501                  	call	ExecRead
 33182 00005FC8 5E                      	pop	SI			; get number of bytes to read
 33183 00005FC9 7303                    	jnc	short OkRead
 33184 00005FCB E9B0FD                  	jmp	Exec_Bad_File
 33185                                  
 33186                                  	; 10/09/2018
 33187                                  OkRead:
 33188 00005FCE 39F0                    	cmp	AX,SI			; did we read them all?
 33189                                  	; MSDOS 6.0
 33190                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no
 33191                                  	; MSDOS 3.3
 33192                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 33193 00005FD0 7503                    	jne	short OkRead2
 33194 00005FD2 E979FF                  	jmp	Exec_Chk_Com_Mem
 33195                                  OkRead2:
 33196                                  	; MSDOS 6.0
 33197 00005FD5 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 33198 00005FDA 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 33199                                  
 33200                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33201                                  	;test	byte [bp-5],2
 33202 00005FDF F646FB02                	test	Exec_Func,exec_func_overlay
 33203 00005FE3 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 33204                                  
 33205                                  	;mov	ax,[bp-20]
 33206 00005FE5 8B46EC                  	mov	AX,Exec_DMA
 33207 00005FE8 83E810                  	sub	AX,10h
 33208 00005FEB 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 33209 00005FEF 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 33210                                  
 33211                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 33212                                  	; of 0 on stack.
 33213                                  
 33214 00005FF6 81C6FE00                	add	SI,0FEh 		; make room for stack
 33215                                  
 33216                                  	; MSDOS 6.0
 33217 00005FFA 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 33218 00005FFD 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 33219 00005FFF 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 33220                                  
 33221                                  Exec_St_Ok:
 33222                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33223 00006003 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 33224 00006008 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 33225 0000600C 8ED8                    	mov	DS,AX
 33226 0000600E C7040000                	mov	WORD [SI],0		; 0 for return
 33227                                  
 33228                                  	; MSDOS 6.0
 33229                                  
 33230                                  	; M068
 33231                                  	;
 33232                                  	; We now determine if this is a Copy Protected App. If so the
 33233                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to
 33234                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 33235                                  
 33236 00006012 36FF16[6100]            	call	word [ss:ChkCopyProt]
 33237                                  
 33238                                  Exec_Set_PDB:
 33239                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33240                                  	;mov	bx,[bp-8]
 33241 00006017 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 33242 0000601A E8A901                  	call	Exec_Dealloc
 33243 0000601D 55                      	push	BP
 33244                                  	;invoke	$Close			; release the jfn
 33245 0000601E E8A807                  	call	_$CLOSE
 33246 00006021 5D                      	pop	BP
 33247 00006022 E89301                  	call	Exec_Alloc
 33248                                  	;test	byte [bp-5],2
 33249 00006025 F646FB02                	test	Exec_Func,exec_func_overlay
 33250 00006029 743A                    	jz	short Exec_Build_Header
 33251                                  
 33252                                  	; MSDOS 6.0
 33253 0000602B E8C201                  	call	Scan_Execname
 33254 0000602E E8D601                  	call	Scan_Special_Entries
 33255                                  ;SR;
 33256                                  ;The current lie strategy uses the PSP to store the lie version. However,
 33257                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 33258                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 33259                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 33260                                  ;Sysinit and therefore must be a device driver load. We then get the lie
 33261                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 33262                                  ;issues the version check, it gets the lie version until the next overlay
 33263                                  ;call is issued.
 33264                                  
 33265 00006031 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 33266 00006037 7426                    	je	short norm_ovl		;yes, no special handling
 33267 00006039 56                      	push	si
 33268 0000603A 06                      	push	es
 33269 0000603B 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 33270                                  	 
 33271                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s)
 33272 00006040 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 33273 00006044 7411                    	je	short sysinit_done	;no, Sysinit is finished
 33274                                  	
 33275 00006046 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 33276 0000604B 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 33277 00006050 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 33278                                  		;;; PDB.VERSION
 33279 00006055 EB06                    	jmp	short setver_done
 33280                                  sysinit_done:
 33281 00006057 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 33282                                  setver_done:
 33283 0000605D 07                      	pop	es
 33284 0000605E 5E                      	pop	si
 33285                                  norm_ovl:
 33286                                  	;leave
 33287 0000605F 89EC                    	mov	sp,bp
 33288 00006061 5D                      	pop	bp
 33289                                  
 33290                                  	;transfer SYS_RET_OK		; overlay load -> done
 33291 00006062 E91FA6                  	jmp	SYS_RET_OK
 33292                                  
 33293                                  Exec_Build_Header:
 33294                                  	;mov	dx,[bp-18]
 33295 00006065 8B56EE                  	mov	DX,Exec_Load_Block
 33296                                  					; assign the space to the process
 33297                                  	;mov	si,1
 33298 00006068 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 33299                                  	;mov	ax,[bp-14]
 33300 0000606B 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 33301 0000606E 09C0                    	or	AX,AX
 33302 00006070 7405                    	jz	short No_Owner		; no environment
 33303                                  
 33304 00006072 48                      	dec	AX			; point to header
 33305 00006073 8ED8                    	mov	DS,AX
 33306 00006075 8914                    	mov	[SI],DX 		; assign ownership
 33307                                  No_Owner:
 33308                                  	;mov	ax,[bp-18]
 33309                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 33310                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 33311                                  	; 17/12/2022
 33312 00006077 89D0                    	mov	ax,dx ; 06/06/2019
 33313                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 33314                                  	
 33315 00006079 48                      	dec	AX
 33316 0000607A 8ED8                    	mov	DS,AX			; point to header
 33317 0000607C 8914                    	mov	[SI],DX 		; assign ownership
 33318                                  
 33319                                  	; MSDOS 6.0
 33320 0000607E 1E                      	push	DS			;AN000;MS. make ES=DS
 33321 0000607F 07                      	pop	ES			;AN000;MS.
 33322                                  	;mov	di,8
 33323 00006080 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 33324 00006083 E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 33325                                  					;	   ds:si->name, cx=name length
 33326 00006086 51                      	push	CX			;AN007;;MS. save for fake version
 33327 00006087 56                      	push	SI			;AN007;;MS. save for fake version
 33328                                  
 33329                                  MoveName:				;AN000;
 33330 00006088 AC                      	lodsb				;AN000;;MS. get char
 33331 00006089 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.', may be name.exe
 33332 0000608B 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 33333                                  					;AN000;
 33334 0000608D AA                      	stosb				;AN000;;MS. move char
 33335                                  					; MSKK bug fix - limit length copied
 33336 0000608E 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 33337 00006091 7302                    	jae	short Mem_Done		; jump if so
 33338                                  	;
 33339 00006093 E2F3                    	loop	MoveName		;AN000;;MS. continue
 33340                                  Mem_Done:				;AN000;
 33341 00006095 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 33342                                  	;cmp	di,16
 33343 00006097 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 33344 0000609A 7301                    	jae	short Fill8		;AN000;MS.
 33345                                  	
 33346 0000609C AA                      	stosb				;AN000;MS.
 33347                                  	
 33348                                  Fill8:					;AN000;
 33349 0000609D 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 33350 0000609E 59                      	pop	CX			;AN007;MS.
 33351                                  	
 33352 0000609F E86501                  	call	Scan_Special_Entries	;AN007;MS.
 33353                                  
 33354                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33355 000060A2 52                      	push	DX
 33356                                  	;mov	si,[bp-16]
 33357 000060A3 8B76F0                  	mov	SI,Exec_Size
 33358 000060A6 01D6                    	add	SI,DX
 33359                                  	;Invoke	$Dup_PDB		; ES is now PDB
 33360 000060A8 E864B0                  	call	_$DUP_PDB
 33361 000060AB 5A                      	pop	DX
 33362                                  
 33363                                  	;push	word [bp-14]
 33364 000060AC FF76F2                  	push	Exec_Environ
 33365                                  	;pop	WORD [ES:2Ch]
 33366 000060AF 268F062C00              	pop	word [ES:PDB.ENVIRON]
 33367                                  
 33368                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 33369                                  					; version number in PSP
 33370 000060B4 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 33371 000060B9 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 33372                                  		; PDB.VERSION
 33373                                  
 33374                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 33375                                  	;lds	si,[bp-4]
 33376 000060BE C576FC                  	lds	SI,Exec_Blk		; get the block
 33377 000060C1 1E                      	push	DS			; save its location
 33378 000060C2 56                      	push	SI
 33379                                  	;lds	si,[si+6]
 33380 000060C3 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 33381                                  
 33382                                  	; DS points to user space 5C FCB
 33383                                  
 33384 000060C6 B90C00                  	mov	CX,12			; copy drive, name and ext
 33385 000060C9 51                      	push	CX
 33386 000060CA BF5C00                  	mov	DI,5Ch
 33387 000060CD 8A1C                    	mov	BL,[SI]
 33388 000060CF F3A4                    	rep	movsb
 33389                                  
 33390                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 33391                                  
 33392 000060D1 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 33393 000060D3 AB                      	stosw
 33394 000060D4 AB                      	stosw
 33395                                  
 33396                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 33397                                  
 33398 000060D5 59                      	pop	CX
 33399 000060D6 5E                      	pop	SI			; get block
 33400 000060D7 1F                      	pop	DS
 33401 000060D8 1E                      	push	DS			; save (again)
 33402 000060D9 56                      	push	SI
 33403                                  	;lds	si,[si+0Ah]
 33404 000060DA C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 33405                                  
 33406                                  	; DS points to user space 6C FCB
 33407                                  
 33408 000060DD 8A3C                    	mov	BH,[SI] 		; do same as above
 33409 000060DF F3A4                    	rep	movsb
 33410 000060E1 AB                      	stosw
 33411 000060E2 AB                      	stosw
 33412 000060E3 5E                      	pop	SI			; get block (last time)
 33413 000060E4 1F                      	pop	DS
 33414                                  	;ld	si,[si+2]
 33415 000060E5 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 33416                                  
 33417                                  	; DS points to user space 80 command line
 33418                                  
 33419 000060E8 80C980                  	or	CL,80h
 33420 000060EB 89CF                    	mov	DI,CX
 33421 000060ED F3A4                    	rep	movsb			; Wham!
 33422                                  
 33423                                  	; Process BX into default AX (validity of drive specs on args).
 33424                                  	; We no longer care about DS:SI.
 33425                                  
 33426 000060EF FEC9                    	dec	CL			; get 0FFh in CL
 33427 000060F1 88F8                    	mov	AL,BH
 33428 000060F3 30FF                    	xor	BH,BH
 33429                                  	;invoke	GetVisDrv
 33430 000060F5 E83C0A                  	call	GetVisDrv
 33431 000060F8 7302                    	jnc	short Exec_BL
 33432                                  
 33433 000060FA 88CF                    	mov	BH,CL
 33434                                  
 33435                                  Exec_BL:
 33436 000060FC 88D8                    	mov	AL,BL
 33437 000060FE 30DB                    	xor	BL,BL
 33438                                  	;invoke	GetVisDrv
 33439 00006100 E8310A                  	call	GetVisDrv
 33440 00006103 7302                    	jnc	short Exec_Set_Return
 33441                                  
 33442 00006105 88CB                    	mov	BL,CL
 33443                                  
 33444                                  Exec_Set_Return:
 33445                                  	;invoke	Get_User_Stack			; get his return address
 33446 00006107 E8C0A3                  	call	Get_User_Stack
 33447                                  
 33448                                  	;push	word [si+14h]
 33449 0000610A FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33450                                  	;push	word [si+12h]
 33451 0000610D FF7412                  	push	word [SI+user_env.user_IP]
 33452                                  	;push	word [si+14h]
 33453 00006110 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33454                                  	;push	word [si+12h]
 33455 00006113 FF7412                  	push	word [SI+user_env.user_IP]
 33456                                  	;pop	word [ES:0Ah]
 33457 00006116 268F060A00              	pop	WORD [ES:PDB.EXIT]
 33458                                  	;pop	word [ES:0Ch]
 33459 0000611B 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 33460                                  
 33461 00006120 31C0                    	xor	AX,AX
 33462 00006122 8ED8                    	mov	DS,AX
 33463                                  					; save them where we can get them
 33464                                  					; later when the child exits.
 33465                                  	;pop	word [88h]
 33466 00006124 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 33467                                  	;pop	word [90h]
 33468 00006128 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 33469                                  
 33470 0000612C 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 33471 00006133 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 33472 00006138 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 33473                                  
 33474                                  	;test	byte [bp-5],1
 33475 0000613D F646FB01                	test	Exec_Func,exec_func_no_execute
 33476 00006141 7427                    	jz	short exec_go
 33477                                  
 33478 00006143 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 33479                                  	;les	di,[bp-4]
 33480 00006148 C47EFC                  	les	DI,Exec_Blk		; and block for return
 33481                                  	;mov	[es:di+10h],ds
 33482 0000614B 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 33483                                  
 33484 0000614F 4E                      	dec	SI			; 'push' default AX
 33485 00006150 4E                      	dec	SI
 33486 00006151 891C                    	mov	[SI],BX 		; save default AX reg
 33487                                  	;mov	[es:di+0Eh], si
 33488 00006153 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 33489                                  
 33490 00006157 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 33491                                  	;mov	[es:di+14h],ds
 33492 0000615C 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 33493                                  	;mov	[es:di+12h],ax
 33494 00006160 26894512                	mov	[ES:DI+EXEC1.IP],AX
 33495                                  	
 33496                                  	;leave
 33497 00006164 89EC                    	mov	sp,bp
 33498 00006166 5D                      	pop	bp	
 33499                                  
 33500                                  	;transfer SYS_RET_OK
 33501 00006167 E91AA5                  	jmp	SYS_RET_OK
 33502                                  
 33503                                  exec_go:
 33504 0000616A 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 33505 0000616F 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 33506 00006174 8CC0                    	mov	AX,ES
 33507                                  
 33508                                  	; MSDOS 6.0
 33509 00006176 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 33510 0000617C 741A                    	je	short Xfer_To_User	; N: transfer control to user
 33511                                  
 33512 0000617E 1E                      	push	ds			; Y: control must go to low mem stub
 33513                                  		
 33514 0000617F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 33515                                  					;    control to user 
 33516 00006184 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 33517                                  					; M004: Set bit to signal int 21
 33518                                  					; ah = 25 & ah= 49. See dossym.inc 
 33519                                  					; under TAG M003 & M009 for 
 33520                                  					; explanation
 33521 00006189 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 33522                                  					; M068: going to be turned OFF.
 33523                                  	
 33524 0000618D 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 33525 0000618F 1F                      	pop	ds
 33526                                  	
 33527 00006190 50                      	push	ax			; ret far into the low mem stub
 33528 00006191 B8[1511]                	mov	ax,disa20_xfer
 33529 00006194 50                      	push	ax
 33530 00006195 8CC0                    	mov	AX,ES			; restore ax
 33531 00006197 CB                      	retf
 33532                                  
 33533                                  Xfer_To_User:
 33534                                  	; DS:SI points to entry point
 33535                                  	; AX:DI points to initial stack
 33536                                  	; DX has PDB pointer
 33537                                  	; BX has initial AX value
 33538                                  
 33539 00006198 FA                      	cli
 33540                                  	; 15/08/2018
 33541 00006199 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 33542                                  
 33543 0000619F 8ED0                    	mov	SS,AX			; set up user's stack
 33544 000061A1 89FC                    	mov	SP,DI			; and SP
 33545 000061A3 FB                      	sti
 33546                                  
 33547 000061A4 1E                      	push	DS			; fake long call to entry
 33548 000061A5 56                      	push	SI
 33549 000061A6 8EC2                    	mov	ES,DX			; set up proper seg registers
 33550 000061A8 8EDA                    	mov	DS,DX
 33551 000061AA 89D8                    	mov	AX,BX			; set up proper AX
 33552                                  
 33553 000061AC CB                      	retf
 33554                                  
 33555                                  ; 04/08/2018 - Retro DOS v3.0
 33556                                  
 33557                                  ;----------------------------------------------------------------------------
 33558                                  ;
 33559                                  ;----------------------------------------------------------------------------
 33560                                  
 33561                                  ExecRead:
 33562 000061AD E81600                  	CALL	Exec_Dealloc
 33563                                  	;mov	bx,[bp-8]
 33564 000061B0 8B5EF8                  	MOV	bx,Exec_FH
 33565                                  
 33566 000061B3 55                      	PUSH	BP
 33567 000061B4 E82107                  	call	_$READ
 33568 000061B7 5D                      	POP	BP
 33569                                  
 33570                                  	;CALL	Exec_Alloc
 33571                                  	;retn
 33572                                  	; 18/12/2022
 33573                                  	;jmp	short Exec_Alloc
 33574                                  
 33575                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 33576                                  
 33577                                  ;----------------------------------------------------------------------------
 33578                                  ;
 33579                                  ;----------------------------------------------------------------------------
 33580                                  
 33581                                  Exec_Alloc:
 33582 000061B8 53                      	push	BX
 33583                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33584                                  	; 20/05/2019 - Retro DOS v4.0
 33585                                  	; MSDOS 6.0
 33586 000061B9 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 33587 000061BE E81000                  	call	ChangeOwners
 33588 000061C1 E8DFB1                  	call	LCritMEM
 33589 000061C4 5B                      	pop	BX
 33590 000061C5 C3                      	retn
 33591                                  
 33592                                  ;----------------------------------------------------------------------------
 33593                                  ;
 33594                                  ;----------------------------------------------------------------------------
 33595                                  
 33596                                  Exec_Dealloc:
 33597 000061C6 53                      	push	BX
 33598                                  	;mov	bx,0
 33599 000061C7 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 33600 000061C9 E8BCB1                  	call	ECritMEM
 33601 000061CC E80200                  	call	ChangeOwners
 33602 000061CF 5B                      	pop	BX
 33603 000061D0 C3                      	retn
 33604                                  
 33605                                  ; 18/12/2022
 33606                                  %if 0
 33607                                  ;----------------------------------------------------------------------------
 33608                                  ;
 33609                                  ;----------------------------------------------------------------------------
 33610                                  
 33611                                  Exec_Alloc:
 33612                                  	push	BX
 33613                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33614                                  	; 20/05/2019 - Retro DOS v4.0
 33615                                  	; MSDOS 6.0
 33616                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 33617                                  	call	ChangeOwners
 33618                                  	call	LCritMEM
 33619                                  	pop	BX
 33620                                  	retn
 33621                                  
 33622                                  %endif
 33623                                  
 33624                                  ;----------------------------------------------------------------------------
 33625                                  ;
 33626                                  ;----------------------------------------------------------------------------
 33627                                  
 33628                                  ChangeOwners:
 33629 000061D1 9C                      	pushf
 33630 000061D2 50                      	push	AX
 33631                                  	;mov	ax,[bp-14]
 33632 000061D3 8B46F2                  	mov	AX,Exec_Environ
 33633 000061D6 E80900                  	call	ChangeOwner
 33634                                  	;mov	ax,[bp-18]
 33635 000061D9 8B46EE                  	mov	AX,Exec_Load_Block
 33636 000061DC E80300                  	call	ChangeOwner
 33637 000061DF 58                      	pop	AX
 33638 000061E0 9D                      	popf
 33639                                  chgown_retn:
 33640 000061E1 C3                      	retn
 33641                                  
 33642                                  ;----------------------------------------------------------------------------
 33643                                  ;
 33644                                  ;----------------------------------------------------------------------------
 33645                                  
 33646                                  ChangeOwner:
 33647 000061E2 09C0                    	or	AX,AX			; is area allocated?
 33648 000061E4 74FB                    	jz	short chgown_retn	; no, do nothing
 33649 000061E6 48                      	dec	AX
 33650 000061E7 1E                      	push	DS
 33651 000061E8 8ED8                    	mov	DS,AX
 33652 000061EA 891E0100                	mov	[ARENA.OWNER],BX
 33653 000061EE 1F                      	pop	DS
 33654 000061EF C3                      	retn
 33655                                  
 33656                                  ;----------------------------------------------------------------------------
 33657                                  ;
 33658                                  ;----------------------------------------------------------------------------
 33659                                  
 33660                                  ; 20/05/2019 - Retro DOS v4.0
 33661                                  
 33662                                  	; MSDOS 6.0
 33663                                  Scan_Execname:
 33664 000061F0 C576E6                  	lds	SI,ExecName		; DS:SI points to name
 33665                                  Scan_Execname1:				; M028
 33666                                  Save_Begin:				;
 33667 000061F3 89F1                    	mov	CX,SI			; CX= starting addr
 33668                                  Scan0:					;
 33669 000061F5 AC                      	lodsb				; get char
 33670                                  
 33671 000061F6 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 33672 000061F8 74F9                    	jz	short Save_Begin	; yes, save si
 33673 000061FA 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 33674 000061FC 74F5                    	jz	short Save_Begin	; yes, save si
 33675 000061FE 3C00                    	cmp	AL,0			; is end of name
 33676 00006200 75F3                    	jnz	short Scan0		; no, continue scanning
 33677 00006202 29CE                    	sub	SI,CX			; get name's length
 33678 00006204 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 33679                                  
 33680 00006206 C3                      	retn
 33681                                  
 33682                                  ;----------------------------------------------------------------------------
 33683                                  ;
 33684                                  ;----------------------------------------------------------------------------
 33685                                  
 33686                                  ; 20/05/2019 - Retro DOS v4.0
 33687                                  
 33688                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33689                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 33690                                  
 33691                                  	; MSDOS 6.0
 33692                                  
 33693                                  Scan_Special_Entries:
 33694                                  
 33695 00006207 49                      	dec	CX			; cx= name length
 33696                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 33697                                  					;reset to current version
 33698                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 33699                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 33700                                  	;mov	word [ss:SPECIAL_VERSION],5
 33701                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 33702                                  
 33703                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 33704 00006208 36C706[BD0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 33705                                  				; 1506h for Retro DOS v4.0 (MSDOS 6.21)
 33706                                  ;***	call	Reset_Version
 33707                                  
 33708                                  ;M060	push	SS
 33709                                  ;M060	pop	ES
 33710                                  
 33711 0000620F 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 33712 00006214 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 33713 00006216 09F8                    	or	AX,DI			;M060; be sure the table exists
 33714 00006218 7427                    	jz	short End_List		;M060; If ZR then no table
 33715                                  
 33716                                  GetEntries:
 33717 0000621A 268A05                  	mov	AL,[ES:DI]		; end of list
 33718 0000621D 08C0                    	or	AL,AL
 33719 0000621F 7420                    	jz	short End_List		; yes
 33720                                  
 33721 00006221 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 33722 00006226 38C8                    	cmp	AL,CL			; same length ?
 33723 00006228 751B                    	jnz	short SkipOne 		; no
 33724                                  
 33725 0000622A 47                      	inc	DI			; es:di -> special name
 33726 0000622B 51                      	push	CX			; save length and name addr
 33727 0000622C 56                      	push	SI
 33728                                  
 33729                                  ; M050 - BEGIN
 33730                                  
 33731 0000622D 50                      	push	ax			; save len
 33732                                  sse_next_char:
 33733 0000622E AC                      	lodsb
 33734 0000622F E8C1EE                  	call	UCase
 33735 00006232 AE                      	scasb
 33736 00006233 750D                    	jne	short Not_Matched
 33737 00006235 E2F7                    	loop	sse_next_char
 33738                                  	
 33739                                  ;	repz	cmpsb			; same name ?
 33740                                  ;	jnz	short Not_Matched	; no
 33741                                  
 33742 00006237 58                      	pop	ax			; take len off the stack
 33743                                  
 33744                                  ; M050 - END
 33745                                  
 33746 00006238 268B05                  	mov	AX,[ES:DI]		; get special version
 33747 0000623B 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 33748                                  
 33749                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 33750                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 33751                                  
 33752 0000623F 5E                      	pop	SI
 33753 00006240 59                      	pop	CX
 33754                                  	; 18/12/2022
 33755                                  	;jmp	SHORT End_List
 33756                                  
 33757                                  	; 18/12/2022
 33758                                  End_List:
 33759 00006241 C3                      	retn
 33760                                  
 33761                                  Not_Matched:
 33762 00006242 58                      	pop	ax			; get len from stack ; M050
 33763 00006243 5E                      	pop	SI			; restore si,cx
 33764 00006244 59                      	pop	CX
 33765                                  
 33766                                  SkipOne:
 33767 00006245 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 33768 0000624A 30E4                    	xor	AH,AH			; position to next entry
 33769 0000624C 01C7                    	add	DI,AX
 33770                                  
 33771 0000624E 83C703                  	add	DI,3			; DI -> next entry length
 33772                                  ;***	add	DI,4			; DI -> next entry length
 33773                                  
 33774 00006251 EBC7                    	jmp	short GetEntries
 33775                                  
 33776                                  	; 18/12/2022
 33777                                  ;End_List:
 33778                                  	;retn
 33779                                  
 33780                                  ; 04/08/2018 - Retro DOS v3.0
 33781                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 633Dh
 33782                                  
 33783                                  ;----------------------------------------------------------------------------
 33784                                  ;SUBTTL Terminate and stay resident handler
 33785                                  ;
 33786                                  ; Input:    DX is an offset from CurrentPDB at which to
 33787                                  ;	    truncate the current block.
 33788                                  ;
 33789                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 33790                                  ;	    paragraphs long. An exit is simulated via resetting CurrentPDB
 33791                                  ;	    and restoring the vectors.
 33792                                  ;
 33793                                  ;----------------------------------------------------------------------------
 33794                                  
 33795                                  	; 20/05/2019 - Retro DOS v4.0
 33796                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 33797                                  
 33798                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33799                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 33800                                  
 33801                                  _$KEEP_PROCESS:
 33802 00006253 50                      	push	AX			; keep exit code around
 33803                                  	;mov	byte [SS:EXIT_TYPE],3
 33804 00006254 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 33805 0000625A 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 33806 0000625F 83FA06                  	cmp	DX,6h			; keep enough space around for system
 33807 00006262 7303                    	jae	short Keep_Shrink	; info
 33808                                  
 33809 00006264 BA0600                  	mov	DX,6h
 33810                                  
 33811                                  Keep_Shrink:
 33812 00006267 89D3                    	mov	BX,DX
 33813 00006269 53                      	push	BX
 33814 0000626A 06                      	push	ES
 33815 0000626B E82D02                  	call	_$SETBLOCK		; ignore return codes.
 33816 0000626E 1F                      	pop	DS
 33817 0000626F 5B                      	pop	BX
 33818 00006270 7207                    	jc	short Keep_Done		; failed on modification
 33819                                  
 33820 00006272 8CD8                    	mov	AX,DS
 33821 00006274 01D8                    	add	AX,BX
 33822                                  	;mov	[2],ax
 33823 00006276 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 33824                                  
 33825                                  Keep_Done:
 33826 00006279 58                      	pop	AX
 33827 0000627A EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 33828                                  
 33829                                  ;----------------------------------------------------------------------------
 33830                                  ;
 33831                                  ;----------------------------------------------------------------------------
 33832                                  
 33833                                  STAY_RESIDENT:
 33834                                  	;mov	ax,3100h
 33835 0000627C B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 33836 0000627F 83C20F                  	add	DX,15
 33837 00006282 D1DA                    	rcr	DX,1
 33838 00006284 B103                    	mov	CL,3
 33839 00006286 D3EA                    	shr	DX,CL
 33840                                  
 33841 00006288 E9BCA0                  	jmp	COMMAND
 33842                                  
 33843                                  ;----------------------------------------------------------------------------
 33844                                  ;SUBTTL $EXIT - return to parent process
 33845                                  ;   Assembler usage:
 33846                                  ;	    MOV     AL, code
 33847                                  ;	    MOV     AH, Exit
 33848                                  ;	    INT     int_command
 33849                                  ;   Error return:
 33850                                  ;	    None.
 33851                                  ;
 33852                                  ;----------------------------------------------------------------------------
 33853                                  
 33854                                  	; 20/05/2019 - Retro DOS v4.0
 33855                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 33856                                  
 33857                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33858                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 33859                                  _$EXIT:
 33860                                  	; 04/08/2018 - Retro DOS v3.0
 33861                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 33862 0000628B 30E4                    	xor	AH,AH
 33863 0000628D 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 33864 00006292 08E4                    	or	AH,AH
 33865                                  	;mov	BYTE [SS:EXIT_TYPE],0
 33866 00006294 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 33867 0000629A 7406                    	jz	short exit_inner
 33868                                  	;mov	BYTE [SS:EXIT_TYPE],1
 33869 0000629C 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 33870                                  
 33871                                  	;entry	Exit_inner
 33872                                  exit_inner:
 33873 000062A2 E825A2                  	call	Get_User_Stack		;PBUGBUG
 33874                                  
 33875 000062A5 36FF36[3003]            	push	word [ss:CurrentPDB]
 33876                                  	;pop	word [si+14h]
 33877 000062AA 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 33878 000062AD EB08                    	jmp	short abort_inner
 33879                                  
 33880                                  ;BREAK <$ABORT -- Terminate a process>
 33881                                  ;----------------------------------------------------------------------------
 33882                                  ; Inputs:
 33883                                  ;	user_CS:00 must point to valid program header block
 33884                                  ; Function:
 33885                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 33886                                  ;	to the terminate address
 33887                                  ; Returns:
 33888                                  ;	TO THE TERMINATE ADDRESS
 33889                                  ;----------------------------------------------------------------------------
 33890                                  
 33891                                  _$ABORT:
 33892 000062AF 30C0                    	xor	AL,AL
 33893                                  	;mov	byte [SS:EXIT_TYPE],0
 33894                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 33895 000062B1 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 33896                                  
 33897                                  	; abort_inner must have AL set as the exit code! The exit type
 33898                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 33899                                  	; to be correct as the one that is terminating.
 33900                                  
 33901                                  abort_inner:
 33902 000062B7 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 33903 000062BC 36A3[3403]              	mov	[SS:exit_code],AX
 33904 000062C0 E807A2                  	call	Get_User_Stack
 33905                                  
 33906                                  	;mov	ds,[si+14h]
 33907 000062C3 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 33908 000062C6 31C0                    	xor	AX,AX
 33909 000062C8 8EC0                    	mov	ES,AX
 33910                                  	;mov	si,10
 33911 000062CA BE0A00                  	mov	SI,SAVEXIT
 33912                                  	;mov	di,88h
 33913 000062CD BF8800                  	mov	DI,addr_int_terminate
 33914 000062D0 A5                      	movsw
 33915 000062D1 A5                      	movsw
 33916 000062D2 A5                      	movsw
 33917 000062D3 A5                      	movsw
 33918 000062D4 A5                      	movsw
 33919 000062D5 A5                      	movsw
 33920 000062D6 E935F2                  	jmp	reset_environment
 33921                                  
 33922                                  ;----------------------------------------------------------------------------
 33923                                  ;
 33924                                  ; fixexepatch will point to this is DOS loads low. 
 33925                                  ;
 33926                                  ;----------------------------------------------------------------------------
 33927                                  ; MSDOS 6.0
 33928                                  
 33929                                  ; 29/04/2019 - Retro DOS v4.0
 33930                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 33931                                  
 33932                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33933                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 33934                                  
 33935                                  RetExePatch: ; proc near
 33936                                  	
 33937 000062D9 C3                      	retn
 33938                                  
 33939                                  ;============================================================================
 33940                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 33941                                  ;============================================================================
 33942                                  ; 04/08/2018 - Retro DOS v3.0
 33943                                  ; 14/05/2019 - Retro DOS v4.0
 33944                                  
 33945                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 33946                                  
 33947                                  ;**
 33948                                  ;	Microsoft Confidential
 33949                                  ;	Copyright (C) Microsoft Corporation 1991
 33950                                  ;	All Rights Reserved.
 33951                                  ;
 33952                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 33953                                  ;	I/O specs are defined in DISPATCH.
 33954                                  ;
 33955                                  ;	$ALLOC
 33956                                  ;	$SETBLOCK
 33957                                  ;	$DEALLOC
 33958                                  ;	$AllocOper
 33959                                  ;	arena_free_process
 33960                                  ;	arena_next
 33961                                  ;	check_signature
 33962                                  ;	Coalesce
 33963                                  ;
 33964                                  ;	Modification history:
 33965                                  ;
 33966                                  ;	    Created: ARR 30 March 1983
 33967                                  ;
 33968                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 33969                                  ;		      M003 - added support for link/unlink UMBs from
 33970                                  ;			     DOS arena chain. 7/18/90
 33971                                  ;		      M009 - Added error returns invalid function and 
 33972                                  ;			     arena trashed in set link state call.
 33973                                  ;		      M010 - Release UMB arenas allocated to current PDB
 33974                                  ;			     if UMB_HEAD is initialized.
 33975                                  ;
 33976                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 33977                                  ;			     support. Please see under M009 in 
 33978                                  ;			     ..\inc\dossym.inc. 8/31/90.
 33979                                  ;
 33980                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 33981                                  ;			     sure that umb_head arena is valid and also make
 33982                                  ;			     sure that the previous arena is pointing to 
 33983                                  ;			     umb_head.
 33984                                  ;
 33985                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 33986                                  ;			     set allloc strategy.
 33987                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 33988                                  ;			     bx in AllocSetStrat.
 33989                                  ;
 33990                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 33991                                  ;			     a bit to indicate to dos dispatcher to turn
 33992                                  ;			     a20 off before iret. See M016.
 33993                                  ;
 33994                                  
 33995                                  ;	BREAK	<memory allocation utility routines>
 33996                                  
 33997                                  
 33998                                  ; 15/04/2018 - Retro DOS v2.0
 33999                                  ;----------------------------------------------------------------------------
 34000                                  ; xenix memory calls for MSDOS
 34001                                  ;
 34002                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 34003                                  ; arena_owner_system are all equal to zero and are contained in DI.
 34004                                  ;
 34005                                  ;INCLUDE DOSSEG.ASM
 34006                                  
 34007                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 34008                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 34009                                  
 34010                                  ;.xlist
 34011                                  ;.xcref
 34012                                  ;INCLUDE DOSSYM.ASM
 34013                                  ;INCLUDE DEVSYM.ASM
 34014                                  ;.cref
 34015                                  ;.list
 34016                                  
 34017                                  ;TITLE ALLOC.ASM - memory arena manager
 34018                                  ;NAME Alloc
 34019                                  
 34020                                  ;SUBTTL memory allocation utility routines
 34021                                  ;PAGE
 34022                                  ;
 34023                                  ; arena data
 34024                                  ;
 34025                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 34026                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 34027                                  ;       i_need  FirstArena,WORD         ; first free block found
 34028                                  ;       i_need  BestArena,WORD          ; best free block found
 34029                                  ;       i_need  LastArena,WORD          ; last free block found
 34030                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 34031                                  
 34032                                  ;**	Arena_Free_Process
 34033                                  ;----------------------------------------------------------------------------
 34034                                  ;	Free all arena blocks allocated to a prOcess
 34035                                  ;
 34036                                  ;	ENTRY	(bx) = PID of process
 34037                                  ;	EXIT	none
 34038                                  ;	USES	????? BUGBUG
 34039                                  ;----------------------------------------------------------------------------
 34040                                  
 34041                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34042                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 34043                                  
 34044                                  arena_free_process:
 34045                                  	; 14/05/2019 - Retro DOS v4.0
 34046                                  	; 04/08/2018 - Retro DOS v3.0
 34047 000062DA 36A1[2400]                      MOV	AX,[SS:arena_head]
 34048                                  arena_free_process_start:
 34049 000062DE BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 34050                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 34051 000062E1 E82F00                          CALL	check_signature         ; ES <- AX, check for valid block
 34052                                  
 34053                                  arena_free_process_loop:
 34054                                          ;retc
 34055 000062E4 7225                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 34056 000062E6 06                      	PUSH    ES
 34057 000062E7 1F                              POP     DS
 34058                                  	;cmp	[1],bx 
 34059 000062E8 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 34060 000062EC 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 34061                                  	;mov	[1],di
 34062 000062EE 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 34063                                  
 34064                                  arena_free_next:
 34065                                  	;cmp	byte [di],5Ah ;'Z'
 34066 000062F2 803D5A                          CMP     BYTE [DI],arena_signature_end
 34067                                                                          ; end of road, Jack?
 34068                                          ;retz				; never come back no more
 34069                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 34070                                  	; 14/05/2019
 34071                                  	; MSDOS 6.0
 34072 000062F5 7405                    	jz	short arena_chk_umbs
 34073                                          
 34074 000062F7 E81200                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 34075 000062FA EBE8                            JMP     SHORT arena_free_process_loop
 34076                                  
 34077                                  	; MSDOS 6.0
 34078                                  arena_chk_umbs:				; M010 - Start
 34079                                  	; 20/05/2019
 34080 000062FC 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 34081 00006300 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 34082 00006303 741D                    	je	short ret_label		; N: we're done
 34083                                  	
 34084 00006305 8CDF                    	mov	di,ds			; di = last arena
 34085 00006307 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 34086                                  	;jae	short ret_label		; Y: we've scanned umbs also. done.
 34087                                  	;jmp	short arena_free_process_start
 34088                                  					; M010 - End
 34089                                  	; 10/03/2024 (PCDOS 7.1 IBMDOS.COM)
 34090 00006309 72D3                    	jb	short arena_free_process_start
 34091                                  
 34092                                  	; 10/03/2024
 34093                                  AFP_RETN:
 34094 0000630B C3                      	RETN
 34095                                  
 34096                                  ;	BREAK	<Arena Helper Routines>
 34097                                  
 34098                                  ;**	Arena_Next - Find Next item in Arena
 34099                                  ;----------------------------------------------------------------------------
 34100                                  ;	ENTRY	DS - pointer to block head
 34101                                  ;		(di) = 0
 34102                                  ;	EXIT	AX,ES - pointers to next head
 34103                                  ;		'C' set iff arena damaged
 34104                                  ;----------------------------------------------------------------------------
 34105                                  
 34106                                  arena_next:
 34107 0000630C 8CD8                            MOV     AX,DS                   ; AX <- current block
 34108 0000630E 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 34109 00006312 40                              INC     AX                      ; remember that header!
 34110                                  
 34111                                  ;       fall into check_signature and return
 34112                                  ;
 34113                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 34114                                  ;       RETN
 34115                                  
 34116                                  ;**	Check_Signature - Check Memory Block Signature
 34117                                  ;----------------------------------------------------------------------------
 34118                                  ;	ENTRY	(AX) = address of block header
 34119                                  ;		(di) = 0
 34120                                  ;	EXIT	 ES = AX
 34121                                  ;		'C' clear if signature good
 34122                                  ;		'C' set if signature bad
 34123                                  ;	USES	ES, Flags
 34124                                  ;----------------------------------------------------------------------------
 34125                                  
 34126                                  check_signature:        
 34127                                  
 34128 00006313 8EC0                    	MOV     ES,AX                   ; ES <- AX
 34129                                  	;cmp	byte [es:di],4Dh ; 'M'
 34130 00006315 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 34131                                                                          ; IF next signature = not_end THEN
 34132 00006319 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 34133                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 34134 0000631B 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 34135                                                                          ; IF next signature = end then
 34136 0000631F 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 34137 00006321 F9                              STC                             ; set error
 34138                                  ret_label: ; MSDOS 6.0
 34139                                  ;AFP_RETN:	; 10/03/2024
 34140                                   	; Retro DOS v2.0 - 05/03/2018
 34141                                  check_signature_ok:
 34142                                  COALESCE_RETN:
 34143 00006322 C3                      	RETN
 34144                                  
 34145                                  ;**	Coalesce - Combine free blocks ahead with current block
 34146                                  ;----------------------------------------------------------------------------
 34147                                  ;	Coalesce adds the block following the argument to the argument block,
 34148                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 34149                                  ;	some callers (such as $setblock) use it to join a free block to it's
 34150                                  ;	preceeding allocated block.
 34151                                  ;
 34152                                  ;	ENTRY	(ds) = pointer to the head of a free block
 34153                                  ;		(di) = 0
 34154                                  ;	EXIT	'C' clear if OK
 34155                                  ;		  (ds) unchanged, this block updated
 34156                                  ;		  (ax) = address of next block, IFF not at end
 34157                                  ;		'C' set if arena trashed
 34158                                  ;	USES	(cx)
 34159                                  ;----------------------------------------------------------------------------
 34160                                          
 34161                                  Coalesce:
 34162                                  	;cmp	byte [di],5Ah ; 'Z'
 34163 00006323 803D5A                  	CMP     BYTE [DI],arena_signature_end
 34164                                                                          ; IF current signature = END THEN
 34165                                          ;retz				;   GOTO ok
 34166 00006326 74FA                            jz	short COALESCE_RETN
 34167 00006328 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 34168                                          ;retc				; IF no error THEN GOTO check
 34169 0000632B 72F5                    	jc	short COALESCE_RETN
 34170                                  
 34171                                  coalesce_check:
 34172                                  	;cmp	[es:1],di
 34173 0000632D 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 34174                                          ;retnz				; IF next block isnt free THEN return
 34175 00006332 75EE                            JNZ	SHORT COALESCE_RETN
 34176                                  	;mov	cx,[ES:3]
 34177 00006334 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 34178 00006339 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 34179                                          ;ADD	[3],CX
 34180 0000633A 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 34181 0000633E 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 34182 00006341 880D                            MOV     [DI],CL
 34183 00006343 EBDE                            JMP     SHORT Coalesce		; try again
 34184                                  
 34185                                  ; 04/08/2018 - Retro DOS v3.0
 34186                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 34187                                  
 34188                                  ;	BREAK  <$Alloc - allocate space in memory>
 34189                                  
 34190                                  ; MSDOS 6.0
 34191                                  ;----------------------------------------------------------------------------
 34192                                  ;**	$Alloc - Allocate Memory Space
 34193                                  ;
 34194                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 34195                                  ;	Alloc returns a pointer to a free block of memory that
 34196                                  ;	has the requested size in paragraphs.
 34197                                  ;
 34198                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 34199                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 34200                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 34201                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 34202                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 34203                                  ;
 34204                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 34205                                  ;	starts from arena_head.
 34206                                  ;
 34207                                  ;	Assembler usage:
 34208                                  ;           MOV     BX,size
 34209                                  ;           MOV     AH,Alloc
 34210                                  ;           INT     21h
 34211                                  ;
 34212                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 34213                                  ;	so that we start searching the arena at it's first non-trivial free
 34214                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 34215                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 34216                                  ;	doesn't have too many memory objects in it beyond the first free one.
 34217                                  ;	verify that this is true; if so, this can stay as is
 34218                                  ;
 34219                                  ;	ENTRY	(bx) = requested size, in bytes
 34220                                  ;		(DS) = (ES) = DOSGROUP
 34221                                  ;	EXIT	'C' clear if memory allocated
 34222                                  ;		  (ax:0) = address of requested memory
 34223                                  ;		'C' set if request failed
 34224                                  ;		  (AX) = error_not_enough_memory
 34225                                  ;		    (bx) = max size we could have allocated
 34226                                  ;		  (ax) = error_arena_trashed
 34227                                  ;	USES	All
 34228                                  ;----------------------------------------------------------------------------
 34229                                  
 34230                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34231                                  ;----------------------------------------------------------------------------
 34232                                  ;SUBTTL $Alloc - allocate space in memory
 34233                                  ;
 34234                                  ;   Assembler usage:
 34235                                  ;           MOV     BX,size
 34236                                  ;           MOV     AH,Alloc
 34237                                  ;           INT     21h
 34238                                  ;         AX:0 is pointer to allocated memory
 34239                                  ;         BX is max size if not enough memory
 34240                                  ;
 34241                                  ;   Description:
 34242                                  ;           Alloc returns  a  pointer  to  a  free  block of
 34243                                  ;       memory that has the requested  size  in  paragraphs.
 34244                                  ;
 34245                                  ;   Error return:
 34246                                  ;           AX = error_not_enough_memory
 34247                                  ;              = error_arena_trashed
 34248                                  ;----------------------------------------------------------------------------
 34249                                  
 34250                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 34251                                  
 34252                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34253                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 34254                                  
 34255                                  _$ALLOC:
 34256                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 34257                                  	; 14/05/2019 - Retro DOS v4.0
 34258                                  	; 04/08/2018 - Retro DOS v3.0
 34259                                  	;EnterCrit critMem
 34260 00006345 E840B0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34261                                  
 34262                                  ; 17/12/2022
 34263                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34264                                  ;%if 0
 34265                                  	; 14/05/2019
 34266 00006348 16                      	push	ss
 34267 00006349 1F                      	pop	ds
 34268                                  
 34269                                  	; MSDOS 6.0
 34270                                  	;mov	ax,[ss:arena_head]
 34271                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34272                                  
 34273 0000634A A1[2400]                	mov	ax,[arena_head]
 34274 0000634D A3[8E00]                	mov	[START_ARENA],ax
 34275                                  	
 34276                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34277 00006350 F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 34278                                  					; Q: should we start scanning from
 34279                                  					;    UMB's
 34280 00006355 740D                    	jz	short norm_alloc	; N: scan from arena_head
 34281                                  		
 34282                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34283                                  	;cmp	word [UMB_HEAD],-1
 34284                                  	;je	short norm_alloc	; N: scan from arena_head
 34285                                  
 34286                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34287 00006357 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 34288 0000635C 7406                    	jz	short norm_alloc	; N: scan from arena_head
 34289                                  	
 34290                                  	;mov	ax,[ss:UMB_HEAD]
 34291                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34292 0000635E A1[8C00]                	mov	ax,[UMB_HEAD]
 34293 00006361 A3[8E00]                	mov	[START_ARENA],ax
 34294                                  					; M000 - end
 34295                                  norm_alloc:
 34296 00006364 31C0                            XOR     AX,AX
 34297 00006366 89C7                            MOV     DI,AX
 34298                                  	; 15/03/2018
 34299                                          ;MOV	[SS:FirstArena],AX	; init the options
 34300                                          ;MOV	[SS:BestArena],AX
 34301                                          ;MOV	[SS:LastArena],AX
 34302                                  	; 14/05/2019
 34303 00006368 A3[4003]                	MOV	[FirstArena],AX		; init the options
 34304 0000636B A3[4203]                        MOV	[BestArena],AX
 34305 0000636E A3[4403]                        MOV	[LastArena],AX
 34306 00006371 50                              PUSH    AX                      ; alloc_max <- 0
 34307                                  	; 04/08/2018
 34308                                  start_scan:
 34309                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34310                                  	;MOV	AX,[arena_head]
 34311                                  
 34312                                  	; 14/05/2019	
 34313                                  	; MSDOS 6.0
 34314                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34315 00006372 A1[8E00]                	mov	ax,[START_ARENA]
 34316                                  
 34317                                  	; 27/09/2023 (BugFix) (*) 
 34318                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 34319                                  start_scan_x:
 34320                                  
 34321 00006375 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 34322 00006378 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 34323                                  
 34324                                  ;%endif
 34325                                  
 34326                                  ; 17/12/2022
 34327                                  %if 0
 34328                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34329                                  
 34330                                  	; MSDOS 6.0
 34331                                  	mov	ax,[ss:arena_head]
 34332                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34333                                  
 34334                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34335                                  					; Q: should we start scanning from
 34336                                  					;    UMB's
 34337                                  	jz	short norm_alloc	; N: scan from arena_head
 34338                                  		
 34339                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34340                                  	;je	short norm_alloc	; N: scan from arena_head
 34341                                  
 34342                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34343                                  	jz	short norm_alloc	; N: scan from arena_head
 34344                                  	
 34345                                  	mov	ax,[ss:UMB_HEAD]
 34346                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34347                                  					; M000 - end
 34348                                  norm_alloc:
 34349                                          XOR     AX,AX
 34350                                          MOV     DI,AX
 34351                                  	; 15/03/2018
 34352                                  	MOV	[SS:FirstArena],AX	; init the options
 34353                                  	MOV	[SS:BestArena],AX
 34354                                  	MOV	[SS:LastArena],AX
 34355                                          PUSH    AX                      ; alloc_max <- 0
 34356                                  	; 04/08/2018
 34357                                  start_scan:
 34358                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34359                                  	; 14/05/2019	
 34360                                  	; MSDOS 6.0
 34361                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34362                                  	CALL    check_signature         ; ES <- AX, carry set if error
 34363                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 34364                                  %endif
 34365                                  
 34366                                  alloc_scan:
 34367 0000637A 06                              PUSH    ES
 34368 0000637B 1F                              POP     DS                      ; DS <- ES
 34369 0000637C 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 34370 00006380 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 34371                                  
 34372                                  alloc_next:
 34373                                  	; MSDOS 6.0			; M000 - start 
 34374 00006382 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34375 00006388 741C                    	jz	short norm_strat	; N: see if we reached last arena
 34376                                  	
 34377 0000638A 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 34378                                  					; Q: is alloc strategy high_first
 34379 00006390 7414                    	jz	short norm_strat	; N: see if we reached last arena
 34380 00006392 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 34381 00006396 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 34382                                  					;    arena_head
 34383 0000639B 7509                    	jne	short norm_strat	; N: see if we reached last arena
 34384 0000639D 8CD8                    	mov	ax,ds			; ax = current block
 34385 0000639F 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 34386 000063A4 EB03                    	jmp	short alloc_chk_end
 34387                                  
 34388                                  norm_strat:
 34389                                  	;cmp	byte [di],5Ah ; 'Z'
 34390 000063A6 803D5A                          CMP     BYTE [DI],arena_signature_end
 34391                                                                          ; IF current block is last THEN
 34392                                  alloc_chk_end:
 34393 000063A9 740E                            JZ      SHORT alloc_end		;   GOTO end
 34394 000063AB E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 34395 000063AE 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 34396                                  
 34397                                  alloc_err:
 34398 000063B0 58                              POP     AX
 34399                                  
 34400                                  alloc_trashed:
 34401                                  	;LeaveCrit critMem
 34402 000063B1 E8EFAF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34403                                          ;error	error_arena_trashed
 34404                                  	;mov	al,7
 34405 000063B4 B007                    	MOV	AL,error_arena_trashed
 34406                                  alloc_errj:
 34407 000063B6 E9D4A2                  	JMP	SYS_RET_ERR
 34408                                  
 34409                                  alloc_end:
 34410                                  	; 18/05/2019
 34411 000063B9 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 34412 000063BF 7403                    	jz	short alloc_chk 
 34413 000063C1 E98400                  	jmp	alloc_do_split
 34414                                  
 34415                                  alloc_chk:
 34416                                  	; MSDOS 6.0
 34417 000063C4 36A1[2400]              	mov	ax,[ss:arena_head]
 34418 000063C8 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 34419 000063CD 740E                    	je	short alloc_fail	; Y: not enough memory
 34420                                  					; N:
 34421                                  					; Q: is the alloc strat HIGH_ONLY
 34422 000063CF 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 34423 000063D5 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 34424                                  	
 34425 000063D7 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 34426                                  	; 27/09/2023 (*)
 34427 000063DB EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 34428                                  	;jmp	short start_scan
 34429                                  					; M000 - end
 34430                                  
 34431                                  alloc_fail:
 34432                                          ;invoke Get_User_Stack
 34433 000063DD E8EAA0                          CALL	Get_User_Stack
 34434 000063E0 5B                      	POP     BX
 34435                                          ;MOV	[SI].user_BX,BX
 34436                                  	;MOV	[SI+2],BX
 34437 000063E1 895C02                  	mov	[SI+user_env.user_BX],bx
 34438                                  	;LeaveCrit critMem
 34439 000063E4 E8BCAF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34440                                  	;error	error_not_enough_memory
 34441                                  	;mov	al,8
 34442 000063E7 B008                    	MOV	AL,error_not_enough_memory
 34443                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34444 000063E9 EBCB                    	jmp	short alloc_errj
 34445                                  	;JMP	SYS_RET_ERR
 34446                                  
 34447                                  alloc_free:
 34448 000063EB E835FF                          CALL    Coalesce		; add following free block to current
 34449 000063EE 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 34450 000063F0 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34451 000063F4 5A                              POP     DX                      ; check for max found size
 34452 000063F5 39D1                            CMP     CX,DX
 34453 000063F7 7602                            JNA     SHORT alloc_test
 34454 000063F9 89CA                            MOV     DX,CX
 34455                                  
 34456                                  alloc_test:
 34457 000063FB 52                              PUSH    DX
 34458 000063FC 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 34459 000063FE 7782                    	JA      SHORT alloc_next	;   GOTO next
 34460                                  
 34461                                  	; 15/03/2018
 34462 00006400 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 34463 00006406 7505                    	JNZ	SHORT alloc_best
 34464 00006408 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found
 34465                                  alloc_best:
 34466 0000640D 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 34467 00006413 740E                            JZ      SHORT alloc_make_best	; initial best
 34468 00006415 06                              PUSH	ES
 34469 00006416 368E06[4203]                    MOV     ES,[SS:BestArena]
 34470 0000641B 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 34471 00006420 07                              POP	ES
 34472 00006421 7605                            JBE     SHORT alloc_last
 34473                                  alloc_make_best:
 34474 00006423 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 34475                                  alloc_last:
 34476 00006428 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 34477 0000642D E952FF                          JMP     alloc_next
 34478                                  ;
 34479                                  ; split the block high
 34480                                  ;
 34481                                  alloc_do_split_high:
 34482 00006430 368E1E[4403]                    MOV     DS,[SS:LastArena]
 34483 00006435 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34484 00006439 29D9                            SUB     CX,BX
 34485 0000643B 8CDA                            MOV     DX,DS
 34486 0000643D 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 34487 0000643F 01CA                            ADD     DX,CX                   ; point to next block
 34488 00006441 8EC2                            MOV     ES,DX                   ; no decrement!
 34489 00006443 49                              DEC     CX
 34490 00006444 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 34491 00006446 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 34492                                  ;
 34493                                  ; we have scanned memory and have found all appropriate blocks
 34494                                  ; check for the type of allocation desired; first and best are identical
 34495                                  ; last must be split high
 34496                                  ;
 34497                                  alloc_do_split:
 34498                                  
 34499                                  ; 17/12/2022
 34500                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34501                                  ;%if 0
 34502                                  	; 14/05/2019
 34503                                  	; MSDOS 6.0			; M000 - start
 34504                                  	;xor	cx,cx
 34505 00006448 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 34506                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34507 0000644D 80E13F                  	and	cl,3Fh
 34508                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34509 00006450 80F901                  	cmp	cl,BEST_FIT
 34510 00006453 77DB                    	ja	short alloc_do_split_high
 34511                                  ;%endif
 34512                                  
 34513                                  	; 17/12/2022
 34514                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34515                                  	; MSDOS 6.0 & MSDOS 5.0
 34516                                  	;xor	cx,cx
 34517                                  	;mov	cl,[ss:AllocMethod]
 34518                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34519                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34520                                  	;ja	short alloc_do_split_high
 34521                                  
 34522                                  	; 15/03/2018
 34523                                          ;;CMP	BYTE [SS:AllocMethod], 1
 34524                                  	; 04/08/2018
 34525                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 34526                                          ;JA	SHORT alloc_do_split_high
 34527                                          
 34528 00006455 368E1E[4003]            	MOV     DS,[SS:FirstArena]
 34529 0000645A 7205                    	JB      SHORT alloc_get_size
 34530 0000645C 368E1E[4203]            	MOV     DS,[SS:BestArena]
 34531                                  
 34532                                  alloc_get_size:
 34533 00006461 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34534 00006465 29D9                            SUB     CX,BX                   ; get room left over
 34535 00006467 8CD8                            MOV     AX,DS
 34536 00006469 89C2                            MOV     DX,AX                   ; save for owner setting
 34537 0000646B 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 34538 0000646D 01D8                            ADD     AX,BX
 34539 0000646F 40                              INC     AX                      ; remember the header
 34540 00006470 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 34541 00006472 49                              DEC     CX                      ; CX <- size of split block
 34542                                  alloc_set_sizes:
 34543 00006473 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 34544 00006477 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 34545                                  	;mov	bl,4Dh ; 'M'
 34546 0000647C B34D                            MOV     BL,arena_signature_normal
 34547 0000647E 861D                            XCHG    BL,[DI]			; current signature <- 4D
 34548 00006480 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 34549 00006483 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34550                                  
 34551                                  alloc_set_owner:
 34552 00006488 8EDA                            MOV     DS,DX
 34553 0000648A 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 34554 0000648E A30100                          MOV     [ARENA.OWNER],AX
 34555 00006491 8CD8                            MOV     AX,DS
 34556 00006493 40                              INC     AX
 34557 00006494 5B                              POP     BX
 34558                                  	;LeaveCrit critMem
 34559 00006495 E80BAF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34560                                  	
 34561                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34562                                  alloc_ok:
 34563                                          ;transfer SYS_RET_OK
 34564 00006498 E9E9A1                  	JMP	SYS_RET_OK
 34565                                  
 34566                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 34567                                  
 34568                                  ; MSDOS 6.0
 34569                                  ;----------------------------------------------------------------------------
 34570                                  ;**	$SETBLOCK - Change size of an Allocated Block
 34571                                  ;
 34572                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 34573                                  ;	any following free space onto this block; then we try to trim the
 34574                                  ;	block down to the size requested.
 34575                                  ;
 34576                                  ;	Note that if the guy wants to grow the block but that growth fails,
 34577                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 34578                                  ;	Thus the maximum-size-possible value that we return has already
 34579                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 34580                                  ;
 34581                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 34582                                  ;		finish it's work. For this reason we build the allocsf
 34583                                  ;		structure on the frame, to make us compatible with $ALLOCs
 34584                                  ;		code.
 34585                                  ;
 34586                                  ;	ENTRY	(es) = segment of old block
 34587                                  ;		(bx) = newsize
 34588                                  ;		(ah) = SETBLOCK
 34589                                  ;
 34590                                  ;	EXIT	'C' clear if OK
 34591                                  ;		'C' set if error
 34592                                  ;		  (ax) = error_invalid_block
 34593                                  ;		       = error_arena_trashed
 34594                                  ;		       = error_not_enough_memory
 34595                                  ;		       = error_invalid_function
 34596                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 34597                                  ;	USES	???? BUGBUG
 34598                                  ;----------------------------------------------------------------------------
 34599                                  
 34600                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34601                                  ;----------------------------------------------------------------------------
 34602                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 34603                                  ;
 34604                                  ;   Assembler usage:
 34605                                  ;           MOV     ES,block
 34606                                  ;           MOV     BX,newsize
 34607                                  ;           MOV     AH,setblock
 34608                                  ;           INT     21h
 34609                                  ;         if setblock fails for growing, BX will have the maximum
 34610                                  ;         size possible
 34611                                  ;   Error return:
 34612                                  ;           AX = error_invalid_block
 34613                                  ;              = error_arena_trashed
 34614                                  ;              = error_not_enough_memory
 34615                                  ;              = error_invalid_function
 34616                                  ;----------------------------------------------------------------------------
 34617                                  
 34618                                  _$SETBLOCK:        
 34619                                  	; 04/08/2018 - Retro DOS v3.0
 34620                                  	;EnterCrit   critMem
 34621 0000649B E8EAAE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34622                                  
 34623 0000649E BF0000                  	MOV     DI,ARENA.SIGNATURE
 34624 000064A1 8CC0                            MOV     AX,ES
 34625 000064A3 48                              DEC     AX
 34626 000064A4 E86CFE                          CALL    check_signature
 34627 000064A7 7303                            JNC     SHORT setblock_grab
 34628                                  
 34629                                  setblock_bad:
 34630 000064A9 E905FF                          JMP     alloc_trashed
 34631                                  
 34632                                  setblock_grab:
 34633 000064AC 8ED8                            MOV     DS,AX
 34634 000064AE E872FE                          CALL    Coalesce
 34635 000064B1 72F6                            JC      SHORT setblock_bad
 34636 000064B3 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34637 000064B7 51                              PUSH    CX
 34638 000064B8 39CB                            CMP     BX,CX
 34639 000064BA 76A5                            JBE     SHORT alloc_get_size
 34640 000064BC E91EFF                          JMP     alloc_fail
 34641                                  
 34642                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 34643                                  
 34644                                  ; MSDOS 6.0
 34645                                  ;----------------------------------------------------------------------------
 34646                                  ;**	$DEALLOC - Free Heap Memory
 34647                                  ;
 34648                                  ;	ENTRY	(es) = address of item
 34649                                  ;
 34650                                  ;	EXIT	'C' clear of OK
 34651                                  ;		'C' set if error
 34652                                  ;		  (AX) = error_invalid_block
 34653                                  ;	USES	???? BUGBUG
 34654                                  
 34655                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34656                                  ;----------------------------------------------------------------------------
 34657                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 34658                                  ;
 34659                                  ;   Assembler usage:
 34660                                  ;           MOV     ES,block
 34661                                  ;           MOV     AH,dealloc
 34662                                  ;           INT     21h
 34663                                  ;
 34664                                  ;   Error return:
 34665                                  ;           AX = error_invalid_block
 34666                                  ;              = error_arena_trashed
 34667                                  ;---------------------------------------------------------------------------- 
 34668                                  
 34669                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34670                                  _$DEALLOC:
 34671                                  	; 14/05/2019 - Retro DOS v4.0    
 34672                                  	; 04/08/2018 - Retro DOS v3.0
 34673                                  	;EnterCrit   critMem
 34674 000064BF E8C6AE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34675                                  
 34676                                  	; MSDOS 6.0			; M016, M068 - Start
 34677 000064C2 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 34678                                  					; Q: was the previous call an int 21
 34679                                  					;    exec call
 34680 000064C8 740E                    	jz	short deallocate	; N: continue
 34681 000064CA 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 34682 000064D0 7506                    	jne	short deallocate	; N: continue
 34683 000064D2 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 34684                                  deallocate:				; M016, M068 - End
 34685 000064D8 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 34686 000064DB 8CC0                            MOV     AX,ES
 34687 000064DD 48                              DEC     AX
 34688 000064DE E832FE                          CALL    check_signature
 34689 000064E1 720A                            JC      SHORT dealloc_err
 34690 000064E3 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34691                                  	;LeaveCrit critMem
 34692 000064E8 E8B8AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34693                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34694                                          ;transfer SYS_RET_OK
 34695                                  dealloc_ok:
 34696 000064EB EBAB                    	jmp	short alloc_ok
 34697                                  	;JMP	SYS_RET_OK
 34698                                  
 34699                                  dealloc_err:
 34700                                  	;LeaveCrit critMem
 34701 000064ED E8B3AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34702                                          ;error	error_invalid_block
 34703                                  	;mov	al,9
 34704 000064F0 B009                    	MOV	AL,error_invalid_block
 34705                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34706                                  dealloc_errj:
 34707                                  AllocOperErrj:	; 17/12/2022
 34708 000064F2 E998A1                  	JMP	SYS_RET_ERR
 34709                                  
 34710                                  ;	BREAK $AllocOper - get/set allocation mechanism
 34711                                  
 34712                                  ; MSDOS 6.0
 34713                                  ;----------------------------------------------------------------------------
 34714                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 34715                                  ;
 34716                                  ;	Assembler usage:
 34717                                  ;           MOV     AH,AllocOper
 34718                                  ;           MOV     BX,method
 34719                                  ;           MOV     AL,func
 34720                                  ;           INT     21h
 34721                                  ;
 34722                                  ;	ENTRY	
 34723                                  ;		(al) = 0
 34724                                  ;		  Get allocation Strategy in (ax)
 34725                                  ;
 34726                                  ;		(al) = 1, (bx) = method = zw0000xy
 34727                                  ;		  Set allocation strategy.
 34728                                  ;		   w  = 1  => HIGH_ONLY
 34729                                  ;		   z  = 1  => HIGH_FIRST
 34730                                  ;		   xy = 00 => FIRST_FIT
 34731                                  ;		      = 01 => BEST_FIT
 34732                                  ;		      = 10 => LAST_FIT
 34733                                  ;
 34734                                  ;		(al) = 2
 34735                                  ;		  Get UMB link state in (al)
 34736                                  ;
 34737                                  ;		(al) = 3
 34738                                  ;		  Set UMB link state
 34739                                  ;		   (bx) = 0 => Unlink UMBs
 34740                                  ;		   (bx) = 1 => Link UMBs
 34741                                  ;
 34742                                  ;
 34743                                  ;	EXIT	'C' clear if OK
 34744                                  ;
 34745                                  ;		 if (al) = 0
 34746                                  ;		  (ax) = existing method
 34747                                  ;		 if (al) = 1
 34748                                  ;		  Sets allocation strategy
 34749                                  ;		 if (al) = 2
 34750                                  ;		  (al) = 0 => UMBs not linked
 34751                                  ;		  (al) = 1 => UMBs linked in
 34752                                  ;		 if (al) = 3
 34753                                  ;		  Links/Unlinks the UMBs into DOS chain
 34754                                  ;
 34755                                  ;		'C' set if error
 34756                                  ;		  AX = error_invalid_function
 34757                                  ;
 34758                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 34759                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 34760                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 34761                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 34762                                  ;		    arena' if an arena sig is damaged.
 34763                                  ;----------------------------------------------------------------------------
 34764                                  
 34765                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34766                                  ;----------------------------------------------------------------------------
 34767                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 34768                                  ;
 34769                                  ;   Assembler usage:
 34770                                  ;           MOV     AH,AllocOper
 34771                                  ;           MOV     BX,method
 34772                                  ;           MOV     AL,func
 34773                                  ;           INT     21h
 34774                                  ;
 34775                                  ;   Error return:
 34776                                  ;           AX = error_invalid_function
 34777                                  ;----------------------------------------------------------------------------
 34778                                  
 34779                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34780                                  _$ALLOCOPER:
 34781                                  	; 14/05/2019 - Retro DOS v4.0
 34782                                  	; MSDOS 6.0
 34783 000064F5 08C0                    	or	al,al ; 0
 34784 000064F7 741E                    	jz	short AllocGetStrat
 34785                                  	; 17/12/2022
 34786                                  	;cmp	al,1
 34787                                  	;jz	short AllocSetStrat
 34788                                  
 34789                                  	; 01/12/2022
 34790                                  	;cmp	al, 2
 34791                                  	;jb	short AllocSetStrat
 34792                                  	;ja	short AllocSetLink
 34793                                  	;;jmp	short AllocGetLink
 34794                                  ;AllocGetLink:
 34795                                  	; MSDOS 6.0
 34796                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 34797                                  	;and 	al,LINKSTATE
 34798                                  	;;transfer SYS_RET_OK
 34799                                  	;jmp	SYS_RET_OK
 34800                                  
 34801 000064F9 3C02                    	cmp	al,2
 34802                                  	; 17/12/2022
 34803 000064FB 7223                    	jb	short AllocSetStrat ; al = 1
 34804 000064FD 7432                    	je	short AllocGetLink
 34805                                  
 34806                                  	;cmp	al,2
 34807                                  	;jz	short AllocGetLink
 34808 000064FF 3C03                    	cmp	al,3
 34809 00006501 7436                    	jz	short AllocSetLink
 34810                                  
 34811                                  	; 15/04/2018
 34812                                  	;CMP	AL,1
 34813                                          ;JB	SHORT AllocOperGet
 34814                                          ;JZ	SHORT AllocOperSet
 34815                                  
 34816                                  AllocOperError:
 34817                                  	; 04/08/2018 - Retro DOS v3.0
 34818                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus
 34819                                  	;mov	byte [ss:EXTERR_LOCUS],5
 34820 00006503 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34821                                  	;error	error_invalid_function
 34822                                  	;mov	al,1
 34823 00006509 B001                    	MOV	AL,error_invalid_function
 34824                                  	; 17/12/2022
 34825                                  ;AllocOperErrj:
 34826                                  	;JMP	SYS_RET_ERR
 34827                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34828                                  	;jmp	short dealloc_errj
 34829                                  	; 17/12/2022
 34830 0000650B EBE5                    	jmp	short AllocOperErrj
 34831                                  
 34832                                  AllocArenaError:
 34833                                  	; MSDOS 6.0
 34834 0000650D 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34835                                  					; M009: Extended Error Locus
 34836                                  	;error	error_arena_trashed	; M009:
 34837                                  	;mov	al,7
 34838 00006513 B007                    	MOV	AL,error_arena_trashed
 34839                                  	;JMP	SYS_RET_ERR
 34840 00006515 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 34841                                  
 34842                                  AllocGetStrat: 
 34843                                  	; MSDOS 6.0
 34844                                  AllocOperGet:
 34845 00006517 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 34846 0000651B 30E4                            XOR     AH,AH
 34847                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34848                                  	;transfer SYS_RET_OK
 34849                                  AllocOperOk:
 34850                                  	; 17/12/2022
 34851                                  	;jmp	short dealloc_ok
 34852 0000651D E964A1                  	JMP	SYS_RET_OK
 34853                                  
 34854                                  AllocSetStrat: 
 34855                                  	; 14/05/2019
 34856                                  	; MSDOS 6.0
 34857 00006520 53                      	push	bx			; M000 - start
 34858                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34859                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 34860                                  	; 17/12/2022
 34861 00006521 80E33F                  	and	bl,3Fh
 34862 00006524 83FB02                  	cmp	bx,2			; BX must be 0-2
 34863                                  	;cmp	bl,2
 34864 00006527 5B                      	pop	bx			; M000 - end
 34865 00006528 77D9                    	ja	short AllocOperError
 34866                                  
 34867                                  AllocOperSet:
 34868 0000652A 36881E[0203]                    MOV     [SS:AllocMethod],BL
 34869                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34870                                  	;transfer SYS_RET_OK
 34871                                  AllocOperOkj:
 34872 0000652F EBEC                    	jmp	short AllocOperOk
 34873                                  	;JMP	SYS_RET_OK
 34874                                  
 34875                                  AllocGetLink:
 34876                                  	; MSDOS 6.0
 34877 00006531 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 34878                                  	;and	al,1
 34879 00006535 2401                    	and 	al,LINKSTATE
 34880                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34881                                  	;transfer SYS_RET_OK
 34882                                  AllocOperOkj2:
 34883                                  	; 17/12/2022
 34884 00006537 EBE4                    	jmp	short AllocOperOk
 34885                                  	;jmp	short AllocOperOkj
 34886                                  	;;JMP	SYS_RET_OK
 34887                                  
 34888                                  AllocSetLink:
 34889                                  	; MSDOS 6.0			; M009 - start
 34890 00006539 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 34891 0000653E 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 34892 00006541 74C0                    	je	short AllocOperError	; N: error
 34893                                  					; Y: continue
 34894                                  					; M009 - end
 34895 00006543 83FB01                  	cmp	bx,1
 34896 00006546 7204                    	jb	short UnlinkUmbs
 34897 00006548 741C                    	jz	short LinkUmbs
 34898                                  	
 34899 0000654A EBB7                    	jmp	short AllocOperError
 34900                                  	
 34901                                  UnlinkUmbs:
 34902                                  	;test	byte [ss:UMBFLAG],1
 34903 0000654C 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 34904 00006552 7410                    	jz	short unlinked		; Y: return 
 34905                                  	
 34906 00006554 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 34907 00006557 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 34908                                  	
 34909                                  					; make it last
 34910 00006559 C60600005A              	mov	byte [0],arena_signature_end
 34911                                  	
 34912                                  	;and	byte [ss:UMBFLAG],0FEh
 34913 0000655E 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 34914                                  	
 34915                                  unlinked:
 34916                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34917                                  	;transfer SYS_RET_OK
 34918                                  	; 17/12/2022
 34919 00006564 EBB7                    	jmp	short AllocOperOk
 34920                                  	;jmp	short AllocOperOkj2
 34921                                  	;;JMP	SYS_RET_OK
 34922                                  
 34923                                  LinkUmbs:
 34924 00006566 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 34925 0000656C 7510                    	jnz	short linked		; Y: return
 34926                                  	
 34927 0000656E E80F00                  	call	GetLastArena		; get arena before umb_head
 34928 00006571 729A                    	jc	short AllocArenaError	; M009: arena trashed
 34929                                  	
 34930                                  					; make it normal. M061: ds points to
 34931                                  					; arena before umb_head
 34932 00006573 C60600004D              	mov	byte [0],arena_signature_normal
 34933                                  	
 34934 00006578 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 34935                                  linked:
 34936                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34937                                  	;transfer SYS_RET_OK
 34938                                  	; 17/12/2022
 34939 0000657E EB9D                    	jmp	short AllocOperOk
 34940                                  	;jmp	short unlinked
 34941                                  	;;JMP	SYS_RET_OK
 34942                                  
 34943                                  ; MSDOS 6.0
 34944                                  ;--------------------------------------------------------------------------
 34945                                  ; Procedure Name : GetLastArena		-  M003
 34946                                  ;
 34947                                  ; Inputs	 : cx = umb_head
 34948                                  ;
 34949                                  ;
 34950                                  ; Outputs	 : If UMBs are linked
 34951                                  ;			ES = umb_head
 34952                                  ;			DS = arena before umb_head
 34953                                  ;		   else
 34954                                  ;			DS = last arena
 34955                                  ;			ES = next arena. will be umb_head if NC.
 34956                                  ;
 34957                                  ;		   CY if error
 34958                                  ;
 34959                                  ; Uses		 : DS, ES, DI, BX
 34960                                  ;--------------------------------------------------------------------------
 34961                                  
 34962                                  ; 14/05/2019 - Retro DOS v4.0
 34963                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 34964                                  
 34965                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34966                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 34967                                  	
 34968                                  GetLastArena:
 34969 00006580 50                      	push	ax			; save ax
 34970                                  
 34971 00006581 36A1[2400]              	mov	ax,[ss:arena_head]
 34972 00006585 8EC0                    	mov	es,ax			; es = arena_head
 34973 00006587 31FF                    	xor	di,di
 34974                                  
 34975 00006589 26803D5A                	cmp     byte [es:di],arena_signature_end
 34976                                  					; Q: is this the last arena
 34977 0000658D 7419                    	je	short GLA_done		; Y: return last arena in ES
 34978                                  
 34979                                  GLA_next:
 34980 0000658F 8ED8                    	mov	ds,ax
 34981 00006591 E878FD                  	call	arena_next		; ax, es -> next arena
 34982                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34983                                  	;jc	short GLA_err
 34984                                  	; 17/12/2022
 34985 00006594 7228                    	jc	short GLA_err2
 34986                                  
 34987 00006596 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 34988 0000659C 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is
 34989                                  					;    umb_head
 34990                                  					; N: terminating condition is 05Ah
 34991                                  
 34992 0000659E 26803D5A                	cmp     byte [es:di],arena_signature_end
 34993                                  					; Q: is this the last arena
 34994 000065A2 EB02                    	jmp	short GLA_@f
 34995                                  GLA_chkumb:
 34996 000065A4 39C8                    	cmp	ax,cx			; Q: is this umb_head
 34997                                  GLA_@f:
 34998 000065A6 75E7                    	jne	short GLA_next		; N: get next arena
 34999                                  
 35000                                  GLA_done:
 35001                                  					; M061 - Start
 35002 000065A8 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35003 000065AE 750B                    	jnz	short GLA_ret		; Y: we're done
 35004                                  					; N: let us confirm that the next
 35005                                  					;    arena is umb_head
 35006 000065B0 8ED8                    	mov	ds,ax
 35007 000065B2 E857FD                  	call	arena_next		; ax, es -> next arena
 35008                                  	;jc	short GLA_err
 35009 000065B5 7207                    	jc	short GLA_err2
 35010 000065B7 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35011 000065B9 7502                    	jne	short GLA_err		; N: error
 35012                                  					; M061 - End
 35013                                  GLA_ret:
 35014                                  	; 17/12/2022
 35015                                  	;clc
 35016                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35017                                  	;clc
 35018 000065BB 58                      	pop	ax			; M061
 35019 000065BC C3                      	retn				; M061
 35020                                  
 35021                                  GLA_err:
 35022 000065BD F9                      	stc				; M061
 35023                                  GLA_err2:
 35024 000065BE 58                      	pop	ax
 35025 000065BF C3                      	retn
 35026                                  
 35027                                  ;============================================================================
 35028                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 35029                                  ;============================================================================
 35030                                  ; 04/08/2018 - Retro DOS v3.0
 35031                                  
 35032                                  ;	TITLE SRVCALL - Server DOS call
 35033                                  ;	NAME  SRVCALL
 35034                                  
 35035                                  ;**	SRVCALL.ASM - Server DOS call functions
 35036                                  ;
 35037                                  ;
 35038                                  ;	$ServerCall
 35039                                  ;
 35040                                  ;	Modification history:
 35041                                  ;
 35042                                  ;	    Created: ARR 08 August 1983
 35043                                  
 35044                                  ;AsmVars <Installed>
 35045                                  
 35046                                  ;include dpl.asm
 35047                                  
 35048                                  ;Installed = TRUE
 35049                                  
 35050                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 35051                                  ; ---------------------------------------------------------------------------
 35052                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35053                                  
 35054                                  ;BREAK <ServerCall -- Server DOS call>
 35055                                  
 35056                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 35057                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 35058                                  
 35059                                  ;hkn; TABLE	SEGMENT
 35060                                  ;Public SRVC001S,SRVC001E
 35061                                  ;SRVC001S label byte
 35062                                  
 35063                                  SRVC001S:
 35064                                  
 35065 000065C0 [C465]                  SERVERTAB:	dw	SERVER_DISP
 35066 000065C2 [1666]                  SERVERLEAVE:	dw	SERVERRETURN
 35067 000065C4 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 35068 000065C5 [7C66]                  		dw	SRV_CALL	; 0
 35069 000065C7 [1766]                  		dw	COMMIT_ALL	; 1
 35070 000065C9 [4D66]                  		dw	CLOSE_NAME	; 2
 35071 000065CB [5666]                  		dw	CLOSE_UID	; 3
 35072 000065CD [5D66]                  		dw	CLOSE_UID_PID	; 4
 35073 000065CF [6466]                  		dw	GET_LIST	; 5
 35074 000065D1 [BD66]                  		dw	GET_DOS_DATA	; 6
 35075 000065D3 [E166]                  		dw	SPOOL_OPER	; 7
 35076 000065D5 [E166]                  		dw	SPOOL_OPER	; 8
 35077 000065D7 [E166]                  		dw	SPOOL_OPER	; 9
 35078 000065D9 [ED66]                  		dw	_$SetExtendedError  ; 10
 35079                                  
 35080                                  SERVER_DISP_END:  ;  LABEL BYTE
 35081                                  
 35082                                  ;SRVC001E label byte
 35083                                  
 35084                                  SRVC001E:
 35085                                  
 35086                                  ;hkn; TABLE	ENDS
 35087                                  
 35088                                  ;----------------------------------------------------------------------------
 35089                                  ;
 35090                                  ; Procedure Name : $ServerCall
 35091                                  ;
 35092                                  ; Inputs:
 35093                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 35094                                  ; Function:
 35095                                  ;	AL=0	Server DOS call
 35096                                  ;	AL=1	Commit All files
 35097                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 35098                                  ;	AL=3	Close all files for DPL_UID
 35099                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 35100                                  ;	AL=5	Get open file list entry
 35101                                  ;		    IN: BX File Index
 35102                                  ;			CX User Index
 35103                                  ;		    OUT:ES:DI -> Name
 35104                                  ;			BX = UID
 35105                                  ;		    CX = # locked blocks held by this UID
 35106                                  ;	AL=6	Get DOS data area
 35107                                  ;		    OUT: DS:SI -> Start
 35108                                  ;			CX size in bytes of swap if indos
 35109                                  ;			DX size in bytes of swap always
 35110                                  ;	AL=7	Get truncate flag
 35111                                  ;	AL=8	Set truncate flag
 35112                                  ;	AL=9	Close all spool files
 35113                                  ;	AL=10	SetExtendedError
 35114                                  ;
 35115                                  ;----------------------------------------------------------------------------
 35116                                  
 35117                                  _$ServerCall:
 35118                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35119                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 35120                                  	; 10/06/2019
 35121                                  	; 29/04/2019 - Retro DOS v4.0
 35122                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 35123                                  
 35124                                  	; 05/08/2018 - Retro DOS v3.0
 35125                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 35126 000065DB 3C07                    	CMP	AL,7
 35127 000065DD 7204                    	JB	short SET_STUFF
 35128 000065DF 3C09                    	CMP	AL,9
 35129 000065E1 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 35130                                  SET_STUFF:
 35131 000065E3 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 35132                                  	;mov	bx,[si+12h]
 35133 000065E5 8B5C12                  	MOV	BX,[SI+DPL.UID]
 35134                                  
 35135                                  	; MSDOS 6.0
 35136                                  ;SR;
 35137                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 35138                                  ; of USER_ID
 35139                                  
 35140 000065E8 36F606[3010]01          	test	byte [SS:IsWin386],1
 35141 000065EE 7505                    	jnz	short skip_win386
 35142                                  
 35143                                  ;hkn; SS override for user_id and proc_id
 35144                                  	; 15/08/2018
 35145 000065F0 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 35146                                  
 35147                                  skip_win386:
 35148 000065F5 8B5C14                  	MOV	BX,[SI+DPL.PID]
 35149 000065F8 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 35150                                  NO_SET_ID:
 35151                                  	; 10/06/2019 - Retro DOS v4.0
 35152 000065FD 2EFF36[C265]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 35153 00006602 2EFF36[C065]            	PUSH	word [cS:SERVERTAB]	; push table address
 35154 00006607 50                      	PUSH	AX
 35155 00006608 E88DAC                  	call	TableDispatch
 35156                                  
 35157                                  ;hkn; SS override
 35158                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 35159 0000660B 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35160                                  	;error	error_invalid_function
 35161                                  	;mov	al,1
 35162 00006611 B001                    	MOV	AL,error_invalid_function
 35163                                  servercall_error:
 35164 00006613 E977A0                  	JMP	SYS_RET_ERR
 35165                                  
 35166                                  SERVERRETURN:
 35167 00006616 C3                      	retn
 35168                                  
 35169                                  ; Commit - iterate through the open file list and make sure that the
 35170                                  ; directory entries are correctly updated.
 35171                                  
 35172                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35173                                  COMMIT_ALL:
 35174 00006617 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 35175 00006619 16                      	push	ss
 35176 0000661A 1F                      	pop	ds
 35177 0000661B E86AAD                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 35178                                  CommitLoop:
 35179 0000661E 53                      	push	bx
 35180 0000661F E82201                  	call	SFFromSFN
 35181 00006622 7222                    	JC	short CommitDone
 35182 00006624 26833D00                	cmp	word [es:di],0
 35183                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 35184                                  					; if (ThisSFT->refcount != 0)
 35185 00006628 7418                    	JZ	short CommitNext
 35186                                  	;cmp	word [es:di],0FFFFh ; -1
 35187 0000662A 26833DFF                	cmp	word [ES:DI],sf_busy
 35188                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 35189                                  					; BUSY SFTs have god knows what
 35190 0000662E 7412                    	JZ	short CommitNext	;   in them.
 35191                                  	; 17/12/2022
 35192 00006630 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 35193                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 35194 00006635 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 35195                                  					;	doesn't deadlock
 35196 00006637 893E[9E05]              	MOV	[THISSFT],DI
 35197 0000663B 8C06[A005]              	MOV	[THISSFT+2],ES
 35198 0000663F E8A3CA                  	call	DOS_COMMIT		;	DOSCommit ();
 35199                                  CommitNext:
 35200 00006642 5B                      	pop	bx
 35201 00006643 43                      	INC	BX
 35202 00006644 EBD8                    	JMP	short CommitLoop
 35203                                  CommitDone:
 35204 00006646 E85AAD                  	call	LCritSFT
 35205 00006649 5B                      	pop	bx
 35206                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35207                                  Commit_Ok:
 35208 0000664A E937A0                  	jmp	SYS_RET_OK
 35209                                  	
 35210                                  CLOSE_NAME:
 35211                                  
 35212                                  ;if installed
 35213                                  
 35214                                  ;hkn; SS override
 35215                                  	;call	far [ss:MFTcloN]
 35216 0000664D 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 35217                                  ;else
 35218                                  ;	Call	MFTcloN
 35219                                  ;endif
 35220                                  
 35221                                  CheckReturns:
 35222                                  
 35223                                  ; 10/03/2024
 35224                                  %if 0
 35225                                  	JC	short func_err
 35226                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35227                                  	;transfer SYS_RET_OK
 35228                                  Commit_Okj:
 35229                                  	jmp	short Commit_Ok
 35230                                  	;jmp	SYS_RET_OK
 35231                                  %else
 35232 00006652 73F6                    	jnc	short Commit_Ok
 35233                                  %endif
 35234                                  
 35235                                  func_err:
 35236                                  	;transfer SYS_RET_ERR
 35237                                  	;jmp	SYS_RET_ERR
 35238 00006654 EBBD                    	jmp	short servercall_error
 35239                                  
 35240                                  CLOSE_UID:
 35241                                  
 35242                                  ;if installed
 35243                                  ;hkn; SS override
 35244                                  	;call	far [ss:MFTclU]
 35245 00006656 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 35246                                  ;else
 35247                                  ;	Call	MFTclU
 35248                                  ;endif
 35249 0000665B EBF5                    	JMP	short CheckReturns
 35250                                  
 35251                                  CLOSE_UID_PID:
 35252                                  
 35253                                  ;if installed
 35254                                  ;hkn; SS override
 35255                                  	;call	far [ss:MFTCloseP]
 35256 0000665D 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP
 35257                                  ;else
 35258                                  ;	Call	MFTCloseP
 35259                                  ;endif
 35260 00006662 EBEE                    	JMP	short CheckReturns
 35261                                  
 35262                                  GET_LIST:
 35263                                  
 35264                                  ;if installed
 35265                                  ;hkn; SS override
 35266                                  	;call	far [ss:MFT_get]
 35267 00006664 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 35268                                  ;else
 35269                                  ;	Call	MFT_get
 35270                                  ;endif
 35271 00006669 72E9                    	JC	short func_err
 35272 0000666B E85C9E                  	call	Get_User_Stack
 35273                                  	;mov	[si+2],bx
 35274 0000666E 895C02                  	MOV	[SI+user_env.user_BX],BX
 35275                                  	;mov	[si+10],di
 35276 00006671 897C0A                  	MOV	[SI+user_env.user_DI],DI
 35277                                  	;mov	[si+16],es
 35278 00006674 8C4410                  	MOV	[SI+user_env.user_ES],ES
 35279                                  SetCXOK:
 35280                                  	;mov	[si+4],cx
 35281 00006677 894C04                  	MOV	[SI+user_env.user_CX],CX
 35282                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35283                                  	;transfer SYS_RET_OK
 35284                                  Commit_Okj2:
 35285                                  	; 17/12/2022
 35286 0000667A EBCE                    	jmp	short Commit_Ok
 35287                                  	;jmp	short Commit_Okj
 35288                                  	;;jmp	SYS_RET_OK
 35289                                  
 35290                                  SRV_CALL:
 35291 0000667C 58                      	POP	AX			; get rid of call to $srvcall
 35292 0000667D 1E                      	push	ds
 35293 0000667E 56                      	push	si
 35294 0000667F E8489E                  	call	Get_User_Stack
 35295 00006682 5F                      	pop	di
 35296 00006683 07                      	pop	es
 35297                                  
 35298                                  ; DS:SI point to stack
 35299                                  ; ES:DI point to DPL
 35300                                  
 35301 00006684 E8F0AB                  	call	XCHGP
 35302                                  
 35303                                  ; DS:SI point to DPL
 35304                                  ; ES:DI point to stack
 35305                                  ;
 35306                                  ; We now copy the registers from DPL to save stack
 35307                                  
 35308 00006687 56                      	push	si
 35309 00006688 B90600                  	MOV	CX,6
 35310 0000668B F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 35311 0000668D 47                      	INC	DI
 35312 0000668E 47                      	INC	DI			; Skip user_BP
 35313 0000668F A5                      	MOVSW				; DS
 35314 00006690 A5                      	MOVSW				; ES
 35315 00006691 5E                      	pop	si			; DS:SI -> DPL
 35316 00006692 8B04                    	mov	ax,[SI]
 35317                                  	;MOV	AX,[SI+DPL.AX]
 35318                                  	;mov	bx,[si+2]
 35319 00006694 8B5C02                  	MOV	BX,[SI+DPL.BX]
 35320                                  	;mov	cx,[si+4]
 35321 00006697 8B4C04                  	MOV	CX,[SI+DPL.CX]
 35322                                  	;mov	dx,[si+6]
 35323 0000669A 8B5406                  	MOV	DX,[SI+DPL.DX]
 35324                                  	;mov	di,[si+10]
 35325 0000669D 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 35326                                  	;mov	es,[si+14]
 35327 000066A0 8E440E                  	MOV	ES,[SI+DPL.ES]
 35328                                  	;push	word [si+8]
 35329 000066A3 FF7408                  	PUSH	word [SI+DPL.SI]
 35330                                  	;mov	ds,[si+12]
 35331 000066A6 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 35332 000066A9 5E                      	POP	SI
 35333                                  
 35334                                  ;hkn; SS override for next 3
 35335 000066AA 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 35336 000066AF 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 35337 000066B4 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 35338 000066BA E90A9D                  	jmp	REDISP
 35339                                  
 35340                                  GET_DOS_DATA:
 35341 000066BD 16                      	push	ss
 35342 000066BE 07                      	pop	es
 35343 000066BF BF[2003]                	MOV     DI,SWAP_START
 35344 000066C2 B9[AC0A]                	MOV     CX,SWAP_END
 35345 000066C5 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 35346 000066C8 29F9                    	SUB     CX,DI
 35347 000066CA 29FA                    	SUB     DX,DI
 35348 000066CC D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 35349 000066CE 83D100                  	ADC     CX,0                    ; div by 2 + round up
 35350 000066D1 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 35351 000066D3 E8F49D                  	call	Get_User_Stack
 35352                                  	;mov	[si+14],es
 35353 000066D6 8C440E                  	MOV     [SI+user_env.user_DS],ES
 35354                                  	;mov	[si+8],di
 35355 000066D9 897C08                  	MOV     [SI+user_env.user_SI],DI
 35356                                  	;mov	[si+6],dx
 35357 000066DC 895406                  	MOV     [SI+user_env.user_DX],DX
 35358 000066DF EB96                    	JMP	short SetCXOK
 35359                                  
 35360                                  SPOOL_OPER:
 35361                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 35362                                  
 35363 000066E1 50                      	push    ax
 35364 000066E2 B82511                  	mov     ax,1125h
 35365 000066E5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 35366                                  			; STACK: WORD subfunction
 35367                                  			; Return: CF set on error, AX = error code
 35368                                  			; STACK unchanged
 35369 000066E7 5B                      	pop	bx
 35370                                  	; 17/12/2022
 35371                                  	;JC	short func_err2
 35372 000066E8 7390                    	jnc	short Commit_Okj2
 35373                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35374                                  	;;jmp	SYS_RET_OK
 35375                                  	;jmp	short Commit_Okj2
 35376                                  	
 35377                                  func_err2:
 35378 000066EA E9A09F                  	jmp	SYS_RET_ERR
 35379                                  
 35380                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 35381                                  ;--------------------------------------------------------------------------
 35382                                  ;
 35383                                  ; Procedure Name : $SetExtendedError
 35384                                  ;
 35385                                  ; $SetExtendedError takes extended error information and loads it up for the
 35386                                  ; next extended error call.  This is used by interrupt-level proccessors to
 35387                                  ; mask their actions.
 35388                                  ;
 35389                                  ;   Inputs: DS:SI points to DPL which contains all registers
 35390                                  ;   Outputs: none
 35391                                  ;
 35392                                  ;---------------------------------------------------------------------------
 35393                                  
 35394                                  _$SetExtendedError:
 35395                                  
 35396                                  ;hkn; SS override for all variables used
 35397                                  
 35398 000066ED 8B04                    	mov	ax,[si]
 35399                                  	;MOV	AX,[SI+DPL.AX]
 35400 000066EF 36A3[2403]              	MOV	[SS:EXTERR],AX
 35401                                  	;mov	ax,[si+10]
 35402 000066F3 8B440A                  	MOV	AX,[SI+DPL.DI]
 35403 000066F6 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 35404                                  	;mov	ax,[si+14]
 35405 000066FA 8B440E                  	MOV	AX,[SI+DPL.ES]
 35406 000066FD 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 35407                                  	;mov	ax,[si+2]
 35408 00006701 8B4402                  	MOV	AX,[SI+DPL.BX]
 35409 00006704 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 35410                                  	;mov	ax,[si+4]
 35411 00006708 8B4404                  	MOV	AX,[SI+DPL.CX]
 35412 0000670B 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 35413 00006710 C3                      	retn
 35414                                  
 35415                                  ;============================================================================
 35416                                  ; UTIL.ASM, MSDOS 6.0, 1991
 35417                                  ;============================================================================
 35418                                  ; 05/08/2018 - Retro DOS v3.0
 35419                                  ; 05/05/2019 - Retro DOS v4.0
 35420                                  
 35421                                  ;**	Handle related utilities for MSDOS 2.X.
 35422                                  ;----------------------------------------------------------------------------
 35423                                  ;	pJFNFromHandle	written
 35424                                  ;	SFFromHandle	written
 35425                                  ;	SFFromSFN	written
 35426                                  ;	JFNFree 	written
 35427                                  ;	SFNFree 	written
 35428                                  ;
 35429                                  ;	Modification history:
 35430                                  ;
 35431                                  ;	    Created: MZ 1 April 1983
 35432                                  ;----------------------------------------------------------------------------
 35433                                  
 35434                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 35435                                  
 35436                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 35437                                  ;----------------------------------------------------------------------------
 35438                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 35439                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 35440                                  ;
 35441                                  ;	NOTE:
 35442                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35443                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 35444                                  ;
 35445                                  ;	ENTRY	(bx) = handle
 35446                                  ;	EXIT	'C' clear if ok
 35447                                  ;		  (es:di) = address of JFN value
 35448                                  ;		'C' set if error
 35449                                  ;		  (ax) = error code
 35450                                  ;	USES	AX, DI, ES, Flags
 35451                                  ;----------------------------------------------------------------------------
 35452                                  
 35453                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35454                                  
 35455                                  pJFNFromHandle:
 35456                                  	; 05/05/2019 - Retro DOS v4.0
 35457                                  	;getdseg <es>			; es -> dosdata
 35458 00006711 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35459                                  	
 35460                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 35461 00006716 268E06[3003]            	mov	es,[es:CurrentPDB]
 35462                                  
 35463                                  	;cmp	bx,[ES:32h]
 35464 0000671B 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 35465 00006720 7204                    	JB	short pjfn10		; no, get offset
 35466                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 35467                                  	;mov	al,6
 35468 00006722 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 35469                                  ReturnCarry:
 35470 00006724 F9                      	STC                             ; signal error
 35471 00006725 C3                      	retn				; go back
 35472                                  pjfn10: 
 35473                                  	;les	di,[es:34h]
 35474 00006726 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 35475 0000672B 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 35476                                  	;clc
 35477                                  pJFNFromHandle_error:
 35478 0000672D C3                      	retn
 35479                                  
 35480                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 35481                                  ;----------------------------------------------------------------------------
 35482                                  ;
 35483                                  ; Procedure Name : SFFromHandle
 35484                                  ;
 35485                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 35486                                  ;
 35487                                  ;   Input:      BX has handle
 35488                                  ;   Output:     Carry Set
 35489                                  ;                   AX has error code
 35490                                  ;               Carry Reset
 35491                                  ;                   ES:DI has pointer to SF entry
 35492                                  ;   Registers modified: If error, AX,ES, else ES:DI
 35493                                  ; NOTE:
 35494                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35495                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35496                                  ;
 35497                                  ;----------------------------------------------------------------------------
 35498                                  
 35499                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35500                                  
 35501                                  SFFromHandle:
 35502 0000672E E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 35503                                  	;retc				; return if error
 35504 00006731 72FA                    	jc	short pJFNFromHandle_error
 35505 00006733 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 35506                                  	;JNZ	short GetSF		; nope, suck out SF
 35507                                  	;;mov	al,6
 35508                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35509                                  	;jmp	short ReturnCarry	; signal it
 35510                                  	; 17/12/2022
 35511                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35512 00006737 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 35513                                  	;JNZ	short GetSF		; nope, suck out SF
 35514                                  	;;mov	al,6
 35515                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35516                                  	;jmp	short ReturnCarry	; signal it
 35517                                  GetSF:
 35518 00006739 53                      	push	bx			; save handle
 35519 0000673A 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 35520 0000673D 30FF                    	XOR     BH,BH                   ; ignore upper half
 35521 0000673F E80200                  	CALL    SFFromSFN               ; get real sf spot
 35522 00006742 5B                      	pop	bx			; restore
 35523 00006743 C3                      	retn                        	; say goodbye
 35524                                  
 35525                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 35526                                  
 35527                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 35528                                  ;----------------------------------------------------------------------------
 35529                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 35530                                  ;	is more than just a simple index instruction because the SF table
 35531                                  ;	can be made up of multiple pieces chained together. We follow the
 35532                                  ;	chain to the right piece and then do the index operation.
 35533                                  ;
 35534                                  ;   NOTE:
 35535                                  ;	This routine is called from SFFromHandle which is called
 35536                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35537                                  ;
 35538                                  ;	ENTRY	BX has SF index
 35539                                  ;	EXIT	'C' clear if OK
 35540                                  ;		  ES:DI points to SF entry
 35541                                  ;		'C' set if index too large
 35542                                  ;	USES	BX, DI, ES
 35543                                  ;----------------------------------------------------------------------------
 35544                                  
 35545                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35546                                  
 35547                                  SFFromSFN:
 35548                                  	; 05/05/2019 - Retro DOS v4.0
 35549                                  	;getdseg <es>			; es -> dosdata
 35550 00006744 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35551                                  
 35552                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 35553 00006749 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 35554                                  sfsfn5:	
 35555                                  	;cmp	bx,[es:di+4]
 35556 0000674E 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 35557 00006752 720E                    	JB	short sfsfn7		; yes, go grab it
 35558                                  	;sub	bx,[es:di+4]
 35559 00006754 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 35560 00006758 26C43D                  	les	di,[es:di] ; 14/08/2018
 35561                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 35562 0000675B 83FFFF                  	CMP     DI,-1                   ; end of tables?
 35563 0000675E 75EE                    	JNZ	short sfsfn5		; no, try again
 35564 00006760 F9                      	STC
 35565 00006761 C3                      	retn				; return with error, not found
 35566                                  sfsfn7:
 35567 00006762 50                      	push	ax
 35568                                  	;mov	ax,53 ; MSDOS 3.3
 35569                                  	;mov	ax,59 ; MSDOS 6.0
 35570                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 35571                                  	
 35572                                  	; 17/12/2022
 35573 00006763 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 35574                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35575                                  	;mov	ax,SF_ENTRY.size ; 59
 35576                                  	
 35577 00006765 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 35578 00006767 01C7                    	ADD	DI,AX			; add base of SF block
 35579 00006769 58                      	pop	ax
 35580                                  	;add	di,6
 35581 0000676A 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 35582 0000676D C3                      	retn				; return with 'C' clear
 35583                                  
 35584                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 35585                                  
 35586                                  ;**	JFNFree - Find a Free JFN Slot
 35587                                  ;----------------------------------------------------------------------------
 35588                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 35589                                  ;
 35590                                  ;	ENTRY	(ss) = DOSDATA
 35591                                  ;	EXIT	'C' clear if OK
 35592                                  ;		  (bx) = new handle
 35593                                  ;		  (es:di) = pointer to JFN slot
 35594                                  ;		'C' set if error
 35595                                  ;		  (al) = error code
 35596                                  ;	USES	bx, di, es, flags
 35597                                  ;----------------------------------------------------------------------------
 35598                                  
 35599                                  JFNFree:
 35600 0000676E 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 35601                                  jfnf1:	
 35602 00006770 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 35603 00006773 7209                    	JC	short jfnf5		; no more handles
 35604 00006775 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 35605 00006779 7405                    	je	short jfnfx		; yes, carry is clear
 35606 0000677B 43                      	INC     BX                      ; no, next handle
 35607 0000677C EBF2                    	JMP	short jfnf1		; and try again
 35608                                  
 35609                                  	; Error. 'C' set
 35610                                  jfnf5:	
 35611                                  	;mov	al,4
 35612 0000677E B004                    	MOV	AL,error_too_many_open_files
 35613                                  jfnfx:	
 35614 00006780 C3                      	retn				; bye
 35615                                  
 35616                                  ;	BREAK <SFNFree - Allocate a free SFN>
 35617                                  
 35618                                  ;**	SFNFree - Allocate a Free SFN/SFT
 35619                                  ;----------------------------------------------------------------------------
 35620                                  ;	SFNFree scans through the sf table looking for a free entry
 35621                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 35622                                  ;
 35623                                  ;	The problem is that we want to mark the SFT busy so that other threads
 35624                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 35625                                  ;	we can't just mark it busy because we may get blown out of our open
 35626                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 35627                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 35628                                  ;	an SFT with this value we look to see if it belongs to this user
 35629                                  ;	and process.  If it does belong to us then it must be an orphan
 35630                                  ;	and we reclaim it.
 35631                                  ;
 35632                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 35633                                  ;		over and over, but we could at least set a high water mark...
 35634                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 35635                                  ;		even though this is not a frequently called routine - jgl
 35636                                  ;
 35637                                  ;	ENTRY	(ss) = DOSDATA
 35638                                  ;	EXIT	'C' clear if no error
 35639                                  ;		  (bx) = SFN
 35640                                  ;		  (es:di) = pointer to SFT
 35641                                  ;		  es:[di].SFT_REF_COUNT = -1
 35642                                  ;		'C' set if error
 35643                                  ;		  (al) = error code
 35644                                  ;	USES	bx, di, es, Flags
 35645                                  ;----------------------------------------------------------------------------
 35646                                  
 35647                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35648                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 35649                                  
 35650                                  SFNFree:
 35651                                  	; 12/08/2018
 35652                                  	; 05/08/2018 - Retro DOS v3.0
 35653                                  	;
 35654                                  	; MSDOS 6.0
 35655 00006781 50                      	push	ax
 35656 00006782 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 35657                                  sfnf5:	
 35658 00006784 53                      	push	bx
 35659 00006785 E8BCFF                  	call	SFFromSFN		; get the potential handle
 35660 00006788 5B                      	pop	bx
 35661 00006789 723A                    	jc	short sfnf95		; no more free SFNs
 35662 0000678B 26833D00                	cmp	word [ES:DI],0
 35663                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 35664 0000678F 741D                    	je	short sfnf20			; yep, got one
 35665                                  	
 35666                                  	;cmp	word [es:di],0FFFFh ; -1
 35667 00006791 26833DFF                	cmp	word [ES:DI],sf_busy
 35668                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35669 00006795 7403                    	je	short sfnf10		; special busy mark
 35670                                  sfnf7:	
 35671 00006797 43                      	inc	bx			; try the next one
 35672 00006798 EBEA                    	jmp	short sfnf5
 35673                                  
 35674                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 35675                                  ;	it was abandoned during a earlier call and we can use it.
 35676                                  ;
 35677                                  ;	(bx)	= SFN
 35678                                  ;	(es:di) = pointer to SFT
 35679                                  ;	(TOS)	= caller's (ax)
 35680                                  
 35681                                  sfnf10:	
 35682 0000679A 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35683                                  	;cmp	[es:di+2Fh],ax
 35684 0000679E 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 35685 000067A2 75F3                    	jnz	short sfnf7		; not ours
 35686 000067A4 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35687                                  	;cmp	[es:di+31h],ax
 35688 000067A8 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 35689 000067AC 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 35690                                  
 35691                                  ;	We have an SFT to allocate
 35692                                  ;
 35693                                  ;	(bx)	= SFN
 35694                                  ;	(es:di) = pointer to SFT
 35695                                  ;	(TOS)	= caller's (ax)
 35696                                  
 35697                                  sfnf20:
 35698                                  	; cf = 0 ;; Retro DOS v3.0
 35699                                  
 35700                                  	;mov	word [es:di],0FFFFh
 35701 000067AE 26C705FFFF              	mov	word [ES:DI],sf_busy
 35702                                  					; make sure that this is allocated
 35703                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35704                                  
 35705 000067B3 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35706                                  	;mov	[es:di+2Fh],ax
 35707 000067B7 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 35708 000067BB 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35709                                  	;mov	[es:di+31h],ax
 35710 000067BF 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 35711                                  sfnf21: ;; Retro DOS v3.0
 35712                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35713                                  	;pop	ax
 35714                                  	;;clc
 35715                                  	;retn				; return with no error
 35716                                  	; 17/12/2022
 35717 000067C3 58                      	pop	ax
 35718                                  	;clc
 35719 000067C4 C3                      	retn
 35720                                  
 35721                                  ;**	Error - no more free SFNs
 35722                                  ;
 35723                                  ;	'C' set
 35724                                  ;	(TOS) = saved ax
 35725                                  
 35726                                  sfnf95: 
 35727 000067C5 58                      	pop	ax
 35728                                  	;mov	al,4
 35729 000067C6 B004                    	mov	al,error_too_many_open_files
 35730 000067C8 C3                      	retn				; return with 'C' and error
 35731                                  
 35732                                  ;============================================================================
 35733                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 35734                                  ;============================================================================
 35735                                  ; 13/07/2018 - Retro DOS v3.0
 35736                                  ; 20/05/2019 - Retro DOS v4.0
 35737                                  
 35738                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 35739                                  
 35740                                  ;	BREAK <$Close - return a handle to the system>
 35741                                  ;----------------------------------------------------------------------------
 35742                                  ;
 35743                                  ;**	$Close - Close a file Handle
 35744                                  ;
 35745                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 35746                                  ;		path
 35747                                  ;
 35748                                  ;	Assembler usage:
 35749                                  ;	    MOV     BX, handle
 35750                                  ;	    MOV     AH, Close
 35751                                  ;	    INT     int_command
 35752                                  ;
 35753                                  ;	ENTRY	(bx) = handle
 35754                                  ;	EXIT	<normal INT21 return convention>
 35755                                  ;	USES	all
 35756                                  ;
 35757                                  ;----------------------------------------------------------------------------
 35758                                  
 35759                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35760                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 35761                                  
 35762                                  _$CLOSE:
 35763                                  ;	Grab the SFT pointer from the JFN.
 35764                                  
 35765 000067C9 E85802                  	call	CheckOwner		; get system file entry
 35766 000067CC 722B                    	jc	short CloseError	; error return
 35767 000067CE 16                      	push	ss
 35768 000067CF 1F                      	pop	ds			; For DOS_CLOSE
 35769 000067D0 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35770 000067D4 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35771                                  
 35772                                  ; DS:SI point to JFN table entry.
 35773                                  ; ES:DI point to SFT
 35774                                  ;
 35775                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 35776                                  ; FCB, we examine the ref count on the SFT; if it was 1, we free the JFN.
 35777                                  ; If the file was not a net FCB, we free the JFN too.
 35778                                  
 35779                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 35780 000067D8 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 35781 000067DC 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 35782                                  	;mov	al,[ES:DI+2]
 35783 000067DE 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 35784                                  	;and	al,0F0h
 35785 000067E2 24F0                    	AND	AL,SHARING_MASK
 35786                                  	;cmp	al,70h
 35787 000067E4 3C70                    	CMP	AL,SHARING_NET_FCB
 35788 000067E6 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 35789                                  
 35790                                  ; The JFN must be freed. Get the pointer to it and replace the contents with
 35791                                  ; -1.
 35792                                  
 35793                                  FreeJFN:
 35794 000067E8 E826FF                  	call	pJFNFromHandle		; d = pJFN (handle);
 35795 000067EB 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 35796                                  PostFree:
 35797                                  
 35798                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 35799                                  
 35800 000067EF E8A4C7                  	call	DOS_CLOSE
 35801                                  
 35802                                  ; DOS_Close may return an error. If we see such an error, we report it but
 35803                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 35804                                  
 35805 000067F2 7205                    	JC	short CloseError
 35806                                  	;mov	ah,3Eh
 35807 000067F4 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 35808                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35809                                  CloseOk:
 35810 000067F6 E98B9E                  	jmp	SYS_RET_OK
 35811                                  CloseError:
 35812                                  CommitError:	; 11/03/2024
 35813 000067F9 E9919E                  	jmp	SYS_RET_ERR
 35814                                  
 35815                                  ;	BREAK <$Commit - commit the file>
 35816                                  ;----------------------------------------------------------------------------
 35817                                  ;
 35818                                  ;**	$Commit - Commit a File
 35819                                  ;
 35820                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 35821                                  ;	flushed out. BUGBUG - I'm pretty sure that $Commit doesn't update
 35822                                  ;	the directory entry, etc., so this commit is pretty useless. check
 35823                                  ;	and fix this!! jgl
 35824                                  ;
 35825                                  ;	Assembler usage:
 35826                                  ;	    MOV     BX, handle
 35827                                  ;	    MOV     AH, Commit
 35828                                  ;	    INT     int_command
 35829                                  ;
 35830                                  ;	ENTRY	(bx) = handle
 35831                                  ;	EXIT	none
 35832                                  ;	USES	all
 35833                                  ;;----------------------------------------------------------------------------
 35834                                  
 35835                                  _$COMMIT:
 35836                                  ;	Grab the SFT pointer from the JFN.
 35837                                  
 35838 000067FC E82502                  	call	CheckOwner		; get system file entry
 35839                                  	;JC	short CommitError	; error return
 35840                                  	; 11/03/2024
 35841 000067FF 72F8                    	jc	short CommitError
 35842                                  
 35843 00006801 16                      	push	ss
 35844 00006802 1F                      	pop	ds			; For DOS_COMMIT
 35845 00006803 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35846 00006807 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35847                                  
 35848                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 35849                                  ;
 35850                                  ;	ES:DI point to SFT
 35851                                  
 35852 0000680B E8D7C8                  	call	DOS_COMMIT
 35853 0000680E 72E9                    	JC	short CommitError
 35854                                  	; 07/12/2022
 35855                                  	;jc	short CloseError
 35856                                  	;mov	ah,68h
 35857 00006810 B468                    	MOV	AH,COMMIT
 35858                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35859                                  	;jmp	SYS_RET_OK
 35860                                  CommitOk:
 35861 00006812 EBE2                    	jmp	short CloseOk
 35862                                  
 35863                                  ; 11/03/2024
 35864                                  ;CommitError:
 35865                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35866                                  ;	;jmp	SYS_RET_ERR
 35867                                  ;	jmp	short CloseError
 35868                                  
 35869                                  ;	BREAK <$ExtHandle - extend handle count>
 35870                                  
 35871                                  ;**	$ExtHandle - Extend Handle Count
 35872                                  ;----------------------------------------------------------------------------
 35873                                  ;	Assembler usage:
 35874                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 35875                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 35876                                  ;	    INT     int_command 		 busy )
 35877                                  ;
 35878                                  ;	ENTRY	(bx) = new number of handles
 35879                                  ;	EXIT	'C' clear if OK
 35880                                  ;		'C' set iff err
 35881                                  ;		  (ax) = error code
 35882                                  ;			 AX = error_not_enough_memory
 35883                                  ;			      error_too_many_open_files
 35884                                  ;	USES	all
 35885                                  ;----------------------------------------------------------------------------
 35886                                  
 35887                                  _$ExtHandle:
 35888 00006814 31ED                    	XOR	BP,BP			; 0: enlarge  1: shrink  2:psp
 35889                                  	;cmp	bx,20
 35890 00006816 83FB14                  	CMP	BX,FILPERPROC
 35891 00006819 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 35892 0000681B BB1400                  	MOV	BX,FILPERPROC
 35893                                  exth2:	
 35894 0000681E 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 35895                                  	;mov	cx,[ES:32h]
 35896 00006823 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 35897 00006828 39CB                    	CMP	BX,CX			; the requested == current
 35898 0000682A 7455                    	JE	short ok_done 		; yes and exit
 35899 0000682C 7722                    	JA	short larger		; go allocate new table
 35900                                  
 35901                                  ;	We're going to shrink the # of handles available
 35902                                  
 35903 0000682E BD0100                  	MOV	BP,1			; shrink
 35904                                  	;mov	ds,[ES:36h]
 35905 00006831 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 35906 00006836 89DE                    	MOV	SI,BX			;
 35907 00006838 29D9                    	SUB	CX,BX			; get difference
 35908                                  
 35909                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 35910                                  chck_handles:
 35911 0000683A 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 35912 0000683D 753D                    	JNZ	short too_many_files	; status
 35913 0000683F 46                      	INC	SI
 35914 00006840 E2F8                    	LOOP	chck_handles
 35915 00006842 83FB14                  	CMP	BX,FILPERPROC		; = 20
 35916 00006845 7709                    	JA	short larger		; no
 35917                                  
 35918 00006847 BD0200                  	MOV	BP,2			; psp
 35919                                  	;mov	di,24
 35920 0000684A BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 35921 0000684D 53                      	PUSH	BX
 35922 0000684E EB1D                    	JMP	short movhandl
 35923                                  
 35924                                  larger:
 35925 00006850 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 35926 00006853 747F                    	JZ	short invalid_func	; 10/08/2018
 35927 00006855 F8                      	CLC
 35928 00006856 53                      	PUSH	BX			; save requested number
 35929 00006857 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 35930 0000685A B104                    	MOV	CL,4
 35931                                  	;ror	bx,cl			; MSDOS 3.3
 35932 0000685C D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 35933 0000685E 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 35934                                  
 35935 00006862 55                      	PUSH	BP
 35936 00006863 E8DFFA                  	call	_$ALLOC			; allocate memory
 35937 00006866 5D                      	POP	BP
 35938 00006867 7266                    	JC	short no_memory		; not enough memory
 35939                                  
 35940 00006869 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 35941 0000686B 31FF                    	XOR	DI,DI
 35942                                  movhandl:
 35943 0000686D 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 35944                                  
 35945 00006872 F7C50300                	test	BP,3			; enlarge ?
 35946 00006876 740C                    	JZ	short enlarge 		; yes
 35947 00006878 59                      	POP	CX			; cx = the amount you shrink
 35948 00006879 51                      	PUSH	CX
 35949 0000687A EB0C                    	JMP	short copy_hand
 35950                                  
 35951                                  ;	Done.  'C' clear
 35952                                  
 35953                                  ; 17/12/2022
 35954                                  ;ok_done:
 35955                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35956                                  ;	;jmp	short CommitOk
 35957                                  ;	; 17/12/2022
 35958                                  ;	jmp	SYS_RET_OK
 35959                                  
 35960                                  too_many_files:
 35961                                  	;mov	al,4
 35962 0000687C B004                    	MOV	AL,error_too_many_open_files
 35963                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35964                                  	;jmp	SYS_RET_ERR
 35965                                  CommitErrorj:
 35966                                  	;jmp	short CommitError
 35967                                  	; 17/12/2022
 35968 0000687E E90C9E                  	jmp	SYS_RET_ERR
 35969                                  
 35970                                  ; 17/12/2022 
 35971                                  ok_done:
 35972                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35973                                  	;jmp	short CommitOk
 35974                                  	; 17/12/2022
 35975 00006881 E9009E                  	jmp	SYS_RET_OK
 35976                                  
 35977                                  enlarge:
 35978                                  	;mov	cx,[32h]
 35979 00006884 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 35980                                  copy_hand:
 35981 00006888 89CA                    	MOV	DX,CX
 35982                                  	;lds	si,[34h]
 35983 0000688A C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 35984 0000688E F3A4                    	REP	MOVSB			; copy information to new table
 35985 00006890 59                      	POP	CX			; get new number of handles
 35986 00006891 51                      	PUSH	CX			; save it again
 35987 00006892 29D1                    	SUB	CX,DX			; get the difference
 35988 00006894 B0FF                    	MOV	AL,-1			; set availability to handles
 35989 00006896 F3AA                    	REP	STOSB
 35990 00006898 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 35991                                  	;cmp	word [34h],0
 35992 0000689D 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 35993 000068A2 750D                    	JNZ	short update_info	; yes, go update PDB entries
 35994 000068A4 55                      	PUSH	BP
 35995 000068A5 1E                      	PUSH	DS			; save old table segment
 35996 000068A6 06                      	PUSH	ES			; save new table segment
 35997 000068A7 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 35998 000068AB E811FC                  	call	_$DEALLOC		; deallocate old table memory
 35999 000068AE 07                      	POP	ES			; restore new table segment
 36000 000068AF 1F                      	POP	DS			; restore old table segment
 36001 000068B0 5D                      	POP	BP
 36002                                  
 36003                                  update_info:
 36004 000068B1 F7C50200                	test	BP,2			; psp?
 36005 000068B5 7408                    	JZ	short non_psp 		; no
 36006                                  	;mov	word [34h],18h ; 24
 36007 000068B7 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 36008 000068BD EB06                    	JMP	short final
 36009                                  non_psp:
 36010                                  	;mov	word [34h],0
 36011 000068BF C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 36012                                  final:
 36013                                  	;mov	[36h],es	
 36014 000068C5 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 36015                                  	;pop	word [32h]
 36016 000068C9 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 36017                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36018                                  	;jmp	SYS_RET_OK
 36019                                  ok_done_j:
 36020 000068CD EBB2                    	jmp	short ok_done
 36021                                  
 36022                                  no_memory:
 36023 000068CF 5B                      	POP	BX			; clean stack
 36024                                  	;mov	al,8
 36025 000068D0 B008                    	MOV	AL,error_not_enough_memory
 36026                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36027                                  	;jmp	SYS_RET_ERR
 36028                                  CommitErrorj2:
 36029 000068D2 EBAA                    	jmp	short CommitErrorj
 36030                                  
 36031                                  invalid_func:
 36032                                  	;mov	al,1
 36033 000068D4 B001                    	MOV	AL,error_invalid_function
 36034                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36035                                  	;jmp	SYS_RET_ERR
 36036                                  CommitErrorj3:
 36037                                  	;jmp	short CommitErrorj2
 36038                                  	; 17/12/2022
 36039 000068D6 EBA6                    	jmp	short CommitErrorj
 36040                                  
 36041                                  ; 20/05/2019 - Retro DOS v4.0
 36042                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 36043                                  
 36044                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36045                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 36046                                  
 36047                                  ;	BREAK <$READ - Read from a file handle>
 36048                                  ;----------------------------------------------------------------------------
 36049                                  ;
 36050                                  ;**	$Read - Read from a File Handle
 36051                                  ;
 36052                                  ;   Assembler usage:
 36053                                  ;
 36054                                  ;	LDS	DX, buf
 36055                                  ;	MOV	CX, count
 36056                                  ;	MOV	BX, handle
 36057                                  ;	MOV	AH, Read
 36058                                  ;	INT	int_command
 36059                                  ;	  AX has number of bytes read
 36060                                  ;
 36061                                  ;	ENTRY	(bx) = file handle
 36062                                  ;		(cx) = byte count
 36063                                  ;		(ds:dx) = buffer address
 36064                                  ;	EXIT	Through system call return so that to user:
 36065                                  ;		  'C' clear if OK
 36066                                  ;		    (ax) = bytes read
 36067                                  ;		  'C' set if error
 36068                                  ;		    (ax) = error code
 36069                                  ;
 36070                                  ;----------------------------------------------------------------------------
 36071                                  
 36072                                  _$READ:
 36073 000068D8 BE[5333]                	MOV	SI,DOS_READ
 36074                                  ReadDo:
 36075 000068DB E833FE                  	call	pJFNFromHandle
 36076 000068DE 7208                    	JC	short ReadError
 36077                                  
 36078 000068E0 268A05                  	MOV	AL,[ES:DI]
 36079 000068E3 E83E01                  	call	CheckOwner		; get the handle
 36080 000068E6 7303                    	JNC	short ReadSetup		; no errors do the operation
 36081                                  
 36082                                  ;	Have an error. 'C' set
 36083                                  
 36084                                  ReadError:
 36085                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36086                                  	;;jmp	SYS_RET_ERR		; go to error traps
 36087                                  	;jmp	short CommitErrorj3
 36088                                  	; 17/12/2022
 36089 000068E8 E9A29D                  	jmp	SYS_RET_ERR
 36090                                  
 36091                                  ReadSetup:
 36092 000068EB 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 36093 000068F0 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 36094                                  	; 20/05/2019 - Retro DOS v4.0
 36095                                  	; MSDOS 6.0 
 36096                                  ;; Extended Open
 36097                                  	;test	byte [es:di+3],20h
 36098 000068F5 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 36099                                  						 ;AN000;;EO. need i24
 36100 000068FA 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 36101 000068FC 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 36102                                  					;AN000;;EO. set it off;smr;SS Override
 36103                                  needi24:				;AN000;
 36104                                  ;; Extended Open
 36105 00006902 36FF36[2C03]            	push	word [SS:DMAADD]
 36106 00006907 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 36107                                  
 36108                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36109                                  
 36110                                  	; 26/07/2019
 36111                                  
 36112                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36113                                  	;
 36114                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 36115                                  	; there is not another caller; it is better to put the code in this proc
 36116                                   	; here instead of calling it as a subroutine; but I have modified code
 36117                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 36118                                  
 36119                                  	; MSDOS 6.0
 36120 0000690C E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 36121                                  	
 36122                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36123                                  	; MSDOS 3.3
 36124                                  	;MOV	BX,DX			; copy offset
 36125                                  	;push	cx			; don't stomp on count
 36126                                  	;MOV	CL,4			; bits to shift bytes->para
 36127                                  	;SHR	BX,CL			; get number of paragraphs
 36128                                  	;pop	cx			; get count back
 36129                                  	;MOV	AX,DS			; get original segment
 36130                                  	;ADD	AX,BX			; get new segment
 36131                                  	;MOV	DS,AX			; in seg register
 36132                                  	;AND	DX,0Fh			; normalize offset
 36133                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36134                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36135                                  						;smr;SS Override
 36136                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36137                                  	
 36138 0000690F 16                      	push	ss			; go for DOS addressability
 36139 00006910 1F                      	pop	ds
 36140                                  
 36141 00006911 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 36142                                  
 36143 00006913 8F06[2E03]              	pop	word [DMAADD+2]
 36144 00006917 8F06[2C03]              	pop	word [DMAADD]
 36145                                  	;JNC	short READ_OK		;AN002;
 36146                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 36147                                  	; 17/12/2022
 36148 0000691B 72CB                    	jc	short ReadError
 36149                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36150                                  	;jnc	short READ_OK		;AN002;
 36151                                  	;jmp	short ReadError
 36152                                  
 36153                                  READ_OK:
 36154 0000691D 89C8                    	MOV	AX,CX			; get correct return in correct reg
 36155                                  Read_Okj:
 36156                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36157                                  	;;jmp	SYS_RET_OK		; successful return
 36158                                  	;jmp	short ok_done_j
 36159                                  	; 17/12/2022
 36160 0000691F E9629D                  	jmp	SYS_RET_OK
 36161                                  
 36162                                  ; 13/07/2018 - Retro DOS v3.0
 36163                                  
 36164                                  ;----------------------------------------------------------------------------
 36165                                  
 36166                                  ;   Input: DS:DX points to user's buffer addr
 36167                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 36168                                  ;   Output: [DMAADD] set
 36169                                  
 36170                                  ; 20/05/2019 - Retro DOS v4.0
 36171                                  ; 26/07/2019
 36172                                  ;	; MSDOS 6.0
 36173                                  ;Align_Buffer:
 36174                                  ;	MOV	BX,DX			; copy offset
 36175                                  ;	push	cx			; don't stomp on count
 36176                                  ;	MOV	CL,4			; bits to shift bytes->para
 36177                                  ;	SHR	BX,CL			; get number of paragraphs
 36178                                  ;	pop	cx			; get count back
 36179                                  ;	MOV	AX,DS			; get original segment
 36180                                  ;	ADD	AX,BX			; get new segment
 36181                                  ;	MOV	DS,AX			; in seg register
 36182                                  ;	AND	DX,0Fh			; normalize offset
 36183                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36184                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36185                                  ;						;smr;SS Override
 36186                                  ;	retn
 36187                                  
 36188                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36189                                  Align_Buffer:
 36190 00006922 89D3                    	MOV	BX,DX			; copy offset
 36191 00006924 51                      	push	cx			; don't stomp on count
 36192 00006925 B104                    	MOV	CL,4			; bits to shift bytes->para
 36193 00006927 D3EB                    	SHR	BX,CL			; get number of paragraphs
 36194 00006929 59                      	pop	cx			; get count back
 36195 0000692A 8CD8                    	MOV	AX,DS			; get original segment
 36196 0000692C 01D8                    	ADD	AX,BX			; get new segment
 36197 0000692E 8ED8                    	MOV	DS,AX			; in seg register
 36198 00006930 83E20F                  	AND	DX,0Fh			; normalize offset
 36199 00006933 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36200 00006938 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36201                                  						;smr;SS Override
 36202 0000693D C3                      	retn
 36203                                  
 36204                                  ; 20/05/2019 - Retro DOS v4.0
 36205                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 36206                                  
 36207                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36208                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 36209                                  
 36210                                  ;BREAK <$WRITE - write to a file handle>
 36211                                  ;----------------------------------------------------------------------------
 36212                                  ;
 36213                                  ;   Assembler usage:
 36214                                  ;	    LDS     DX, buf
 36215                                  ;	    MOV     CX, count
 36216                                  ;	    MOV     BX, handle
 36217                                  ;	    MOV     AH, Write
 36218                                  ;	    INT     int_command
 36219                                  ;	  AX has number of bytes written
 36220                                  ;   Errors:
 36221                                  ;	    AX = write_invalid_handle
 36222                                  ;	       = write_access_denied
 36223                                  ;
 36224                                  ;   Returns in register AX
 36225                                  ;
 36226                                  ;----------------------------------------------------------------------------
 36227                                  
 36228                                  _$WRITE:
 36229 0000693E BE[6B35]                	MOV	SI,DOS_WRITE
 36230 00006941 EB98                    	JMP	short ReadDo
 36231                                  
 36232                                  ;BREAK <$LSEEK - move r/w pointer>
 36233                                  ;----------------------------------------------------------------------------
 36234                                  ;
 36235                                  ;   Assembler usage:
 36236                                  ;	    MOV     DX, offsetlow
 36237                                  ;	    MOV     CX, offsethigh
 36238                                  ;	    MOV     BX, handle
 36239                                  ;	    MOV     AL, method
 36240                                  ;	    MOV     AH, LSeek
 36241                                  ;	    INT     int_command
 36242                                  ;	  DX:AX has the new location of the pointer
 36243                                  ;   Error returns:
 36244                                  ;	    AX = error_invalid_handle
 36245                                  ;	       = error_invalid_function
 36246                                  ;   Returns in registers DX:AX
 36247                                  ;
 36248                                  ;----------------------------------------------------------------------------
 36249                                  
 36250                                  ; 21/05/2019 - Retro DOS v4.0
 36251                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 36252                                  
 36253                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36254                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 36255                                  
 36256                                  _$LSEEK:
 36257 00006943 E8DE00                  	call	CheckOwner		; get system file entry
 36258                                  
 36259                                  	; 17/12/2022
 36260                                  ;LSeekError:
 36261                                  	;JNC	short CHKOWN_OK		;AN002;
 36262                                  	;JMP	short ReadError		;AN002; error return
 36263                                  	; 17/12/2022
 36264                                  	; 02/06/2019
 36265 00006946 72A0                    	jc	short ReadError
 36266                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36267                                  	;JNC	short CHKOWN_OK		;AN002;
 36268                                  	;JMP	short ReadError		;AN002; error return
 36269                                  
 36270                                  CHKOWN_OK:
 36271                                  					;AN002;
 36272 00006948 3C02                    	CMP	AL,2			; is the seek value correct?
 36273 0000694A 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 36274                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 36275 0000694C 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36276                                  					;smr;SS Override
 36277                                  	;mov	al,1
 36278 00006952 B001                    	mov	al,error_invalid_function ; invalid method
 36279                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36280                                  LSeekError2:
 36281 00006954 EB92                    	jmp	short ReadError
 36282                                  
 36283                                  LSeekDisp:
 36284 00006956 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 36285 00006958 720A                    	JB	short LSeekStore	; just store CX:DX
 36286 0000695A 771B                    	JA	short LSeekEOF		; seek from end of file
 36287                                  	;add	dx,[es:di+21]
 36288 0000695C 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 36289                                  	;adc	cx,[es:di+23]
 36290 00006960 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 36291                                  LSeekStore:
 36292 00006964 89C8                    	MOV	AX,CX			; AX:DX
 36293 00006966 92                      	XCHG	AX,DX			; DX:AX is the correct value
 36294                                  LSeekSetpos:
 36295                                  	;mov	[es:di+21],ax
 36296 00006967 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 36297                                  	;mov	[es:di+23],dx
 36298 0000696B 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 36299 0000696F E8589B                  	call	Get_User_Stack
 36300                                  	;mov	[si+6],dx
 36301 00006972 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 36302                                  	;jmp	SYS_RET_OK		; successful return
 36303                                  	; 25/06/2019
 36304                                  	;jmp	SYS_RET_OK_clc
 36305                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36306                                  	;jmp	SYS_RET_OK_clc
 36307                                  LSeekOk:
 36308 00006975 EBA8                    	jmp     short Read_Okj
 36309                                  
 36310                                  LSeekEOF:
 36311                                  	;;test	word [es:di+5],8000h
 36312                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36313                                  	; 21/05/2019 - Retro DOS v4.0
 36314 00006977 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 36315 0000697C 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 36316                                  LOCAL_LSeek:
 36317                                  	;add	dx,[es:di+17]
 36318 0000697E 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 36319                                  	;adc	cx,[es:di+19]
 36320 00006982 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 36321 00006986 EBDC                    	JMP	short LSeekStore	; go and set the position
 36322                                  
 36323                                  Check_LSeek_Mode:
 36324                                  	;;test	word [es:di+2],8000h
 36325                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 36326                                  	; 21/05/2019
 36327 00006988 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 36328 0000698D 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 36329                                  	;mov	ax,[es:di+2]
 36330 0000698F 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 36331                                  	;and	ax,0F0h
 36332 00006993 25F000                  	AND	AX,SHARING_MASK
 36333                                  	;cmp	ax,40h
 36334 00006996 83F840                  	CMP	AX,SHARING_DENY_NONE
 36335 00006999 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 36336                                  	;cmp	ax,30h
 36337 0000699B 83F830                  	CMP	AX,SHARING_DENY_READ
 36338 0000699E 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 36339                                  NET_LSEEK:
 36340                                  ;	JMP	short LOCAL_LSeek
 36341                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 36342                                  	;CallInstall Net_Lseek,MultNET,33
 36343                                  	;JNC	short LSeekSetPos
 36344                                  
 36345 000069A0 B82111                  	mov     ax,1121h
 36346 000069A3 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 36347                                  			; CX:DX = offset (in bytes) from end
 36348                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 36349                                  			; SS = DOS CS
 36350                                  			; Return: CF set on error
 36351                                  			; CF clear if successful, DX:AX = new file position
 36352 000069A5 73C0                    	jnb     short LSeekSetpos
 36353                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36354                                  	;jmp	SYS_RET_ERR
 36355                                  ;LSeekError3:
 36356                                  	; 17/12/2022
 36357                                  LSeekError:
 36358                                  	;jmp	short LSeekError2
 36359                                  DupErr:	; 17/12/2022
 36360 000069A7 E9E39C                  	jmp	SYS_RET_ERR
 36361                                  
 36362                                  ;BREAK <FileTimes - modify write times on a handle>
 36363                                  ;----------------------------------------------------------------------------
 36364                                  ;
 36365                                  ;   Assembler usage:
 36366                                  ;	    MOV AH, FileTimes (57H)
 36367                                  ;	    MOV AL, func
 36368                                  ;	    MOV BX, handle
 36369                                  ;	; if AL = 1 then then next two are mandatory
 36370                                  ;	    MOV CX, time
 36371                                  ;	    MOV DX, date
 36372                                  ;	    INT 21h
 36373                                  ;	; if AL = 0 then CX/DX has the last write time/date
 36374                                  ;	; for the handle.
 36375                                  ;
 36376                                  ;	AL=02		 get extended attributes
 36377                                  ;	   BX=handle
 36378                                  ;	   CX=size of buffer (0, return max size )
 36379                                  ;	   DS:SI query list (si=-1, selects all EA)
 36380                                  ;	   ES:DI buffer to hold EA list
 36381                                  ;
 36382                                  ;	AL=03		 get EA name list
 36383                                  ;	   BX=handle
 36384                                  ;	   CX=size of buffer (0, return max size )
 36385                                  ;	   ES:DI buffer to hold name list
 36386                                  ;
 36387                                  ;	AL=04		 set extended attributes
 36388                                  ;	   BX=handle
 36389                                  ;	   ES:DI buffer of EA list
 36390                                  ;
 36391                                  ;
 36392                                  ;   Error returns:
 36393                                  ;	    AX = error_invalid_function
 36394                                  ;	       = error_invalid_handle
 36395                                  ;
 36396                                  ;----------------------------------------------------------------------------
 36397                                  
 36398                                  ; 21/05/2019 - Retro DOS v4.0
 36399                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 36400                                  
 36401                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36402                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 36403                                  
 36404                                  _$FILE_TIMES:
 36405                                  	; 13/07/2018 - Retro DOS v3.0
 36406                                  
 36407                                  	; MSDOS 3.3
 36408                                  	;cmp	al,2			; correct subfunction ?
 36409                                  	;jb	short ft1
 36410                                  
 36411                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 36412                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36413                                  						;SS Overr
 36414                                  	;;mov	al,1
 36415                                  	;mov	al,error_invalid_function ; give bad return
 36416                                  	;jmp	SYS_RET_ERR
 36417                                  
 36418                                  	; MSDOS 6.0
 36419 000069AA 3C02                    	cmp	al,2			; correct subfunction ?
 36420 000069AC 7340                    	jae	short inval_func
 36421                                  ;ft1:
 36422 000069AE E87300                  	call	CheckOwner		; get sft
 36423                                  	; 17/12/2022
 36424 000069B1 72F4                    	jc	short LSeekError	; bad handle
 36425                                  
 36426 000069B3 08C0                    	or	al,al			; get time/date ?
 36427 000069B5 7515                    	jnz	short ft_set_time
 36428                                  
 36429                                  ;------ here we get the time & date from the sft for the user
 36430                                  
 36431 000069B7 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 36432                                  	;mov	cx,[es:di+13]
 36433 000069B8 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 36434                                  	;mov	dx,[es:di+15]
 36435 000069BC 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 36436 000069C0 FB                      	sti
 36437 000069C1 E8069B                  	call	Get_User_Stack
 36438                                  	;mov	[si+4],cx
 36439 000069C4 894C04                  	mov	[si+user_env.user_CX],cx
 36440                                  	;mov	[si+6],dx
 36441 000069C7 895406                  	mov	[si+user_env.user_DX],dx
 36442 000069CA EB1F                    	jmp	short ok_ret
 36443                                  
 36444                                  ;------ here we set the time in sft
 36445                                  
 36446                                  ft_set_time:
 36447 000069CC E8B9A9                  	call    ECritSFT
 36448                                  	;mov	[es:di+13],cx
 36449 000069CF 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 36450                                  	;mov	[es:di+15],dx
 36451 000069D3 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 36452                                  
 36453 000069D7 31C0                    	xor	ax, ax
 36454 000069D9 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 36455                                  
 36456                                  ;------ set the flags in SFT entry
 36457                                  	;and	word [es:di+5],0FFBFh
 36458                                  	; 18/12/2022
 36459                                  	;and	byte [es:di+5],0BFh
 36460 000069DE 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 36461                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 36462                                  							; mark file as dirty
 36463                                  	;or	word [es:di+5],4000h
 36464                                  	; 17/12/2022
 36465                                  	;or	byte [es:di+6],40h
 36466 000069E3 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 36467                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 36468                                  							; ask close not to
 36469                                  							;   bother about date
 36470                                  							;   and time
 36471 000069E8 E8B8A9                  	call	LCritSFT
 36472                                  ok_ret:
 36473                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36474                                  	; 17/12/2022
 36475 000069EB E9969C                  	jmp	SYS_RET_OK
 36476                                  	;jmp	short LSeekOk
 36477                                  
 36478                                  inval_func:
 36479                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36480 000069EE 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36481                                  						;SS Overr
 36482                                  	;mov	al,1
 36483 000069F4 B001                    	mov	al,error_invalid_function ; give bad return
 36484                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36485                                  ft_error:
 36486                                  	;;jmp	SYS_RET_ERR
 36487                                  	;jmp	short LSeekError3
 36488                                  	; 17/12/2022
 36489 000069F6 EBAF                    	jmp	short LSeekError
 36490                                  
 36491                                  ; 21/05/2019 - Retro DOS v4.0
 36492                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 36493                                  
 36494                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36495                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 36496                                  
 36497                                  ;BREAK <$DUP - duplicate a jfn>
 36498                                  ;----------------------------------------------------------------------------
 36499                                  ;
 36500                                  ;   Assembler usage:
 36501                                  ;	    MOV     BX, fh
 36502                                  ;	    MOV     AH, Dup
 36503                                  ;	    INT     int_command
 36504                                  ;	  AX has the returned handle
 36505                                  ;   Errors:
 36506                                  ;	    AX = dup_invalid_handle
 36507                                  ;	       = dup_too_many_open_files
 36508                                  ;
 36509                                  ;----------------------------------------------------------------------------
 36510                                  
 36511                                  _$DUP:
 36512 000069F8 89D8                    	MOV	AX,BX			; save away old handle in AX
 36513 000069FA E871FD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 36514                                  DupErrorCheck:
 36515 000069FD 72A8                    	JC	short DupErr		; nope, bye
 36516 000069FF 06                      	push	es
 36517 00006A00 57                      	push	di			; save away SFT
 36518 00006A01 5E                      	pop	si			; into convenient place DS:SI
 36519 00006A02 1F                      	pop	ds
 36520 00006A03 93                      	XCHG	AX,BX			; get back old handle
 36521 00006A04 E81D00                  	call	CheckOwner		; get sft in ES:DI
 36522 00006A07 729E                    	JC	short DupErr		; errors go home
 36523 00006A09 E898C0                  	call	DOS_Dup_Direct
 36524 00006A0C E802FD                  	call	pJFNFromHandle		; get pointer
 36525 00006A0F 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 36526 00006A12 881C                    	MOV	[SI],BL			; stuff in new SFT
 36527                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36528                                  	;jmp	SYS_RET_OK		; and go home
 36529 00006A14 EBD5                    	jmp	short ok_ret
 36530                                  
 36531                                  	; 17/12/2022
 36532                                  ;DupErr:
 36533                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36534                                  	;;jmp	SYS_RET_ERR
 36535                                  	;jmp	short ft_error
 36536                                  
 36537                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 36538                                  ;----------------------------------------------------------------------------
 36539                                  ;
 36540                                  ;   Assembler usage:
 36541                                  ;	    MOV     BX, fh
 36542                                  ;	    MOV     CX, newfh
 36543                                  ;	    MOV     AH, Dup2
 36544                                  ;	    INT     int_command
 36545                                  ;   Error returns:
 36546                                  ;	    AX = error_invalid_handle
 36547                                  ;
 36548                                  ;----------------------------------------------------------------------------
 36549                                  
 36550                                  _$DUP2:
 36551 00006A16 53                      	push	bx
 36552 00006A17 51                      	push	cx			; save source
 36553 00006A18 89CB                    	MOV	BX,CX			; get one to close
 36554 00006A1A E8ACFD                  	call	_$CLOSE			; close destination handle
 36555 00006A1D 5B                      	pop	bx
 36556 00006A1E 58                      	pop	ax			; old in AX, new in BX
 36557 00006A1F E8EFFC                  	call	pJFNFromHandle		; get pointer
 36558 00006A22 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 36559                                  
 36560                                  ;Break	<CheckOwner - verify ownership of handles from server>
 36561                                  ;----------------------------------------------------------------------------
 36562                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 36563                                  ;   process without the process knowing it (delete/rename of open files, for
 36564                                  ;   example), it is possible for the redirector to issue a call to a handle
 36565                                  ;   that it soes not rightfully own. We check here to make sure that the
 36566                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 36567                                  ;   SFFromHandle to really make sure that the SFT is good.
 36568                                  ;
 36569                                  ;	ENTRY	BX has the handle
 36570                                  ;		User_ID is the current user
 36571                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 36572                                  ;		Carry Set => AX has error code
 36573                                  ;	USES	none
 36574                                  ;----------------------------------------------------------------------------
 36575                                  
 36576                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36577                                  	; 21/05/2019 - Retro DOS v4.0
 36578                                  CheckOwner:
 36579                                  	; 13/07/2018 - Retro DOS v3.0
 36580                                  
 36581 00006A24 E807FD                  	call	SFFromHandle
 36582 00006A27 721B                    	jc	short co_ret_label	; retc
 36583                                  
 36584 00006A29 50                      	push	ax
 36585                                  
 36586                                  	; MSDOS 6.0
 36587                                  
 36588                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 36589                                  ;SR; are shared across multiple VMs in win386.
 36590                                  
 36591 00006A2A 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 36592 00006A30 7404                    	jz	short no_win386		;win386 is not present
 36593 00006A32 31C0                    	xor	ax,ax			;set the zero flag
 36594 00006A34 EB08                    	jmp	short _skip_win386	
 36595                                  
 36596                                  no_win386:
 36597 00006A36 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 36598                                  	;cmp	ax,[es:di+47]
 36599 00006A3A 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 36600                                  
 36601                                  _skip_win386:
 36602 00006A3E 58                      	pop	ax
 36603                                  	
 36604                                  	; 17/12/2022
 36605 00006A3F 7403                    	jz	short co_ret_label
 36606                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36607                                  	;jnz	short CheckOwner_err
 36608                                  	;retn
 36609                                  	
 36610                                  CheckOwner_err:
 36611                                  	;mov	al,6
 36612 00006A41 B006                    	mov	al,error_invalid_handle
 36613 00006A43 F9                      	stc
 36614                                  
 36615                                  co_ret_label:
 36616 00006A44 C3                      	retn
 36617                                  
 36618                                  ;============================================================================
 36619                                  ; MACRO.ASM, MSDOS 6.0, 1991
 36620                                  ;============================================================================
 36621                                  ; Retro	DOS v3.0 - 11/07/2018
 36622                                  ; 21/05/2019 - Retro DOS v4.0
 36623                                  
 36624                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 36625                                  ;	NAME	MACRO
 36626                                  
 36627                                  ;	Microsoft Confidential
 36628                                  ;	Copyright (C) Microsoft Corporation 1991
 36629                                  ;	All Rights Reserved.
 36630                                  
 36631                                  ;**	MACRO.ASM
 36632                                  ;
 36633                                  ;	$AssignOper
 36634                                  ;	FIND_DPB
 36635                                  ;	InitCDS
 36636                                  ;	$UserOper
 36637                                  ;	GetVisDrv
 36638                                  ;	GetThisDrv
 36639                                  ;	GetCDSFromDrv
 36640                                  ;
 36641                                  ;   Revision history:
 36642                                  ;
 36643                                  ;	Created: MZ 4 April 1983
 36644                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 36645                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 36646                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 36647                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 36648                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 36649                                  ;				    aliasing.
 36650                                  ;
 36651                                  ;   MSDOS performs several types of name translation. First, we maintain for
 36652                                  ;   each valid drive letter the text of the current directory on that drive.
 36653                                  ;   For invalid drive letters, there is no current directory so we pretend to
 36654                                  ;   be at the root. A current directory is either the raw local directory
 36655                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 36656                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 36657                                  ;
 36658                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 36659                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 36660                                  ;   this and all * are expanded into ?'s.
 36661                                  ;
 36662                                  ;   The second part of name translation involves subtree aliasing. A list of
 36663                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 36664                                  ;   the previous 'canonicalization' are then examined to see if any of the
 36665                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 36666                                  ;   replaced with the other subtree in the pair.
 36667                                  ;
 36668                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 36669                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 36670                                  ;   The output of the previous translation is examined to see if any of the
 36671                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 36672                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 36673                                  ;   'mount' one device under another.
 36674                                  ;
 36675                                  ;   The final form of name translation involves the mapping of a user's
 36676                                  ;   logical drive number into the internal physical drive. This is
 36677                                  ;   accomplished by converting the drive number into letter:CON, performing
 36678                                  ;   the above translation and then converting the character back into a drive
 36679                                  ;   number.
 36680                                  ;
 36681                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 36682                                  ;   take a path and form the real text of the pathname with all . and ..
 36683                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 36684                                  ;   TransPath.
 36685                                  ;
 36686                                  ;	A000	version 4.00  Jan. 1988
 36687                                  
 36688                                  ;Installed = TRUE
 36689                                  
 36690                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 36691                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 36692                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 36693                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 36694                                  ;					; current drive)
 36695                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 36696                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 36697                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 36698                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 36699                                  ;	I_need	MYNAME,16		; machine name
 36700                                  ;	I_need	MYNUM,WORD		; machine number
 36701                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 36702                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 36703                                  ;	I_need	DrvErr,BYTE		; drive error
 36704                                  
 36705                                  ;BREAK <$AssignOper -- Set up a Macro>
 36706                                  ;----------------------------------------------------------------------------
 36707                                  ; Inputs:
 36708                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 36709                                  ;	AL = 01 set assign mode 		    (SetMode)
 36710                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 36711                                  ;	AL = 03 Define Macro (attch start)
 36712                                  ;	    BL = Macro type
 36713                                  ;	       = 0 alias
 36714                                  ;	       = 1 file/device
 36715                                  ;	       = 2 drive
 36716                                  ;	       = 3 Char device -> network
 36717                                  ;	       = 4 File device -> network
 36718                                  ;	    DS:SI -> ASCIZ source name
 36719                                  ;	    ES:DI -> ASCIZ destination name
 36720                                  ;	AL = 04 Cancel Macro
 36721                                  ;	    DS:SI -> ASCIZ source name
 36722                                  ;	AL = 05 Modified get attach list entry
 36723                                  ;	AL = 06 Get ifsfunc item
 36724                                  ;	AL = 07 set in_use of a drive's CDS
 36725                                  ;	     DL = drive number, 0=default  0=A,,
 36726                                  ;	AL = 08 reset in_use of a drive's CDS
 36727                                  ;	     DL = drive number, 0=A, 1=B,,,
 36728                                  ; Function:
 36729                                  ;	Do macro stuff
 36730                                  ; Returns:
 36731                                  ;	Std Xenix style error return
 36732                                  ;----------------------------------------------------------------------------
 36733                                  
 36734                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36735                                  	; 21/05/2019 - Retro DOS v4.0
 36736                                  _$AssignOper:
 36737                                  	; MSDOS 6.0
 36738 00006A45 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 36739 00006A47 7525                    	JNZ	short chk08		      ; no			;AN000;
 36740                                  srinuse:								;AN000;
 36741 00006A49 50                      	PUSH	AX			      ; save al 		;AN000;
 36742 00006A4A 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 36743 00006A4C E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 36744 00006A4F 58                      	POP	AX			      ; 			;AN000;
 36745 00006A50 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 36746                                  	;cmp	word [si+45h],0
 36747 00006A52 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 36748 00006A56 7410                    	JZ	short baddrv		      ;     no			;AN000;
 36749 00006A58 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 36750 00006A5A 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 36751                                  	;or	word [si+43h],4000h
 36752                                  	; 17/12/2022
 36753                                  	;or	byte [si+44h],40h
 36754 00006A5C 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36755                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 36756 00006A60 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 36757                                  resetdrv:
 36758                                  	;and	word [si+43h],0BFFFh									;AN000;
 36759                                  	; 18/12/2022
 36760 00006A62 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 36761                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 36762 00006A66 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 36763                                  
 36764                                  	; 17/12/2022
 36765                                  baddrv: 								;AN000;
 36766 00006A68 B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 36767                                  
 36768                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36769                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 36770                                  	; 17/12/2022
 36771                                  	; 21/05/2019
 36772                                  ASS_ERR:
 36773 00006A6B E91F9C                  	jmp	SYS_RET_ERR
 36774                                  
 36775                                  chk08:									;AN000;
 36776 00006A6E 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 36777 00006A70 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 36778                                  
 36779                                    ;IF	NOT INSTALLED
 36780                                  	;transfer NET_ASSOPER
 36781                                    ;ELSE
 36782                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36783 00006A72 50                      	PUSH	AX
 36784                                  	;mov	ax,111Eh
 36785                                  	;MOV	AX,(MultNET SHL 8) OR 30
 36786 00006A73 B81E11                  	mov	ax,(MultNET*256)+30
 36787 00006A76 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 36788                                  			; SS = DOS CS
 36789                                  			; STACK: WORD function to execute
 36790                                  			; Return: CF set on error, AX = error code
 36791                                  			; STACK unchanged
 36792 00006A78 5B                      	POP	BX			; Don't zap error code in AX
 36793 00006A79 72F0                    	JC	short ASS_ERR
 36794                                  okdone:
 36795 00006A7B E9069C                  	jmp	SYS_RET_OK
 36796                                  
 36797                                  	; 17/12/2022
 36798                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36799                                  ;ASS_ERR:
 36800                                  	;jmp	SYS_RET_ERR
 36801                                  
 36802                                    ;ENDIF
 36803                                  
 36804                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 36805                                  ;----------------------------------------------------------------------------
 36806                                  ;**	FIND_DPB - Find a DPB from a Drive #
 36807                                  ;
 36808                                  ;	ENTRY	AL has drive number A = 0
 36809                                  ;	EXIT	'C' set
 36810                                  ;		    No DPB for this drive number
 36811                                  ;		'C' clear
 36812                                  ;		    DS:SI points to DPB for drive
 36813                                  ;	USES	SI, DS, Flags
 36814                                  ;----------------------------------------------------------------------------
 36815                                  
 36816                                  	; 21/05/2019 - Retro DOS v4.0
 36817                                  FIND_DPB:
 36818 00006A7E 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 36819                                  fdpb5:	
 36820 00006A83 83FEFF                  	CMP	SI,-1
 36821 00006A86 7409                    	JZ	short fdpb10
 36822 00006A88 3A04                    	cmp	al,[si]
 36823                                  	;CMP	AL,[SI+DPB.DRIVE]
 36824 00006A8A 7406                    	jz	short ret_label15	; Carry clear (retz)
 36825                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 36826                                  	;lds	si,[si+19h] ; MSDOS 6.0
 36827 00006A8C C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 36828 00006A8F EBF2                    	JMP	short fdpb5
 36829                                  fdpb10:	
 36830 00006A91 F9                      	STC
 36831                                  ret_label15:
 36832 00006A92 C3                      	retn
 36833                                  
 36834                                  ;	Break <InitCDS - set up an empty CDS>
 36835                                  ;----------------------------------------------------------------------------
 36836                                  ;**	InitCDS - Setup an Empty CDS
 36837                                  ;
 36838                                  ;	ENTRY	ThisCDS points to CDS
 36839                                  ;		AL has uppercase drive letter
 36840                                  ;	EXIT	ThisCDS is now empty
 36841                                  ;		(ES:DI) = CDS
 36842                                  ;		'C' set if no DPB associated with drive
 36843                                  ;	USES	AH,ES,DI, Flags
 36844                                  ;----------------------------------------------------------------------------
 36845                                  
 36846                                  ; 21/05/2019 - Retro DOS v4.0
 36847                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 36848                                  
 36849                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36850                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 36851                                  
 36852                                  InitCDS:
 36853                                  	; 19/08/2018
 36854                                  	; 05/08/2018 - Retro DOS v3.0
 36855                                  	; MSDOS 6.0
 36856 00006A93 50                      	push	ax			; save (AL) for caller
 36857 00006A94 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 36858                                  	;mov	word [es:di+67],0
 36859 00006A99 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 36860 00006A9F 2C40                    	SUB	AL,"A"-1                ; A = 1
 36861 00006AA1 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 36862 00006AA6 7236                    	JC	short icdsx		; Drive does not map a physical drive
 36863 00006AA8 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 36864 00006AA9 50                      	PUSH	AX			; save drive number for later
 36865 00006AAA 0441                    	add	al,"A"
 36866 00006AAC B43A                    	MOV	AH,':'
 36867 00006AAE 268905                  	mov	[ES:DI],ax
 36868                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 36869                                  	;mov	ax,"\"
 36870                                  	;mov	[es:di+2],ax
 36871                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 36872 00006AB1 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 36873                                  	;or	word [es:di+67],4000h
 36874                                  	;or	byte [es:di+68],40h
 36875 00006AB7 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36876 00006ABC 29C0                    	sub	ax,ax
 36877                                  	;MOV	[es:di+73],ax ; 0
 36878 00006ABE 26894549                	MOV	[ES:DI+curdir.ID],ax
 36879                                  	;mov	[es:di+75],ax ; 0
 36880 00006AC2 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 36881 00006AC6 B002                    	mov	al,2
 36882                                  	;mov	[es:di+79],aX ; 2
 36883 00006AC8 2689454F                	MOV	[ES:DI+curdir.end],ax
 36884 00006ACC 58                      	POP	AX			; (al) = drive number
 36885 00006ACD 1E                      	push	ds
 36886 00006ACE 56                      	push	si
 36887 00006ACF E8ACFF                  	call	FIND_DPB
 36888 00006AD2 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 36889                                  	;mov	[es:di+69],si
 36890 00006AD4 26897545                	MOV	[ES:DI+curdir.devptr],SI
 36891                                  	;mov	[es:di+71],ds
 36892 00006AD8 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 36893                                  icds5:	
 36894 00006ADC 5E                      	pop	si
 36895 00006ADD 1F                      	pop	ds
 36896                                  icdsx:	
 36897 00006ADE 58                      	pop	ax
 36898                                  RET45:
 36899 00006ADF C3                      	retn
 36900                                  
 36901                                  ;Break <$UserOper - get/set current user ID (for net)>
 36902                                  ;----------------------------------------------------------------------------
 36903                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 36904                                  ;	maintain this string and do no verifications.
 36905                                  ;
 36906                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 36907                                  ;				      4-printer-set-flags,5-printer-get-flags)
 36908                                  ;		DS:DX is user string pointer (calls 1,2)
 36909                                  ;		ES:DI is user buffer (call 3)
 36910                                  ;		BX is assign index (calls 2,3,4,5)
 36911                                  ;		CX is user number (call 1)
 36912                                  ;		DX is flag word (call 4)
 36913                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 36914                                  ;			and user CX is set to the user number
 36915                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 36916                                  ;		If AL = 5 then DX is flag word
 36917                                  ;----------------------------------------------------------------------------
 36918                                  
 36919                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36920                                  	; 21/05/2019 - Retro DOS v4.0
 36921                                  _$UserOper:
 36922                                  	; 05/08/2018 - Retro DOS v3.0
 36923                                  	; MSDOS 6.0 (& MSDOS 3.3)
 36924 00006AE0 50                      	PUSH	AX
 36925 00006AE1 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 36926 00006AE3 58                      	POP	AX
 36927 00006AE4 7211                    	JB	short UserGet 		; return to user the string
 36928 00006AE6 742E                    	JZ	short UserSet 		; set the current user
 36929 00006AE8 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 36930 00006AEA 763D                    	JBE	short UserPrint		; yep
 36931                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36932 00006AEC 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 36933                                  					; Extended Error Locus
 36934                                  	;error	error_invalid_function	; not 0,1,2,3
 36935                                  	;mov	al,1
 36936 00006AF2 B001                    	MOV	AL,error_invalid_function
 36937                                  useroper_error:
 36938                                  	; 17/12/2022
 36939                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36940 00006AF4 E9969B                  	JMP	SYS_RET_ERR
 36941                                  	;jmp	short ASS_ERR
 36942                                  
 36943                                  UserGet:
 36944                                  ; Transfer MYNAME to DS:DX
 36945                                  ; Set Return CX to MYNUM
 36946 00006AF7 1E                      	PUSH	DS			; switch registers
 36947 00006AF8 07                      	POP	ES
 36948 00006AF9 89D7                    	MOV	DI,DX			; destination
 36949 00006AFB 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 36950 00006B00 E8C799                  	call	Get_User_Stack
 36951                                  	;mov	[si+4],cx
 36952 00006B03 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 36953 00006B06 16                      	push	ss			; point to DOSDATA
 36954 00006B07 1F                      	pop	ds
 36955 00006B08 BE[0503]                	MOV	SI,MYNAME		; point source to user string
 36956                                  UserMove:
 36957 00006B0B B90F00                  	MOV	CX,15
 36958 00006B0E F3A4                    	REP	MOVSB			; blam.
 36959 00006B10 31C0                    	XOR	AX,AX			; 16th byte is 0
 36960 00006B12 AA                      	STOSB
 36961                                  UserBye:
 36962 00006B13 E96E9B                  	jmp	SYS_RET_OK		; no errors here
 36963                                  
 36964                                  UserSet:
 36965                                  ; Transfer DS:DX to MYNAME
 36966                                  ; CX to MYNUM
 36967 00006B16 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 36968 00006B1B 89D6                    	MOV	SI,DX			; user space has source
 36969 00006B1D 16                      	push	ss
 36970 00006B1E 07                      	pop	es
 36971 00006B1F BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 36972 00006B22 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 36973 00006B27 EBE2                    	JMP	short UserMove
 36974                                  
 36975                                  UserPrint:
 36976                                  
 36977                                    ;IF NOT Installed
 36978                                    ;	transfer PRINTER_GETSET_STRING
 36979                                    ;ELSE
 36980 00006B29 50                      	PUSH	AX
 36981                                  	;mov	ax,111Fh
 36982                                  	;MOV	AX,(MultNET SHL 8) OR 31
 36983 00006B2A B81F11                  	mov	ax,(MultNET<<8)|31
 36984 00006B2D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 36985                                  			; STACK: WORD function
 36986                                  			; Return: CF set on error, AX = error code
 36987                                  			; STACK unchanged
 36988 00006B2F 5A                      	POP	DX			; Clean stack
 36989                                  	;JNC	short OKPA
 36990 00006B30 73E1                    	jnc	short UserBye ; 21/05/2019
 36991                                  	; 17/12/2022
 36992 00006B32 EBC0                    	jmp	short useroper_error
 36993                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36994                                  	;jnb     short OKPA
 36995                                  	;jmp     short useroper_error
 36996                                  
 36997                                  	; 17/12/2022
 36998                                  ;OKPA:
 36999                                  ;	jmp	short UserBye
 37000                                  
 37001                                    ;ENDIF
 37002                                  
 37003                                  
 37004                                  ;Break	<GetVisDrv - return visible drive>
 37005                                  ;----------------------------------------------------------------------------
 37006                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 37007                                  ;
 37008                                  ;   Inputs:	AL has drive identifier (0=default)
 37009                                  ;   Outputs:	Carry Set - invalid drive/macro
 37010                                  ;		Carry Clear - AL has physical drive (0=A)
 37011                                  ;		    ThisCDS points to CDS
 37012                                  ;   Registers modified: AL
 37013                                  ;----------------------------------------------------------------------------
 37014                                  
 37015                                  	; 21/05/2019 - Retro DOS v4.0
 37016                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 37017                                  
 37018                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37019                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 37020                                  GetVisDrv:
 37021                                  	; 05/08/2018 - Retro DOS v3.0
 37022                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 37023 00006B34 E81900                  	CALL	GETTHISDRV		; get inuse drive
 37024 00006B37 72A6                    	jc	short RET45
 37025 00006B39 1E                      	push	ds
 37026 00006B3A 56                      	push	si
 37027 00006B3B 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 37028                                  	;test	word [si+67],2000h
 37029                                  	; 17/12/2022
 37030                                  	;test	byte [si+68],20h
 37031 00006B40 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 37032                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37033 00006B44 5E                      	pop	si
 37034 00006B45 1F                      	pop	ds
 37035 00006B46 7497                    	jz	short RET45		; if not spliced, return OK
 37036                                  	; MSDOS 6.0
 37037                                  	;mov	byte [ss:DrvErr],0Fh
 37038 00006B48 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 37039 00006B4E F9                      	STC				; signal error
 37040 00006B4F C3                      	retn
 37041                                  
 37042                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 37043                                  ;----------------------------------------------------------------------------
 37044                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 37045                                  ;	macro pointer
 37046                                  ;
 37047                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 37048                                  ;   Outputs:
 37049                                  ;		Carry Set - invalid drive/macro
 37050                                  ;		Carry Clear - AL has physical drive (0=A)
 37051                                  ;		   ThisCDS points to macro
 37052                                  ;   Registers modified: AL
 37053                                  ;----------------------------------------------------------------------------
 37054                                  
 37055                                  	; 21/05/2019 - Retro DOS v4.0
 37056                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 37057                                  
 37058                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37059                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)
 37060                                  GETTHISDRV:
 37061                                  	; 05/08/2018
 37062                                  	; 12/07/2018 - Retro DOS v3.0
 37063                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 37064                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37065 00006B50 08C0                    	OR	AL,AL			; are we using default drive?
 37066 00006B52 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 37067 00006B54 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 37068                                  	;INC	ax			; Counteract next instruction
 37069                                  	; 04/09/2018
 37070                                  	;inc	al
 37071                                  	; 07/12/2022
 37072 00006B58 40                      	inc	ax
 37073                                  GTD10:	
 37074                                  	;DEC	AX
 37075                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37076 00006B59 48                      	dec	ax			; 0 = A
 37077                                  	;dec	al
 37078 00006B5A 1E                      	PUSH	DS			; save world
 37079 00006B5B 56                      	PUSH	SI
 37080                                  	;mov	byte [ss:EXTERR_LOCUS],2
 37081 00006B5C 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 37082 00006B62 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 37083 00006B68 7420                    	JZ	SHORT GTD20		; Logical
 37084 00006B6A 50                      	PUSH	AX
 37085 00006B6B 06                      	PUSH	ES
 37086 00006B6C 57                      	PUSH	DI
 37087 00006B6D 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 37088                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 37089 00006B74 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 37090 00006B79 0441                    	ADD	AL,'A'
 37091 00006B7B E815FF                  	CALL	InitCDS			; InitCDS(c);
 37092                                  	;test	word [es:di+67],4000h
 37093                                  	; 17/12/2022
 37094                                  	;test	byte [es:di+68],40h
 37095 00006B7E 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37096                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 37097 00006B83 5F                      	POP	DI
 37098 00006B84 07                      	POP	ES
 37099 00006B85 58                      	POP	AX
 37100 00006B86 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 37101 00006B88 EB18                    	JMP	SHORT GTDX		; carry clear
 37102                                  GTD20:
 37103 00006B8A E81800                  	CALL	GetCDSFromDrv
 37104 00006B8D 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 37105                                  	;test	word [si+43h],4000h
 37106                                  	; 17/12/2022
 37107                                  	;test	byte [si+44h],40h
 37108 00006B8F F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37109                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 37110 00006B93 750D                    	JNZ	SHORT GTDX		; carry clear
 37111                                  GTD30:	
 37112                                  	; 21/05/2019
 37113                                  	; MSDOS 6.0
 37114 00006B95 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 37115 00006B97 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 37116                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 37117 00006B9B 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 37118 00006BA1 F9                      	STC
 37119                                  GTDX:	
 37120 00006BA2 5E                      	POP	SI			; restore world
 37121 00006BA3 1F                      	POP	DS
 37122 00006BA4 C3                      	RETN
 37123                                  
 37124                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 37125                                  ;----------------------------------------------------------------------------
 37126                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 37127                                  ;	pointer, returning an error if the drive number is greater than the
 37128                                  ;	number of CDS's
 37129                                  ;
 37130                                  ;   Inputs:	AL is physical unit # A=0...
 37131                                  ;   Outputs:	Carry Set if Bad Drive
 37132                                  ;		Carry Clear
 37133                                  ;		    DS:SI -> CDS
 37134                                  ;		    [THISCDS] = DS:SI
 37135                                  ;   Registers modified: DS,SI
 37136                                  ;----------------------------------------------------------------------------
 37137                                  
 37138                                  	; 21/05/2019 - Retro DOS v4.0
 37139                                  GetCDSFromDrv:
 37140 00006BA5 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 37141 00006BAA 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 37142 00006BAC F9                      	STC				; signal error
 37143 00006BAD C3                      	RETN				; bye
 37144                                  GetCDS:
 37145 00006BAE 53                      	PUSH	BX
 37146 00006BAF 50                      	PUSH	AX
 37147 00006BB0 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 37148                                  	;mov	bl,81 ; MSDOS 3.3
 37149                                  	;mov	bl,88 ; MSDOS 6.0 
 37150 00006BB5 B358                    	MOV	BL,curdir.size		; size in convenient spot
 37151 00006BB7 F6E3                    	MUL	BL			; get net offset
 37152 00006BB9 01C6                    	ADD	SI,AX			; convert to true pointer
 37153 00006BBB 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 37154 00006BC0 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 37155 00006BC5 58                      	POP	AX
 37156 00006BC6 5B                      	POP	BX
 37157 00006BC7 F8                      	CLC				; no error
 37158 00006BC8 C3                      	RETN				; bye!
 37159                                  
 37160                                  ;============================================================================
 37161                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 37162                                  ;============================================================================
 37163                                  ; Retro	DOS v3.0 - 12/07/2018
 37164                                  ; 22/05/2019 - Retro DOS v4.0
 37165                                  
 37166                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 37167                                  ;----------------------------------------------------------------------------
 37168                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 37169                                  ;       gritty substitution.
 37170                                  ;
 37171                                  ;   Inputs:     DS:DX - pointer to FCB
 37172                                  ;               ES:DI - point to destination
 37173                                  ;   Outputs:    Carry Set - invalid path in final map
 37174                                  ;               Carry Clear - FCB has been mapped into ES:DI
 37175                                  ;                   Sattrib is set from possibly extended FCB
 37176                                  ;                   ExtFCB set if extended FCB found
 37177                                  ;   Registers modified: most
 37178                                  ;----------------------------------------------------------------------------
 37179                                  
 37180                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37181                                  TransFCB:
 37182                                  	; 22/05/2019 - Retro DOS v4.0
 37183                                  	; 12/07/2018 - Retro DOS v3.0
 37184                                  	;LocalVar FCBTmp,16
 37185                                  	;ENTER
 37186 00006BC9 55                      	push	bp
 37187 00006BCA 89E5                    	mov	bp,sp
 37188                                  	;sub	sp,15	; MSDOS 3.3
 37189 00006BCC 83EC10                  	sub	sp,16	; MSDOS 6.0
 37190 00006BCF 16                      	push	ss
 37191 00006BD0 07                      	pop	es
 37192 00006BD1 06                      	push	es
 37193 00006BD2 57                      	push	di
 37194                                  	;lea	di,[bp-15] ; MSDOS 3.3
 37195                                  	;LEA	DI,FCBTmp 
 37196 00006BD3 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 37197 00006BD6 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 37198 00006BDC 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 37199 00006BE2 E8FDB0                  	call	GetExtended             ; get FCB, extended or not
 37200                                  	; 06/12/2022
 37201 00006BE5 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 37202 00006BE7 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 37203 00006BEA 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 37204 00006BEE 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 37205                                  GetDrive:
 37206 00006BF4 AC                      	lodsb				; get drive byte
 37207 00006BF5 E858FF                  	call	GETTHISDRV
 37208 00006BF8 722A                    	jc	short BadPack
 37209 00006BFA E87403                  	call	TextFromDrive           ; convert 0-based drive to text
 37210                                  
 37211                                  ; Scan the source to see if there are any illegal chars
 37212                                  
 37213                                  	;mov	bx,CharType		; load lookup table
 37214 00006BFD B90B00                  	mov	cx,11
 37215 00006C00 56                      	push	si			; back over name, ext
 37216                                  FCBScan:
 37217 00006C01 AC                      	lodsb				; get a byte
 37218                                  	
 37219                                  	; 09/08/2018
 37220                                  	;;xlat	byte [es:bx]
 37221                                  	;es	xlat
 37222                                  
 37223                                  	; 22/05/2019 - Retro DOS v4.0	
 37224 00006C02 E826E5                  	call	GetCharType		; get flags
 37225                                  
 37226                                  	;test	al,8	
 37227 00006C05 A808                    	test	al,FFCB
 37228 00006C07 741B                    	jz	short BadPack
 37229                                  NextCh: 
 37230 00006C09 E2F6                    	loop	FCBScan
 37231 00006C0B 5E                      	pop	si
 37232 00006C0C 89FB                    	mov	bx,di
 37233 00006C0E E829B5                  	call	PackName                ; crunch the path
 37234 00006C11 5F                      	pop	di			; get original destination
 37235 00006C12 07                      	pop	es
 37236 00006C13 16                      	push	ss			; get DS addressability
 37237 00006C14 1F                      	pop	ds
 37238                                  	;lea	si,[bp-15] ; MSDOS 3.3
 37239                                  	;LEA	SI,FCBTmp		; point at new pathname
 37240 00006C15 8D76F0                  	lea	si,[bp-16]
 37241 00006C18 803F00                  	cmp	byte [bx],0
 37242 00006C1B 7407                    	jz	short BadPack
 37243 00006C1D 55                      	push	bp
 37244 00006C1E E80E00                  	call	TransPathSet            ; convert the path
 37245 00006C21 5D                      	pop	bp
 37246 00006C22 7303                    	jnc	short FCBRet		; bye with transPath error code
 37247                                  BadPack:
 37248 00006C24 F9                      	STC
 37249                                  	;mov	al,3
 37250 00006C25 B003                    	MOV     AL,error_path_not_found
 37251                                  FCBRet: 
 37252                                  	;LEAVE
 37253 00006C27 89EC                    	mov	sp,bp
 37254 00006C29 5D                      	pop	bp
 37255                                  TransPath_retn:
 37256 00006C2A C3                      	retn
 37257                                  
 37258                                  ; 12/07/2018 - Retro DOS v3.0
 37259                                  
 37260                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 37261                                  ;----------------------------------------------------------------------------
 37262                                  ;
 37263                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 37264                                  ;       substitution, insertion of current directory and fixing . and ..
 37265                                  ;       entries. Perform splicing. Allow input string to match splice
 37266                                  ;       exactly.
 37267                                  ;
 37268                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 37269                                  ;       matches splice.
 37270                                  ;
 37271                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 37272                                  ;
 37273                                  ;   The following anomalous behaviour is required:
 37274                                  ;
 37275                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 37276                                  ;       Paths on devices are ignored. (truncate to 0-length)
 37277                                  ;       Raw net I/O sets ThisCDS => NULL.
 37278                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 37279                                  ;
 37280                                  ;   Other behaviour:
 37281                                  ;
 37282                                  ;       ThisCDS set up.
 37283                                  ;       FatRead done on local CDS.
 37284                                  ;       ValidateCDS done on local CDS.
 37285                                  ;
 37286                                  ;   Brief flowchart:
 37287                                  ;
 37288                                  ;       if fSharing then
 37289                                  ;           set up DummyCDS (ThisCDS)
 37290                                  ;           canonicalize (sets cMeta)
 37291                                  ;           splice
 37292                                  ;           fatRead
 37293                                  ;           return
 37294                                  ;       if \\ or d:\\ lead then
 37295                                  ;           set up null CDS (ThisCDS)
 37296                                  ;           canonicalize (sets cMeta)
 37297                                  ;           return
 37298                                  ;       if device then
 37299                                  ;           set up dummyCDS (ThisCDS)
 37300                                  ;           canonicalize (sets cMeta)
 37301                                  ;           return
 37302                                  ;       if file then
 37303                                  ;           getCDS (sets (ThisCDS) from name)
 37304                                  ;           validateCDS (may reset current dir)
 37305                                  ;           Copy current dir
 37306                                  ;           canonicalize (set cMeta)
 37307                                  ;           splice
 37308                                  ;           generate correct CDS (ThisCDS)
 37309                                  ;           if local then
 37310                                  ;               fatread
 37311                                  ;           return
 37312                                  ;
 37313                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37314                                  ;               DI - point to buffer in DOSDATA
 37315                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37316                                  ;                   syntax, etc. or user FAILed to I 24.
 37317                                  ;               WFP_Start - points to beginning of buffer
 37318                                  ;               Curr_Dir_End - points to end of current dir in path
 37319                                  ;               DS - DOSDATA
 37320                                  ;   Registers modified: most
 37321                                  ;
 37322                                  ;----------------------------------------------------------------------------
 37323                                  
 37324                                  ; 22/05/2019
 37325                                  ; 13/05/2019 - Retro DOS v4.0
 37326                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 37327                                  
 37328                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37329                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 37330                                  
 37331                                  TransPath:
 37332 00006C2B 30C0                    	XOR     AL,AL
 37333 00006C2D EB02                    	JMP     SHORT SetSplice
 37334                                  TransPathSet:
 37335 00006C2F B0FF                    	MOV     AL,-1
 37336                                  SetSplice:
 37337 00006C31 36A2[4C03]              	MOV	[SS:NoSetDir],AL	; NoSetDir = !fExact;	;smr;SS Override
 37338 00006C35 B0FF                    	MOV     AL,-1
 37339                                  TransPathNoSet:
 37340 00006C37 36A2[7105]              	MOV	[SS:FSPLICE],AL		; fSplice = TRUE;	;smr;SS Override
 37341 00006C3B 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 37342 00006C41 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 37343 00006C46 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 37344 00006C4D 16                      	push	ss
 37345 00006C4E 07                      	pop	es
 37346                                  	;lea	bp,[di+134]
 37347 00006C4F 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 37348                                  ;
 37349                                  ; if this is through the server dos call, fsharing is set. We set up a
 37350                                  ; dummy cds and let the operation go.
 37351                                  ;
 37352 00006C53 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 37353 00006C59 7435                    	JZ	short CheckUNC		; skip to UNC check
 37354                                  ;
 37355                                  ; ES:DI point to buffer
 37356                                  ;
 37357 00006C5B E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 37358 00006C5E E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 37359 00006C61 722A                    	jc	short NoPath
 37360 00006C63 E80B03                  	CALL	TextFromDrive		; drop in new
 37361 00006C66 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 37362 00006C69 E83401                  	CALL	Canonicalize            ; copy and canonicalize
 37363 00006C6C 72BC                    	jc	short TransPath_retn	; errors
 37364                                  ;
 37365                                  ; Perform splices for net guys.
 37366                                  ;
 37367 00006C6E 16                      	push	ss
 37368 00006C6F 1F                      	pop	ds
 37369 00006C70 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 37370 00006C74 F606[7105]FF            	TEST	byte [FSPLICE],-1
 37371 00006C79 7403                    	JZ	short NoServerSplice
 37372 00006C7B E83102                  	CALL    Splice
 37373                                  NoServerSplice:
 37374 00006C7E 16                      	push	ss
 37375 00006C7F 1F                      	pop	ds                      ; for FATREAD
 37376 00006C80 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 37377 00006C84 E801A7                  	call	ECritDisk
 37378 00006C87 E814EB                  	call	FATREAD_CDS
 37379 00006C8A E816A7                  	call	LCritDisk
 37380                                  NoPath:
 37381                                  	;mov	al,3
 37382 00006C8D B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37383 00006C8F C3                      	retn				; any errors are in Carry flag
 37384                                  
 37385                                  ; Let the network decide if the name is for a spooled device. It will map
 37386                                  ; the name if so.
 37387                                  
 37388                                  CheckUNC:
 37389 00006C90 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 37390                                  	;CallInstall NetSpoolCheck,MultNET,35
 37391 00006C97 B82311                  	mov	ax,1123h
 37392 00006C9A CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 37393                                  			; DS:SI -> ASCIZ filename to canonicalize
 37394                                  			; ES:DI -> 128-byte buffer for qualified name
 37395                                  			; Return: CF set if not resolved
 37396 00006C9C 7329                    	JNC	short UNCDone
 37397                                  
 37398                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 37399                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 37400                                  ; input, then the name has been changed to the remote spooler by the above net
 37401                                  ; call. Also, there may be a drive in front of the \\.
 37402                                  
 37403                                  NO_CHECK:
 37404 00006C9E E8B902                  	CALL    DriveFromText		; eat drive letter
 37405 00006CA1 50                      	PUSH    AX                      ; save it
 37406 00006CA2 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 37407 00006CA4 E8A1E4                  	call    PATHCHRCMP              ; convert to normal form
 37408 00006CA7 86E0                    	XCHG    AH,AL                   ; swap for second byte
 37409 00006CA9 E89CE4                  	call    PATHCHRCMP              ; convert to normal form
 37410 00006CAC 751F                    	JNZ	short CheckDevice	; not a path char
 37411 00006CAE 38C4                    	CMP     AH,AL                   ; are they same?
 37412 00006CB0 751B                    	JNZ	short CheckDevice	; nope
 37413                                  
 37414                                  ; We have a UNC request. We must copy the string up to the beginning of the
 37415                                  ; local machine root path
 37416                                  
 37417 00006CB2 58                      	POP     AX
 37418 00006CB3 A5                      	MOVSW                           ; get the lead \\.
 37419                                  UNCCpy:
 37420 00006CB4 AC                      	LODSB                           ; get a byte
 37421 00006CB5 E83BE4                   	call	UCase                   ;AN000;; convert the char
 37422 00006CB8 08C0                    	OR      AL,AL
 37423 00006CBA 740E                    	JZ	short UNCTerm		; end of string. All done.
 37424 00006CBC E889E4                  	call    PATHCHRCMP              ; is it a path char?
 37425 00006CBF 89FB                    	MOV     BX,DI                   ; backup position
 37426 00006CC1 AA                      	STOSB
 37427 00006CC2 75F0                    	JNZ	short UNCCpy		; no, go copy
 37428 00006CC4 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 37429                                  UNCDone:
 37430 00006CC7 16                      	push	ss
 37431 00006CC8 1F                      	pop	ds
 37432 00006CC9 C3                       	retn				; return error code
 37433                                  UNCTerm:
 37434 00006CCA AA                      	STOSB                           ;AN000;
 37435 00006CCB EBFA                    	JMP	short UNCDone		;AN000;
 37436                                  
 37437                                  CheckDevice:
 37438                                  
 37439                                  ; Check DS:SI for device. First eat any path stuff
 37440                                  
 37441 00006CCD 58                      	POP     AX                      ; retrieve drive info
 37442 00006CCE 803C00                  	CMP     BYTE [SI],0		; check for null file
 37443 00006CD1 7504                    	JNZ	short CheckPath
 37444                                  	;mov	al,2 
 37445 00006CD3 B002                    	MOV     AL,error_file_not_found ; bad file error
 37446 00006CD5 F9                      	STC                             ; signal error on null input
 37447 00006CD6 C3                      	RETN				; bye!
 37448                                  CheckPath:
 37449 00006CD7 50                      	push	ax
 37450 00006CD8 55                      	push	bp			; save drive number
 37451                                  
 37452                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37453                                  %if 0
 37454                                  	; MSDOS 6.0
 37455                                  ;;;BUGBUG BUG 10-26-1992 scottq
 37456                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 37457                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 37458                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 37459                                  ;;;end up having a 5D in the opcode's displacement field. The
 37460                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 37461                                  ;;;
 37462                                  ;;;What we do here is do a call to a function that is less than 5Dh
 37463                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 37464                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 37465                                  ;;;
 37466                                  ;;;More info:
 37467                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 37468                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 37469                                  ;;;
 37470                                  	call	no5Dshere
 37471                                  start5Dhack:
 37472                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice
 37473                                  backfrom5Dhack:
 37474                                  
 37475                                  %endif
 37476                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37477                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 37478 00006CD9 E8C3D6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 37479                                  
 37480 00006CDC 5D                      	pop	bp
 37481 00006CDD 58                      	pop	ax			; get drive letter back
 37482 00006CDE 731C                    	JNC	short DoFile		; yes we have a file.
 37483                                  
 37484                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 37485                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 37486                                  ; call.
 37487                                  
 37488 00006CE0 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 37489 00006CE6 E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 37490 00006CE9 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 37491                                  
 37492                                  ; Now that we have noted that we have a device, we put it into a form that
 37493                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 37494                                  ; string. We relax this to state that if the d:\ is present then the path
 37495                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 37496                                  ; a device.
 37497                                  
 37498 00006CEF E87F02                  	CALL    TextFromDrive
 37499 00006CF2 B02F                    	MOV     AL,'/'                  ; path sep.
 37500 00006CF4 AA                      	STOSB
 37501 00006CF5 E853A5                  	call	StrCpy			; move remainder of string
 37502                                  
 37503 00006CF8 F8                      	CLC                             ; everything OK.
 37504 00006CF9 16                      	push	ss
 37505 00006CFA 1F                      	pop	ds                      ; remainder of OK stuff
 37506                                  DoFile_retn:
 37507 00006CFB C3                      	retn
 37508                                  
 37509                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37510                                  %if 0
 37511                                  
 37512                                  no5Dshere:
 37513                                  	; 10/08/2018
 37514                                  	jmp	CheckThisDevice		; snoop for device
 37515                                  %endif
 37516                                  
 37517                                  ;.erre (no5Dshere - start5Dhack - 5D)
 37518                                  
 37519                                  ; We have a file. Get the raw CDS.
 37520                                  
 37521                                  DoFile:
 37522                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37523                                  
 37524 00006CFC E835FE                  	call	GetVisDrv               ; get proper CDS
 37525                                  	;mov	al,3 
 37526 00006CFF B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 37527 00006D01 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 37528                                  
 37529                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 37530                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 37531                                  ; Use the one that we are going to use (ES:DI).
 37532                                  
 37533                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 37534 00006D03 1E                      	push	ds
 37535 00006D04 56                      	push	si
 37536 00006D05 06                      	push	es
 37537 00006D06 57                      	push	di
 37538 00006D07 E8DED5                  	call	ValidateCDS             ; poke CDS and make everything OK
 37539                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 37540 00006D0A 5F                      	pop	di
 37541 00006D0B 07                      	pop	es
 37542 00006D0C 5E                      	pop	si
 37543 00006D0D 1F                      	pop	ds
 37544                                  	;mov	al,3
 37545 00006D0E B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37546                                  	;retc				; someone failed an operation
 37547 00006D10 72E9                    	jc	short DoFile_retn
 37548                                  
 37549                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 37550                                  ; current directory. Copy it in.
 37551                                  
 37552 00006D12 1E                      	push	ds
 37553 00006D13 56                      	push	si
 37554 00006D14 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 37555 00006D19 89FB                    	MOV     BX,DI                   ; point to destination
 37556                                  	;add	bx,[si+79] ; MSDOS 6.0
 37557 00006D1B 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 37558                                  	;lea	bp,[di+134]
 37559 00006D1E 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 37560                                  					;AN000;
 37561 00006D22 E835A5                  	call	FStrCpy                 ; copy string. ES:DI point to end
 37562 00006D25 4F                      	DEC     DI                      ; point to NUL byte
 37563                                  
 37564                                  ; Make sure that there is a path char at end.
 37565                                  
 37566 00006D26 B05C                    	MOV     AL,'\'
 37567 00006D28 263845FF                	CMP     [ES:DI-1],AL
 37568 00006D2C 7401                    	JZ	short GetOrig
 37569 00006D2E AA                      	STOSB
 37570                                  
 37571                                  ; Now get original string.
 37572                                  
 37573                                  GetOrig:
 37574 00006D2F 4F                      	DEC     DI                      ; point to path char
 37575 00006D30 5E                      	pop	si
 37576 00006D31 1F                      	pop	ds
 37577                                  
 37578                                  ; BX points to the end of the root part of the CDS (at where a path char
 37579                                  ; should be). Now, we decide whether we use this root or extend it with the
 37580                                  ; current directory. See if the input string begins with a leading 
 37582 00006D32 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 37583 00006D35 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 37584 00006D37 08C0                    	OR      AL,AL                   ; end of string?
 37585 00006D39 7410                    	JZ	short DoCanon		; yes, skip.
 37586                                  ;
 37587                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 37588                                  ; to this root. Make sure that there is a path char there and advance the
 37589                                  ; source string over all leading \'s.
 37590                                  ;
 37591 00006D3B 89DF                    	MOV     DI,BX                   ; back up to root point.
 37592                                  SkipPath:
 37593 00006D3D AC                      	LODSB
 37594 00006D3E E807E4                  	call    PATHCHRCMP
 37595 00006D41 74FA                    	JZ	short SkipPath
 37596 00006D43 4E                      	DEC     SI
 37597 00006D44 08C0                    	OR      AL,AL
 37598 00006D46 7403                    	JZ	short DoCanon
 37599                                  
 37600                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 37601                                  ; for yucks.
 37602                                  
 37603                                  PathAssure:
 37604 00006D48 B05C                    	MOV     AL,'\'	; 5Ch
 37605 00006D4A AA                      	STOSB
 37606                                  
 37607                                  ; ES:DI point to the correct spot for canonicalization to begin.
 37608                                  ; BP is the max extent to advance DI
 37609                                  ; BX is the backup limit for ..
 37610                                  
 37611                                  DoCanon:
 37612 00006D4B E85200                  	CALL    Canonicalize            ; wham.
 37613                                  	;retc				; badly formatted path.
 37614 00006D4E 72AB                    	jc	short DoFile_retn
 37615                                  
 37616                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 37617                                  ; to wfp_start and do string substitution. BP is still the max position in
 37618                                  ; buffer.
 37619                                  
 37620 00006D50 16                      	push	ss
 37621 00006D51 1F                      	pop	ds
 37622 00006D52 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 37623 00006D56 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 37624 00006D5A E81C02                  	CALL    PathPref                ; is there a prefix?
 37625 00006D5D 7514                    	JNZ	short DoSplice		; no, do splice
 37626                                  
 37627                                  ; We have a match. Check to see if we ended in a path char.
 37628                                  
 37629 00006D5F 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 37630 00006D62 E8E3E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 37631 00006D65 740C                    	JZ	short DoSplice		; yes, no current dir here.
 37632                                  Pathline:                               ; 2/13/KK
 37633 00006D67 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 37634 00006D6B 7406                    	JZ	short DoSplice
 37635 00006D6D 47                      	INC     DI                      ; point to after current path char
 37636 00006D6E 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 37637                                  
 37638                                  ; Splice the result.
 37639                                  
 37640                                  DoSplice:
 37641 00006D73 16                      	push	ss
 37642 00006D74 1F                      	pop	ds			; back to DOSDATA
 37643 00006D75 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 37644 00006D79 31C9                    	XOR     CX,CX
 37645 00006D7B F606[7105]FF            	TEST	byte [FSPLICE],-1
 37646 00006D80 7403                    	JZ	short SkipSplice
 37647 00006D82 E82A01                  	CALL    Splice                  ; replaces in place.
 37648                                  SkipSplice:
 37649                                  
 37650                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 37651                                  ; device.
 37652                                  
 37653 00006D85 16                      	push	ss
 37654 00006D86 1F                      	pop	ds
 37655 00006D87 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 37656                                  	;test	word [es:di+67],8000h
 37657                                  	; 17/12/2022
 37658                                  	;test	byte [es:di+68],80h
 37659 00006D8B 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 37660                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 37661 00006D90 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 37662 00006D92 E30B                    	JCXZ    Done
 37663 00006D94 E8F1A5                  	call	ECritDisk
 37664 00006D97 E804EA                  	call	FATREAD_CDS
 37665 00006D9A E806A6                  	call	LCritDisk
 37666                                  	;mov	al, 3
 37667 00006D9D B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37668                                  Done:   
 37669 00006D9F C3                      	retn                         ; any errors in carry flag.
 37670                                  
 37671                                  ; 13/07/2018
 37672                                  
 37673                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 37674                                  ;----------------------------------------------------------------------------
 37675                                  ;   Canonicalize - copy path removing . and .. entries.
 37676                                  ;
 37677                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37678                                  ;               ES:DI - point to buffer
 37679                                  ;               BX - backup limit (offset from ES) points to slash
 37680                                  ;               BP - end of buffer
 37681                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37682                                  ;                   syntax, etc.
 37683                                  ;               Carry Clear -
 37684                                  ;                   DS:DI - advanced to end of string
 37685                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 37686                                  ;   Registers modified: AX CX DX (in addition to those above)
 37687                                  ;----------------------------------------------------------------------------
 37688                                  
 37689                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37690                                  
 37691                                  Canonicalize:
 37692                                  
 37693                                  ; We copy all leading path separators.
 37694                                  
 37695 00006DA0 AC                      	LODSB                           ;   while (PathChr (*s))
 37696 00006DA1 E8A4E3                  	call    PATHCHRCMP
 37697 00006DA4 7507                    	JNZ	short CanonDec
 37698 00006DA6 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 37699 00006DA8 7319                    	JAE	short CanonBad		;           goto error;
 37700 00006DAA AA                      	STOSB
 37701 00006DAB EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 37702                                  CanonDec:
 37703 00006DAD 4E                      	DEC     SI
 37704                                  
 37705                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 37706                                  ; component (no leading path separators) and ES:DI being the destination
 37707                                  ; buffer.
 37708                                  
 37709                                  CanonLoop:
 37710                                  
 37711                                  ; If we are at the end of the source string, then we need to check to see that
 37712                                  ; a potential drive specifier is correctly terminated with a path sep char.
 37713                                  ; Otherwise, do nothing
 37714                                  
 37715 00006DAE 31C0                    	XOR     AX,AX
 37716 00006DB0 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 37717 00006DB2 751A                    	JNZ	short DoComponent
 37718 00006DB4 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 37719 00006DB9 7505                    	JNZ	short DoTerminate
 37720 00006DBB B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 37721 00006DBD AA                      	STOSB
 37722 00006DBE 88E0                    	MOV     AL,AH
 37723                                  DoTerminate:
 37724 00006DC0 AA                      	STOSB                           ;           *d++ = 0;
 37725 00006DC1 F8                      	CLC                             ;           return (0);
 37726 00006DC2 C3                      	retn
 37727                                  
 37728                                  CanonBad:
 37729 00006DC3 E8CC01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 37730                                  	;mov	al,3
 37731 00006DC6 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 37732 00006DC8 7402                    	JZ	short PathEnc		; path character encountered in string
 37733                                  	;mov	al,2
 37734 00006DCA B002                    	MOV     AL,error_file_not_found ; Set bad file error
 37735                                  PathEnc:
 37736 00006DCC F9                      	STC
 37737                                  CanonBad_retn:
 37738 00006DCD C3                      	retn
 37739                                  
 37740                                  ; We have a textual component that we must copy. We uppercase it and truncate
 37741                                  ; it to 8.3
 37742                                  
 37743                                  DoComponent:                            ;           }
 37744 00006DCE E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 37745 00006DD1 72FA                    	jc	short CanonBad_retn	;           return (-1);
 37746                                  
 37747                                  ; We special case the . and .. cases. These will be backed up.
 37748                                  
 37749                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 37750 00006DD3 26833D2E                	CMP	WORD [ES:DI],002Eh
 37751 00006DD7 7408                    	JZ	short Skip1
 37752                                  	;CMP	WORD PTR ES:[DI],'..'
 37753 00006DD9 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 37754 00006DDE 750A                    	JNZ	short CanonNormal
 37755 00006DE0 4F                      	DEC     DI                      ;           d--;
 37756                                  Skip1:  
 37757 00006DE1 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 37758                                  	;mov	al,3
 37759 00006DE4 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37760 00006DE6 72E5                    	jc	short CanonBad_retn
 37761 00006DE8 EB02                    	JMP     short CanonPath         ;           }
 37762                                  
 37763                                  ; We have a normal path. Advance destination pointer over it.
 37764                                  
 37765                                  CanonNormal:                            ;       else
 37766 00006DEA 01CF                    	ADD     DI,CX                   ;           d += ct;
 37767                                  
 37768                                  ; We have successfully copied a component. We are now pointing at a path
 37769                                  ; sep char or are pointing at a nul or are pointing at something else.
 37770                                  ; If we point at something else, then we have an error.
 37771                                  
 37772                                  CanonPath:
 37773 00006DEC E81600                  	CALL    PathSep
 37774 00006DEF 75D2                    	JNZ	short CanonBad		; something else...
 37775                                  
 37776                                  ; Copy the first path char we see.
 37777                                  
 37778 00006DF1 AC                      	LODSB                           ; get the char
 37779 00006DF2 E853E3                  	call    PATHCHRCMP              ; is it path char?
 37780 00006DF5 75B6                    	JNZ	short CanonDec		; no, go test for nul
 37781 00006DF7 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 37782 00006DF9 73C8                    	JAE	short CanonBad		; yep, error.
 37783 00006DFB AA                      	STOSB                           ; copy the one byte
 37784                                  
 37785                                  ; Skip all remaining path chars
 37786                                  
 37787                                  CanonPathLoop:
 37788 00006DFC AC                      	LODSB                           ; get next byte
 37789 00006DFD E848E3                  	call    PATHCHRCMP              ; path char again?
 37790 00006E00 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 37791 00006E02 4E                      	DEC     SI                      ; back up
 37792 00006E03 EBA9                    	JMP	short  CanonLoop	; go copy component
 37793                                  
 37794                                  ;BREAK <PathSep - determine if char is a path separator>
 37795                                  ;----------------------------------------------------------------------------
 37796                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 37797                                  ;   Inputs:     DS:SI - point to a char
 37798                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 37799                                  ;               Zero set if AL is / \ or NUL
 37800                                  ;               Zero reset otherwise
 37801                                  ;   Registers modified: AL
 37802                                  ;----------------------------------------------------------------------------
 37803                                  
 37804                                  PathSep:
 37805 00006E05 8A04                    	MOV     AL,[SI]                 ; get the character
 37806                                  PathSepGotCh:				; already have character
 37807 00006E07 08C0                    	OR      AL,AL                   ; test for zero
 37808 00006E09 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 37809                                  	;call	PATHCHRCMP              ; check for path character
 37810                                  	;retn				; and return HIS determination
 37811                                  	; 18/12/2022
 37812 00006E0B E93AE3                  	jmp	PATHCHRCMP
 37813                                  
 37814                                  ;BREAK <SkipBack - move backwards to a path separator>
 37815                                  ;----------------------------------------------------------------------------
 37816                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 37818                                  ;               BX has current directory back up limit (point to a / \)
 37819                                  ;   Outputs:    ES:DI backed up to point to a path char
 37820                                  ;               AL has char from output ES:DI (path sep if carry clear)
 37821                                  ;               Carry set if illegal backup
 37822                                  ;               Carry Clear if ok
 37823                                  ;   Registers modified: DI,AL
 37824                                  ;----------------------------------------------------------------------------
 37825                                  
 37826                                  SkipBack:
 37827 00006E0E 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 37828 00006E10 720B                    	JB	short SkipBad		;       if (d < dlim)
 37829 00006E12 4F                      	DEC     DI                      ;           goto err;
 37830 00006E13 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 37831 00006E16 E82FE3                  	call    PATHCHRCMP              ;           break;
 37832 00006E19 75F3                    	JNZ	short SkipBack		;       }
 37833 00006E1B F8                      	CLC                             ;   return (0);
 37834 00006E1C C3                      	retn				;
 37835                                  SkipBad:                                ;err:
 37836                                  	;mov	al,3
 37837 00006E1D B003                    	MOV     AL,error_path_not_found ; bad path error
 37838 00006E1F F9                      	STC                             ;   return (-1);
 37839 00006E20 C3                      	retn				;
 37840                                  
 37841                                  ;Break <CopyComponent - copy out a file path component>
 37842                                  ;----------------------------------------------------------------------------
 37843                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 37844                                  ;
 37845                                  ;   Inputs:     DS:SI - source path
 37846                                  ;               ES:DI - destination
 37847                                  ;               ES:BP - end of buffer
 37848                                  ;   Outputs:    Carry Set - too long
 37849                                  ;               Carry Clear - DS:SI moved past component
 37850                                  ;                   CX has length of destination
 37851                                  ;   Registers modified: AX,CX,DX
 37852                                  ;----------------------------------------------------------------------------
 37853                                  
 37854                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37855                                  
 37856                                  CopyComponent:
 37857                                  
 37858                                  %define CopyBP	 [BP]		; word
 37859                                  %define CopyD	 [BP+2]		; dword
 37860                                  %define CopyDoff [BP+2]		; word
 37861                                  %define CopyS	 [BP+6]		; dword
 37862                                  %define CopySoff [BP+6]		; word
 37863                                  %define CopyTemp [BP+10]	; byte
 37864                                  
 37865 00006E21 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 37866 00006E24 1E                      	push	ds
 37867 00006E25 56                      	push	si
 37868 00006E26 06                      	push	es
 37869 00006E27 57                      	push	di
 37870 00006E28 55                      	push	bp
 37871 00006E29 89E5                    	MOV     BP,SP
 37872 00006E2B B42E                    	MOV     AH,'.'
 37873 00006E2D AC                      	LODSB
 37874 00006E2E AA                      	STOSB
 37875 00006E2F 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 37876 00006E31 7518                    	JNZ	short NormalComp
 37877 00006E33 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 37878 00006E36 740B                    	JZ	short NulTerm
 37879                                  TryTwoDot:
 37880 00006E38 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 37881 00006E39 AA                      	STOSB
 37882 00006E3A 38E0                    	CMP     AL,AH
 37883 00006E3C 7557                    	JNZ	short CopyBad
 37884 00006E3E E8C4FF                  	CALL    PathSep
 37885 00006E41 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 37886                                  NulTerm:                                ;               return -1;
 37887 00006E43 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 37888 00006E45 AA                      	STOSB
 37889 00006E46 897606                  	MOV     CopySoff,SI
 37890 00006E49 EB47                    	JMP     SHORT _GoodRet		;       }
 37891                                  NormalComp:                             ;   else {
 37892 00006E4B 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 37893 00006E4E E835E2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 37894 00006E51 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 37895 00006E54 743F                    	JZ	short CopyBad		;           return (-1);
 37896 00006E56 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 37897 00006E5C 7510                    	JNZ	short DoPack
 37898 00006E5E 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 37899 00006E61 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 37900 00006E66 7F2D                    	JG	short CopyBad		;               return (-1);
 37901 00006E68 7504                    	JNZ	short DoPack		;           else
 37902 00006E6A 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 37903 00006E6C 742F                    	JZ	short CopyBadPath	;               return (-1);
 37904                                  DoPack:                                 ;           }
 37905 00006E6E 897606                  	MOV     CopySoff,SI ; [bp+6]
 37906 00006E71 16                      	push	ss
 37907 00006E72 1F                      	pop	ds
 37908 00006E73 BE[4B05]                	MOV     SI,NAME1
 37909 00006E76 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 37910 00006E79 57                      	push	di
 37911 00006E7A E8BDB2                  	call	PackName                ;       PackName (Name1, temp);
 37912 00006E7D 5F                      	pop	di
 37913 00006E7E E8E2A3                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 37914 00006E81 49                      	DEC     CX
 37915 00006E82 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 37916                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37917                                  	;cmp	cx,[bp+0]
 37918                                  	; 15/12/2022
 37919                                  	;cmp	cx,[bp]
 37920 00006E85 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 37921 00006E88 730B                    	JAE	short CopyBad		;           return (-1);
 37922 00006E8A 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 37923 00006E8C C47E02                  	LES     DI,CopyD    ; [bp+2]	
 37924 00006E8F E8C8A3                  	call	FStrCpy
 37925                                  _GoodRet:				;       }
 37926 00006E92 F8                      	CLC
 37927 00006E93 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 37928                                  CopyBad:
 37929 00006E95 F9                      	STC
 37930 00006E96 E8F900                  	CALL    ScanPathChar            ; check for path chars in rest of string
 37931                                  	;mov	al,2
 37932 00006E99 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 37933 00006E9B 7503                    	JNZ	short CopyEnd
 37934                                  CopyBadPath:
 37935 00006E9D F9                      	STC
 37936                                  	;mov	al,3
 37937 00006E9E B003                    	MOV     AL,error_path_not_found ; Set bad path error
 37938                                  CopyEnd:
 37939 00006EA0 5D                      	pop	bp
 37940 00006EA1 5F                      	pop	di
 37941 00006EA2 07                      	pop	es
 37942 00006EA3 5E                      	pop	si
 37943 00006EA4 1F                      	pop	ds
 37944 00006EA5 9F                      	LAHF
 37945 00006EA6 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 37946 00006EA9 E8B7A3                  	call	StrLen
 37947 00006EAC 49                      	DEC     CX
 37948 00006EAD 9E                      	SAHF
 37949 00006EAE C3                      	retn
 37950                                  
 37951                                  ; 14/05/2019 - Retro DOS v4.0
 37952                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 37953                                  
 37954                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37955                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 37956                                  
 37957                                  ;Break <Splice - pseudo mount by string substitution>
 37958                                  ;----------------------------------------------------------------------------
 37959                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 37960                                  ;       ThisCDS to point to physical drive CDS.
 37961                                  ;   Inputs:     DS:SI point to string
 37962                                  ;               NoSetDir = TRUE => exact matches with splice fail
 37963                                  ;   Outputs:    DS:SI points to thisCDS
 37964                                  ;               ES:DI points to DPB
 37965                                  ;               String at DS:SI may be reduced in length by removing prefix
 37966                                  ;               and substituting drive letter.
 37967                                  ;               CX = 0 If no splice done
 37968                                  ;               CX <> 0 otherwise
 37969                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 37970                                  ;                   left alone
 37971                                  ;               ThisDPB points to proper DPB
 37972                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 37973                                  ;----------------------------------------------------------------------------
 37974                                  
 37975                                  Splice:
 37976 00006EAF 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 37977 00006EB5 7469                    	JZ	short AllDone
 37978 00006EB7 36FF36[A205]            	push	word [SS:THISCDS]
 37979 00006EBC 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 37980 00006EC1 1E                      	push	ds
 37981 00006EC2 56                      	push	si
 37982 00006EC3 5F                      	pop	di
 37983 00006EC4 07                      	pop	es
 37984 00006EC5 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 37985                                  SpliceScan:
 37986 00006EC7 E8DBFC                  	call	GetCDSFromDrv
 37987 00006ECA 724A                    	JC	short SpliceDone
 37988 00006ECC FEC0                    	INC     AL
 37989                                  	; 17/12/2022
 37990                                  	;test	byte [si+68],20h
 37991 00006ECE F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 37992                                  	;;test	word [si+67],2000h
 37993                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37994 00006ED2 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 37995 00006ED4 57                      	push	di
 37996 00006ED5 E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 37997 00006ED8 7403                    	JZ	short SpliceFound	;
 37998                                  SpliceSkip:
 37999 00006EDA 5F                      	pop	di
 38000 00006EDB EBEA                    	JMP	short SpliceScan	;               continue;
 38001                                  SpliceFound:
 38002 00006EDD 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 38003 00006EE1 7508                    	JNZ	short SpliceDo
 38004 00006EE3 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 38005 00006EE9 75EF                    	JNZ	short SpliceSkip
 38006                                  SpliceDo:
 38007 00006EEB 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 38008 00006EED 06                      	push	es
 38009 00006EEE 1F                      	pop	ds
 38010 00006EEF 5F                      	pop	di
 38011 00006EF0 E88000                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 38012 00006EF3 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 38013 00006EF7 09C0                    	OR      AX,AX
 38014 00006EF9 7808                    	JS	short NoPoke
 38015 00006EFB 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 38016 00006EFD 29F0                    	SUB     AX,SI
 38017 00006EFF 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 38018                                  NoPoke:
 38019 00006F03 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 38020 00006F06 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 38021 00006F08 B05C                    	MOV     AL,"\"
 38022 00006F0A AA                      	STOSB
 38023                                  SpliceCopy:                             ;               strcpy (src, p);
 38024 00006F0B E84CA3                  	call	FStrCpy
 38025 00006F0E 83C404                  	ADD     SP,4                    ; throw away saved stuff
 38026 00006F11 80C901                  	OR      CL,1                    ; signal splice done.
 38027 00006F14 EB0C                    	JMP     SHORT DoSet             ;               return;
 38028                                  SpliceDone:                             ;               }
 38029 00006F16 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 38030 00006F1B 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 38031                                  AllDone:
 38032 00006F20 31C9                    	XOR     CX,CX
 38033                                  DoSet:
 38034 00006F22 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 38035                                  	;les	di,[si+69]
 38036 00006F27 C47C45                  	LES     DI,[SI+curdir.devptr]	
 38037 00006F2A 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 38038 00006F2F 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 38039                                  Splice_retn:
 38040 00006F34 C3                      	retn
 38041                                  
 38042                                  ; 15/05/2019 - Retro DOS v4.0
 38043                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 38044                                  
 38045                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38046                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 38047                                  
 38048                                  ;Break <$NameTrans - partially process a name>
 38049                                  ;----------------------------------------------------------------------------
 38050                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 38051                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 38052                                  ;   to Transpath playing games with devices, we need to insure that the output
 38053                                  ;   has drive letter and : in it.
 38054                                  ;
 38055                                  ;   Inputs:     DS:SI - source string for translation
 38056                                  ;               ES:DI - pointer to buffer
 38057                                  ;   Outputs:
 38058                                  ;       Carry Clear
 38059                                  ;               Buffer at ES:DI is filled in with data
 38060                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 38061                                  ;       Carry Set
 38062                                  ;               AX = error_path_not_found
 38063                                  ;   Registers modified: all
 38064                                  ;----------------------------------------------------------------------------
 38065                                  
 38066                                  _$NameTrans:
 38067 00006F35 1E                      	push	ds
 38068 00006F36 56                      	push	si
 38069 00006F37 06                      	push	es
 38070 00006F38 57                      	push	di
 38071 00006F39 51                      	push	cx ; MSDOS 6.0
 38072                                  	
 38073                                  	; MSDOS 6.0	
 38074                                  ; M027 - Start
 38075                                  ;
 38076                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 38077                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 38078                                  ; device if the old call set the volume attribute bit. Note that devname in
 38079                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 38080                                  ; and restore CX.
 38081                                  
 38082                                  	;mov	ch,16h
 38083 00006F3A B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 38084 00006F3C E8B802                  	call	SetAttrib
 38085                                  
 38086                                  ; M027 - End
 38087                                  
 38088                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38089 00006F3F BF[BE03]                	MOV     DI,OPENBUF
 38090 00006F42 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 38091 00006F45 59                      	pop	cx ; MSDOS 6.0
 38092 00006F46 5F                      	pop     di
 38093 00006F47 07                      	pop	es
 38094 00006F48 5E                      	pop     si
 38095 00006F49 1F                      	pop     ds
 38096 00006F4A 7303                    	JNC	short TransOK
 38097 00006F4C E93E97                  	jmp	SYS_RET_ERR
 38098                                  TransOK:
 38099 00006F4F BE[BE03]                	MOV     SI,OPENBUF
 38100 00006F52 16                      	push	ss
 38101 00006F53 1F                      	pop	ds
 38102                                  ;GotText:
 38103 00006F54 E803A3                  	call	FStrCpy
 38104 00006F57 E92A97                  	jmp	SYS_RET_OK
 38105                                  
 38106                                  ;Break   <DriveFromText - return drive number from a text string>
 38107                                  ;----------------------------------------------------------------------------
 38108                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 38109                                  ;   pointer.
 38110                                  ;
 38111                                  ;   Inputs:     DS:SI point to a text string
 38112                                  ;   Outputs:    AL has drive number
 38113                                  ;               DS:SI advanced
 38114                                  ;   Registers modified: AX,SI.
 38115                                  ;----------------------------------------------------------------------------
 38116                                  
 38117                                  DriveFromText:
 38118 00006F5A 30C0                    	XOR     AL,AL                   ;       drive = 0;
 38119 00006F5C 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 38120 00006F5F 74D3                    	jz	short Splice_retn
 38121 00006F61 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 38122 00006F65 75CD                    	jnz	short Splice_retn
 38123 00006F67 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 38124 00006F68 0C20                    	OR      AL,20h
 38125                                  	;sub	al,60h
 38126 00006F6A 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 38127 00006F6C 75C6                    	jnz	short Splice_retn
 38128 00006F6E B0FF                    	MOV     AL,-1                   ; nuke AL...
 38129 00006F70 C3                      	retn				;           }
 38130                                  
 38131                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 38132                                  ;----------------------------------------------------------------------------
 38133                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 38134                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 38135                                  ;
 38136                                  ;   Inputs:     AL has 0-based drive number
 38137                                  ;   Outputs:    ES:DI advanced
 38138                                  ;   Registers modified: AX
 38139                                  ;----------------------------------------------------------------------------
 38140                                  
 38141                                  TextFromDrive:
 38142 00006F71 FEC0                    	INC     AL
 38143                                  TextFromDrive1:
 38144                                  	;add	al,40h
 38145 00006F73 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 38146 00006F75 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 38147 00006F77 AB                      	STOSW
 38148                                  PathPref_retn:
 38149 00006F78 C3                      	retn
 38150                                  
 38151                                  ;Break   <PathPref - see if one path is a prefix of another>
 38152                                  ;----------------------------------------------------------------------------
 38153                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 38154                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 38155                                  ;   prefix: A:\ and A:\FOO
 38156                                  ;
 38157                                  ;   Inputs:     DS:SI potential prefix
 38158                                  ;               ES:DI string
 38159                                  ;   Outputs:    Zero set => prefix found
 38160                                  ;                   DI/SI advanced past matching part
 38161                                  ;               Zero reset => no prefix, DS/SI garbage
 38162                                  ;   Registers modified: CX
 38163                                  ;----------------------------------------------------------------------------
 38164                                  
 38165                                  PathPref:
 38166 00006F79 E8F5A2                  	call	DStrLen                 ; get length
 38167 00006F7C 49                      	DEC     CX                      ; do not include nul byte
 38168 00006F7D F3A6                    	REPZ    CMPSB                   ; compare
 38169 00006F7F 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 38170 00006F81 50                      	push	ax			; save char register
 38171 00006F82 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 38172 00006F85 E8C0E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 38173 00006F88 7406                    	JZ	short Prefix		; yes, match root (I hope)
 38174                                  NotSep:                                 ; 2/13/KK
 38175 00006F8A 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 38176 00006F8D E877FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 38177                                  Prefix:
 38178 00006F90 58                      	pop	ax			; get back original
 38179 00006F91 C3                      	retn
 38180                                  
 38181                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 38182                                  ;----------------------------------------------------------------------------
 38183                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 38184                                  ;     a path separator.
 38185                                  ;
 38186                                  ;     Input:    DS:SI target string (null terminated)
 38187                                  ;     Output:   Zero set => path separator encountered in string
 38188                                  ;               Zero clear => null encountered
 38189                                  ;     Registers modified: SI
 38190                                  ;----------------------------------------------------------------------------
 38191                                  
 38192                                  ScanPathChar:
 38193 00006F92 AC                      	LODSB                           ; fetch a character
 38194 00006F93 E871FE                  	call    PathSepGotCh
 38195 00006F96 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 38196                                  	;call	PATHCHRCMP              ; path separator?
 38197                                  	;retn
 38198                                  	; 18/12/2022
 38199 00006F98 E9ADE1                  	jmp	PATHCHRCMP
 38200                                  
 38201                                  ;============================================================================
 38202                                  ; FILE.ASM, MSDOS 6.0, 1991
 38203                                  ;============================================================================
 38204                                  ; 14/07/2018 - Retro DOS v3.0
 38205                                  
 38206                                  ; 13/05/2019 - Retro DOS v4.0
 38207                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 38208                                  
 38209                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38210                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 38211                                  
 38212                                  ; MSDOS 2.11
 38213                                  ;BREAK <$Open - open a file handle>
 38214                                  ;----------------------------------------------------------------------------
 38215                                  ;   Assembler usage:
 38216                                  ;           LDS     DX, Name
 38217                                  ;           MOV     AH, Open
 38218                                  ;           MOV     AL, access
 38219                                  ;           INT     int_command
 38220                                  ;
 38221                                  ;       ACCESS          Function
 38222                                  ;       ------          --------
 38223                                  ;       open_for_read   file is opened for reading
 38224                                  ;       open_for_write  file is opened for writing
 38225                                  ;       open_for_both   file is opened for both reading and writing.
 38226                                  ;
 38227                                  ;   Error returns:
 38228                                  ;           AX = error_invalid_access
 38229                                  ;              = error_file_not_found
 38230                                  ;              = error_access_denied
 38231                                  ;              = error_too_many_open_files
 38232                                  ;----------------------------------------------------------------------------
 38233                                  
 38234                                  ; MSDOS 6.0
 38235                                  ;	BREAK <$Open - open a file from a path string>
 38236                                  ;----------------------------------------------------------------------------
 38237                                  ;
 38238                                  ;**	$OPen - Open a File
 38239                                  ;
 38240                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 38241                                  ;	file and and returns a handle
 38242                                  ;
 38243                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 38244                                  ;		(AL) = open mode
 38245                                  ;	EXIT	'C' clear if OK
 38246                                  ;		  (ax) = file handle
 38247                                  ;		'C' set if error
 38248                                  ;		  (ax) = error code
 38249                                  ;	USES	all
 38250                                  ;
 38251                                  ;----------------------------------------------------------------------------
 38252                                  
 38253                                  ; 13/05/2019 - Retro DOS v4.0
 38254                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38255                                  
 38256                                  _$OPEN:       
 38257 00006F9B 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 38258                                  _$Open2:
 38259                                  	;mov	ch,16h
 38260 00006F9D B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 38261 00006F9F E85502                  	call	SetAttrib
 38262 00006FA2 B9[DA2B]                	mov	cx,DOS_OPEN
 38263                                  
 38264                                  	;xor	ah,ah  ; MSDOS 3.3
 38265                                  
 38266 00006FA5 50                      	push	ax
 38267                                  
 38268                                  ;*	General file open/create code. The $CREATE call and the various
 38269                                  ;	$OPEN calls all come here.
 38270                                  ;
 38271                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 38272                                  ;	path names, etc., and then dispatch to our individual handlers.
 38273                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 38274                                  ;
 38275                                  ;	(TOS) = create mode
 38276                                  ;	(CX) = address of routine to call to do actual function
 38277                                  ;	(DS:DX) = ASCIZ name
 38278                                  ;	SAttrib = Attribute mask
 38279                                  
 38280                                  ;	Get a free SFT and mark it "being allocated"
 38281                                  
 38282                                  AccessFile:
 38283 00006FA6 E8DFA3                  	call	ECritSFT
 38284 00006FA9 E8D5F7                  	call	SFNFree			; get a free sfn
 38285 00006FAC E8F4A3                  	call	LCritSFT
 38286 00006FAF 7214                    	jc	short OpenFailJ		; oops, no free sft's
 38287 00006FB1 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 38288 00006FB6 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 38289 00006FBB 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 38290                                  
 38291                                  ;	Find a free area in the user's JFN table.
 38292                                  
 38293 00006FC0 E8ABF7                  	call	JFNFree			; get a free jfn
 38294 00006FC3 7303                    	jnc	short SaveJFN
 38295                                  OpenFailJ:
 38296 00006FC5 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 38297                                  
 38298                                  SaveJFN:
 38299 00006FC8 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 38300 00006FCD 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 38301 00006FD2 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 38302                                  
 38303                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 38304                                  ;	reusing the same JFN.
 38305                                  
 38306 00006FD7 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 38307 00006FDC 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 38308 00006FDF 89D6                    	MOV	SI,DX			; get name in appropriate place
 38309 00006FE1 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38310 00006FE4 51                      	push	cx			; save routine to call
 38311 00006FE5 E843FC                  	call	TransPath		; convert the path
 38312 00006FE8 5B                      	pop	bx			; (bx) = routine to call
 38313                                  
 38314 00006FE9 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 38315                                  	;JC	short OpenCleanJ	; no error, go and open file
 38316                                  	; 14/03/2024
 38317 00006FEE 725C                    	jc	short OpenClean
 38318                                  
 38319 00006FF0 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 38320 00006FF6 7404                    	JZ	short SetSearch
 38321                                  	;mov	al,2
 38322 00006FF8 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 38323                                  OpenCleanJ:
 38324 00006FFA EB50                    	JMP	short OpenClean
 38325                                  
 38326                                  SetSearch:
 38327 00006FFC 58                      	pop	ax			; Mode (Open), Attributes (Create)
 38328                                  
 38329                                  ;	We need to get the new inheritance bits.
 38330                                  
 38331 00006FFD 31C9                    	xor	cx,cx
 38332                                  	; MSDOS 6.0
 38333                                  	;mov	[si+2],cx ; 0
 38334 00006FFF 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 38335                                  	;mov    [si+51],cx ; 0
 38336 00007002 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 38337                                  	;
 38338 00007005 81FB[DA2B]              	CMP	BX,DOS_OPEN
 38339 00007009 7509                    	JNZ	short _DoOper
 38340                                  	;test   al,80h
 38341 0000700B A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 38342 0000700D 7405                    	JZ	short _DoOper ; 10/08/2018
 38343 0000700F 247F                    	AND	AL,7Fh			; mask off inherit bit
 38344                                  	;mov	cx,1000h
 38345 00007011 B90010                  	MOV	CX,sf_no_inherit
 38346                                  _DoOper:
 38347                                  	;; MSDOS 3.3
 38348                                  	;;mov	word [si+2], 0
 38349                                  	;;mov	word [si+33h], 0
 38350                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 38351                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 38352                                  
 38353                                  	; MSDOS 6.0
 38354                                  ;**	Check if this is an extended open. If so you must set the
 38355                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 38356                                  ;	Set_EXT_mode in creat.asm
 38357                                  
 38358                                  	; MSDOS 6.0
 38359                                  	;SAVE	<di, es>                ;M022 conditional removed here
 38360 00007014 57                      	push	di
 38361 00007015 06                      	push	es
 38362 00007016 1E                      	push	ds
 38363 00007017 07                      	pop	es
 38364 00007018 56                      	push	si
 38365 00007019 5F                      	pop	di			; (es:di) = SFT address
 38366 0000701A E8A9BB                  	call	Set_EXT_mode
 38367                                  	;RESTORE <es, di>
 38368 0000701D 07                      	pop	es
 38369 0000701E 5F                      	pop	di
 38370                                  
 38371                                  	;Context DS
 38372 0000701F 16                      	push	ss
 38373 00007020 1F                      	pop	ds	
 38374                                  
 38375 00007021 51                      	push	cx
 38376 00007022 FFD3                    	CALL	BX			; blam!
 38377 00007024 59                      	pop	cx
 38378 00007025 C536[9E05]              	LDS	SI,[THISSFT]
 38379 00007029 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 38380                                  	;jc	short OpenE ; MSDOS 3.3
 38381                                  
 38382                                  ;	The SFT was successfully opened. Remove busy mark.
 38383                                  
 38384                                  OpenOK:
 38385                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 38386 0000702B C7040100                	mov	word [SI],1
 38387                                  	;or	[SI+5],cx
 38388 0000702F 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 38389                                  
 38390                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 38391                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 38392                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 38393                                  ;
 38394                                  ; Since this is only relevant on sharer systems, we stick this code into the
 38395                                  ; sharer.
 38396                                  
 38397 00007032 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 38398 00007036 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 38399                                  
 38400 0000703B 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 38401                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38402                                  OpenOkj:
 38403 00007042 E93F96                  	jmp	SYS_RET_OK		; bye with no errors
 38404                                  
 38405                                  	; MSDOS 6.0
 38406                                  ;Extended Open hooks check
 38407                                  OpenE2:					;AN000;;EO.
 38408 00007045 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 38409 00007048 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 38410 0000704A EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 38411                                  
 38412                                  ;	Extended Open hooks check
 38413                                  ;
 38414                                  ;	AL has error code. Stack has argument to dos_open/dos_create.
 38415                                  
 38416                                  OpenClean:
 38417 0000704C 5B                      	pop	bx			; clean off stack
 38418                                  OpenE:
 38419                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 38420 0000704D C7040000                	mov	word [SI],0
 38421 00007051 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 38422 00007056 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 38423 00007059 EB02                    	JMP	SHORT OpenCritLeave
 38424                                  
 38425                                  OpenFail:
 38426 0000705B FB                      	STI
 38427 0000705C 59                      	pop	cx			; Clean stack
 38428                                  OpenCritLeave:
 38429 0000705D 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 38430                                  
 38431                                  	; MSDOS 6.0
 38432                                  ; File Tagging DOS 4.00
 38433 00007064 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 38434                                  					;AN000;;FT. code page mismatch
 38435 0000706A 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 38436 0000706C E92696                  	jmp	From_GetSet		;AN000;;FT. yes
 38437                                  NORERR: 				;AN000;
 38438                                  ; File Tagging DOS 4.00
 38439                                  
 38440 0000706F E91B96                  	jmp	SYS_RET_ERR		; no free, return error
 38441                                  
 38442                                  ; MSDOS 2.11
 38443                                  ;BREAK <$CREAT - create a new file and open him for input>
 38444                                  ;----------------------------------------------------------------------------
 38445                                  ;   Assembler usage:
 38446                                  ;           LDS     DX, name
 38447                                  ;           MOV     AH, Creat
 38448                                  ;           MOV     CX, access
 38449                                  ;           INT     21h
 38450                                  ;       ; AX now has the handle
 38451                                  ;
 38452                                  ;   Error returns:
 38453                                  ;           AX = error_access_denied
 38454                                  ;              = error_path_not_found
 38455                                  ;              = error_too_many_open_files
 38456                                  ;----------------------------------------------------------------------------
 38457                                  
 38458                                  ; MSDOS 6.0
 38459                                  ;	BREAK <$Creat - create a brand-new file>
 38460                                  ;----------------------------------------------------------------------------
 38461                                  ;
 38462                                  ;**	$Creat - Create a File
 38463                                  ;
 38464                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 38465                                  ;	initial attributes contained in CX
 38466                                  ;
 38467                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 38468                                  ;		(CX) = initial attributes
 38469                                  ;	EXIT	'C' set if error
 38470                                  ;		  (ax) = error code
 38471                                  ;		'C' clear if OK
 38472                                  ;		  (ax) = file handle
 38473                                  ;	USES	all
 38474                                  ;
 38475                                  ;----------------------------------------------------------------------------
 38476                                  
 38477                                  _$CREAT:
 38478 00007072 51                      	push	cx			; Save attributes on stack
 38479 00007073 B9[B02A]                	mov	CX,DOS_CREATE		; routine to call
 38480                                  AccessSet:
 38481                                  	;mov	byte [ss:SATTRIB],6
 38482 00007076 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 38483                                  	; 10/08/2018
 38484 0000707C E927FF                  	JMP	AccessFile		; use good ol' open
 38485                                  
 38486                                  ; MSDOS 6.0 (MSDOS 3.3)
 38487                                  ;	BREAK <$CHMOD - change file attributes>
 38488                                  ;----------------------------------------------------------------------------
 38489                                  ;
 38490                                  ;**	$CHMOD - Change File Attributes
 38491                                  ;
 38492                                  ;   Assembler usage:
 38493                                  ;	    LDS     DX, name
 38494                                  ;	    MOV     CX, attributes
 38495                                  ;	    MOV     AL,func (0=get, 1=set)
 38496                                  ;	    INT     21h
 38497                                  ;   Error returns:
 38498                                  ;	    AX = error_path_not_found
 38499                                  ;	    AX = error_access_denied
 38500                                  ;
 38501                                  ;----------------------------------------------------------------------------
 38502                                  
 38503                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38504                                  _$CHMOD:
 38505                                  	; 05/08/2018 - Retro DOS v3.0
 38506                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh
 38507 0000707F BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38508 00007082 50                      	push	ax
 38509 00007083 51                      	push	cx			; save function and attributes
 38510 00007084 89D6                    	MOV	SI,DX			; get things in appropriate places
 38511 00007086 E8A6FB                  	call	TransPathSet		; get correct path
 38512 00007089 59                      	pop	cx
 38513 0000708A 58                      	pop	ax			; and get function and attrs back
 38514 0000708B 7257                    	JC	short ChModErr		; errors get mapped to path not found
 38515 0000708D 16                      	push	ss			; set up for later possible calls
 38516 0000708E 1F                      	pop	ds
 38517 0000708F 803E[7A05]FF            	CMP	byte [CMETA],-1
 38518 00007094 754E                    	JNZ	short ChModErr
 38519                                  	;mov	byte [SATTRIB],16h
 38520 00007096 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 38521 0000709B 2C01                    	SUB	AL,1			; fast way to discriminate
 38522 0000709D 720B                    	JB	short ChModGet		; 0 -> go get value
 38523 0000709F 7417                    	JZ	short ChModSet		; 1 -> go set value
 38524                                  	;mov	byte [EXTERR_LOCUS],1
 38525 000070A1 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 38526                                  	;mov	al,1
 38527 000070A6 B001                    	mov	al,error_invalid_function ; bad value
 38528                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38529                                  chmod_errj:	
 38530                                  	;;jmp	SYS_RET_ERR
 38531                                  	;jmp	short ChModE	
 38532 000070A8 EBC5                    	jmp	short NORERR	; 06/12/2022
 38533                                  ChModGet:
 38534 000070AA E8EDB8                  	call	GET_FILE_INFO		; suck out the ol' info
 38535 000070AD 7237                    	JC	short ChModE		; error codes are already set for ret
 38536 000070AF E81894                  	call	Get_User_Stack		; point to user saved vaiables
 38537                                  	;mov	[SI+4],ax
 38538 000070B2 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 38539                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38540                                  OpenOkj2:
 38541                                  	; 17/12/2022
 38542                                  	;;jmp	SYS_RET_OK		; say sayonara
 38543                                  	;jmp	short OpenOkj
 38544                                  	; 25/06/2019
 38545 000070B5 E9CF95                  	jmp	SYS_RET_OK_clc
 38546                                  
 38547                                  ChModSet:
 38548 000070B8 89C8                    	MOV	AX,CX			; get attrs in position
 38549 000070BA E83BB9                  	call	SET_FILE_ATTRIBUTE	; go set
 38550 000070BD 7227                    	JC	short ChModE		; errors are set
 38551                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38552                                  	;jmp	SYS_RET_OK
 38553                                  OpenOkj3:
 38554                                  	;jmp	short OpenOkj2
 38555                                  	; 17/12/2022
 38556 000070BF E9C295                  	jmp	SYS_RET_OK
 38557                                  
 38558                                  ; 17/12/2022
 38559                                  %if 0
 38560                                  ChModErr:
 38561                                  NotFound:	; 17/12/2022
 38562                                  	;mov	al,3
 38563                                  	mov	al,error_path_not_found
 38564                                  ChModE:
 38565                                  UnlinkE:	; 17/12/2022
 38566                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38567                                  	;;jmp	SYS_RET_ERR
 38568                                  	;jmp	short chmod_errj
 38569                                  	; 17/12/2022
 38570                                  	jmp	short NORERR
 38571                                  %endif
 38572                                  
 38573                                  ; 22/05/2019 - Retro DOS v4.0
 38574                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 38575                                  
 38576                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38577                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 38578                                  
 38579                                  ;	BREAK <$UNLINK - delete a file entry>
 38580                                  ;----------------------------------------------------------------------------
 38581                                  ;
 38582                                  ;**	$UNLINK - Delete a File
 38583                                  ;
 38584                                  ;
 38585                                  ;	Assembler usage:
 38586                                  ;	    LDS     DX, name
 38587                                  ;	    IF VIA SERVER DOS CALL
 38588                                  ;	     MOV     CX,SEARCH_ATTRIB
 38589                                  ;	    MOV     AH, Unlink
 38590                                  ;	    INT     21h
 38591                                  ;
 38592                                  ;	ENTRY	(ds:dx) = path name
 38593                                  ;		(cx) = search_attribute, if via server_dos
 38594                                  ;	EXIT	'C' clear if no error
 38595                                  ;		'C' set if error
 38596                                  ;		  (ax) = error code
 38597                                  ;			= error_file_not_found
 38598                                  ;			= error_access_denied
 38599                                  ;
 38600                                  ;----------------------------------------------------------------------------
 38601                                  
 38602                                  _$UNLINK:
 38603 000070C2 51                      	push	cx			; Save possible CX input parm
 38604 000070C3 89D6                    	MOV	SI,DX			; Point at input string
 38605 000070C5 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 38606 000070C8 E864FB                  	call	TransPathSet		; go get normalized path
 38607 000070CB 59                      	pop	cx
 38608 000070CC 7216                    	JC	short ChModErr		; badly formed path
 38609 000070CE 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 38610 000070D4 750E                    	JNZ	short NotFound
 38611 000070D6 16                      	push	ss
 38612 000070D7 1F                      	pop	ds
 38613                                  	;mov	ch,6
 38614 000070D8 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 38615 000070DA E81A01                  	call	SetAttrib
 38616 000070DD E8B3B4                  	call	DOS_DELETE		; remove that file
 38617                                  	;JC	short UnlinkE 		; error is there
 38618                                  	; 17/12/2022
 38619 000070E0 728D                    	jc	short NORERR
 38620                                  
 38621                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38622                                  UnlinkOk:
 38623                                  	;jmp	SYS_RET_OK		; okey doksy
 38624 000070E2 EBDB                    	jmp	short OpenOkj3
 38625                                  
 38626                                  	; 17/12/2022
 38627                                  ChModErr:	; 17/12/2022
 38628                                  NotFound:
 38629                                  	;mov	al,3
 38630 000070E4 B003                    	MOV	AL,error_path_not_found
 38631                                  ChModE:		; 17/12/2022
 38632                                  UnlinkE:
 38633                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38634                                  	;;jmp	SYS_RET_ERR		; bye
 38635                                  	;jmp	short ChModE
 38636                                  	; 17/12/2022
 38637 000070E6 EB87                    	jmp	short NORERR
 38638                                  
 38639                                  ;BREAK <$RENAME - move directory entries around>
 38640                                  ;----------------------------------------------------------------------------
 38641                                  ;
 38642                                  ;   Assembler usage:
 38643                                  ;	    LDS     DX, source
 38644                                  ;	    LES     DI, dest
 38645                                  ;	    IF VIA SERVER DOS CALL
 38646                                  ;	      MOV   CX,SEARCH_ATTRIB
 38647                                  ;	    MOV     AH, Rename
 38648                                  ;	    INT     21h
 38649                                  ;
 38650                                  ;   Error returns:
 38651                                  ;	    AX = error_file_not_found
 38652                                  ;	       = error_not_same_device
 38653                                  ;	       = error_access_denied
 38654                                  ;
 38655                                  ;----------------------------------------------------------------------------
 38656                                  
 38657                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38658                                  _$RENAME:
 38659                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38660 000070E8 51                      	push	cx
 38661 000070E9 1E                      	push	ds
 38662 000070EA 52                      	push	dx			; save source and possible CX arg
 38663 000070EB 06                      	PUSH	ES
 38664 000070EC 1F                      	POP	DS			; move dest to source
 38665 000070ED 89FE                    	MOV	SI,DI			; save for offsets
 38666 000070EF BF[3E04]                	MOV	DI,RENBUF
 38667 000070F2 E83AFB                  	call	TransPathSet		; munge the paths
 38668 000070F5 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 38669 000070FA 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 38670 000070FF 5E                      	pop	si
 38671 00007100 1F                      	pop	ds
 38672 00007101 59                      	pop	cx			; get back source and possible CX arg
 38673                                  epjc2:	
 38674 00007102 72E0                    	JC	short ChModErr		; get old error
 38675 00007104 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 38676 0000710A 75D8                    	JNZ	short NotFound
 38677 0000710C 51                      	push	cx			; Save possible CX arg
 38678 0000710D BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38679 00007110 E81CFB                  	call	TransPathSet		; wham
 38680 00007113 59                      	pop	cx
 38681                                  	;JC	short epjc2
 38682                                  	; 15/03/2024
 38683 00007114 72CE                    	jc	short ChModErr
 38684                                  	
 38685 00007116 16                      	push	ss
 38686 00007117 1F                      	pop	ds
 38687 00007118 803E[7A05]FF            	CMP	byte [CMETA],-1
 38688 0000711D 72C5                    	JB	short NotFound
 38689                                  
 38690                                  	; MSDOS 6.0
 38691 0000711F FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 38692 00007123 FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 38693 00007127 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 38694 0000712A 16                      	PUSH	SS			   ;AN000;;MS.
 38695 0000712B 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 38696 0000712C 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 38697                                  rnloop: 				   ;AN000;
 38698 0000712E E874FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 38699 00007131 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 38700 00007133 E8F3A0                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 38701 00007136 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 38702 00007138 FEC0                    	INC	AL			   ;AN000;;MS.	next
 38703 0000713A EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 38704                                  rnerr:					   ;AN000;
 38705 0000713C 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 38706                                  	;error	error_current_directory    ;AN000;;MS.
 38707 0000713F B010                    	mov	al,error_current_directory
 38708                                  	;jmp	SYS_RET_ERR
 38709                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38710 00007141 EBA3                    	jmp	short UnlinkE
 38711                                  
 38712                                  dorn:
 38713                                  
 38714                                  ; 15/03/2024
 38715                                  %if 0					   ;AN000;
 38716                                  	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38717                                  	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38718                                  %endif
 38719 00007143 16                      	push	ss
 38720 00007144 1F                      	pop	ds
 38721                                  
 38722                                  ; 15/03/2024
 38723                                  %if 1
 38724 00007145 8F06[A405]              	pop	word [THISCDS+2]
 38725 00007149 8F06[A205]              	pop	word [THISCDS]
 38726                                  %endif
 38727                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38728                                  	;mov	ch,16h
 38729 0000714D B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 38730                                  					; rename appropriate files
 38731 0000714F E8A500                  	call	SetAttrib
 38732 00007152 E819B6                  	call	DOS_RENAME		; do the deed
 38733 00007155 728F                    	JC	short UnlinkE 		; errors
 38734                                  
 38735                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38736                                  	;jmp	SYS_RET_OK
 38737 00007157 EB89                    	jmp	short UnlinkOk
 38738                                  
 38739                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38740                                  
 38741                                  ; 14/07/2018 - Retro DOS v3.0
 38742                                  ; MSDOS 3.3 (& MSDOS 6.0)
 38743                                  
 38744                                  ;Break <$CreateNewFile - Create a new directory entry>
 38745                                  ;----------------------------------------------------------------------------
 38746                                  ;   CreateNew - Create a new directory entry. Return a file handle if there
 38747                                  ;	was no previous directory entry, and fail if a directory entry with
 38748                                  ;	the same name existed previously.
 38749                                  ;
 38750                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 38751                                  ;		CX contains default file attributes
 38752                                  ;   Outputs:	Carry Clear:
 38753                                  ;		    AX has file handle opened for read/write
 38754                                  ;		Carry Set:
 38755                                  ;		    AX has error code
 38756                                  ;   Registers modified: All
 38757                                  ;----------------------------------------------------------------------------
 38758                                  
 38759                                  _$CreateNewFile:
 38760 00007159 51                      	push	cx			; Save attributes on stack
 38761 0000715A B9[7D2B]                	MOV	CX,DOS_Create_New	; routine to call
 38762 0000715D E916FF                  	JMP	AccessSet		; use good ol' open
 38763                                  
 38764                                  ;**	BinToAscii - convert a number to a string.
 38765                                  ;----------------------------------------------------------------------------
 38766                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 38767                                  ;	This routine is used to generate temp file names so we don't spend
 38768                                  ;	the time and code needed for a true hex number, we just use
 38769                                  ;	A thorugh O.
 38770                                  ;
 38771                                  ;	ENTRY	(ax) = value
 38772                                  ;		(es:di) = destination
 38773                                  ;	EXIT	(es:di) updated by 4
 38774                                  ;	USES	cx, di, flags
 38775                                  ;----------------------------------------------------------------------------
 38776                                  
 38777                                  ; MSDOS 3.3
 38778                                  ;BinToAscii:
 38779                                  ;	mov     cx,4
 38780                                  ;bta5:
 38781                                  ;	push    cx
 38782                                  ;	mov     cl,4
 38783                                  ;	rol     ax,cl
 38784                                  ;	push    ax
 38785                                  ;	and     al,0Fh
 38786                                  ;	add     al,'0'
 38787                                  ;	cmp     al,'9'
 38788                                  ;	jbe     short bta6
 38789                                  ;	add     al,7
 38790                                  ;bta6: 
 38791                                  ;	stosb
 38792                                  ;	pop     ax
 38793                                  ;	pop     cx
 38794                                  ;	loop    bta5
 38795                                  ;	retn
 38796                                  
 38797                                  ; MSDOS 6.0
 38798                                  BinToAscii:
 38799 00007160 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 38800                                  bta5:	
 38801 00007163 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 38802 00007165 50                      	push	ax			; preserve remainder of digits
 38803 00007166 240F                    	AND	AL,0Fh			; grab low nibble
 38804 00007168 0441                    	ADD	AL,'A'			; turn into ascii
 38805 0000716A AA                      	STOSB				; drop in the character
 38806 0000716B 58                      	pop	ax			; (ax) = shifted number
 38807 0000716C FECD                    	dec	ch
 38808 0000716E 75F3                    	jnz	short bta5		; process 4 digits
 38809 00007170 C3                      	retn
 38810                                  
 38811                                  ;Break	<$CreateTempFile - create a unique name>
 38812                                  ;----------------------------------------------------------------------------
 38813                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 38814                                  ;	Method used is to get the current time, convert to a name and attempt
 38815                                  ;	a create new. Repeat until create new succeeds.
 38816                                  ;
 38817                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 38818                                  ;		CX  contains default attributes
 38819                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 38820                                  ;		AX has handle
 38821                                  ;   Registers modified: all
 38822                                  ;----------------------------------------------------------------------------
 38823                                  
 38824                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38825                                  
 38826                                  _$CreateTempFile:
 38827                                  	;Enter
 38828 00007171 55                      	push	bp
 38829 00007172 89E5                    	mov	bp,sp
 38830                                  
 38831                                  	;LocalVar  EndPtr,DWORD
 38832                                  	;LocalVar  FilPtr,DWORD
 38833                                  	;LocalVar  Attr,WORD
 38834                                  
 38835 00007174 83EC0A                  	sub	sp,10
 38836                                  
 38837                                  	;test	cx,0FFD8h
 38838 00007177 F7C1D8FF                	test	CX,~attr_changeable
 38839 0000717B 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 38840                                  
 38841                                  ; We need this "hook" here to detect these cases (like user sets one both of
 38842                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 38843                                  ; below. The code loops on error_access_denied, but if one of the non
 38844                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 38845                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 38846                                  ; need to detect these cases before getting to the loop.
 38847                                  
 38848                                  	;mov	ax, 5
 38849 0000717D B80500                  	MOV	AX,error_access_denied
 38850 00007180 EB69                    	JMP	SHORT SETTMPERR
 38851                                  
 38852                                  OKatts:
 38853                                  	;MOV	attr,CX 		; save attribute
 38854 00007182 894EF6                  	mov     [bp-10],cx
 38855                                  	;MOV	FilPtrL,DX		; pointer to file
 38856 00007185 8956F8                  	mov	[bp-8],dx
 38857                                  	;MOV	FilPtrH,DS
 38858 00007188 8C5EFA                  	mov	[bp-6],ds
 38859                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 38860 0000718B 8C5EFE                  	mov	[bp-2],ds
 38861 0000718E 1E                      	PUSH	DS
 38862 0000718F 07                      	POP	ES			; destination for nul search
 38863 00007190 89D7                    	MOV	DI,DX
 38864 00007192 89F9                    	MOV	CX,DI
 38865 00007194 F7D9                    	NEG	CX			; number of bytes remaining in segment
 38866                                  	; MSDOS 6.0
 38867 00007196 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 38868 00007198 7501                    	JNZ	short okok		;AN000;MS. no
 38869                                  	;MOV	CX,-1			;AN000;MS.
 38870                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38871                                  	; 17/12/2022
 38872 0000719A 49                      	dec	cx  ; mov cx,-1
 38873                                  	;mov	cx,-1 ; 0FFFh
 38874                                  okok:					;AN000;
 38875 0000719B 31C0                    	XOR	AX,AX			;AN000;
 38876 0000719D F2AE                    	REPNZ	SCASB			;AN000;
 38877                                  					;AN000;
 38878 0000719F 4F                      	DEC	DI			; point back to the null
 38879 000071A0 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 38880 000071A4 E8A1DF                  	call	PATHCHRCMP		; Is it a path separator?
 38881 000071A7 7403                    	JZ	short SETENDPTR		; Yes
 38882                                  STOREPTH:
 38883 000071A9 B05C                    	MOV	AL,'\'
 38884 000071AB AA                      	STOSB				; Add a path separator (and INC DI)
 38885                                  SETENDPTR:
 38886                                  	;MOV	EndPtrL,DI		; pointer to the tail
 38887 000071AC 8856FC                  	mov	[bp-4],dl
 38888                                  CreateLoop:
 38889 000071AF 16                      	push	ss			; let ReadTime see variables
 38890 000071B0 1F                      	pop	ds
 38891 000071B1 55                      	push	bp
 38892 000071B2 E8BB99                  	call	READTIME		; go get time
 38893 000071B5 5D                      	pop	bp
 38894                                  ;
 38895                                  ; Time is in CX:DX. Go drop it into the string.
 38896                                  ;
 38897                                  	;les	di,EndPtr		; point to the string
 38898 000071B6 C47EFC                  	les	di,[BP-4]
 38899 000071B9 89C8                    	mov	ax,cx
 38900 000071BB E8A2FF                  	call	BinToAscii		; store upper word
 38901 000071BE 89D0                    	mov	ax,dx
 38902 000071C0 E89DFF                  	call	BinToAscii		; store lower word
 38903 000071C3 30C0                    	xor	al,al
 38904 000071C5 AA                      	STOSB				; nul terminate
 38905                                  	;LDS	DX,FilPtr		; get name
 38906 000071C6 C556F8                  	lds	dx,[bp-8]
 38907                                  	;MOV	CX,Attr 		; get attr
 38908 000071C9 8B4EF6                  	mov	cx,[bp-10]
 38909 000071CC 55                      	push	bp
 38910 000071CD E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 38911 000071D0 5D                      	pop	bp
 38912 000071D1 7319                    	JNC	short CreateDone	; failed, go try again
 38913                                  
 38914                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 38915                                  ; error and figure out what to do.
 38916                                  
 38917                                  	;; MSDOS 3.3			; M049 - start
 38918                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 38919                                  ;;	cmp	al,error_file_exists
 38920                                  ;;	jz	short CreateLoop	; file existed => try with new name
 38921                                  ;;	cmp	al,error_access_denied
 38922                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 38923                                  
 38924                                  	; MSDOS 6.0
 38925                                  	;cmp	al,50h
 38926 000071D3 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 38927 000071D5 74D8                    	JZ	short CreateLoop	; Y: try again
 38928                                  	;cmp	al,5
 38929 000071D7 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 38930 000071D9 7510                    	JNZ	short SETTMPERR		; N: Error out
 38931                                  					; Y: Check to see if we got this due
 38932                                  					;    to the network drive. Note that
 38933                                  					;    the redir will set the exterr
 38934                                  					;    to error_cannot_make if this is 
 38935                                  					;    so. 
 38936 000071DB 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 38937                                  					; See if it's REALLY an att mismatch
 38938 000071E1 7408                    	je	short SETTMPERR		; no, network error, stop
 38939                                  ;M070
 38940                                  ; If the user failed on an I24, we do not want to try again
 38941                                  ;
 38942 000071E3 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 38943                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 38944                                  
 38945                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 38946                                  	; 17/12/2022
 38947 000071E9 75C4                    	jne	short CreateLoop ; 10/06/2019 
 38948                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38949                                  	;jz	short SETTMPERR
 38950                                  	;jmp	short CreateLoop
 38951                                  
 38952                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 38953                                  					; M049 - end
 38954                                  SETTMPERR:
 38955 000071EB F9                      	STC
 38956                                  CreateDone:
 38957                                  	;Leave
 38958 000071EC 89EC                    	mov	sp,bp
 38959 000071EE 5D                      	pop	bp
 38960 000071EF 7203                    	JC	short CreateFail
 38961 000071F1 E99094                  	jmp	SYS_RET_OK		; success!
 38962                                  CreateFail:
 38963 000071F4 E99694                  	jmp	SYS_RET_ERR
 38964                                  
 38965                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 38966                                  ;   (CH) or to the value in CL if the current system call is through
 38967                                  ;   serverdoscall.
 38968                                  ;
 38969                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 38970                                  ;		fSharing == TRUE => set sattrib to CL
 38971                                  ;   Outputs:	none
 38972                                  ;   Registers changed:	CX
 38973                                  
 38974                                  SetAttrib:
 38975 000071F7 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 38976 000071FD 7502                    	jnz	short Set
 38977 000071FF 88E9                    	mov	cl,ch
 38978                                  Set:
 38979 00007201 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 38980 00007206 C3                      	retn
 38981                                  
 38982                                  ;----------------------------------------------------------------------------
 38983                                  	; 16/03/2024 - Retro DOS v4.0
 38984                                  ext_inval2:
 38985                                  	;mov	al,1
 38986 00007207 B001                    	mov	al,error_invalid_function
 38987                                  eo_err:
 38988                                  	;jmp	SYS_RET_ERR
 38989 00007209 EBE9                    	jmp	short CreateFail
 38990                                  
 38991                                  ; 14/07/2018 - Retro DOS v3.0
 38992                                  ; MSDOS 6.0
 38993                                  
 38994                                  ; 29/04/2019 - Retro DOS v4.0
 38995                                  
 38996                                  ;Break	<Extended_Open- Extended open the file>
 38997                                  ;----------------------------------------------------------------------------
 38998                                  ; Input: AL= 0 reserved  AH=6CH
 38999                                  ;	 BX= mode
 39000                                  ;	 CL= create attribute  CH=search attribute (from server)
 39001                                  ;	 DX= flag
 39002                                  ;	 DS:SI = file name
 39003                                  ;	 ES:DI = parm list
 39004                                  ;			   DD  SET EA list (-1) null
 39005                                  ;			   DW  n  parameters
 39006                                  ;			   DB  type (TTTTTTLL)
 39007                                  ;			   DW  IOMODE
 39008                                  ; Function: Extended Open
 39009                                  ; Output: carry clear
 39010                                  ;		     AX= handle
 39011                                  ;		     CX=1 file opened
 39012                                  ;			2 file created/opened
 39013                                  ;			3 file replaced/opened
 39014                                  ;	  carry set: AX has error code
 39015                                  ;----------------------------------------------------------------------------
 39016                                  
 39017                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39018                                  _$Extended_Open:			  ;AN000;
 39019                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 39020 0000720B 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 39021 00007210 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 39022                                  	; 17/12/2022
 39023 00007217 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 39024                                  	;;test	dx,0FE00h
 39025                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0 ?
 39026 0000721A 75EB                    	JNZ	short ext_inval2	  ;AN000;EO. no
 39027 0000721C 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 39028 0000721E 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 39029 00007221 74E4                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 39030                                  	;and	dl,0Fh
 39031 00007223 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 39032 00007226 80FA02                  	CMP	DL,2			  ;AN000;EO, > 2
 39033 00007229 77DC                    	JA	short ext_inval2	  ;AN000;EO. yes, error
 39034                                  	;and	ah,0F0h
 39035 0000722B 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 39036 0000722E 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 39037 00007231 77D4                    	JA	short ext_inval2	  ;AN000;EO. yes, error
 39038                                  
 39039 00007233 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 39040 00007238 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 39041 0000723D 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 39042 00007242 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 39043 00007247 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 39044 0000724C 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 39045 00007251 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 39046 00007256 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 39047 0000725B 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 39048 0000725D 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 39049                                  ; 16/03/2024
 39050                                  %if 0
 39051                                  	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 39052                                  ext_inval2:				  ;AN000;;EO.
 39053                                  	;mov	al,1
 39054                                  	mov	al,error_invalid_function ;AN000;EO.. invalid function
 39055                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39056                                  eo_err:
 39057                                  	;jmp	SYS_RET_ERR
 39058                                  	jmp	short CreateFail
 39059                                  %endif
 39060                                  
 39061                                  ; 16/03/2024
 39062                                  %if 0
 39063                                  ext_inval_parm:				  ;AN000;EO..
 39064                                  	POP	CX			  ;AN000;EO..  pop up satck
 39065                                  	POP	SI			  ;AN000;EO..
 39066                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 39067                                  	;mov	al,13
 39068                                  	mov	al,error_invalid_data
 39069                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39070                                  	;;jmp	SYS_RET_ERR
 39071                                  	;jmp	short eo_err
 39072                                  	; 17/12/2022
 39073                                  	jmp	short CreateFail
 39074                                  %endif
 39075                                  	; 17/12/2022	
 39076                                  ;error_return:				  ;AN000;EO.
 39077                                  ;	retn				  ;AN000;EO.. return with error
 39078                                  
 39079                                  goopen2:				  ;AN000;
 39080                                  	; 17/12/2022
 39081                                  	;test	bh,20h				 
 39082 0000725F F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 39083                                  	;;test	bx,2000h
 39084                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 39085 00007262 7406                    	JZ	short goopen		  ;AN000;EO.. no
 39086                                  	;or	byte [SS:EXTOPEN_ON],2
 39087 00007264 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 39088                                  goopen:					  ;AN000;
 39089                                  	;or	byte [SS:EXTOPEN_ON],1 
 39090 0000726A 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 39091                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 39092                                  	; 18/12/2022
 39093 00007270 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 39094                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 39095 00007276 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 39096 0000727C 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 39097 0000727E E8D8FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 39098 00007281 723F                    	JC	short error_return	  ;AN000;;EO. error
 39099                                  
 39100 00007283 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39101 00007289 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39102                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39103 0000728B 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. created/opened;smr;SS Override
 39104 00007292 EB7F                    	JMP	short setXAttr ; 16/03/2024 ;AN000;;EO. set XAs
 39105                                  
 39106                                  	; 17/12/2022
 39107                                  ;ok_return2:
 39108                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 39109                                  
 39110                                  chknext:
 39111                                  	; 17/12/2022
 39112 00007294 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 39113                                  	;;test	word [SS:EXTOPEN_FLAG],1
 39114                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 39115 0000729A 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 39116 0000729C E8D3FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 39117 0000729F 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 39118 000072A1 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39119 000072A7 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39120 000072A9 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. presume create/open;smr;SS Override
 39121 000072B0 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 39122 000072B6 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 39123 000072B8 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 39124 000072BF EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39125                                  error_return2:
 39126 000072C1 F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 39127                                  error_return:	 ; 17/12/2022
 39128 000072C2 C3                      	retn				  ;AN000;;EO. return with error
 39129                                  
 39130                                  	; 17/12/2022
 39131                                  ok_return:
 39132                                  ok_return2:
 39133 000072C3 E9BE93                  	jmp	SYS_RET_OK
 39134                                  
 39135                                  exist_open:				  ;AN000;
 39136 000072C6 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 39137 000072CC 7402                    	jz	short noserver		  ;AN000;;EO. no
 39138 000072CE 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 39139                                  noserver:
 39140 000072D0 E8CAFC                  	call	_$Open2			  ;AN000;;EO. do open
 39141 000072D3 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 39142 000072D5 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 39143 000072DB 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 39144                                  local_extopen:
 39145                                  	;cmp	ax,2
 39146 000072DD 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 39147 000072E0 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 39148                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 39149                                  	; 17/12/2022
 39150 000072E2 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 39151                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 39152                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 39153                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 39154                                  	; 17/12/2022
 39155 000072E8 7446                    	jz	short extexit ; 10/06/2019
 39156                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39157                                  	;jnz	short do_creat
 39158                                  	;jmp	short extexit
 39159                                  do_creat:
 39160 000072EA 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 39161 000072EF 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 39162 000072F4 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 39163 000072F6 E879FD                  	call	_$CREAT			  ;AN000;;EO. do create
 39164 000072F9 7235                    	JC	short extexit 		  ;AN000;;EO. error
 39165                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39166 000072FB 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39167                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 39168 00007302 EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39169                                  
 39170                                  ext_ok:
 39171 00007304 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 39172 0000730A 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 39173                                  	;mov	word [SS:EXTOPEN_FLAG],1
 39174 0000730C 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 39175                                  setXAttr:
 39176                                  	; 29/04/2019
 39177 00007313 50                      	push	ax
 39178 00007314 E8B391                  	call	Get_User_Stack		  ;AN000;;EO.
 39179 00007317 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 39180                                  	;mov	[si+4],ax
 39181 0000731B 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 39182 0000731E 58                      	pop	ax			  ;AN000;;EO.
 39183 0000731F 8904                    	mov	[si],ax
 39184                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 39185                                  	; 17/12/2022
 39186 00007321 EBA0                    	jmp	short ok_return
 39187                                  ;ok_return:				  ;AN000;
 39188                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 39189                                  
 39190                                  ; 16/03/2024
 39191                                  %if 0
 39192                                  extexit2:				  ;AN000; ERROR RECOVERY
 39193                                  	POP	BX			  ;AN000;EO. close the handle
 39194                                  	PUSH	AX			  ;AN000;EO. save error code from set XA
 39195                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 39196                                  	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39197                                  					  ;AN000;EO. from create;smr;SS Override
 39198                                  	JNZ	short justopen		  ;AN000;EO.
 39199                                  	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 39200                                  	LDS	DX,[SI]			  ;AN000;EO.
 39201                                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 39202                                  	JMP	SHORT reserror		  ;AN000;EO.
 39203                                  
 39204                                  justopen:				  ;AN000;
 39205                                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 39206                                  reserror:				  ;AN000;
 39207                                  	POP	AX			  ;AN000;EO. restore error code from set XA
 39208                                  
 39209                                  	JMP	SHORT extexit		  ;AN000;EO.
 39210                                  
 39211                                  ext_file_unfound:			  ;AN000;
 39212                                  	;mov	ax,2
 39213                                  	MOV	AX,error_file_not_found   ;AN000;EO.
 39214                                  	JMP	SHORT extexit		  ;AN000;EO.
 39215                                  ext_inval:				  ;AN000;
 39216                                  	;mov	ax,1
 39217                                  	MOV	AX,error_invalid_function ;AN000;EO.
 39218                                  
 39219                                  lockoperr:	; 17/12/2022
 39220                                  extexit:
 39221                                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 39222                                  
 39223                                  %endif
 39224                                  
 39225                                  ;============================================================================
 39226                                  ; LOCK.ASM, MSDOS 6.0, 1991
 39227                                  ;============================================================================
 39228                                  ; 14/07/2018 - Retro DOS v3.0
 39229                                  ; 22/05/2019 - Retro DOS v4.0
 39230                                  
 39231                                  ;BREAK <$LockOper - Lock Calls>
 39232                                  ;----------------------------------------------------------------------------
 39233                                  ;
 39234                                  ;   Assembler usage:
 39235                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 39236                                  ;	    MOV     CX, OffsetHigh
 39237                                  ;	    MOV     DX, OffsetLow
 39238                                  ;	    MOV     SI, LengthHigh
 39239                                  ;	    MOV     DI, LengthLow
 39240                                  ;	    MOV     AH, LockOper
 39241                                  ;	    MOV     AL, Request
 39242                                  ;	    INT     21h
 39243                                  ;
 39244                                  ;   Error returns:
 39245                                  ;	    AX = error_invalid_handle
 39246                                  ;	       = error_invalid_function
 39247                                  ;	       = error_lock_violation
 39248                                  ;
 39249                                  ;   Assembler usage:
 39250                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 39251                                  ;
 39252                                  ;				    0? lock all
 39253                                  ;				    8? lock write
 39254                                  ;				    ?2 lock multiple
 39255                                  ;				    ?3 unlock multiple
 39256                                  ;				    ?4 lock/read
 39257                                  ;				    ?5 write/unlock
 39258                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 39259                                  ;	    MOV     BX, Handle
 39260                                  ;	    MOV     CX, count or size
 39261                                  ;	    LDS     DX, buffer
 39262                                  ;	    INT     21h
 39263                                  ;
 39264                                  ;   Error returns:
 39265                                  ;	    AX = error_invalid_handle
 39266                                  ;	       = error_invalid_function
 39267                                  ;	       = error_lock_violation
 39268                                  ;
 39269                                  ;----------------------------------------------------------------------------
 39270                                  
 39271                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39272                                  _$LockOper:
 39273 00007323 3C01                    	CMP	AL,1
 39274 00007325 770C                    	JA	short lock_bad_func
 39275                                  
 39276 00007327 57                      	PUSH	DI			       ; Save LengthLow
 39277 00007328 E803F4                  	call	SFFromHandle		       ; ES:DI -> SFT
 39278 0000732B 731E                    	JNC	short lock_do 		       ; have valid handle
 39279 0000732D 5F                      	POP	DI			       ; Clean stack
 39280                                  	;mov	al,6
 39281 0000732E B006                    	mov	al,error_invalid_handle
 39282                                  
 39283                                  	; 16/03/2024
 39284                                  extexit:
 39285                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39286                                  lockoperr:
 39287 00007330 E95A93                  	jmp	SYS_RET_ERR
 39288                                  	; 17/12/2022
 39289                                  	;jmp	short lockoperr ; jmp SYS_RET_ERR
 39290                                  
 39291                                  lock_bad_func:
 39292                                  	;mov	byte [ss:EXTERR_LOCUS],1
 39293 00007333 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 39294                                  	;mov	al,1
 39295 00007339 B001                    	mov	al,error_invalid_function
 39296                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39297                                  lockoperrj:
 39298                                  	;jmp	SYS_RET_ERR
 39299 0000733B EBF3                    	jmp	short lockoperr
 39300                                  
 39301                                  	; 22/05/2019 - Retro DOS v4.0
 39302                                  
 39303                                  	; MSDOS 6.0 
 39304                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 39305                                  ; Dead code deleted, MD, 23 Mar 90
 39306                                  
 39307                                  ;lock_do:
 39308                                  ;	; MSDOS 3.3
 39309                                  ;	or	al,al
 39310                                  ;	pop	ax
 39311                                  ;	jz	short DOS_Lock
 39312                                  ;DOS_Unlock:
 39313                                  ;	;test	word [es:di+5],8000h
 39314                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39315                                  ;	JZ	short LOCAL_UNLOCK
 39316                                  ;	push    ax
 39317                                  ;	mov     ax,110Bh
 39318                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39319                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39320                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 39321                                  ;			; SFT DPB field -> DPB of drive containing file
 39322                                  ;			; Return: CF set error
 39323                                  ;	pop     bx
 39324                                  ;	jmp     short ValChk
 39325                                  ;
 39326                                  ;LOCAL_UNLOCK:
 39327                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39328                                  ;ValChk:
 39329                                  ;	JNC	short Lock_OK
 39330                                  ;lockerror:
 39331                                  ;	jmp	SYS_RET_ERR
 39332                                  ;Lock_OK:
 39333                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39334                                  ;	jmp	SYS_RET_OK
 39335                                  ;DOS_Lock:
 39336                                  ;	;test	word [es:di+5],8000h
 39337                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39338                                  ;	JZ	short LOCAL_LOCK
 39339                                  ;	;CallInstall NET_XLock,MultNET,10
 39340                                  ;	mov     ax, 110Ah
 39341                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39342                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39343                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 39344                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39345                                  ;			; Return: CF set error
 39346                                  ;	JMP	short ValChk
 39347                                  ;
 39348                                  ;LOCAL_LOCK:
 39349                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39350                                  ;	JMP	short ValChk
 39351                                  
 39352                                  ; 17/12/2022
 39353                                  LOCAL_UNLOCK:
 39354                                  	; MSDOS 3.3
 39355                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39356                                  	; MSDOS 6.0
 39357 0000733D FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39358                                  ValChk:
 39359 00007341 7302                    	JNC	short Lock_OK
 39360                                  lockerror:
 39361                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39362                                  	;;jmp	SYS_RET_ERR
 39363                                  	;jmp	short lockoperrj
 39364                                  	; 17/12/2022
 39365 00007343 EBEB                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 39366                                  Lock_OK:
 39367                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39368                                  	; 10/06/2019
 39369 00007345 A1[0C06]                	mov	ax,[TEMP_VAR]
 39370 00007348 E93993                  	jmp	SYS_RET_OK
 39371                                  
 39372                                  	; 22/05/2019
 39373                                  lock_do:
 39374                                  	; MSDOS 6.0
 39375 0000734B 89C3                    	MOV	BX,AX				; save AX
 39376 0000734D BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 39377                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39378                                  	;;mov	[bp+0],dx
 39379                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 39380                                  	; 15/12/2022
 39381 00007350 895600                  	mov	[bp],dx
 39382                                  	;mov	[bp+2],cx
 39383 00007353 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 39384 00007356 59                      	POP	CX				; get low length
 39385                                  	;mov	[bp+4],cx
 39386 00007357 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 39387                                  	;mov	[bp+6],si
 39388 0000735A 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 39389 0000735D B90100                  	MOV	CX,1				; one range
 39390                                  
 39391                                  ;	PUSH	CS				;
 39392                                  ;	POP	DS				; DS:DX points to
 39393                                  
 39394 00007360 16                      	push	ss
 39395 00007361 1F                      	pop	ds
 39396                                  
 39397 00007362 89EA                    	MOV	DX,BP				; Lock_Buffer
 39398                                  	;test	al,1
 39399 00007364 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 39400                                  	;JNZ	short DOS_Unlock		; yes
 39401                                  	;JMP	short DOS_Lock			; function 0
 39402                                  	; 17/12/2022
 39403                                  	; 10/06/2019
 39404 00007366 740E                    	jz	short DOS_Lock
 39405                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39406                                  	;JNZ	short DOS_Unlock
 39407                                  	;JMP	short DOS_Lock
 39408                                  
 39409                                  DOS_Unlock:
 39410                                  	;;test	word [es:di+5],8000h
 39411                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39412 00007368 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39413 0000736D 74CE                    	JZ	short LOCAL_UNLOCK
 39414                                  
 39415                                  lock_unlock: ; 22/05/2019
 39416                                  	
 39417                                  	;CallInstall Net_Xlock,MultNET,10
 39418                                  	
 39419                                  	; MSDOS 3.3
 39420                                  	;mov     ax,110Bh
 39421                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39422                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39423                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 39424                                  			; SFT DPB field -> DPB of drive containing file
 39425                                  			; Return: CF set error
 39426                                  	; MSDOS 6.0
 39427 0000736F B80A11                  	mov     ax,110Ah
 39428 00007372 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39429                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39430                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39431                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39432                                  			; Return: CF set error
 39433                                  
 39434 00007374 EBCB                    	JMP	SHORT ValChk
 39435                                  
 39436                                  ; 17/12/2022
 39437                                  %if 0
 39438                                  LOCAL_UNLOCK:
 39439                                  	; MSDOS 3.3
 39440                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39441                                  	; MSDOS 6.0
 39442                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39443                                  ValChk:
 39444                                  	JNC	short Lock_OK
 39445                                  lockerror:
 39446                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39447                                  	;jmp	SYS_RET_ERR
 39448                                  	jmp	short lockoperrj
 39449                                  Lock_OK:
 39450                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39451                                  	; 10/06/2019
 39452                                  	mov	ax,[TEMP_VAR]
 39453                                  	jmp	SYS_RET_OK
 39454                                  %endif
 39455                                  
 39456                                  DOS_Lock:
 39457                                  	;;test	word [es:di+5],8000h
 39458                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39459 00007376 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39460 0000737B 7407                    	JZ	short LOCAL_LOCK
 39461                                  
 39462                                  	;CallInstall NET_XLock,MultNET,10
 39463                                  
 39464 0000737D B80A11                  	mov     ax,110Ah
 39465 00007380 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39466                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39467                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39468                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39469                                  			; Return: CF set error
 39470                                  
 39471 00007382 EBBD                    	JMP	short ValChk
 39472                                  
 39473                                  LOCAL_LOCK:
 39474                                  	; MSDOS 3.3
 39475                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39476                                  	; MSDOS 6.0
 39477 00007384 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39478                                  
 39479 00007388 EBB7                    	JMP	short ValChk
 39480                                  
 39481                                  ; 14/07/2018 - Retro DOS v3.0
 39482                                  ; LOCK_CHECK
 39483                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39484                                  
 39485                                  ;----------------------------------------------------------------------------
 39486                                  ; Inputs:
 39487                                  ;	Outputs of SETUP
 39488                                  ;	[USER_ID] Set
 39489                                  ;	[PROC_ID] Set
 39490                                  ; Function:
 39491                                  ;	Check for lock violations on local I/O
 39492                                  ;	Retries are attempted with sleeps in between
 39493                                  ; Outputs:
 39494                                  ;    Carry clear
 39495                                  ;	Operation is OK
 39496                                  ;    Carry set
 39497                                  ;	A lock violation detected
 39498                                  ; Outputs of SETUP preserved
 39499                                  ;----------------------------------------------------------------------------
 39500                                  
 39501                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39502                                  	; 22/05/2019 - Retro DOS v4.0
 39503                                  LOCK_CHECK:
 39504 0000738A 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 39505                                  LockRetry:
 39506 0000738E 53                      	push	bx		; save regs
 39507 0000738F 50                      	push	ax ; MSDOS 6.0
 39508                                  
 39509                                  	;MSDOS 3.3
 39510                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 39511                                  	;MSDOS 6.0
 39512 00007390 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 39513                                  
 39514 00007394 58                      	pop	ax ; MSDOS 6.0
 39515 00007395 5B                      	pop	bx		; restrore regs
 39516 00007396 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 39517                                  LockN:
 39518 00007398 E8E39E                  	call	Idle		; wait a while
 39519 0000739B 4B                      	DEC	BX		; remember a retry
 39520 0000739C 75F0                    	JNZ	short LockRetry	; more retries left...
 39521 0000739E F9                      	STC
 39522                                  lc_ret_label:
 39523 0000739F C3                      	retn
 39524                                  
 39525                                  ; 14/07/2018 - Retro DOS v3.0
 39526                                  ; LOCK_VIOLATION
 39527                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39528                                  
 39529                                  ;----------------------------------------------------------------------------
 39530                                  ; Inputs:
 39531                                  ;	[THISDPB] set
 39532                                  ;	[READOP] indicates whether error on read or write
 39533                                  ; Function:
 39534                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 39535                                  ; Outputs:
 39536                                  ;	Carry set if user says FAIL, causes error_lock_violation
 39537                                  ;	Carry clear if user wants a retry
 39538                                  ;
 39539                                  ; DS, ES, DI, CX preserved, others destroyed
 39540                                  ;----------------------------------------------------------------------------
 39541                                  
 39542                                  LOCK_VIOLATION:
 39543 000073A0 1E                      	PUSH	DS
 39544 000073A1 06                      	PUSH	ES
 39545 000073A2 57                      	PUSH	DI
 39546 000073A3 51                      	PUSH	CX
 39547                                  	;mov	ax,21h
 39548 000073A4 B82100                  	MOV	AX,error_lock_violation
 39549                                  	;mov	byte [ALLOWED],18h
 39550 000073A7 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39551 000073AC C42E[8A05]              	LES	BP,[THISDPB]
 39552 000073B0 BF0100                  	MOV	DI,1		; Fake some registers
 39553 000073B3 89F9                    	MOV	CX,DI
 39554                                  	;mov	dx,[es:bp+11]
 39555 000073B5 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 39556 000073B9 E8F6DF                  	call	HARDERR
 39557 000073BC 59                      	POP	CX
 39558 000073BD 5F                      	POP	DI
 39559 000073BE 07                      	POP	ES
 39560 000073BF 1F                      	POP	DS
 39561 000073C0 3C01                    	CMP	AL,1
 39562 000073C2 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 39563 000073C4 F9                      	STC
 39564 000073C5 C3                      	retn
 39565                                  
 39566                                  ; 14/07/2018 - Retro DOS v3.0
 39567                                  
 39568                                  ;----------------------------------------------------------------------------
 39569                                  
 39570                                  ;	do a retz to return error
 39571                                  
 39572                                  	; 22/05/2019 - Retro DOS v4.0
 39573                                  CheckShare:
 39574                                  	; MSDOS 3.3
 39575                                  	;cmp	byte [cs:fShare],0
 39576                                  	;retn
 39577                                  
 39578                                  	; MSDOS 6.0
 39579 000073C6 1E                      	push	ds			;smr;
 39580                                  	;getdseg <ds>			; ds -> dosdata
 39581 000073C7 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 39582 000073CC 803E[0303]00            	cmp	byte [fShare],0
 39583 000073D1 1F                      	pop	ds			;smr;
 39584 000073D2 C3                      	retn
 39585                                  	
 39586                                  ;============================================================================
 39587                                  ; SHARE.ASM, MSDOS 6.0, 1991
 39588                                  ;============================================================================
 39589                                  ; 14/07/2018 - Retro DOS v3.0
 39590                                  ; 22/05/2019 - Retro DOS v4.0
 39591                                  
 39592                                  ; SHARE_CHECK
 39593                                  ;----------------------------------------------------------------------------
 39594                                  ; Inputs:
 39595                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 39596                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 39597                                  ;       [WFP_START] has full path of name
 39598                                  ;       [USER_ID] Set
 39599                                  ;       [PROC_ID] Set
 39600                                  ; Function:
 39601                                  ;       Check for sharing violations on local file/device access
 39602                                  ; Outputs:
 39603                                  ;    Carry clear
 39604                                  ;       Sharing approved
 39605                                  ;    Carry set
 39606                                  ;       A sharing violation detected
 39607                                  ;           AX is error code
 39608                                  ; USES    ALL but DS
 39609                                  ;----------------------------------------------------------------------------
 39610                                  
 39611                                  	; 22/05/2019 - Retro DOS v4.0
 39612                                  SHARE_CHECK:
 39613                                  	; 26/07/2019
 39614 000073D3 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 39615                                  shchk_retn:
 39616 000073D7 C3                      	retn
 39617                                  
 39618                                  ; SHARE_VIOLATION
 39619                                  ;----------------------------------------------------------------------------
 39620                                  ; Inputs:
 39621                                  ;       [THISDPB] Set
 39622                                  ;       AX has error code
 39623                                  ; Function:
 39624                                  ;       Handle Sharing errors
 39625                                  ; Outputs:
 39626                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 39627                                  ;       Carry clear if user wants a retry
 39628                                  ;
 39629                                  ; DS, ES, DI preserved, others destroyed
 39630                                  ;----------------------------------------------------------------------------
 39631                                  
 39632                                  SHARE_VIOLATION:
 39633 000073D8 1E                      	PUSH    DS
 39634 000073D9 06                      	PUSH	ES
 39635 000073DA 57                      	PUSH    DI
 39636 000073DB C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 39637                                  	;mov	byte [ALLOWED],18h
 39638 000073E0 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39639 000073E5 C42E[8A05]              	LES     BP,[THISDPB]
 39640 000073E9 BF0100                  	MOV     DI,1			; Fake some registers
 39641 000073EC 89F9                    	MOV     CX,DI
 39642                                  	;mov	dx,[es:bp+17]
 39643 000073EE 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 39644 000073F2 E8BDDF                  	call	HARDERR
 39645 000073F5 5F                      	POP     DI
 39646 000073F6 07                      	POP	ES
 39647 000073F7 1F                      	POP     DS
 39648 000073F8 3C01                    	CMP     AL,1
 39649 000073FA 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 39650 000073FC F9                      	STC
 39651 000073FD C3                      	retn
 39652                                  
 39653                                  ;----------------------------------------------------------------------------
 39654                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 39655                                  ;       NOT perform a close, it merely asserts that the sharing information
 39656                                  ;       for the SFT/UID/PID may be safely released.
 39657                                  ;
 39658                                  ;   Inputs:     ES:DI points to an SFT
 39659                                  ;   Outputs:    None
 39660                                  ;   Registers modified: all except DS,ES,DI
 39661                                  ;----------------------------------------------------------------------------
 39662                                  
 39663                                  ShareEnd:
 39664                                  	; 26/07/2019
 39665 000073FE FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 39666 00007402 C3                      	retn
 39667                                  
 39668                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 39669                                  ;----------------------------------------------------------------------------
 39670                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 39671                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 39672                                  ;
 39673                                  ;   Inputs:     ThisSFT points to the SFT
 39674                                  ;               WFP_Start points to the WFP
 39675                                  ;   Outputs:    Carry clear => successful entry
 39676                                  ;               Carry set => failed system call
 39677                                  ;   Registers modified: all
 39678                                  ;----------------------------------------------------------------------------
 39679                                  
 39680                                  ShareEnter:
 39681 00007403 51                      	push	cx
 39682                                  retry:
 39683 00007404 8B0E[1A00]              	mov     cx,[RetryCount]
 39684                                  attempt:
 39685 00007408 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 39686 0000740C 31C0                    	XOR     AX,AX
 39687                                   	;mov	[es:di+51],ax
 39688 0000740E 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 39689 00007412 51                      	push	cx
 39690 00007413 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 39691 00007416 59                      	pop	cx
 39692 00007417 730A                    	jnc	short done		; success, let the user see this
 39693 00007419 E8629E                  	call	Idle                    ; wait a while
 39694 0000741C E2EA                    	loop    attempt                 ; go back for another attempt
 39695 0000741E E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 39696 00007421 73E1                    	jnc	short retry		; user said to retry, go do it
 39697                                  done:
 39698 00007423 59                      	pop	cx
 39699 00007424 C3                      	retn
 39700                                  
 39701                                  ;============================================================================
 39702                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 39703                                  ;============================================================================
 39704                                  ; 29/04/2019 - Retro DOS 4.0
 39705                                  
 39706                                  ;** EXEPATCH.ASM 
 39707                                  ;----------------------------------------------------------------------------
 39708                                  ;	Contains the foll:
 39709                                  ;
 39710                                  ;		- code to find and overlay buggy unpack code
 39711                                  ;		- new code to be overlayed on buggy unpack code 
 39712                                  ;		- old code sequence to identify buggy unpack code
 39713                                  ;
 39714                                  ;	Revision history:
 39715                                  ;
 39716                                  ;		Created: 5/14/90
 39717                                  ;----------------------------------------------------------------------------
 39718                                  
 39719                                  ;----------------------------------------------------------------------------
 39720                                  ;
 39721                                  ; M020 : Fix for rational bug - for details see routine header
 39722                                  ; M028 : 4b04 implementation
 39723                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 39724                                  ; M032 : set turnoff bit only if DOS in HMA.
 39725                                  ; M033 : if IP < 2 then not exepacked.
 39726                                  ; M046 : support for a 4th version of exepacked files.
 39727                                  ; M068 : support for copy protected apps.
 39728                                  ; M071 : use A20OFF_COUNT of 10.
 39729                                  ;
 39730                                  ;----------------------------------------------------------------------------
 39731                                  
 39732                                  PATCH1_COM_OFFSET	EQU	06CH
 39733                                  PATCH1_OFFSET		EQU	028H
 39734                                  PATCH1_CHKSUM		EQU	0EF4EH
 39735                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 39736                                  
 39737                                  PATCH2_COM_OFFSET	EQU	076H
 39738                                  PATCH2_OFFSET		EQU	032H
 39739                                  
 39740                                  	; The strings that start at offset 076h have two possible 
 39741                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 39742                                  
 39743                                  PATCH2_CHKSUM		EQU	78B2H
 39744                                  CHKSUM2_LEN		EQU	119H/2
 39745                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 39746                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 39747                                  
 39748                                  PATCH3_COM_OFFSET	EQU	074H
 39749                                  PATCH3_OFFSET		EQU	032H
 39750                                  PATCH3_CHKSUM		EQU	4EDEH
 39751                                  CHKSUM3_LEN		EQU	117H/2
 39752                                  
 39753                                  ;**	Data structure passed for ExecReady call
 39754                                  ;
 39755                                  ;struc ERStruc
 39756                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 39757                                  ; .ER_Flags:	resw	1
 39758                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 39759                                  ; .ER_PSP:	resw	1	; PSP of the program
 39760                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 39761                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 39762                                  ; .size:
 39763                                  ;endstruc
 39764                                  
 39765                                  ;DOSCODE SEGMENT
 39766                                  
 39767                                  	; 22/05/2019 - Retro DOS v4.0
 39768                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 39769                                  
 39770                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39771                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 39772                                  
 39773                                  ; M028 - BEGIN
 39774                                  
 39775                                  ;--------------------------------------------------------------------------
 39776                                  ;
 39777                                  ;	Procedure Name		: ExecReady
 39778                                  ;
 39779                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 39780                                  ;
 39781                                  ;--------------------------------------------------------------------------
 39782                                  
 39783                                  ExecReady:
 39784 00007425 89D6                    	mov	si,dx			; move the pointer into a friendly one
 39785                                  	;;test	word [si+2],1
 39786                                  	; 17/12/2022
 39787 00007427 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39788                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 39789 0000742B 7413                    	jz	short er_setver		; only setver for .COM files
 39790                                  
 39791                                  	;mov	ax,[si+8]
 39792 0000742D 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 39793 00007430 83C010                  	add	ax,10h
 39794 00007433 8EC0                    	mov	es,ax
 39795                                  
 39796                                  	;mov	cx,[si+10]
 39797 00007435 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 39798                                  	;mov	cx,[si+12]
 39799 00007438 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 39800                                  
 39801 0000743B 36FF16[1212]            	call	[ss:FixExePatch]
 39802                                  	
 39803                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39804                                  	;call	[ss:Rational386PatchPtr]
 39805                                  
 39806                                  er_setver:
 39807                                  	;;test	word [si+2],2		; Q: is this an overlay
 39808                                  	; 17/12/2022
 39809 00007440 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 39810                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 39811 00007444 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 39812                                  					; N: set up lie version first
 39813 00007446 1E                      	push	ds
 39814 00007447 56                      	push	si
 39815                                  	;lds	si,[si+4]
 39816 00007448 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 39817 0000744B E8A5ED                  	call	Scan_Execname1
 39818 0000744E E8B6ED                  	call	Scan_Special_Entries
 39819 00007451 5E                      	pop	si
 39820 00007452 1F                      	pop	ds
 39821                                  	;mov	es,[si+8]
 39822 00007453 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 39823 00007456 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 39824 0000745A 26A34000                	mov	[es:PDB.Version],ax
 39825                                  
 39826                                  er_chkdoshi:
 39827 0000745E 36803E[1112]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 39828 00007464 741F                    	je	short er_done		; M032: N: done
 39829                                  
 39830                                  					; M068 - Start
 39831                                  	;mov	ax,[si+8]
 39832 00007466 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 39833                                  
 39834                                  	;or	byte [ss:DOS_FLAG],4
 39835 00007469 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 39836                                  					; ah = 25 & ah= 49. See dossym.inc 
 39837                                  					; under TAG M003 & M009 for 
 39838                                  					; explanation
 39839                                  	;;test	word [si+2],1
 39840                                  	; 17/12/2022
 39841 0000746F F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39842                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 39843 00007473 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 39844                                  					;    a20off_psp and ret
 39845 00007475 1E                         	push	ds
 39846 00007476 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 39847 00007478 E85D03                  	call	IsCopyProt		; check if copy protected
 39848 0000747B 1F                      	pop	ds
 39849                                  
 39850                                  er_setA20:
 39851                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 39852                                  	; is non-zero at this point it indicates that the A20 is to be 
 39853                                  	; turned off for that many int 21 calls made by the app. In 
 39854                                  	; addition the A20 has to be turned off when we exit from this 
 39855                                  	; call. Hence the inc.
 39856                                  
 39857 0000747C 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 39858 00007481 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 39859                                  					; turned OFF.
 39860                                  er_done:				; M068 - End
 39861 00007485 31C0                    	xor	ax,ax
 39862 00007487 C3                      	retn
 39863                                  
 39864                                  ; M028 - END
 39865                                  
 39866                                  
 39867                                  ; 23/03/2024
 39868                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39869                                  %if 0
 39870                                  
 39871                                  ;----------------------------------------------------------------------------
 39872                                  ;
 39873                                  ; procedure : Rational386Patch
 39874                                  ;
 39875                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 39876                                  ; 386 registers (usually just the high word of 32 bit registers) during
 39877                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 39878                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 39879                                  ;
 39880                                  ; This routine applies patches to the Rational DOS Extender to work around
 39881                                  ; most of the register trashing bugs.
 39882                                  ;
 39883                                  ; Note that there are additional register trashing bugs not fixed by these
 39884                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 39885                                  ; may be modified on interrupts.
 39886                                  ;
 39887                                  ; There are two different Rational DOS Extender patchs in this module.
 39888                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 39889                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 39890                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 39891                                  ; or not.
 39892                                  ;
 39893                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 39894                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 39895                                  ; running in the HMA.
 39896                                  ;
 39897                                  ; This patch detection and replacement is based on an example supplied by
 39898                                  ; Ben Williams at Rational.
 39899                                  ;
 39900                                  ;----------------------------------------------------------------------------
 39901                                  
 39902                                  ; 22/05/2019 - Retro DOS v4.0
 39903                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 39904                                  
 39905                                  ;----------------------------------------------------------------------------
 39906                                  ;
 39907                                  ; INPUT : ES = segment where program got loaded
 39908                                  ;
 39909                                  ;----------------------------------------------------------------------------
 39910                                  
 39911                                  rpFind1:
 39912                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 39913                                  
 39914                                  rpFind1Len equ	$ - rpFind1
 39915                                  
 39916                                  ;	cli
 39917                                  ;	in	al, 21h
 39918                                  ;	pusha
 39919                                  ;	xor	ax, ax
 39920                                  ;	out	43h, al
 39921                                  ;	mov	dx, ...
 39922                                  
 39923                                  rpFind1a:
 39924                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 39925                                  
 39926                                  rpFind1aLen equ	$ - rpFind1a
 39927                                  
 39928                                  ;	mov	al, 0Eh
 39929                                  ;	out	37h, al
 39930                                  ;	xor	ax, ax
 39931                                  ;	out	0F2h, al
 39932                                  
 39933                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 39934                                  
 39935                                  rpFind2:
 39936                                  	db	0Fh, 20h, 0C0h
 39937                                  
 39938                                  rpFind2Len equ	$ - rpFind2
 39939                                  
 39940                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 39941                                  
 39942                                  rpFind3:
 39943                                  	db	0Fh, 22h, 0C0h, 0EAh
 39944                                  
 39945                                  rpFind3Len equ	$ - rpFind3
 39946                                  
 39947                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 39948                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 39949                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 39950                                  
 39951                                  ; note, there is no rpRepl1 string
 39952                                  
 39953                                  rpRepl2:
 39954                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 39955                                  
 39956                                  rpRepl2Len equ	$ - rpRepl2
 39957                                  
 39958                                  ;	push	eax
 39959                                  ;	push	cx
 39960                                  ;	mov	eax, cr0
 39961                                  
 39962                                  rpRepl3:
 39963                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 39964                                  
 39965                                  rpRepl3Len equ	$ - rpRepl3
 39966                                  
 39967                                  ;	mov	ss, bx
 39968                                  ;	pop	cx
 39969                                  ;	pop	eax
 39970                                  
 39971                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 39972                                  
 39973                                  rpFind4:
 39974                                  	db	93h, 58h, 8Bh, 0CCh
 39975                                  
 39976                                  rpFind4Len equ	$ - rpFind4
 39977                                  
 39978                                  ;	xchg	bx, ax
 39979                                  ;	pop	ax
 39980                                  ;	mov	cx, sp
 39981                                  
 39982                                  rpFind5:
 39983                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 39984                                  
 39985                                  rpFind5Len equ	$ - rpFind5
 39986                                  
 39987                                  ;	mov	ax, DE0Ch
 39988                                  ;	int	67h
 39989                                  ;	mov	sp, cx
 39990                                  ;	jmp	bx
 39991                                  
 39992                                  rpRepl4:
 39993                                  	db	93h, 58h, 8Bh, 0CCh
 39994                                  	db	02Eh, 066h, 0A3h
 39995                                  
 39996                                  rpRepl4o1Len equ $ - rpRepl4
 39997                                  
 39998                                  	db	00h, 00h
 39999                                  	db	02Eh, 066h, 89h, 36h
 40000                                  
 40001                                  rpRepl4o2Len equ $ - rpRepl4
 40002                                  
 40003                                  	db	00h, 00h
 40004                                  
 40005                                  rpRepl4Len equ	$ - rpRepl4
 40006                                  
 40007                                  ;	xchg	bx, ax
 40008                                  ;	pop	ax
 40009                                  ;	mov	cx, sp
 40010                                  ;	mov	dword ptr cs:[xxxx], eax
 40011                                  ;	mov	dword ptr cs:[xxxx], esi
 40012                                  
 40013                                  rpRepl5:
 40014                                  	db	8Bh, 0E1h
 40015                                  	db	2Eh, 66h, 0A1h
 40016                                  
 40017                                  rpRepl5o1Len equ $ - rpRepl5
 40018                                  
 40019                                  	db	00h, 00h
 40020                                  	db	2Eh, 66h, 8Bh, 36h
 40021                                  
 40022                                  rpRepl5o2Len equ $ - rpRepl5
 40023                                  
 40024                                  	db	00h, 00h
 40025                                  	db	0FFh, 0E3h
 40026                                  
 40027                                  rpRepl5Len equ	$ - rpRepl5
 40028                                  
 40029                                  ;	mov	sp, cx
 40030                                  ;	mov	eax, dword ptr cs:[xxxx]
 40031                                  ;	mov	esi, dword ptr cs:[xxxx]
 40032                                  ;	jmp	bx
 40033                                  
 40034                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 40035                                  
 40036                                  rpFind6:
 40037                                  	db	0FAh, 52h, 51h
 40038                                  
 40039                                  rpFind6Len equ	$ - rpFind6
 40040                                  
 40041                                  ;	cli
 40042                                  ;	push	dx
 40043                                  ;	push	cx
 40044                                  
 40045                                  rpFind7a:
 40046                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 40047                                  
 40048                                  rpFind7aLen equ	$ - rpFind7a
 40049                                  
 40050                                  ;	mov	ax, 0DE0Ch
 40051                                  ;	call	fword ptr es:[xxxx]
 40052                                  
 40053                                  rpFind7b:
 40054                                  	db	59h, 5Ah, 5Bh
 40055                                  
 40056                                  rpFind7bLen equ	$ - rpFind7b
 40057                                  
 40058                                  ;	pop	cx
 40059                                  ;	pop	dx
 40060                                  ;	pop	bx
 40061                                  
 40062                                  rpRepl6:
 40063                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 40064                                  
 40065                                  rpRepl6Len equ	$ - rpRepl6
 40066                                  
 40067                                  ;	cli
 40068                                  ;	push	eax
 40069                                  ;	push	ebx
 40070                                  ;	push	ecx
 40071                                  ;	push	edx
 40072                                  
 40073                                  rpRepl7:
 40074                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 40075                                  
 40076                                  rpRepl7Len equ	$ - rpRepl7
 40077                                  
 40078                                  ;	pop	edx
 40079                                  ;	pop	ecx
 40080                                  ;	pop	ebx
 40081                                  ;	pop	eax
 40082                                  ;	pop	bx
 40083                                  
 40084                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 40085                                  
 40086                                  rpFind8:
 40087                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 40088                                  
 40089                                  rpFind8Len equ	$ - rpFind8
 40090                                  
 40091                                  ;	pusha
 40092                                  ;	push	es
 40093                                  ;	push	ds
 40094                                  ;	mov	ax, dgroup	;jump back to here from replace8
 40095                                  ;	mov	ds, ax
 40096                                  
 40097                                  rpFind9 :
 40098                                  	db	1Fh, 07h, 61h
 40099                                  
 40100                                  rpFind9Len equ	$ - rpFind9
 40101                                  
 40102                                  ;	pop	ds
 40103                                  ;	pop	es
 40104                                  ;	popa
 40105                                  
 40106                                  rpRepl8:
 40107                                   	db	66h, 60h, 06h, 1Eh
 40108                                  
 40109                                  rpRepl8Len equ	$ - rpRepl8
 40110                                  
 40111                                  ;	pushad
 40112                                  ;	push	es
 40113                                  ;	push	ds
 40114                                  
 40115                                  rpRepl9:
 40116                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 40117                                  
 40118                                  rpRepl9Len equ	$ - rpRepl9
 40119                                  
 40120                                  ;	pop	ds
 40121                                  ;	pop	es
 40122                                  ;	popad
 40123                                  ;	retn			;no need to jmp back to main-line
 40124                                  
 40125                                  ;----------------------------------------------------------------------------
 40126                                  
 40127                                  struc SearchPair
 40128                                   .sp_off1: resw 1	; offset of 1st search string
 40129                                   .sp_len1: resw 1	; length of 1st search string
 40130                                   .sp_off2: resw 1	; 2nd string
 40131                                   .sp_len2: resw 1	; 2nd string
 40132                                   .sp_diff: resw 1	; max difference between offsets
 40133                                   .size:
 40134                                  endstruc
 40135                                  
 40136                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 40137                                  
 40138                                  rpBug1Strs:
 40139                                  	dw	rpFind2
 40140                                  	dw	rpFind2Len ; 3
 40141                                  	dw	rpFind3
 40142                                  	dw	rpFind3Len ; 4
 40143                                  	dw	20h
 40144                                  
 40145                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 40146                                  
 40147                                  rpBug2Strs:
 40148                                  	dw	rpFind4
 40149                                  	dw	rpFind4Len ; 4
 40150                                  	dw	rpFind5
 40151                                  	dw	rpFind5Len ; 9
 40152                                  	dw	80h
 40153                                  
 40154                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 40155                                  
 40156                                  rpBug3Strs:
 40157                                  	dw	rpFind6
 40158                                  	dw	rpFind6Len ; 3
 40159                                  	dw	rpFind7a
 40160                                  	dw	rpFind7aLen ; 7
 40161                                  	dw	80h
 40162                                  
 40163                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 40164                                  
 40165                                  rpBug4Strs:
 40166                                  	dw	rpFind8
 40167                                  	dw	4
 40168                                  	dw	rpFind9
 40169                                  	dw	rpFind9Len ; 3
 40170                                  	dw	80h
 40171                                  
 40172                                  ;----------------------------------------------------------------------------
 40173                                  
 40174                                  struc StackVars
 40175                                   .sv_wVersion:	resw 1		; Rational extender version #
 40176                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 40177                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 40178                                   .size:
 40179                                  endstruc
 40180                                  
 40181                                  ;----------------------------------------------------------------------------
 40182                                  
 40183                                  ; 22/05/2019 - Retro DOS v4.0
 40184                                  
 40185                                  Rational386Patch:
 40186                                  	; Do a few quick checks to see if this looks like a Rational
 40187                                  	; Extended application. Hopefully this will quickly weed out
 40188                                  	; most non Rational apps.
 40189                                  
 40190                                  	cmp	word [es:0],395		; version number goes here - versions
 40191                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 40192                                  
 40193                                  	cmp	word [es:0Ch],20h	; always has this value here
 40194                                  	jne	short rp3QuickOut
 40195                                  
 40196                                  	push	ax
 40197                                  
 40198                                  	mov	ax,18h 			; extender has 18h at
 40199                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 40200                                  	jne	short rp3QO_ax
 40201                                  	cmp	[es:28],ax
 40202                                  	jne	short rp3QO_ax
 40203                                  	cmp	[es:36],ax
 40204                                  	je	short rp3Maybe
 40205                                  rp3QO_ax:
 40206                                  	pop	ax
 40207                                  rp3QuickOut:
 40208                                  	retn
 40209                                  
 40210                                  ; It might be the rational extender, do more extensive checking
 40211                                  
 40212                                  rp3Maybe:
 40213                                  	cld
 40214                                  	push	bx			; note ax pushed above
 40215                                  	push	cx
 40216                                  	push	dx
 40217                                  	push	si
 40218                                  	push	di
 40219                                  	push	es
 40220                                  	push	ds			; we use all of them
 40221                                  	push	bp
 40222                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 40223                                  	mov	bp,sp
 40224                                  
 40225                                  	push	cs
 40226                                  	pop	ds
 40227                                  
 40228                                  	mov	ax,[es:0]		; save version #
 40229                                  	;mov	[bp+StackVars.sv_wVersion],ax
 40230                                  	mov	[bp],ax	
 40231                                  					; check that binary version # matches
 40232                                  	call	VerifyVersion		;   ascii string
 40233                                  	jne	short rp3Exit_j
 40234                                  
 40235                                  ; Looks like this is it, find where to put the patch code.  The
 40236                                  ; patch will be located on top of Rational code specific to 80286
 40237                                  ; processors, so these patchs MUST NOT be applied if running on
 40238                                  ; an 80286 system.
 40239                                  
 40240                                  	; Rational says the code to patch will never be beyond offset 46xxh
 40241                                  
 40242                                  	mov	cx,4500h		; force search len to 4700h (searches
 40243                                  	;mov	[bp+2],cx
 40244                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 40245                                  
 40246                                  	mov	es,[es:20h]		; es=code segment
 40247                                  
 40248                                  	mov	si,rpFind1		; string to find
 40249                                  	mov	dx,rpFind1Len ; 10	; length to match
 40250                                  	call	ScanCodeSeq		; look for code seq
 40251                                  	jz	short rpGotPatch
 40252                                  
 40253                                  ; According to Rational, some very old versions of the extender may not
 40254                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 40255                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 40256                                  
 40257                                  	mov	si,rpFind1a
 40258                                  	mov	dx,rpFind1aLen  ;8
 40259                                  	call	ScanCodeSeq
 40260                                  	jz	short rpGotPatch
 40261                                  
 40262                                  rp3Exit_j:
 40263                                  	jmp	rp3Exit
 40264                                  
 40265                                  ; Found the location to write patch code! DI = offset in code seg.
 40266                                  
 40267                                  rpGotPatch:
 40268                                  	;mov	[bp+4],di
 40269                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 40270                                  
 40271                                  ;----------------------------------------------------------------------------
 40272                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40273                                  
 40274                                  	;cmp	word [bp+0],381
 40275                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 40276                                  	cmp	word [bp],381
 40277                                  	jae	short rpBug2			;   < 3.81
 40278                                  
 40279                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 40280                                  	call	FindBadCode
 40281                                  	jc	short rpBug2
 40282                                  
 40283                                  ; si = rpFind2 offset, di = rpFind3 offset
 40284                                  
 40285                                  	push	di
 40286                                  	mov	di,si				; rpFind2 offset
 40287                                  	mov	dx,rpFind2Len ; 3
 40288                                  
 40289                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 40290                                  	jne	short rp_no_cx
 40291                                  
 40292                                  	dec	di				;   yes, gobble up push cx too
 40293                                  	inc	dx
 40294                                  rp_no_cx:
 40295                                  	mov	si,rpRepl2			; patch out find2 sequence
 40296                                  	mov	cx,rpRepl2Len  ; 6
 40297                                  	call	GenPatch
 40298                                  
 40299                                  	pop	di				; rpFind3 offset
 40300                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 40301                                  	jne	short rp_no_cx2
 40302                                  
 40303                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 40304                                  rp_no_cx2:
 40305                                  	;mov	ax,[bp+4]
 40306                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 40307                                  	;mov	[es:di+4],ax
 40308                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 40309                                  
 40310                                  	push	di				; save find3 offset
 40311                                  	mov	si,rpRepl3			; copy repl3 to patch area
 40312                                  	mov	cx,rpRepl3Len ; 5
 40313                                  	call	CopyPatch
 40314                                  
 40315                                  	pop	bx				; find3 offset
 40316                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 40317                                  	call	GenJump 			; jmp back from patch area
 40318                                  	;mov	[bp+4],di
 40319                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 40320                                  						;   area pointer
 40321                                  
 40322                                  ;----------------------------------------------------------------------------
 40323                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 40324                                  
 40325                                  rpBug2:
 40326                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 40327                                  	call	FindBadCode
 40328                                  	jc	short rpBug3
 40329                                  
 40330                                  ; si = rpFind4 offset, di = rpFind5 offset
 40331                                  
 40332                                  	;push	word [bp+4]
 40333                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 40334                                  						;   (where repl4 goes)
 40335                                  	push	di				; save find5 offset
 40336                                  
 40337                                  	mov	di,si
 40338                                  	mov	dx,rpFind4Len ; 4
 40339                                  	mov	si,rpRepl4
 40340                                  	mov	cx,rpRepl4Len ; 15
 40341                                  	call	GenPatch			; patch out find4 code
 40342                                  
 40343                                  	pop	di				; find5 offset
 40344                                  	add	di,5				; keep 5 bytes of find5 code
 40345                                  	;mov	bx,[bp+4]
 40346                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 40347                                  	push	bx				; save repl5 location
 40348                                  	call	GenJump
 40349                                  
 40350                                  	mov	si,rpRepl5			; copy repl5 code to patch
 40351                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 40352                                  	call	CopyPatch			;   so no need to jmp back to
 40353                                  						;   main-line code
 40354                                  
 40355                                  ; patches have been made, now update the patch code to store/load dwords just
 40356                                  ; after the code in the patch area
 40357                                  
 40358                                  	pop	di				; repl5 location
 40359                                  	pop	si				; repl4 location
 40360                                  
 40361                                  	;mov	ax,[bp+4]
 40362                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 40363                                  
 40364                                  	;mov	[es:si+7],ax
 40365                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 40366                                  	;mov	[es:di+5],ax
 40367                                  	mov	[es:di+rpRepl5o1Len],ax
 40368                                  	add	ax,4
 40369                                  	;mov	[es:si+0Dh],ax
 40370                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 40371                                  	;mov	[es:di+0Bh],ax
 40372                                  	mov	[es:di+rpRepl5o2Len],ax
 40373                                  
 40374                                  	;add	word [bp+4],8
 40375                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 40376                                  						; patch area
 40377                                  
 40378                                  ;----------------------------------------------------------------------------
 40379                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 40380                                  
 40381                                  rpBug3:
 40382                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 40383                                  	call	FindBadCode
 40384                                  	jc	short rpBug4
 40385                                  
 40386                                  	;add	di,9
 40387                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 40388                                  	push	si				;   code and locate find7b
 40389                                  	mov	si,rpFind7b			;   sequence
 40390                                  	mov	dx,rpFind7bLen ; 3
 40391                                  	call	ScanCodeSeq_di
 40392                                  	pop	si
 40393                                  	jnz	short rpBug4
 40394                                  
 40395                                  	push	di				; save find7b code offset
 40396                                  
 40397                                  	mov	di,si
 40398                                  	mov	dx,rpFind6Len ; 3
 40399                                  	mov	si,rpRepl6
 40400                                  	mov	cx,rpRepl6Len ; 9
 40401                                  	call	GenPatch			; patch out find6 code
 40402                                  
 40403                                  	pop	di
 40404                                  	mov	dx,rpFind7bLen ; 3
 40405                                  	mov	si,rpRepl7
 40406                                  	mov	cx,rpRepl7Len ; 9
 40407                                  	call	GenPatch			; patch out find7b code
 40408                                  
 40409                                  ;----------------------------------------------------------------------------
 40410                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 40411                                  
 40412                                  rpBug4:
 40413                                  	;cmp	word [bp+0],360
 40414                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 40415                                  	cmp	word [bp],360
 40416                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 40417                                  
 40418                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 40419                                  	call	FindBadCode
 40420                                  	jc	short rp3Exit
 40421                                  
 40422                                  	push	di				; save find9 code offset
 40423                                  
 40424                                  	mov	di,si
 40425                                  	mov	dx,3
 40426                                  	mov	si,rpRepl8
 40427                                  	mov	cx,rpRepl8Len ; 4
 40428                                  	call	GenPatch			; patch out find8 code
 40429                                  
 40430                                  	pop	di				; find9 offset
 40431                                  	;mov	bx,[bp+4]
 40432                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 40433                                  	call	GenJump 			;   patch area
 40434                                  
 40435                                  	mov	si,rpRepl9			; copy replacement code to
 40436                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 40437                                  	call	CopyPatch			;   so no jmp back to main-line
 40438                                  
 40439                                  rp3Exit:
 40440                                  	add	sp,StackVars.size
 40441                                  	pop	bp
 40442                                  	pop	ds
 40443                                  	pop	es
 40444                                  	pop	di
 40445                                  	pop	si
 40446                                  	pop	dx
 40447                                  	pop	cx
 40448                                  	pop	bx
 40449                                  	pop	ax
 40450                                  	retn
 40451                                  
 40452                                  ;----------------------------------------------------------------------------
 40453                                  ;
 40454                                  ; FindBadCode
 40455                                  ;
 40456                                  ; Searches Rational code segment looking for a pair of find strings (all
 40457                                  ; patches have at least two find strings).
 40458                                  ;
 40459                                  ; Entry:
 40460                                  ;	ES    = code segment to search
 40461                                  ;	DS:BX = search pair structure for this search
 40462                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 40463                                  ;
 40464                                  ; Exit:
 40465                                  ;	CY flag clear if both strings found, and
 40466                                  ;	SI    = offset in ES of 1st string
 40467                                  ;	DI    = offset in ES of 2nd string
 40468                                  ;	CY set if either string not found, or strings too far apart
 40469                                  ;
 40470                                  ; Used:
 40471                                  ;	CX
 40472                                  ;
 40473                                  ;----------------------------------------------------------------------------
 40474                                  
 40475                                  ;struc SearchPair
 40476                                  ; .sp_off1: resw 1	; offset of 1st search string
 40477                                  ; .sp_len1: resw 1	; length of 1st search string
 40478                                  ; .sp_off2: resw 1	; 2nd string
 40479                                  ; .sp_len2: resw 1	; 2nd string
 40480                                  ; .sp_diff: resw 1	; max difference between offsets
 40481                                  ; .size:
 40482                                  ;endstruc
 40483                                  
 40484                                  FindBadCode:
 40485                                  	;mov	cx,[bp+2]
 40486                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 40487                                  
 40488                                  	mov	si,[bx]	; mov si,[bx+0]
 40489                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 40490                                  	
 40491                                  	;mov	dx,[bx+2]
 40492                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 40493                                  	call	ScanCodeSeq
 40494                                  	jnz	short fbc_error		; done if 1st not found
 40495                                  
 40496                                  	push	di			; save 1st string offset
 40497                                  
 40498                                  	;mov	si,[bx+4]
 40499                                  	mov	si,[bx+SearchPair.sp_off2]
 40500                                  	;mov	dx,[bx+6]
 40501                                  	mov	dx,[bx+SearchPair.sp_len2]
 40502                                  	call	ScanCodeSeq_di		; don't change flags after this!
 40503                                  
 40504                                  	pop	si			; restore 1st string offset
 40505                                  	jnz	short fbc_error
 40506                                  
 40507                                  	mov	ax,di			; sanity check that
 40508                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 40509                                  	jc	short fbc_error
 40510                                  	;cmp	ax,[bx+8]
 40511                                  	cmp	ax,[bx+SearchPair.sp_diff]
 40512                                  	ja	short fbc_error
 40513                                  
 40514                                  	clc
 40515                                  	retn
 40516                                  
 40517                                  fbc_error:
 40518                                  	stc
 40519                                  	retn
 40520                                  
 40521                                  ;----------------------------------------------------------------------------
 40522                                  ;
 40523                                  ; GenPatch
 40524                                  ;
 40525                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 40526                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 40527                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 40528                                  ; code.
 40529                                  ;
 40530                                  ; Entry:
 40531                                  ;	ES:DI = start of buggy code to be patched
 40532                                  ;	DX    = length of buggy code to be patched
 40533                                  ;	DS:SI = replacement patch code
 40534                                  ;	CX    = length of replacement patch code
 40535                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40536                                  ;
 40537                                  ; Exit:
 40538                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 40539                                  ;
 40540                                  ; Used:
 40541                                  ;	AX, BX, SI, Flags
 40542                                  ;
 40543                                  ;----------------------------------------------------------------------------
 40544                                  
 40545                                  GenPatch:
 40546                                  	push	di			;save offset of buggy code
 40547                                  
 40548                                  	;mov	bx,[bp+4]
 40549                                  	mov	bx,[bp+StackVars.sv_pPatch]
 40550                                  					;jump from buggy code to patch area
 40551                                  	call	GenJump
 40552                                  
 40553                                  	call	CopyPatch		;copy replacement code to patch area
 40554                                  
 40555                                  	pop	bx			;offset of buggy code + buggy code
 40556                                  	add	bx,dx			;  length = return from patch offset
 40557                                  
 40558                                  	call	GenJump 		;jump from patch area back to main-
 40559                                  	;mov	[bp+4],di
 40560                                  	mov	[bp+StackVars.sv_pPatch],di
 40561                                  					;  line code, update patch pointer
 40562                                  	retn
 40563                                  
 40564                                  ;----------------------------------------------------------------------------
 40565                                  ;
 40566                                  ; CopyPatch
 40567                                  ;
 40568                                  ; Copies patch code to patch location.
 40569                                  ;
 40570                                  ; Entry:
 40571                                  ;	DS:SI = patch code to be copied
 40572                                  ;	ES    = segment of code to patch
 40573                                  ;	CX    = length of code to copy
 40574                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40575                                  ;
 40576                                  ; Exit:
 40577                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 40578                                  ;
 40579                                  ; Used:
 40580                                  ;	SI, Flags
 40581                                  ;
 40582                                  ;----------------------------------------------------------------------------
 40583                                  
 40584                                  CopyPatch:
 40585                                  	push	cx
 40586                                  	;mov	di,[bp+4]
 40587                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 40588                                  	cld
 40589                                  	rep movsb
 40590                                  	pop	cx
 40591                                  	;mov	[bp+4],di
 40592                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 40593                                  	retn
 40594                                  
 40595                                  ;----------------------------------------------------------------------------
 40596                                  ;
 40597                                  ; GenJump
 40598                                  ;
 40599                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 40600                                  ;
 40601                                  ; Entry:
 40602                                  ;	ES:DI = from location (where to put jmp instruction)
 40603                                  ;	BX    = to location (where to jump to)
 40604                                  ;
 40605                                  ; Exit:
 40606                                  ;	DI = byte after generated jump
 40607                                  ;
 40608                                  ; Used:
 40609                                  ;	AX
 40610                                  ;
 40611                                  ;----------------------------------------------------------------------------
 40612                                  
 40613                                  GenJump:
 40614                                  	mov	al,0E9h		; jmp rel16 opcode
 40615                                  	stosb
 40616                                  
 40617                                  	mov	ax,bx		; calc offset to 'to' location
 40618                                  	sub	ax,di
 40619                                  	sub	ax,2
 40620                                  
 40621                                  	stosw			; output offset
 40622                                  
 40623                                  	retn
 40624                                  
 40625                                  %endif
 40626                                  
 40627                                  ;-----------------------------------------------------------------------
 40628                                  
 40629                                  ; 23/05/2019 - Retro DOS v4.0
 40630                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 40631                                  
 40632                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40633                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 40634                                  
 40635                                  exepatch_start:	 ; label byte
 40636                                  
 40637                                  	; The following is the code that'll be layed over the buggy unpack
 40638                                  	; code.
 40639                                  str1:
 40640 00007488 06                      	db  06h	  		;push	es
 40641 00007489 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40642                                  
 40643                                  first_stop equ	$-str1
 40644                                  			
 40645 0000748B 2BC2                    	db  2Bh, 0C2h		;sub	ax,dx
 40646                                  
 40647                                  first:  ; label	byte
 40648                                  
 40649 0000748D 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 40650 0000748F 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40651 00007491 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40652 00007494 57                      	db  57h	    		;push	di
 40653 00007495 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40654 00007498 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH
 40655 0000749A F3AE                    	db  0F3h,0AEh 		;repz	scasb
 40656 0000749C 47                      	db  47h	    		;inc	di
 40657 0000749D 8BF7                    	db  8Bh,0F7h  		;mov	si,di
 40658 0000749F 5F                      	db  5Fh	    		;pop	di
 40659 000074A0 58                      	db  58h	    		;pop	ax
 40660                                  
 40661                                  second_stop equ	$-first
 40662                                  
 40663 000074A1 2BC2                    	db  2Bh,0C2h  		;sub	ax,dx
 40664                                  
 40665                                  second: ; label	byte
 40666                                  
 40667 000074A3 8EC0                    	db  8Eh,0C0h  		;mov	es,ax
 40668                                  		    		;NextRec:
 40669 000074A5 B90402                  	db  0B9h,04h,02h	;mov	cx,0204h
 40670                                  		    		;norm_agn:
 40671 000074A8 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40672 000074AA F7D0                    	db  0F7h,0D0h		;not	ax
 40673 000074AC D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40674 000074AE 7413                    	db  74h,13h		;jz	short SI_ok
 40675 000074B0 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40676 000074B2 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 40677 000074B5 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40678 000074B7 7308                    	db  73h,08h		;jnc	short SItoDS
 40679 000074B9 F7DA                    	db  0F7h,0DAh		;neg	dx
 40680 000074BB D3E2                    	db  0D3h,0E2h		;shl	dx,cl
 40681 000074BD 2BF2                    	db  2Bh,0F2h		;sub	si,dx
 40682 000074BF 33D2                    	db  33h,0D2h		;xor	dx,dx
 40683                                  				;SItoDS:
 40684 000074C1 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 40685                                  				;SI_ok:
 40686 000074C3 87F7                    	db  87h,0F7h		;xchg	si,di
 40687 000074C5 1E                      	db  1Eh			;push	ds
 40688 000074C6 06                      	db  06h			;push	es
 40689 000074C7 1F                      	db  1Fh			;pop	ds
 40690 000074C8 07                      	db  07h			;pop	es
 40691 000074C9 FECD                    	db  0FEh,0CDh		;dec	ch
 40692 000074CB 75DB                    	db  75h,0DBh		;jnz	short norm_agn
 40693 000074CD AC                      	db  0ACh		;lodsb
 40694 000074CE 92                      	db  92h			;xchg	dx,ax
 40695 000074CF 4E                      	db  4Eh			;dec	si
 40696 000074D0 AD                      	db  0ADh		;lodsw
 40697 000074D1 8BC8                    	db  8Bh,0C8h		;mov	cx,ax
 40698 000074D3 46                      	db  46h			;inc	si
 40699 000074D4 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 40700 000074D6 24FE                    	db  24h,0FEh		;and	al,0FEH
 40701 000074D8 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40702 000074DA 7505                    	db  75h,05h		;jne	short TryEnum
 40703 000074DC AC                      	db  0ACh		;lodsb
 40704 000074DD F3AA                    	db  0F3h,0AAh		;rep stosb
 40705                                  
 40706                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 40707 000074DF EB06                    	db  0EBh,06h		;jmp	short TryNext
 40708                                  
 40709                                  				;TryEnum:
 40710 000074E1 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40711 000074E3 756C                    	db  75h,6Ch		;jne	short CorruptExe
 40712 000074E5 F3A4                    	db  0F3h,0A4h		;rep movsb
 40713                                  				;TryNext:
 40714                                  
 40715 000074E7 92                      	db  92h			;xchg	dx,ax
 40716                                  ;	db  8Ah,0C2h		;mov	al,dl
 40717                                  
 40718 000074E8 A801                    	db  0A8h,01h		;test	al,1
 40719 000074EA 74B9                    	db  74h,0B9h		;jz	short NextRec
 40720 000074EC 9090                    	db  90h,90h		;nop,nop
 40721                                  	
 40722                                  last_stop equ $-second
 40723                                  size_str1 equ $-str1
 40724                                  
 40725                                  	; The following is the code that we need to look for in the exe
 40726                                  	; file.
 40727                                  
 40728                                  scan_patch1: ; label byte
 40729                                  
 40730 000074EE 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 40731 000074F0 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40732 000074F2 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 40733 000074F4 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 40734 000074F6 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40735 000074F8 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40736 000074FB B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40737 000074FE B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40738 00007500 F3AE                    	db  0F3h,0AEh		;repz	scasb
 40739 00007502 47                      	db  47h			;inc	di
 40740 00007503 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40741 00007505 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 40742 00007507 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 40743 00007509 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40744 0000750B BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40745                                  				;NextRec:
 40746 0000750E B104                    	db  0B1h,04h		;mov	cl,4
 40747 00007510 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40748 00007512 F7D0                    	db  0F7h,0D0h		;not	ax
 40749 00007514 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40750 00007516 7409                    	db  74h,09h		;jz	short SI_ok
 40751 00007518 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40752 0000751A 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40753 0000751C 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 40754 0000751E 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 40755                                  	       			;SI_ok:
 40756 00007521 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 40757 00007523 F7D0                    	db  0F7h,0D0h		;not	ax
 40758 00007525 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40759 00007527 7409                    	db  74h,09h		;jz	short DI_ok
 40760 00007529 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40761 0000752B 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40762 0000752D 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40763 0000752F 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40764                                  				;DI_ok:
 40765                                  
 40766                                  size_scan_patch1 equ $-scan_patch1
 40767                                  
 40768                                  scan_patch2: ; label byte
 40769                                  			
 40770 00007532 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 40771 00007534 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40772 00007536 48                      	db  48h			;dec	ax
 40773 00007537 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 40774 00007539 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40775 0000753B BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40776 0000753E B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40777 00007541 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40778 00007543 F3AE                    	db  0F3h,0AEh		;repz	scasb
 40779 00007545 47                      	db  47h			;inc	di
 40780 00007546 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40781 00007548 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 40782 0000754A 48                      	db  48h			;dec	ax
 40783 0000754B 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40784 0000754D BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40785                                  				;NextRec:
 40786 00007550 B104                    	db  0B1h,04h		;mov	cl,4
 40787 00007552 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40788 00007554 F7D0                    	db  0F7h,0D0h		;not	ax
 40789 00007556 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40790 00007558 740A                    	db  74h,0Ah		;jz	short SI_ok
 40791 0000755A 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40792 0000755C 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40793 0000755E 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 40794 00007560 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 40795                                  				;or	si,0FFF0H
 40796                                  				;SI_ok:
 40797 00007564 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 40798 00007566 F7D0                    	db  0F7h,0D0h		;not	ax
 40799 00007568 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40800 0000756A 740A                    	db  74h,0Ah		;jz	short DI_ok
 40801 0000756C 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40802 0000756E 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40803 00007570 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40804 00007572 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 40805                                  				;or	di,0FFF0H
 40806                                  				;DI_ok:
 40807                                  
 40808                                  size_scan_patch2 equ $-scan_patch2
 40809                                  
 40810                                  scan_patch3: ; label byte
 40811                                  
 40812 00007576 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 40813 00007578 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40814 0000757A 48                      	db  48h			;dec	ax
 40815 0000757B 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 40816 0000757D 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40817 0000757F BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40818 00007582 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40819 00007585 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40820 00007587 F3AE                    	db  0F3h,0AEh		;repz	scasb
 40821 00007589 47                      	db  47h			;inc	di
 40822 0000758A 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40823 0000758C 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 40824 0000758E 48                      	db  48h			;dec	ax
 40825 0000758F 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40826 00007591 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40827                                  				;NextRec:
 40828 00007594 B104                    	db  0B1h,04h		;mov	cl,4
 40829 00007596 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40830 00007598 F7D0                    	db  0F7h,0D0h		;not	ax
 40831 0000759A D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40832 0000759C 7409                    	db  74h,09h		;jz	short SI_ok
 40833 0000759E 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40834 000075A0 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40835 000075A2 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 40836 000075A4 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 40837                                  				;SI_ok:
 40838 000075A7 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 40839 000075A9 F7D0                    	db  0F7h,0D0h		;not	ax
 40840 000075AB D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40841 000075AD 7409                    	db  74h,09h		;jz	short DI_ok
 40842 000075AF 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40843 000075B1 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40844 000075B3 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40845 000075B5 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40846                                  				;DI_ok:
 40847                                  
 40848                                  size_scan_patch3 equ $-scan_patch3
 40849                                  
 40850                                  scan_com: ; label byte
 40851                                  
 40852 000075B8 AC                      	db  0ACh		;lodsb
 40853 000075B9 8AD0                    	db  8Ah,0D0h		;mov	dl,al
 40854 000075BB 4E                      	db  4Eh			;dec	si
 40855 000075BC AD                      	db  0ADh		;lodsw
 40856 000075BD 8BC8                    	db  8Bh,0C8h		;mov	cx,ax
 40857 000075BF 46                      	db  46h			;inc	si
 40858 000075C0 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 40859 000075C2 24FE                    	db  24h,0FEh		;and	al,0FEH
 40860 000075C4 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40861 000075C6 7506                    	db  75h,06h		;jne	short TryEnum
 40862 000075C8 AC                      	db  0ACh		;lodsb
 40863 000075C9 F3AA                    	db  0F3h,0AAh		;rep stosb
 40864 000075CB EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 40865                                  				;TryEnum:
 40866 000075CE 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40867 000075D0 756B                    	db  75h,6Bh		;jne	short CorruptExe
 40868 000075D2 F3A4                    	db  0F3h,0A4h		;rep movsb
 40869                                  				;TryNext:
 40870 000075D4 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 40871 000075D6 A801                    	db  0A8h,01h		;test	al,1
 40872                                  ;	db  74h,0BAh		;jz	short NextRec
 40873                                  
 40874                                  size_scan_com	equ	$-scan_com
 40875                                  
 40876                                  ;-----------------------------------------------------------------------
 40877                                  
 40878                                  ; 23/05/2019 - Retro DOS v4.0
 40879                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 40880                                  
 40881                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40882                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 40883                                  
 40884                                  ExePatch:
 40885 000075D8 E80600                  	call	ExePackPatch
 40886 000075DB 36FF16[1412]            	call	word [ss:RationalPatchPtr]
 40887 000075E0 C3                      	retn
 40888                                  
 40889                                  ;-----------------------------------------------------------------------
 40890                                  ;
 40891                                  ; Procedure Name 	: ExePackPatch
 40892                                  ;
 40893                                  ; Inputs	 	: DS 			-> DOSDATA
 40894                                  ;			  ES:0 			-> read in image
 40895                                  ;			  ax:cx = start cs:ip of program
 40896                                  ; Output		:		
 40897                                  ;
 40898                                  ;	1. If ES <= 0fffh
 40899                                  ;	   2. if exepack signature ('RB') found
 40900                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 40901                                  ;	       	 4. if rest of the code & checksum compares
 40902                                  ;	  	    5. overlay buggy code with code in 
 40903                                  ;		       doscode:str1.
 40904                                  ;		 6. endif
 40905                                  ;	      7. endif
 40906                                  ;	   8. endif
 40907                                  ;	9. endif
 40908                                  ;
 40909                                  ;
 40910                                  ; Uses			: NONE
 40911                                  ;
 40912                                  ;-----------------------------------------------------------------------
 40913                                  
 40914                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40915                                  	; 23/05/2019 - Retro DOS v4.0	
 40916                                  ExePackPatch:
 40917 000075E1 53                      	push	bx
 40918 000075E2 8CC3                    	mov	bx,es			; bx has load segment
 40919 000075E4 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 40920 000075E8 7602                    	jbe	short ep_cont		; N: 
 40921 000075EA 5B                      	pop	bx			; Y: no need to patch
 40922 000075EB C3                      	retn
 40923                                  ep_cont:
 40924 000075EC 1E                      	push	ds
 40925 000075ED 06                      	push	es
 40926 000075EE 50                      	push	ax
 40927 000075EF 51                      	push	cx
 40928 000075F0 56                      	push	si
 40929 000075F1 57                      	push	di
 40930                                  	
 40931                                  		; M033 - start
 40932                                  		; exepacked programs have an IP of 12h (>=2)
 40933                                  
 40934 000075F2 83E902                  	sub	cx,2			; Q: is IP >=2 
 40935 000075F5 7303                    	jnb	short epp_1		; N: exit
 40936 000075F7 E9C500                  	jmp	ep_notpacked
 40937                                  					; ax:cx now points to location of
 40938                                  					; 'RB' if this is an exepacked file.
 40939                                  		; M033 - end
 40940                                  epp_1:
 40941 000075FA 89CF                    	mov	di,cx
 40942 000075FC 8EC0                    	mov	es,ax
 40943 000075FE 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 40944                                  					; unpack_offset
 40945                                  
 40946 00007603 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 40947                                  	;ljne	ep_notpacked
 40948 00007608 7403                    	je	short epp_2
 40949 0000760A E9B200                  	jmp	ep_notpacked
 40950                                  epp_2:
 40951 0000760D 0E                      	push	cs
 40952 0000760E 1F                      	pop	ds			; set ds to cs
 40953                                  
 40954                                  	;add	di,6Ch
 40955 0000760F 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 40956                                  					;          file where we hope to find
 40957                                  					;	   scan string. 
 40958                                  
 40959 00007612 E8B200                  	call	chk_common_str		; check for match
 40960                                  
 40961 00007615 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 40962                                  					; N: check at patch2_offset
 40963                                  					; Y: check for rest of patch string
 40964 00007617 BE[EE74]                	mov	si,scan_patch1
 40965                                  					; ds:si -> scan string 
 40966 0000761A 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 40967                                  
 40968                                  	;add	di,28h
 40969                                  	; 07/12/2022
 40970 0000761F 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 40971                                  					;          file where we hope to find
 40972                                  					;	   scan string. 
 40973                                  	;mov	cx,68
 40974 00007622 B94400                  	mov	cx,size_scan_patch1
 40975                                  	;mov	bx,142
 40976 00007625 BB8E00                  	mov	bx,CHKSUM1_LEN
 40977                                  	;mov	ax,0EF4Eh
 40978 00007628 B84EEF                  	mov	ax,PATCH1_CHKSUM
 40979 0000762B E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 40980 0000762E 7208                    	jc	short ep_done1		; Q: did we pass the test
 40981                                  					; N: exit
 40982                                  					; Y: overlay code with new 
 40983 00007630 BE[8874]                	mov	si,str1
 40984                                  	;mov	cx,102
 40985 00007633 B96600                  	mov	cx,size_str1
 40986                                  	
 40987 00007636 F3A4                    	rep	movsb
 40988                                  ep_done1:
 40989 00007638 E98400                  	jmp	ep_done
 40990                                  
 40991                                  ep_chkpatch2:
 40992                                  	;mov	di,76h
 40993 0000763B BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 40994                                  					; in another version of unpack
 40995 0000763E E88600                  	call	chk_common_str		; check for match
 40996                                  
 40997 00007641 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 40998                                  					; N: check for patch3_offset
 40999                                  					; Y: check for rest of patch string
 41000                                  
 41001 00007643 BE[3275]                	mov	si,scan_patch2
 41002                                  					; ds:si -> scan string 
 41003                                  	;mov	di,32h
 41004 00007646 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 41005                                  					;          file where we hope to find
 41006                                  	;mov	cx,68			;	   scan string. 
 41007 00007649 B94400                  	mov	cx,size_scan_patch2
 41008                                  	;mov	bx,140
 41009 0000764C BB8C00                  	mov	bx,CHKSUM2_LEN
 41010                                  	;mov	ax,78B2h
 41011 0000764F B8B278                  	mov	ax,PATCH2_CHKSUM
 41012 00007652 E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 41013                                  
 41014                                  					; M046 - Start
 41015                                  					; Q: did we pass the test
 41016 00007655 7311                    	jnc	short ep_patchcode2	; Y: overlay code with new 
 41017                                  					; N: try with a different chksum
 41018                                  
 41019                                  
 41020 00007657 BE[3275]                	mov	si,scan_patch2
 41021                                  					; ds:si -> scan string 
 41022                                  	;mov	cx,68
 41023 0000765A B94400                  	mov	cx,size_scan_patch2
 41024                                  	;mov	bx,129
 41025 0000765D BB8100                  	mov	bx,CHKSUM2A_LEN
 41026                                  	;mov	ax,1C47h
 41027 00007660 B8471C                  	mov	ax,PATCH2A_CHKSUM
 41028 00007663 E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 41029                                  					; Q: did we pass the test
 41030 00007666 7257                    	jc	short ep_notpacked	; N: try with a different chksum
 41031                                  					; Y: overlay code with new 
 41032                                  						
 41033                                  ep_patchcode2:			       	; M046 - End
 41034 00007668 BE[8874]                	mov	si,str1
 41035                                  	;mov	cx,3
 41036 0000766B B90300                  	mov	cx,first_stop
 41037 0000766E F3A4                    	rep	movsb
 41038 00007670 B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 41039 00007673 AB                      	stosw
 41040 00007674 83C602                  	add	si,2
 41041                                  	;mov	cx,20
 41042 00007677 B91400                  	mov	cx,second_stop
 41043 0000767A F3A4                    	rep	movsb
 41044 0000767C AB                      	stosw				; put in dec ax and nop
 41045 0000767D 83C602                  	add	si,2
 41046                                  	;mov	cx,75
 41047 00007680 B94B00                  	mov	cx,last_stop
 41048 00007683 F3A4                    	rep	movsb
 41049 00007685 EB38                    	jmp	short ep_done
 41050                                  
 41051                                  ep_chkpatch3:
 41052                                  	;mov	di,74h
 41053 00007687 BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 41054                                  					; in another version of unpack
 41055 0000768A E83A00                  	call	chk_common_str		; check for match
 41056                                  
 41057 0000768D 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 41058                                  					; N: exit
 41059                                  					; Y: check for rest of patch string
 41060 0000768F BE[7675]                	mov	si,scan_patch3
 41061                                  					; ds:si -> scan string 
 41062                                  	;mov	di,32h
 41063 00007692 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 41064                                  					;          file where we hope to find
 41065                                  					;	   scan string. 
 41066                                  	;mov	cx,66
 41067 00007695 B94200                  	mov	cx,size_scan_patch3
 41068                                  	;mov	bx,139
 41069 00007698 BB8B00                  	mov	bx,CHKSUM3_LEN
 41070                                  	;mov	ax,4EDEh
 41071 0000769B B8DE4E                  	mov	ax,PATCH3_CHKSUM
 41072 0000769E E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 41073 000076A1 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 41074                                  					; N: exit
 41075                                  					; Y: overlay code with new 
 41076 000076A3 BE[8874]                	mov	si,str1
 41077                                  	;mov	cx,3
 41078 000076A6 B90300                  	mov	cx,first_stop
 41079 000076A9 F3A4                    	rep	movsb
 41080 000076AB B048                    	mov	al,48h			; al = opcode for dec ax
 41081 000076AD AA                      	stosb
 41082 000076AE 83C602                  	add	si,2
 41083                                  	;mov	cx,20
 41084 000076B1 B91400                  	mov	cx,second_stop
 41085 000076B4 F3A4                    	rep	movsb
 41086 000076B6 AA                      	stosb				; put in dec ax
 41087 000076B7 83C602                  	add	si,2
 41088                                  	;mov	cx,75
 41089 000076BA B94B00                  	mov	cx,last_stop
 41090 000076BD F3A4                    	rep	movsb
 41091                                  
 41092                                  ep_notpacked:
 41093                                  	;stc
 41094                                  ep_done:
 41095 000076BF 5F                      	pop	di
 41096 000076C0 5E                      	pop	si
 41097 000076C1 59                      	pop	cx
 41098 000076C2 58                      	pop	ax
 41099 000076C3 07                      	pop	es
 41100 000076C4 1F                      	pop	ds
 41101 000076C5 5B                      	pop	bx
 41102 000076C6 C3                      	retn
 41103                                  
 41104                                  ;-------------------------------------------------------------------------
 41105                                  ;
 41106                                  ; 	Procedure Name	: chk_common_str
 41107                                  ;
 41108                                  ;	Input		: DS = DOSCODE
 41109                                  ;			; ES:DI points to string in packed file
 41110                                  ;
 41111                                  ;	Output		; Z if match else NZ
 41112                                  ;
 41113                                  ;-------------------------------------------------------------------------
 41114                                  
 41115                                  	; 23/05/2019 - Retro DOS v4.0
 41116                                  chk_common_str:
 41117 000076C7 BE[B875]                	mov	si,scan_com
 41118                                  					; ds:si -> scan string 
 41119                                  	;mov	cx,32
 41120 000076CA B92000                  	mov	cx,size_scan_com
 41121                                  
 41122 000076CD F3A6                    	repe	cmpsb
 41123                                  
 41124                                  					; M046 - start
 41125                                  	; a fourth possible version of these exepacked programs have a
 41126                                  	; 056h instead of 06Bh. See scan_com above
 41127                                  	;
 41128                                  	; 	db  75h, 6Bh		;jne CorruptExe
 41129                                  	;
 41130                                  	; If the mismatch at this point is due to a 56h instead of 6Bh
 41131                                  	; we shall try to match the rest of the string
 41132                                  	;
 41133                                  
 41134 000076CF 7409                    	jz	short ccs_done
 41135 000076D1 26807DFF56              	cmp	byte [es:di-1],56h
 41136 000076D6 7502                    	jnz	short ccs_done
 41137                                  
 41138 000076D8 F3A6                    	repe	cmpsb
 41139                                  ccs_done:				; M046 - end
 41140 000076DA C3                      	retn
 41141                                  
 41142                                  ;-------------------------------------------------------------------------
 41143                                  ;
 41144                                  ;	Procedure Name	: chk_patchsum
 41145                                  ;
 41146                                  ;	Input		: DS:SI -> string we're looking for
 41147                                  ;			: ES:DI -> offset in packed file
 41148                                  ;			: CX 	= scan length
 41149                                  ;			: BX	= length of check sum
 41150                                  ;			: AX 	= value of check sum
 41151                                  ;
 41152                                  ;	Output		: if patch & check sum compare
 41153                                  ;				NC
 41154                                  ;			  else
 41155                                  ;				CY
 41156                                  ;
 41157                                  ;	Uses		: AX, BX, CX, SI
 41158                                  ;
 41159                                  ;-------------------------------------------------------------------------
 41160                                  
 41161                                  	; 23/05/2019 - Retro DOS v4.0
 41162                                  chk_patchsum:
 41163 000076DB 57                      	push	di
 41164                                  
 41165 000076DC F3A6                    	repe	cmpsb
 41166                                  
 41167 000076DE 751A                    	jnz	short cp_fail		; Q: does the patch match
 41168                                  					; N: exit
 41169                                  					; Y:
 41170                                  
 41171                                  		; we do a check sum starting from the location of the
 41172                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 41173                                  		; unpacking code.
 41174                                  
 41175 000076E0 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 41176 000076E5 89D9                    	mov	cx,bx			; cx = length of check sum
 41177                                  
 41178 000076E7 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 41179 000076E9 31C0                    	xor	ax,ax
 41180                                  ep_chksum:
 41181 000076EB 260305                  	add	ax,[es:di]
 41182 000076EE 83C702                  	add	di,2
 41183 000076F1 E2F8                    	loop	ep_chksum
 41184                                  
 41185 000076F3 5F                      	pop	di			; restore di
 41186                                  
 41187 000076F4 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 41188 000076F6 7502                    	jne	short cp_fail		; N: exit
 41189                                  					; Y:
 41190 000076F8 F8                      	clc
 41191 000076F9 C3                      	retn
 41192                                  
 41193                                  cp_fail:
 41194 000076FA F9                      	stc
 41195 000076FB C3                      	retn
 41196                                  
 41197                                  ; M020 : BEGIN
 41198                                  ;
 41199                                  ;----------------------------------------------------------------------------
 41200                                  ;
 41201                                  ; procedure : RationalPatch
 41202                                  ;
 41203                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 41204                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 41205                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 41206                                  ;
 41207                                  ; THE BUG is in the following code sequence:
 41208                                  ;
 41209                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 41210                                  ;90		even				; word align
 41211                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 41212                                  ;e8 xx xx	call	set_A20			; enable A20
 41213                                  ;
 41214                                  ; This patch routine replaces the mov & the loop with a far call into a
 41215                                  ; routine in DOS data segment which is in low memory (because A20 line
 41216                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 41217                                  ; a mov & loop.
 41218                                  ;
 41219                                  ; Identification of Buggy Rational EXE
 41220                                  ; ====================================
 41221                                  ;
 41222                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 41223                                  ;
 41224                                  ; OFFSET				Contains
 41225                                  ; ------				--------
 41226                                  ; 0000h			100 times Version number in binary
 41227                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 41228                                  ;
 41229                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 41230                                  ;
 41231                                  ; 002ah			offset where version number is stored in ASCII
 41232                                  ;				e.g. '3.48A'
 41233                                  ;
 41234                                  ; 0030h			offset of copyright string. Copyright strings either
 41235                                  ;			start with "DOS/16M Copyright...." or
 41236                                  ;			"Copyright.....". The string contains
 41237                                  ;			"Rational Systems, Inc."
 41238                                  ;
 41239                                  ; 0020h			word : Paragraph offset of the buggy code segment
 41240                                  ;				from the program image
 41241                                  ; 0016h			word : size of buggy code segment
 41242                                  ;
 41243                                  ;	Buggy code is definite to start after offset 200h in its segment
 41244                                  ;
 41245                                  ;----------------------------------------------------------------------------
 41246                                  
 41247                                  ; 23/05/2019 - Retro DOS v4.0
 41248                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 41249                                  
 41250                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41251                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 41252                                  
 41253                                  RScanPattern1:
 41254 000076FC 000020000000400001-     	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 41254 00007705 00                 
 41255                                  
 41256                                  RLen1 equ $ - RScanPattern1
 41257                                  
 41258                                  RScanPattern2:
 41259 00007706 8B0E100090E2FEE8        	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 41260                                  
 41261                                  RLen2 equ $ - RScanPattern2
 41262                                  
 41263                                  RScanPattern3:
 41264 0000770E 8B0E1000E2FEE8          	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 41265                                  
 41266                                  RLen3 equ $ - RScanPattern2
 41267                                  
 41268                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 41269                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 41270                                  
 41271                                  ;----------------------------------------------------------------------------
 41272                                  ;
 41273                                  ; INPUT : ES = segment where program got loaded
 41274                                  ;
 41275                                  ;----------------------------------------------------------------------------
 41276                                  
 41277                                  RationalPatch:
 41278 00007715 FC                      	cld
 41279 00007716 50                      	push	ax
 41280 00007717 53                      	push	bx
 41281 00007718 51                      	push	cx
 41282 00007719 52                      	push	dx
 41283 0000771A 56                      	push	si
 41284 0000771B 57                      	push	di
 41285 0000771C 06                      	push	es
 41286 0000771D 1E                      	push	ds			; we use all of them
 41287 0000771E BF0A00                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 41288 00007721 0E                      	push	cs
 41289 00007722 1F                      	pop	ds
 41290                                  	
 41291 00007723 BE[FC76]                	mov	si,RScanPattern1
 41292                                  	;mov	cx,10
 41293 00007726 B90A00                  	mov	cx,RLen1
 41294 00007729 F3A6                    	rep	cmpsb			; do we have the pattern ?
 41295 0000772B 754A                    	jne	short rpexit
 41296 0000772D 26A10000                	mov	ax,[es:0]
 41297 00007731 3D5C01                  	cmp	ax,348			; is it a buggy version ?
 41298 00007734 7241                    	jb	short rpexit
 41299 00007736 3D7F01                  	cmp	ax,383			; is it a buggy version ?
 41300 00007739 773C                    	ja	short rpexit
 41301                                  
 41302 0000773B E85A00                  	call	VerifyVersion
 41303 0000773E 7537                    	jne	short rpexit
 41304                                  
 41305 00007740 268B0E1600              	mov	cx,[es:16h]		; Length of buggy code seg
 41306 00007745 81E90002                	sub	cx,200h			; Length we search (we start
 41307                                  					;  at offset 200h)
 41308 00007749 268E062000              	mov	es,[es:20h]		; es=buggy code segment
 41309 0000774E BE[0677]                	mov	si,RScanPattern2
 41310                                  	;mov	dx,8	
 41311 00007751 BA0800                  	mov	dx,RLen2
 41312 00007754 E82900                  	call	ScanCodeSeq		; look for code seq with nop
 41313 00007757 740B                    	jz	short rpfound
 41314                                  
 41315 00007759 BE[0E77]                	mov	si,RScanPattern3
 41316                                  	;mov	dx,15
 41317 0000775C BA0F00                  	mov	dx,RLen3
 41318 0000775F E81E00                  	call	ScanCodeSeq		; look for code seq w/o nop
 41319 00007762 7513                    	jnz	short rpexit
 41320                                  
 41321                                  rpfound:
 41322                                  	
 41323                                  ;	we set up a far call into DOS data
 41324                                  ;	dx has the length of the code seq we were searching for
 41325                                  
 41326 00007764 B09A                    	mov	al,9Ah			; far call opcode
 41327 00007766 AA                      	stosb
 41328 00007767 B8[1612]                	mov	ax,RatBugCode
 41329 0000776A AB                      	stosw
 41330 0000776B 8CD0                    	mov	ax,ss
 41331 0000776D AB                      	stosw
 41332 0000776E 89D1                    	mov	cx,dx
 41333 00007770 83E906                  	sub	cx,6			; filler (with NOPs)
 41334 00007773 B090                    	mov	al,90h
 41335 00007775 F3AA                    	rep	stosb
 41336                                  rpexit:
 41337 00007777 1F                      	pop	ds
 41338 00007778 07                      	pop	es
 41339 00007779 5F                      	pop	di
 41340 0000777A 5E                      	pop	si
 41341 0000777B 5A                      	pop	dx
 41342 0000777C 59                      	pop	cx
 41343 0000777D 5B                      	pop	bx
 41344 0000777E 58                      	pop	ax
 41345 0000777F C3                      	retn
 41346                                  
 41347                                  ; M020 END
 41348                                  
 41349                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41350                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41351                                  
 41352                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 41353                                  
 41354                                  ;----------------------------------------------------------------------------
 41355                                  ;
 41356                                  ; ScanCodeSeq
 41357                                  ;
 41358                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41359                                  ;
 41360                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41361                                  ;
 41362                                  ;----------------------------------------------------------------------------
 41363                                  
 41364                                  ScanCodeSeq:
 41365                                  	; 17/12/2022
 41366 00007780 BF0002                  	mov	di,200h
 41367                                  ScanCodeSeq_di:
 41368 00007783 51                      	push	cx
 41369 00007784 29D1                    	sub	cx,dx
 41370 00007786 41                      	inc	cx
 41371                                  	; 17/12/2022
 41372                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41373                                  	;mov	di,200h
 41374                                  scsagain:
 41375 00007787 56                      	push	si
 41376 00007788 57                      	push	di
 41377 00007789 51                      	push	cx
 41378 0000778A 89D1                    	mov	cx,dx
 41379 0000778C F3A6                    	rep	cmpsb
 41380 0000778E 59                      	pop	cx
 41381 0000778F 5F                      	pop	di
 41382 00007790 5E                      	pop	si
 41383 00007791 7403                    	je	short scsfound
 41384 00007793 47                      	inc	di
 41385 00007794 E2F1                    	loop	scsagain
 41386                                  scsfound:
 41387 00007796 59                      	pop	cx
 41388                                  vvexit:		; 18/12/2022
 41389 00007797 C3                      	retn
 41390                                  
 41391                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41392                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41393                                  
 41394                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 41395                                  
 41396                                  ;----------------------------------------------------------------------------
 41397                                  ;
 41398                                  ; VerifyVersion
 41399                                  ;
 41400                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41401                                  ; from ES:2A.
 41402                                  ;
 41403                                  ;       Entry: AX = binary version number 
 41404                                  ;       Exit : Z flag set if version numbers match
 41405                                  ;
 41406                                  ;----------------------------------------------------------------------------
 41407                                  
 41408                                  VerifyVersion:
 41409 00007798 268B362A00              	mov	si,[es:2Ah]		; offset of version number
 41410                                  					;  in ascii
 41411 0000779D B30A                    	mov	bl,10
 41412 0000779F 83C603                  	add	si,3			; point to last digit
 41413                                  
 41414 000077A2 E80E00                  	call	VVDigit
 41415 000077A5 75F0                    	jne	short vvexit
 41416 000077A7 E80900                  	call	VVDigit
 41417 000077AA 75EB                    	jne	short vvexit
 41418 000077AC 26803C2E                	cmp	byte [es:si],'.' ; 2Eh
 41419 000077B0 75E5                    	jne	short vvexit
 41420 000077B2 4E                      	dec	si
 41421                                  	;call	VVDigit
 41422                                  	; 18/12/2022
 41423                                  	;jmp	short VVDigit
 41424                                  ;vvexit:
 41425                                  	;retn
 41426                                  VVDigit:
 41427 000077B3 F6F3                    	div	bl
 41428 000077B5 80C430                  	add	ah,'0' ; 30h
 41429 000077B8 4E                      	dec	si
 41430 000077B9 26386401                	cmp	[es:si+1],ah
 41431 000077BD B400                    	mov	ah,0			; do not xor or sub we need Z
 41432 000077BF C3                      	retn
 41433                                  
 41434                                  ;---------------------------------------------------------------------------
 41435                                  ;
 41436                                  ;	M068
 41437                                  ;
 41438                                  ; 	Procedure Name	: IsCopyProt
 41439                                  ;
 41440                                  ;	Inputs		: DS:100 -> start of com file just read in
 41441                                  ;
 41442                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 41443                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 41444                                  ;			  copy protect scheme that relies on the A20 line
 41445                                  ;			  being turned off for it's scheme to work.
 41446                                  ;
 41447                                  ;			  Note: The int 21 function dispatcher will turn 
 41448                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 41449                                  ;				and dec the A20OFF_COUNT before	iretting 
 41450                                  ;				to the user. 
 41451                                  ;
 41452                                  ;	Uses		: ES, DI, SI, CX
 41453                                  ;
 41454                                  ;---------------------------------------------------------------------------
 41455                                  
 41456                                  ; 23/05/2019 - Retro DOS v4.0
 41457                                  
 41458                                  CPStartOffset	EQU	0175h
 41459                                  CPID1Offset	EQU	011Bh
 41460                                  CPID2Offset	EQU	0173h
 41461                                  CPID3Offset	EQU	0146h
 41462                                  CPID4Offset	EQU	0124h
 41463                                  ID1		EQU	05343h
 41464                                  ID2		EQU	05044h
 41465                                  ID3		EQU	0F413h
 41466                                  ID4		EQU	08000h
 41467                                  
 41468                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 41469                                  
 41470                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41471                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 41472                                  
 41473                                  CPScanPattern:
 41474 000077C0 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 41475 000077C4 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 41476 000077C8 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 41477 000077CE 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 41478 000077D2 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 41479 000077D5 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 41480                                  
 41481                                  CPSPlen	EQU $ - CPScanPattern
 41482                                  
 41483                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 41484                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 41485                                  
 41486                                  IsCopyProt:
 41487 000077D8 813E1B014353            	cmp	word [CPID1Offset],ID1
 41488 000077DE 752D                    	jne	short CP_done
 41489                                  
 41490 000077E0 813E73014450            	cmp	word [CPID2Offset],ID2
 41491 000077E6 7525                    	jne	short CP_done
 41492                                  
 41493 000077E8 813E460113F4            	cmp	word [CPID3Offset],ID3
 41494 000077EE 751D                    	jne	short CP_done
 41495                                  
 41496 000077F0 813E24010080            	cmp	word [CPID4Offset],ID4
 41497 000077F6 7515                    	jne	short CP_done
 41498                                  
 41499 000077F8 0E                      	push	cs
 41500 000077F9 07                      	pop	es
 41501 000077FA BF[C077]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 41502                                  
 41503 000077FD BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 41504                                  					; of pattern
 41505                                  
 41506 00007800 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 41507 00007803 F3A6                    	repe	cmpsb
 41508 00007805 7506                    	jnz	short CP_done
 41509                                  
 41510 00007807 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 41511                                  CP_done:
 41512 0000780D C3                      	retn
 41513                                  	
 41514                                  ;DOSCODE ENDS
 41515                                  
 41516                                  	;END
 41517                                  
 41518                                  ;----------------------------------------------------------------------------
 41519                                  
 41520                                  ;align 2 ; 05/09/2018 (Error!)
 41521                                  
 41522                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41523                                  ;align 16 ; 08/09/2018 (OK.)
 41524                                  align 2
 41525                                  
 41526                                  ; 06/08/2018 - Retro DOS v3.0
 41527                                  ;============================================================================
 41528                                  ; MSINIT.ASM
 41529                                  ;============================================================================
 41530                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 41531                                  ;
 41532                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41533                                  ;
 41534                                  	; 15/07/2018 - Retro DOS v3.0
 41535                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 41536                                  
 41537                                  ; temp iret instruction
 41538                                  
 41539                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41540                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 41541                                  
 41542                                  initiret: ; MSDOS 6.0
 41543                                  SYSBUF:
 41544                                  ;IRETT: ; 06/05/2019
 41545 0000780E CF                      	iret
 41546                                  
 41547                                  ; 22/04/2019 - Retro DOS v4.0
 41548                                  
 41549                                  ; pointer to the BIOS data segment that will be available just to the
 41550                                  ; initialization code
 41551                                  
 41552 0000780F 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 41553                                  
 41554                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41555                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 41556                                  
 41557                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 41558                                  
 41559                                  ParaRound:
 41560 00007811 83C00F                  	add	ax, 15
 41561 00007814 D1D8                    	rcr	ax, 1
 41562 00007816 D1E8                    	shr	ax, 1
 41563 00007818 D1E8                    	shr	ax, 1
 41564 0000781A D1E8                    	shr	ax, 1
 41565 0000781C C3                      	retn
 41566                                  
 41567                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41568                                  
 41569                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41570                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 41571                                  	
 41572                                  	; 30/05/2019
 41573                                  	; 22/04/2019 - Retro DOS v4.0
 41574                                  	; 07/07/2018 - Retro DOS v3.0
 41575                                  	; Retro DOS v2.0 - 03/03/2018
 41576                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41577                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 41578                                  DOSINIT:
 41579                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 41580                                  	;
 41581                                  	; Far call from SYSINIT
 41582                                  	; DX = Memory size in paragraphs
 41583                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 41584                                  	;	  (Retro DOS v2.0, 16/03/2018)
 41585                                  	;
 41586                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 41587                                  	;	  (Retro DOS v4.0, 20/04/2019)
 41588                                  
 41589 0000781D FA                              CLI
 41590 0000781E FC                              CLD
 41591                                  
 41592                                  	; 03/11/2022
 41593                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 41594                                  	
 41595                                  	; 17/12/2022
 41596                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41597                                  	;push	dx ; =*=		; save parameters from BIOS
 41598                                  	
 41599 0000781F 56                      	push	si
 41600 00007820 1E                      	push	ds
 41601 00007821 57                      	push	di			;save di (ptr to BiosComBlock)
 41602                                  
 41603 00007822 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 41604                                  
 41605                                  ; First, move the DOS data segment to its final location in low memory
 41606                                  
 41607                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 41608                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h
 41609 00007824 B8[DA7C]                	mov	ax,MEMSTRT		; get offset of end of init code
 41610                                  
 41611                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 41612                                  	;and	ax,~15	; 0FFF0h	; boundary
 41613                                  
 41614                                  	;mov	si,ax			; si = offset of DOSDATA in current
 41615                                  					; code segment
 41616                                  
 41617                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41618 00007827 83C00F                  	add	ax,15			; round to nearest paragraph
 41619 0000782A 83E0F0                  	and	ax,~15			; boundary
 41620                                  
 41621 0000782D 89C6                    	mov	si,ax			; si = offset of DOSDATA in current
 41622                                  					; code segment
 41623                                  	; 05/12/2022
 41624                                  	; 30/04/2019 - Retro DOS v4.0
 41625                                  	;xor	si,si
 41626                                  	
 41627 0000782F 8CC8                    	mov	ax,cs
 41628 00007831 8ED8                    	mov	ds,ax			; ds = current code segment
 41629                                  					; DS:SI now points to dosdata
 41630                                  
 41631                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 41632                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 41633                                  					;  BData segment. Cannot use
 41634                                  					;  getdseg macro here!!!
 41635                                  	; 17/12/2022
 41636 00007833 8E06[0F78]              	mov	es,[InitBioDataSeg]
 41637                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41638                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 41639                                  
 41640                                  	;mov	es,[es:3]
 41641 00007837 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 41642                                  
 41643 0000783C 31FF                    	xor	di,di			; ES:DI now points to RAM data
 41644                                  
 41645                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 41646                                  	;mov	cx,4976  ; 25/05/2019
 41647                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41648                                  	;mov	cx,4962
 41649                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 41650 0000783E B96213                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 41651 00007841 F3A4                    	rep	movsb			; move data to final location
 41652                                  	
 41653 00007843 5F                      	pop	di			; restore ptr to BiosComBlock
 41654 00007844 1F                      	pop	ds			; restore parms from BIOS
 41655 00007845 5E                      	pop	si
 41656                                  	; 17/12/2022
 41657                                  	;pop	dx ; 30/05/2019	
 41658                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41659                                  	;pop	dx ; =*=
 41660                                  
 41661 00007846 06                      	push	es
 41662 00007847 1E                      	push	ds
 41663 00007848 07                      	pop	es			; es:si -> device chain
 41664 00007849 1F                      	pop	ds			; ds points to dosdata
 41665                                  
 41666                                  ;SR;
 41667                                  ;We get a ptr to the BIOS exchange data block. This has been setup right
 41668                                  ;now so that the EXEC call knows when SysInit is present to do the special
 41669                                  ;lie table handling for device drivers. This can be expanded later on to
 41670                                  ;establish a communication block from the BIOS to the DOS.
 41671                                  
 41672                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 41673                                  	;mov	[1042h],bx
 41674 0000784A 893E[4010]              	mov	[BiosDataPtr],di
 41675 0000784E 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 41676                                  
 41677 00007852 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 41678                                  
 41679                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 41680                                  
 41681 00007857 2E8C1E[5751]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 41682 0000785C 2E8C1E[5B51]            	mov	[cs:LowInt24Addr+2],ds
 41683 00007861 2E8C1E[5F51]            	mov	[cs:LowInt28Addr+2],ds
 41684                                  
 41685                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 41686                                  	;mov	[584h],sp
 41687                                  	;mov	[586h],ss
 41688 00007866 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 41689 0000786A 8926[8405]              	mov	[USER_SP],sp
 41690 0000786E 8C16[8605]              	mov	[USER_SS],ss
 41691                                  
 41692 00007872 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 41693 00007874 8ED0                    	mov	ss,ax
 41694                                  
 41695                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 41696                                  	;mov	sp,offset dosdata:dskstack
 41697 00007876 BC[2009]                	mov	sp,DSKSTACK
 41698                                  
 41699                                  ;M023
 41700                                  ; Init patch ptrs to default values
 41701                                  
 41702                                  	;mov	word [1212h],RetExePatch
 41703                                  	;mov	word [1214h],RetExePatch
 41704                                  	;mov	word [61h],RetExePatch
 41705 00007879 C706[1212][D962]        	mov	word [FixExePatch],RetExePatch	; M023
 41706 0000787F C706[1412][D962]        	mov	word [RationalPatchPtr],RetExePatch ; M023
 41707 00007885 C706[6100][D962]        	mov	word [ChkCopyProt],RetExePatch	; M068
 41708                                  
 41709                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41710                                  %if 0	
 41711                                  
 41712                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 41713                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 41714                                  ; running in the HMA.
 41715                                  
 41716                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 41717                                  	cmp	al,2		;   386 or later?
 41718                                  	mov	ax,Rational386Patch
 41719                                  	jae	short di_set_patch
 41720                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 41721                                  di_set_patch:
 41722                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 41723                                  
 41724                                  %endif
 41725                                  	; Set up the variable temp_dosloc to point to the dos code segment
 41726                                  
 41727 0000788B 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 41728                                  
 41729                                  	; ax now holds segment of DOS code
 41730 0000788D A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 41731                                  
 41732 00007890 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 41733 00007894 8936[4800]              	mov	word [NULDEV],si
 41734                                  ;SR;
 41735                                  ; There are some locations in the Win386 instance data structures
 41736                                  ; which need to be set up with the DOS data segment. First, initialize
 41737                                  ; the segment part of the instance table pointer in the SIS.
 41738                                  
 41739                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 41740 00007898 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 41741                                  
 41742                                  ; Now initialize the segment part of the pointer to the data in each
 41743                                  ; instance table entry.
 41744                                  
 41745 0000789C 56                      	push	si		; preserve pointer to device chain
 41746                                  	; 18/12/2022
 41747                                  	; cx = 0
 41748 0000789D B107                    	mov	cl,7
 41749                                  	;mov	cx,7		; There are 7 entries in the instance table
 41750                                  				; M019
 41751                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 41752 0000789F BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 41753                                  Instance_init_loop:
 41754 000078A2 8C1C                    	mov	[si],ds		; set offset in instance entry
 41755                                  	;add	si,6
 41756 000078A4 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 41757 000078A7 E2F9                    	loop	Instance_init_loop
 41758                                  
 41759                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 41760                                  
 41761                                  	; 18/12/2022
 41762 000078A9 B105                    	mov	cl,5
 41763                                  	;mov	cx,5		; There are five entries in the instance table
 41764                                  
 41765                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 41766                                  	;mov	si,11EDh	; point si to segment field
 41767 000078AB BE[ED11]                	mov	si,OldInstanceJunk+6
 41768                                  OldInstance_init_loop:
 41769 000078AE 8C1C                    	mov	[si],ds		; set offset in instance entry
 41770 000078B0 83C606                  	add	si,6		; move on to next entry
 41771 000078B3 E2F9                    	loop	OldInstance_init_loop
 41772 000078B5 5E                      	pop	si		; restore pointer to device chain
 41773                                  
 41774                                  ; End of WIN386 2.xx compatibility bullshit
 41775                                  
 41776                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41777                                  %if 0	
 41778                                     	; 30/04/2019
 41779                                  	;push	es
 41780                                  	;pop	ds
 41781                                  			; ds:si points to console device
 41782                                  
 41783                                  	; 24/04/2019 - Retro DOS v4.0
 41784                                  
 41785                                  	; 15/07/2018
 41786                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 41787                                  	; (Set INT 2Ah handler address to an 'IRET')
 41788                                  
 41789                                  	; need crit vector inited to use deviocall
 41790                                  	;push	ds			; preserve segment of device chain
 41791                                  	push	es ; 30/04/2019
 41792                                  
 41793                                  %endif
 41794                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41795 000078B6 06                      	push	es
 41796                                  	; 17/12/2022
 41797                                  	;pop	ds
 41798                                  	;push	ds
 41799                                  
 41800 000078B7 31C0                    	xor	ax,ax
 41801 000078B9 8ED8                    	mov	ds,ax			; point DS to int vector table
 41802 000078BB B8[0E78]                	mov	ax,initiret
 41803                                  	;mov	[0A8h],ax  ; [2Ah*4]
 41804 000078BE A3A800                  	mov	[addr_int_ibm],ax
 41805 000078C1 8CC8                    	mov	ax,cs
 41806                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2]
 41807 000078C3 A3AA00                  	mov	[addr_int_ibm+2],ax
 41808 000078C6 1F                      	pop	ds			; restore segment of device chain
 41809                                  
 41810 000078C7 E81F02                  	call	CHARINIT  		; initialize console driver
 41811 000078CA 56                      	push	si			; save pointer to header
 41812                                  
 41813 000078CB 16                      	push	ss			; move pointer to dos data...
 41814 000078CC 07                      	pop	es			; ...into ES
 41815                                  
 41816                                  	;initialize sft for file 0 (CON)
 41817                                  
 41818                                          ; 07/07/2018 - Retro DOS v3.0
 41819                                  	; 24/04/2019 - Retro DOS v4.0
 41820                                  	;mov	di,SFTABL+6 
 41821 000078CD BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 41822 000078D0 B80300                          MOV     AX,3
 41823 000078D3 AB                              STOSW           	; Refcount
 41824 000078D4 FEC8                            DEC     AL
 41825 000078D6 AB                              STOSW           	; Access rd/wr, compatibility
 41826 000078D7 30C0                            XOR     AL,AL
 41827 000078D9 AA                              STOSB           	; attribute
 41828                                  	;mov	al,0C3h
 41829 000078DA B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 41830 000078DC AB                      	STOSW			; flags
 41831 000078DD 89F0                            mov	ax,si
 41832 000078DF AB                              stosw			; device pointer in devptr
 41833 000078E0 8CD8                            mov	ax,ds
 41834 000078E2 AB                      	stosw
 41835 000078E3 31C0                    	xor	ax,ax	; 0
 41836 000078E5 AB                      	stosw			; firclus
 41837 000078E6 AB                      	stosw			; time
 41838 000078E7 AB                      	stosw			; date
 41839 000078E8 48                      	dec	ax	; -1
 41840 000078E9 AB                      	stosw			; size
 41841 000078EA AB                      	stosw
 41842 000078EB 40                      	inc	ax	; 0
 41843 000078EC AB                      	stosw			; position
 41844 000078ED AB                      	stosw
 41845                                  	;add	di,7
 41846 000078EE 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 41847                                  				; point at name
 41848                                  	;add	si,10
 41849 000078F1 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 41850                                  				; point to name
 41851 000078F4 B90400                  	mov	cx,4
 41852 000078F7 F3A5                    	rep	movsw		; name
 41853 000078F9 B103                    	mov	cl,3
 41854 000078FB B020                    	mov	al," "
 41855 000078FD F3AA                    	rep	stosb		; extension
 41856                                  
 41857 000078FF 5E                      	pop	si		; get back pointer to header
 41858                                  
 41859                                  				; mark device as CON I/O
 41860                                  	; 15/07/2018
 41861                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 41862 00007900 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 41863                                  	; 12/03/2018
 41864                                  	;mov	[ss:32h],si
 41865 00007904 368936[3200]            	MOV     [SS:BCON],SI
 41866                                  	;mov	[ss:34h],ds
 41867 00007909 368C1E[3400]                    MOV     [SS:BCON+2],DS
 41868                                  
 41869                                  	; initialize each device until the clock device is found
 41870                                  
 41871                                  CHAR_INIT_LOOP:
 41872 0000790E C534                            LDS     SI,[SI]			; AUX device
 41873 00007910 E8D601                  	call	CHARINIT 
 41874                                         	;15/07/2018
 41875                                  	;test	byte [SI+4],8
 41876 00007913 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 41877 00007917 74F5                            JZ      SHORT CHAR_INIT_LOOP
 41878                                  	; 12/03/2018
 41879                                  	;mov	[ss:2Eh],si
 41880 00007919 368936[2E00]                    MOV     [SS:BCLOCK],SI
 41881                                  	;mov	[ss:30h],ds
 41882 0000791E 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 41883                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 41884                                  
 41885                                  	;mov	bp,4970			; bp = pointer to free mem
 41886                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 41887                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 41888                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 41889 00007923 BD6213                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 41890                                  
 41891 00007926 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 41892 0000792B 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 41893                                  PERDRV:
 41894                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 41895 00007930 C534                            LDS	SI,[SI]			; Next device
 41896 00007932 83FEFF                          CMP	SI,-1	; 0FFFFh
 41897 00007935 7479                    	JZ	SHORT CONTINIT
 41898                                  
 41899 00007937 E8AF01                          call	CHARINIT
 41900                                  
 41901                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 41902                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 41903                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 41904                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18)
 41905                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 41906                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 41907                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 41908                                  
 41909                                          ; 15/07/2018
 41910                                  	;test	word [SI+4],8000h		; DEVTYP
 41911                                          ; 17/12/2022
 41912                                  	;test	byte [SI+5],80h
 41913 0000793A F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 41914                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 41915 0000793E 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 41916                                  
 41917 00007940 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 41918 00007945 30ED                    	XOR     CH,CH
 41919                                          ; 07/07/2018
 41920                                  	;MOV	[SI+10],CL		; Number of units in name field
 41921 00007947 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname
 41922 0000794A 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 41923 0000794F 30F6                    	XOR     DH,DH
 41924 00007951 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 41925 00007956 1E                      	PUSH    DS
 41926 00007957 56                              PUSH    SI
 41927 00007958 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 41928                                  
 41929                                  PERUNIT:
 41930 0000795D 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 41931 0000795F 43                              INC     BX
 41932 00007960 43                              INC     BX                      ; On to next BPB
 41933                                  	; 15/12/2022
 41934                                  	; 07/07/2018
 41935                                          ;mov	[ES:BP+DPB.DRIVE],DL
 41936 00007961 26885600                	MOV     [ES:BP],DL
 41937                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41938                                  	;;mov	[ES:BP+0],DL
 41939                                  	;mov	[ES:BP+DPB.DRIVE],DL
 41940                                  
 41941                                  	;MOV	[ES:BP+1],DH
 41942 00007965 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 41943 00007969 53                              PUSH    BX
 41944 0000796A 51                              PUSH    CX
 41945 0000796B 52                              PUSH    DX
 41946                                  
 41947                                          ;invoke	$SETDPB
 41948 0000796C E8D996                          CALL	_$SETDPB		; build DPB!
 41949                                  
 41950                                  	; 07/07/2018
 41951                                  	;MOV	AX,[ES:BP+2]
 41952 0000796F 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 41953                                          ; 12/03/2018
 41954 00007973 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 41955 00007978 7604                    	JBE     SHORT NOTMAX		; N:
 41956 0000797A 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 41957                                  NOTMAX:					
 41958                                  	; set the next dpb field in the currently built bpb
 41959                                  	; and mark as never accessed
 41960                                          
 41961                                  	; 24/04/2019
 41962 0000797E 89E8                    	mov	ax,bp			; get pointer to DPB
 41963                                  	;add	ax,33
 41964 00007980 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 41965                                  					; set seg & offset of next DPB
 41966                                  	;mov	[es:bp+25],ax
 41967 00007983 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 41968                                  	;mov	[es:bp+27],es
 41969 00007987 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 41970                                  					; mark as never accessed
 41971                                  	;mov	byte [es:bp+24],0FFh
 41972 0000798B 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 41973                                  
 41974 00007990 5A                      	POP     DX
 41975 00007991 59                              POP     CX
 41976 00007992 5B                              POP     BX
 41977 00007993 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 41978 00007995 5E                              POP     SI
 41979 00007996 1F                              POP     DS
 41980                                  					; ds:si -> device header
 41981                                  					; store it in the corresponding dpb
 41982                                  	; 07/07/2018
 41983                                  	;MOV	[ES:BP+19],SI ; 24/04/2019
 41984 00007997 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 41985                                  	;MOV	[ES:BP+21],DS ; 24/04/2019
 41986 0000799B 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 41987                                  
 41988 0000799F 1E                      	PUSH	DS			; save pointer to device header
 41989 000079A0 56                      	PUSH	SI
 41990 000079A1 FEC6                    	INC	DH			; inc unit #
 41991 000079A3 FEC2                    	INC	DL			; inc drive #
 41992 000079A5 8ED8                    	MOV	DS,AX			; restore segment of BPB array
 41993                                  	;add	bp,33 ; 24/04/2019
 41994 000079A7 83C521                  	ADD	BP,DPBSIZ		; advance pointer to next dpb
 41995 000079AA E2B1                    	LOOP	PERUNIT			; process all units in each driver
 41996                                  
 41997 000079AC 5E                      	POP     SI			; restore pointer to device header
 41998 000079AD 1F                      	POP     DS
 41999 000079AE EB80                    	JMP	PERDRV			; process all drivers in chain
 42000                                  
 42001                                  CONTINIT:
 42002                                  	; 24/04/2019
 42003                                  	;sub	bp,33			; set link in last DPB to -1
 42004 000079B0 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 42005                                  					; set last link offset & segment
 42006                                  	;mov	word [bp+25],0FFFFh
 42007 000079B3 C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 42008                                  	;mov	word [bp+27],0FFFFh
 42009 000079B8 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 42010                                  	;add	bp,33
 42011 000079BD 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 42012                                  					; the DPB chain is done.
 42013 000079C0 16                      	push	ss
 42014 000079C1 1F                      	pop	ds
 42015                                  
 42016 000079C2 89E8                    	mov	ax,bp
 42017 000079C4 E84AFE                  	call	ParaRound		; round up to segment
 42018                                  
 42019 000079C7 8CDA                    	mov	dx,ds			; dx = dosdata segment
 42020 000079C9 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 42021                                  
 42022 000079CB BB0F00                  	mov	bx,0Fh
 42023                                  	
 42024                                  	; 24/05/2019
 42025                                  	;mov	cx,[ENDMEM]
 42026                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42027                                  	; 17/12/2022
 42028                                  	;mov	cx,[ENDMEM] 
 42029                                  					; set seg inpacketto dosdata
 42030 000079CE 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 42031                                  
 42032                                  ; Patch in the segments of the interrupt vectors with current code segment.
 42033                                  ; Also patch in the segment of the pointers in the dosdata area.
 42034                                  ;
 42035                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 42036                                  ; calls were done. The procedure patch_misc_segments is called multiple
 42037                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 42038                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 42039                                  
 42040 000079D2 52                      	push	dx			; preserve first free segment
 42041                                  
 42042 000079D3 A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 42043 000079D6 8EC0                    	mov	es,ax			; es = segment of DOS
 42044 000079D8 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 42045                                  
 42046 000079DE E8E101                  	call	patch_vec_segments	; uses AX as doscode segment
 42047 000079E1 E81602                  	call	patch_misc_segments	; patch in segments for sharer and
 42048                                  					; other tables with seg in ES.
 42049                                  	; 17/12/2022
 42050                                  	; cx = 0
 42051 000079E4 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 42052                                  
 42053 000079E8 5A                      	pop	dx			; restore first free segment
 42054                                  
 42055                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 42056                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 42057                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 42058                                  ; low_mem_stub by seg_reinit.
 42059                                  
 42060                                  	;xor	ax,ax ; 0
 42061                                  	;mov	ds,ax
 42062                                  	;mov	es,ax
 42063                                  	; 17/12/2022
 42064                                  	; cx = 0
 42065                                  	;xor	cx,cx ; 0
 42066 000079E9 8ED9                    	mov	ds,cx
 42067 000079EB 8EC1                    	mov	es,cx
 42068                                  
 42069                                  	; set the segment of int 24 vector that was
 42070                                  	; left out by patch_vec_segments above.
 42071                                  
 42072                                  	; 17/12/2022
 42073                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42074                                  ;%if 0
 42075                                  	; 24/05/2019
 42076                                  	;;mov	di,90h
 42077                                  	;;mov	di,4*int_fatal_abort
 42078                                  	;mov	di,addr_int_fatal_abort
 42079 000079ED BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 42080                                  
 42081 000079F0 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 42082                                  	;mov	[di+2],ax  ; int 24h segment
 42083 000079F4 8905                    	mov	[di],ax ; 24/05/2019
 42084                                  
 42085                                  	;;mov	di,82h
 42086                                  	;mov	di,INTBASE+2
 42087                                  
 42088                                  ;%endif
 42089                                  	; 17/12/2022
 42090                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42091                                  	;;mov	di,90h
 42092                                  	;;mov	di,4*int_fatal_abort
 42093                                  	;mov	di,addr_int_fatal_abort
 42094                                  	;mov	ax,[ss:TEMP_DOSLOC]
 42095                                  	;mov	[di+2],ax  ; int 24h segment
 42096                                  	;;mov	di,82h
 42097                                  	;mov	di,INTBASE+2
 42098                                  
 42099                                  	; set default divide trap offset
 42100                                  
 42101                                  	;mov	word ptr ds:[0],offset doscode:divov
 42102 000079F6 C7060000[3353]          	mov	word [0],DIVOV	
 42103                                  
 42104                                  	; set vectors 20-28 and 2a-3f to point to iret.
 42105                                  
 42106                                  	;mov	di,80h
 42107 000079FC BF8000                  	mov	di,INTBASE
 42108                                  	;mov	ax,offset doscode:irett
 42109 000079FF B8[2103]                	mov	ax,IRETT
 42110                                  
 42111                                  	; 17/12/2022
 42112                                  	; cx = 0
 42113 00007A02 B109                    	mov	cl,9
 42114                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 42115                                  					;   sets offsets for ints 20h-28h
 42116                                  iset1:
 42117 00007A04 AB                      	stosw
 42118 00007A05 83C702                  	add	di,2
 42119 00007A08 E2FA                    	loop	iset1
 42120                                  
 42121 00007A0A 83C704                  	add	di,4			; skip vector 29h
 42122                                  
 42123                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 42124                                  ;					;   sets offsets for ints 2ah-2fh
 42125                                  ;iset2:
 42126                                  ;	stosw
 42127                                  ;	add	di,2
 42128                                  ;	loop	iset2
 42129                                  
 42130                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42131                                  ; patch_vec_segments above. So skip it.
 42132                                  
 42133                                  ;	add	di,8			; skip vector 30h & 31h 
 42134                                  
 42135                                  	;;;
 42136                                  	; 06/05/2019 - Retro DOS v4.0
 42137                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 42138                                  	; 17/12/2022
 42139 00007A0D B105                    	mov	cl,5 ; 28/06/2019
 42140                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42141                                  	;mov	cx,6
 42142                                  iset2:
 42143 00007A0F AB                      	stosw
 42144 00007A10 83C702                  	add	di,2
 42145 00007A13 E2FA                    	loop	iset2
 42146                                  
 42147                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42148                                  	; 17/12/2022
 42149 00007A15 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 42150                                  	;add	di,8
 42151                                  	;;;
 42152                                  
 42153                                  	; 17/12/2022
 42154 00007A18 B10E                    	mov	cl,14
 42155                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 42156                                  					;   sets offsets for ints 32h-3fh
 42157                                  iset3:
 42158 00007A1A AB                      	stosw
 42159 00007A1B 83C702                  	add	di,2
 42160 00007A1E E2FA                    	loop	iset3
 42161                                  
 42162                                  ;if installed
 42163                                  	; set the offset of int2f handler
 42164                                  	;mov	word [0BCh],INT2F
 42165 00007A20 C706BC00[5007]          	mov	word [02Fh*4],INT2F
 42166                                  	; set segment to doscode as we have to do int 2f to check for XMS
 42167 00007A26 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 42168                                  	;mov	[0BEh],ax
 42169 00007A2A A3BE00                  	mov	[(02Fh*4)+2],ax
 42170                                  ;endif
 42171                                  	; set up entry point call at vectors 30-31h. Note the segment of the
 42172                                  	; long jump will be patched in by seg_reinit
 42173                                  
 42174                                  	;mov	byte [C0h],0EAh
 42175 00007A2D C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 42176                                  	;mov	byte [C1h],CALL_ENTRY
 42177 00007A32 C706C100[2203]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 42178                                  
 42179 00007A38 C7068000[1B03]          	mov	word [addr_int_abort],QUIT	; INT 20h
 42180 00007A3E C7068400[4703]          	mov	word [addr_int_command],COMMAND ; INT 21h
 42181 00007A44 C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 42182 00007A4A 89168A00                	mov	word [addr_int_terminate+2],dx	
 42183 00007A4E C7069400[7A05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 42184 00007A54 C7069800[0106]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 42185 00007A5A C7069C00[7C62]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 42186                                  
 42187 00007A60 16                      	push	ss
 42188 00007A61 1F                      	pop	ds
 42189                                  	
 42190                                  	; 24/05/2019
 42191                                  	;push	ss
 42192                                  	;pop	es
 42193                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42194                                  	; 17/12/2022
 42195                                  	;push	ss
 42196                                  	;pop	es
 42197                                  
 42198 00007A62 52                      	push	dx			; remember address of arena
 42199                                  
 42200 00007A63 42                      	inc	dx			; leave room for arena header
 42201                                  	;mov	[330h],dx
 42202 00007A64 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 42203                                  
 42204 00007A68 31FF                    	xor	di,di			; point es:di at end of memory
 42205 00007A6A 8EC2                    	mov	es,dx			; ...where psp will be
 42206 00007A6C 31C0                    	xor	ax,ax
 42207                                  	;mov	cx,80h			; psp is 128 words
 42208                                  	; 17/12/2022
 42209 00007A6E B180                    	mov	cl,128 ; 28/06/2019
 42210                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42211                                  	;mov	cx,128
 42212                                  
 42213 00007A70 F3AB                    	rep	stosw			; zero out psp area
 42214 00007A72 A1[4603]                        mov     ax,[ENDMEM]
 42215                                  	
 42216                                  	; 17/12/2022
 42217                                  	; cx = 0
 42218 00007A75 E81E97                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 42219                                  
 42220                                  	; ds, es now point to PSP
 42221                                  
 42222 00007A78 16                      	push	ss
 42223 00007A79 1F                      	pop	ds
 42224                                  
 42225                                  	;mov	di,24
 42226 00007A7A BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 42227 00007A7D 31C0                    	xor	ax,ax
 42228 00007A7F AB                      	stosw
 42229 00007A80 AA                      	stosb				; 0,1 and 2 are con device
 42230 00007A81 B0FF                    	mov	al,0FFh
 42231                                  	;mov	cx,FILPERPROC-3 ; 17
 42232                                  	; 17/12/2022
 42233                                  	; cx = 4
 42234 00007A83 B111                    	mov	cl,FILPERPROC-3 ; 17
 42235 00007A85 F3AA                    	rep	stosb			; rest are unused
 42236                                  
 42237 00007A87 16                      	push	ss
 42238 00007A88 07                      	pop	es
 42239                                  					; must be set to print messages
 42240 00007A89 8C1E[2C00]              	mov	[SFT_ADDR+2],ds
 42241                                  
 42242                                  ; after this point the char device functions for con will work for
 42243                                  ; printing messages
 42244                                  
 42245                                  	; 24/04/2019 - Retro DOS v4.0
 42246                                  
 42247                                  ; 12/05/2019
 42248                                  ;
 42249                                  ;write_version_msg:
 42250                                  ;
 42251                                  ;	;if	(not ibm)
 42252                                  ;	;mov	si,offset doscode:header
 42253                                  ;	mov	si,HEADER
 42254                                  ;outmes:
 42255                                  ;	;lods	cs:byte ptr [si]
 42256                                  ;	cs
 42257                                  ;	lodsb
 42258                                  ;	cmp	al,"$"
 42259                                  ;	je	short outdone
 42260                                  ;	call	OUTT
 42261                                  ;	jmp	short outmes
 42262                                  ;outdone:
 42263                                  ;	push	ss			; out stomps on segments
 42264                                  ;	pop	ds
 42265                                  ;	push	ss
 42266                                  ;	pop	es
 42267                                  ;	;endif
 42268                                  
 42269                                  	; at this point es is dosdata
 42270                                  
 42271                                  	; Fill in the segment addresses of sysinitvar and country_cdpg
 42272                                  	; in sysinittable (ms_data.asm)
 42273                                  
 42274                                  	;mov	si,0D28h
 42275 00007A8D BE[280D]                	mov	si,SysInitTable
 42276                                  
 42277                                  	; 17/12/2022
 42278                                  	; ds = es = ss
 42279                                  
 42280                                  	; 17/12/2022
 42281                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42282                                  ;%if 0
 42283                                  	;;mov	[es:si+6],es
 42284                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42285                                  	;;mov	[es:si+2],es
 42286                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42287                                  	
 42288 00007A90 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 42289 00007A93 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 42290                                  
 42291                                  	; buffhead -> dosdata:hashinitvar 
 42292                                  
 42293                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42294 00007A96 8C06[3A00]              	mov	[BUFFHEAD+2],es
 42295                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42296                                  	;mov	si,6Dh
 42297 00007A9A BE[6D00]                	mov	si,HASHINITVAR
 42298                                  	;mov	[es:BUFFHEAD],si
 42299 00007A9D 8936[3800]              	mov	[BUFFHEAD],si
 42300                                  
 42301 00007AA1 5A                              pop     dx                      ; restore address of arena
 42302                                  
 42303                                  	;mov	[032Ch+2],dx
 42304 00007AA2 8916[2E03]                      mov     [DMAADD+2],dx
 42305                                  
 42306                                  	;mov	[es:arena_head],dx
 42307 00007AA6 8916[2400]              	mov	[arena_head],dx
 42308                                  
 42309                                  ;%endif
 42310                                  
 42311                                  ; 17/12/2022
 42312                                  %if 0
 42313                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42314                                  	;;;
 42315                                  	;mov	[es:si+6],es
 42316                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42317                                  	;mov	[es:si+2],es
 42318                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42319                                  
 42320                                  	; buffhead -> dosdata:hashinitvar 
 42321                                  
 42322                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42323                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42324                                  	;mov	si,6Dh
 42325                                  	mov	si,HASHINITVAR
 42326                                  	mov	[es:BUFFHEAD],si
 42327                                  
 42328                                          pop     dx                      ; restore address of arena
 42329                                  
 42330                                  	;mov	[032Ch+2],dx
 42331                                          mov     [DMAADD+2],dx
 42332                                  
 42333                                  	mov	[es:arena_head],dx
 42334                                  	;;;
 42335                                  %endif
 42336                                  
 42337 00007AAA 8EDA                            mov     ds,dx
 42338                                  
 42339                                  	;mov	byte [0],'Z'
 42340 00007AAC C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 42341                                          ;mov	word [1],0
 42342 00007AB1 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 42343                                  
 42344 00007AB7 36A1[4603]                      mov     ax,[ss:ENDMEM]
 42345 00007ABB 29D0                    	sub	ax,dx
 42346 00007ABD 48                              dec     ax
 42347 00007ABE A30300                          mov     [ARENA.SIZE],ax
 42348                                  
 42349                                  	; point to sft 0
 42350                                  
 42351                                  	;mov	di,offset dosdata:sftabl + sftable
 42352                                  	;mov	di,SFTABL+6
 42353 00007AC1 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 42354 00007AC4 B80300                          mov     ax,3
 42355 00007AC7 AB                              stosw           		; adjust refcount
 42356                                  
 42357                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 42358                                  
 42359                                  	;mov	di,offset dosdata:sysinittable
 42360                                  	;mov	di,0D28h
 42361 00007AC8 BF[280D]                	mov	di,SysInitTable	
 42362                                  
 42363 00007ACB 42                      	inc	dx			; advance dx from arena to psp
 42364 00007ACC 8EDA                    	mov	ds,dx			; point ds to psp
 42365                                  
 42366                                  					; pass the address os seg_reinit 
 42367                                  					; in dx
 42368 00007ACE BA[3C7B]                	mov	dx,seg_reinit
 42369 00007AD1 B9[8874]                	mov	cx,exepatch_start
 42370 00007AD4 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 42371                                  
 42372 00007AD8 B8[0E78]                	mov	ax,SYSBUF
 42373 00007ADB 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 42374                                  	
 42375 00007ADE 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 42376 00007AE3 368E16[8605]                    mov     ss,[ss:USER_SS]
 42377                                  
 42378 00007AE8 CB                              retf
 42379                                  
 42380                                  ;
 42381                                  ; END OF DOSINIT
 42382                                  ;
 42383                                  ;--------------------------------------------------------------------------
 42384                                  
 42385                                  CHARINIT:
 42386                                  	; 24/04/2019 - Retro DOS v4.0
 42387                                  	; 07/07/2018 - Retro DOS v3.0
 42388                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 42389 00007AE9 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 42390                                  	;mov	byte [ss:035Bh],0
 42391 00007AEF 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 42392                                  	;mov	byte [ss:035Ch],0
 42393 00007AF5 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 42394                                  	;mov	word [ss:035BD],0
 42395 00007AFB 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 42396 00007B02 06                              PUSH	ES
 42397 00007B03 53                              PUSH	BX
 42398 00007B04 50                              PUSH	AX
 42399 00007B05 BB[5A03]                        MOV	BX,DEVCALL
 42400                                          ;PUSH	CS
 42401 00007B08 16                      	PUSH	SS ; 30/04/2019
 42402 00007B09 07                              POP	ES
 42403 00007B0A E8E8CB                          CALL	DEVIOCALL2
 42404 00007B0D 58                      	POP	AX
 42405 00007B0E 5B                              POP	BX
 42406 00007B0F 07                              POP	ES
 42407 00007B10 C3                              RETN
 42408                                  
 42409                                  ; 25/04/2019 - Retro DOS v4.0
 42410                                  
 42411                                  ;-----------------------------------------------------------------------------
 42412                                  ;
 42413                                  ;	check_XMM: routine to check presence of XMM driver
 42414                                  ;
 42415                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 42416                                  ;
 42417                                  ;	USED:	none
 42418                                  ;
 42419                                  ;-----------------------------------------------------------------------------
 42420                                  
 42421                                  check_XMM: ; proc near
 42422                                  ;
 42423                                  ; determine whether or not an XMM driver is installed
 42424                                  ;
 42425 00007B11 50                      	push	ax
 42426                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 42427 00007B12 B80043                  	mov	ax,4300h
 42428 00007B15 CD2F                    	int	2Fh
 42429                                  		; - Multiplex - XMS - INSTALLATION CHECK
 42430                                  		; Return: AL = 80h XMS driver installed
 42431                                  		; AL <> 80h no driver
 42432 00007B17 3C80                    	cmp	al,80h			; Q: installed
 42433 00007B19 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 42434                                  ;
 42435                                  ; get the XMM control functions entry point, save it, we
 42436                                  ; need to call it later.
 42437                                  ;
 42438 00007B1B 53                      	push	bx
 42439 00007B1C 52                      	push	dx
 42440 00007B1D 1E                      	push	ds
 42441 00007B1E 06                      	push	es
 42442                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 42443 00007B1F B81043                  	mov	ax,4310h
 42444 00007B22 CD2F                    	int	2Fh
 42445                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 42446                                  		; Return: ES:BX -> driver entry point
 42447                                  
 42448 00007B24 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42449                                  
 42450 00007B29 891E[6311]              	mov	[XMMcontrol],bx
 42451 00007B2D 8C06[6511]              	mov	[XMMcontrol+2],es
 42452                                  cXMMexit:
 42453 00007B31 F8                      	clc
 42454 00007B32 07                      	pop	es
 42455 00007B33 1F                      	pop	ds
 42456 00007B34 5A                      	pop	dx
 42457 00007B35 5B                      	pop	bx
 42458 00007B36 58                      	pop	ax
 42459 00007B37 C3                      	retn				; done
 42460                                  ;
 42461                                  ; set carry if XMM driver not present
 42462                                  ;
 42463                                  cXMM_no_driver:
 42464 00007B38 F9                      	stc
 42465 00007B39 58                      	pop	ax
 42466 00007B3A C3                      	retn
 42467                                  
 42468                                  ;-----------------------------------------------------------------------------
 42469                                  ;
 42470                                  ; Procedure Name : seg_reinit
 42471                                  ;
 42472                                  ; Inputs	 : ES has final dos code location
 42473                                  ;		   AX = 0 / 1
 42474                                  ;
 42475                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 42476                                  ;		   if AX =0
 42477                                  ;		      if first entry
 42478                                  ;			 patch segment & offset of vectors with stub
 42479                                  ;			 and stub with segment in ES
 42480                                  ;		      else
 42481                                  ;			 patch stub with segment in ES
 42482                                  ;
 42483                                  ;		   else if AX = 1
 42484                                  ;			patch segment of vectors with segment in ES	
 42485                                  ;
 42486                                  ; NOTE		 : This routine can be called at most twice!
 42487                                  ;
 42488                                  ; Regs Mod.	 : es, ax, di, cx, bx
 42489                                  ;-----------------------------------------------------------------------------
 42490                                  
 42491 00007B3B 00                      num_entry: db	0		; keeps track of the # of times this routine
 42492                                  				; has been called. (0 or 1)
 42493                                  
 42494                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 42495                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 42496                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 42497                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 42498                                  
 42499                                  seg_reinit:	; proc	far
 42500 00007B3C 1E                      	push	ds
 42501                                  
 42502 00007B3D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42503                                  
 42504 00007B42 E8B500                  	call	patch_misc_segments	; patch in segments for sharer and 
 42505                                  					; other tables with seg in ES.
 42506                                  	; 17/12/2022
 42507                                  	; cx = 0
 42508 00007B45 39C8                    	cmp	ax,cx ; 0
 42509                                  	;cmp	ax,0
 42510 00007B47 756C                    	jne	short patch_vec_seg	; patch vectors with segment in es
 42511                                  
 42512                                  	; 17/12/2022
 42513 00007B49 2E380E[3B7B]            	cmp	[cs:num_entry],cl ; 0
 42514                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 42515 00007B4E 7508                    	jne	short second_entry	; N: just patch the stub with 
 42516                                  					;    segment in ES
 42517                                  					; Y: patch the vectors with stub 
 42518 00007B50 8CD8                    	mov	ax,ds
 42519 00007B52 E86D00                  	call	patch_vec_segments	; patch the segment of vectors
 42520 00007B55 E8EC00                  	call	patch_offset		; patch the offsets of vectors 
 42521                                  					; with those in the stub.
 42522                                  	; 17/12/2022
 42523                                  	; cx = 0
 42524                                  second_entry:
 42525 00007B58 8CC0                    	mov	ax,es			; patch the stub with segment in es
 42526                                  
 42527                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 42528                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 42529 00007B5A BF[6210]                	mov	di,DOSINTTABLE
 42530                                  	; 17/12/2022
 42531                                  	; cx = 0
 42532                                  	;mov	cx,9
 42533 00007B5D B109                    	mov	cl,9
 42534 00007B5F 1E                      	push	ds			
 42535 00007B60 07                      	pop	es			; es:di -> DOSINTTABLE
 42536                                  
 42537                                  dosinttabloop:
 42538 00007B61 83C702                  	add	di,2
 42539 00007B64 AB                      	stosw
 42540 00007B65 E2FA                    	loop	dosinttabloop	
 42541                                  
 42542                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 42543                                  ; use the HMA, so we don't want to check CS
 42544                                  
 42545                                  ;ifndef ROMDOS
 42546 00007B67 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 42547 00007B6A 724E                    	jb	short sr_done		; N: done
 42548                                  ;endif
 42549 00007B6C E8A2FF                  	call	check_XMM		; Y: set up the XMS entry point
 42550 00007B6F 7249                    	jc	short sr_done		; failed to set up XMS do not do
 42551                                  					; A20 toggling in the stub.
 42552                                  	; 17/12/2022
 42553                                  	; cx = 0
 42554 00007B71 E84B01                  	call	patch_in_nops		; enable the stub to check A20 state
 42555                                  ; M021-
 42556                                  	;mov	byte [1211h],1
 42557 00007B74 C606[1112]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 42558                                  				
 42559                                  					; set pointer to the routine that 
 42560                                  					; patches buggy exepacked code.
 42561                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 42562 00007B79 C706[1212][D875]        	mov	word [FixExePatch],ExePatch
 42563                                  					; M068: set pointer to the routine 
 42564                                  					; M068: that detects copy protected
 42565                                  					; M068: apps
 42566                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 42567 00007B7F C706[6100][D877]        	mov	word [ChkCopyProt],IsCopyProt
 42568                                  
 42569                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 42570                                  
 42571                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42572                                  ;
 42573                                  ;; M020 - begin
 42574                                  ;
 42575                                  ;	call	WhatCPUType
 42576                                  ;	cmp	al,1
 42577                                  ;	jne	short sr_done 		; we need Rational Patch only
 42578                                  ;					;  on 286 systems
 42579                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 42580                                  ;	mov	word [RationalPatchPtr],RationalPatch
 42581                                  ;
 42582                                  ;; M020 - end
 42583                                  ;
 42584                                  ;	jmp	short sr_done
 42585                                  ;
 42586                                  ;patch_vec_seg:				; patch vectors with segment in es
 42587                                  ;	mov	ax,es
 42588                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 42589                                  ;					; NOTE we don't have to patch the 
 42590                                  ;					; offsets as they have been already
 42591                                  ;					; set to the doscode offsets at
 42592                                  ;					; DOSINIT.
 42593                                  ;sr_done:
 42594                                  ;	mov	byte [cs:num_entry],1
 42595                                  ;	pop	ds
 42596                                  ;	retf	; ! far return !
 42597                                  
 42598                                  ;----------------------------------------------------------------------------
 42599                                  ;
 42600                                  ; Procedure Name : WhatCPUType
 42601                                  ;
 42602                                  ; Inputs	 : none
 42603                                  ;
 42604                                  ; Outputs	 : AL = 0 if CPU <  286
 42605                                  ;		      = 1 if CPU == 286
 42606                                  ;		      = 2 if CPU >= 386
 42607                                  ;
 42608                                  ; Regs. Mod.	 : AX
 42609                                  ;
 42610                                  ;----------------------------------------------------------------------------
 42611                                  
 42612                                  WhatCPUType:
 42613                                  	; 25/04/2019 - Retro DOS v4.0
 42614                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 42615                                  
 42616                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 42617                                  
 42618                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 42619                                  ; 	it is called from both CODE and SYSINITSEG.
 42620                                  ;
 42621                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 42622                                  ;  Returns: AX = 0 if 8086 or 8088
 42623                                  ;              = 1 if 80286
 42624                                  ;              = 2 if 80386
 42625                                  
 42626                                  	; 04/11/2022
 42627                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 42628                                  
 42629                                  Get_CPU_Type:	;macro
 42630 00007B85 9C                      	pushf
 42631 00007B86 53                      	push	bx			; preserve bx
 42632 00007B87 31DB                    	xor	bx,bx			; init bx to zero
 42633                                  
 42634 00007B89 31C0                    	xor	ax,ax			; 0000 into AX
 42635 00007B8B 50                      	push	ax			; put it on the stack...
 42636 00007B8C 9D                      	popf				; ...then shove it into the flags
 42637 00007B8D 9C                      	pushf				; get it back out of the flags...
 42638 00007B8E 58                      	pop	ax			; ...and into ax
 42639 00007B8F 2500F0                  	and	ax,0F000h		; mask off high four bits
 42640 00007B92 3D00F0                  	cmp	ax,0F000h		; was it all 1's?
 42641 00007B95 740E                    	je	short cpu_8086		; aye; it's an 8086 or 8088
 42642                                  
 42643 00007B97 B800F0                  	mov	ax,0F000h		; now try to set the high four bits..
 42644 00007B9A 50                      	push	ax
 42645 00007B9B 9D                      	popf
 42646 00007B9C 9C                      	pushf
 42647 00007B9D 58                      	pop	ax			; ...and see what happens
 42648 00007B9E 2500F0                  	and	ax,0F000h		; any high bits set ?
 42649 00007BA1 7401                    	jz	short cpu_286		; nay; it's an 80286
 42650                                  
 42651                                  cpu_386:				; bx starts as zero
 42652 00007BA3 43                      	inc	bx			; inc twice if 386
 42653                                  cpu_286:				; just inc once if 286
 42654 00007BA4 43                      	inc	bx
 42655                                  cpu_8086:				; don't inc at all if 086
 42656 00007BA5 89D8                    	mov	ax,bx			; put CPU type value in ax
 42657 00007BA7 5B                      	pop	bx			; restore original bx
 42658 00007BA8 9D                      	popf
 42659                                  	
 42660                                  	;endm
 42661                                  
 42662                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 42663                                  	;retn
 42664                                  
 42665                                  	; 04/11/2022
 42666                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 42667 00007BA9 3C01                    	cmp	al,1
 42668 00007BAB 750D                    	jne	short sr_done 		; we need Rational Patch only
 42669                                  					;  on 286 systems
 42670 00007BAD C706[1412][1577]        	mov	word [RationalPatchPtr],RationalPatch
 42671                                  
 42672 00007BB3 EB05                    	jmp	short sr_done
 42673                                  
 42674                                  patch_vec_seg:				; patch vectors with segment in es
 42675 00007BB5 8CC0                    	mov	ax,es
 42676 00007BB7 E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 42677                                  					; NOTE we don't have to patch the 
 42678                                  					; offsets as they have been already
 42679                                  					; set to the doscode offsets at
 42680                                  					; DOSINIT.
 42681                                  sr_done:
 42682 00007BBA 2EC606[3B7B]01          	mov	byte [cs:num_entry],1
 42683 00007BC0 1F                      	pop	ds
 42684 00007BC1 CB                      	retf	; ! far return !
 42685                                  
 42686                                  ;----------------------------------------------------------------------------
 42687                                  ;
 42688                                  ; Procedure Name : patch_vec_segments
 42689                                  ;
 42690                                  ; Inputs	 : ax -> has segment address to patch in
 42691                                  ;		   ds -> DOSDATA
 42692                                  ;
 42693                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 42694                                  ;			
 42695                                  ;			0,20-28,3a-3f
 42696                                  ;
 42697                                  ; Regs. Mod.	 : DI,CX,DX,AX
 42698                                  ;
 42699                                  ;----------------------------------------------------------------------------
 42700                                  
 42701                                  patch_vec_segments:
 42702                                  
 42703 00007BC2 06                      	push	es
 42704                                  
 42705 00007BC3 31C9                    	xor	cx,cx ; 0
 42706 00007BC5 8EC1                    	mov	es,cx
 42707                                  
 42708                                  	;mov	di,82h
 42709 00007BC7 BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 42710                                  
 42711 00007BCA 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 42712                                  
 42713                                  					; set vectors 20 & 21
 42714                                  	; 04/11/2022
 42715                                  	;mov	cx,2
 42716                                  	; 17/12/2022
 42717                                  	;mov	cl,2
 42718                                  ps_set1:
 42719 00007BCE AB                      	stosw	; int 20h segment
 42720                                  	;add	di,2
 42721                                  	; 17/12/2022
 42722 00007BCF 47                      	inc	di
 42723 00007BD0 47                      	inc	di
 42724                                  	;loop	ps_set1
 42725                                  
 42726                                  	; 17/12/2022
 42727 00007BD1 AB                      	stosw	; int 21h segment
 42728                                  	;inc	di
 42729                                  	;inc	di
 42730                                  
 42731                                  	;add	di,4			; skip int 22h vector
 42732 00007BD2 83C706                  	add	di,6 ; *
 42733                                  
 42734 00007BD5 AB                      	stosw				; set int 23h
 42735 00007BD6 83C706                  	add	di,6			; skip int 24h
 42736                                  
 42737                                  					; set vectors 25-28 and 2a-3f
 42738                                  	; 04/11/2022
 42739                                  	;mov	cx,4			; set 4 segments
 42740                                  	; 17/12/2022
 42741 00007BD9 B104                    	mov	cl,4
 42742                                  ps_set2:
 42743 00007BDB AB                      	stosw
 42744                                  	;add	di,2
 42745                                  	; 17/12/2022
 42746 00007BDC 47                      	inc	di
 42747 00007BDD 47                      	inc	di
 42748 00007BDE E2FB                    	loop	ps_set2
 42749                                  
 42750 00007BE0 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 42751                                  					;   already be set.
 42752                                  	; 04/11/2022
 42753                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 42754                                  	; 17/12/2022
 42755 00007BE3 B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 42756                                  ps_set3:
 42757 00007BE5 AB                      	stosw
 42758                                  	;add	di,2
 42759                                  	; 17/12/2022
 42760 00007BE6 47                      	inc	di
 42761 00007BE7 47                      	inc	di
 42762 00007BE8 E2FB                    	loop	ps_set3
 42763                                  
 42764                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42765                                  ; below. So skip it.
 42766                                  
 42767 00007BEA 83C708                  	add	di,8			; skip vector 30h & 31h 
 42768                                  	
 42769                                  	; 04/11/2022
 42770                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 42771                                  	; 17/12/2022
 42772 00007BED B10E                    	mov	cl,14			;  sets segs for ints 32h-3fh
 42773                                  ps_set4:
 42774 00007BEF AB                      	stosw
 42775                                  	;add	di,2
 42776                                  	; 17/12/2022
 42777 00007BF0 47                      	inc	di
 42778 00007BF1 47                      	inc	di
 42779 00007BF2 E2FB                    	loop	ps_set4
 42780                                  
 42781                                  ; set offset of int2f
 42782                                  
 42783                                  ;if installed
 42784                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 42785                                  ;endif
 42786                                  	;mov	[es:0C3h],ax
 42787 00007BF4 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 42788                                  	; 17/12/2022
 42789                                  	; cx = 0
 42790 00007BF8 07                      	pop	es
 42791 00007BF9 C3                      	retn
 42792                                  
 42793                                  ;---------------------------------------------------------------------------
 42794                                  ;
 42795                                  ; Procedure Name : patch_misc_segments
 42796                                  ;
 42797                                  ; Inputs	 : es = segment to patch in
 42798                                  ;		   ds = dosdata
 42799                                  ;
 42800                                  ; outputs	 : patches in the sharer and other tables in the dos
 42801                                  ;		   with right dos code segment in es
 42802                                  ;
 42803                                  ; Regs Mod	 : DI,SI,CX
 42804                                  ;
 42805                                  ;---------------------------------------------------------------------------
 42806                                  
 42807                                  patch_misc_segments:
 42808                                  
 42809 00007BFA 53                      	push	bx
 42810 00007BFB 06                      	push	es
 42811 00007BFC 50                      	push	ax
 42812                                  
 42813 00007BFD 8CC0                    	mov	ax,es			; ax - > DOS segment
 42814                                  	
 42815 00007BFF 1E                      	push	ds
 42816 00007C00 07                      	pop	es			; es -> DOSDATA
 42817                                  	
 42818                                  ; initialize the jump table for the sharer...
 42819                                  
 42820                                  	;mov	di,offset dosdata:jshare
 42821                                  	;mov	di,90h
 42822 00007C01 BF[9000]                	mov	di,JShare
 42823                                  	;mov	bx,[0AAAh]
 42824 00007C04 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 42825                                  					; table was patched during the first
 42826                                  					; call to this routine
 42827 00007C08 B90F00                  	mov	cx,15
 42828                                  jumptabloop:
 42829                                  	;add	di,2			; skip offset
 42830                                  	; 17/12/2022
 42831 00007C0B 47                      	inc	di
 42832 00007C0C 47                      	inc	di
 42833 00007C0D 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 42834 00007C10 7405                    	je	short share_patch	; Y: patch in sharer table
 42835                                  					; N: 
 42836 00007C12 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 42837 00007C15 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 42838                                  share_patch:
 42839 00007C17 AB                      	stosw				; drop in segment
 42840                                  no_share_patch:
 42841 00007C18 E2F1                    	loop	jumptabloop
 42842                                  					; BUGBUG patching the country info 
 42843                                  					; with dosdata can be done inline
 42844                                  					; in dosinit.
 42845                                  					; for dos 3.3 country info
 42846                                  					; table address
 42847                                  
 42848                                  	;mov	si,offset dosdata:country_cdpg
 42849                                  	;mov	si,122Ah   
 42850 00007C1A BE[2A12]                	mov	si,COUNTRY_CDPG
 42851                                  					; initialize double word
 42852                                  					; pointers with dosdata in ds
 42853                                  	;mov	[si+4Fh],ds
 42854                                  	;mov	[si+54h],ds
 42855                                  	;mov	[si+59h],ds
 42856                                  	;mov	[si+5Eh],ds
 42857                                  	;mov	[si+80h],ds
 42858                                  	;mov	[si+63h],ds
 42859 00007C1D 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 42860 00007C20 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 42861 00007C23 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 42862 00007C26 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 42863 00007C29 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 42864 00007C2D 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 42865                                  
 42866                                  					; fastopen routines are in doscode
 42867                                  					; so patch with doscode seg in ax
 42868                                  
 42869                                  	;mov	si,offset dosdata:fastopentable
 42870                                  	;mov	si,0D30h
 42871 00007C30 BE[300D]                	mov	si,FastOpenTable
 42872                                  
 42873                                  	; 17/12/2022
 42874                                  	; bx = [TEMP_DOSLOC]
 42875 00007C33 83FBFF                  	cmp	bx,-1
 42876                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 42877 00007C36 7405                    	je	short fast_patch	; Y: patch segment
 42878                                  	;mov	cx,[TEMP_DOSLOC]
 42879                                  					; Q: has fastopen patched in it's
 42880                                  					;    segment
 42881                                  	; 17/12/2022
 42882 00007C38 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 42883                                  	;;cmp	cx,[si+4]
 42884                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 42885 00007C3B 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 42886                                  
 42887                                  fast_patch:
 42888                                  	;mov	[si+4],ax
 42889 00007C3D 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 42890                                  no_fast_patch:
 42891                                  	; 17/12/2022
 42892                                  	; cx = 0
 42893 00007C40 58                      	pop	ax
 42894 00007C41 07                      	pop	es
 42895 00007C42 5B                      	pop	bx
 42896                                  
 42897 00007C43 C3                      	retn
 42898                                  
 42899                                  ;--------------------------------------------------------------------------
 42900                                  ;
 42901                                  ; Procedure Name : patch_offset
 42902                                  ; 
 42903                                  ; Inputs	 : NONE
 42904                                  ;
 42905                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 42906                                  ;		   0,20-28,3a-3f, and 30,31
 42907                                  ;
 42908                                  ;
 42909                                  ; Regs. Mod	 : AX,DI,CX
 42910                                  ;--------------------------------------------------------------------------
 42911                                  
 42912                                  patch_offset:
 42913 00007C44 06                      	push	es		; preserve es
 42914                                  
 42915 00007C45 31C0                    	xor	ax,ax
 42916 00007C47 8EC0                    	mov	es,ax
 42917                                  				; set default divide trap address
 42918                                  	;mov	word ptr es:[0],offset dosdata:ldivov
 42919                                  	;mov	word [es:0],108Ah
 42920 00007C49 26C7060000[8A10]        	mov	word [es:0],ldivov
 42921                                  
 42922                                  	;mov	di,80h
 42923 00007C50 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 42924                                  	;mov	ax,offset dosdata:lirett
 42925                                  	;mov	ax,10DAh
 42926 00007C53 B8[DA10]                	mov	ax,lirett
 42927                                  				; set vectors 20 & 21 to point to iret.
 42928                                  	; 17/12/2022
 42929                                  	; cx = 0
 42930                                  
 42931                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 42932                                  po_iset1:
 42933 00007C56 AB                      	stosw	; int 20h offset
 42934                                  	;add	di,2 ; *
 42935                                  	;loop	po_iset1
 42936                                  	; 17/12/2022
 42937 00007C57 47                      	inc	di
 42938 00007C58 47                      	inc	di
 42939 00007C59 AB                      	stosw	; int 21h offset
 42940                                  
 42941                                  	;add	di,4		; skip vector 22h
 42942                                  	; 17/12/2022
 42943 00007C5A 83C706                  	add	di,6 ; *
 42944                                  
 42945 00007C5D AB                      	stosw			; set offset of 23h
 42946                                  	;add	di,6		; skip 24h
 42947                                  	; 19/09/2023
 42948 00007C5E 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 42949                                  
 42950                                  				; set vectors 25-28 and 2a-3f to iret.
 42951                                  	; 04/11/2022
 42952                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 42953                                  	; 19/09/2023
 42954                                  	; 17/12/2022
 42955                                  	;mov	cl,4		; sets offsets for ints 25h-28h
 42956                                  po_iset2:
 42957 00007C61 AB                      	stosw		; set offset for int 28h ; 19/09/2023
 42958                                  	;add	di,2
 42959                                  	; 19/09/2023
 42960                                  	; 17/12/2022
 42961                                  	;inc	di
 42962                                  	;inc	di
 42963                                  	; 19/09/2023
 42964                                  	;loop	po_iset2
 42965                                  
 42966                                  	;add	di,4		; skip vector 29h
 42967                                  	; 19/09/2023
 42968 00007C62 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 42969                                  
 42970                                  	; 04/11/2022
 42971                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 42972                                  	; 17/12/2022
 42973                                  	;mov	cl,6		; sets offsets for ints 2ah-2fh
 42974 00007C65 B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 42975                                  po_iset3:
 42976 00007C67 AB                      	stosw
 42977                                  	;add	di,2
 42978                                  	; 17/12/2022
 42979 00007C68 47                      	inc	di
 42980 00007C69 47                      	inc	di
 42981 00007C6A E2FB                    	loop	po_iset3
 42982                                  
 42983                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 42984                                  ; below. So skip it.
 42985                                  
 42986                                  	;add	di,8		; skip vector 30h & 31h
 42987                                  	; 17/12/2022
 42988 00007C6C 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 42989                                  
 42990                                  	; 04/11/2022
 42991                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 42992                                  				;  sets offsets for ints 32h-3fh
 42993                                  	; 17/12/2022
 42994 00007C6F B10E                    	mov	cl,14 ; 26/06/2019
 42995                                  po_iset4:
 42996 00007C71 AB                      	stosw
 42997                                  	;add	di,2
 42998                                  	; 17/12/2022
 42999 00007C72 47                      	inc	di
 43000 00007C73 47                      	inc	di
 43001 00007C74 E2FB                    	loop	po_iset4
 43002                                  
 43003                                  ;if installed
 43004                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 43005                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 43006 00007C76 26C706BC00[C610]        	mov	word [es:(2Fh*4)],lint2f
 43007                                  ;endif
 43008                                  
 43009                                  ; set up entry point call at vectors 30-31h
 43010                                  	;mov	byte [es:0C0h],0EAh
 43011 00007C7D 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 43012                                  	;mov	word [es:0C1h],10D0h
 43013                                  
 43014 00007C83 26C706C100[D010]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 43015                                  
 43016                                  							; 19/09/2023
 43017                                  	;mov	word [es:80h],1094h
 43018 00007C8A 26C7068000[9410]        	mov	word [es:addr_int_abort],lquit		; int 20h
 43019                                  	;mov	word [es:84h],109Eh
 43020 00007C91 26C7068400[9E10]        	mov	word [es:addr_int_command],lcommand	; int 21h
 43021                                  	;mov	word [es:94h],10A8h
 43022 00007C98 26C7069400[A810]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 43023                                  	;mov	word [es:98h],10B2h
 43024 00007C9F 26C7069800[B210]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 43025                                  	;mov	word [es:9Ch],10BCh
 43026 00007CA6 26C7069C00[BC10]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 43027                                  
 43028                                  	; 17/12/2022
 43029                                  	; CX = 0
 43030 00007CAD 07                      	pop	es		; restore es
 43031 00007CAE C3                      	retn
 43032                                  
 43033                                  ;--------------------------------------------------------------------------
 43034                                  ;
 43035                                  ; 	Procedure Name	:	patch_in_nops
 43036                                  ;
 43037                                  ; 	Entry		: 	ES -> DOSDATA
 43038                                  ;
 43039                                  ;	Regs Mod	: 	cx, di
 43040                                  ;
 43041                                  ;	Description:
 43042                                  ;		This routine patches in 2 nops at the offsets specified in 
 43043                                  ;	patch_table. This basically enables the low mem stub to start 
 43044                                  ;	making XMS calls.
 43045                                  ;
 43046                                  ;--------------------------------------------------------------------------
 43047                                  
 43048                                  	; 04/11/2022
 43049                                  	; (MSDOS 5.0 MSDOS.SYS)
 43050                                  	; DOSCODE:0BC50h
 43051                                  
 43052                                  patch_table:	; label	byte
 43053                                  	;dw	offset dosdata:i0patch
 43054                                  	;dw	offset dosdata:i20patch
 43055                                  	;dw	offset dosdata:i21patch
 43056                                  	;dw	offset dosdata:i25patch
 43057                                  	;dw	offset dosdata:i26patch
 43058                                  	;dw	offset dosdata:i27patch
 43059                                  	;dw	offset dosdata:i2fpatch
 43060                                  	;dw	offset dosdata:cpmpatch
 43061 00007CAF [8A10]                  	dw	i0patch
 43062 00007CB1 [9410]                  	dw	i20patch
 43063 00007CB3 [9E10]                  	dw	i21patch
 43064 00007CB5 [A810]                  	dw	i25patch
 43065 00007CB7 [B210]                  	dw	i26patch
 43066 00007CB9 [BC10]                  	dw	i27patch
 43067 00007CBB [C610]                  	dw	i2fpatch
 43068 00007CBD [D010]                  	dw	cpmpatch
 43069                                  
 43070                                  patch_table_size equ ($-patch_table)/2
 43071                                  
 43072                                  patch_in_nops:
 43073 00007CBF 50                      	push	ax
 43074 00007CC0 56                      	push	si
 43075 00007CC1 BE[AF7C]                	mov	si,patch_table
 43076 00007CC4 B89090                  	mov	ax,9090h ; nop, nop
 43077                                  	; 17/12/2022
 43078                                  	; cx = 0
 43079                                  	;mov	cx,8
 43080                                  	;mov	cx,patch_table_size ; 8
 43081 00007CC7 B108                    	mov	cl,patch_table_size ; 8
 43082                                  pin_loop:
 43083 00007CC9 2E8B3C                  	mov	di,[cs:si]
 43084 00007CCC AB                      	stosw
 43085                                  	;add	si,2
 43086                                  	; 17/12/2022
 43087 00007CCD 46                      	inc	si
 43088 00007CCE 46                      	inc	si
 43089 00007CCF E2F8                    	loop	pin_loop
 43090 00007CD1 5E                      	pop	si
 43091 00007CD2 58                      	pop	ax
 43092 00007CD3 C3                      	retn
 43093                                  
 43094                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43095                                  ; ---------------------------------------------------------------------------
 43096                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 43097                                  ; ---------------------------------------------------------------------------
 43098                                  
 43099                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 43100                                  DOSCODE_END:
 43101                                  	;times	9 db 0	; db 9 dup(0)
 43102                                  	; 18/12/2022
 43103                                  	;dw	0  ;	times 2 db 0
 43104                                  	; 23/03/2024
 43105 00007CD4 00<rep 6h>              	times	6 db 0
 43106                                  
 43107                                  ;align 16
 43108                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 43109                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 43110                                  
 43111                                  ; ---------------------------------------------------------------------------
 43112                                  
 43113                                  
 43114                                  ;memstrt label word
 43115                                  ; ---------------------------------------------------------------------------
 43116                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 43117                                  ; ---------------------------------------------------------------------------
 43118                                  
 43119                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 43120                                  
 43121                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 43122                                  ; the dos initialization segment
 43123                                  
 43124                                  ;ifndef ROMDOS
 43125                                  
 43126                                  ;doscode ends
 43127                                  
 43128                                  ;else
 43129                                  
 43130                                  ;;dosinitseg ends
 43131                                  
 43132                                  ;endif ; ROMDOS
 43133                                  
 43134                                  ;============================================================================
 43135                                  
 43136                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 43137                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 43138                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 43139                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 43140                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 43141                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 43142                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 43143                                  
 43144                                  ;; burasý doscode sonu
 43145                                  
 43146                                  ;============================================================================
 43147                                  ; DOSDATA
 43148                                  ;============================================================================
 43149                                  ; 29/04/2019 - Retro DOS 4.0
 43150                                  
 43151                                  ;[BITS 16]
 43152                                  
 43153                                  ;[ORG 0]
 43154                                  
 43155                                  ; 25/04/2019 - Retro DOS v4.0
 43156                                  
 43157                                  ;============================================================================
 43158                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 43159                                  ;============================================================================
 43160                                  
 43161                                  ;align 16
 43162                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 43163                                  	; (4970 bytes for MSDOS 6.21)
 43164                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 43165                                  
 43166                                  ;============================================================================
 43167                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 43168                                  ;============================================================================
 43169                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43170                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 43171                                  ; 16/07/2018 - Retro DOS 3.0	
 43172                                  
 43173                                  ;Break <Initialized data and data used at DOS initialization>
 43174                                  ;----------------------------------------------------------------------------
 43175                                  
 43176                                  ; We need to identify the parts of the data area that are relevant to tasks
 43177                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 43178                                  ; data will be gathered with the system code. The process data under 2.x will
 43179                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43180                                  ;
 43181                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43182                                  ; describing that data item.
 43183                                  
 43184                                  ;DOSDATA SEGMENT
 43185                                  
 43186                                  ; 04/11/2022
 43187                                  ;[ORG 0]
 43188                                  
 43189                                  ; ----------------------------------------------------------------------------
 43190                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43191                                  ; ----------------------------------------------------------------------------
 43192                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 43193                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 43194                                  ; ----------------------------------------------------------------------------
 43195                                  
 43196                                  ; 04/11/2022
 43197                                  
 43198                                  ;DOSDATA:0000h
 43199                                  
 43200 00007CDA 90<rep 6h>              align 16
 43201                                  
 43202                                  ; ----------------------------------------------------------------------------
 43203                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43204                                  ; ----------------------------------------------------------------------------
 43205                                  
 43206                                  segment .data  vstart=0 ; 06/12/2022
 43207                                  								
 43208                                  ; ============================================================================
 43209                                  
 43210                                  ; 06/12/2022
 43211                                  ;DOSDATASTART equ $
 43212                                  DOSDATASTART:
 43213                                  
 43214                                  
 43215                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 43216                                  
 43217                                  	;; 03/11/2022
 43218                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 43219                                  
 43220                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43221                                  	;db	4 dup (?)	
 43222 00000000 00<rep 4h>              	times	4 db 0
 43223                                  
 43224                                  	; 29/04/2019 - Retro DOS v4.0 modification
 43225                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 43226                                  	;dw	0
 43227                                  
 43228                                  	;EVEN
 43229                                  
 43230                                  ;align 2
 43231                                  
 43232                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 43233                                  ; area compatability. This location must be incremented EACH TIME the data
 43234                                  ; area here gets mucked with.
 43235                                  ;
 43236                                  ; Also, do NOT change this position relative to DOSDATA:0.
 43237                                  
 43238                                  MSCT001S:	; LABEL BYTE
 43239                                  	
 43240                                  DataVersion:	
 43241 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 43242                                  
 43243                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 43244                                  ;hkn; been removed to DOSCODE above
 43245                                  
 43246                                  ;M044
 43247                                  ; First part of save area for saving last para of Window memory
 43248                                  
 43249                                  WinoldPatch1:	; db 8 dup (?)	;M044
 43250 00000006 00<rep 8h>              	times	8 db 0
 43251                                  
 43252                                  	; MSDOS 6.21 DOSDATA:000Eh
 43253                                  MYNUM:			; Offset 000Eh
 43254 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 43255                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 43256 00000010 0000                    	dw	0
 43257                                  OpenLRU:
 43258 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 43259                                  OEM_HANDLER: 		
 43260 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 43261                                  
 43262                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 43263                                  ;;			way that we leave DOS???? - jgl
 43264                                  
 43265                                  LeaveAddr:
 43266 00000018 [4C04]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 43267                                  RetryCount:		
 43268 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 43269                                  RetryLoop:
 43270 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 43271                                  LastBuffer:
 43272 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 43273                                  CONTPOS:
 43274 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 43275                                  arena_head:
 43276 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 43277                                  
 43278                                  ;; 16/07/2018
 43279                                  ;;***************************************************************************
 43280                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 43281                                  ;;***************************************************************************
 43282                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 43283                                  ;;
 43284                                  ;;	AH = 52h
 43285                                  ;;
 43286                                  ;;	on return:
 43287                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 43288                                  ;;		Known "invars" fields follow (varies with DOS version):
 43289                                  ;;
 43290                                  ;;	Offset Size		 Description
 43291                                  ;;
 43292                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 43293                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 43294                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 43295                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 43296                                  ;;		      0 indicates no unread input (DOS 3.x)
 43297                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 43298                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 43299                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 43300                                  ;;	  08   dword  pointer to $CLOCK device driver
 43301                                  ;;	  0C   dword  pointer to CON device driver
 43302                                  ;;	  10   byte   number of logical drives in system
 43303                                  ;;	  11   word   maximum bytes/block of any block device
 43304                                  ;;	  13   dword  pointer to DOS cache buffer header
 43305                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 43306                                  ;;		      point to the next device in device chain
 43307                                  ;;
 43308                                  ;;***************************************************************************
 43309                                  
 43310                                  ; The following block of data is used by SYSINIT. 
 43311                                  ; Do not change the order or size of this block
 43312                                  
 43313                                  ;SYSINITVAR:
 43314                                  ;----------------------------------------------------------------------------
 43315                                  SYSINITVARS:
 43316                                  DPBHEAD:
 43317 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 43318                                  SFT_ADDR:
 43319 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 43320                                  BCLOCK:
 43321 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 43322                                  BCON:
 43323 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 43324                                  MAXSEC:
 43325 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 43326                                  BUFFHEAD:
 43327 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 43328                                  CDSADDR:
 43329 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 43330                                  SFTFCB:
 43331 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 43332                                  KEEPCOUNT:
 43333 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 43334                                  NUMIO:
 43335 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 43336                                  CDSCOUNT:
 43337 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 43338                                  
 43339                                  ; A fake header for the NUL device
 43340                                  NULDEV:
 43341 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 43342                                  	;dw	8004h
 43343 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 43344 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 43345 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 43346 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 43347                                  SPLICES:
 43348 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 43349                                  
 43350                                  Special_Entries:
 43351 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 43352                                  UU_IFS_DOS_CALL:
 43353 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 43354                                  ; 
 43355                                  ; UU_IFS_HEADER:
 43356                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 43357                                  
 43358                                  ChkCopyProt:
 43359 00000061 0000                    	dw	0	; M068
 43360                                  A20OFF_PSP:
 43361 00000063 0000                    	dw	0	; M068
 43362                                  BUFFERS_PARM1:
 43363 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 43364                                  BUFFERS_PARM2:
 43365 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 43366                                  BOOTDRIVE:
 43367 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 43368                                  DDMOVE:
 43369 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 43370                                  EXT_MEM_SIZE:
 43371 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 43372                                  
 43373                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 43374                                  ;
 43375                                  ; Replaced by next two declarations
 43376                                  ;
 43377                                  ;UU_BUF_HASH_PTR:
 43378                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 43379                                  ;UU_BUF_HASH_COUNT:
 43380                                  ;	dw	1	; [SYSTEM] number of Hash entries
 43381                                  
 43382                                  BufferQueue:
 43383 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 43384                                  DirtyBufferCount:
 43385 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 43386                                  			; BUGBUG ---- change to byte
 43387                                  SC_CACHE_PTR:
 43388 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 43389                                  SC_CACHE_COUNT:
 43390 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 43391                                  BuffInHMA:
 43392 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 43393                                  LoMemBuff:
 43394 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 43395                                  			;  in Low mem when buffs are in HMA
 43396                                  ;
 43397                                  ; All variables which have UU_ as prefix can be reused for other
 43398                                  ; purposes and can be renamed. All these variables were used for
 43399                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 43400                                  ; manager ---- MOHANS
 43401                                  ;
 43402                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 43403                                  UU_BUF_EMS_FIRST_PAGE:	
 43404 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 43405                                  
 43406                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 43407                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 43408                                  ;	dw	0			
 43409                                  
 43410                                  CL0FATENTRY:
 43411 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 43412                                  			; is used in pack/unpack rts.
 43413                                  			; in fat.asm if cluster 0 is specified.
 43414                                  			; SR;
 43415                                  IoStatFail:
 43416 00000083 00                      	db	0	; IoStatFail has been added to 
 43417                                  			; record a fail on an I24 
 43418                                  			; issued from IOFUNC on a status call. 
 43419                                  
 43420                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 43421                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 43422                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 43423                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 43424                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 43425                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 43426                                  ;
 43427                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 43428                                  						; state of the 	buffers page.
 43429                                  						; This one byte is retained to 
 43430                                  						; keep the size of this data 
 43431                                  						; block the same.;
 43432                                  ALLOCMSAVE:
 43433 00000084 00                      	db	0	; M063: temp var. used to 
 43434                                  			; M063: save alloc method in
 43435                                  			; M063: msproc.asm
 43436                                  A20OFF_COUNT:
 43437 00000085 00                      	db	0	; M068: indiactes the # of 
 43438                                  			; M068: int 21 calls for 
 43439                                  			; M068: which A20 is off
 43440                                  DOS_FLAG:
 43441 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 43442                                  			; definitions
 43443                                  UNPACK_OFFSET:
 43444 00000087 0000                    	dw	0	; saves pointer to the start
 43445                                  			; of unpack code in exepatch.
 43446                                  			; asm.
 43447                                  UMBFLAG:
 43448 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 43449                                  			; M003: link state of the UMBs
 43450                                  			; M003: whether linked or not 
 43451                                  			; M003: to the DOS arena chain
 43452                                  SAVE_AX:
 43453 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 43454                                  			; M000: in msproc.asm
 43455                                  UMB_HEAD:
 43456 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 43457                                  			; M000: the first umb arena by 
 43458                                  			; M000: BIOS sysinit.
 43459                                  START_ARENA:
 43460 0000008E 0100                    	dw	1	; M000: this is the first arena 
 43461                                  			; M000: from which DOS will 
 43462                                  			; M000: start its scan for alloc.
 43463                                  
 43464                                  ; End of SYSINITVar block
 43465                                  ;----------------------------------------------------------------------------
 43466                                  
 43467                                  ; 25/04/2019 - Retro DOS v4.0
 43468                                  
 43469                                  ; 16/07/2018
 43470                                  ; MSDOS 3.3 (& MDOS 6.0)
 43471                                  
 43472                                  ;
 43473                                  ; Sharer jump table
 43474                                  ;
 43475                                  
 43476                                  ;PUBLIC	JShare
 43477                                  	;EVEN
 43478                                  
 43479                                  ;JShare	LABEL	DWORD
 43480                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 43481                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 43482                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 43483                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 43484                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 43485                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 43486                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 43487                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 43488                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 43489                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 43490                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 43491                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 43492                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 43493                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 43494                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 43495                                  
 43496                                  align 2
 43497                                  
 43498                                  JShare:
 43499 00000090 [4A07]0000              		DW	BadCall,0
 43500 00000094 [4E07]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 43501 00000098 [4E07]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 43502 0000009C [4A07]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 43503 000000A0 [4A07]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 43504 000000A4 [4A07]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 43505 000000A8 [4A07]0000              set_block:	DW	BadCall,0  ; 6   set_block
 43506 000000AC [4A07]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 43507 000000B0 [4E07]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 43508 000000B4 [4A07]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 43509 000000B8 [4A07]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 43510 000000BC [4A07]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 43511 000000C0 [4E07]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 43512 000000C4 [4A07]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 43513 000000C8 [4A07]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 43514                                  
 43515                                  
 43516                                  ;============================================================================
 43517                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 43518                                  ;============================================================================
 43519                                  ; 25/04/2019 - Retro DOS 4.0 
 43520                                  ; 16/07/2018 - Retro DOS 3.0	
 43521                                  
 43522                                  ;Break <Initialized data and data used at DOS initialization>
 43523                                  ;----------------------------------------------------------------------------
 43524                                  
 43525                                  ; We need to identify the parts of the data area that are relevant to tasks
 43526                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 43527                                  ; data will be gathered with the system code.  The process data under 2.x will
 43528                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43529                                  ;
 43530                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43531                                  ; describing that data item.
 43532                                  
 43533                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 43534                                  
 43535                                  ;
 43536                                  ; Table of routines for assignable devices
 43537                                  ;
 43538                                  ; MSDOS allows assignment if the following standard devices:
 43539                                  ;   stdin  (usually CON input)
 43540                                  ;   stdout (usually CON output)
 43541                                  ;   auxin  (usually AUX input)
 43542                                  ;   auxout (usually AUX output)
 43543                                  ;   stdlpt (usually PRN output)
 43544                                  ;
 43545                                  ; SPECIAL NOTE:
 43546                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 43547                                  ;   If we're not at end-of-file, then we always say that we have a character.
 43548                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 43549                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 43550                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 43551                                  ;   as EOF).
 43552                                  
 43553                                  ; Default SFTs for boot up
 43554                                  
 43555                                  		;PUBLIC	SFTABL
 43556                                  
 43557                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 43558 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 43559 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 43560 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 43561                                  		;times 295 db 0 ; MSDOS 6.0
 43562 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 43563                                  
 43564                                  ; the next two variables relate to the position of the logical stdout/stdin
 43565                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 43566                                  ; console.
 43567                                  		; DOSDATA:01F9h (MSDOS 6.21)
 43568 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 43569 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 43570                                  					;	   of buffered input call
 43571 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 43572 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 43573                                  		; DOSDATA:02FEh (MSDOS 6.21)
 43574 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 43575 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 43576 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 43577                                  switch_character:
 43578 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 43579 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 43580 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 43581 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 43582 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 43583                                  
 43584                                  ; The following table is a list of addresses that the sharer patches to be
 43585                                  ; PUSH AX to enable the critical sections
 43586                                  
 43587                                  		; DOSDATA:0315h (MSDOS 6.21)
 43588                                  
 43589                                  ;PUBLIC	CritPatch
 43590                                  
 43591                                  CritPatch:	; LABEL WORD
 43592                                  
 43593                                  ;IRP sect,<critDisk,critDevice>
 43594                                  
 43595                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 43596                                  ;
 43597                                  ;SR; Change code patch address to a variable in data segment
 43598                                  ;
 43599                                  ;       dw OFFSET DOSDATA: redir_patch
 43600                                  ;       dw OFFSET DOSDATA: redir_patch
 43601                                  ;
 43602                                  ;;hkn	Short_Addr  E&sect
 43603                                  ;;hkn	Short_Addr  L&sect
 43604                                  ;
 43605                                  ;ELSE
 43606                                  ;	DW	0
 43607                                  ;	DW	0
 43608                                  ;ENDIF
 43609                                  ;ENDM
 43610                                  ;	DW	0
 43611                                  
 43612                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 43613                                   
 43614 00000315 [0C0D]                  	dw 	redir_patch
 43615 00000317 [0C0D]                  	dw 	redir_patch			
 43616 00000319 [0C0D]                  	dw	redir_patch
 43617 0000031B [0C0D]                  	dw 	redir_patch
 43618                                  
 43619 0000031D 0000                    	dw	0
 43620                                  
 43621                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 43622                                  ; Also, IBM server 1.0 requires this also.
 43623                                  
 43624                                  	;EVEN			; Force swap area to start on word boundry
 43625 0000031F 90                      align 2
 43626                                  	;PUBLIC	SWAP_START
 43627                                  SWAP_START:	; LABEL BYTE
 43628 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 43629 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 43630 00000322 FF                      WPERR:		db -1		; Write protect error flag
 43631 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 43632 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 43633                                  
 43634                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 43635 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 43636 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 43637                                  ; end warning
 43638                                   
 43639 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 43640                                  
 43641 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 43642 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 43643 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 43644 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 43645 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 43646 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 43647                                  ;				; F.C. 2/17/86
 43648 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 43649 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 43650                                  ;align 2
 43651                                  SWAP_ALWAYS:	; 05/08/2018
 43652 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 43653                                  				;   extended error type stuff.
 43654                                  				;   NOTE: does not have Correct value on
 43655                                  				;   1-12, OEM, Get/Set CurrentPDB,
 43656                                  				;   GetExtendedError system calls)
 43657 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 43658 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 43659 00000340 0000                    FirstArena:	dw 0		; first free block found
 43660 00000342 0000                    BestArena:	dw 0		; best free block found
 43661 00000344 0000                    LastArena:	dw 0		; last free block found
 43662 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 43663 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 43664 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 43665 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 43666 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 43667 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 43668 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 43669                                  
 43670                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 43671                                  	;EVEN
 43672 0000034F 90                      align 2
 43673                                  		; DOSDATA:0350h (MSDOS 6.21)
 43674 00000350 00                      DAY:		db 0		; Day of month
 43675 00000351 00                      MONTH:		db 0		; Month of year
 43676 00000352 0000                    YEAR:		dw 0		; Year (with century)
 43677 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 43678 00000356 00                      WEEKDAY:	db 0		; Day of week
 43679                                  ; end warning
 43680                                  
 43681 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 43682 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 43683 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 43684                                  
 43685                                  ; Combination of all device call parameters
 43686                                  	;PUBLIC	DEVCALL 	;
 43687                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 43688                                  DEVCALL: ; 08/08/2018
 43689 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 43690 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 43691 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 43692 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 43693 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 43694                                  
 43695                                  	;PUBLIC	CALLUNIT
 43696                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 43697                                  CALLFLSH: ; LABEL   WORD	;
 43698 00000367 00                      CALLMED:	db 0		; media byte
 43699                                  CALLBR:	  ; LABEL   DWORD	;
 43700                                  	;PUBLIC	CALLXAD 	;
 43701                                  CALLXAD:  ; LABEL   DWORD	;
 43702 00000368 00                      CALLRBYT:	db 0		;
 43703                                  	;PUBLIC	CALLVIDM	;
 43704                                  CALLVIDM: ; LABEL   DWORD	;
 43705 00000369 00<rep 3h>              	times 3 db 0	;
 43706                                  	;PUBLIC CallBPB		;
 43707                                  CALLBPB:  ; LABEL   DWORD	;
 43708                                  CALLSCNT:			;
 43709 0000036C 0000                    		dw 0		;
 43710                                  	;PUBLIC	CALLSSEC	;
 43711                                  CALLSSEC: ; LABEL   WORD	;
 43712 0000036E 0000                    		dw 0		;
 43713 00000370 00000000                CALLVIDRW:	dd 0		;
 43714                                  ;MSDOS 6.0
 43715 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 43716 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 43717                                  
 43718                                  ; Same as above for I/O calls	;
 43719                                  				;
 43720                                  	;PUBLIC	IOCall		;
 43721                                  ;IOCALL	SRHEAD	<>		;
 43722                                  IOCALL:	; 07/08/2018
 43723 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 43724 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 43725 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 43726 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 43727 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 43728                                  IOFLSH:	  ; LABEL   WORD	;
 43729                                          ;PUBLIC  IORCHR		;
 43730                                  IORCHR:	  ; LABEL   BYTE	;
 43731 00000389 00                      IOMED:		db 0		;
 43732 0000038A 00000000                IOXAD:		dd 0		;
 43733 0000038E 0000                    IOSCNT:		dw 0		;	
 43734 00000390 0000                    IOSSEC:		dw 0		;
 43735                                  
 43736                                  ; Call struct for DSKSTATCHK	;
 43737 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 43738 00000393 00                      		db 0
 43739 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 43740 00000395 0000                    DSKSTST:	dw 0		;
 43741 00000397 00<rep 8h>              	times 8	db 0		;
 43742 0000039F 00                      DSKCHRET:	db 0		;
 43743                                  
 43744                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 43745                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 43746                                  ;hkn   short_addr  DEVIOBUF	;
 43747                                  	
 43748 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 43749 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 43750 000003A4 0100                    DSKSTCNT:	dw 1		;
 43751 000003A6 0000                    		dw 0		;
 43752                                  
 43753 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 43754                                  
 43755                                  ;MSDOS 6.0
 43756                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 43757 000003A9 00000000                		dd 0		;MS. position
 43758 000003AD 00000000                		dd 0		;MS. length
 43759                                  
 43760                                  ;hkn; the foll. was moved from dosmes.asm.
 43761                                  
 43762                                  	;EVEN
 43763 000003B1 90                      align 2				; needed to maintain offsets
 43764                                  
 43765                                  		; DOSDATA:03B2h (MSDOS 6.21)
 43766                                  USERNUM:
 43767 000003B2 0000                     		dw 0		; 24 bit user number
 43768 000003B4 00                      		db 0
 43769                                  ;IF IBM
 43770                                  ;IF IBMCOPYRIGHT
 43771                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 43772                                  ;ELSE
 43773                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 43774                                  ;ENDIF
 43775                                  ;ELSE
 43776 000003B5 FF                      OEMNUM:		DB 0FFh
 43777                                  ;ENDIF
 43778                                  
 43779                                  ;============================================================================
 43780                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 43781                                  ;============================================================================
 43782                                  ; 25/04/2019 - Retro DOS 4.0
 43783                                  
 43784                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 43785                                  ; ----------------------------------------------------------
 43786                                  ; This data section which was named as uninitialized data
 43787                                  ; (as overlayed by initialization code) but follows 
 43788                                  ; initialized data section from DOSDATA:03B6h address
 43789                                  ; (in otherwords, the method is different than MSDOS 3.3,
 43790                                  ; and there is not overlaying..)
 43791                                  ; **********************************************************
 43792                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 43793                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 43794                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 43795                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 43796                                  ; TIMEBUF is at offset 03B6h.
 43797                                  ; **********************************************************	
 43798                                  
 43799                                  ;Break <Uninitialized data overlayed by initialization code>
 43800                                  ;----------------------------------------------------------------------------
 43801                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 43802                                  ; Init code overlaps with data area below
 43803                                  
 43804                                  ; 	ORG     0
 43805                                  
 43806                                  MSDAT001S:	; label byte
 43807                                  
 43808                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 43809                                  TIMEBUF: ;	times 6 db 0
 43810 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 43811 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 43812                                  
 43813                                  ; The following areas are used as temp buffer in EXEC system call
 43814                                  
 43815                                  ; DOSDATA:03BEh
 43816                                  OPENBUF: ;times 64  dw	0
 43817 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 43818                                  RENBUF:	
 43819 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 43820                                  
 43821                                  ; Buffer for search calls
 43822                                  SEARCHBUF:	
 43823 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 43824                                  DUMMYCDS:  ;times 88 db 0
 43825 000004F3 00<rep 58h>             	times	curdirLen db 0
 43826                                  
 43827                                  ; End of contiguous buffer
 43828                                   
 43829                                  ; Temporary directory entry for use by many routines. Device directory
 43830                                  ; entries (bogus) are built here.
 43831                                  
 43832                                  ; DOSDATA:054Bh
 43833                                  
 43834                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 43835                                  
 43836                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 43837                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 43838                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 43839                                  
 43840                                  NAME1:	
 43841 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 43842                                  NAME2:
 43843 00000557 00<rep Dh>              	times	13 db	0 		;
 43844                                  DESTSTART:
 43845 00000564 0000                    	dw	0			;
 43846                                          ;DB	((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 43847                                  	;times	5  db	0
 43848 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 43849                                  
 43850                                  ; End Temporary directory entry.
 43851                                  
 43852 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 43853                                  EXTFCB:	
 43854 0000056C 00                      	db	0		; TRUE => extended FCB in use
 43855                                  SATTRIB:
 43856 0000056D 00                      	db	0		; Storage for search attributes
 43857                                  OPEN_ACCESS:
 43858 0000056E 00                      	db	0		; access of open system call
 43859                                  FOUNDDEL:
 43860 0000056F 00                      	db	0		; true => file was deleted
 43861                                  FOUND_DEV:
 43862 00000570 00                      	db	0		; true => search found a device
 43863                                  FSPLICE:
 43864 00000571 00                      	db	0		; true => do a splice in transpath
 43865                                  FSHARING:
 43866 00000572 00                      	db	0		; TRUE => no redirection
 43867                                  SECCLUSPOS:
 43868 00000573 00                      	db	0		; Position of first sector within cluster
 43869 00000574 00                      TRANS:	db	0		;
 43870 00000575 00                      READOP:	db	0		;
 43871                                  THISDRV:
 43872 00000576 00                      	db	0		;
 43873                                  CLUSFAC:
 43874 00000577 00                      	db	0		;
 43875                                  CLUSSPLIT:
 43876 00000578 00                      	db	0		;
 43877                                  INSMODE:
 43878 00000579 00                      	db	0		; true => insert mode in buffered read
 43879 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 43880 0000057B 00                      VOLID:	db	0		;
 43881                                  EXIT_TYPE:
 43882 0000057C 00                      	db	0		; type of exit...
 43883                                   
 43884                                  	;EVEN
 43885                                  
 43886 0000057D 90                      align 2
 43887                                  
 43888                                  ; DOSDATA:057Eh
 43889                                  
 43890                                  ; WARNING - the following two items are accessed as a word
 43891                                  
 43892                                  CREATING:
 43893 0000057E 00                      	db	0		; true => creating a file
 43894 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 43895                                  				; = DIRFREE iff BUGBUG
 43896                                  EXITHOLD:
 43897 00000580 00000000                	dd	0		; Temp location for proc terminate
 43898                                  USER_SP:
 43899 00000584 0000                    	dw	0		; User SP for system call
 43900                                  USER_SS:
 43901 00000586 0000                    	dw	0		; User SS for system call
 43902                                  CONTSTK:
 43903 00000588 0000                    	dw	0		;
 43904                                  THISDPB:
 43905 0000058A 00000000                	dd	0		;
 43906                                  CLUSSAVE:
 43907 0000058E 0000                    	dw	0		;
 43908                                  CLUSSEC:
 43909 00000590 00000000                	dd	0		;>32mb			AC0000
 43910                                  PREREAD:
 43911 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 43912 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 43913                                  FATBYTE:
 43914 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 43915                                  ; DOSDATA:059Ah
 43916 0000059A 00000000                DEVPT:	dd	0		;
 43917                                  THISSFT:
 43918 0000059E 00000000                	dd	0		; Address of user SFT
 43919                                  THISCDS:
 43920 000005A2 00000000                	dd	0		; Address of current CDS
 43921                                  THISFCB:
 43922 000005A6 00000000                	dd	0		; Address of user FCB
 43923 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 43924 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 43925 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 43926                                  WFP_START:
 43927 000005B2 0000                    	dw	0		;
 43928                                  REN_WFP:
 43929 000005B4 0000                    	dw	0		;
 43930                                  CURR_DIR_END:
 43931 000005B6 0000                    	dw	0		;
 43932                                  NEXTADD:
 43933 000005B8 0000                    	dw	0		;
 43934                                  LASTPOS:
 43935 000005BA 0000                    	dw	0		;
 43936                                  CLUSNUM:
 43937 000005BC 0000                    	dw	0		;
 43938 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 43939                                  DIRSTART:
 43940 000005C2 0000                    	dw	0		;
 43941 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 43942 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 43943                                                                  ; sectors
 43944                                  BYTSECPOS:
 43945 000005CC 0000                    	dw	0		; Position of first byte within sector
 43946                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 43947 000005CE 0000<rep 2h>                    times	2 dw 0
 43948                                  BYTCNT1:
 43949 000005D2 0000                    	dw	0		; No. of bytes in first sector
 43950                                  BYTCNT2:
 43951 000005D4 0000                    	dw	0		; No. of bytes in last sector
 43952 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 43953                                  ; DOSDATA:05D8h
 43954                                  ENTFREE:
 43955 000005D8 0000                    	dw	0		;
 43956                                  ENTLAST:
 43957 000005DA 0000                    	dw	0		;
 43958                                  NXTCLUSNUM:
 43959 000005DC 0000                    	dw	0		;
 43960                                  GROWCNT:
 43961 000005DE 00000000                	dd	0		;
 43962 000005E2 00000000                CURBUF:	dd	0		;
 43963 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 43964 000005EA 0000                    SAVEBX:	dw	0		;
 43965 000005EC 0000                    SAVEDS:	dw	0		;
 43966                                  RESTORE_TMP:
 43967 000005EE 0000                    	dw	0		; return address for restore world
 43968 000005F0 0000                    NSS:	dw	0
 43969 000005F2 0000                    NSP:	dw	0
 43970                                  ; DOSDATA:05F4h
 43971                                  EXTOPEN_FLAG:
 43972 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 43973                                  EXTOPEN_ON:
 43974 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 43975                                  EXTOPEN_IO_MODE:
 43976 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 43977                                  SAVE_DI:
 43978 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 43979                                  SAVE_ES:
 43980 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 43981                                  SAVE_DX:
 43982 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 43983                                  SAVE_CX:
 43984 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 43985                                  SAVE_BX:
 43986 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 43987                                  SAVE_SI:
 43988 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 43989                                  SAVE_DS:
 43990 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 43991                                  
 43992                                  ; DOSDATA:0607h
 43993                                  
 43994                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 43995                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 43996                                  ; the high 16, the low 16 are still in the register.
 43997                                  
 43998                                  HIGH_SECTOR:	
 43999 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 44000                                  ;OffsetMagicPatch:
 44001                                  ;	dw	MagicPatch ;scottq 8/6/92
 44002                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44003 00000609 0000                    	dw	0
 44004                                  				;see dos\mpatch.asm
 44005                                  DISK_FULL:
 44006 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 44007                                  TEMP_VAR:
 44008 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 44009                                  TEMP_VAR2:
 44010 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 44011 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 44012                                  DOS34_FLAG:
 44013 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 44014                                  NO_FILTER_PATH:
 44015 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 44016                                  NO_FILTER_DPATH:
 44017 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 44018                                  ; M008
 44019                                  AbsRdWr_SS:
 44020 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 44021                                  AbsRdWr_SP:
 44022 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 44023                                  
 44024                                  	; I_am  UU_Callback_flag,BYTE,<0>  ; Unused
 44025                                  ; M008
 44026                                  	; 24/03/2024
 44027                                  	; MSDOS 5.0 MSDOS.SYS - DOSDATA:061Fh
 44028                                  	; MSDOS 6.22 MSDOS.SYS - DOSDATA:061Fh
 44029 0000061F 00                      	db 	0
 44030                                   
 44031                                  ; make those pushes fast!!!
 44032                                  ;EVEN
 44033                                  
 44034                                  align 2
 44035                                  
 44036                                  StackSize   equ 180h  ; 384	; gross but effective
 44037                                  
 44038                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 44039                                  ;				; made up their minds about
 44040                                   
 44041                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 44042                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 44043                                  
 44044                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 44045                                   
 44046 00000620 00<rep 180h>                    times	StackSize db	0	;
 44047                                  AUXSTACK:			; LABEL   BYTE
 44048                                   
 44049 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 44050                                  DSKSTACK:			; LABEL   BYTE
 44051                                   
 44052 00000920 00<rep 180h>                    times	StackSize db	0	;
 44053                                  IOSTACK:			; LABEL   BYTE
 44054                                  
 44055                                  ; DOSDATA:0AA0h 
 44056                                   
 44057                                  ; patch space for Boca folks.
 44058                                  ; Say What????!!! This does NOT go into the swappable area!
 44059                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 44060                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 44061                                   
 44062                                  IBMPATCH: ; label byte
 44063                                  PRINTER_FLAG:
 44064 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 44065                                  VOLCHNG_FLAG:
 44066 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 44067                                  VIRTUAL_OPEN:
 44068 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 44069                                   
 44070                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 44071                                  
 44072                                  FSeek_drive:
 44073 00000AA3 00                      	db	0		;AN000; fastseek drive #
 44074                                  FSeek_firclus:
 44075 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 44076                                  FSeek_logclus:
 44077 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 44078                                  FSeek_logsave:
 44079 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 44080                                  
 44081                                  ; DOSDATA:0AAAh
 44082                                  
 44083                                  TEMP_DOSLOC:
 44084 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 44085                                  				;at SYSINIT time.
 44086                                  SWAP_END:  ; LABEL   BYTE
 44087                                   
 44088                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 44089                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 44090                                  ; to include this byte.
 44091                                   
 44092 00000AAC 00                      	db	0
 44093                                  
 44094                                  ; DOSDATA:0AADh
 44095                                   
 44096                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 44097                                  
 44098                                  ;DOSDATA    ENDS
 44099                                  
 44100                                  ;============================================================================
 44101                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 44102                                  ;============================================================================
 44103                                  ; 27/04/2019 - Retro DOS 4.0
 44104                                  ; 16/07/2018 - Retro DOS 3.0
 44105                                  
 44106                                  ;DOSDATA Segment
 44107                                  
 44108                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 44109                                  
 44110                                  ;
 44111                                  ; upper case table
 44112                                  ; ---------------------------------------------------------------------------
 44113                                  UCASE_TAB:	; label   byte
 44114 00000AAD 8000                    	dw	128
 44115 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 44116 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44117 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44118 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44119 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44120 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44121 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44122 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44123 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44124 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44125 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44126 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44127 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44128 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44129 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44130 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44131                                  ;
 44132                                  ; file upper case table
 44133                                  ; ---------------------------------------------------------------------------
 44134                                  FILE_UCASE_TAB:	; label  byte
 44135 00000B2F 8000                    	dw	128
 44136 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 44137 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44138 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44139 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44140 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44141 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44142 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44143 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44144 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44145 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44146 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44147 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44148 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44149 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44150 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44151 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44152                                  ;
 44153                                  ; file char list
 44154                                  ; ---------------------------------------------------------------------------
 44155                                  FILE_CHAR_TAB:	; label  byte
 44156 00000BB1 1600                    	dw	22				; length
 44157 00000BB3 0100FF                  	db	1,0,255 			; include all
 44158 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 44159 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 44159 00000BC2 7C3C3E2B3D3B2C     
 44160                                  	;db	24 dup (?)			; reserved
 44161 00000BC9 00<rep 18h>             	times	24 db 0
 44162                                  
 44163                                  ;
 44164                                  ; collate table
 44165                                  ; ---------------------------------------------------------------------------
 44166                                  COLLATE_TAB:	; label   byte
 44167 00000BE1 0001                    	dw	256
 44168 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 44169 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 44170 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 44171 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 44172 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 44173 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 44174 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 44175 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 44176 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 44177 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44178 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44179 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 44180 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 44181 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44182 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44183 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 44184 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 44185 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 44186 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 44187 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 44188 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 44189 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 44190 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44191 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44192 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44193 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44194 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44195 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44196 00000CC3 E053                    	db	224,"S"
 44197 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 44198 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44199 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44200 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44201                                  
 44202                                  ; ------------------------------------------------<MSKK01>----------------------
 44203                                  
 44204                                  ; DOSDATA:0CE3h
 44205                                  
 44206                                  ; 29/04/2019
 44207                                  
 44208                                  ; dbcs is not supported in DOS 3.3
 44209                                  ;		   DBCS_TAB	    CC_DBCS <>
 44210                                  ;
 44211                                  ; DBCS for DOS 4.00			   2/12/KK
 44212                                  
 44213                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 44214                                  ; ------------------------------------------------<MSKK01>----------------------
 44215                                  ;ifdef	DBCS
 44216                                  ; ifdef	  JAPAN
 44217                                  ;		dw	6		; <MSKK01>
 44218                                  ;		db	081h,09fh	; <MSKK01>
 44219                                  ;		db	0e0h,0fch	; <MSKK01>
 44220                                  ;		db	0,0		; <MSKK01>
 44221                                  ;
 44222                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 44223                                  ; endif
 44224                                  ; ifdef	  TAIWAN
 44225                                  ;		dw	4		; <TAIWAN>
 44226                                  ;		db	081h,0FEh	; <TAIWAN>
 44227                                  ;		db	0,0		; <TAIWAN>
 44228                                  ;
 44229                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44230                                  ; endif
 44231                                  ; ifdef   KOREA                         ; Keyl
 44232                                  ;               dw      4               ; <KOREA>
 44233                                  ;               db      0A1h,0FEh       ; <KOREA>
 44234                                  ;               db      0,0             ; <KOREA>
 44235                                  ;
 44236                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44237                                  ;  endif
 44238                                  ;else
 44239 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 44240                                  		;db	16 dup(0)	;AN000;  2/12/KK
 44241 00000CE5 00<rep 10h>             		times	16 db 0
 44242                                  
 44243                                  ;		dw	6		;  2/12/KK
 44244                                  ;		db	081h,09Fh	;  2/12/KK
 44245                                  ;		db	0E0h,0FCh	;  2/12/KK
 44246                                  ;		db	0,0		;  2/12/KK
 44247                                  ;
 44248                                  ;endif
 44249                                  ; ------------------------------------------------<MSKK01>----------------------
 44250                                  
 44251                                  ; DOSDATA:0CF5h
 44252                                  
 44253                                  ; ---------------------------------------------------------------------------
 44254                                  ;
 44255                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 44256                                  ;     ENTRY: AL = Character to map
 44257                                  ;     EXIT:  AL = The converted character
 44258                                  ; Alters no registers except AL and flags.
 44259                                  ; The routine should do nothing to chars below 80H.
 44260                                  ; ---------------------------------------------------------------------------
 44261                                  ; Example:
 44262                                  
 44263                                  MAP_CASE:
 44264                                  ;Procedure MAP_CASE,FAR
 44265                                  
 44266 00000CF5 3C80                    	CMP	AL,80h
 44267 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 44268 00000CF9 CB                      	RETF
 44269                                  Map1:
 44270 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 44271 00000CFC 1E                      	PUSH	DS
 44272 00000CFD 53                      	PUSH	BX
 44273 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 44274                                  FINISH:
 44275 00000D01 0E                      	PUSH	CS		;Move to DS
 44276 00000D02 1F                      	POP	DS
 44277 00000D03 D7                      	XLAT			;Get upper case character
 44278 00000D04 5B                      	POP	BX
 44279 00000D05 1F                      	POP	DS
 44280                                  L_RET:	
 44281 00000D06 CB                      	RETF
 44282                                  
 44283                                  ;EndProc MAP_CASE
 44284                                  
 44285                                  ; ---------------------------------------------------------------------------
 44286                                  
 44287                                  ; The variables for ECS version are moved here for the same data alignments
 44288                                  ; as IBM-DOS and MS-DOS.
 44289                                  
 44290                                  InterChar:
 44291 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 44292                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 44293                                  DUMMY:	; LABEL   WORD
 44294                                  InterCon:  
 44295 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 44296                                  SaveCurFlg:
 44297 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 44298                                  
 44299                                  ; ---------------------------------------------------------------------------
 44300                                  
 44301 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 44302                                  redir_patch:
 44303 00000D0C 00                      	  db	0
 44304                                  
 44305                                  ; DOSDATA:0D0Dh
 44306                                  
 44307                                  Mark1:	; label byte
 44308                                  
 44309                                  ;IF2
 44310                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 44311                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44312                                  ;	ENDIF
 44313                                  ;ENDIF
 44314                                  
 44315 00000D0D 00<rep 5h>              	  times 5 db 0
 44316                                  
 44317                                  ;############################################################################
 44318                                  ;
 44319                                  ; ** HACK FOR DOS 4.0 REDIR **
 44320                                  ; 
 44321                                  ; The redir requires the following:
 44322                                  ;
 44323                                  ;	MSVERS	offset D12H
 44324                                  ;	YRTAB	offset D14H
 44325                                  ; 	MONTAB	offset D1CH
 44326                                  ;
 44327                                  ; WARNING! WARNING!
 44328                                  ; 
 44329                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44330                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44331                                  ;
 44332                                  ; CURRENTLY MARK1 = 0D0DH
 44333                                  ;
 44334                                  ;############################################################################
 44335                                  
 44336                                  	;ORG	0D12h
 44337                                  
 44338                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 44339                                  
 44340                                  	;db	6
 44341                                  	;db	20
 44342                                  
 44343                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 44344                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 44345 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 44346 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 44347                                  
 44348                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 44349                                  ;
 44350                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 44351                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 44352                                  
 44353                                  ; Days in year
 44354                                  
 44355                                  YRTAB:   
 44356 00000D14 C8A6                    	DB	200,166			; Leap year
 44357 00000D16 C8A5                    	DB	200,165
 44358 00000D18 C8A5                    	DB	200,165
 44359 00000D1A C8A5                    	DB	200,165
 44360                                  
 44361                                  ; Days of each month
 44362                                  
 44363                                  MONTAB:        
 44364 00000D1C 1F                      	DB      31                      ; January
 44365                                  february:
 44366 00000D1D 1C                      	DB	28 			; February--reset each 
 44367                                  					; time year changes
 44368 00000D1E 1F                              DB      31                      ; March
 44369 00000D1F 1E                              DB      30                      ; April
 44370 00000D20 1F                              DB      31                      ; May
 44371 00000D21 1E                              DB      30                      ; June
 44372 00000D22 1F                              DB      31                      ; July
 44373 00000D23 1F                              DB      31                      ; August
 44374 00000D24 1E                              DB      30                      ; September
 44375 00000D25 1F                              DB      31                      ; October
 44376 00000D26 1E                              DB      30                      ; November
 44377 00000D27 1F                              DB      31                      ; December
 44378                                  
 44379                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 44380                                  
 44381                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 44382                                  
 44383                                  SysInitTable:
 44384                                  	;dw	SYSINITVAR
 44385 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 44386 00000D2A 0000                            dw      0		; segment
 44387 00000D2C [2A12]                          dw	COUNTRY_CDPG	; pointer to country tabl
 44388 00000D2E 0000                            dw      0		; segment of pointer
 44389                                  
 44390                                  ; DOS 3.3 F.C. 6/12/86
 44391                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 44392                                  
 44393                                  FastTable:				; a better name
 44394                                  FastOpenTable:
 44395 00000D30 0200                    	dw      2                       ; number of entries
 44396 00000D32 [1E13]                  	dw      FastRet			; pointer to ret instr.
 44397 00000D34 0000                    	dw      0                       ; and will be modified by
 44398 00000D36 [1E13]                  	dw      FastRet			; FASTxxx when loaded in
 44399 00000D38 0000                    	dw      0                       
 44400                                  
 44401                                  ; DOS 3.3 F.C. 6/12/86
 44402                                  
 44403                                  FastFlg:				; flags
 44404                                  FastOpenFlg:
 44405 00000D3A 00                      	db	0			; don't change the foll: order
 44406                                  
 44407                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 44408                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 44409                                  ; or filled by FastOPen when calling FastOpen Lookup
 44410                                  
 44411                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 44412                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 44413                                  	;times	11 db 0
 44414 00000D3B 00<rep Bh>              	times	FEI.size db 0
 44415                                  
 44416                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 44417                                  ; when calling FastOpen Lookup
 44418                                  
 44419                                  Dir_Info_Buff:	; label  byte
 44420                                  	;db	SIZE dir_entry dup (0)
 44421                                  	;times	32 db 0
 44422 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 44423                                  
 44424                                  Next_Element_Start:
 44425 00000D66 0000                    	dw	0			; save next element start offset
 44426                                  Del_ExtCluster:
 44427 00000D68 0000                    	dw	0			; for dos_delete
 44428                                  
 44429                                  ; The following is a stack and its pointer for interrupt 2F which is used
 44430                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 44431                                  ; not to destroy the INT 21 stack saved for the user.
 44432                                  
 44433                                  USER_SP_2F:	; LABEL  WORD
 44434 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 44435                                  
 44436                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 44437                                  DOS_TEMP:	; label  word		; temporary word
 44438                                  FAKE_STACK_2F:  
 44439                                  	;dw	14 dup (0)		; 12 register temporary storage
 44440 00000D6C 0000<rep Eh>            	times	14 dw 0
 44441                                  
 44442                                  Hash_Temp:	;label  word		; temporary word
 44443                                  	;dw	4 dup (0)		; temporary hash table during config.sys
 44444 00000D88 0000<rep 4h>            	times	4 dw 0
 44445                                              	
 44446                                  SCAN_FLAG:	
 44447 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 44448                                  DATE_FLAG:
 44449 00000D91 0000                    	dw     0                	; flag to update the date
 44450                                  
 44451                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 44452 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 44453                                  
 44454                                  MSG_EXTERROR:	; label  DWORD		; for system message addr
 44455 00000D95 00000000                	dd     0               		; for extended error
 44456 00000D99 00000000                	dd     0			; for parser
 44457 00000D9D 00000000                	dd     0			; for critical errror
 44458 00000DA1 00000000                	dd     0			; for IFS
 44459 00000DA5 00000000                	dd     0			; for code reduction
 44460                                  
 44461                                  SEQ_SECTOR:	; label  DWORD 		; last sector read
 44462 00000DA9 FFFFFFFF                	dd     -1
 44463                                  SC_SECTOR_SIZE:
 44464 00000DAD 0000                    	dw	0			; sector size for SC
 44465                                  SC_DRIVE:
 44466 00000DAF 00                      	db	0			; drive # for secondary cache
 44467                                  CurSC_DRIVE:
 44468 00000DB0 FF                      	db	-1			; current SC drive
 44469                                  CurSC_SECTOR:
 44470 00000DB1 00000000                	dd	0			; current SC starting sector
 44471                                  SC_STATUS:
 44472 00000DB5 0000                    	dw	0			; SC status word
 44473                                  SC_FLAG:
 44474 00000DB7 00                      	db	0			; SC flag
 44475                                  AbsDskErr:
 44476 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 44477                                  
 44478                                  NO_NAME_ID:	; label byte
 44479 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id
 44479 00000DC3 2020               
 44480                                  
 44481                                  ;hkn; moved from TABLE segment in kstrin.asm
 44482                                  
 44483                                  KISTR001S:	; label	byte		; 2/17/KK
 44484 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 44485                                  KISTR001E:	; label	byte		; 2/17/KK
 44486                                  
 44487                                  ; the nul device driver used to be part of the code. However, since the
 44488                                  ; header is in the data, and the entry points are only given as an offset,
 44489                                  ; the strategy and interrupt entry points must also be in the data now.
 44490                                  
 44491                                  ; DOSDATA:0DC6h
 44492                                  
 44493                                  SNULDEV:
 44494                                  ;procedure snuldev,far
 44495                                  	;or	word [es:bx+3],100h
 44496                                  	; 17/12/2022
 44497                                  	;or	byte [es:bx+4],01h
 44498                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 44499                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 44500 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 44501                                  INULDEV:
 44502 00000DCC CB                      	retf				; must not be a return!
 44503                                  ;endproc snuldev
 44504                                  
 44505                                  ;M044
 44506                                  ; Second part of save area for saving last para of Windows memory
 44507                                  
 44508                                  WinoldPatch2:
 44509                                  	;db	8 dup (?)	; M044
 44510 00000DCD 00<rep 8h>              	times	8 db 0	
 44511                                  UmbSave2:
 44512                                  	;db	5 dup (?)	; M062
 44513 00000DD5 00<rep 5h>              	times	5 db 0
 44514                                  UmbSaveFlag:
 44515 00000DDA 00                      	db	0		; M062
 44516                                  
 44517                                  ; DOSDATA:0DDBh
 44518                                  
 44519                                  Mark2:	; label byte
 44520                                  
 44521                                  ;IF2
 44522                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 44523                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44524                                  ;	ENDIF
 44525                                  ;ENDIF
 44526                                  
 44527                                  ;############################################################################
 44528                                  ;
 44529                                  ; ** HACK FOR DOS 4.0 REDIR **
 44530                                  ; 
 44531                                  ; The redir requires the following:
 44532                                  ;
 44533                                  ;	ERR_TABLE_21	offset DDBH
 44534                                  ;	ERR_TABLE_24	offset E5BH
 44535                                  ; 	ErrMap24	offset EABH
 44536                                  ;
 44537                                  ; WARNING! WARNING!
 44538                                  ;
 44539                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44540                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44541                                  ;
 44542                                  ; CURRENTLY MARK2 = 0DD0H
 44543                                  ;
 44544                                  ;############################################################################
 44545                                  
 44546                                  	;ORG	0DDBh
 44547                                  
 44548                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 44549                                  
 44550                                  ; ---------------------------------------------------------------------------
 44551                                  ;
 44552                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 44553                                  ; errors. Each entry is 4 bytes long:
 44554                                  ;
 44555                                  ;       Err#,Class,Action,Locus
 44556                                  ;
 44557                                  ; A value of 0FFh indicates a call specific value (ie. should already
 44558                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44559                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 44560                                  ;
 44561                                  ; ---------------------------------------------------------------------------
 44562                                  
 44563                                  ;ErrTab  Macro   err,class,action,locus
 44564                                  ;ifidn <locus>,<0FFh>
 44565                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 44566                                  ;ELSE
 44567                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 44568                                  ;ENDIF
 44569                                  ;ENDM
 44570                                  
 44571                                  ERR_TABLE_21: ; LABEL   BYTE
 44572 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 44573 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44574 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44575 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 44576 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 44577 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44578 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 44579 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44580 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44581 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44582 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44583 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44584 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 44585 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44586 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 44587 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 44588 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44589 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 44590 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44591 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44592 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 44593 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 44594 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 44595 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44596 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 44597 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44598 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 44599 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44600                                      ; MSDOS 6.0
 44601 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44602 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44603 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 44604 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 44605                                  
 44606                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 44607                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 44608                                  ;		db 2,8,3,2
 44609                                  ;		db 3,8,3,2
 44610                                  ;		db 4,1,4,1
 44611                                  ;		db 5,3,3,0FFh
 44612                                  ;		db 6,7,4,1
 44613                                  ;		db 7,7,5,5
 44614                                  ;		db 8,1,4,5
 44615                                  ;		db 9,7,4,5
 44616                                  ;		db 0Ah,7,4,5
 44617                                  ;		db 0Bh,9,3,1
 44618                                  ;		db 0Ch,7,4,1
 44619                                  ;		db 0Dh,9,4,1
 44620                                  ;		db 0Fh,8,3,2
 44621                                  ;		db 10h,3,3,2
 44622                                  ;		db 11h,0Dh,3,2
 44623                                  ;		db 12h,8,3,2
 44624                                  ;		db 50h,0Ch,3,2
 44625                                  ;		db 20h,0Ah,2,2
 44626                                  ;		db 21h,0Ah,2,2
 44627                                  ;		db 54h,1,4,0FFh
 44628                                  ;		db 56h,3,3,1
 44629                                  ;		db 52h,1,4,2
 44630                                  ;		db 32h,9,3,3
 44631                                  ;		db 55h,0Ch,3,3
 44632                                  ;		db 57h,9,3,1
 44633                                  ;		db 53h,0Dh,4,1
 44634                                  ;		db 24h,1,4,5
 44635                                  ; MSDOS 6.0 (MSDOS 6.21)
 44636                                  ;		db 26h,1,4,1
 44637                                  ;		db 27h,1,4,1
 44638                                  ;		db 5Ah,0Dh,4,2
 44639                                  ; MSDOS 6.0 & MSDOS 3.3
 44640                                  ;		db 0FFh,0FFh,0FFh,0FFh
 44641                                  
 44642                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44643                                  
 44644                                  ; ---------------------------------------------------------------------------
 44645                                  ;
 44646                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 44647                                  ; errors. Each entry is 4 bytes long:
 44648                                  ;
 44649                                  ;       Err#,Class,Action,Locus
 44650                                  ;
 44651                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 44652                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44653                                  ; THE END.
 44654                                  ;
 44655                                  ; ---------------------------------------------------------------------------
 44656                                  
 44657                                  ERR_TABLE_24: ; LABEL   BYTE
 44658 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44659 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44660 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 44661 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44662 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44663 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44664 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 44665 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44666 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44667 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 44668 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 44669 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 44670 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 44671 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44672 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44673 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44674 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44675 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44676 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44677 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 44678                                  
 44679                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 44680                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 44681                                  ;		db 14h,4,5,1
 44682                                  ;		db 15h,5,7,0FFh
 44683                                  ;		db 16h,4,5,1
 44684                                  ;		db 17h,0Bh,4,2
 44685                                  ;		db 18h,4,5,1
 44686                                  ;		db 19h,5,1,2
 44687                                  ;		db 1Ah,0Bh,7,2
 44688                                  ;		db 1Bh,0Bh,4,2
 44689                                  ;		db 1Ch,2,7,4
 44690                                  ;		db 1Dh,5,4,0FFh
 44691                                  ;		db 1Eh,5,4,0FFh
 44692                                  ;		db 1Fh,0Dh,4,0FFh
 44693                                  ;		db 20h,0Ah,2,2
 44694                                  ;		db 21h,0Ah,2,2
 44695                                  ;		db 22h,0Bh,7,2
 44696                                  ;		db 32h,9,3,3
 44697                                  ;		db 23h,7,4,1
 44698                                  ;		db 24h,1,4,5
 44699                                  ;		db 0FFh,0Dh,5,0FFh
 44700                                  
 44701                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 44702                                  
 44703                                  ; ---------------------------------------------------------------------------
 44704                                  ;
 44705                                  ; We need to map old int 24 errors and device driver errors into the new set
 44706                                  ; of errors. The following table is indexed by the new errors
 44707                                  ;
 44708                                  ; ---------------------------------------------------------------------------
 44709                                  
 44710                                  ;Public  ErrMap24
 44711                                  ErrMap24: ; Label   BYTE
 44712 00000EAB 13                          DB  error_write_protect	; 0
 44713 00000EAC 14                          DB  error_bad_unit		; 1
 44714 00000EAD 15                          DB  error_not_ready		; 2
 44715 00000EAE 16                          DB  error_bad_command	; 3
 44716 00000EAF 17                          DB  error_CRC		; 4
 44717 00000EB0 18                          DB  error_bad_length	; 5
 44718 00000EB1 19                          DB  error_seek		; 6
 44719 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 44720 00000EB3 1B                          DB  error_sector_not_found	; 8
 44721 00000EB4 1C                          DB  error_out_of_paper	; 9
 44722 00000EB5 1D                          DB  error_write_fault	; A
 44723 00000EB6 1E                          DB  error_read_fault	; B
 44724 00000EB7 1F                          DB  error_gen_failure	; C
 44725 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 44726 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 44727 00000EBA 22                          DB  error_wrong_disk	; F
 44728                                  
 44729                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 44730                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 44731                                  	
 44732                                  ErrMap24End: ; LABEL   BYTE
 44733                                  
 44734                                  ; DOSDATA:0EBBh (MSDOS 6.21, MSDOS.SYS)
 44735                                  
 44736                                  ; ---------------------------------------------------------------------------
 44737                                  
 44738                                  ; 27/04/2019 - Retro DOS v4.0
 44739                                  
 44740                                  FIRST_BUFF_ADDR:
 44741 00000EBB 0000                    	dw	0			; first buffer address
 44742                                  SPECIAL_VERSION:
 44743 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 44744                                  FAKE_COUNT:
 44745 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 44746                                  OLD_FIRSTCLUS:
 44747 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 44748                                  
 44749                                  ; ---------------------------------------------------------------------------
 44750                                  
 44751                                  ;smr; moved from TABLE segment in exec.asm
 44752                                  
 44753 00000FC0 0000                    exec_init_SP: dw 0
 44754 00000FC2 0000                    exec_init_SS: dw 0
 44755 00000FC4 0000                    exec_init_IP: dw 0
 44756 00000FC6 0000                    exec_init_CS: dw 0
 44757                                  
 44758                                  exec_signature:
 44759 00000FC8 0000                    	dw	0	; must contain 4D5A  (yay zibo!)
 44760                                  exec_len_mod_512:
 44761 00000FCA 0000                    	dw	0	; low 9 bits of length
 44762                                  exec_pages:
 44763 00000FCC 0000                    	dw	0	; number of 512b pages in file
 44764                                  exec_rle_count:
 44765 00000FCE 0000                    	dw	0	; count of reloc entries
 44766                                  exec_par_dir:
 44767 00000FD0 0000                    	dw	0	; number of paragraphs before image
 44768                                  exec_min_BSS:
 44769 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 44770                                  exec_max_BSS:
 44771 00000FD4 0000                    	dw	0	; max number of para of BSS
 44772                                  exec_SS:
 44773 00000FD6 0000                    	dw	0	; stack of image
 44774                                  exec_SP:
 44775 00000FD8 0000                    	dw	0	; SP of image
 44776                                  exec_chksum:
 44777 00000FDA 0000                    	dw	0	; checksum  of file (ignored)
 44778                                  exec_IP:
 44779 00000FDC 0000                    	dw	0	; IP of entry
 44780                                  exec_CS:
 44781 00000FDE 0000                    	dw	0	; CS of entry
 44782                                  exec_rle_table:
 44783 00000FE0 0000                    	dw	0	; byte offset of reloc table
 44784                                  
 44785                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 44786                                  
 44787                                  ;smr; eom
 44788                                  
 44789                                  ; ---------------------------------------------------------------------------
 44790                                  
 44791                                  ;SR;
 44792                                  ; WIN386 instance table for DOS
 44793                                  
 44794                                  Win386_Info:
 44795 00000FE2 0300                    	db	3, 0
 44796 00000FE4 000000000000000000-     	dd	0, 0, 0
 44796 00000FED 000000             
 44797 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 44798                                  
 44799                                  Instance_Table:
 44800 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 44801 00000FFA [3200]00000400          	dw	BCON, 0, 4
 44802 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 44803 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 44804 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 44805 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 44806 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 44807 0000101E 00000000                	dw	0, 0
 44808                                  
 44809                                  ; M001; SR;
 44810                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of
 44811                                  ; M001; some DOS variables. Note that the only really important variable in
 44812                                  ; M001; this is User_Id. The other variables are needed only to patch stuff
 44813                                  ; M001; which does not need to be done in DOS 5.0. 
 44814                                  
 44815                                  Win386_DOSVars:
 44816 00001022 05                      	db	5	;Major version 5 ; M001
 44817 00001023 00                      	db	0	;Minor version 0 ; M001
 44818 00001024 [EC05]                  	dw	SAVEDS	; M001
 44819 00001026 [EA05]                  	dw	SAVEBX	; M001
 44820 00001028 [2103]                  	dw	INDOS	; M001
 44821 0000102A [3E03]                  	dw	USER_ID	; M001
 44822 0000102C [1503]                  	dw	CritPatch ; M001
 44823 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 44824                                  
 44825                                  ;SR;
 44826                                  ; Flag to indicate whether WIN386 is running or not
 44827                                  
 44828 00001030 00                      IsWin386: db	0
 44829                                  
 44830                                  ;M018
 44831                                  ; This variable contains the path to the VxD device needed for Win386
 44832                                  
 44833 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 44833 0000103A 2E33383600         
 44834                                  
 44835                                  ;End WIN386 support
 44836                                  
 44837                                  ; ---------------------------------------------------------------------------
 44838                                  
 44839                                  ;SR;
 44840                                  ; These variables have been added for the special lie support for device
 44841                                  ;drivers.
 44842                                  ;
 44843                                  
 44844                                  DriverLoad:	
 44845 0000103F 01                      	db	1	;initialized to do special handling
 44846                                  BiosDataPtr:
 44847 00001040 00000000                	dd	0
 44848                                  
 44849                                  ; 27/04/2019 - Retro DOS v4.0
 44850                                  ; 04/11/2022
 44851                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 44852                                  
 44853                                  ;------------------------------------------------------------------------
 44854                                  ; Patch for Sidekick
 44855                                  ;
 44856                                  ; A documented method for finding the offset of the Errormode flag in the
 44857                                  ; dos swappable data area if for the app to scan in the dos segment (data)
 44858                                  ; for the following sequence of instructions.
 44859                                  ;
 44860                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 44861                                  ;
 44862                                  ; The Offset of Errormode flag is 0320h
 44863                                  ;
 44864                                  ;------------------------------------------------------------------------
 44865                                  
 44866 00001044 36F6062003FF            	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 44867 0000104A 750C                    	db	075h, 0Ch			 ; jnz  NearLabel
 44868 0000104C 36FF365803              	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 44869 00001051 CD28                    	db	0CDh, 028h			 ; int  28h
 44870                                  
 44871                                  ;--------------------------------------------------------------------------
 44872                                  ; Patch for PortOfEntry - M036
 44873                                  ;
 44874                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 44875                                  ; the offset of Errormode flag. The following patch is to support them in 
 44876                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 44877                                  ;
 44878                                  ;---------------------------------------------------------------------------
 44879                                  
 44880 00001053 803E200300              	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 44881 00001058 7537                    	db	075h, 037h			 ; jnz	NearLabel
 44882 0000105A BCA00A                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 44883                                  
 44884                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 44885                                  
 44886                                  ;--------------------------------------------------------------------------
 44887                                  
 44888                                  ;*** New FCB Implementation
 44889                                  ; This variable is used as a cache in the new FCB implementation to remember
 44890                                  ;the address of a local SFT that can be recycled for a regenerate operation
 44891                                  
 44892 0000105D 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 44893                                  
 44894                                  ;DOSDATA ENDS
 44895                                  
 44896                                  ;============================================================================
 44897                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 44898                                  ;============================================================================
 44899                                  ; 27/04/2019 - Retro DOS 4.0
 44900                                  
 44901                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 44902                                  
 44903                                  ;---------------------------------------------------------------------------
 44904                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 44905                                  ;----------------------------------------------------------------------------
 44906                                  	
 44907                                  	;db	90h
 44908                                  
 44909                                  	;EVEN
 44910 00001061 90                      align 2
 44911                                  
 44912                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 44913                                  
 44914                                  DOSINTTABLE:	; LABEL	DWORD
 44915                                  
 44916                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 44917                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 44918                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 44919                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 44920                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 44921                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 44922                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 44923                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 44924                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 44925                                  	
 44926 00001062 [3353]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 44927 00001066 [1B03]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4
 44928 0000106A [4703]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 44929 0000106E [7A05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 44930 00001072 [0106]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 44931 00001076 [7C62]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 44932 0000107A [5007]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 44933 0000107E [2203]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 44934 00001082 [2103]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 44935                                  
 44936 00001086 0000                    SS_Save: dw	0		; save user's stack segment
 44937 00001088 0000                    SP_Save: dw	0		; save user's stack offset
 44938                                  
 44939                                  ;-------------------------------------------------------------------------
 44940                                  ;
 44941                                  ; LOW MEM STUB:
 44942                                  ;
 44943                                  ; The low mem stub contains the entry points into DOS for all interrupts
 44944                                  ; handled by DOS. This stub is installed if the user specifies that the
 44945                                  ; DOS load in HIMEM. Each entry point does this.
 44946                                  ;
 44947                                  ; 	1. if jmp to 8 has been patched out
 44948                                  ;	   2. if A20 OFF
 44949                                  ;	      3. Enable A20
 44950                                  ;	   4. else 
 44951                                  ;	      5. just go to dos entry
 44952                                  ;	   6. endif
 44953                                  ;	7. else
 44954                                  ;	   8. just go to dos entry
 44955                                  ;	9. endif
 44956                                  ;
 44957                                  ;--------------------------------------------------------------------------
 44958                                  
 44959                                  ; 27/04/2019 - Retro DOS v4.0
 44960                                  
 44961                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 44962                                  
 44963                                  ;--------------------------------------------------------------------------
 44964                                  ;
 44965                                  ; DIVIDE BY 0 handler
 44966                                  ;
 44967                                  ;--------------------------------------------------------------------------
 44968                                  
 44969                                  ldivov:
 44970                                  	; The following jump, skipping the XMS calls will be patched to 
 44971                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 44972                                  	; needed because the stub is installed even before the XMS driver
 44973                                  	; is loaded if the user specifies dos=high in the config.sys
 44974                                  i0patch:
 44975 0000108A EB03                    	jmp	short divov_cont	
 44976                                  
 44977 0000108C E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44978                                  divov_cont:
 44979 0000108F 2EFF2E[6210]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 44980                                  
 44981                                  ;------------------------------------------------------------------------
 44982                                  ;
 44983                                  ; INT 20 Handler
 44984                                  ;
 44985                                  ; Here we do not have to set up the stack to return here as the abort call
 44986                                  ; will return to the address after the int 21 ah=4b call. This would be the
 44987                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 44988                                  ; will be restored then.
 44989                                  ;
 44990                                  ;-------------------------------------------------------------------------
 44991                                  
 44992                                  lquit:
 44993                                  	; The following jump, skipping the XMS calls will be patched to 
 44994                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 44995                                  	; needed because the stub is installed even before the XMS driver
 44996                                  	; is loaded if the user specifies dos=high in the config.sys
 44997                                  i20patch:
 44998 00001094 EB03                    	jmp	short quit_cont	
 44999                                  
 45000 00001096 E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF
 45001                                  quit_cont:
 45002 00001099 2EFF2E[6610]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 45003                                  
 45004                                  ;--------------------------------------------------------------------------
 45005                                  ;
 45006                                  ; INT 21 Handler
 45007                                  ;
 45008                                  ;--------------------------------------------------------------------------
 45009                                  
 45010                                  lcommand:
 45011                                  	; The following jump, skipping the XMS calls will be patched to
 45012                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 45013                                  	; needed because the stub is installed even before the XMS driver
 45014                                  	; is loaded if the user specifies dos=high in the config.sys
 45015                                  i21patch:
 45016 0000109E EB03                    	jmp	short command_cont	
 45017                                  
 45018 000010A0 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 45019                                  command_cont:
 45020 000010A3 2EFF2E[6A10]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 45021                                  
 45022                                  ;------------------------------------------------------------------------
 45023                                  ;
 45024                                  ; INT 25 
 45025                                  ;
 45026                                  ;----------------------------------------------------------------------------
 45027                                  
 45028                                  labsdrd:
 45029                                  	; The following jump, skipping the XMS calls will be patched to 
 45030                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45031                                  	; needed because the stub is installed even before the XMS driver
 45032                                  	; is loaded if the user specifies dos=high in the config.sys
 45033                                  i25patch:
 45034 000010A8 EB03                    	jmp	short absdrd_cont
 45035                                  
 45036 000010AA E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF
 45037                                  absdrd_cont:
 45038 000010AD 2EFF2E[6E10]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 45039                                  
 45040                                  ;-------------------------------------------------------------------------
 45041                                  ;
 45042                                  ; INT 26
 45043                                  ;
 45044                                  ;-----------------------------------------------------------------------
 45045                                  
 45046                                  labsdwrt:
 45047                                  	; The following jump, skipping the XMS calls will be patched to
 45048                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 45049                                  	; needed because the stub is installed even before the XMS driver
 45050                                  	; is loaded if the user specifies dos=high in the config.sys
 45051                                  i26patch:
 45052 000010B2 EB03                    	jmp	short absdwrt_cont
 45053                                  
 45054 000010B4 E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF
 45055                                  absdwrt_cont:
 45056 000010B7 2EFF2E[7210]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 45057                                  
 45058                                  ;------------------------------------------------------------------------
 45059                                  ;
 45060                                  ; INT 27
 45061                                  ;
 45062                                  ;-----------------------------------------------------------------------
 45063                                  
 45064                                  lstay_resident:
 45065                                  	; The following jump, skipping the XMS calls will be patched to
 45066                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 45067                                  	; needed because the stub is installed even before the XMS driver
 45068                                  	; is loaded if the user specifies dos=high in the config.sys
 45069                                  i27patch:
 45070 000010BC EB03                    	jmp	short sr_cont
 45071                                  
 45072 000010BE E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 45073                                  sr_cont:
 45074 000010C1 2EFF2E[7610]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 45075                                  
 45076                                  ;-----------------------------------------------------------------------------
 45077                                  ;
 45078                                  ; INT 2f
 45079                                  ;
 45080                                  ;-------------------------------------------------------------------------
 45081                                  
 45082                                  lint2f:
 45083                                  	; The following jump, skipping the XMS calls will be patched to 
 45084                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45085                                  	; needed because the stub is installed even before the XMS driver
 45086                                  	; is loaded if the user specifies dos=high in the config.sys
 45087                                  i2fpatch:
 45088 000010C6 EB03                    	jmp	short int2f_cont
 45089                                  
 45090 000010C8 E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF
 45091                                  int2f_cont:
 45092 000010CB 2EFF2E[7A10]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 45093                                  
 45094                                  ;-----------------------------------------------------------------------------
 45095                                  ;
 45096                                  ; CPM entry
 45097                                  ;
 45098                                  ;------------------------------------------------------------------------
 45099                                  
 45100                                  lcall_entry:
 45101                                  	; The following jump, skipping the XMS calls will be patched to
 45102                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 45103                                  	; needed because the stub is installed even before the XMS driver
 45104                                  	; is loaded if the user specifies dos=high in the config.sys
 45105                                  cpmpatch:
 45106 000010D0 EB03                    	jmp	short callentry_cont
 45107                                  
 45108 000010D2 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 45109                                  callentry_cont:
 45110 000010D5 2EFF2E[7E10]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 45111                                  
 45112                                  ;--------------------------------------------------------------------------
 45113                                  
 45114                                  lirett:
 45115 000010DA CF                      	iret
 45116                                  
 45117                                  ;---------------------------------------------------------------------------
 45118                                  ;
 45119                                  ; LowIntXX:
 45120                                  ;
 45121                                  ; Interrupts from DOS that pass control to a user program must be done from
 45122                                  ; low memory, as the user program may change the state of the A20 line or
 45123                                  ; they may require that the A20 line be OFF. The following piece of code is
 45124                                  ; far call'd from the following places in DOS:
 45125                                  ;
 45126                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 45127                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 45128                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 45129                                  ;
 45130                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 45131                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 45132                                  ; before doing the ints and then do a far junp back into DOS.
 45133                                  ;
 45134                                  ;---------------------------------------------------------------------------
 45135                                  
 45136 000010DB 00000000                DosRetAddr23:	dd	0
 45137 000010DF 00000000                DosRetAddr24:	dd	0
 45138 000010E3 00000000                DosRetAddr28:	dd	0
 45139                                  
 45140                                  	; Execute int 23h from low memory
 45141                                  LowInt23:
 45142                                  					; save the return address that is on
 45143                                  					; the stack
 45144 000010E7 2E8F06[DB10]            	pop	word [cs:DosRetAddr23]
 45145 000010EC 2E8F06[DD10]            	pop	word [cs:DosRetAddr23+2]
 45146                                  
 45147 000010F1 CD23                    	int	23h			; ctrl C
 45148                                  					; turn on A20 it has been turned OFF
 45149                                  					; by int 28/23/24 handler.
 45150                                  
 45151 000010F3 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF
 45152                                  
 45153 000010F6 2EFF2E[DB10]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 45154                                  
 45155                                  
 45156                                  	; Execute int 24h from low memory
 45157                                  LowInt24:
 45158                                  					; save the return address that is on
 45159                                  					; the stack
 45160 000010FB 2E8F06[DF10]            	pop	word [cs:DosRetAddr24]
 45161 00001100 2E8F06[E110]            	pop	word [cs:DosRetAddr24+2]
 45162                                  
 45163 00001105 CD24                    	int	24h			; crit error
 45164                                  					; turn on A20 it has been turned OFF
 45165                                  					; by int 28/23/24 handler.
 45166                                  
 45167 00001107 E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF
 45168                                  
 45169 0000110A 2EFF2E[DF10]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 45170                                  
 45171                                  
 45172                                   
 45173                                  	; Execute int 28h from low memory
 45174                                  LowInt28:
 45175 0000110F CD28                    	int	28h			; idle int
 45176                                  					; turn on A20 it has been turned OFF
 45177                                  					; by int 28/23/24 handler.
 45178                                  
 45179 00001111 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF
 45180                                  
 45181 00001114 CB                      	retf
 45182                                  
 45183                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 45184                                  
 45185                                  ;-------------------------------------------------------------------------
 45186                                  ;
 45187                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 45188                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 45189                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 45190                                  ; This is so because exepac'd programs rely on address wrap.
 45191                                  ;
 45192                                  ;------------------------------------------------------------------------- 
 45193                                  
 45194                                  disa20_xfer:
 45195 00001115 E83F00                  	call	XMMDisableA20		; disable A20
 45196                                  
 45197                                  	; Look at msproc.asm at label exec_go for understanding the following:
 45198                                  
 45199                                  	; DS:SI points to entry point
 45200                                  	; AX:DI points to initial stack
 45201                                  	; DX has PDB pointer
 45202                                  	; BX has initial AX value
 45203                                  
 45204 00001118 FA                      	cli
 45205 00001119 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 45206                                  
 45207 0000111F 8ED0                    	mov	SS,AX			; set up user's stack
 45208 00001121 89FC                    	mov	SP,DI			; and SP
 45209 00001123 FB                      	sti
 45210                                  
 45211 00001124 1E                      	push	DS			; fake long call to entry
 45212 00001125 56                      	push	SI
 45213 00001126 8EC2                    	mov	ES,DX			; set up proper seg registers
 45214 00001128 8EDA                    	mov	DS,DX
 45215 0000112A 89D8                    	mov	AX,BX			; set up proper AX
 45216 0000112C CB                      	retf
 45217                                  
 45218                                  ;-------------------------------------------------------------------------
 45219                                  ;
 45220                                  ; M003:
 45221                                  ;
 45222                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 45223                                  ; come here, turn A20 OFF restore user stack and registers before returning
 45224                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 45225                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for
 45226                                  ; more info.
 45227                                  ;
 45228                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that
 45229                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's
 45230                                  ; stack to avoid additional stack overhead for the user.
 45231                                  ;
 45232                                  ; -------------------------------------------------------------------------
 45233                                  
 45234                                  disa20_iret:
 45235 0000112D E82700                  	call	XMMDisableA20
 45236 00001130 FE0E[2103]              	dec	byte [INDOS]
 45237 00001134 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 45238 00001138 8B26[8405]              	mov	SP,[USER_SP]
 45239 0000113C 89E5                    	mov	BP,SP
 45240                                  	;mov	[BP+user_env.user_AX],AL
 45241 0000113E 884600                  	mov	[bp],al
 45242 00001141 A1[F205]                	mov	AX,[NSP]
 45243 00001144 A3[8405]                	mov	[USER_SP],AX
 45244 00001147 A1[F005]                	mov	AX,[NSS]
 45245 0000114A A3[8605]                	mov	[USER_SS],AX
 45246                                  
 45247 0000114D 58                      	pop	AX			; restore user regs
 45248 0000114E 5B                      	pop	BX
 45249 0000114F 59                      	pop	CX
 45250 00001150 5A                      	pop	DX
 45251 00001151 5E                      	pop	SI
 45252 00001152 5F                      	pop	DI
 45253 00001153 5D                      	pop	BP
 45254 00001154 1F                      	pop	DS
 45255 00001155 07                      	pop	ES
 45256 00001156 CF                      	iret
 45257                                  
 45258                                  ;**************************************************************************
 45259                                  ;***	XMMDisableA20 - switch 20th address line
 45260                                  ;
 45261                                  ;	This routine is used to disable the 20th address line in
 45262                                  ;	the system using XMM calls.
 45263                                  ;
 45264                                  ;	ENTRY	none		;ds = _DATA
 45265                                  ;	EXIT	A20 line disabled
 45266                                  ;	USES	NOTHING
 45267                                  ;
 45268                                  ;**************************************************************************
 45269                                  
 45270                                  XMMDisableA20:
 45271 00001157 53                      	push	bx
 45272 00001158 50                      	push	ax
 45273                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 45274 00001159 B406                    	mov	ah,6
 45275 0000115B 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 45276 00001160 58                      	pop	ax
 45277 00001161 5B                      	pop	bx
 45278 00001162 C3                      	retn
 45279                                  
 45280                                  ; The entry point in the BIOS XMS driver is defined here.
 45281                                  
 45282                                  XMMcontrol:
 45283 00001163 00000000                	dd	0
 45284                                  
 45285                                  ;--------------------------------------------------------------------------
 45286                                  ;
 45287                                  ;***	EnsureA20ON - Ensures that A20 is ON
 45288                                  ;
 45289                                  ;	This routine is used to query the A20 state in
 45290                                  ;	the system using XMM calls.
 45291                                  ;
 45292                                  ;	ENTRY: none
 45293                                  ;
 45294                                  ;	EXIT : A20 will be ON
 45295                                  ;
 45296                                  ; 	USES : NONE  
 45297                                  ;
 45298                                  ;--------------------------------------------------------------------------
 45299                                  
 45300                                  LowMemory:	; label dword		; Set equal to 0000:0080
 45301 00001167 8000                    	dw	00080h
 45302 00001169 0000                    	dw	00000h
 45303                                  
 45304                                  HighMemory:	; label dword
 45305 0000116B 9000                    	dw	00090h			; Set equal to FFFF:0090
 45306 0000116D FFFF                    	dw	0FFFFh
 45307                                  
 45308                                  EnsureA20ON:
 45309 0000116F 9C                      	pushf
 45310 00001170 1E                      	push    ds
 45311 00001171 06                      	push	es
 45312 00001172 51                      	push	cx
 45313 00001173 56                      	push	si
 45314 00001174 57                      	push	di
 45315                                  
 45316 00001175 2EC536[6711]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 45317 0000117A 2EC43E[6B11]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 45318 0000117F B90400                  	mov	cx,4
 45319 00001182 FC                      	cld
 45320 00001183 F3A7                    	repe    cmpsw
 45321                                  
 45322 00001185 7407                    	jz	short EA20_OFF
 45323                                  EA20_RET:
 45324 00001187 5F                      	pop	di
 45325 00001188 5E                      	pop	si
 45326 00001189 59                      	pop	cx
 45327 0000118A 07                      	pop	es
 45328 0000118B 1F                      	pop	ds
 45329 0000118C 9D                      	popf
 45330 0000118D C3                      	retn
 45331                                  
 45332                                  EA20_OFF:
 45333                                  	; We are going to do the XMS call on the DOS's AuxStack.
 45334                                  	; NOTE: ints are disabled at this point.
 45335                                  
 45336 0000118E 53                      	push	bx
 45337 0000118F 50                      	push	ax
 45338                                  
 45339 00001190 8CD0                    	mov	ax,ss			; save user's stack pointer
 45340 00001192 2EA3[8610]              	mov	[cs:SS_Save],ax
 45341 00001196 2E8926[8810]            	mov	[cs:SP_Save],sp
 45342 0000119B 8CC8                    	mov	ax,cs
 45343 0000119D 8ED0                    	mov	ss,ax
 45344 0000119F BC[A007]                	mov	sp,AUXSTACK
 45345                                  					; ss:sp -> DOSDATA:AuxStack
 45346                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 45347 000011A2 B405                    	mov	ah,5
 45348 000011A4 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 45349 000011A9 09C0                    	or	ax,ax
 45350 000011AB 740F                    	jz	short XMMerror		; AX = 0 fatal error
 45351                                  
 45352 000011AD 2EA1[8610]              	mov	ax,[cs:SS_Save]		; restore user stack
 45353 000011B1 8ED0                    	mov	ss,ax
 45354 000011B3 2E8B26[8810]            	mov	sp,[cs:SP_Save]
 45355                                  
 45356 000011B8 58                      	pop	ax
 45357 000011B9 5B                      	pop	bx
 45358                                  
 45359 000011BA EBCB                    	jmp	short EA20_RET
 45360                                  
 45361                                  XMMerror:				; M006 - Start
 45362 000011BC B40F                    	mov	ah,0Fh			; get video mode
 45363 000011BE CD10                    	int	10h
 45364 000011C0 3C07                    	cmp	al,7			; Q: are we an MDA
 45365 000011C2 7406                    	je	short XMMcont		; Y: do not change mode
 45366 000011C4 30E4                    	xor	ah,ah ; 0		; set video mode
 45367 000011C6 B002                    	mov	al,02h			; 80 X 25 text
 45368 000011C8 CD10                    	int	10h
 45369                                  XMMcont:
 45370 000011CA B405                    	mov	ah,05h			; set display page
 45371 000011CC 30C0                    	xor	al,al			; page 0
 45372 000011CE CD10                    	int	10h
 45373                                  	
 45374 000011D0 BE[B812]                	mov	si,XMMERRMSG
 45375 000011D3 0E                      	push	cs
 45376 000011D4 1F                      	pop	ds
 45377 000011D5 FC                      	cld				; clear direction flag
 45378                                  XMMprnt:
 45379 000011D6 AC                      	lodsb
 45380 000011D7 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 45381 000011D9 7409                    	jz	short XMMStall		; function 0Eh	
 45382 000011DB B40E                    	mov	ah,0Eh
 45383 000011DD BB0700                  	mov	bx,7
 45384 000011E0 CD10                    	int	10h
 45385 000011E2 EBF2                    	jmp	short XMMprnt
 45386                                  
 45387                                  XMMStall:
 45388 000011E4 FB                      	sti				; allow the user to warm boot
 45389 000011E5 EBFD                    	jmp	short XMMStall		; M006 - End
 45390                                  
 45391                                  ;---------------------------------------------------------------------------
 45392                                  
 45393                                  ; 27/04/2019 - Retro DOS v4.0
 45394                                  
 45395                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 45396                                  ALTAH	equ 0Ch
 45397                                  
 45398                                  ;This has been put in for WIN386 2.XX support. The format of the instance
 45399                                  ;table was different for this. Segments will be patched in at init time.
 45400                                  
 45401                                  OldInstanceJunk:
 45402 000011E7 7000                    	dw	70h	;segment of BIOS
 45403 000011E9 0000                    	dw	0	;indicate stacks in SYSINIT area
 45404 000011EB 0600                    	dw	6	;5 instance items
 45405                                  
 45406                                  	;dw	0,offset dosdata:contpos, 2
 45407                                  	;dw	0,offset dosdata:bcon, 4
 45408                                  	;dw	0,offset dosdata:carpos,106h
 45409                                  	;dw	0,offset dosdata:charco, 1
 45410                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 45411                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 45412                                  
 45413 000011ED 0000[2200]0200          	dw	0,CONTPOS,2
 45414 000011F3 0000[3200]0400          	dw	0,BCON,4
 45415 000011F9 0000[F901]0601          	dw	0,CARPOS,106h
 45416 000011FF 0000[0003]0100          	dw	0,CHARCO,1
 45417 00001205 0000[C00F]2200          	dw	0,exec_init_SP,34
 45418 0000120B 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 45419                                  
 45420                                  ;---------------------------------------------------------------------------
 45421                                  
 45422                                  ; M021-
 45423                                  ;
 45424                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 45425                                  ; 	takes control of the HMA. When running, this word is a reliable
 45426                                  ;	indicator that the DOS is actually using HMA. You can't just use
 45427                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 45428                                  
 45429                                  DosHasHMA:
 45430 00001211 00                      	db	0
 45431                                  FixExePatch:
 45432 00001212 0000                    	dw	0		; M012
 45433                                  RationalPatchPtr:
 45434 00001214 0000                    	dw	0		; M012
 45435                                  
 45436                                  ; End M021
 45437                                  
 45438                                  ;---------------------------------------------------------------------------
 45439                                  
 45440                                  ; M020 Begin
 45441                                  
 45442                                  RatBugCode:	; proc	far
 45443 00001216 51                      	push	cx
 45444 00001217 8B0E1000                	mov	cx,[10h]
 45445                                  rbc_loop:
 45446                                  	;loop	$
 45447 0000121B E2FE                    	loop	rbc_loop
 45448 0000121D 59                      	pop	cx
 45449 0000121E CB                      	retf
 45450                                  		
 45451                                  ; M020 End
 45452                                  
 45453                                  ;---------------------------------------------------------------------------
 45454                                  	
 45455                                  UmbSave1:
 45456                                  	;db	11 dup (?)	; M023
 45457 0000121F 00<rep Bh>              	times	11 db 0	
 45458                                  
 45459                                  ; DOSDATA:122Ah
 45460                                  
 45461                                  Mark3:	; label byte
 45462                                  
 45463                                  ;IF2
 45464                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 45465                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45466                                  ;	ENDIF
 45467                                  ;ENDIF
 45468                                  
 45469                                  ;############################################################################
 45470                                  ;
 45471                                  ; ** HACK FOR DOS 4.0 REDIR **
 45472                                  ;
 45473                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 45474                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 45475                                  ; COUNTRY_CDPG if it can. 
 45476                                  ;
 45477                                  ; MARK3 SHOULD NOT BE > 122AH 
 45478                                  ;
 45479                                  ; As of 9/6/90, this area is FULL!
 45480                                  ;
 45481                                  ;############################################################################
 45482                                   
 45483                                  	;ORG	0122Ah
 45484                                  
 45485                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45486                                  
 45487                                  ; The following table is used for DOS 3.3
 45488                                  ;DOS country and code page information is defined here for DOS 3.3.
 45489                                  ;The initial value for ccDosCountry is 1 (USA).
 45490                                  ;The initial value for ccDosCodepage is 850.
 45491                                  
 45492                                  ; country and code page information
 45493                                  ; ---------------------------------------------------------------------------
 45494                                  COUNTRY_CDPG:	; label  byte
 45495 0000122A 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 45496 00001232 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 45496 0000123B 53595300           
 45497                                  	;db   51 dup (?)
 45498 0000123F 00<rep 33h>             	times 51 db 0
 45499                                  ; ------------------------------------------------<MSKK01>-------------------
 45500                                  ;ifdef	DBCS
 45501                                  ;  ifdef JAPAN
 45502                                  ;	dw   932			; system code page id (JAPAN)
 45503                                  ;  endif
 45504                                  ;  ifdef TAIWAN
 45505                                  ;	dw   938			; system code page id (TAIWAN)
 45506                                  ;  endif
 45507                                  ;  ifdef KOREA
 45508                                  ;	dw   934			; system code page id (KOREA IBM)
 45509                                  ;  endif
 45510                                  ;else
 45511 00001272 B501                    	dw   437			; system code page id
 45512                                  ;endif
 45513                                  ; ------------------------------------------------<MSKK01>-------------------
 45514 00001274 0600                    	dw   6				; number of entries
 45515 00001276 02                      	db   SetUcase  ; 2		; Ucase type
 45516 00001277 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 45517 00001279 0000                    	dw   0				; segment of poiter
 45518 0000127B 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 45519 0000127C [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 45520 0000127E 0000                    	dw   0				; segment of poiter
 45521 00001280 05                      	db   SetFileList ; 5		; valid file chars type
 45522 00001281 [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 45523 00001283 0000                    	dw   0				; segment of poiter
 45524 00001285 06                      	db   SetCollate	; 6		; collate type
 45525 00001286 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 45526 00001288 0000                    	dw   0				; segment of poiter
 45527 0000128A 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 45528 0000128B [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 45529 0000128D 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 45530 0000128F 01                      	db   SetCountryInfo  ; 1	; country info type
 45531 00001290 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 45532                                  ; ------------------------------------------------<MSKK01>-------------------
 45533                                  ;ifdef	DBCS
 45534                                  ;	...... 
 45535                                  ;else
 45536 00001292 0100                    	dw   1				; USA country id
 45537 00001294 B501                    	dw   437			; USA system code page id
 45538 00001296 0000                    	dw   0 				; date format
 45539 00001298 2400000000              	db   '$',0,0,0,0		; currency symbol
 45540 0000129D 2C00                    	db   ',',0			; thousand separator
 45541 0000129F 2E00                    	db   '.',0			; decimal separator
 45542 000012A1 2D00                    	db   '-',0			; date separator
 45543 000012A3 3A00                    	db   ':',0			; time separator
 45544 000012A5 00                      	db   0				; currency format flag
 45545 000012A6 02                      	db   2				; # of digits in currency
 45546 000012A7 00                      	db   0 				; time format
 45547 000012A8 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 45548 000012AA 0000                    	dw   0				; segment of entry point
 45549 000012AC 2C00                    	db   ',',0			; data list separator
 45550 000012AE 000000000000000000-     	dw   0,0,0,0,0			; reserved
 45550 000012B7 00                 
 45551                                  ;endif
 45552                                  ; ------------------------------------------------<MSKK01>-------------------
 45553                                  
 45554                                  ; 27/04/2019 - Retro DOS v4.0
 45555                                  
 45556                                  ;include msdos.cl2			; XMMERRMSG
 45557                                  
 45558                                  ; DOSDATA:12B8h (MSDOS 6.21, MSDOS.SYS) ; 17/01/2024
 45559                                  
 45560                                  XMMERRMSG:
 45561 000012B8 0D0A                    	db	0Dh,0Ah
 45562 000012BA 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 45562 000012C3 617265204572726F72-
 45562 000012CC 0D0A24             
 45563                                  
 45564                                  ;DOSDATA ends
 45565                                  
 45566                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45567                                  
 45568                                  ;============================================================================
 45569                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 45570                                  ;============================================================================
 45571                                  ; 27/04/2019 - Retro DOS 4.0
 45572                                  
 45573                                  ;DOSDATA Segment
 45574                                  
 45575                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 45576                                  
 45577                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45578                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 45579                                  
 45580                                  ; first and second DOS patches
 45581                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 45582                                  ;
 45583                                  ; Code in disk.asm, 2 locations, one for read, one for write
 45584                                  ;	DVRDLP:
 45585                                  ;	DVWRTLP:
 45586                                  ;
 45587                                  ;
 45588                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 45589                                  ;	lds	si,si+7 				  ; sf_devptr
 45590                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 45591                                  
 45592 000012CF 36C536                  DOSP1_ID:	db	036h,0C5h,036h
 45593 000012D2 3605C57407E8            DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45594                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 45595                                  
 45596 000012D8 9090                    		db	90h, 90h
 45597                                  
 45598 000012DA 36C536                  DOSP12_ID:	db	036h,0C5h,036h
 45599 000012DD 3605C57407E8            DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45600                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 45601                                  
 45602                                  ; DOSDATA:12E3h
 45603                                  
 45604                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 45605                                  ;
 45606                                  ; Code in disk.asm, 1 location
 45607                                  ;	GETBUF:
 45608                                  ;
 45609                                  ; 051h	push	cx	<- begin special int28 mode
 45610                                  ;	push	es
 45611                                  ;	push	di
 45612                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 45613                                  ;	call	????	; $STD_CON_STRING_INPUT
 45614                                  ;	pop	di
 45615                                  ;	pop	es
 45616                                  ; 059h	pop	cx	<- end special int28 mode
 45617                                  
 45618 000012E3 510657BA                DOSP3_ID:	db	051h,006h,057h,0BAh
 45619 000012E7 2902E8                  DOSP3_CONBUF:	db	029h,002h,0E8h
 45620                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 45621 000012EA 9AE35F07                		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 45622 000012EE 59                      DOSP4_ID:	db	059h			; pop cx
 45623                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 45624                                  	
 45625                                  ; DOSDATA:12EFh
 45626                                  
 45627                                  ; Fifth DOS patch - System call 40h (Write) to console
 45628                                  ;
 45629                                  ; Code in disk.asm, 1 location
 45630                                  ;
 45631                                  ;		push	cx
 45632                                  ;      WRCONLP: lodsb
 45633                                  ;		cmp	al,1Ah
 45634                                  ;		jz	????
 45635                                  ;		call	????	<- "simulate" int28 event
 45636                                  ;		loop	WRCONLP
 45637                                  ;      CONEOF:	pop	ax
 45638                                  
 45639 000012EF 51                      DOSP5_ID:	db	051h			; push cx
 45640 000012F0 AC3C1A7405              		db	0ACh,03Ch,01Ah,074h,005h
 45641 000012F5 E8                      		db	0E8h			; call
 45642                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 45643                                  
 45644                                  ; DOSDATA:12F6h
 45645                                  
 45646                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 45647                                  ;
 45648                                  ; Code in disp.asm, 1 location
 45649                                  ;
 45650                                  ;
 45651                                  ;	mov [SaveDS],ds
 45652                                  ;	mov [SaveBX],bx
 45653                                  ;	mov bx,cs
 45654                                  ;	mov ds,bx
 45655                                  ;	inc [indos]
 45656                                  ;	xor ax,ax
 45657                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 45658                                  
 45659 000012F6 2E8C1E                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 45660 000012F9 7E05                    DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 45661 000012FB 2E891E                  		db	02Eh,089h,01Eh
 45662 000012FE 7C05                    DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 45663 00001300 8CCB                    		db	08Ch,0CBh		; mov bx,cs
 45664 00001302 8EDB                    		db	08Eh,0DBh		; mov ds,bx
 45665 00001304 FE06                    		db	0FEh,006h
 45666 00001306 CF02                    DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 45667 00001308 33C0                    		db	033h,0C0h		; xor ax,ax
 45668                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 45669                                  
 45670                                  ; DOSDATA:130Ah
 45671                                  
 45672                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 45673                                  ;
 45674                                  ; Code in handle.asm, 1 location in routine CheckOwner
 45675                                  ;
 45676                                  ;
 45677                                  ;
 45678                                  ;	push	ax
 45679                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 45680                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 45681                                  ;	pop	ax
 45682                                  ;	jz	????
 45683                                  
 45684 0000130A 50                      DOSP8_ID:	db	050h			; push ax
 45685 0000130B 36A1                    		db	036h,0A1h
 45686 0000130D EA02                    DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 45687 0000130F 263B45                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 45688                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 45689 00001312 2F58                    		db	02Fh,058h		; pop  ax
 45690                                  
 45691                                  ; DOSDATA:1314h
 45692                                  
 45693                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 45694                                  ;
 45695                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 45696                                  ;   a yeild when a character is not ready to be read.
 45697                                  ;
 45698                                  ; Code in disk.asm, 3 locations
 45699                                  ;
 45700                                  ;   DVRDRAW:
 45701                                  ;	    PUSH    ES
 45702                                  ;	    POP     DS
 45703                                  ;   ReadRawRetry:				<- Patch 10
 45704                                  ;	    MOV     BX,DI
 45705                                  ;	    XOR     AX,AX			<- Reenter #2
 45706                                  ;	    MOV     DX,AX
 45707                                  ;	    call    SETREAD
 45708                                  ;	    PUSH    DS				<- Reenter #1
 45709                                  ;	    LDS     SI,[THISSFT]
 45710                                  ;	    call    DEVIOCALL
 45711                                  ;	    MOV     DX,DI
 45712                                  ;	    MOV     AH,86H
 45713                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 45714                                  ;	    TEST    DI,STERR
 45715                                  ;	    JZ	    CRDROK
 45716                                  ;	    call    CHARHARD
 45717                                  ;	    MOV     DI,DX
 45718                                  ;	    OR	    AL,AL
 45719                                  ;	    JZ	    CRDROK
 45720                                  ;	    CMP     AL,3
 45721                                  ;	    JZ	    CRDFERR
 45722                                  ;	    POP     DS
 45723                                  ;	    JMP     ReadRawRetry
 45724                                  ;
 45725                                  ;   CRDFERR:
 45726                                  ;	    POP     DI				<- Patch 11
 45727                                  ;   DEVIOFERR:
 45728                                  ;	    LES     DI,[THISSFT]
 45729                                  ;	    jmp     SET_ACC_ERR_DS
 45730                                  ;
 45731                                  ;   CRDROK:
 45732                                  ;	    POP     DI				<- Patch 12
 45733                                  ;	    MOV     DI,DX
 45734                                  ;	    ADD     DI,[CALLSCNT]
 45735                                  ;	    JMP     SHORT ENDRDDEVJ3
 45736                                  
 45737 00001314 061F                    DOSP10_ID:		db	006H,01FH
 45738                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 45739 00001316 8BDF                    DOSP10_LOC:		db	08BH,0DFH
 45740                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 45741 00001318 33C08BD0E8              			db	033H,0C0H,08BH,0D0H,0E8H
 45742                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 45743 0000131D DF0E                    			db	0DFH,00EH
 45744                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 45745 0000131F 1E36C5363605E8AF0E      			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 45746 00001328 8BD7B486368B3E          			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 45747                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 45748 0000132F 0903                    			db	009H,003H
 45749 00001331 F7C700807419E84717      			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 45750 0000133A 8BFA0AC074103C0374-     			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 45750 00001343 03                 
 45751 00001344 1FEBCF                  			db	01FH,0EBH,0CFH
 45752                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 45753 00001347 5F                      			db	05FH
 45754                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 45755 00001348 36C43E3605E9A104        			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 45756                                  
 45757                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 45758 00001350 5F8BFA                  			db	05FH,08BH,0FAH
 45759                                  ; DOSDATA:1353h
 45760                                  
 45761                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 45762                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 45763                                  ;
 45764                                  ;	    Sets focus to current VM so user can see fatal message.
 45765                                  ;
 45766                                  ;
 45767                                  ;	l0: lodsb		<- Setfocus here
 45768                                  ;	    cmp al, '$'
 45769                                  ;	    je l1
 45770                                  ;	    mov bl, 7
 45771                                  ;	    mov ah, 0Eh
 45772                                  ;	    int 10h
 45773                                  ;	    jmp l0
 45774                                  ;	l1: jmp $
 45775                                  
 45776 00001353 AC                      DOSP13_ID:	db	0ACh			; l0: lodsb
 45777 00001354 3C24                    		db	03Ch,024h		;     cmp al, '$'
 45778 00001356 7408                    		db	074h,008h		;     je l1
 45779 00001358 B307                    		db	0B3h,007h		;     mov bl, 7
 45780 0000135A B40E                    		db	0B4h,00Eh		;     mov ah, 0Eh
 45781 0000135C CD10                    		db	0CDh,010h		;     int 10h
 45782 0000135E EBF3                    		db	0EBh,0F3h		;     jmp l0
 45783 00001360 EBFE                    		db	0EBh,0FEh		; l1: jmp $
 45784                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 45785                                  
 45786                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45787                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 45788                                  
 45789                                  ; 06/12/2022
 45790                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 45791                                  
 45792                                  ; DOSDATA ends
 45793                                  
 45794                                  ; 05/11/2022
 45795                                  ;----------------------------------------------------------------------------
 45796                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 45797                                  ;----------------------------------------------------------------------------
 45798                                    
 45799                                  %if 0
 45800                                  
 45801                                  ;============================================================================
 45802                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 45803                                  ;============================================================================
 45804                                  ; 27/04/2019 - Retro DOS 4.0
 45805                                  
 45806                                  ;mpatch.asm -- holds data patch location for callouts 
 45807                                  ; -- allocate cluster in rom.asm
 45808                                  ;
 45809                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 45810                                  ; Currently, this location is used only by magicdrv.sys's patch to
 45811                                  ; cluster allocation, however it can be expanded to be used by other
 45812                                  ; patches. This is important since we have an easy-access pointer to
 45813                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 45814                                  ; only patch out a far call/retf, so any space after that could be
 45815                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 45816                                  ; to call out here.
 45817                                  ;
 45818                                  ; Currently, we allocate only the minimum space required for the 6
 45819                                  ; byte magicdrv patch, so if you change the dos data, you may want
 45820                                  ; to reserve space here if your new data will be position dependent
 45821                                  ; and would prohibit growing of this table.
 45822                                  ;       
 45823                                  ;history	-	created 8-7-92 by scottq
 45824                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 45825                                  ;
 45826                                  ;Exported Functions
 45827                                  ;==================
 45828                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 45829                                  
 45830                                  ; DosData Segment
 45831                                  
 45832                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 45833                                  
 45834                                  ; ---------------------------------------------------------------------------
 45835                                  
 45836                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 45837                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 45838                                  ; greater). Added to this file because it needed to be somewhere and is
 45839                                  ; 'patch' related.
 45840                                  
 45841                                  Rational386PatchPtr:
 45842                                  	dw	0	; points to patch routine or RET instr.
 45843                                  ; ---------------------------------------------------------------------------
 45844                                  
 45845                                  MagicPatch:
 45846                                  ;MagicPatch proc far
 45847                                          retf            ;default is to just return to allocate
 45848                                          nop             ;however, this code will be patched
 45849                                          nop             ;by magicdrv.sys to
 45850                                          nop             ; call far ?:?     
 45851                                          nop             ; retf or perhaps just jmp far
 45852                                          nop             ;retf/nop take one byte, so we need six instructions
 45853                                                          ;for 6 byte patch
 45854                                  ;MagicPatch endp
 45855                                  
 45856                                  ; ---------------------------------------------------------------------------
 45857                                  
 45858                                  ;DosData Ends
 45859                                  
 45860                                  ; DOSDATA:136Ah
 45861                                  
 45862                                  ;----------------------------------------------------------------------------
 45863                                  
 45864                                  ;DOSDATALAST SEGMENT
 45865                                  
 45866                                  ; 29/04/2019 - Retro DOS v4.0
 45867                                  
 45868                                  ;----------------------------------------------------------------------------
 45869                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 45870                                  
 45871                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 45872                                  
 45873                                  ;align 16
 45874                                  
 45875                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 45876                                  
 45877                                  ;----------------------------------------------------------------------------
 45878                                  
 45879                                  %endif	; 05/11/2022
 45880                                  
 45881                                  ; 05/12/2022
 45882                                  ;MSDAT001E:	; label byte
 45883                                  
 45884                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45885                                  DOSDATAEND equ $
 45886                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 45887                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 45888                                  
 45889                                  ;DOSDATALAST ENDS
 45890                                  
 45891                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 45892                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 45893                                  ;============================================================================
 45894                                  ;	END
 45895                                  ;============================================================================
 45896                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 45897                                  ; -----------------------------
 45898                                  ; MAY 2019, ISTANBUL - TURKIYE.
