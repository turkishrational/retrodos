     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 16/01/2024	((Previous: 27/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if consle input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5  are  the  block  device  number  for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E9B278                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;19/09/2023
  3257                                  ;22/12/2022
  3258                                  ;04/11/2022	
  3259                                  ;29/04/2019 - Retro DOS v4.0
  3260                                  ;============================================================================
  3261                                  ; 	Retro DOS v4.0
  3262                                  ;============================================================================
  3263 000000BE 00                      	db 	0
  3264                                  RETRODOSMSG:
  3265 000000BF 0D0A                    	db	13,10
  3266                                  	;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3267                                  	;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3268                                  	;db	"Retro DOS v4.0 by Erdogan Tan [2023]"	; 27/09/2023
  3269 000000C1 526574726F20444F53-     	db	"Retro DOS v4.0 by Erdogan Tan [2024]"	; 05/01/2024
  3269 000000CA 2076342E3020627920-
  3269 000000D3 4572646F67616E2054-
  3269 000000DC 616E205B323032345D 
  3270 000000E5 0D0A2400                	db	13,10,"$", 0 
  3271                                  
  3272                                  ;============================================================================
  3273                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3274                                  ;============================================================================
  3275                                  ; 11/07/2018 - Retro DOS v3.0
  3276                                  
  3277                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3278 000000E9 90                      align 2
  3279                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3280                                  
  3281                                  ; Standard Functions
  3282                                  ;DISPATCH  LABEL WORD
  3283                                  DISPATCH:
  3284                                  	; 16/07/2018 - Retro DOS v3.0
  3285                                  	; (MSDOS 3.3)
  3286                                  
  3287                                  ; 29/04/2019
  3288                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3289                                  
  3290                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3291                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3292                                  
  3293 000000EA [1163]                          short_addr  _$ABORT			    ;  0      0
  3294 000000EC [D816]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3295 000000EE [E116]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3296 000000F0 [9317]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3297 000000F2 [AE17]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3298 000000F4 [B417]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3299 000000F6 [1F16]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3300 000000F8 [4B16]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3301 000000FA [F213]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3302 000000FC [4C14]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3303 000000FE [5814]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3304 00000100 [C817]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3305 00000102 [D217]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3306 00000104 [1310]                          short_addr  _$DISK_RESET		    ; 13      D
  3307 00000106 [F20E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3308 00000108 [A71E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3309 0000010A [7118]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3310 0000010C [B91F]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3311 0000010E [4B20]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3312 00000110 [1718]                          short_addr  _$FCB_DELETE		    ; 19     13
  3313 00000112 [A51F]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3314 00000114 [AA1F]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3315 00000116 [8B1F]                          short_addr  _$FCB_CREATE		    ; 22     16
  3316 00000118 [E118]                          short_addr  _$FCB_RENAME		    ; 23     17
  3317                                  	; 16/07/2018
  3318                                          ;short_addr _CPMFUNC			    ; 24     18	
  3319 0000011A [A006]                          short_addr  NO_OP			    ; 24     18
  3320 0000011C [ED0E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3321 0000011E [E20E]                          short_addr  _$SET_DMA			    ; 26     1A
  3322                                  
  3323                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3324                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3325                                  ;                                                                          ;
  3326 00000120 [9F0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3327 00000122 [A10F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3328                                  ;                                                                          ;
  3329                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3330                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3331                                  
  3332                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3333                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3334                                  
  3335                                  ; 08/07/2018 - Retro DOS v3.0
  3336                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3337                                  
  3338 00000124 [A006]                  	short_addr  NO_OP			    ; 29     1D
  3339 00000126 [A006]                  	short_addr  NO_OP			    ; 30     1E
  3340                                  
  3341                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3342                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3343                                  ;                                                                          ;
  3344 00000128 [E30F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3345                                  ;                                                                          ;
  3346                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3347                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3348                                          ;short_addr _CPMFUNC			    ; 32     20
  3349                                  
  3350                                  ; 08/07/2018 - Retro DOS v3.0
  3351                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3352                                  
  3353 0000012A [A006]                  	short_addr  NO_OP			    ; 32     20
  3354                                  
  3355 0000012C [AF1F]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3356 0000012E [B41F]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3357 00000130 [2918]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3358 00000132 [FF17]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3359                                  
  3360                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3361                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3362                                  
  3363                                  ; Extended Functions
  3364 00000134 [140F]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3365                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3366                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3367                                  ;                                                                          ;
  3368 00000136 [2011]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3369                                  ;                                                                          ;
  3370                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3371                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3372 00000138 [A01F]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3373 0000013A [9B1F]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3374 0000013C [940F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3375 0000013E [B20A]                          short_addr  _$GET_DATE                      ; 42     2A
  3376 00000140 [CF0A]                          short_addr  _$SET_DATE                      ; 43     2B
  3377 00000142 [EE0A]                          short_addr  _$GET_TIME                      ; 44     2C
  3378 00000144 [FF0A]                          short_addr  _$SET_TIME                      ; 45     2D
  3379 00000146 [BE0C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3380                                  
  3381                                  ; Extended functionality group
  3382 00000148 [CE0E]                          short_addr  _$GET_DMA                       ; 47     2F
  3383 0000014A [940C]                          short_addr  _$GET_VERSION                   ; 48     30
  3384 0000014C [B562]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3385                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3386                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3387                                  ;                                                                          ;
  3388 0000014E [E50F]                          short_addr  _$GET_DPB			    ; 50     32
  3389                                  ;                                                                          ;
  3390                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3391                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3392 00000150 [A102]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3393 00000152 [CB0F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3394 00000154 [040F]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3395 00000156 [A50E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3396 00000158 [420F]                          short_addr  _$CHAR_OPER                     ; 55     37
  3397 0000015A [C50C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3398                                  ; XENIX CALLS
  3399                                  ;   Directory Group
  3400 0000015C [A522]                          short_addr  _$MKDIR			    ; 57     39
  3401 0000015E [F121]                          short_addr  _$RMDIR			    ; 58     3A
  3402 00000160 [2C22]                          short_addr  _$CHDIR			    ; 59     3B
  3403                                  ;   File Group
  3404 00000162 [D970]                          short_addr  _$CREAT			    ; 60     3C
  3405 00000164 [0270]                          short_addr  _$OPEN			    ; 61     3D
  3406 00000166 [2E68]                          short_addr  _$CLOSE		 	    ; 62     3E
  3407 00000168 [3F69]                          short_addr  _$READ			    ; 63     3F
  3408 0000016A [A569]                          short_addr  _$WRITE			    ; 64     40
  3409 0000016C [2971]                          short_addr  _$UNLINK			    ; 65     41
  3410 0000016E [AA69]                          short_addr  _$LSEEK			    ; 66     42
  3411 00000170 [E670]                          short_addr  _$CHMOD			    ; 67     43
  3412 00000172 [0623]                          short_addr  _$IOCTL			    ; 68     44
  3413 00000174 [5F6A]                          short_addr  _$DUP			    ; 69     45
  3414 00000176 [7D6A]                          short_addr  _$DUP2			    ; 70     46
  3415 00000178 [8221]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3416                                  ;   Memory Group
  3417 0000017A [A863]                          short_addr  _$ALLOC			    ; 72     48
  3418 0000017C [2265]                          short_addr  _$DEALLOC                       ; 73     49
  3419 0000017E [FE64]                          short_addr  _$SETBLOCK                      ; 74     4A
  3420                                  ;   Process Group
  3421 00000180 [8F5C]                          short_addr  _$EXEC			    ; 75     4B
  3422 00000182 [ED62]                          short_addr  _$EXIT			    ; 76     4C
  3423 00000184 [855C]                          short_addr  _$WAIT			    ; 77     4D
  3424 00000186 [BE20]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3425                                  ;   Special Group
  3426 00000188 [1421]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3427                                  ; SPECIAL SYSTEM GROUP
  3428                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3429                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3430                                  ;                                                                          ;
  3431 0000018A [F802]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3432 0000018C [0403]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3433 0000018E [D70F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3434 00000190 [4810]                          short_addr  _$SETDPB			    ; 83     53
  3435                                  ;                                                                          ;
  3436                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3437                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3438 00000192 [B90C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3439                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3440                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3441                                  ;                                                                          ;
  3442 00000194 [0F11]                          short_addr  _$DUP_PDB                       ; 85     55
  3443                                  ;                                                                          ;
  3444                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3445                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3446 00000196 [4F71]                          short_addr  _$RENAME			    ; 86     56
  3447 00000198 [116A]                          short_addr  _$FILE_TIMES                    ; 87     57
  3448 0000019A [5865]                          short_addr  _$ALLOCOPER                     ; 88     58
  3449                                  
  3450                                  ; 08/07/2018 - Retro DOS v3.0
  3451                                  ; -------------------------------------------------------------------------;
  3452                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3453                                  
  3454                                  ; Network extention system calls
  3455 0000019C [560F]                          short_addr  _$GetExtendedError              ; 89     59
  3456 0000019E [DA71]                          short_addr  _$CreateTempFile                ; 90     5A
  3457 000001A0 [C271]                          short_addr  _$CreateNewFile                 ; 91     5B
  3458 000001A2 [BB73]                          short_addr  _$LockOper                      ; 92     5C
  3459 000001A4 [3E66]                          short_addr  _$ServerCall                    ; 93     5D
  3460 000001A6 [476B]                          short_addr  _$UserOper                      ; 94     5E
  3461 000001A8 [AC6A]                          short_addr  _$AssignOper                    ; 95     5F
  3462 000001AA [9C6F]                          short_addr  _$NameTrans                     ; 96     60
  3463 000001AC [A006]                  	short_addr  NO_OP			    ; 97     61
  3464 000001AE [0403]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3465                                  ; the next call is reserved for hangool sys call
  3466                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3467 000001B0 [790F]                  	short_addr  _$ECS_Call			    ; 99     63
  3468                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3469                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3470                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3471                                  ;                                                                          ;
  3472 000001B2 [1003]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3473                                  ;                                                                          ;
  3474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3476 000001B4 [500D]                          short_addr  _$GetExtCntry                   ; 101    65
  3477 000001B6 [510E]                          short_addr  _$GetSetCdPg                    ; 102    66
  3478 000001B8 [7B68]                          short_addr  _$ExtHandle                     ; 103    67
  3479 000001BA [6168]                          short_addr  _$COMMIT                        ; 104    68
  3480                                  
  3481                                  ; 08/07/2018
  3482                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3483                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3484                                  
  3485                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3486 000001BC [1212]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3487 000001BE [6168]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3488 000001C0 [A006]                  	short_addr  NO_OP                           ; 107    6B   
  3489                                  						    ; IFS_IOCTL no longer 
  3490                                  						    ; supported
  3491 000001C2 [7072]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3492                                  
  3493                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3494                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3495                                  ;                                                                          ;
  3496                                  ;ifdef ROMEXEC
  3497                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3498                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3499                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3500                                  ;endif
  3501                                  ;                                                                          ;
  3502                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3503                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3504                                  
  3505                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3506                                  
  3507                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3508                                  
  3509                                  ; 08/07/2018 - Retro DOS v3.0
  3510                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3511                                  
  3512                                  ;	If 	Installed
  3513                                  
  3514                                  align 2
  3515                                  
  3516                                  ;PUBLIC FOO
  3517                                  
  3518                                  FOO:	; LABEL WORD
  3519 000001C4 [5D07]                          short_addr  Leave2F
  3520                                  
  3521 000001C6 [C801]                  DTab:	DW  DOSTable
  3522                                  
  3523                                  	;PUBLIC FOO,DTAB
  3524                                  
  3525                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3526                                  
  3527                                  ; 29/04/2019
  3528                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3529                                  
  3530                                  
  3531                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3532                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3533                                         
  3534                                  DOSTable:  ; LABEL  WORD
  3535 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3536 000001C9 [8809]                          short_addr  DOSInstall          ;   0 install check
  3537 000001CB [C62F]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3538 000001CD [370F]                          short_addr  RECSET              ;   2   RECSET
  3539 000001CF [8209]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3540 000001D1 [A551]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3541 000001D3 [E316]                          short_addr  OUTT                ;   5   OUT
  3542 000001D5 [7C54]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3543 000001D7 [1F5A]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3544 000001D9 [C430]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3545 000001DB [D15B]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3546 000001DD [6F74]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3547 000001DF [0C2D]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3548 000001E1 [F62C]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3549 000001E3 [460B]                          short_addr  DATE16              ;   13  DATE16
  3550 000001E5 [7E12]                          short_addr  Idle		;   14      empty slot
  3551 000001E7 [185A]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3552 000001E9 [7E12]                          short_addr  Idle		;   16      empty slot
  3553 000001EB [4B12]                          short_addr  StrCpy              ;   17  StrCpy
  3554 000001ED [6312]                          short_addr  StrLen              ;   18  StrLen
  3555 000001EF [5051]                          short_addr  UCase		;   19  UCase
  3556 000001F1 [5C5A]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3557 000001F3 [A85B]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3558 000001F5 [A967]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3559 000001F7 [0C6C]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3560 000001F9 [CA04]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3561 000001FB [B76B]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3562 000001FD [C16F]                          short_addr  DriveFromText       ;   26  DriveFromText
  3563 000001FF [F00B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3564 00000201 [8A0C]                          short_addr  DSUM                ;   28  DSUM
  3565 00000203 [E40B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3566 00000205 [2912]                          short_addr  StrCmp              ;   30  StrCmp
  3567 00000207 [FA6A]                          short_addr  InitCDS             ;   31  initcds
  3568 00000209 [7667]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3569 0000020B [9C6F]                          short_addr  _$NameTrans		;   33  $NameTrans
  3570 0000020D [C706]                          short_addr  CAL_LK              ;   34  CAL_LK
  3571 0000020F [B242]                          short_addr  DEVNAME             ;   35  DEVNAME
  3572 00000211 [7E12]                          short_addr  Idle                ;   36  Idle
  3573 00000213 [7112]                          short_addr  DStrLen             ;   37  DStrLen
  3574 00000215 [2213]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3575 00000217 [2E68]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3576 00000219 [2813]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3577 0000021B [3F69]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3578 0000021D [E212]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3579 0000021F [6513]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3580 00000221 [5413]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3581 00000223 [8213]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3582                                          
  3583                                  	; 29/04/2019 - Retro DOS v4.0
  3584 00000225 [8713]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3585                                  
  3586 00000227 [A006]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3587                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3588                                  
  3589                                  DOSTableEnd:  ; LABEL BYTE
  3590                                  
  3591                                  	;ENDIF
  3592                                  
  3593                                  ; ----------------------------------------------------------------------------
  3594                                  ; BREAK   <Copyright notice and version>
  3595                                  ; ----------------------------------------------------------------------------
  3596                                  
  3597                                  ;CODSTRT EQU	$
  3598                                  
  3599                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3600                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3601                                  
  3602                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3603                                  ;       module. The reason is so that the data alignments are the same in
  3604                                  ;       IBM-DOS and MS-DOS up through header.
  3605                                  
  3606                                  	;PUBLIC	HEADER
  3607                                  
  3608                                  HEADER:	; LABEL	BYTE
  3609                                          ;IF	DEBUG
  3610                                          ;DB	13,10,"Debugging DOS version "
  3611                                          ;DB	MAJOR_VERSION + "0"
  3612                                          ;DB	"."
  3613                                          ;DB	(MINOR_VERSION / 10) + "0"
  3614                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3615                                          ;ENDIF
  3616                                  
  3617                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3618                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3619                                  %if 0
  3620                                          ;IF	NOT IBM
  3621                                          DB	13,10,"MS-DOS version "
  3622                                          DB	MAJOR_VERSION + "0"
  3623                                          DB	"."
  3624                                          DB	(MINOR_VERSION / 10) + "0"
  3625                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3626                                          DB	(MINOR_VERSION % 10) + "0"
  3627                                  
  3628                                          ;IF	HIGHMEM
  3629                                          ;DB	"H"
  3630                                          ;ENDIF
  3631                                  
  3632                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3633                                  	; 30/04/2019 - Retro DOS v4.0
  3634                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3635                                  
  3636                                  	;ENDIF
  3637                                  
  3638                                  %endif
  3639                                  
  3640                                  ;IF DEBUG
  3641                                  ;	DB	13,10,"$"
  3642                                  ;ENDIF
  3643                                  
  3644                                  ;include copyrigh.inc
  3645                                  
  3646                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3647                                  
  3648                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3649                                  	;DB	"Licensed Material - Property of Microsoft "
  3650                                  	;DB	"All rights reserved "
  3651                                  
  3652                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3653                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3654                                  
  3655                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3656                                  ms_copyright:
  3657 00000229 4D5320444F53205665-     	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3657 00000232 7273696F6E20352E30-
  3657 0000023B 3020284329436F7079-
  3657 00000244 726967687420313938-
  3657 0000024D 312D31393931204D69-
  3657 00000256 63726F736F66742043-
  3657 0000025F 6F727020           
  3658 00000263 4C6963656E73656420-     	db	'Licensed Material - Property of Microsoft '
  3658 0000026C 4D6174657269616C20-
  3658 00000275 2D2050726F70657274-
  3658 0000027E 79206F66204D696372-
  3658 00000287 6F736F667420       
  3659 0000028D 416C6C207269676874-     	db	'All rights reserved '
  3659 00000296 732072657365727665-
  3659 0000029F 6420               
  3660                                  
  3661                                  ;============================================================================
  3662                                  ; MSCODE.ASM
  3663                                  ;============================================================================
  3664                                  
  3665                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3666                                  ; 03/03/2018
  3667                                  
  3668                                  ;
  3669                                  ; MSCODE.ASM -- MSDOS code
  3670                                  ;
  3671                                  
  3672                                  ;INCLUDE DOSSEG.ASM
  3673                                  ;INCLUDE STDSW.ASM
  3674                                  
  3675                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3676                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3677                                  
  3678                                  ;.xcref
  3679                                  ;INCLUDE DOSSYM.ASM
  3680                                  ;INCLUDE DEVSYM.ASM
  3681                                  ;.cref
  3682                                  ;.list
  3683                                  
  3684                                  ;IFNDEF  KANJI
  3685                                  ;KANJI   EQU     0       ; FALSE
  3686                                  ;ENDIF
  3687                                  
  3688                                  ;IFNDEF  IBM
  3689                                  ;IBM     EQU     0
  3690                                  ;ENDIF
  3691                                  
  3692                                  ;IFNDEF  HIGHMEM
  3693                                  ;HIGHMEM  EQU     0
  3694                                  ;ENDIF
  3695                                  
  3696                                          ;i_need  USER_SP,WORD
  3697                                          ;i_need  USER_SS,WORD
  3698                                          ;i_need  SAVEDS,WORD
  3699                                          ;i_need  SAVEBX,WORD
  3700                                          ;i_need  INDOS,BYTE
  3701                                          ;i_need  NSP,WORD
  3702                                          ;i_need  NSS,WORD
  3703                                          ;i_need  CURRENTPDB,WORD
  3704                                          ;i_need  AUXSTACK,BYTE
  3705                                          ;i_need  CONSWAP,BYTE
  3706                                          ;i_need  IDLEINT,BYTE
  3707                                          ;i_need  NOSETDIR,BYTE
  3708                                          ;i_need  ERRORMODE,BYTE
  3709                                          ;i_need  IOSTACK,BYTE
  3710                                          ;i_need  WPERR,BYTE
  3711                                          ;i_need  DSKSTACK,BYTE
  3712                                          ;i_need  CNTCFLAG,BYTE
  3713                                          ;i_need  LEAVEADDR,WORD
  3714                                          ;i_need  NULLDEVPT,DWORD
  3715                                  
  3716                                          ;IF NOT IBM
  3717                                          ;i_need  OEM_HANDLER,DWORD
  3718                                          ;ENDIF
  3719                                  
  3720                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3721                                  
  3722                                  ;============================================================================
  3723                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3724                                  ;============================================================================
  3725                                  ; 11/07/2018 - Retro DOS v3.0
  3726                                  ; 01/05/2019 - Retro DOS v4.0
  3727                                  
  3728                                  ; DosCode SEGMENT
  3729                                  
  3730                                  ; ==========================================================================
  3731                                  ;
  3732                                  ; $Set_CTRL_C_Trapping
  3733                                  ;
  3734                                  ; Function:
  3735                                  ;	Enable disable ^C checking in dispatcher
  3736                                  ;
  3737                                  ; Inputs:
  3738                                  ;		AL = 0 read ^C status
  3739                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3740                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3741                                  ;		AL = 5 get DOS boot drive
  3742                                  ;		AL = 6 Get version number
  3743                                  ;			RETURNS:
  3744                                  ;				BH = Minor version number
  3745                                  ;				BL = Major version number
  3746                                  ;				DL = DOS internal revision
  3747                                  ;				DH = DOS type flags
  3748                                  ;					Bit 3 	- DOS in ROM
  3749                                  ;					Bit 4 	- DOS in HMA
  3750                                  ;					Bit 0-2, 5-7 - Reserved
  3751                                  ; Outputs:
  3752                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3753                                  ;
  3754                                  ; History:
  3755                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3756                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3757                                  ; ==========================================================================
  3758                                  
  3759                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3760                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3761                                  
  3762                                  _$SET_CTRL_C_TRAPPING:
  3763                                  	; 01/05/2019 - Retro DOS v4.0
  3764                                  
  3765 000002A1 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3766 000002A3 7603                    	jbe	short scct_1		; If yes continue processing
  3767                                  
  3768 000002A5 B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3769                                  
  3770 000002A7 CF                      	iret
  3771                                  scct_1:
  3772 000002A8 1E                      	push	DS
  3773                                  
  3774                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3775 000002A9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3776                                  	
  3777 000002AE 50                      	push	AX			; DL only register that can change
  3778 000002AF 56                      	push	SI
  3779                                  
  3780 000002B0 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3781 000002B3 30E4                    	xor	AH,AH			; Clear high byte of AX
  3782 000002B5 09C0                    	or	AX,AX			; Check for subfunction 0
  3783 000002B7 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3784                                  
  3785 000002B9 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3786 000002BB EB35                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3787                                  scct_2:
  3788 000002BD 48                      	dec	AX			; Now dec AX and see if it was 1
  3789 000002BE 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3790                                  
  3791 000002C0 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3792 000002C3 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3793 000002C5 EB2B                    	jmp	SHORT scct_9s		; Jmp to exit
  3794                                  scct_3:
  3795 000002C7 48                      	dec	AX			; Dec AX again to see if it was 2
  3796 000002C8 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3797                                  
  3798 000002CA 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3799 000002CD 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3800 000002CF EB21                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3801                                  scct_4:
  3802 000002D1 83F803                  	cmp	AX,3 			; Test for 5 after it was dec twice
  3803 000002D4 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3804 000002D6 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3805 000002DA EB16                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3806                                  scct_5:
  3807 000002DC 83F804                  	cmp	AX,4 			; Test for 6 after it was dec twice
  3808 000002DF 7511                    	jne	short scct_9s		; If not equal then not get version
  3809                                  	
  3810                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3811                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)	
  3812 000002E1 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3813 000002E4 B200                    	mov	dl,0
  3814                                  	;mov	DL,DOSREVNM ; 0
  3815                                  
  3816 000002E6 30F6                    	xor	dh,dh			; assume vanilla DOS
  3817 000002E8 803E[1112]00            	cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3818                                  	;je	short @F
  3819 000002ED 7403                    	je	short scct_6
  3820 000002EF 80CE10                  	or	dh,10h
  3821                                  	;or	DH,DOSINHMA ; 10h
  3822                                  ;@@:
  3823                                  scct_6:
  3824                                  
  3825                                  ;ifdef ROMDOS
  3826                                  ;	or	DH, DOSINROM
  3827                                  ;endif ; ROMDOS
  3828                                  
  3829                                  scct_9s:
  3830 000002F2 5E                      	pop	SI
  3831 000002F3 58                      	pop	AX
  3832 000002F4 1F                      	pop	DS
  3833                                  
  3834                                  scct_9f:
  3835 000002F5 CF                      	iret
  3836                                  
  3837                                  SetCtrlShortEntry:			; This allows a conditional entry
  3838                                  					; from main dispatch code
  3839 000002F6 EBA9                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3840                                  
  3841                                  ; ==========================================================================
  3842                                  ;									   
  3843                                  ; The following two routines are dispatched to directly with ints disabled
  3844                                  ; immediately after the int 21h entry.	no DIS state is set.
  3845                                  ;
  3846                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3847                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3848                                  ;
  3849                                  ; ==========================================================================
  3850                                  
  3851                                  _$SET_CURRENT_PDB:
  3852 000002F8 1E                      	push	DS
  3853                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3854 000002F9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3855 000002FE 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3856 00000302 1F                      	pop	DS
  3857 00000303 CF                      	iret
  3858                                  
  3859                                  ; ==========================================================================
  3860                                  ;
  3861                                  ; $get_current_PDB returns in BX the current process
  3862                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3863                                  ;
  3864                                  ; ==========================================================================
  3865                                  
  3866                                  _$GET_CURRENT_PDB:
  3867 00000304 1E                      	push	DS
  3868                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3869 00000305 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3870 0000030A 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3871 0000030E 1F                      	pop	DS
  3872 0000030F CF                      	iret
  3873                                  
  3874                                  ; ==========================================================================
  3875                                  ;
  3876                                  ; Sets the Printer Flag to whatever is in AL.
  3877                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3878                                  ;
  3879                                  ; ==========================================================================
  3880                                  
  3881                                  _$SET_PRINTER_FLAG:
  3882 00000310 1E                      	push	ds
  3883                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3884 00000311 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3885 00000316 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3886 00000319 1F                      	pop	ds
  3887 0000031A CF                      	iret
  3888                                  
  3889                                  ; 01/05/2019 - Retro DOS v4.0
  3890                                  ; 08/07/2018 - Retro DOS v3.0
  3891                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3892                                  
  3893                                  ; ----------------------------------------------------------------------------
  3894                                  ; BREAK   <System call entry points and dispatcher>
  3895                                  ; ----------------------------------------------------------------------------
  3896                                  
  3897                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3898                                  
  3899                                  ; ==========================================================================
  3900                                  ;
  3901                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3902                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3903                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3904                                  ;
  3905                                  ; ==========================================================================
  3906                                  
  3907                                  SYSTEM_CALL:    ; PROC NEAR
  3908                                  
  3909                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3910                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3911                                  
  3912                                  ;entry	QUIT				
  3913                                  QUIT:				; INT 20H entry point	
  3914                                  	;MOV	AH,0
  3915 0000031B 30E4                    	xor	ah,ah ; 08/07/2018
  3916 0000031D EB36                    	JMP     SHORT SAVREGS
  3917                                  
  3918                                  ; ---------------------------------------------------------------------------
  3919                                  
  3920                                  	; The system call in AH is out of the range that we know how
  3921                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3922                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3923                                  	; error as this may break some programs compatability.
  3924                                  
  3925                                  BADCALL:
  3926                                          ;MOV	AL,0
  3927 0000031F 30C0                    	xor	al,al ; 08/07/2018
  3928                                  IRETT:	; 06/05/2019
  3929                                  _IRET:
  3930 00000321 CF                              IRET
  3931                                  
  3932                                  ; ---------------------------------------------------------------------------
  3933                                  
  3934                                  ; 01/05/2019 - Retro DOS v4.0
  3935                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3936                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3937                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3938                                  
  3939                                  	; An alternative method of entering the system is to perform a
  3940                                  	; CALL 5 in the program segment prefix with the contents of CL
  3941                                  	; indicating what system call the user would like. A subset of
  3942                                  	; the possible system calls is allowed here only the
  3943                                  	; CPM-compatible calls may get dispatched.
  3944                                  
  3945                                  		; System call entry point and dispatcher
  3946                                  CALL_ENTRY:
  3947 00000322 1E                      	push	DS
  3948                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3949 00000323 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3950 00000328 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3951                                  
  3952 0000032C 58                              POP     AX                      ; IP from the long call at 5
  3953 0000032D 58                              POP     AX                      ; Segment from the long call at 5
  3954 0000032E 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3955                                  
  3956                                  		; Re-order the stack to simulate an interrupt 21.
  3957                                  
  3958 00000332 9C                      	PUSHF				; Start re-ordering the stack
  3959 00000333 FA                      	CLI
  3960 00000334 50                              PUSH    AX                      ; Save segment
  3961 00000335 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3962                                  	; 04/11/2022
  3963                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3964                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3965 00000339 FF36[EC05]              	push	word [SAVEDS]
  3966 0000033D 1F                      	pop	ds
  3967                                  	;
  3968                                  	;cmp	cl,36
  3969 0000033E 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3970 00000341 77DC                            JA      SHORT BADCALL
  3971 00000343 88CC                            MOV     AH,CL
  3972                                  	; 08/07/2018
  3973 00000345 EB0E                    	jmp	short SAVREGS
  3974                                  
  3975                                  ; ---------------------------------------------------------------------------
  3976                                  
  3977                                  ; 01/05/2019 - Retro DOS v4.0
  3978                                  
  3979                                  	; This is the normal INT 21 entry point. We first perform a
  3980                                  	; quick test to see if we need to perform expensive DOS-entry
  3981                                  	; functions. Certain system calls are done without interrupts
  3982                                  	; being enabled.
  3983                                  
  3984                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  3985                                  
  3986                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  3987                                  ; 04/11/2022
  3988                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  3989                                  
  3990                                  COMMAND:
  3991                                  	; 22/12/2022
  3992 00000347 FA                      	cli
  3993                                  
  3994                                  	; 01/05/2019 - Retro DOS v4.0
  3995                                  	; 08/07/2018 - Retro DOS v3.0
  3996                                  
  3997                                  ; 22/12/2022
  3998                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3999                                  	;IF	NOT IBM
  4000 00000348 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4001 0000034B 7203                    	JB	SHORT NOTOEM
  4002 0000034D E98401                  	JMP	_$SET_OEM_HANDLER
  4003                                  
  4004                                  NOTOEM:
  4005                                  	;ENDIF
  4006                                  
  4007                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4008                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4009                                  
  4010                                  	; 22/12/2022
  4011                                  	;cli	; 08/07/2018
  4012                                  
  4013                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4014                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4015                                  	; 04/11/2022
  4016 00000350 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4017                                  	;JBE	SHORT SAVREGS
  4018 00000353 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4019                                  
  4020                                  	; 31/05/2019
  4021                                  
  4022                                  	; The following set of calls are issued by the server at
  4023                                  	; *arbitrary* times and, therefore, must be executed on
  4024                                  	; the user's entry stack and executed with interrupts off.
  4025                                  
  4026                                  SAVREGS:
  4027                                  	; 01/05/2019 - Retro DOS v4.0
  4028                                  	; 10/08/2018
  4029                                  	; 08/07/2018 - Retro DOS v3.0
  4030 00000355 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4031                                  	;;je	_$SET_CTRL_C_TRAPPING
  4032                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4033 00000358 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4034                                  	; 04/11/2022
  4035 0000035A 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4036 0000035C 80FC64                  	cmp	ah,64h			; Check Max case number
  4037 0000035F 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4038 00000361 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4039 00000363 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4040 00000366 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4041 00000368 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4042 0000036B 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4043 0000036D 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4044 00000370 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4045                                  
  4046                                  SaveAllRegs:
  4047                                  	; 01/05/2019 - Retro DOS v4.0
  4048                                  
  4049 00000372 06                              push	ES
  4050 00000373 1E                      	push	DS
  4051 00000374 55                      	push	BP
  4052 00000375 57                      	push	DI
  4053 00000376 56                      	push	SI
  4054 00000377 52                      	push	DX
  4055 00000378 51                      	push	CX
  4056 00000379 53                      	push	BX
  4057 0000037A 50                      	push	AX
  4058                                  
  4059 0000037B 8CD8                    	mov	AX,DS
  4060                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4061 0000037D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4062 00000382 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4063 00000385 891E[EA05]              	mov	[SAVEBX],BX
  4064                                  
  4065                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4066                                  	
  4067                                  	; 08/07/2018 - Retro DOS v3.0        
  4068                                  	;xor     ax,ax
  4069                                  	;mov     [USER_ID],ax
  4070                                  	;mov     ax,[CurrentPDB]
  4071                                  	;mov     [PROC_ID],ax
  4072                                  
  4073                                  	; 01/05/2019
  4074                                  
  4075                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4076                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4077                                  	; this!!!
  4078                                  
  4079 00000389 A1[8405]                	MOV     AX,[USER_SP]
  4080 0000038C A3[F205]                        MOV     [NSP],AX
  4081 0000038F A1[8605]                        MOV     AX,[USER_SS]
  4082 00000392 A3[F005]                        MOV     [NSS],AX
  4083                                  
  4084 00000395 31C0                    	xor	AX,AX ; 0
  4085 00000397 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4086                                  
  4087 0000039A F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4088 0000039F 7503                    	jnz	short set_indos_flag	; if win386 present
  4089 000003A1 A3[3E03]                	mov	[USER_ID],AX
  4090                                  set_indos_flag:
  4091 000003A4 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4092                                  
  4093 000003A8 8926[8405]                      MOV     [USER_SP],SP
  4094 000003AC 8C16[8605]                      MOV     [USER_SS],SS
  4095                                  
  4096 000003B0 A1[3003]                	mov	AX,[CurrentPDB]
  4097 000003B3 A3[3C03]                	mov	[PROC_ID],AX
  4098 000003B6 8ED8                    	mov	DS,AX
  4099 000003B8 58                      	pop	AX
  4100 000003B9 50                      	push	AX
  4101                                  
  4102                                  	; save user stack in his area for later returns (possibly from EXEC)
  4103                                  
  4104 000003BA 89262E00                        MOV     [PDB.USER_STACK],SP
  4105 000003BE 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4106                                  
  4107                                  	; 18/07/2018
  4108                                  	;mov	byte [CS:FSHARING], 0
  4109                                  
  4110                                  	;MOV     BX,CS			; no holes here.
  4111                                  	;MOV     SS,BX
  4112                                  
  4113                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4114 000003C2 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4115                                  					;entry	REDISP
  4116                                  REDISP:
  4117 000003C7 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4118 000003CA FB                              STI                             ; stack is in our space now...
  4119                                  
  4120 000003CB 8CD3                    	mov	bx,ss
  4121 000003CD 8EDB                    	mov	ds,bx
  4122                                  
  4123 000003CF 93                      	xchg	ax,bx
  4124                                  
  4125 000003D0 31C0                    	xor	ax,ax ; 0
  4126                                  
  4127                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4128                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4129                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4130                                  
  4131                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4132                                  
  4133                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4134                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4135                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4136                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4137                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4138                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4139                                  	;inc	ax
  4140                                  	;;inc	AL			; AL = 1
  4141                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4142                                  
  4143                                  	; 15/12/2022
  4144 000003D2 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4145                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4146 000003D5 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4147 000003DB A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4148                                  	;mov	byte [IDLEINT],1
  4149 000003DE A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4150 000003E1 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4151 000003E4 40                      	inc	ax
  4152                                  	;inc	al			; AL = 1
  4153 000003E5 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4154                                  
  4155 000003E8 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4156                                  
  4157 000003E9 88E3                    	MOV     BL,AH			
  4158 000003EB D1E3                            SHL     BX,1			; 2 bytes per call in table
  4159                                         
  4160 000003ED FC                      	CLD
  4161                                  		; Since the DOS maintains mucho state information across system
  4162                                  		; calls, we must be very careful about which stack we use.
  4163                                  		; First, all abort operations must be on the disk stack. This
  4164                                  		; is due to the fact that we may be hitting the disk (close
  4165                                  		; operations, flushing) and may need to report an INT 24.
  4166                                          
  4167 000003EE 08E4                    	OR      AH,AH
  4168 000003F0 7416                            JZ      SHORT DSKROUT		; ABORT
  4169                                  
  4170                                          ;CMP	AH,12
  4171                                          ;JBE	SHORT IOROUT		; Character I/O
  4172                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4173                                          ;JZ	SHORT IOROUT
  4174                                          ;CMP	AH,SET_CURRENT_PDB
  4175                                          ;JNZ	SHORT DSKROUT
  4176                                  
  4177                                  		; Second, PRINT and PSPRINT and the server issue
  4178                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4179                                  		; This call MUST, therefore, use the AUXSTACK.
  4180                                  
  4181                                  	; 10/08/2018
  4182 000003F2 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4183 000003F5 743D                    	je      short DISPCALL
  4184                                  	
  4185                                  	; 01/05/2019
  4186                                  	
  4187                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4188                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4189                                  
  4190 000003F7 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4191 000003FA 770C                    	ja      short DSKROUT
  4192                                  
  4193                                  IOROUT:
  4194                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4195                                  	; (ss: prefix was not needed here! ds=ss)
  4196                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4197                                  	; 15/12/2022
  4198 000003FC 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4199 00000401 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4200 00000403 BC[A00A]                        MOV     SP,IOSTACK
  4201 00000406 EB2C                            JMP     SHORT DISPCALL
  4202                                  
  4203                                  		; We are on a system call that is classified as "the rest".
  4204                                  		; We place ourselves onto the DSKSTACK and away we go.
  4205                                  		; We know at this point:
  4206                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4207                                  		;    ErrorMode and WpErr
  4208                                  		; *  That there can be no critical sections in effect.
  4209                                  		;    We signal the server to remove all the resources.
  4210                                  
  4211                                  DSKROUT:
  4212                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4213                                  	; 08/07/2018 - Retro DOS v3.0
  4214 00000408 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4215 0000040B C606[2303]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4216                                  	
  4217 00000410 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4218 00000415 C606[2203]FF            	MOV     BYTE [WPERR],-1		; error mode, so good place to
  4219                                  	                   		; make sure flags are reset
  4220                                  
  4221                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4222                                  	; (ss: prefix was not needed here! ds=ss)
  4223                                  
  4224                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4225                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4226                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4227                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4228                                                                          ; make sure flags are reset
  4229 0000041A 50                      	push    ax
  4230 0000041B B482                    	mov     ah,82h			; Release all resource information
  4231 0000041D CD2A                    	int     2Ah 		; Microsoft Networks 
  4232                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4233 0000041F 58                      	pop     ax
  4234                                  
  4235                                  		; Since we are going to be running on the DSKStack and since
  4236                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4237                                  		; generation of INT 28's.
  4238                                  
  4239                                  	; 15/12/2022
  4240                                  	;mov     byte [ss:IDLEINT],0
  4241                                  	;
  4242                                          ;mov	sp,DSKSTACK
  4243                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4244                                          ;jz	short DISPCALL
  4245                                  
  4246 00000420 C606[5803]00            	mov     byte [IDLEINT],0
  4247                                  
  4248 00000425 BC[2009]                	MOV     SP,DSKSTACK
  4249 00000428 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4250 0000042D 7405                    	JZ      SHORT DISPCALL
  4251                                  
  4252 0000042F 50                              PUSH    AX
  4253                                          ;invoke	DSKSTATCHK
  4254 00000430 E88B4D                          CALL	DSKSTATCHK
  4255 00000433 58                      	POP     AX
  4256                                  DISPCALL:
  4257                                  	; 01/05/2019 - Retro DOS v4.0
  4258 00000434 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4259                                  
  4260                                  	; 15/12/2022
  4261 00000439 871E[EA05]              	xchg	bx,[SAVEBX]
  4262 0000043D 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4263                                  
  4264                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4265                                  	; (ss: prefix was not needed here! ds=ss)        
  4266                                  	;xchg	bx,[ss:SAVEBX]
  4267                                  	;mov	ds,[ss:SAVEDS]
  4268                                  
  4269 00000441 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4270                                  
  4271                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4272                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4273                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4274                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4275                                  	; because this bit is used to indicate to the next int 21 call that
  4276                                  	; the previous int 21 was an exec.
  4277                                  	;
  4278                                  	; So do not add any code between the call above and the label 
  4279                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4280                                  
  4281                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4282 00000446 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4283                                  
  4284                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4285                                  ; DOSCODE:41F7h
  4286                                  
  4287                                  ;entry LEAVE
  4288                                  ;;;_LEAVE:				; Exit from a system call
  4289                                  LeaveDOS: ; 18/07/2018 
  4290                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4291 0000044C FA                      	CLI
  4292                                  
  4293                                  	; 01/05/2019
  4294                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4295 0000044D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4296 00000452 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4297 00000457 7527                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4298                                  
  4299                                  LeaveA20On:
  4300 00000459 FE0E[2103]                      DEC     BYTE [INDOS]
  4301                                          ; 04/11/2022
  4302 0000045D 8E16[8605]              	mov	ss,[USER_SS]
  4303 00000461 8B26[8405]              	MOV     SP,[USER_SP]
  4304                                  	;MOV	SS,[USER_SS]
  4305 00000465 89E5                    	MOV     BP,SP
  4306                                  	;MOV	[BP.user_AX],AL	
  4307                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4308                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h	
  4309                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4310                                  	; 15/12/2022
  4311 00000467 884600                  	MOV	[BP],AL
  4312 0000046A A1[F205]                	MOV     AX,[NSP]
  4313 0000046D A3[8405]                        MOV     [USER_SP],AX
  4314 00000470 A1[F005]                        MOV     AX,[NSS]
  4315 00000473 A3[8605]                        MOV     [USER_SS],AX
  4316                                  
  4317 00000476 58                      	pop	AX
  4318 00000477 5B                      	pop	BX
  4319 00000478 59                      	pop	CX
  4320 00000479 5A                      	pop	DX
  4321 0000047A 5E                      	pop	SI
  4322 0000047B 5F                      	pop	DI
  4323 0000047C 5D                      	pop	BP
  4324 0000047D 1F                      	pop	DS
  4325 0000047E 07                      	pop	ES
  4326                                  
  4327 0000047F CF                              IRET
  4328                                  
  4329                                  disa20:	   				; M068 - Start
  4330 00000480 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4331 00000484 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4332 00000488 75CF                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4333                                  					;    a20 off
  4334                                  					; Y: turn a20 off and dec a20off_count
  4335 0000048A FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4336                                   					; Start - M004
  4337 0000048E 1E                      	push	ds			; segment of stub
  4338 0000048F BB[2D11]                	mov	bx,disa20_iret		; offset in stub
  4339 00000492 53                      	push	bx
  4340 00000493 CB                      	retf	  			; go to stub
  4341                                  					; End - M004
  4342                                  ;SYSTEM_CALL ENDP
  4343                                  
  4344                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4345                                  ; 04/11/2022
  4346                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4347                                  
  4348                                  ; ==========================================================================
  4349                                  ;
  4350                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4351                                  ; the stack prior to giving the user control
  4352                                  ;
  4353                                  ; ==========================================================================
  4354                                  
  4355                                  ; 01/05/2019 - Retro DOS v4.0
  4356                                  
  4357                                          ;procedure restore_world,NEAR
  4358                                  restore_world:
  4359                                  	;getdseg <es>		; es -> dosdata
  4360 00000494 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4361                                  
  4362 00000499 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4363                                  
  4364 0000049E 58                              POP     AX
  4365 0000049F 5B                              POP     BX
  4366 000004A0 59                              POP     CX
  4367 000004A1 5A                              POP     DX
  4368 000004A2 5E                              POP     SI
  4369 000004A3 5F                              POP     DI
  4370 000004A4 5D                              POP     BP
  4371 000004A5 1F                              POP     DS
  4372                                  
  4373 000004A6 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4374                                  
  4375                                  ;restore_world	ENDP
  4376                                  
  4377                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4378                                  
  4379                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4380                                  ; 04/11/2022
  4381                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4382                                  
  4383                                  ; ==========================================================================
  4384                                  ;
  4385                                  ; Save_World saves complete registers on the stack
  4386                                  ;
  4387                                  ; ==========================================================================
  4388                                  
  4389                                          ;procedure save_world,NEAR
  4390                                  save_world:
  4391                                  	;getdseg <es>		; es -> dosdata
  4392 000004AB 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4393                                  
  4394 000004B0 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4395                                  
  4396                                  	; 12/05/2019
  4397                                          
  4398 000004B5 1E                      	PUSH    DS
  4399 000004B6 55                              PUSH    BP
  4400 000004B7 57                              PUSH    DI
  4401 000004B8 56                              PUSH    SI
  4402 000004B9 52                              PUSH    DX
  4403 000004BA 51                              PUSH    CX
  4404 000004BB 53                              PUSH    BX
  4405 000004BC 50                              PUSH    AX
  4406                                  
  4407 000004BD 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4408                                  
  4409 000004C2 55                      	push	BP		
  4410 000004C3 89E5                    	mov	BP,SP
  4411 000004C5 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4412 000004C8 5D                      	pop	BP
  4413                                  	
  4414 000004C9 C3                      	retn
  4415                                  
  4416                                  ;save_world	ENDP
  4417                                  
  4418                                  ; 01/05/2019
  4419                                  
  4420                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4421                                  ; 04/11/2022
  4422                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4423                                  
  4424                                  ; ==========================================================================
  4425                                  ;
  4426                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4427                                  ;
  4428                                  ; ==========================================================================
  4429                                  
  4430                                          ;procedure get_user_stack,NEAR
  4431                                  Get_User_Stack:
  4432                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4433 000004CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4434 000004CF C536[8405]                      lds	si,[USER_SP]
  4435 000004D3 C3                      	retn
  4436                                  
  4437                                  ;get_user_stack  ENDP
  4438                                  
  4439                                  ; 22/12/2022
  4440                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4441                                  ;%if 0
  4442                                  
  4443                                  ; ---------------------------------------------------------------------------
  4444                                  ;
  4445                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4446                                  ; Inputs:
  4447                                  ;	User registers, User Stack, INTS disabled
  4448                                  ;	If CALL F8, DS:DX is new handler address
  4449                                  ; Function:
  4450                                  ;	Process OEM INT 21 extensions
  4451                                  ; Outputs:
  4452                                  ;	Jumps to OEM_HANDLER if appropriate
  4453                                  ;
  4454                                  ; ---------------------------------------------------------------------------
  4455                                  
  4456                                  ;IF	NOT IBM
  4457                                  
  4458                                  _$SET_OEM_HANDLER:
  4459                                  	; 01/05/2019 - Retro DOS v4.0
  4460                                  	
  4461                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4462                                  	;(jb	short NOTOOEM)
  4463                                  
  4464 000004D4 06                      	push	es ; *
  4465                                  	;getdseg <es>			; es -> dosdata
  4466 000004D5 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4467                                  
  4468 000004DA 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4469                                  						; (message) request	
  4470                                  	; AH = 0F8h = SET OEM HANDLER
  4471                                  
  4472 000004DC 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4473 000004E1 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4474                                  
  4475 000004E6 07                      	pop	es ; *
  4476                                  
  4477 000004E7 CF                      	IRET                            ; Quick return, Have altered no registers
  4478                                  
  4479                                  check_trueversion_request:
  4480                                  	; 18/07/2019 - Retro DOS v3.0
  4481                                  
  4482                                  	; Retro DOS v2.0 - 20/04/2018
  4483 000004E8 83F8FF                  	CMP	AX,0FFFFh
  4484                                  	; 18/07/2018
  4485 000004EB 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4486                                  
  4487                                  	; 01/05/2019
  4488 000004ED 07                      	pop	es ; *
  4489                                  
  4490 000004EE B40E                    	mov	ah,0Eh
  4491                                  
  4492                                  	; Retro DOS v4.0 feature only!
  4493 000004F0 81FBA101                	cmp	bx,417  ; Signature to bypass
  4494                                  			; Retro DOS true version message	
  4495 000004F4 7414                    	je	short true_version_iret
  4496                                  
  4497 000004F6 56                      	push	si
  4498 000004F7 53                      	push	bx
  4499                                  
  4500 000004F8 BE[BF00]                	mov	si,RETRODOSMSG
  4501                                  wrdosmsg:
  4502                                  	;movb	ah,0Eh
  4503 000004FB BB0700                  	mov	bx,7
  4504                                  wrdosmsg_nxt:
  4505 000004FE 2EAC                    	cs	lodsb
  4506 00000500 3C24                    	cmp	al,'$'
  4507 00000502 7404                    	je	short wrdosmsg_ok		
  4508 00000504 CD10                    	int	10h
  4509 00000506 EBF6                    	jmp	short wrdosmsg_nxt
  4510                                  
  4511                                  wrdosmsg_ok:
  4512 00000508 5B                      	pop	bx
  4513 00000509 5E                      	pop	si
  4514                                  
  4515                                  true_version_iret:
  4516                                  	; ah = 0Eh
  4517 0000050A B040                    	mov	al,40h ; Retro DOS v4.0 
  4518 0000050C CF                      	iret
  4519                                  
  4520                                  	; If above F8 try to jump to handler
  4521                                  
  4522                                  DO_OEM_FUNC:
  4523                                  	; 01/05/2019
  4524 0000050D 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4525 00000513 7504                    	JNE     short OEM_JMP
  4526 00000515 07                      	pop	es ; *
  4527 00000516 E906FE                  	JMP     BADCALL                 ; Handler not initialized
  4528                                  OEM_JMP:
  4529 00000519 06                      	push	es
  4530 0000051A 1F                      	pop	ds ; DOSDATA segment !
  4531 0000051B 07                      	pop	es ; *
  4532                                  
  4533                                  	; 22/12/2022
  4534 0000051C FB                      	sti	; (enable interrupts before jumping to private handler)  
  4535                                  
  4536 0000051D FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4537                                  
  4538                                  ;       ENDIF
  4539                                  
  4540                                  ; ---------------------------------------------------------------------------
  4541                                  
  4542                                  ;%endif
  4543                                  
  4544                                  ;============================================================================
  4545                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4546                                  ;============================================================================
  4547                                  ; 17/07/2018 - Retro DOS v3.0
  4548                                  
  4549                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4550                                  ;	NAME	IBMCODE
  4551                                  
  4552                                  ;BREAK <NullDev -- Driver for null device>
  4553                                  
  4554                                  ; ROMDOS note:
  4555                                  ;	NUL device driver used to be here, but it was removed and placed in
  4556                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4557                                  ;	header, which is also in DOSDATA.
  4558                                  
  4559                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4560                                  
  4561                                  ;----------------------------------------------------------------------------
  4562                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4563                                  ;----------------------------------------------------------------------------
  4564                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4565                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4566                                  
  4567                                  ;Public MSC001S,MSC001E
  4568                                  ;MSC001S label byte
  4569                                  	;IF	IBM
  4570                                  ; Codes returned by BIOS
  4571                                  ERRIN:
  4572 00000521 02                      	DB	2			; NO RESPONSE
  4573 00000522 06                      	DB	6			; SEEK FAILURE
  4574 00000523 0C                      	DB	12			; GENERAL ERROR
  4575 00000524 04                      	DB	4			; BAD CRC
  4576 00000525 08                      	DB	8			; SECTOR NOT FOUND
  4577 00000526 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4578                                  ERROUT:
  4579                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4580 00000527 80                      	DB	80H			; NO RESPONSE
  4581 00000528 40                      	DB	40H			; Seek failure
  4582 00000529 02                      	DB	2			; Address Mark not found
  4583 0000052A 10                      	DB	10H			; BAD CRC
  4584 0000052B 04                      	DB	4			; SECTOR NOT FOUND
  4585 0000052C 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4586                                  
  4587                                  NUMERR	EQU	$-ERROUT
  4588                                  	;ENDIF
  4589                                  ;MSC001E label byte
  4590                                  ;----------------------------------------------------------------------------
  4591                                  
  4592                                  ;============================================================================
  4593                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4594                                  ;============================================================================
  4595                                  ; 18/07/2018 - Retro DOS v3.0
  4596                                  ; 15/05/2019 - Retro DOS v4.0
  4597                                  
  4598                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4599                                  
  4600                                  ;   AbsSetup - setup for abs disk functions
  4601                                  ;----------------------------------------------------------------------------
  4602                                  
  4603                                  AbsSetup:
  4604 0000052D 36FE06[2103]            	INC	byte [SS:INDOS]		; SS override
  4605 00000532 FB                      	STI
  4606 00000533 FC                      	CLD
  4607 00000534 1E                      	PUSH	DS
  4608 00000535 16                      	push	ss
  4609 00000536 1F                      	pop	ds
  4610 00000537 E80C01                  	CALL	GETBP
  4611 0000053A 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  4612                                  	;mov	word [es:bp+1Fh]
  4613 0000053C 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4614                                  errdriv:
  4615 00000542 1F                      	POP	DS
  4616 00000543 7301                    	jnc	short AbsSetup2
  4617                                  AbsSetup_retn:
  4618 00000545 C3                      	retn
  4619                                  
  4620                                  AbsSetup2:
  4621                                  	; 15/05/2019 - Retro DOS v4.0
  4622                                  	; MSDOS 6.0
  4623                                  					; SS override
  4624 00000546 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4625 0000054D E83B04                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4626 00000550 72F3                    	jc	short AbsSetup_retn
  4627 00000552 E80957                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4628                                  
  4629                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4630 00000555 1E                      	PUSH	DS
  4631 00000556 56                      	PUSH	SI
  4632 00000557 50                      	PUSH	AX
  4633                                  
  4634 00000558 16                      	push	ss
  4635 00000559 1F                      	pop	ds
  4636                                  	
  4637 0000055A BE[BE03]                	MOV	SI,OPENBUF
  4638 0000055D 8804                    	MOV	[SI],AL
  4639 0000055F 800441                  	ADD	BYTE [SI],"A"
  4640 00000562 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4641 00000567 B80003                  	MOV	AX,0300H
  4642 0000056A F8                      	CLC
  4643 0000056B CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4644                                  		
  4645                                  		; 04/11/2022
  4646                                  		; (INT 2Ah - AX = 0300h)
  4647                                  		; Microsoft Networks - CHECK DIRECT I/O
  4648                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4649                                  		;    only drive specifier--must include the colon)
  4650                                  		; Return: CF clear if absolute disk access allowed
  4651                                  
  4652 0000056D 58                      	POP	AX
  4653 0000056E 5E                      	POP	SI
  4654 0000056F 1F                      	POP	DS
  4655 00000570 73D3                    	jnc	short AbsSetup_retn
  4656                                  
  4657                                  	;mov	word [ss:EXTERR],32h
  4658 00000572 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4659 00000579 C3                      	retn
  4660                                  
  4661                                  ;---------------------------------------------------------------------------
  4662                                  ;
  4663                                  ; Procedure Name : ABSDRD
  4664                                  ;
  4665                                  ; Interrupt 25 handler. Performs absolute disk read.
  4666                                  ; Inputs:	AL - 0-based drive number
  4667                                  ;		DS:BX point to destination buffer
  4668                                  ;		CX number of logical sectors to read
  4669                                  ;		DX starting logical sector number (0-based)
  4670                                  ; Outputs:	Original flags still on stack
  4671                                  ;		Carry set
  4672                                  ;		    AH error from BIOS
  4673                                  ;		    AL same as low byte of DI from INT 24
  4674                                  ;
  4675                                  ;---------------------------------------------------------------------------
  4676                                          ;procedure   ABSDRD,FAR
  4677                                  ABSDRD:
  4678                                  	; 15/05/2019 - Retro DOS v4.0
  4679                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4680                                  	; 04/11/2022
  4681                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4682                                  	
  4683                                  	; MSDOS 6.0
  4684 0000057A FA                      	CLI
  4685                                  	
  4686                                  ;	set up ds to point to DOSDATA
  4687                                  
  4688 0000057B 50                      	push	ax			; preserve AX value
  4689 0000057C 8CD8                    	mov	ax,ds			; store DS value in AX
  4690                                  	;getdseg <ds>
  4691 0000057E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4692 00000583 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4693 00000586 58                      	pop	ax			; restore AX value
  4694                                  
  4695                                  	; M072:
  4696                                  	; We shall save es on the user stack here. We need to use ES in
  4697                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4698                                  	; time in order to restore the user stack.
  4699                                  
  4700 00000587 06                      	push	es  ; ****		; M072
  4701                                  
  4702 00000588 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4703 0000058C 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4704                                  
  4705                                  ; 	set up ss to point to DOSDATA
  4706                                  ;
  4707                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4708                                  ; version of the getdseg macro with the SS register! An interrupt will
  4709                                  ; sneak through.
  4710                                  
  4711                                  ;ifndef ROMDOS
  4712                                  	;getdseg <ss>			; cli in entry of routine
  4713 00000590 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4714                                  ;else
  4715                                  ;	mov	ds, cs:[BioDataSeg]
  4716                                  ;	assume	ds:bdata
  4717                                  ;
  4718                                  ;	mov	ss, ds:[DosDataSg]
  4719                                  ;	assume	ss:DOSDATA
  4720                                  ;
  4721                                  ;endif ; ROMDOS
  4722                                  
  4723 00000595 BC[2009]                	MOV	SP,DSKSTACK
  4724                                  
  4725 00000598 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4726                                  
  4727 0000059C 06                      	push	es ; *** (MSDOS 6.21)
  4728 0000059D E80BFF                  	call	save_world		; save all regs
  4729                                  
  4730 000005A0 06                      	PUSH	ES ; **
  4731 000005A1 E889FF                  	CALL	AbsSetup
  4732 000005A4 723D                    	JC	short ILEAVE
  4733                                  
  4734                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4735                                  	;  the secondary cache. The secondary cache does not check for media
  4736                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4737                                  	;  read, and get data from the previous disk. To get around this,
  4738                                  	;  we just won't use the secondary cache for absolute disk reads.
  4739                                  	;                                                      -mw 8/5/88
  4740                                  
  4741                                  	;EnterCrit critDisk
  4742 000005A6 E8DF0D                  	call	ECritDisk
  4743 000005A9 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4744                                  	;LeaveCrit critDisk
  4745 000005AF E8F10D                  	call	LCritDisk
  4746                                  
  4747                                          ;invoke	DSKREAD
  4748 000005B2 E86432                  	CALL	DSKREAD
  4749 000005B5 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4750                                  
  4751 000005B7 89F9                            mov     cx,di
  4752 000005B9 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4753 000005BE 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4754                                  
  4755                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4756                                  ;            sectors, also termed an "Extent".)
  4757                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4758                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4759                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4760                                  ;
  4761                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4762                                  ;	buffers must be "read" into the transfer memory block, so that the
  4763                                  ;       transfer memory reflects the most recent data.
  4764                                  
  4765                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4766 000005C3 E8A934                          call	DskRdBufScan
  4767 000005C6 EB1B                    	jmp     short ILEAVE
  4768                                  
  4769                                  TLEAVE:
  4770 000005C8 7419                    	JZ	short ILEAVE
  4771                                  
  4772                                  ERR_LEAVE:				; M039
  4773                                  	; 15/07/2018 - Retro DOS v3.0
  4774                                          ;IF	IBM
  4775                                  ; Translate the error code to ancient 1.1 codes
  4776 000005CA 06                              PUSH    ES ; *
  4777 000005CB 0E                              PUSH    CS
  4778 000005CC 07                              POP     ES
  4779 000005CD 30E4                            XOR     AH,AH			; Nul error code
  4780                                  	;mov	cx,6
  4781 000005CF B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4782 000005D2 BF[2105]                        MOV     DI,ERRIN		; Point to error conditions
  4783 000005D5 F2AE                            REPNE   SCASB
  4784 000005D7 7504                            JNZ     SHORT LEAVECODE		; Not found
  4785                                  	;mov	ah,[ES:DI+5]
  4786 000005D9 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4787                                  LEAVECODE:
  4788 000005DD 07                              POP     ES ; *
  4789                                  	; 15/05/2019 - Retro DOS v4.0
  4790 000005DE 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4791                                          ;ENDIF
  4792                                  
  4793 000005E2 F9                              STC
  4794                                  ILEAVE:
  4795                                  	; 15/05/2019
  4796 000005E3 07                              POP     ES ; **
  4797 000005E4 E8ADFE                  	call	restore_world
  4798 000005E7 07                              pop	es ; *** (MSDOS 6.21)
  4799 000005E8 FA                      	CLI
  4800 000005E9 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4801 000005ED 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4802 000005F2 16                              push	ss			; M072 - Start
  4803 000005F3 07                      	pop	es			; es - dosdata
  4804 000005F4 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4805 000005F9 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4806 000005FE 07                      	pop	es  ; ****		; Note es was saved on user
  4807                                  					; stack at entry 
  4808                                  					; M072 - End
  4809 000005FF FB                              STI
  4810 00000600 CB                      	RETF   ; ! FAR return !
  4811                                  
  4812                                  ;ABSDRD	ENDP
  4813                                  
  4814                                  ;---------------------------------------------------------------------------
  4815                                  ;
  4816                                  ; Procedure Name : ABSDWRT
  4817                                  ;
  4818                                  ; Interrupt 26 handler. Performs absolute disk write.
  4819                                  ; Inputs:	AL - 0-based drive number
  4820                                  ;		DS:BX point to source buffer
  4821                                  ;		CX number of logical sectors to write
  4822                                  ;		DX starting logical sector number (0-based)
  4823                                  ; Outputs:	Original flags still on stack
  4824                                  ;		Carry set
  4825                                  ;		    AH error from BIOS
  4826                                  ;		    AL same as low byte of DI from INT 24
  4827                                  ;
  4828                                  ;---------------------------------------------------------------------------
  4829                                          ;procedure   ABSDWRT,FAR
  4830                                  ABSDWRT:
  4831                                  	; 15/05/2019 - Retro DOS v4.0
  4832                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4833                                  	; 04/11/2022
  4834                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4835                                  
  4836 00000601 FA                      	CLI
  4837                                  
  4838                                  ;	set up ds to point to DOSDATA
  4839                                  
  4840 00000602 50                      	push	ax
  4841 00000603 8CD8                    	mov	ax,ds
  4842                                  	;getdseg <ds>
  4843 00000605 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4844 0000060A A3[0A0D]                	mov	[TEMPSEG],ax
  4845 0000060D 58                      	pop	ax
  4846                                  
  4847                                  	; M072:
  4848                                  	; We shall save es on the user stack here. We need to use ES in
  4849                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4850                                  	; time in order to restore the user stack.
  4851                                  
  4852 0000060E 06                      	push	es ; ****		; M072
  4853                                  
  4854 0000060F 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4855 00000613 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4856                                  
  4857                                  	; set up ss to point to DOSDATA
  4858                                  	;
  4859                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4860                                  	; ROMDOS version of the getdseg macro with the SS register!
  4861                                  	; An interrupt will sneak through.
  4862                                  
  4863                                  ;ifndef ROMDOS
  4864                                  	;getdseg <ss>			; cli in entry of routine
  4865 00000617 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4866                                  ;else
  4867                                  ;	mov	ds, cs:[BioDataSeg]
  4868                                  ;	assume	ds:bdata
  4869                                  ;
  4870                                  ;	mov	ss, ds:[DosDataSg]
  4871                                  ;	assume	ss:DOSDATA
  4872                                  ;
  4873                                  ;endif ; ROMDOS
  4874                                  
  4875 0000061C BC[2009]                	MOV	SP,DSKSTACK
  4876                                  		; we are now switched to DOS's disk stack
  4877                                  
  4878 0000061F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4879                                  
  4880 00000623 06                      	push	es ; *** (MSDOS 6.21)
  4881                                  
  4882 00000624 E884FE                  	call	save_world	      	; save all regs
  4883                                  
  4884 00000627 06                      	PUSH	ES ; **
  4885 00000628 E802FF                  	CALL	AbsSetup
  4886 0000062B 72B6                    	JC	short ILEAVE
  4887                                  
  4888                                  	;EnterCrit critDisk
  4889 0000062D E8580D                  	call	ECritDisk
  4890 00000630 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4891 00000636 E89803                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4892                                  	;LeaveCrit critDisk
  4893 00000639 E8670D                  	call	LCritDisk
  4894                                  
  4895                                  ;M039
  4896                                  ;       DS:BX = transfer address (source data address).
  4897                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4898                                  ;	     sectors, also termed an "Extent".)
  4899                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4900                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4901                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4902                                  ;
  4903                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4904                                  ;       written. Note that all the above registers are preserved for
  4905                                  ;       DSKWRITE.
  4906                                  
  4907 0000063C 1E                              push    ds
  4908                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4909 0000063D E84A37                  	call	DskWrtBufPurge
  4910 00000640 1F                              pop     ds
  4911                                  ;M039
  4912                                  	;invoke	DSKWRITE
  4913 00000641 E8FE31                  	call	DSKWRITE
  4914 00000644 EB82                    	JMP	short TLEAVE
  4915                                  
  4916                                  ;ABSDWRT ENDP
  4917                                  
  4918                                  ;----------------------------------------------------------------------------
  4919                                  ;
  4920                                  ; Procedure Name : GETBP
  4921                                  ;
  4922                                  ; Inputs:
  4923                                  ;	AL = Logical unit number (A = 0)
  4924                                  ; Function:
  4925                                  ;	Find Drive Parameter Block
  4926                                  ; Outputs:
  4927                                  ;	ES:BP points to DPB
  4928                                  ;	[THISDPB] = ES:BP
  4929                                  ;	Carry set if unit number bad or unit is a NET device.
  4930                                  ;		Later case sets extended error error_I24_not_supported
  4931                                  ; No other registers alteredjjj
  4932                                  ;
  4933                                  ;----------------------------------------------------------------------------
  4934                                  
  4935                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4936                                  GETBP:
  4937                                  	; 15/05/2019 - Retro DOS v4.0
  4938                                  	; 11/07/2018 - Retro DOS v3.0
  4939 00000646 50                      	PUSH	AX
  4940 00000647 0401                    	ADD	AL, 1		; No increment; need carry flag
  4941 00000649 7216                    	JC	SHORT SKIPGET
  4942 0000064B E86965                  	CALL	GETTHISDRV
  4943                                  	; MSDOS 6.0
  4944 0000064E 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4945 00000650 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4946 00000652 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4947 00000655 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4948 00000657 F9                      	STC				;DCR.			;AN000;
  4949 00000658 A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4950 0000065B C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4951                                  SKIPGET:
  4952 00000661 58                      	POP	AX
  4953 00000662 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4954                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4955                                  	;jnc	short getbp_t
  4956                                  	;retn
  4957                                  getbp_t:
  4958 00000664 C42E[A205]              	LES	BP,[THISCDS]
  4959                                  	; 15/12/2022
  4960 00000668 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  4961                                  	; 07/12/2022
  4962                                  	;TEST	WORD [ES:BP+43H],8000H
  4963                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  4964 0000066D 7408                    	JZ	SHORT GETBP_CDS
  4965 0000066F C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  4966 00000675 F9                      	STC
  4967                                  GETBP_RETN:
  4968 00000676 C3                      	RETN
  4969                                  
  4970                                  GETBP_CDS:
  4971                                  	;LES	BP,[ES:BP+45H]
  4972 00000677 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  4973                                  GOTDPB:
  4974                                  	; Load THISDPB from ES:BP
  4975 0000067B 892E[8A05]              	MOV	[THISDPB],BP
  4976 0000067F 8C06[8C05]              	MOV	[THISDPB+2],ES
  4977 00000683 C3                      	RETN
  4978                                  
  4979                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  4980                                  
  4981                                  ;----------------------------------------------------------------------------
  4982                                  ;
  4983                                  ; Procedure Name : SYS_RETURN
  4984                                  ;
  4985                                  ; These are the general system call exit mechanisms. All internal system
  4986                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  4987                                  ; is to set the user's flags and set his AX register for return.
  4988                                  ;
  4989                                  ;----------------------------------------------------------------------------
  4990                                  
  4991                                          ;procedure   SYS_RETURN,NEAR
  4992                                  SYS_RETURN:        
  4993                                          ;entry	SYS_RET_OK
  4994                                  SYS_RET_OK:   
  4995 00000684 E843FE                  	call    Get_User_Stack
  4996                                  		; turn off user's carry flag
  4997                                  SYS_RET_OK_clc: ; 25/06/2019 
  4998                                          ;;and	word [SI+16h],0FFFEh 
  4999                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5000                                          ; 25/06/2019
  5001 00000687 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5002 0000068B EB10                    	JMP     SHORT DO_RET
  5003                                  
  5004                                          ;entry   SYS_RET_ERR
  5005                                  SYS_RET_ERR:        
  5006 0000068D 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5007 0000068F E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5008 00000692 E81A00                  	CALL	ErrorMap
  5009                                  
  5010                                  	;entry	From_GetSet
  5011                                  From_GetSet:
  5012 00000695 E832FE                          call    Get_User_Stack
  5013                                  		 ; signal carry to user
  5014                                  	;;or	word [SI+16h],1
  5015                                  	;OR	word [SI+user_env.user_F],f_Carry
  5016                                  	; 25/06/2019
  5017 00000698 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5018 0000069C F9                      	STC			; also, signal internal error
  5019                                  DO_RET:
  5020                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5021 0000069D 8904                    	MOV	[SI],AX
  5022 0000069F C3                      	RETN
  5023                                  
  5024                                  	;entry	FCB_RET_OK
  5025                                  FCB_RET_OK:
  5026                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5027                                  NO_OP:
  5028 000006A0 30C0                    	XOR	AL,AL
  5029 000006A2 C3                      	retn
  5030                                  
  5031                                  	;entry	FCB_RET_ERR
  5032                                  FCB_RET_ERR:
  5033 000006A3 30E4                    	XOR	AH,AH
  5034 000006A5 36A3[2403]              	mov	[ss:EXTERR],AX
  5035 000006A9 E80300                  	CALL	ErrorMap
  5036 000006AC B0FF                    	MOV	AL,-1
  5037 000006AE C3                      	retn
  5038                                  
  5039                                  	;entry	ErrorMap
  5040                                  ErrorMap:
  5041 000006AF 56                      	PUSH	SI
  5042                                  				; ERR_TABLE_21 is now in DOSDATA
  5043 000006B0 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5044                                  				; SS override for FAILERR and EXTERR
  5045 000006B3 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5046 000006B9 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5047                                  		 ; Ooops, this is the REAL reason
  5048                                  	;mov	word [SS:EXTERR],53h
  5049 000006BB 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5050                                  EXTENDED_NORMAL:
  5051 000006C2 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5052 000006C5 5E                      	POP	SI
  5053 000006C6 C3                      	retn
  5054                                  
  5055                                  	;EndProc SYS_RETURN
  5056                                  
  5057                                  ;---------------------------------------------------------------------------
  5058                                  ;
  5059                                  ; Procedure Name : CAL_LK
  5060                                  ;
  5061                                  ; Inputs:
  5062                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5063                                  ;		(DS NEED not be DOSDATA)
  5064                                  ;	[EXTERR] is set with error
  5065                                  ; Function:
  5066                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5067                                  ; Outputs:
  5068                                  ;	[EXTERR_CLASS] set
  5069                                  ;	[EXTERR_ACTION] set
  5070                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5071                                  ; Destroys SI, FLAGS
  5072                                  ;
  5073                                  ;---------------------------------------------------------------------------
  5074                                  
  5075                                  	;procedure CAL_LK,NEAR
  5076                                  CAL_LK:
  5077 000006C7 1E                      	PUSH	DS
  5078 000006C8 50                      	PUSH	AX
  5079 000006C9 53                      	PUSH	BX
  5080                                  
  5081                                  ;M048	Context DS		; DS:SI -> Table
  5082                                  ;
  5083                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5084                                  ; is DOSDATA
  5085                                  
  5086                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5087                                  	; 15/05/2019 - Retro DOS v4.0
  5088 000006CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5089                                  
  5090                                  	; 18/07/2018
  5091                                  	;push	ss
  5092                                  	;pop	ds
  5093                                  
  5094 000006CF 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5095                                  TABLK1:
  5096 000006D3 AC                      	LODSB
  5097                                  
  5098 000006D4 3CFF                    	CMP	AL,0FFH
  5099 000006D6 7409                    	JZ	short GOT_VALS	; End of table
  5100 000006D8 38D8                    	CMP	AL,BL
  5101 000006DA 7405                    	JZ	short GOT_VALS	; Got entry
  5102 000006DC 83C603                  	ADD	SI,3		; Next table entry
  5103                                  	; 15/08/2018
  5104 000006DF EBF2                    	JMP	short TABLK1
  5105                                  
  5106                                  GOT_VALS:
  5107 000006E1 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5108                                  
  5109 000006E2 80FCFF                  	CMP	AH,0FFH
  5110 000006E5 7404                    	JZ	short NO_SET_ACT
  5111 000006E7 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5112                                  NO_SET_ACT:
  5113 000006EB 3CFF                    	CMP	AL,0FFH
  5114 000006ED 7403                    	JZ	short NO_SET_CLS
  5115 000006EF A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5116                                  NO_SET_CLS:
  5117 000006F2 AC                      	LODSB			; Get LOCUS
  5118                                  
  5119 000006F3 3CFF                    	CMP	AL,0FFH
  5120 000006F5 7403                    	JZ	short NO_SET_LOC
  5121 000006F7 A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5122                                  NO_SET_LOC:
  5123 000006FA 5B                      	POP	BX
  5124 000006FB 58                      	POP	AX
  5125 000006FC 1F                      	POP	DS
  5126 000006FD C3                      	retn
  5127                                  
  5128                                  	;EndProc CAL_LK
  5129                                  
  5130                                  ;---------------------------------------------------------------------------
  5131                                  ;
  5132                                  ; Procedure Name : ETAB_LK
  5133                                  ;
  5134                                  ; Inputs:
  5135                                  ;	AX is error code
  5136                                  ;	[USER_IN_AX] has AH value of system call involved
  5137                                  ; Function:
  5138                                  ;	Make sure error code is appropriate to this call.
  5139                                  ; Outputs:
  5140                                  ;	AX MAY be mapped error code
  5141                                  ;	[EXTERR] = Input AX
  5142                                  ; Destroys ONLY AX and FLAGS
  5143                                  ;
  5144                                  ;---------------------------------------------------------------------------
  5145                                  
  5146                                  	;procedure ETAB_LK,NEAR
  5147                                  
  5148                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5149 000006FE 1E                      	PUSH	DS
  5150 000006FF 56                      	PUSH	SI
  5151 00000700 51                      	PUSH	CX
  5152 00000701 53                      	PUSH	BX
  5153                                  
  5154                                  	;Context DS			; SS is DOSDATA
  5155                                  
  5156 00000702 16                      	push	ss
  5157 00000703 1F                      	pop	ds
  5158                                  
  5159 00000704 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5160                                  
  5161                                  					; I21_MAP_E_TAB is now in DOSCODE
  5162 00000707 BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5163 0000070A 88C7                    	MOV	BH,AL			; Real code to BH
  5164 0000070C 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5165                                  TABLK2:
  5166                                  	; 15/05/2019 - Retro DOS v4.0
  5167 00000710 2E                      	cs
  5168 00000711 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5169                                  	
  5170                                  	; 18/07/2018 - Retro DOS v3.0
  5171                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5172                                  
  5173 00000712 3CFF                    	CMP	AL,0FFH 		; End of table?
  5174 00000714 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5175 00000716 38D8                    	CMP	AL,BL			; Found call?
  5176 00000718 740C                    	JZ	short GOT_CALL		; Yes
  5177 0000071A 86E0                    	XCHG	AH,AL			; Count to AL
  5178 0000071C 30E4                    	XOR	AH,AH			; Make word for add
  5179 0000071E 01C6                    	ADD	SI,AX			; Next table entry
  5180 00000720 EBEE                    	JMP	short TABLK2
  5181                                  
  5182                                  NOT_IN_TABLE:
  5183 00000722 88F8                    	MOV	AL,BH			; Restore original code
  5184 00000724 EB0C                    	JMP	SHORT NO_MAP
  5185                                  
  5186                                  GOT_CALL:
  5187 00000726 88E1                    	MOV	CL,AH
  5188 00000728 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5189                                  CHECK_CODE:
  5190                                  	; 15/05/2019 - Retro DOS v4.0
  5191 0000072A 2E                      	cs
  5192 0000072B AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5193                                  
  5194                                  	; 18/07/2018
  5195                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5196                                  
  5197 0000072C 38F8                    	CMP	AL,BH			; Code OK?
  5198 0000072E 7402                    	JZ	short NO_MAP		; Yes
  5199 00000730 E2F8                    	LOOP	CHECK_CODE
  5200                                  NO_MAP:
  5201 00000732 30E4                    	XOR	AH,AH			; AX is now valid code
  5202 00000734 5B                      	POP	BX
  5203 00000735 59                      	POP	CX
  5204 00000736 5E                      	POP	SI
  5205 00000737 1F                      	POP	DS
  5206 00000738 C3                      	retn
  5207                                  
  5208                                  	;EndProc ETAB_LK
  5209                                  
  5210                                  ; 18/07/2018 - Retro DOS v3.0
  5211                                  ;---------------------------------------------------------------------------
  5212                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5213                                  
  5214                                  ;IF installed ; (*)
  5215                                  
  5216                                  ;---------------------------------------------------------------------------
  5217                                  ;
  5218                                  ; Procedure Name : SetBad
  5219                                  ;
  5220                                  ; SetBad sets up info for bad functions
  5221                                  ;
  5222                                  ;---------------------------------------------------------------------------
  5223                                  
  5224                                  SetBad:
  5225                                  	;mov	ax,1
  5226 00000739 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5227                                  
  5228                                  	; MSDOS 3.3
  5229                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5230                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5231                                  
  5232                                  ;	set up ds to point to DOSDATA
  5233                                  
  5234                                  	; 15/05/2019 - Retro DOS v4.0
  5235                                  	; MSDOS 6.0
  5236 0000073C 1E                      	push	ds
  5237                                  
  5238                                  	;getdseg <ds>
  5239 0000073D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5240                                  
  5241 00000742 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5242                                  
  5243 00000747 1F                      	pop	ds	  	;hkn; restore ds
  5244                                  
  5245 00000748 F9                      	STC
  5246 00000749 C3                      	retn
  5247                                  
  5248                                  ;--------------------------------------------------------------------------
  5249                                  ;
  5250                                  ; Procedure Name : BadCall
  5251                                  ;
  5252                                  ; BadCall is the initial routine for bad function calls
  5253                                  ;
  5254                                  ;--------------------------------------------------------------------------
  5255                                  
  5256                                  BadCall:
  5257 0000074A E8ECFF                  	call	SetBad
  5258 0000074D CB                      	retf
  5259                                  
  5260                                  ;--------------------------------------------------------------------------
  5261                                  ;
  5262                                  ; OKCall always sets carry to off.
  5263                                  ;
  5264                                  ;-----------------------------------------------------------------------
  5265                                  
  5266                                  OKCall:
  5267 0000074E F8                      	CLC
  5268 0000074F CB                      	retf
  5269                                  
  5270                                  ;---------------------------------------------------------------------------
  5271                                  ;
  5272                                  ; Procedure Name : INT2F
  5273                                  ;
  5274                                  ; INT 2F handler works as follows:
  5275                                  ;   PUSH    AX
  5276                                  ;   MOV     AX,multiplex:function
  5277                                  ;   INT     2F
  5278                                  ;   POP     ...
  5279                                  ; The handler itself needs to make the AX available for the various routines.
  5280                                  ;
  5281                                  ;----------------------------------------------------------------------------
  5282                                  
  5283                                  ; 15/05/2019 - Retro DOS v4.0
  5284                                  
  5285                                  ;KERNEL_SEGMENT equ 70h
  5286                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5287                                  DOSBIODATASEG equ 70h
  5288                                  
  5289                                  ; retrodos4.s - offset in BIOSDATA
  5290                                  bios_i2f equ 5
  5291                                  
  5292                                  ;PUBLIC	Int2F
  5293                                  ;INT2F	PROC	FAR
  5294                                  
  5295                                  ; 15/05/2019
  5296                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5297                                  
  5298                                  ; 04/11/2022
  5299                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5300                                  
  5301                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5302                                  	; 18/07/2018 - Retro DOS v3.0
  5303                                  INT2F:
  5304                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5305                                  INT2FNT:
  5306                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5307 00000750 FB                      	STI
  5308                                  	;cmp	ah,11h
  5309 00000751 80FC11                  	CMP	AH,MultNET
  5310 00000754 750A                    	JNZ	short INT2FSHR
  5311                                  TestInstall:
  5312 00000756 08C0                    	OR	AL,AL
  5313 00000758 7403                    	JZ	short Leave2F
  5314                                  BadFunc:
  5315 0000075A E8DCFF                  	CALL	SetBad
  5316                                  
  5317                                  	;entry	Leave2F
  5318                                  Leave2F:
  5319 0000075D CA0200                  	RETF	2			; long return + clear flags off stack
  5320                                  
  5321                                  INT2FSHR:
  5322                                  	;cmp	ah,10h
  5323 00000760 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5324 00000763 74F1                    	JZ	short TestInstall	; yes, check for installation
  5325                                  INT2FNLS:
  5326                                  	;cmp	ah,14h
  5327 00000765 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5328 00000768 74EC                    	JZ	short TestInstall	; yes check for installation
  5329                                  INT2FDOS:
  5330                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5331                                  
  5332                                  	; 18/07/2018
  5333                                  	; MSDOS 3.3
  5334                                  	;;cmp	ah,12h	
  5335                                  	;CMP	AH,MultDOS
  5336                                  	;jz	short DispatchDOS
  5337                                  	;iret
  5338                                  
  5339                                  	; 15/05/2019
  5340                                  	; MSDOS 6.0
  5341                                  	;cmp	ah,12h	; 07/12/2022
  5342 0000076A 80FC12                  	CMP	AH,MultDOS
  5343 0000076D 7503                    	JNZ	short check_win		;check if win386 broadcast
  5344 0000076F E9F801                  	jmp	DispatchDOS
  5345                                  
  5346                                  	; .... win386 .... 
  5347                                  
  5348                                  check_win:
  5349                                  	;cmp	ah,16h
  5350 00000772 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5351 00000775 7408                    	je	short Win386_Msg
  5352                                  
  5353                                  	; M044
  5354                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5355                                  	; of Windows. If so, do special action of going and saving last para
  5356                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5357                                  	; bug
  5358                                  
  5359 00000777 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5360                                  	;jne	short next_i2f		; no, chain on
  5361                                  	; 15/12/2022
  5362                                  	;jmp	winold_swap		; yes, do desired action
  5363 0000077A 7442                    	je	short winold_swap
  5364 0000077C E90701                  	jmp	next_i2f
  5365                                  
  5366                                  	; 15/12/2022
  5367                                  ;next_i2f:
  5368                                  ;	;;;jmp	bios_i2f
  5369                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5370                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5371                                  ;	; 04/11/2022
  5372                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5373                                  
  5374                                  ;	IRET				; This assume that we are at the head
  5375                                  					; of the list
  5376                                  ;INT2F	ENDP
  5377                                  
  5378                                  ; 15/05/2019 - Retro DOS v4.0
  5379                                  
  5380                                  ; We have received a message from Win386. There are three possible
  5381                                  ; messages we could get from Win386:
  5382                                  ;
  5383                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5384                                  ;		  to the Win386 startup info structure.
  5385                                  ; Exit		- for this, we clear the IsWin386 flag.
  5386                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5387                                  ;		  has already been handled. this is indicated by setting
  5388                                  ;		  CX to a non-zero value.
  5389                                  
  5390                                  Win386_Msg:
  5391 0000077F 1E                      	push	ds
  5392                                  
  5393                                  	;getdseg <DS>			; ds is DOSDATA
  5394 00000780 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5395                                  
  5396                                  	; For WIN386 2.xx instance data
  5397                                  
  5398 00000785 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5399 00000787 7503                    	jne	short Win386_Msg_exit
  5400 00000789 E92C01                  	jmp	OldWin386Init		; yes, return instance data
  5401                                  Win386_Msg_exit:
  5402 0000078C 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5403 0000078E 7503                    	jne	short Win386_Msg_devcall
  5404 00000790 E92E01                  	jmp	Win386_Leaving
  5405                                  Win386_Msg_devcall:
  5406 00000793 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5407 00000795 7503                    	jne	short Win386_Msg_init
  5408 00000797 E96501                  	jmp	Win386_Query
  5409                                  Win386_Msg_init:
  5410 0000079A 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5411 0000079C 7403                    	je	short Win386_Starting
  5412 0000079E E9E400                  	jmp	win_nexti2f		; no, return
  5413                                  Win386_Starting:
  5414                                  	; 17/12/2022
  5415 000007A1 F6C201                  	test	dl,1
  5416                                  	;test	dx,1			; is this really win386?
  5417 000007A4 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5418 000007A6 E9DC00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5419                                  Win386_vchk:
  5420                                  	; M018 -- start of block changes
  5421                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5422                                  	; than 030Ah, we skip the VxD presence check
  5423                                  
  5424                                  ;M067 -- Begin changes
  5425                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5426                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5427                                  ;So, we null out the VxD ptr before the check.
  5428                                  
  5429                                  	;mov	word [Win386_Info+6],0
  5430 000007A9 C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5431                                  	;mov	word [Win386_Info+8],0
  5432 000007AF C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5433                                  
  5434                                  ;M067 -- End changes
  5435                                  
  5436                                  ;ifdef JAPAN
  5437                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5438                                  ;else
  5439 000007B5 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5440                                  ;endif
  5441                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5442 000007B9 724E                    	jb	short Win386_vxd
  5443 000007BB E9DF00                  	jmp	noVxD31
  5444                                  
  5445                                  	; 15/12/2022
  5446                                  winold_swap:
  5447 000007BE 1E                      	push	ds
  5448 000007BF 06                      	push	es
  5449 000007C0 56                      	push	si
  5450 000007C1 57                      	push	di
  5451 000007C2 51                      	push	cx
  5452                                  
  5453                                  	;getdseg <ds>			;ds = DOSDATA
  5454 000007C3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5455                                  
  5456 000007C8 3C01                    	cmp	al,1			;swap Windows out call
  5457 000007CA 751B                    	jne	short swapin		;no, check if Swap in call
  5458 000007CC E88E01                  	call	getwinlast
  5459 000007CF 1E                      	push	ds
  5460 000007D0 07                      	pop	es
  5461 000007D1 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5462 000007D3 31F6                    	xor	si,si
  5463 000007D5 BF[0600]                	mov	di,WinoldPatch1
  5464 000007D8 B90800                  	mov	cx,8
  5465 000007DB FC                      	cld
  5466 000007DC 51                      	push	cx
  5467 000007DD F3A4                    	rep	movsb			;save first 8 bytes
  5468 000007DF 59                      	pop	cx
  5469 000007E0 BF[CD0D]                	mov	di,WinoldPatch2
  5470 000007E3 F3A4                    	rep	movsb			;save next 8 bytes
  5471 000007E5 EB1B                    	jmp	short winold_done
  5472                                  swapin:
  5473 000007E7 3C02                    	cmp	al,2			;swap Windows in call?
  5474 000007E9 7517                    	jne	short winold_done	;no, something else, pass it on
  5475 000007EB E86F01                  	call	getwinlast
  5476 000007EE 8EC6                    	mov	es,si
  5477 000007F0 31FF                    	xor	di,di
  5478 000007F2 BE[0600]                	mov	si,WinoldPatch1
  5479 000007F5 B90800                  	mov	cx,8
  5480 000007F8 FC                      	cld
  5481 000007F9 51                      	push	cx
  5482 000007FA F3A4                    	rep	movsb			;restore first 8 bytes
  5483 000007FC 59                      	pop	cx
  5484 000007FD BE[CD0D]                	mov	si,WinoldPatch2
  5485 00000800 F3A4                    	rep	movsb			;restore next 8 bytes
  5486                                  winold_done:
  5487 00000802 59                      	pop	cx
  5488 00000803 5F                      	pop	di
  5489 00000804 5E                      	pop	si
  5490 00000805 07                      	pop	es
  5491 00000806 1F                      	pop	ds
  5492 00000807 EB7D                    	jmp	short next_i2f		;chain on
  5493                                  	; 15/12/2022
  5494                                  	;jmp	next_i2f	
  5495                                  
  5496                                  Win386_vxd:
  5497 00000809 50                      	push	ax
  5498 0000080A 53                      	push	bx
  5499 0000080B 51                      	push	cx
  5500 0000080C 52                      	push	dx
  5501 0000080D 56                      	push	si
  5502 0000080E 57                      	push	di			; save regs !!dont change order!!
  5503                                  
  5504 0000080F 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5505 00000813 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5506 00000816 7421                    	je	short Vxd31		; N: continue
  5507                                  					; Y: save arena associated with 
  5508                                  					;    umb_head
  5509                                  
  5510 00000818 C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5511                                  					; umb_arena
  5512 0000081D 1E                      	push	ds
  5513 0000081E 06                      	push	es
  5514                                  
  5515 0000081F 8CD8                    	mov	ax,ds
  5516 00000821 8EC0                    	mov	es,ax			; es - > dosdata
  5517                                  
  5518 00000823 8EDB                    	mov	ds,bx
  5519 00000825 31F6                    	xor	si,si			; ds:si -> umb_head
  5520                                  
  5521 00000827 FC                      	cld
  5522                                  
  5523 00000828 BF[1F12]                	mov	di,UmbSave1
  5524 0000082B B90B00                  	mov	cx,11
  5525 0000082E F3A4                    	rep	movsb
  5526                                  
  5527 00000830 BF[D50D]                	mov	di,UmbSave2
  5528                                  	;mov	cx,5
  5529                                  	; 18/12/2022
  5530 00000833 B105                    	mov	cl,5
  5531 00000835 F3A4                    	rep	movsb	
  5532                                  
  5533 00000837 07                      	pop	es
  5534 00000838 1F                      	pop	ds			; M062 - End
  5535                                  
  5536                                  Vxd31:
  5537                                  	;test	byte [DOS_FLAG],2
  5538 00000839 F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5539 0000083E 7408                    	jz	short Dont_Supress		; M066
  5540 00000840 5F                      	pop	di				; M066
  5541 00000841 5E                      	pop	si				; M066
  5542 00000842 5A                      	pop	dx				; M066
  5543 00000843 59                      	pop	cx				; M066
  5544 00000844 5B                      	pop	bx				; M066
  5545 00000845 58                      	pop	ax				; M066
  5546 00000846 EB55                    	jmp	short noVxD31			; M066
  5547                                  
  5548                                  	; We check here if the VxD is available in the root of the boot drive. 
  5549                                  	; We do an extended open to suppress any error messages
  5550                                  	
  5551                                  Dont_Supress:
  5552 00000848 A0[6900]                	mov	al,[BOOTDRIVE]
  5553 0000084B 0440                    	add	al,'A' - 1		; get drive letter
  5554 0000084D A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5555                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5556                                  	;mov	al,0			; no extended attributes
  5557                                  	; 18/12/2022
  5558 00000850 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5559 00000853 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5560                                  					; no inherit, suppress crit err
  5561 00000856 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5562 00000859 BA0100                  	mov	dx,1			; fail if file does not exist
  5563 0000085C BE[3110]                	mov	si,VxDpath	
  5564                                  					; path of VxD file
  5565 0000085F BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5566                                  
  5567 00000862 CD21                    	int	21h			; do extended open
  5568                                  
  5569 00000864 5F                      	pop	di
  5570 00000865 5E                      	pop	si
  5571 00000866 5A                      	pop	dx
  5572 00000867 59                      	pop	cx
  5573                                  
  5574 00000868 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5575                                  
  5576                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5577                                  	; to indicate error to Windows after displaying message to user that 
  5578                                  	; VxD needs to be present to run Windows in enhanced mode.
  5579                                  
  5580 0000086A 52                      	push	dx
  5581 0000086B 1E                      	push	ds
  5582 0000086C 56                      	push	si
  5583 0000086D BE[060A]                	mov	si,NoVxDErrMsg
  5584 00000870 0E                      	push	cs
  5585 00000871 1F                      	pop	ds
  5586 00000872 B96300                  	mov	cx,VxDMesLen ; 99	;
  5587 00000875 B402                    	mov	ah,2			; write char to console
  5588 00000877 FC                      	cld
  5589                                  vxdlp:
  5590 00000878 AC                      	lodsb
  5591 00000879 86D0                    	xchg	dl,al			; get char in dl
  5592 0000087B CD21                    	int	21h
  5593 0000087D E2F9                    	loop	vxdlp
  5594                                  
  5595 0000087F 5E                      	pop	si
  5596 00000880 1F                      	pop	ds
  5597 00000881 5A                      	pop	dx
  5598 00000882 5B                      	pop	bx
  5599 00000883 58                      	pop	ax			;all registers restored
  5600 00000884 41                      	inc	cx			;cx != 0 to indicate error
  5601                                  	; 15/12/22022
  5602                                  	;jmp	win_nexti2f		;chain on
  5603                                  	;jmp	short win_nexti2f
  5604                                  
  5605                                  	; 15/12/2022
  5606                                  win_nexti2f:
  5607 00000885 1F                      	pop	ds
  5608                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5609                                  	; 15/12/2022
  5610                                  next_i2f:
  5611                                  	;;;jmp	bios_i2f
  5612                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5613                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5614                                  	; 04/11/2022
  5615 00000886 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5616                                  
  5617                                  VxDthere:
  5618 0000088B 89C3                    	mov	bx,ax
  5619 0000088D B43E                    	mov	ah,CLOSE ; 3Eh
  5620 0000088F CD21                    	int	21h			;close the file
  5621                                  
  5622                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5623                                  
  5624                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5625                                  	;mov	bx,Win386_Info
  5626                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5627                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5628                                  	; 15/12/2022
  5629 00000891 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5630 00000897 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5631                                  
  5632 0000089B 5B                      	pop	bx
  5633 0000089C 58                      	pop	ax
  5634                                  noVxD31:
  5635                                  	; M018; End of block changes
  5636                                  
  5637 0000089D 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5638 000008A2 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5639                                  
  5640                                  	; M002;
  5641                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5642                                  
  5643 000008A7 52                      	push	dx			; M002
  5644 000008A8 89DA                    	mov	dx,bx			; M002
  5645                                  					; point ES:BX to Win386_Info ; M002
  5646 000008AA BB[E20F]                	mov	bx,Win386_Info 
  5647 000008AD 895702                  	mov	[bx+2],dx		; M002
  5648 000008B0 8C4704                  	mov	[bx+4],es		; M002
  5649 000008B3 5A                      	pop	dx			; M002
  5650 000008B4 1E                      	push	ds			; M002
  5651 000008B5 07                      	pop	es			; M002
  5652                                  	;jmp	win_nexti2f		; M002
  5653                                  	; 15/12/2022
  5654 000008B6 EBCD                    	jmp	short win_nexti2f
  5655                                  
  5656                                  	; 15/12/2022
  5657                                  	; Code to return Win386 2.xx instance table
  5658                                  OldWin386Init:
  5659 000008B8 58                      	pop	ax			; discard ds pushed on stack
  5660 000008B9 BE[E711]                	mov	si,OldInstanceJunk 
  5661                                  					; ds:si = instance table
  5662 000008BC B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5663                                  	;jmp	next_i2f
  5664                                  	; 15/12/2022
  5665 000008BF EBC5                    	jmp	short next_i2f
  5666                                  
  5667                                  Win386_Leaving:
  5668                                  	; 15/12/2022
  5669 000008C1 F6C201                  	test 	dl,1
  5670                                  	;test	dx,1			; is this really win386?
  5671                                  	;jz	short Win386_Leaving_c
  5672                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5673                                  	; 15/12/2022
  5674 000008C4 75BF                    	jnz	short win_nexti2f	
  5675                                  
  5676                                  Win386_Leaving_c:
  5677                                  					; M062 - Start
  5678 000008C6 803E[DA0D]01            	cmp	byte [UmbSaveFlag], 1	; Q: was umb_arena saved at win start
  5679                                  					;    up.
  5680 000008CB 7526                    	jne	short noumb		; N: not saved 
  5681 000008CD C606[DA0D]00            	mov	byte [UmbSaveFlag], 0	; Y: clear UmbSaveFlag and restore 
  5682                                  					;    previously saved umb_head
  5683 000008D2 50                      	push	ax
  5684 000008D3 06                      	push	es
  5685 000008D4 51                      	push	cx
  5686 000008D5 56                      	push	si
  5687 000008D6 57                      	push	di
  5688                                  
  5689 000008D7 A1[8C00]                	mov	ax,[UMB_HEAD]	
  5690 000008DA 8EC0                    	mov	es,ax
  5691 000008DC 31FF                    	xor	di,di			; es:di -> umb_head
  5692                                  
  5693 000008DE FC                      	cld
  5694                                  
  5695 000008DF BE[1F12]                	mov	si,UmbSave1
  5696 000008E2 B90B00                  	mov	cx,11
  5697 000008E5 F3A4                    	rep	movsb
  5698 000008E7 BE[D50D]                	mov	si,UmbSave2
  5699                                  	;mov	cx,5
  5700                                  	; 18/12/2022
  5701 000008EA B105                    	mov	cl,5
  5702 000008EC F3A4                    	rep	movsb
  5703                                  
  5704 000008EE 5F                      	pop	di
  5705 000008EF 5E                      	pop	si
  5706 000008F0 59                      	pop	cx
  5707 000008F1 07                      	pop	es
  5708 000008F2 58                      	pop	ax
  5709                                  noumb:					; M062 - End
  5710 000008F3 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5711 000008F8 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5712 000008FD EB86                    	jmp	short win_nexti2f
  5713                                  
  5714                                  ;	; 15/12/2022
  5715                                  ;	; Code to return Win386 2.xx instance table
  5716                                  ;OldWin386Init:
  5717                                  ;	pop	ax			; discard ds pushed on stack
  5718                                  ;	mov	si,OldInstanceJunk 
  5719                                  ;					; ds:si = instance table
  5720                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5721                                  ;	;jmp	next_i2f
  5722                                  ;	; 15/12/2022
  5723                                  ;	jmp	short _next_i2f
  5724                                  
  5725                                  Win386_Query:
  5726 000008FF 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5727 00000902 7581                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5728 00000904 09C9                    	or	cx,cx			; is it an instance query?
  5729 00000906 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5730 00000908 41                      	inc	cx			; indicate that data is instanced
  5731                                  ;
  5732                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5733                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5734                                  ; M001;  
  5735                                  ; M001; OFFSETS STRUC
  5736                                  ; M001; 	Major_version	db	?
  5737                                  ; M001; 	Minor_version	db	?
  5738                                  ; M001; 	SaveDS		dw	?
  5739                                  ; M001; 	SaveBX		dw	?
  5740                                  ; M001; 	Indos		dw	?
  5741                                  ; M001; 	User_id		dw	?
  5742                                  ; M001; 	CritPatch	dw	?
  5743                                  ; M001; OFFSETS	ENDS
  5744                                  ; M001; 
  5745                                  ; M001; User_Id is the only variable really important for proper functioning  
  5746                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5747                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5748                                  ; M001; pass this table because Win386 depends on this table to get the 
  5749                                  ; M001; User_Id offset.
  5750                                  ; M001; 
  5751 00000909 BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5752 0000090C 1E                      	push	ds			; M001
  5753 0000090D 07                      	pop	es			; es:bx points at offset table ; M001
  5754 0000090E EB41                    	jmp	short PopIret		; M001
  5755                                  
  5756                                  ; 15/12/2022
  5757                                  ;	; Code to return Win386 2.xx instance table
  5758                                  ;OldWin386Init:
  5759                                  ;	pop	ax			; discard ds pushed on stack
  5760                                  ;	mov	si,OldInstanceJunk 
  5761                                  ;					; ds:si = instance table
  5762                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5763                                  ;	;jmp	next_i2f
  5764                                  ;	; 15/12/2022
  5765                                  ;	jmp	short _next_i2f
  5766                                  
  5767                                  dosmgr_func:
  5768 00000910 49                      	dec	cx
  5769 00000911 7436                    	jz	short win386_patch	; call to patch DOS
  5770 00000913 49                      	dec	cx
  5771 00000914 743B                    	jz	short PopIret		; remove DOS patches, ignore
  5772 00000916 49                      	dec	cx
  5773 00000917 743A                    	jz	short win386_size	; get size of DOS data structures
  5774 00000919 49                      	dec	cx
  5775 0000091A 7429                    	jz	short win386_inst	; instance more data
  5776 0000091C 49                      	dec	cx
  5777 0000091D 7532                    	jnz	short PopIret		; no functions above this
  5778                                  
  5779                                  	; Get DOS device driver size -- es:di points at device driver header
  5780                                  	; In DOS 4.x, the para before the device header contains an arena 
  5781                                  	; header for the driver.
  5782                                  
  5783 0000091F 8CC0                    	mov	ax,es			; ax = device header segment
  5784                                  
  5785                                  	; We check to see if we have a memory arena for this device driver. 
  5786                                  	; The way to do this would be to look at the previous para to see if
  5787                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5788                                  	; in the arena is the same as the device header segment. These two 
  5789                                  	; checks together should take care of all cases
  5790                                  
  5791 00000921 48                      	dec	ax			; get arena header
  5792 00000922 06                      	push	es
  5793 00000923 8EC0                    	mov	es,ax			; arena header for device driver
  5794                                  
  5795 00000925 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5796 00000929 7517                    	jnz	short cantsize		; no, cant size this driver
  5797 0000092B 40                      	inc	ax			; get back device header segment
  5798 0000092C 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5799 00000930 7510                    	jnz	short cantsize		; no, not a proper arena
  5800                                  
  5801 00000932 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5802 00000936 07                      	pop	es
  5803                                  
  5804                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5805                                  	; Speed is not critical and so we choose the shortest method 
  5806                                  	; -- use "mul"
  5807                                  
  5808 00000937 BB1000                  	mov	bx,16
  5809 0000093A F7E3                    	mul	bx
  5810 0000093C 89C1                    	mov	cx,ax
  5811 0000093E 89D3                    	mov	bx,dx
  5812 00000940 EB09                    	jmp	short win386_done	; return with device driver size
  5813                                  cantsize:
  5814 00000942 07                      	pop	es
  5815 00000943 31C0                    	xor	ax,ax
  5816                                  win386_inst:	; 05/01/2024
  5817 00000945 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5818 00000947 EB08                    	jmp	short PopIret		; return
  5819                                  
  5820                                  win386_patch:
  5821                                  	; dx contains bits marking the patches to be applied. We return 
  5822                                  	; the field with all bits set to indicate that all patches have been
  5823                                  	; done
  5824                                  
  5825 00000949 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5826                                   	;jmp	short win386_done	; done, return
  5827                                  	; 15/12/2022
  5828                                  	; 15/12/2022
  5829                                  win386_done:
  5830 0000094B B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5831 0000094E BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5832                                  PopIret:
  5833 00000951 1F                      	pop	ds
  5834 00000952 CF                      	iret	
  5835                                  
  5836                                  win386_size:
  5837                                  	; Return the size of DOS data structures -- currently only CDS size
  5838                                  
  5839                                  	; 17/12/2022
  5840 00000953 F6C201                  	test	dl,1
  5841                                  	;test	dx,1			; check for CDS size bit
  5842 00000956 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5843                                  
  5844 00000958 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5845 0000095B EBEE                    	jmp	short win386_done	; return with the size
  5846                                  
  5847                                  ; 05/01/2024
  5848                                  %if 0
  5849                                  win386_inst:
  5850                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5851                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5852                                  	; this by returning a status of not previously instanced. The basic
  5853                                  	; structure of these things have not changed and so the current
  5854                                  	; DOSMGR code should be able to work it out
  5855                                  
  5856                                  	xor	dx,dx			; make sure dx has a not done value
  5857                                  	jmp	short PopIret		; skip done indication
  5858                                  %endif
  5859                                  
  5860                                  	; 15/12/2022
  5861                                  ;win386_done:
  5862                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5863                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5864                                  ;PopIret:
  5865                                  ;	pop	ds
  5866                                  ;	iret				; return back up the chain
  5867                                  
  5868                                  	; 15/12/2022
  5869                                  ;win_nexti2f:
  5870                                  	;pop	ds
  5871                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5872                                  
  5873                                  ;End WIN386 support
  5874                                  
  5875                                  ; 15/05/2019
  5876                                  
  5877                                  ;M044; Start of changes
  5878                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5879                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5880                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5881                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5882                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5883                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5884                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5885                                  ; last para of the Windows memory block and then restore this para on the
  5886                                  ; Windows swapin callout. 
  5887                                  
  5888                                  getwinlast:
  5889                                  	; 07/12/2022
  5890 0000095D 8B36[3003]              	mov	si,[CurrentPDB]
  5891 00000961 4E                      	dec	si
  5892 00000962 8EC6                    	mov	es,si
  5893 00000964 2603360300              	add	si,[es:3]
  5894 00000969 C3                      	retn
  5895                                  
  5896                                  ; 15/12/2022
  5897                                  %if 0
  5898                                  winold_swap:
  5899                                  	push	ds
  5900                                  	push	es
  5901                                  	push	si
  5902                                  	push	di
  5903                                  	push	cx
  5904                                  
  5905                                  	;getdseg <ds>			;ds = DOSDATA
  5906                                  	mov	ds,[cs:DosDSeg]
  5907                                  
  5908                                  	cmp	al,1			;swap Windows out call
  5909                                  	jne	short swapin		;no, check if Swap in call
  5910                                  	call	getwinlast
  5911                                  	push	ds
  5912                                  	pop	es
  5913                                  	mov	ds,si			;ds = memory arena of Windows
  5914                                  	xor	si,si
  5915                                  	mov	di,WinoldPatch1
  5916                                  	mov	cx,8
  5917                                  	cld
  5918                                  	push	cx
  5919                                  	rep	movsb			;save first 8 bytes
  5920                                  	pop	cx
  5921                                  	mov	di,WinoldPatch2
  5922                                  	rep	movsb			;save next 8 bytes
  5923                                  	jmp	short winold_done
  5924                                  swapin:
  5925                                  	cmp	al,2			;swap Windows in call?
  5926                                  	jne	short winold_done	;no, something else, pass it on
  5927                                  	call	getwinlast
  5928                                  	mov	es,si
  5929                                  	xor	di,di
  5930                                  	mov	si,WinoldPatch1
  5931                                  	mov	cx,8
  5932                                  	cld
  5933                                  	push	cx
  5934                                  	rep	movsb			;restore first 8 bytes
  5935                                  	pop	cx
  5936                                  	mov	si,WinoldPatch2
  5937                                  	rep	movsb			;restore next 8 bytes
  5938                                  winold_done:
  5939                                  	pop	cx
  5940                                  	pop	di
  5941                                  	pop	si
  5942                                  	pop	es
  5943                                  	pop	ds
  5944                                  	jmp	next_i2f		;chain on
  5945                                  
  5946                                  %endif
  5947                                  
  5948                                  ;M044; End of changes
  5949                                  
  5950                                  ; 15/05/2019
  5951                                  
  5952                                  DispatchDOS:
  5953 0000096A 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  5954 0000096F 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  5955 00000974 50                      	PUSH	AX			; push index
  5956 00000975 55                      	PUSH	BP
  5957 00000976 89E5                    	MOV	BP,SP
  5958                                  		; stack looks like:
  5959                                  		;   0	BP
  5960                                  		;   2	DISPATCH
  5961                                  		;   4	TABLE
  5962                                  		;   6	RETURN
  5963                                  		;   8	LONG-RETURN
  5964                                  		;   C	FLAGS
  5965                                  		;   E	AX
  5966                                  	
  5967 00000978 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  5968 0000097B 5D                      	POP	BP
  5969 0000097C E81909                  	call	TableDispatch
  5970 0000097F E9D8FD                  	JMP	BadFunc 		; return indicates invalid function
  5971                                  
  5972                                  INT2F_etcetera:
  5973                                  	;entry	DosGetGroup
  5974                                  DosGetGroup:
  5975                                  	; MSDOS 3.3
  5976                                  	;push	cs
  5977                                  	;pop	ds
  5978                                  	;retn
  5979                                  
  5980                                  	; MSDOS 6.0
  5981                                  ;SR; Cannot use CS now
  5982                                  ;
  5983                                  ;	PUSH	CS
  5984                                  ;	POP	DS
  5985                                  
  5986                                  	; 04/11/2022
  5987                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  5988                                  
  5989                                  	;getdseg <ds>
  5990 00000982 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5991 00000987 C3                      	retn
  5992                                  
  5993                                  	;entry	DOSInstall
  5994                                  DOSInstall:
  5995 00000988 B0FF                    	MOV	AL,0FFh
  5996 0000098A C3                      	retn
  5997                                  
  5998                                  ;ENDIF ; (*)
  5999                                  
  6000                                  
  6001                                  ; 15/05/2019 - Retro DOS v4.0
  6002                                  
  6003                                  ;------------------------------------------------------------------------
  6004                                  ;
  6005                                  ; Procedure Name : RW32_CONVERT
  6006                                  ;
  6007                                  ;Input: same as ABSDRD and ABSDWRT
  6008                                  ;	 ES:BP -> DPB
  6009                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6010                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6011                                  ;	 carry clear, parms ok
  6012                                  ;
  6013                                  ;------------------------------------------------------------------------
  6014                                  
  6015                                  RW32_CONVERT:
  6016 0000098B 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6017 0000098E 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6018 00000990 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6019 00000991 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6020 00000992 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6021 00000996 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6022 0000099A 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6023 0000099D 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6024                                  	;INC	DL			;>32mb			;AN000;
  6025                                  	; 17/12/2022
  6026 0000099F 42                      	inc	dx
  6027 000009A0 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6028 000009A2 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6029 000009A4 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6030                                  letold:
  6031 000009A6 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6032 000009A7 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6033 000009A8 7425                    	JZ	short old_style		;>32mb  no 		;AN000;
  6034                                  
  6035 000009AA 1E                      	push	ds
  6036                                  	;getdseg <ds>
  6037 000009AB 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6038 000009B0 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6039 000009B6 1F                      	pop	ds
  6040                                  
  6041 000009B7 F9                      	STC				;>32mb			;AN000;
  6042 000009B8 C3                      	retn				;>32mb			;AN000;
  6043                                  
  6044                                  new32format:
  6045                                  	;mov	dx,[bx+2]
  6046 000009B9 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6047                                  
  6048 000009BC 1E                      	push	ds			; set up ds to DOSDATA
  6049                                  	;getdseg <ds>
  6050 000009BD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6051 000009C2 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6052 000009C6 1F                      	pop	ds
  6053                                  
  6054 000009C7 8B17                    	mov	dx,[bx]
  6055                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6056                                  	;mov	cx,[bx+4]
  6057 000009C9 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6058                                  	;lds	bx,[bx+6]
  6059 000009CC C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6060                                  old_style:				;>32mb			;AN000;
  6061 000009CF F8                      	CLC				;>32mb			;AN000;
  6062 000009D0 C3                      	retn				;>32mb			;AN000;
  6063                                  
  6064                                  ;------------------------------------------------------------------------
  6065                                  ;
  6066                                  ; Procedure Name : Fastxxx_Purge
  6067                                  ;
  6068                                  ; Input: None
  6069                                  ; Functions: Purge Fastopen/ Cache Buffers
  6070                                  ; Output: None
  6071                                  ;
  6072                                  ;------------------------------------------------------------------------
  6073                                  
  6074                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6075                                  
  6076                                  Fastxxx_Purge:
  6077 000009D1 50                      	PUSH	AX			; save regs.	;AN000;
  6078 000009D2 56                      	PUSH	SI						;AN000;
  6079 000009D3 52                      	PUSH	DX						;AN000;
  6080                                  topen:
  6081 000009D4 1E                      	push	ds			; set up ds to DOSDATA
  6082                                  	;getdseg <ds>
  6083 000009D5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6084                                  
  6085 000009DA F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6086                                  					; fastopen installed ?	;AN000;
  6087 000009DF 1F                      	pop	ds
  6088 000009E0 740B                    	JZ	short nofast		; no			;AN000;
  6089 000009E2 B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6090                                  dofast:
  6091 000009E4 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6092                                  	;;mov	dl,[es:bp+0]
  6093                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6094                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6095                                  	; 15/12/2022
  6096 000009E6 268A5600                	mov	dl,[es:bp]
  6097                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6098 000009EA E8A21D                  	call	Fast_Dispatch
  6099                                  nofast:
  6100 000009ED 5A                      	POP	DX						;AN000;
  6101 000009EE 5E                      	POP	SI			; restore regs		;AN000;
  6102 000009EF 58                      	POP	AX			 			;AN000;
  6103 000009F0 C3                      	retn				; exit
  6104                                  
  6105                                  ;============================================================================
  6106                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6107                                  ;============================================================================
  6108                                  ; 29/04/2019 - Retro DOS v4.0
  6109                                  
  6110                                  ;include dossym.inc
  6111                                  ;include dosmac.inc
  6112                                  ;include doscntry.inc
  6113                                  
  6114                                  ; DOSCODE Segment
  6115                                  
  6116                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6117                                  ; ---------------------------------------------------------------------------
  6118                                  ;include divmes.inc
  6119                                  
  6120                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6121                                  ; -------------------------------------
  6122                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6123                                  
  6124                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6125                                  	;PUBLIC	DIVMES
  6126                                  
  6127 000009F1 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6127 000009FA 6F766572666C6F770D-
  6127 00000A03 0A                 
  6128                                  
  6129                                  	;PUBLIC	DivMesLen
  6130                                  DivMesLen:
  6131 00000A04 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6132                                  
  6133                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6134                                  ; -------------------------------------
  6135                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6136                                  
  6137                                  ; (MSDOS 6.0)
  6138                                  ; VxD not found error message
  6139                                  
  6140                                  NoVxDErrMsg:
  6141 00000A06 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6141 00000A0F 686176652074686520-
  6141 00000A18 66696C652057494E41-
  6141 00000A21 32302E33383620696E-
  6141 00000A2A 2074686520726F6F74-
  6141 00000A33 206F6620796F757220-
  6141 00000A3C 626F6F742064726976-
  6141 00000A45 65                 
  6142 00000A46 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6142 00000A4F 57696E646F77732069-
  6142 00000A58 6E20456E68616E6365-
  6142 00000A61 64204D6F64650D0A   
  6143                                  
  6144                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6145                                  
  6146                                  ; 13/05/2019 - Retro DOS v4.0
  6147                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6148                                  
  6149                                  ;include yesno.asm  (MNSDOS 6.0)
  6150                                  ; -------------------------------------
  6151                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6152                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6153                                  
  6154                                  ; This is for country Yes and No
  6155                                  
  6156 00000A69 59                      NLS_YES:	db 'Y'
  6157 00000A6A 4E                      NLS_NO:		db 'N'
  6158 00000A6B 79                      NLS_yes2:	db 'y'
  6159 00000A6C 6E                      NLS_no2:	db 'n'
  6160                                  
  6161                                  ; ---------------------------------------------------------------------------
  6162                                  
  6163                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6164                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6165                                  
  6166                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6167                                  
  6168                                  ; The following two tables implement the current buffered input editing
  6169                                  ; routines. The tables are pairwise associated in reverse order for ease
  6170                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6171                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6172                                  
  6173                                  	;PUBLIC	CANCHAR
  6174                                  CANCHAR:
  6175 00000A6D 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6176                                  	
  6177                                  	;PUBLIC	ESCCHAR
  6178                                  ESCCHAR:
  6179 00000A6E 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6180                                  	
  6181                                  	;IF	NOT Rainbow
  6182                                  
  6183                                  ESCTAB:	; LABEL BYTE
  6184                                  
  6185                                  	;IF	IBM
  6186 00000A6F 40                      	DB	64		; Ctrl-Z - F6
  6187 00000A70 4D                      	DB	77		; Copy one char - -->
  6188 00000A71 3B                      	DB	59		; Copy one char - F1
  6189 00000A72 53                      	DB	83		; Skip one char - DEL
  6190 00000A73 3C                      	DB	60		; Copy to char - F2
  6191 00000A74 3E                      	DB	62		; Skip to char - F4
  6192 00000A75 3D                      	DB	61		; Copy line - F3
  6193 00000A76 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6194 00000A77 3F                      	DB	63		; Reedit line (new template) - F5
  6195 00000A78 4B                      	DB	75		; Backspace - <--
  6196 00000A79 52                      	DB	82		; Enter insert mode - INS (toggle)
  6197 00000A7A 52                      	DB	82		; Exit insert mode - INS (toggle)
  6198 00000A7B 41                      	DB	65		; Escape character - F7
  6199 00000A7C 41                      	DB	65		; End of table
  6200                                  	;ENDIF
  6201                                  
  6202                                  ESCEND: ; LABEL BYTE
  6203                                  
  6204                                  ESCTABLEN EQU ESCEND-ESCTAB
  6205                                  
  6206                                  ESCFUNC: ; LABEL WORD
  6207                                  	
  6208 00000A7D [9314]                  	short_addr  GETCH	; Ignore the escape sequence
  6209 00000A7F [1015]                  	short_addr  TWOESC
  6210 00000A81 [0816]                  	short_addr  EXITINS
  6211 00000A83 [0816]                  	short_addr  ENTERINS
  6212 00000A85 [0B15]                  	short_addr  BACKSP
  6213 00000A87 [F415]                  	short_addr  REEDIT
  6214 00000A89 [F814]                  	short_addr  KILNEW
  6215 00000A8B [8715]                  	short_addr  COPYLIN
  6216 00000A8D [BA15]                  	short_addr  SKIPSTR
  6217 00000A8F [8D15]                  	short_addr  COPYSTR
  6218 00000A91 [B015]                  	short_addr  SKIPONE
  6219 00000A93 [9215]                  	short_addr  COPYONE
  6220 00000A95 [9215]                  	short_addr  COPYONE
  6221 00000A97 [1016]                  	short_addr  CTRLZ
  6222                                  
  6223                                  	;ENDIF
  6224                                  
  6225                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6226                                  ; ---------------------------------------------------------------------------
  6227                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6228                                  
  6229                                  ; OEMFunction key is expected to process a single function
  6230                                  ;   key input from a device and dispatch to the proper
  6231                                  ;   routines leaving all registers UNTOUCHED.
  6232                                  ;
  6233                                  ; Inputs:   CS, SS are DOSGROUP
  6234                                  ; Outputs:  None. This function is expected to JMP to onw of
  6235                                  ;           the following labels:
  6236                                  ;
  6237                                  ;           GetCh       - ignore the sequence
  6238                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6239                                  ;           ExitIns     - toggle insert mode
  6240                                  ;           EnterIns    - toggle insert mode
  6241                                  ;           BackSp      - move backwards one space
  6242                                  ;           ReEdit      - reedit the line with a new template
  6243                                  ;           KilNew      - discard the current line and start from scratch
  6244                                  ;           CopyLin     - copy the rest of the template into the line
  6245                                  ;           SkipStr     - read the next character and skip to it in the template
  6246                                  ;           CopyStr     - read next char and copy from template to line until char
  6247                                  ;           SkipOne     - advance position in template one character
  6248                                  ;           CopyOne     - copy next character in template into line
  6249                                  ;           CtrlZ       - place a ^Z into the template
  6250                                  ; Registers that are allowed to be modified by this function are:
  6251                                  ;           AX, CX, BP
  6252                                  
  6253                                  ; 13/05/2019 - Retro DOS v4.0
  6254                                  ; -------------------------------------
  6255                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6256                                  
  6257                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6258                                  ; -------------------------------------
  6259                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6260                                  
  6261                                  OEMFunctionKey:
  6262 00000A99 E85609                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6263 00000A9C B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6264 00000A9E 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6265 00000A9F BF[6F0A]                	MOV     DI,ESCTAB		; offset of second byte table
  6266 00000AA2 06                      	push	es
  6267 00000AA3 0E                      	push	cs
  6268 00000AA4 07                      	pop	es
  6269 00000AA5 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6270 00000AA7 07                      	pop	es
  6271 00000AA8 5F                      	POP     DI                      ; restore DI
  6272 00000AA9 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6273 00000AAB 89CD                    	MOV     BP,CX                   ; move to indexable register
  6274                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6275 00000AAD 2EFFA6[7D0A]            	JMP	word [CS:BP+ESCFUNC]
  6276                                  
  6277                                  ;DOSCODE ENDS
  6278                                  	
  6279                                  ;============================================================================
  6280                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6281                                  ;============================================================================
  6282                                  ; Retro DOS v3.0 - 18/07/2018
  6283                                  
  6284                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6285                                  ;----------------------------------------------------------------------------
  6286                                  ; Retro DOS v2.0 - 13/03/2018
  6287                                  
  6288                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6289                                  
  6290                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6291                                  
  6292                                  ;**	$GET_DATE - Get Current Date
  6293                                  ;----------------------------------------
  6294                                  ;	ENTRY	none
  6295                                  ;	EXIT	(cx:dx) = current date
  6296                                  ;	USES	all
  6297                                  
  6298                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6299                                  
  6300                                  _$GET_DATE:	;System call 42
  6301                                  
  6302 00000AB2 16                      	PUSH	SS
  6303 00000AB3 1F                      	POP	DS
  6304 00000AB4 E8B900                  	CALL	READTIME	;Check for rollover to next day
  6305 00000AB7 A1[5203]                	MOV	AX,[YEAR]
  6306                                  
  6307                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6308                                  
  6309 00000ABA 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6310 00000ABE E809FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6311                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6312 00000AC1 895C06                  	MOV	[SI+user_env.user_DX],BX
  6313 00000AC4 05BC07                  	ADD	AX,1980		;Put bias back
  6314                                  	;MOV	[SI+4],AX	;CX=year
  6315 00000AC7 894404                  	MOV	[SI+user_env.user_CX],AX
  6316 00000ACA 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6317                                  RET20:	; 05/11/2022
  6318                                  RET24:	; 18/12/2022
  6319 00000ACE C3                      	RETN
  6320                                  
  6321                                  ;**	$SET_DATE - Set Current Date
  6322                                  ;----------------------------------------
  6323                                  ;	ENTRY	(cx:dx) = current date
  6324                                  ;	EXIT	(al) = -1 iff bad date
  6325                                  ;		(al) = 0 if ok
  6326                                  ;	USES	all
  6327                                  
  6328                                  _$SET_DATE:	;System call 43
  6329                                  
  6330 00000ACF B0FF                    	MOV	AL,-1		;Be ready to flag error
  6331 00000AD1 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6332                                  	;JC	SHORT RET24	;Error if not big enough
  6333                                  	; 05/11/2022
  6334 00000AD5 72F7                    	jc	short RET20
  6335 00000AD7 83F977                  	CMP	CX,119		;Year must be less than 2100
  6336 00000ADA 77F2                    	JA	SHORT RET24
  6337 00000ADC 08F6                    	OR	DH,DH
  6338                                  	;JZ	SHORT RET24
  6339                                   	; 05/11/2022
  6340 00000ADE 74EE                    	jz	short RET20
  6341 00000AE0 08D2                    	OR	DL,DL
  6342                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6343                                  	; 05/11/2022
  6344 00000AE2 74EA                    	jz	short RET20
  6345 00000AE4 80FE0C                  	CMP	DH,12		;Check against max. month
  6346 00000AE7 77E5                    	JA	SHORT RET24
  6347 00000AE9 16                      	PUSH	SS
  6348 00000AEA 1F                      	POP	DS
  6349                                  	;CALL	DODATE
  6350                                  	; 18/12/2022
  6351 00000AEB E91801                  	jmp	DODATE
  6352                                  ;RET24:  
  6353                                  	;RETN
  6354                                  
  6355                                  ;**	$GET_TIME - Get Current Time
  6356                                  ;----------------------------------------
  6357                                  ;	ENTRY	none
  6358                                  ;	EXIT	(cx:dx) = current time
  6359                                  ;	USES	all
  6360                                  
  6361                                  _$GET_TIME:			;System call 44
  6362                                  
  6363 00000AEE 16                      	PUSH	SS
  6364 00000AEF 1F                      	POP	DS
  6365 00000AF0 E87D00                  	CALL	READTIME
  6366 00000AF3 E8D4F9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6367                                  	;MOV	[SI+6],DX
  6368 00000AF6 895406                  	MOV	[SI+user_env.user_DX],DX
  6369                                  	;MOV	[SI+4],CX
  6370 00000AF9 894C04                  	MOV	[SI+user_env.user_CX],CX
  6371 00000AFC 30C0                    	XOR	AL,AL
  6372                                  RET26:  
  6373 00000AFE C3                      	RETN
  6374                                  
  6375                                  ;**	$SET_TIME - Set Current Time
  6376                                  ;----------------------------------------
  6377                                  ;	ENTRY	(cx:dx) = time
  6378                                  ;	EXIT	(al) = 0 if 0k
  6379                                  ;		(al) = -1 if invalid
  6380                                  ;	USES	ALL
  6381                                  
  6382                                  _$SET_TIME:			;System call 45
  6383                                  
  6384 00000AFF B0FF                    	MOV	AL,-1		;Flag in case of error
  6385 00000B01 80FD18                  	CMP	CH,24		;Check hours
  6386 00000B04 73F8                    	JAE	SHORT RET26
  6387 00000B06 80F93C                  	CMP	CL,60		;Check minutes
  6388 00000B09 73F3                    	JAE	SHORT RET26
  6389 00000B0B 80FE3C                  	CMP	DH,60		;Check seconds
  6390 00000B0E 73EE                    	JAE	SHORT RET26
  6391 00000B10 80FA64                  	CMP	DL,100		;Check 1/100's
  6392 00000B13 73E9                    	JAE	SHORT RET26
  6393 00000B15 51                      	PUSH	CX
  6394 00000B16 52                      	PUSH	DX
  6395 00000B17 16                      	PUSH	SS
  6396 00000B18 1F                      	POP	DS
  6397 00000B19 BB[B603]                	MOV	BX,TIMEBUF
  6398 00000B1C B90600                  	MOV	CX,6
  6399 00000B1F 31D2                    	XOR	DX,DX
  6400 00000B21 89D0                    	MOV	AX,DX
  6401 00000B23 53                      	PUSH	BX
  6402 00000B24 E8A03C                  	CALL	SETREAD
  6403 00000B27 1E                      	PUSH	DS
  6404 00000B28 C536[2E00]              	LDS	SI,[BCLOCK]
  6405 00000B2C E8223C                  	CALL	DEVIOCALL2	;Get correct day count
  6406 00000B2F 1F                      	POP	DS
  6407 00000B30 5B                      	POP	BX
  6408 00000B31 E8C63C                  	CALL	SETWRITE
  6409 00000B34 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6410 00000B38 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6411 00000B3C C536[2E00]              	LDS	SI,[BCLOCK]
  6412 00000B40 E80E3C                  	CALL	DEVIOCALL2	;Set the time
  6413 00000B43 30C0                    	XOR	AL,AL
  6414 00000B45 C3                      	RETN
  6415                                  
  6416                                  ; 11/07/2018 - Retro DOS v3.0
  6417                                  ; Retro DOS v2.0 - 14/03/2018
  6418                                  
  6419                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6420                                  
  6421                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6422                                  ;----------------------------------------------------------
  6423                                  ; Date16 returns the current date in AX, current time in DX
  6424                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6425                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6426                                  
  6427                                  DATE16:
  6428                                  	
  6429                                  ;M048	Context DS
  6430                                  ;
  6431                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6432                                  ; is DOSDATA
  6433                                  
  6434                                  	;push	ss
  6435                                  	;pop	ds
  6436                                  
  6437                                  	;getdseg <ds>		; M048
  6438                                  
  6439                                  	; 13/05/2019 - Retro DOS v4.0
  6440 00000B46 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6441                                  
  6442 00000B4B 51                      	PUSH	CX
  6443 00000B4C 06                      	PUSH	ES
  6444 00000B4D E82000                  	CALL	READTIME
  6445 00000B50 07                      	POP	ES
  6446 00000B51 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6447 00000B53 D0E1                    	SHL	CL,1
  6448 00000B55 D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6449 00000B57 D1E1                    	SHL	CX,1
  6450 00000B59 D1E1                    	SHL	CX,1
  6451 00000B5B D0EE                    	SHR	DH,1		;Count every two seconds
  6452 00000B5D 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6453 00000B5F 89CA                    	MOV	DX,CX
  6454                                  
  6455                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6456                                  
  6457 00000B61 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6458 00000B64 B104                    	MOV	CL,4
  6459 00000B66 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6460 00000B68 D1E0                    	SHL	AX,1
  6461 00000B6A 59                      	POP	CX
  6462 00000B6B 0A06[5003]              	OR	AL,[DAY]
  6463                                  RET21:
  6464 00000B6F C3                      	RETN
  6465                                  
  6466                                  ;----------------------------------------------------------
  6467                                  
  6468                                  READTIME:
  6469                                  
  6470                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6471                                  ;Uses AX, CX, DX.
  6472                                  
  6473 00000B70 C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6474 00000B76 56                      	PUSH	SI
  6475 00000B77 53                      	PUSH	BX
  6476                                  
  6477 00000B78 BB[B603]                	MOV	BX,TIMEBUF
  6478                                  
  6479 00000B7B B90600                  	MOV	CX,6
  6480 00000B7E 31D2                    	XOR	DX,DX
  6481 00000B80 89D0                    	MOV	AX,DX
  6482 00000B82 E8423C                  	CALL	SETREAD
  6483 00000B85 1E                      	PUSH	DS
  6484 00000B86 C536[2E00]              	LDS	SI,[BCLOCK]
  6485 00000B8A E8C43B                  	CALL	DEVIOCALL2	;Get correct date and time
  6486 00000B8D 1F                      	POP	DS
  6487 00000B8E 5B                      	POP	BX
  6488 00000B8F 5E                      	POP	SI
  6489 00000B90 A1[B603]                	MOV	AX,[TIMEBUF]
  6490 00000B93 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6491 00000B97 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6492 00000B9B 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6493                                  	;JZ	SHORT RET22
  6494 00000B9F 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6495                                  	;cmp	ax,43830
  6496 00000BA1 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6497 00000BA4 733D                    	JAE	SHORT RET22	;Ignore if too large
  6498 00000BA6 A3[5403]                	MOV	[DAYCNT],AX
  6499 00000BA9 56                      	PUSH	SI
  6500 00000BAA 51                      	PUSH	CX
  6501 00000BAB 52                      	PUSH	DX		;Save time
  6502 00000BAC 31D2                    	XOR	DX,DX
  6503                                  	;mov	cx,1461
  6504 00000BAE B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6505 00000BB1 F7F1                    	DIV	CX		;Compute number of 4-year units
  6506 00000BB3 D1E0                    	SHL	AX,1
  6507 00000BB5 D1E0                    	SHL	AX,1
  6508 00000BB7 D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6509 00000BB9 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6510                                  
  6511 00000BBB BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6512                                  
  6513 00000BBE E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6514 00000BC1 D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6515 00000BC3 7304                    	JNC	SHORT SK	;Extra half-year?
  6516 00000BC5 81C2C800                	ADD	DX,200
  6517                                  SK:
  6518 00000BC9 E82400                  	CALL	SETYEAR
  6519 00000BCC B101                    	MOV	CL,1		;At least at first month in year
  6520                                  
  6521 00000BCE BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6522                                  	
  6523 00000BD1 E81000                  	CALL	DSLIDE		;Find out which month we're in
  6524 00000BD4 880E[5103]              	MOV	[MONTH],CL
  6525 00000BD8 42                      	INC	DX		;Remainder is day of month (start with one)
  6526 00000BD9 8816[5003]              	MOV	[DAY],DL
  6527 00000BDD E89700                  	CALL	WKDAY		;Set day of week
  6528 00000BE0 5A                      	POP	DX
  6529 00000BE1 59                      	POP	CX
  6530 00000BE2 5E                      	POP	SI
  6531                                  RET22:  
  6532 00000BE3 C3                      	RETN
  6533                                  
  6534                                  ;----------------------------------------------------------
  6535                                  
  6536                                  DSLIDE:
  6537 00000BE4 B400                    	MOV	AH,0
  6538                                  DSLIDE1:
  6539 00000BE6 AC                      	LODSB			;Get count of days
  6540 00000BE7 39C2                    	CMP	DX,AX		;See if it will fit
  6541                                  	;JB	SHORT RET23	;If not, done
  6542 00000BE9 72F8                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6543 00000BEB 29C2                    	SUB	DX,AX
  6544 00000BED 41                      	INC	CX		;Count one more month/year
  6545 00000BEE EBF6                    	JMP	SHORT DSLIDE1
  6546                                  
  6547                                  ;----------------------------------------------------------
  6548                                  
  6549                                  SETYEAR:
  6550                                  
  6551                                  ;Set year with value in CX. Adjust length of February for this year.
  6552                                  
  6553                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6554                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6555                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6556                                  ;	preserve DS as CHKYR is also called as a routine.
  6557                                  
  6558                                  	; MSDOS 6.0 (18/07/2018) ; *
  6559                                  
  6560                                  	;GETDSEG DS
  6561                                  
  6562                                  	;PUSH	CS  ; *
  6563                                  	;POP	DS  ; *
  6564                                  
  6565                                  	; 13/05/2019 - Retro DOS v4.0
  6566 00000BF0 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6567                                  
  6568                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6569                                  	; 05/11/2022 
  6570                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6571                                  
  6572 00000BF5 880E[5203]              	MOV	[YEAR],CL
  6573                                  CHKYR:
  6574 00000BF9 F6C103                  	TEST	CL,3		;Check for leap year
  6575 00000BFC B01C                    	MOV	AL,28
  6576 00000BFE 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6577 00000C00 FEC0                    	INC	AL		;Add leap day
  6578                                  SAVFEB:
  6579 00000C02 A2[1D0D]                	mov	[february],al
  6580                                  	;MOV	[MONTAB+1],AL	;Store for February
  6581                                  RET23:  
  6582 00000C05 C3                      	RETN
  6583                                  
  6584                                  ;----------------------------------------------------------
  6585                                  
  6586                                  DODATE:
  6587 00000C06 E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6588 00000C09 88F0                    	MOV	AL,DH
  6589                                  
  6590 00000C0B BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6591                                  
  6592 00000C0E D7                      	XLAT			;Look up days in month
  6593 00000C0F 38D0                    	CMP	AL,DL
  6594 00000C11 B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6595                                  	;JB	SHORT RET25	;Error if too many days
  6596 00000C13 72F0                    	jb	short RET23 ; 18/07/2018
  6597 00000C15 E8D8FF                  	CALL	SETYEAR
  6598                                  ;
  6599                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6600                                  ;
  6601 00000C18 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6602 00000C1C D1E9                    	SHR	CX,1
  6603 00000C1E D1E9                    	SHR	CX,1
  6604                                  	;mov	ax,1461
  6605 00000C20 B8B505                  	MOV	AX,FOURYEARS
  6606 00000C23 89D3                    	MOV	BX,DX
  6607 00000C25 F7E1                    	MUL	CX
  6608 00000C27 8A0E[5203]              	MOV	CL,[YEAR]
  6609 00000C2B 80E103                  	AND	CL,3
  6610                                  
  6611 00000C2E BE[140D]                	MOV	SI,YRTAB
  6612                                  
  6613 00000C31 89C2                    	MOV	DX,AX
  6614 00000C33 D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6615 00000C35 E85200                  	CALL	DSUM		;Add up the days in each year
  6616 00000C38 88F9                    	MOV	CL,BH		;Month of year
  6617                                  
  6618 00000C3A BE[1C0D]                	MOV	SI,MONTAB
  6619                                  
  6620 00000C3D 49                      	DEC	CX		;Account for months starting with one
  6621 00000C3E E84900                  	CALL	DSUM		;Add up days in each month
  6622 00000C41 88D9                    	MOV	CL,BL		;Day of month
  6623 00000C43 49                      	DEC	CX		;Account for days starting with one
  6624 00000C44 01CA                    	ADD	DX,CX		;Add in to day total
  6625 00000C46 92                      	XCHG	AX,DX		;Get day count in AX
  6626 00000C47 A3[5403]                	MOV	[DAYCNT],AX
  6627 00000C4A 56                      	PUSH	SI
  6628 00000C4B 53                      	PUSH	BX
  6629 00000C4C 50                      	PUSH	AX
  6630                                  
  6631 00000C4D BB[B603]                	MOV	BX,TIMEBUF
  6632                                  
  6633 00000C50 B90600                  	MOV	CX,6
  6634 00000C53 31D2                    	XOR	DX,DX
  6635 00000C55 89D0                    	MOV	AX,DX
  6636 00000C57 53                      	PUSH	BX
  6637 00000C58 E86C3B                  	CALL	SETREAD
  6638                                  
  6639 00000C5B 1E                      	PUSH	DS
  6640 00000C5C C536[2E00]              	LDS	SI,[BCLOCK]
  6641 00000C60 E8EE3A                  	CALL	DEVIOCALL2	;Get correct date and time
  6642 00000C63 1F                      	POP	DS
  6643 00000C64 5B                      	POP	BX
  6644 00000C65 E8923B                  	CALL	SETWRITE
  6645 00000C68 8F06[B603]              	POP	WORD [TIMEBUF]
  6646 00000C6C 1E                      	PUSH	DS
  6647 00000C6D C536[2E00]              	LDS	SI,[BCLOCK]
  6648 00000C71 E8DD3A                  	CALL	DEVIOCALL2	;Set the date
  6649 00000C74 1F                      	POP	DS
  6650 00000C75 5B                      	POP	BX
  6651 00000C76 5E                      	POP	SI
  6652                                  WKDAY:
  6653 00000C77 A1[5403]                	MOV	AX,[DAYCNT]
  6654 00000C7A 31D2                    	XOR	DX,DX
  6655 00000C7C B90700                  	MOV	CX,7
  6656 00000C7F 40                      	INC	AX
  6657 00000C80 40                      	INC	AX		;First day was Tuesday
  6658 00000C81 F7F1                    	DIV	CX		;Compute day of week
  6659 00000C83 8816[5603]              	MOV	[WEEKDAY],DL
  6660 00000C87 30C0                    	XOR	AL,AL		;Flag OK
  6661                                  RET25:
  6662 00000C89 C3                      	RETN
  6663                                  
  6664                                  ;----------------------------------------------------------
  6665                                  
  6666                                  ;**	DSUM - Compute the sum of a string of bytes
  6667                                  ;
  6668                                  ;	ENTRY	(cx) = byte count
  6669                                  ;		(ds:si) = byte address
  6670                                  ;		(dx) = sum register, initialized by caller
  6671                                  ;	EXIT	(dx) updated
  6672                                  ;	USES	ax, cx, dx, si, flags
  6673                                  
  6674                                  DSUM:
  6675 00000C8A B400                    	MOV	AH,0
  6676 00000C8C E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6677                                  	;JCXZ	RET25 ; 18/07/2018
  6678                                  DSUM1:
  6679 00000C8E AC                      	LODSB
  6680 00000C8F 01C2                    	ADD	DX,AX
  6681 00000C91 E2FB                    	LOOP	DSUM1
  6682                                  DSUM9:
  6683 00000C93 C3                      	RETN
  6684                                  
  6685                                  ;============================================================================
  6686                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6687                                  ;============================================================================
  6688                                  ; 29/04/2019 - Retro DOS v4.0
  6689                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6690                                  
  6691                                  ; 12/03/2018 - Retro DOS v2.0 
  6692                                  
  6693                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6694                                  ;NAME	GETSET
  6695                                  
  6696                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6697                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6698                                  
  6699                                  ;USERNUM:
  6700                                  ;	DW	0			; 24 bit user number
  6701                                  ;       DB      0
  6702                                  ;;	IF      IBM
  6703                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6704                                  ;;	ELSE
  6705                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6706                                  ;;	ENDIF
  6707                                  
  6708                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6709                                  ;; 08/07/2018 - Retro DOS v3.0
  6710                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6711                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6712                                  
  6713                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6714                                  ;----------------------------------------------------------------------------
  6715                                  
  6716                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6717                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6718                                  
  6719                                  _$GET_VERSION:
  6720                                  
  6721                                  ; Inputs:
  6722                                  ;       None
  6723                                  ; Function:
  6724                                  ;       Return MS-DOS version number
  6725                                  ; Outputs:
  6726                                  ;       OEM number in BH
  6727                                  ;       User number in BL:CX (24 bits)
  6728                                  ;       Version number as AL.AH in binary
  6729                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6730                                  
  6731                                  ; MSDOS 6.0
  6732                                  ;
  6733                                  ;	Fake_Count is used to lie about the version numbers to support
  6734                                  ;	old binarys. See ms_table.asm for more info.
  6735                                  ;
  6736                                  ;		if input al = 00
  6737                                  ;		  (bh) = OEM number			
  6738                                  ;		else if input al = 01
  6739                                  ;		  (bh) = version flags
  6740                                  ;		 
  6741                                  ;		       	 bits 0-2 = DOS internal revision
  6742                                  ;		       	 bits 3-7 = DOS type flags
  6743                                  ;		              bit 3    = DOS is in ROM
  6744                                  ;		              bit 4    = DOS in in HMA
  6745                                  ;		              bits 5-7 = reserved
  6746                                  ;               M007 change - only bit 3 is now valid. Other bits
  6747                                  ;               are 0 when AL = 1
  6748                                  
  6749                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6750                                  	;--------------------------------------
  6751                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6752                                  
  6753 00000C94 16                              PUSH    SS
  6754 00000C95 1F                              POP     DS
  6755 00000C96 8B1E[B403]                      MOV     BX,[USERNUM+2]
  6756 00000C9A 8B0E[B203]                      MOV     CX,[USERNUM]
  6757                                  
  6758                                  	; 13/05/2019 - Retro DOS v4.0
  6759                                  
  6760                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6761                                  	;DOS flags
  6762                                  
  6763 00000C9E 3C01                    	cmp	AL,1
  6764 00000CA0 7502                    	jne	short Norm_Vers
  6765                                  
  6766                                  ;ifdef ROMDOS
  6767                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6768                                  ;				(DOSINROM = 8)
  6769                                  ;else
  6770 00000CA2 30FF                            xor     bh,bh		; Otherwise return 0
  6771                                  ;endif				;M007 end
  6772                                  
  6773                                  Norm_Vers:
  6774                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6775                                  
  6776                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6777                                  	; 13/05/2019 - Retro DOS v4.0
  6778 00000CA4 1E                      	push	ds		; Get the version number from the
  6779 00000CA5 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6780                                  	;mov	ax,[40h]
  6781 00000CA9 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6782                                  	; 07/12/2022
  6783 00000CAC 1F                      	pop	ds
  6784 00000CAD E81AF8                  	call	Get_User_Stack
  6785                                  				; Put values for return registers
  6786                                  				; in the proper place on the user's	 
  6787                                  				; stack addressed by DS:SI
  6788                                          ;MOV	[SI+user_env.user_AX],AX
  6789 00000CB0 8904                            MOV	[SI],AX			 
  6790                                  	;MOV	[SI+2],BX		 
  6791 00000CB2 895C02                  	mov	[SI+user_env.user_BX],BX 
  6792                                          ;MOV	[SI+4],CX
  6793 00000CB5 894C04                  	mov	[SI+user_env.user_CX],CX
  6794                                  
  6795 00000CB8 C3                      	RETN
  6796                                  
  6797                                  ; 18/07/2018 - Retro DOS v3.0
  6798                                  
  6799                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6800                                  ;----------------------------------------------------------------------------
  6801                                  
  6802                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6803                                  ;
  6804                                  ;	ENTRY	none
  6805                                  ;	EXIT	(al) = value of VERIFY flag
  6806                                  ;	USES	all
  6807                                  
  6808                                  
  6809                                  _$GET_VERIFY_ON_WRITE:
  6810                                  
  6811                                  ;hkn; SS override
  6812 00000CB9 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6813 00000CBD C3                      	retn
  6814                                  
  6815                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6816                                  ;
  6817                                  ;	ENTRY	(al) = value of VERIFY flag
  6818                                  ;	EXIT	none
  6819                                  ;	USES	all
  6820                                  
  6821                                  _$SET_VERIFY_ON_WRITE:
  6822                                  
  6823 00000CBE 2401                    	AND	AL,1
  6824                                  ;hkn; SS override
  6825 00000CC0 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6826                                  RET27:	; 18/07/2018
  6827 00000CC4 C3                      	retn
  6828                                  
  6829                                  ; 19/07/2018 - Retro DOS v3.0
  6830                                  
  6831                                  ;BREAK <$International - return country-dependent information>
  6832                                  ;----------------------------------------------------------------------------
  6833                                  ;
  6834                                  ; Procedure Name : $INTERNATIONAL
  6835                                  ;
  6836                                  ; Inputs:
  6837                                  ;	MOV	AH,International
  6838                                  ;	MOV	AL,country	(al = 0 => current country)
  6839                                  ;      [MOV	BX,country]
  6840                                  ;	LDS	DX,block
  6841                                  ;	INT	21
  6842                                  ; Function:
  6843                                  ;	give users an idea of what country the application is running
  6844                                  ; Outputs:
  6845                                  ;	IF DX != -1 on input (get country)
  6846                                  ;	  AL = 0 means return current country table.
  6847                                  ;	  0<AL<0FFH means return country table for country AL
  6848                                  ;	  AL = 0FF means return country table for country BX
  6849                                  ;	  No Carry:
  6850                                  ;	     Register BX will contain the 16-bit country code.
  6851                                  ;	     Register AL will contain the low 8 bits of the country code.
  6852                                  ;	     The block pointed to by DS:DX is filled in with the information
  6853                                  ;	     for the particular country.
  6854                                  ;		BYTE  Size of this table excluding this byte and the next
  6855                                  ;		BYTE  Country code represented by this table
  6856                                  ;			A sequence of n bytes, where n is the number specified
  6857                                  ;			by the first byte above and is not > internat_block_max,
  6858                                  ;			in the correct order for being returned by the
  6859                                  ;			INTERNATIONAL call as follows:
  6860                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6861                                  ;		5 BYTE	Currency symbol null terminated
  6862                                  ;		2 BYTE	thousands separator null terminated
  6863                                  ;		2 BYTE	Decimal point null terminated
  6864                                  ;		2 BYTE	Date separator null terminated
  6865                                  ;		2 BYTE	Time separator null terminated
  6866                                  ;		1 BYTE	Bit field.  Currency format.
  6867                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6868                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6869                                  ;		1 BYTE	No. of significant decimal digits in currency
  6870                                  ;		1 BYTE	Bit field.  Time format.
  6871                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6872                                  ;		DWORD	Call address of case conversion routine
  6873                                  ;		2 BYTE	Data list separator null terminated.
  6874                                  ;	  Carry:
  6875                                  ;	     Register AX has the error code.
  6876                                  ;	IF DX = -1 on input (set current country)
  6877                                  ;	  AL = 0 is an error
  6878                                  ;	  0<AL<0FFH means set current country to country AL
  6879                                  ;	  AL = 0FF means set current country to country BX
  6880                                  ;	  No Carry:
  6881                                  ;	    Current country SET
  6882                                  ;	    Register AL will contain the low 8 bits of the country code.
  6883                                  ;	  Carry:
  6884                                  ;	     Register AX has the error code.
  6885                                  ;-----------------------------------------------------------------------------
  6886                                  
  6887                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6888                                  
  6889                                  ; 13/05/2019 - Retro DOS v4.0
  6890                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6891                                  
  6892                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6893                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6894                                  
  6895                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6896                                  	 
  6897 00000CC5 3CFF                    	CMP	AL,0FFH
  6898 00000CC7 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6899 00000CC9 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6900 00000CCB 30FF                    	XOR	BH,BH
  6901                                  BX_HAS_CODE:
  6902 00000CCD 1E                      	PUSH	DS
  6903 00000CCE 07                      	POP	ES
  6904 00000CCF 52                      	PUSH	DX
  6905 00000CD0 5F                      	POP	DI			; User buffer to ES:DI
  6906                                  
  6907                                  ;hkn; SS is DOSDATA
  6908                                  ;	context DS
  6909                                  
  6910 00000CD1 16                      	push	ss
  6911 00000CD2 1F                      	pop	ds
  6912                                  
  6913 00000CD3 83FFFF                  	CMP	DI,-1
  6914 00000CD6 7465                    	JZ	short international_set
  6915 00000CD8 09DB                    	OR	BX,BX
  6916 00000CDA 7505                    	JNZ	short international_find
  6917                                  
  6918                                  ;hkn; country_cdpg is in DOSDATA segment.
  6919 00000CDC BE[2A12]                	MOV	SI,COUNTRY_CDPG
  6920                                  
  6921 00000CDF EB41                    	JMP	SHORT international_copy
  6922                                  
  6923                                  international_find:
  6924 00000CE1 BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  6925 00000CE4 E80B00                  	CALL	international_get
  6926 00000CE7 725C                    	JC	short errtn
  6927 00000CE9 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  6928 00000CEC 7534                    	JNZ	SHORT international_copy ; no, copy by myself
  6929 00000CEE 89D3                    	MOV	BX,DX			 ; put country back
  6930 00000CF0 EB40                    	JMP	SHORT international_ok3
  6931                                  
  6932                                  international_get:
  6933 00000CF2 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  6934                                  
  6935                                  ;hkn; country_cdpg is in DOSDATA segment.
  6936                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6937                                  
  6938                                  	; MSDOS 3.3
  6939                                  	;;cmp	bx,[SI+63h]
  6940                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  6941                                  	;jz	short RET27
  6942                                  
  6943                                  	; 13/05/2019 - Retro DOS v4.0
  6944                                  
  6945                                  	; MSDOS 6.0
  6946                                  	;cmp	bx,[ss:si+68h]
  6947 00000CF5 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  6948 00000CF9 74C9                    	jz	short RET27			; return if equal
  6949                                  
  6950 00000CFB 89DA                    	MOV	DX,BX
  6951 00000CFD 31DB                    	XOR	BX,BX			; bx = 0, default code page
  6952                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  6953 00000CFF B80014                  	mov	ax,1400h
  6954 00000D02 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  6955                                  			; Return: AL = 00h not installed, OK to install
  6956                                  			; 01h not installed, not OK
  6957                                  			; FFh installed
  6958 00000D04 3CFF                    	CMP	AL,0FFH
  6959 00000D06 7516                    	JNZ	short interr		; not in memory
  6960                                  	;cmp	bp,0
  6961 00000D08 09ED                    	or	bp,bp			; GetCntry ?
  6962 00000D0A 7507                    	JNZ	short stcdpg
  6963                                  	
  6964                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  6965 00000D0C B80414                  	mov     ax,1404h
  6966 00000D0F CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  6967                                  			; BX = code page, DX = country code,
  6968                                  			; DS:SI -> internal code page structure
  6969                                  			; ES:DI -> user buffer
  6970                                  			; Return: AL = status
  6971                                  
  6972 00000D11 EB05                    	JMP	short chkok
  6973                                  	
  6974                                  	;nop
  6975                                  
  6976                                  stcdpg:
  6977                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  6978 00000D13 B80314                  	mov     ax,1403h
  6979 00000D16 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  6980                                  			; DS:SI -> internal code page structure
  6981                                  			; BX = code page, DX = country code
  6982                                  			; Return: AL = status
  6983                                  chkok:
  6984 00000D18 08C0                    	or	al,al			; success ?
  6985                                  	;retz				; yes
  6986 00000D1A 74A8                    	jz	short RET27
  6987                                  
  6988                                  setcarry:
  6989 00000D1C F9                      	STC				; set carry
  6990 00000D1D C3                      	retn
  6991                                  interr:
  6992 00000D1E B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  6993 00000D20 EBFA                    	JMP	short setcarry
  6994                                  
  6995                                  international_copy:
  6996                                  
  6997                                  ;hkn; country_cdpg is in DOSDATA segment.
  6998                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6999                                  
  7000                                  	; MSDOS 3.3
  7001                                  	;;mov	bx,[SI+63h]
  7002                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7003                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7004                                  
  7005                                  	; 13/05/2019 - Retro DOS v4.0
  7006                                  
  7007                                  	; MSDOS 6.0
  7008                                  	;mov	bx,[ss:si+68h]
  7009 00000D22 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7010 00000D26 BE[9612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7011                                  
  7012                                  	;mov	cx,24
  7013 00000D29 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7014                                  
  7015                                  	; MSDOS 6.0
  7016                                  
  7017                                  ;hkn;	must set up DS to SS so that international info can be copied
  7018                                  	
  7019 00000D2C 1E                      	push	ds
  7020                                  
  7021 00000D2D 16                      	push	ss			; cs -> ss
  7022 00000D2E 1F                      	pop	ds
  7023                                  
  7024 00000D2F F3A4                    	REP	MOVSB			; copy country info
  7025                                  
  7026                                  	; MSDOS 6.0
  7027                                  
  7028 00000D31 1F                      	pop	ds	;hkn;	restore ds
  7029                                  
  7030                                  international_ok3:
  7031 00000D32 E895F7                  	call	Get_User_Stack
  7032                                  ;ASSUME	DS:NOTHING
  7033                                  	;MOV	[SI+2],BX
  7034 00000D35 895C02                  	MOV	[SI+user_env.user_BX],BX
  7035                                  international_ok:
  7036 00000D38 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7037                                  ;SYS_RET_OK_jmp:
  7038                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7039                                  nono:	; 15/12/2022
  7040                                  SYS_RET_OK_jmp:
  7041 00000D3A E947F9                  	jmp	SYS_RET_OK
  7042                                  
  7043                                  international_set:
  7044                                  
  7045                                  ;hkn; ASSUME	DS:DOSGROUP
  7046                                  ;ASSUME	DS:DOSDATA
  7047                                  
  7048 00000D3D BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7049 00000D40 E8AFFF                  	CALL	international_get
  7050 00000D43 73F3                    	JNC	short international_ok
  7051                                  errtn:
  7052 00000D45 3CFF                    	CMP	AL,0FFH
  7053 00000D47 7403                    	JZ	short errtn2
  7054                                  errtn1:
  7055 00000D49 E941F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7056                                  errtn2:
  7057                                  	;error	error_invalid_function	; NLSFUNC not existent
  7058                                  
  7059                                  	;mov	al,1
  7060 00000D4C B001                    	mov	al,error_invalid_function 
  7061 00000D4E EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7062                                  ;errtn3:
  7063                                  ;	jmp	SYS_RET_ERR
  7064                                  
  7065                                  ;EndProc $INTERNATIONAL
  7066                                  
  7067                                  ; 19/07/2018
  7068                                  
  7069                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7070                                  
  7071                                  ;----------------------------------------------------------------------------
  7072                                  ;
  7073                                  ; Procedure Name : $GetExtCntry
  7074                                  ;
  7075                                  ; Inputs:
  7076                                  ;	if AL >= 20H
  7077                                  ;	  AL= 20H    capitalize single char, DL= char
  7078                                  ;	      21H    capitalize string, CX= string length
  7079                                  ;	      22H    capitalize ASCIIZ string
  7080                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7081                                  ;	      80H bit 0 = use normal upper case table
  7082                                  ;		      1 = use file upper case table
  7083                                  ;	   DS:DX points to string
  7084                                  ;
  7085                                  ;	else
  7086                                  ;
  7087                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7088                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7089                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7090                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7091                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7092                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7093                                  ;	INT	21
  7094                                  ; Function:
  7095                                  ;	give users extended country dependent information
  7096                                  ;	or capitalize chars
  7097                                  ; Outputs:
  7098                                  ;	  No Carry:
  7099                                  ;	     extended country info is succesfully returned
  7100                                  ;	  Carry:
  7101                                  ;	     Register AX has the error code.
  7102                                  ;	     AX=0, NO	 for YES/NO CHECK
  7103                                  ;		1, YES
  7104                                  ;----------------------------------------------------------------------------
  7105                                  
  7106                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7107                                  
  7108                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7109                                  
  7110                                  	; MSDOS 6.0
  7111                                  _$GetExtCntry:
  7112 00000D50 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7113 00000D52 726B                    	JB	short notcap
  7114                                  capcap: 				;
  7115 00000D54 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7116 00000D56 7505                    	JNZ	short fileupper		; file upper case
  7117                                  
  7118                                  ;hkn; UCASE_TAB in DOSDATA
  7119 00000D58 BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7120 00000D5B EB05                    	JMP	SHORT capit
  7121                                  
  7122                                  fileupper:
  7123                                  	; 16/01/2024 (MSDOS 3.3-6.22 MSDOS.SYS has a bug here)
  7124                                  	; (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7125                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7126                                  	; AL >= 80h
  7127 00000D5D 247F                    	and	al,7Fh
  7128                                  
  7129                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7130 00000D5F BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7131                                  capit:					;
  7132 00000D62 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7133 00000D64 750D                    	JNZ	short chkyes		; no
  7134 00000D66 88D0                    	MOV	AL,DL			; set up AL
  7135 00000D68 E80A44                  	call	GETLET3 		; upper case it
  7136 00000D6B E85CF7                  	call	Get_User_Stack		; get user stack
  7137                                  	;mov	[si+6],al
  7138 00000D6E 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7139 00000D71 EBC7                    	JMP	SHORT nono		; done
  7140                                  chkyes: 				;
  7141 00000D73 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7142 00000D75 7522                    	JNZ	short capstring		; no
  7143                                  
  7144 00000D77 31C0                    	XOR	AX,AX			; presume NO
  7145                                  		      
  7146                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7147                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7148                                  
  7149                                  	; 06/08/2018 - Retro DOS v3.0
  7150                                  	; 13/05/2019 - Retro DOS v4.0
  7151                                  	;cmp	dl,'Y'
  7152 00000D79 2E3A16[690A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7153 00000D7E 7416                    	JZ	short yesyes		; yes
  7154                                  	;cmp	dl,'y'
  7155 00000D80 2E3A16[6B0A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7156 00000D85 740F                    	JZ	short yesyes		; yes
  7157                                  	;cmp	dl,'N'
  7158 00000D87 2E3A16[6A0A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7159 00000D8C 74AC                    	JZ	short nono		; no
  7160                                  	;cmp	dl,'n'
  7161 00000D8E 2E3A16[6C0A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7162 00000D93 74A5                    	JZ	short nono		; no
  7163                                  ;dbcs_char:				;
  7164 00000D95 40                      	INC	AX			; not YES or NO
  7165                                  yesyes: 				;
  7166 00000D96 40                      	INC	AX			; return 1
  7167                                  	; 15/12/2022
  7168                                  ;nono:	
  7169 00000D97 EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7170                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7171                                  	;jmp	SYS_RET_OK		; done
  7172                                  
  7173                                  capstring:				;
  7174 00000D99 89D6                    	MOV	SI,DX			; si=dx
  7175 00000D9B 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7176 00000D9D 750F                    	JNZ	short capascii		; no
  7177 00000D9F 09C9                    	OR	CX,CX			; check count 0
  7178 00000DA1 7497                    	JZ	short nono		; yes finished
  7179                                  concap: 				;
  7180 00000DA3 AC                      	LODSB				; get char
  7181 00000DA4 E8CE43                  	call	GETLET3 		; upper case it
  7182 00000DA7 8844FF                  	MOV	byte [SI-1],AL		; store back
  7183                                  ;next99: 				;
  7184 00000DAA E2F7                    	LOOP	concap			; continue
  7185 00000DAC EB8C                    	JMP	short nono		; done
  7186                                  capascii:				;
  7187 00000DAE 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7188 00000DB0 7545                    	JNZ	short capinval		; no
  7189                                  concap2:				;
  7190 00000DB2 AC                      	LODSB				; get char
  7191 00000DB3 08C0                    	or	al,al			; end of string ?
  7192 00000DB5 7483                    	JZ	short nono		; yes
  7193 00000DB7 E8BB43                  	call	GETLET3 		; upper case it
  7194 00000DBA 8844FF                  	MOV	[SI-1],AL		; store back
  7195 00000DBD EBF3                    	JMP	short concap2 		; continue
  7196                                  
  7197                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7198                                  
  7199                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7200                                  ; _$GetExtCntry:
  7201                                  
  7202                                  notcap:
  7203 00000DBF 83F905                  	CMP	CX,5			; minimum size is 5
  7204 00000DC2 7279                    	jb	short sizeerror
  7205                                  
  7206                                  GEC_CONT:
  7207                                  ;hkn; SS is DOSDATA
  7208                                  	;context DS
  7209                                  
  7210 00000DC4 16                      	push	ss
  7211                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7212 00000DC5 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7213                                  	
  7214                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7215 00000DC6 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7216                                  
  7217 00000DC9 83FAFF                  	CMP	DX,-1			; active country ?
  7218 00000DCC 7503                    	JNZ	short GETCDPG 		; no
  7219                                  
  7220                                  ;hkn; use DS override to accesss country_cdpg fields
  7221                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7222                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7223 00000DCE 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7224                                  					; get active country id;smr;use DS
  7225                                  GETCDPG:
  7226 00000DD1 83FBFF                  	CMP	BX,-1			; active code page?
  7227 00000DD4 7503                    	JNZ	short CHKAGAIN		; no, check again
  7228                                  
  7229                                  ;hkn; use DS override to accesss country_cdpg fields
  7230                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7231                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7232 00000DD6 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7233                                  					; get active code page id;smr;Use DS
  7234                                  CHKAGAIN:
  7235                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7236 00000DD9 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7237                                  					; same as active country id?;smr;use DS
  7238 00000DDC 7552                    	JNZ	short CHKNLS		; no
  7239                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7240 00000DDE 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7241                                  					; same as active code pg id?;smr;use DS
  7242 00000DE1 754D                    	JNZ	short CHKNLS		; no
  7243                                  CHKTYPE:
  7244                                  	;mov	bx,[si+48h]
  7245 00000DE3 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7246                                  					; bx = sys code page id;smr;use DS
  7247 00000DE6 51                      	PUSH	CX			; save cx
  7248                                  	;mov	cx,[si+4Ah]
  7249 00000DE7 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7250                                  	;mov	si,COUNTRY_CDPG+76
  7251 00000DEA BE[7612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7252                                  NXTENTRY:
  7253 00000DED 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7254 00000DEF 740B                    	JZ	short FOUNDIT
  7255 00000DF1 83C605                  	ADD	SI,5			; next entry
  7256 00000DF4 E2F7                    	LOOP	NXTENTRY
  7257 00000DF6 59                      	POP	CX
  7258                                  capinval:
  7259                                  	;error	error_invalid_function	; info type not found
  7260                                  	;mov	al,1
  7261 00000DF7 B001                    	mov	al,error_invalid_function
  7262                                  ;SYS_RET_ERR_jmp:
  7263                                  	;jmp	SYS_RET_ERR
  7264                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7265                                  SYS_RET_ERR_jmp:
  7266 00000DF9 E991F8                  	jmp	SYS_RET_ERR	
  7267                                  
  7268                                  FOUNDIT:
  7269 00000DFC A4                      	MOVSB				; move info id byte
  7270 00000DFD 59                      	POP	CX			; restore char count
  7271                                  	;cmp	al,1
  7272 00000DFE 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7273 00000E00 7415                    	JZ	short setsize
  7274 00000E02 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7275 00000E05 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7276                                  OK_RETN:
  7277 00000E08 F3A4                    	REP	MOVSB			; copy info
  7278 00000E0A 89C1                    	MOV	CX,AX			; CX = actual length returned
  7279 00000E0C 89D8                    	MOV	AX,BX			; return sys code page in ax
  7280                                  GETDONE:
  7281 00000E0E E8B9F6                  	call	Get_User_Stack		; return actual length to user's CX
  7282                                  	;mov	[si+4],cx 
  7283 00000E11 894C04                  	MOV	[SI+user_env.user_CX],CX
  7284                                  	;jmp	SYS_RET_OK
  7285                                  	; 15/12/2022
  7286                                  	; 25/06/2019
  7287 00000E14 E970F8                  	jmp	SYS_RET_OK_clc
  7288                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7289                                  	; 15/12/2022
  7290                                  ;nono_jmp:
  7291                                  	;jmp	short nono
  7292                                  setsize:
  7293 00000E17 83E903                  	SUB	CX,3			; size after length field
  7294 00000E1A 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7295 00000E1C 7302                    	JAE	short setsize2		; no
  7296 00000E1E 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7297                                  setsize2:
  7298 00000E20 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7299 00000E23 83C702                  	ADD	DI,2			; update index
  7300 00000E26 83C602                  	ADD	SI,2
  7301 00000E29 89C8                    	MOV	AX,CX
  7302 00000E2B 83C003                  	ADD	AX,3			; AX has the actual length
  7303 00000E2E EBD8                    	JMP	short OK_RETN 		; go move it
  7304                                  CHKNLS:
  7305 00000E30 30E4                    	XOR	AH,AH
  7306 00000E32 50                      	PUSH	AX			; save info type
  7307 00000E33 5D                      	POP	BP			; bp = info type
  7308                                  	
  7309                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7310 00000E34 B80014                  	mov     ax,1400h
  7311 00000E37 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7312                                  			; Return: AL = 00h not installed, OK to install
  7313                                  			; 01h not installed, not OK
  7314                                  			; FFh installed
  7315 00000E39 3CFF                    	CMP	AL,0FFH
  7316 00000E3B 7404                    	JZ	short NLSNXT		; in memory
  7317                                  
  7318                                  sizeerror:
  7319                                  	;error	error_invalid_function
  7320                                  	;mov	al,1
  7321 00000E3D B001                    	mov	al,error_invalid_function
  7322                                  	;jmp	SYS_RET_ERR
  7323                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7324                                  sys_ret_err_jmp2:
  7325 00000E3F EBB8                    	jmp	short SYS_RET_ERR_jmp
  7326                                  
  7327                                  NLSNXT: 
  7328                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7329 00000E41 B80214                  	mov     ax,1402h
  7330 00000E44 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7331                                  			; BP = subfunction, BX = code page
  7332                                  			; DX = country code, DS:SI -> internal code page structure
  7333                                  			; ES:DI -> user buffer, CX = size of user buffer
  7334                                  			; Return: AL = status
  7335                                  			; 00h successful
  7336                                  			; else DOS error code
  7337                                  
  7338 00000E46 3C00                    	CMP	AL,0			; success ?
  7339 00000E48 7505                    	JNZ	short NLSERROR
  7340                                  	;mov	ax,[si+48h] ; 13/05/2019 
  7341 00000E4A 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7342                                  			; ax = sys code page id;smr;use ds;
  7343                                  			;BUGBUG;check whether DS is OK after the above calls
  7344 00000E4D EBBF                    	JMP	short GETDONE
  7345                                  seterr:
  7346                                  	; 15/12/2022
  7347                                  NLSERROR:
  7348                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7349                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7350                                  	;jmp	short sys_ret_err_jmp2
  7351                                  	; 15/12/2022
  7352 00000E4F EBA8                    	jmp	short SYS_RET_ERR_jmp
  7353                                  
  7354                                  ;EndProc $GetExtCntry
  7355                                  
  7356                                  ; 13/05/2019 - Retro DOS v4.0
  7357                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7358                                  
  7359                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7360                                  ;----------------------------------------------------------------------------
  7361                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7362                                  ;
  7363                                  ;   System call format:
  7364                                  ;
  7365                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7366                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7367                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7368                                  ;	INT	21
  7369                                  ;
  7370                                  ;	ENTRY	(al) = n
  7371                                  ;		(bx) = code page
  7372                                  ;	EXIT	'C' clear
  7373                                  ;		  global code page is set	(set global code page)
  7374                                  ;		  (BX) = active code page id	(get global code page)
  7375                                  ;		  (DX) = system code page id	(get global code page)
  7376                                  ;		'C' set
  7377                                  ;		  (AX) = error code
  7378                                  
  7379                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7380                                  
  7381                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7382                                  	; DOSCODE:4BC9h
  7383                                  
  7384                                  _$GetSetCdPg:
  7385                                  
  7386                                  ;hkn; SS is DOSDATA
  7387                                  	;context DS
  7388                                  
  7389 00000E51 16                      	push	ss
  7390 00000E52 1F                      	pop	ds
  7391                                  
  7392                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7393 00000E53 BE[2A12]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7394                                  
  7395 00000E56 3C01                    	CMP	AL,1		       ; get global code page
  7396 00000E58 7512                    	JNZ	short setglpg 	       ; set global code page
  7397                                  	
  7398                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7399                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7400 00000E5A 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7401                                  					; get active code page id;smr;use ds
  7402                                  	;mov	dx,[si+48h]
  7403 00000E5D 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7404                                  				  	; get sys code page id;smr;use ds
  7405 00000E60 E867F6                  	call	Get_User_Stack
  7406                                  ;ASSUME DS:NOTHING
  7407                                  	;mov	[si+2],bx
  7408 00000E63 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7409                                  	;mov	[si+6],dx
  7410 00000E66 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7411                                  OK_RETURN:
  7412                                  	; 15/12/2022
  7413                                  	;transfer SYS_RET_OK
  7414 00000E69 E918F8                  	jmp	SYS_RET_OK
  7415                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7416                                  	;jmp	short nono_jmp
  7417                                  
  7418                                  ;hkn; ASSUME DS:DOSGROUP
  7419                                  ;ASSUME	DS:DOSDATA
  7420                                  
  7421                                  setglpg:
  7422 00000E6C 3C02                    	CMP	AL,2
  7423 00000E6E 7531                    	JNZ	short nomem
  7424                                  	
  7425                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7426                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7427 00000E70 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7428                                  	
  7429                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7430 00000E73 B80014                  	mov     ax,1400h
  7431 00000E76 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7432                                  			; Return: AL = 00h not installed, OK to install
  7433                                  			; 01h not installed, not OK
  7434                                  			; FFh installed
  7435 00000E78 3CFF                    	CMP	AL,0FFH
  7436 00000E7A 7525                    	JNZ	short nomem		; not in memory
  7437                                  
  7438                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7439 00000E7C B80114                  	mov     ax,1401h
  7440 00000E7F CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7441                                  			; DS:SI -> internal code page structure
  7442                                  			; BX = new code page, DX = country code???
  7443                                  			; Return: AL = status
  7444                                  			; 00h successful
  7445                                  			; else DOS error code
  7446                                  	;cmp	al,0
  7447 00000E81 08C0                    	or	al,al			; success ?
  7448 00000E83 74E4                    	JZ	short OK_RETURN		; yes
  7449                                  
  7450 00000E85 3C41                    	CMP	AL,65			; set device code page failed
  7451 00000E87 75C6                    	JNZ	short seterr
  7452 00000E89 B84100                  	MOV	AX,65
  7453 00000E8C A3[2403]                	MOV	[EXTERR],AX
  7454                                  	;mov	byte [EXTERR_ACTION],6
  7455                                  	;mov	byte [EXTERR_CLASS],5
  7456                                  	;mov	byte [EXTERR_LOCUS],4
  7457 00000E8F C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7458 00000E94 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7459 00000E99 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7460                                  	;transfer From_GetSet
  7461 00000E9E E9F4F7                  	jmp	From_GetSet
  7462                                  
  7463                                  	; 15/12/2022
  7464                                  ;seterr:
  7465                                  	;;;transfer SYS_RET_ERR
  7466                                  	;;jmp	SYS_RET_ERR
  7467                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7468                                  	;jmp	short NLSERROR
  7469                                  
  7470                                  nomem:
  7471                                  	;error	error_invalid_function ; function not defined
  7472                                  	;mov	al,1
  7473 00000EA1 B001                    	mov	al,error_invalid_function
  7474 00000EA3 EBAA                    	jmp	short seterr
  7475                                  
  7476                                  ;EndProc $GetSetCdPg
  7477                                  
  7478                                  ; 13/05/2019 - Retro DOS v4.0
  7479                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7480                                  
  7481                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7482                                  ;----------------------------------------------------------------------------
  7483                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7484                                  ;
  7485                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7486                                  ;		drive.
  7487                                  ;
  7488                                  ;	This call returns the same info in the same registers (except for the
  7489                                  ;	FAT pointer) as the old FAT pointer calls
  7490                                  ;
  7491                                  ;	ENTRY	DL = Drive number
  7492                                  ;	EXIT	AX = Sectors per allocation unit
  7493                                  ;		   = -1 if bad drive specified
  7494                                  ;		On User Stack
  7495                                  ;		    BX = Number of free allocation units
  7496                                  ;		    DX = Total Number of allocation units on disk
  7497                                  ;		    CX = Sector size
  7498                                  
  7499                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7500                                  
  7501                                  _$GET_DRIVE_FREESPACE:
  7502                                  
  7503                                  ;hkn; SS is DOSDATA
  7504                                  	;context DS
  7505 00000EA5 16                      	push	ss
  7506 00000EA6 1F                      	pop	ds
  7507                                  
  7508 00000EA7 88D0                    	MOV	AL,DL
  7509                                  	;invoke	GetThisDrv		; Get drive
  7510 00000EA9 E80B5D                  	call	GETTHISDRV
  7511                                  SET_AX_RET:
  7512 00000EAC 7218                    	JC	short BADFDRV
  7513                                  	;invoke	DISK_INFO
  7514 00000EAE E8C41E                  	call	DISK_INFO
  7515 00000EB1 87D3                    	XCHG	DX,BX
  7516                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7517                                  	; 06/01/2024
  7518 00000EB3 7211                    	jc	short BADFDRV
  7519 00000EB5 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7520                                  DoSt:
  7521 00000EB7 E810F6                  	call	Get_User_Stack
  7522                                  ;ASSUME	DS:NOTHING
  7523                                  	;mov	[si+6],dx
  7524                                  	;mov	[si+4],cx
  7525                                  	;mov	[si+2],bx
  7526 00000EBA 895406                  	MOV	[SI+user_env.user_DX],DX
  7527 00000EBD 894C04                  	MOV	[SI+user_env.user_CX],CX
  7528 00000EC0 895C02                  	MOV	[SI+user_env.user_BX],BX
  7529                                  	;MOV	[SI+user_env.user_AX],AX
  7530 00000EC3 8904                    	mov     [si],ax
  7531                                  	;return
  7532 00000EC5 C3                      	retn
  7533                                  
  7534                                  BADFDRV:
  7535                                  	; MSDOS 3.3
  7536                                  	;;mov	al,0Fh
  7537                                  	;mov	al,error_invalid_drive	; Assume error
  7538                                  
  7539                                  	; 13/05/2019 - Retro DOS v4.0
  7540                                  
  7541                                  	; MSDOS 6.0 & MSDOS 3.3
  7542                                  	;invoke	FCB_RET_ERR
  7543 00000EC6 E8DAF7                  	call	FCB_RET_ERR
  7544                                  	
  7545 00000EC9 B8FFFF                  	MOV	AX,-1
  7546 00000ECC EBE9                    	JMP	short DoSt
  7547                                  
  7548                                  ;EndProc $GET_DRIVE_FREESPACE
  7549                                  
  7550                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7551                                  ;----------------------------------------------------------------------------
  7552                                  ;**	$Get_DMA - Get Disk Transfer Address
  7553                                  ;
  7554                                  ;	ENTRY	none
  7555                                  ;	EXIT	ES:BX is current transfer address
  7556                                  ;	USES	all
  7557                                  
  7558                                  _$GET_DMA:
  7559 00000ECE 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7560 00000ED3 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7561 00000ED8 E8EFF5                  	call	Get_User_Stack
  7562                                  	;mov	[si+2],bx
  7563                                  	;mov	[si+10h],cx
  7564 00000EDB 895C02                  	MOV	[SI+user_env.user_BX],BX
  7565 00000EDE 894C10                  	MOV	[SI+user_env.user_ES],CX
  7566 00000EE1 C3                      	retn
  7567                                  
  7568                                  ;**	$Set_DMA - Set Disk Transfer Address
  7569                                  ;----------------------------------------------------------------------------
  7570                                  ;	ENTRY	DS:DX is current transfer address
  7571                                  ;	EXIT	none
  7572                                  ;	USES	all
  7573                                  
  7574                                  _$SET_DMA:
  7575 00000EE2 368916[2C03]            	MOV	[SS:DMAADD],DX
  7576 00000EE7 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7577 00000EEC C3                      	retn
  7578                                  
  7579                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7580                                  ;------------------------------------------------------------------------------
  7581                                  
  7582                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7583                                  ;-----------------------------------------------------
  7584                                  ;	ENTRY	none
  7585                                  ;	EXIT	(AL) = drive number
  7586                                  ;	USES	all
  7587                                  
  7588                                  _$GET_DEFAULT_DRIVE:
  7589 00000EED 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7590 00000EF1 C3                      	retn
  7591                                  
  7592                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7593                                  ;-----------------------------------------------------
  7594                                  ;	ENTRY	(DL) = Drive number for new default drive
  7595                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7596                                  
  7597                                  _$SET_DEFAULT_DRIVE:
  7598 00000EF2 88D0                    	MOV	AL,DL
  7599 00000EF4 FEC0                    	INC	AL			; A=1, B=2...
  7600 00000EF6 E8A25C                  	call	GetVisDrv		; see if visible drive
  7601 00000EF9 7204                    	JC	short SETRET		; errors do not set
  7602 00000EFB 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7603                                  
  7604                                  SETRET:
  7605 00000EFF 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7606 00000F03 C3                      	retn
  7607                                  
  7608                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7609                                  ;----------------------------------------------------------------------------
  7610                                  
  7611                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7612                                  ;---------------------------------------------------
  7613                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7614                                  ;	contents of an interrupt vector.
  7615                                  ;
  7616                                  ;	ENTRY	(AL) = interrupt number
  7617                                  ;	EXIT	(ES:BX) = current interrupt vector
  7618                                  
  7619                                  _$GET_INTERRUPT_VECTOR:
  7620 00000F04 E83000                  	CALL	RECSET
  7621 00000F07 26C41F                  	LES	BX,[ES:BX]
  7622 00000F0A E8BDF5                  	call	Get_User_Stack
  7623                                  	;mov	[si+2],bx
  7624                                  	;mov	[si+10h],es
  7625 00000F0D 895C02                  	MOV	[SI+user_env.user_BX],BX
  7626 00000F10 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7627 00000F13 C3                      	retn
  7628                                  
  7629                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7630                                  ;---------------------------------------------------
  7631                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7632                                  ;	contents of an interrupt vector.
  7633                                  ;
  7634                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7635                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7636                                  ;	for explanation.
  7637                                  ;
  7638                                  ;	ENTRY	(AL) = interrupt number
  7639                                  ;		(ds:dx) = desired new vector value
  7640                                  ;	EXIT	none
  7641                                  ;	USES	all
  7642                                  
  7643                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7644                                  ; 13/05/2019 - Retro DOS v4.0
  7645                                  
  7646                                  _$SET_INTERRUPT_VECTOR:
  7647 00000F14 E82000                  	CALL	RECSET
  7648 00000F17 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7649 00000F18 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7650 00000F1B 268C5F02                	MOV	[ES:BX+2],DS
  7651 00000F1F FB                      	STI
  7652                                  					; M004, M068 - Start
  7653                                  	; MSDOS 6.0
  7654 00000F20 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7655                                  					; Q: was the previous call an int 21
  7656                                  					;    exec call
  7657                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7658                                  	;jnz	short siv_1		; Y: go set count
  7659                                  	;retn				; N: return
  7660                                  	; 15/12/2022
  7661 00000F26 740E                    	jz	short siv_2
  7662                                  siv_1:	
  7663 00000F28 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7664 00000F2E 7506                    	jne	short siv_2		 ; N: done 
  7665 00000F30 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos 
  7666                                  					 ; dispatcher to turn A20 Off before 
  7667                                  					 ; returning to user.
  7668                                  siv_2:
  7669                                  	; 07/12/2022
  7670 00000F36 C3                      	retn				; M004, M068 - End
  7671                                  	
  7672                                  RECSET:
  7673 00000F37 31DB                    	XOR	BX,BX
  7674 00000F39 8EC3                    	MOV	ES,BX
  7675 00000F3B 88C3                    	MOV	BL,AL
  7676 00000F3D D1E3                    	SHL	BX,1
  7677 00000F3F D1E3                    	SHL	BX,1
  7678 00000F41 C3                      	retn
  7679                                  
  7680                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7681                                  ;-------------------------------------------------------------------------------------
  7682                                  
  7683                                  ;**	$Char_Oper - Manipulate Switch Character
  7684                                  ;
  7685                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7686                                  ;
  7687                                  ;	ENTRY	AL = function:
  7688                                  ;		    0 - read switch char
  7689                                  ;		    1 - set switch char (char in DL)
  7690                                  ;		    2 - read device availability
  7691                                  ;			Always returns available
  7692                                  ;		    3 - set device availability
  7693                                  ;			No longer supported (NOP)
  7694                                  ;	EXIT	(al) = 0xff iff error
  7695                                  ;		(al) != 0xff if ok
  7696                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7697                                  ;	USES	AL, DL
  7698                                  ;
  7699                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7700                                  ;		The character / is always returned for subfunction 0,
  7701                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7702                                  
  7703                                  ; 13/05/2019 - Retro DOS v4.0
  7704                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7705                                  
  7706                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7707                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7708                                  
  7709                                  _$CHAR_OPER:
  7710                                  	; MSDOS 6.0
  7711 00000F42 08C0                    	or	al,al				; get switch?
  7712 00000F44 B22F                    	mov	dl,'/'				; assume yes
  7713 00000F46 7407                    	jz	short chop_1			; jump if yes
  7714 00000F48 3C02                    	cmp	al,2				; check device availability?
  7715 00000F4A B2FF                    	mov	dl,-1				; assume yes
  7716 00000F4C 7401                    	jz	short chop_1			; jump if yes
  7717 00000F4E C3                      	retn					; otherwise just quit
  7718                                  
  7719                                  ; subfunctions requiring return of value to user come here. DL holds
  7720                                  ; value to return
  7721                                  
  7722                                  chop_1:
  7723 00000F4F E878F5                  	call	Get_User_Stack
  7724 00000F52 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7725 00000F55 C3                      	retn
  7726                                  
  7727                                  	; MSDOS 3.3
  7728                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7729                                  	;push	ss
  7730                                  	;pop	ds
  7731                                  	;cmp	al,1
  7732                                  	;jb	short chop_1
  7733                                  	;jz	short chop_2
  7734                                  	;cmp	al,3
  7735                                  	;jb	short chop_3
  7736                                  	;jz	short chop_5
  7737                                  	;mov	al,0FFh
  7738                                  	;retn
  7739                                  ;chop_1:
  7740                                  	;mov	dl,[chSwitch]
  7741                                  	;jmp	short chop_4
  7742                                  ;chop_2:
  7743                                  	;mov	[chSwitch],dl
  7744                                  	;retn
  7745                                  ;chop_3:
  7746                                  	;mov	dl, FFh
  7747                                  ;chop_4:
  7748                                  	;call	Get_User_Stack
  7749                                  	;mov	[si+6],dx
  7750                                  ;chop_5:
  7751                                  	;retn
  7752                                  
  7753                                  ;**	$GetExtendedError - Return Extended error code
  7754                                  ;----------------------------------------------------------------------------
  7755                                  ;	This function reads up the extended error info from the static
  7756                                  ;	variables where it was stored.
  7757                                  ;
  7758                                  ;	ENTRY	none
  7759                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7760                                  ;		BL = recommended action
  7761                                  ;		BH = class of error
  7762                                  ;		CH = locus of error
  7763                                  ;		ES:DI = may be pointer
  7764                                  ;	USES	ALL
  7765                                  
  7766                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7767                                  
  7768                                  _$GetExtendedError:
  7769 00000F56 16                      	push	ss
  7770 00000F57 1F                      	pop	ds
  7771 00000F58 A1[2403]                	MOV	AX,[EXTERR]
  7772 00000F5B C43E[2803]              	LES	DI,[EXTERRPT]
  7773 00000F5F 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7774 00000F63 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7775 00000F67 E860F5                  	call	Get_User_Stack
  7776                                  	;mov	[si+0Ah],di
  7777 00000F6A 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7778                                  	;mov	[si+10h],es
  7779 00000F6D 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7780                                  	;mov	[si+2],bx
  7781 00000F70 895C02                  	MOV	[SI+user_env.user_BX],BX
  7782                                  	;mov	[si+4],cx
  7783 00000F73 894C04                  	MOV	[SI+user_env.user_CX],CX
  7784                                  jmp_SYS_RET_OK:
  7785                                  	; 15/12/2022
  7786                                  	;jmp	SYS_RET_OK
  7787                                  	; 25/06/2019
  7788 00000F76 E90EF7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7789                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7790                                  ;jmp_SYS_RET_OK:
  7791                                  	;jmp	SYS_RET_OK
  7792                                  
  7793                                  ; --------------------------------------------------------------------------
  7794                                  ; 09/01/2024
  7795                                  %if 0
  7796                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7797                                  	; DOSCODE:4CF3h
  7798                                  ;patch_or_unknown:
  7799                                  ;get_code_page:
  7800                                  	push    si
  7801                                  	mov     si, COUNTRY_CDPG
  7802                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7803                                  	mov     ax, [ss:si+6Ah]
  7804                                  	pop     si
  7805                                  	retn
  7806                                  %endif
  7807                                  ; --------------------------------------------------------------------------
  7808                                  
  7809                                  ; 29/04/2019 - Retro DOS v4.0
  7810                                  
  7811                                  ;BREAK	<ECS_call - Extended Code System support function>
  7812                                  ;---------------------------------------------------------------------------
  7813                                  ; Inputs:
  7814                                  ;	AL = 0	get lead byte table
  7815                                  ;		on return DS:SI has the table location
  7816                                  ;
  7817                                  ;	AL = 1	set / reset interim console flag
  7818                                  ;		DL = flag (00H or 01H)
  7819                                  ;		no return
  7820                                  ;
  7821                                  ;	AL = 2	get interim console flag
  7822                                  ;		on return DL = current flag value
  7823                                  ;
  7824                                  ;	AL = OTHER then error, and returns with:
  7825                                  ;		AX = error_invalid_function
  7826                                  ;
  7827                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7828                                  ;	 SS:SP WILL BE PRESERVED!
  7829                                  ;---------------------------------------------------------------------------
  7830                                  
  7831                                  _$ECS_Call:
  7832 00000F79 08C0                    	or	al,al			; AL = 0 (get table)?
  7833                                  	;jnz	short _okok
  7834                                  	; 15/12/2022
  7835 00000F7B 7403                    	jz	short get_lbt
  7836                                  ;_okok:
  7837 00000F7D E904F7                  	jmp	SYS_RET_OK
  7838                                  get_lbt:
  7839 00000F80 E847F5                  	call	Get_User_Stack		; *
  7840                                  
  7841                                  ;hkn; dbcs_table moved low to dosdata
  7842                                  	;mov	word [si+8],DBCS_TAB+2
  7843 00000F83 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7844                                  
  7845 00000F88 06                      	push	es
  7846                                  	;getdseg <es>			; es = DOSDATA
  7847 00000F89 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7848                                  	;mov	[si+14],es
  7849 00000F8E 8C440E                  	mov	[SI+user_env.user_DS],es
  7850 00000F91 07                      	pop	es
  7851                                  
  7852                                  	; 15/12/2022
  7853 00000F92 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  7854                                  ;_okok:
  7855                                  	; 15/12/2022	
  7856                                  	;;transfer SYS_RET_OK
  7857                                  	;jmp	short jmp_SYS_RET_OK
  7858                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7859                                  	;;jmp	SYS_RET_OK
  7860                                  	;jmp	short jmp_SYS_RET_OK
  7861                                  
  7862                                  ;============================================================================
  7863                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7864                                  ;============================================================================
  7865                                  ; 19/07/2018 - Retro DOS v3.0
  7866                                  ; 15/05/2019 - Retro DOS v4.0
  7867                                  
  7868                                  ; System calls for parsing command lines
  7869                                  ;
  7870                                  ;   $PARSE_FILE_DESCRIPTOR
  7871                                  ;
  7872                                  ;   Modification history:
  7873                                  ;
  7874                                  ;       Created: ARR 30 March 1983
  7875                                  ;               EE PathParse 10 Sept 1983
  7876                                  ;
  7877                                  
  7878                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7879                                  ;---------------------------------------------------------------------------
  7880                                  ; Inputs:
  7881                                  ;       DS:SI Points to a command line
  7882                                  ;       ES:DI Points to an empty FCB
  7883                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7884                                  ;                   = 0 Parse stops if separator encountered
  7885                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7886                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7887                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7888                                  ;                   = 0  "       "      "       - put blanks in FCB
  7889                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7890                                  ;                   = 0  "       "      "        - put blanks in FCB
  7891                                  ; Function:
  7892                                  ;       Parse command line into FCB
  7893                                  ; Returns:
  7894                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7895                                  ;       DS:SI points to first character after filename
  7896                                  ;---------------------------------------------------------------------------
  7897                                  
  7898                                  _$PARSE_FILE_DESCRIPTOR:
  7899 00000F94 E87B40                  	call	MAKEFCB
  7900 00000F97 56                      	PUSH    SI
  7901 00000F98 E82FF5                  	call	Get_User_Stack
  7902                                  	;pop	word [si+8]
  7903 00000F9B 8F4408                  	POP     word [SI+user_env.user_SI]
  7904 00000F9E C3                      	retn
  7905                                  
  7906                                  ;============================================================================
  7907                                  ; MISC.ASM, MSDOS 6.0, 1991
  7908                                  ;============================================================================
  7909                                  ; 19/07/2018 - Retro DOS v3.0
  7910                                  
  7911                                  ; 29/04/2019 - Retro DOS v4.0
  7912                                  
  7913                                  ;ENTRYPOINTSEG	EQU	0CH
  7914                                  ;MAXDIF		EQU	0FFFH
  7915                                  ;SAVEXIT 	EQU	10
  7916                                  ;WRAPOFFSET	EQU	0FEF0h
  7917                                  
  7918                                  ;
  7919                                  ;----------------------------------------------------------------------------
  7920                                  ;
  7921                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7922                                  ;
  7923                                  ;	Return Stuff sort of like old get fat call
  7924                                  ;
  7925                                  ;	ENTRY	none
  7926                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7927                                  ;			GOD help anyone who tries to do ANYTHING except
  7928                                  ;			READ this ONE byte.
  7929                                  ;		DX = Total Number of allocation units on disk
  7930                                  ;		CX = Sector size
  7931                                  ;		AL = Sectors per allocation unit
  7932                                  ;		   = -1 if bad drive specified
  7933                                  ;	USES	all
  7934                                  ;
  7935                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7936                                  ;
  7937                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7938                                  ;
  7939                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7940                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7941                                  ;			GOD help anyone who tries to do ANYTHING except
  7942                                  ;			READ this ONE byte.
  7943                                  ;		DX = Total Number of allocation units on disk
  7944                                  ;		CX = Sector size
  7945                                  ;		AL = Sectors per allocation unit
  7946                                  ;		   = -1 if bad drive specified
  7947                                  ;	USES	all
  7948                                  ;
  7949                                  ;----------------------------------------------------------------------------
  7950                                  ;
  7951                                  
  7952                                  _$SLEAZEFUNC:
  7953                                  	; 15/05/2019 - Retro DOS v4.0
  7954 00000F9F B200                    	MOV	DL,0
  7955                                  _$SLEAZEFUNCDL:
  7956 00000FA1 16                      	push	ss
  7957 00000FA2 1F                      	pop	ds
  7958                                  	
  7959 00000FA3 88D0                    	MOV	AL,DL
  7960 00000FA5 E80F5C                  	call	GETTHISDRV		; Get CDS structure
  7961                                  SET_AL_RET:
  7962                                  	; MSDOS 3.3
  7963                                  	;;mov	al, 0Fh
  7964                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7965                                  	
  7966                                  	; MSDOS 6.0 & MSDOS 3.3
  7967 00000FA8 721E                    	JC	short BADSLDRIVE
  7968                                  
  7969 00000FAA E8C81D                  	call	DISK_INFO
  7970                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  7971 00000FAD 7219                    	jc	short BADSLDRIVE
  7972 00000FAF 8826[9805]              	MOV	[FATBYTE],AH
  7973                                  
  7974                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7975                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7976                                  ; CALL AGAIN
  7977                                  
  7978 00000FB3 BF[9805]                	MOV	DI,FATBYTE
  7979 00000FB6 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7980 00000FB8 E80FF5                  	call	Get_User_Stack
  7981                                  	;mov	[si+4],cx
  7982                                  	;mov	[si+6],bx
  7983                                  	;mov	[si+2],di
  7984 00000FBB 894C04                  	MOV	[SI+user_env.user_CX],CX
  7985 00000FBE 895C06                  	MOV	[SI+user_env.user_DX],BX
  7986 00000FC1 897C02                  	MOV	[SI+user_env.user_BX],DI
  7987                                  	
  7988                                  	;mov	[si+0Eh],ss
  7989 00000FC4 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  7990                                  
  7991 00000FC7 C3                      	retn
  7992                                  
  7993                                  BADSLDRIVE:
  7994 00000FC8 E9D8F6                  	jmp	FCB_RET_ERR
  7995                                  
  7996                                  ;
  7997                                  ;----------------------------------------------------------------------------
  7998                                  ;
  7999                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8000                                  ;
  8001                                  ;	Returns location of DOS status for interrupt routines
  8002                                  ;									   ;
  8003                                  ;	ENTRY	none
  8004                                  ;	EXIT	(es:bx) = flag location
  8005                                  ;	USES	all
  8006                                  ;
  8007                                  ;----------------------------------------------------------------------------
  8008                                  ;
  8009                                  
  8010                                  _$GET_INDOS_FLAG:
  8011 00000FCB E8FCF4                          CALL	Get_User_Stack
  8012                                          ;MOV	WORD [SI+2],INDOS
  8013 00000FCE C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8014                                          ;MOV	[SI+10H],SS
  8015 00000FD3 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8016 00000FD6 C3                      	RETN 
  8017                                  
  8018                                  ;
  8019                                  ;----------------------------------------------------------------------------
  8020                                  ;
  8021                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8022                                  ;
  8023                                  ;	Return a pointer to interesting DOS variables This call is version
  8024                                  ;	dependent and is subject to change without notice in future versions.
  8025                                  ;	Use at risk.
  8026                                  ;
  8027                                  ;	ENTRY	none
  8028                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8029                                  ;	uses	ALL
  8030                                  ;
  8031                                  ;----------------------------------------------------------------------------
  8032                                  ;
  8033                                  
  8034                                  _$GET_IN_VARS:
  8035 00000FD7 E8F0F4                          CALL	Get_User_Stack
  8036                                          ;MOV	WORD [SI+2],SYSINITVAR
  8037                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8038 00000FDA C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8039                                          ;MOV	[SI+10H],SS
  8040 00000FDF 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8041 00000FE2 C3                      	RETN
  8042                                  
  8043                                  ;
  8044                                  ;----------------------------------------------------------------------------
  8045                                  ;
  8046                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8047                                  ;
  8048                                  ;	Return pointer to drive parameter table for default drive
  8049                                  ;
  8050                                  ;	ENTRY	none
  8051                                  ;	EXIT	(ds:bx) = DPB address
  8052                                  ;	USES	all
  8053                                  ;
  8054                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8055                                  ;
  8056                                  ;	Return pointer to a specified drive parameter table
  8057                                  ;
  8058                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8059                                  ;	EXIT	(al) = 0 iff ok
  8060                                  ;		  (ds:bx) = DPB address
  8061                                  ;		(al) = -1 if bad drive
  8062                                  ;	USES	all
  8063                                  ;
  8064                                  ;----------------------------------------------------------------------------
  8065                                  ;
  8066                                  
  8067                                  ; 15/05/2019 - Retro DOS v4.0
  8068                                  
  8069                                  _$GET_DEFAULT_DPB:
  8070 00000FE3 B200                    	MOV	DL,0
  8071                                  _$GET_DPB:
  8072 00000FE5 16                      	push	ss
  8073 00000FE6 1F                      	pop	ds
  8074                                  
  8075 00000FE7 88D0                    	MOV	AL,DL
  8076 00000FE9 E8CB5B                  	call	GETTHISDRV		; Get CDS structure
  8077 00000FEC 7222                    	JC	short ISNODRV 		; no valid drive
  8078 00000FEE C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8079                                  	;;test	word [es:di+43h],8000h
  8080                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8081                                  	;test	byte [es:di+44h],80h
  8082 00000FF2 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8083 00000FF7 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8084 00000FF9 E88C03                  	call	ECritDisk
  8085 00000FFC E8FC47                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8086 00000FFF E8A103                  	call	LCritDisk
  8087 00001002 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8088                                  					;   have.
  8089 00001004 E8C3F4                  	call	Get_User_Stack
  8090                                  	;mov	[si+2],bp
  8091 00001007 896C02                  	MOV	[SI+user_env.user_BX],BP
  8092                                  	;mov	[si+0Eh],es
  8093 0000100A 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8094 0000100D 30C0                    	XOR	AL,AL
  8095 0000100F C3                      	retn
  8096                                  ISNODRV:
  8097 00001010 B0FF                    	MOV	AL,-1
  8098 00001012 C3                      	retn
  8099                                  
  8100                                  ;
  8101                                  ;----------------------------------------------------------------------------
  8102                                  ;
  8103                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8104                                  ;
  8105                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8106                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8107                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8108                                  ;
  8109                                  ;	ENTRY	none
  8110                                  ;	EXIT	none
  8111                                  ;	USES	all
  8112                                  ;
  8113                                  ;----------------------------------------------------------------------------
  8114                                  ;
  8115                                  
  8116                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8117                                  	; DOSCODE:4D94h
  8118                                  _$DISK_RESET:
  8119                                  	; 15/05/2019 - Retro DOS v4.0
  8120 00001013 B0FF                    	mov	al,0FFh	; -1
  8121 00001015 16                      	push	ss
  8122 00001016 1F                      	pop	ds
  8123                                  	; 06/11/2022
  8124                                  	;MOV	AL,-1
  8125 00001017 E86E03                  	call	ECritDisk
  8126                                  	; MSDOS 6.0
  8127                                  	;;or	word [DOS34_FLAG],4
  8128                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8129 0000101A 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8130 0000101F E8474B                  	call	FLUSHBUF
  8131                                  	; MSDOS 6.0
  8132                                  	;and	word [DOS34_FLAG],0FFFBh
  8133                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8134                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8135                                  	; 15/12/2022
  8136 00001022 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8137 00001027 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8138                                  ;
  8139                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate.  This
  8140                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8141                                  ; let's do it.
  8142                                  ;
  8143                                  ; Invalidate 'last-buffer' used
  8144                                  ;
  8145 0000102D BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8146 00001030 891E[2000]              	MOV	[LastBuffer+2],BX
  8147 00001034 891E[1E00]              	MOV	[LastBuffer],BX
  8148                                  
  8149                                  	; MSDOS 3.3 
  8150                                  	; IBMDOS.COM, Offset 1C66h
  8151                                  	;;;;
  8152                                  	;lds	si,[BUFFHEAD]
  8153                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8154                                  				; .buf_flags, AH = 0, reset/clear
  8155                                  ;DRST_1:
  8156                                  	;;mov	[si+4],ax
  8157                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8158                                  	;lds	si,[SI]
  8159                                  	;cmp	si,bx ; -1
  8160                                  	;je	short DRST_2
  8161                                  	;;mov	[si+4],ax
  8162                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8163                                  	;lds	si,[SI]
  8164                                  	;cmp	si,bx
  8165                                  	;jne	short DRST_1
  8166                                  	;;;;
  8167                                  ;DRST_2:
  8168 00001038 E86803                  	call	LCritDisk
  8169 0000103B B8FFFF                  	MOV	AX,-1
  8170                                  	; 07/12/2022
  8171                                  	;mov	ax,0FFFFh
  8172                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8173 0000103E 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8174 0000103F B82011                  	mov     ax,1120h
  8175 00001042 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8176                                  			; DS = DOS CS
  8177                                  			; Return: CF clear (successful)
  8178 00001044 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8179                                  	
  8180 00001045 C3                      	retn
  8181                                  
  8182                                  	; 19/07/2018 - Retro DOS v3.0
  8183                                  
  8184                                  ;
  8185                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8186                                  ;
  8187                                  ;----------------------------------------------------------------------------
  8188                                  ;
  8189                                  ;**	$SetDPB - Create a DPB
  8190                                  ;
  8191                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8192                                  ;
  8193                                  ;	ENTRY	ES:BP Points to DPB
  8194                                  ;		DS:SI Points to BPB
  8195                                  ;	EXIT	DPB setup
  8196                                  ;	USES	ALL but BP, DS, ES
  8197                                  ;
  8198                                  ;----------------------------------------------------------------------------
  8199                                  ;
  8200                                  
  8201                                  ; 10/05/2019 - Retro DOS v4.0
  8202                                  
  8203                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8204                                  
  8205                                  ; MSDOS 6.0
  8206 00001046 0300                    word3:	dw	3			; M008 -- word value for divides
  8207                                  
  8208                                  ; 13/01/2024
  8209                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8210                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8211                                  
  8212                                  ;procedure   $SETDPB,NEAR
  8213                                  
  8214                                  _$SETDPB:
  8215 00001048 89EF                    	MOV	DI,BP
  8216                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8217                                  	; 13/01/2024
  8218 0000104A 47                      	inc	di
  8219 0000104B 47                      	inc	di
  8220 0000104C AD                      	LODSW
  8221 0000104D AB                      	STOSW				; dpb_sector_size
  8222                                  	; MSDOS 6.0
  8223                                  	;cmp	byte [si+3],0
  8224 0000104E 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8225 00001052 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8226                                  	;mov	byte [es:di+4],0
  8227 00001054 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8228                                  	; 13/01/2024
  8229 00001059 89C3                    	mov	bx,ax
  8230 0000105B EB70                    	JMP	short setend			     ; NO		;AN000;
  8231                                  
  8232                                  yesfat: ; 10/08/2018
  8233 0000105D 89C2                    	MOV	DX,AX
  8234 0000105F AC                      	LODSB
  8235                                  	;DEC	AL
  8236                                  	; 17/12/2022
  8237 00001060 48                      	dec	ax
  8238 00001061 AA                      	STOSB				; dpb_cluster_mask
  8239                                  	;INC	AL
  8240 00001062 40                      	inc	ax
  8241 00001063 30E4                    	XOR	AH,AH
  8242                                  LOG2LOOP:
  8243 00001065 A801                    	test	AL,1
  8244 00001067 7506                    	JNZ	short SAVLOG
  8245 00001069 FEC4                    	INC	AH
  8246 0000106B D0E8                    	SHR	AL,1
  8247 0000106D EBF6                    	JMP	SHORT LOG2LOOP
  8248                                  SAVLOG:
  8249 0000106F 88E0                    	MOV	AL,AH
  8250 00001071 AA                      	STOSB				; dpb_cluster_shift
  8251 00001072 88C3                    	MOV	BL,AL
  8252 00001074 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8253 00001075 AC                      	LODSB
  8254 00001076 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8255                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8256                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8257 00001077 88C7                    	MOV	BH,AL
  8258 00001079 AD                      	LODSW
  8259 0000107A AB                      	STOSW				; dpb_root_entries Number of directory entries
  8260 0000107B B105                    	MOV	CL,5
  8261 0000107D D3EA                    	SHR	DX,CL			; Directory entries per sector
  8262 0000107F 48                      	DEC	AX
  8263 00001080 01D0                    	ADD	AX,DX			; Cause Round Up
  8264 00001082 89D1                    	MOV	CX,DX
  8265 00001084 31D2                    	XOR	DX,DX
  8266 00001086 F7F1                    	DIV	CX
  8267 00001088 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8268 0000108A 47                      	INC	DI
  8269 0000108B 47                      	INC	DI			; Skip dpb_first_sector
  8270 0000108C A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8271 0000108D AC                      	LODSB
  8272                                  	;mov	[es:bp+17h],al
  8273 0000108E 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8274 00001092 AD                      	LODSW				; Number of sectors in a FAT
  8275                                  	
  8276                                  	;;;
  8277                                  	;MSDOS 3.3
  8278                                  	;
  8279                                  	;STOSB		; DPB.FAT_SIZE
  8280                                  	;MUL	BH
  8281                                  	
  8282                                  	;MSDOS 6.0
  8283                                  	;
  8284 00001093 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8285 00001094 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8286 00001096 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8287 00001098 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8288                                  	;;;
  8289                                  	
  8290                                  	;add	ax,[es:bp+6]
  8291 0000109A 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8292 0000109E AB                      	STOSW				; dpb_dir_sector
  8293 0000109F 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8294                                  	;mov	[es:bp+0Bh],ax
  8295 000010A1 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8296                                  	
  8297                                  	; MSDOS 6.0
  8298 000010A5 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8299                                  	;;cmp	word [es:bp+0Dh],0
  8300                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8301                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8302                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8303                                  	; 15/12/2022
  8304                                  	; 28/07/2019
  8305 000010A7 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8306 000010AB 09DB                    	or	bx,bx
  8307 000010AD 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8308                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8309                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8310                                  	
  8311                                  
  8312 000010AF 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8313                                  	;mov	bx,[si+8]
  8314 000010B1 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8315                                  	;mov	dx,[si+10]
  8316 000010B4 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8317 000010B7 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8318 000010B9 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8319 000010BC 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8320 000010BE 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8321                                  rott:					;AN000;;F.C. >32mb
  8322 000010C0 F8                      	CLC				;AN000;;F.C. >32mb
  8323 000010C1 D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8324 000010C3 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8325 000010C5 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8326                                  norot:					;AN000;
  8327                                  	; 15/12/2022
  8328                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8329 000010C7 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8330                                  normal_dpb:
  8331                                  	;;sub	ax,[es:bp+0Dh]
  8332                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8333                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8334                                  	; 15/12/2022
  8335                                  	; bx = [es:bp+DSKSIZ]
  8336                                  	;sub	ax,bx ; 28/07/2019
  8337                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8338                                  	; 15/12/2022
  8339 000010C9 29C3                    	sub	bx,ax
  8340                                  	;NEG	AX			; Sectors in data area
  8341                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8342                                  	; 15/12/2022
  8343                                  	; CL = cluster shift
  8344                                  	; BX = number of data sectors 
  8345                                  	;SHR	AX,CL			; Div by sectors/cluster
  8346 000010CB D3EB                    	shr	bx,cl 
  8347                                  setend:
  8348                                  ;	M008 - CAS
  8349                                  ;
  8350                                  	; 15/12/2022
  8351 000010CD 43                      	inc	bx
  8352                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8353                                  ;
  8354                                  ;	There has been a bug in our fatsize calculation for so long
  8355                                  ;	  that we can't correct it now without causing some user to
  8356                                  ;	  experience data loss. There are even cases where allowing
  8357                                  ;	  the number of clusters to exceed the fats is the optimal
  8358                                  ;	  case -- where adding 2 more fat sectors would make the
  8359                                  ;	  data field smaller so that there's nothing to use the extra
  8360                                  ;	  fat sectors for.
  8361                                  ;
  8362                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8363                                  ;	  still report that there was a cluster left when the disk was
  8364                                  ;	  actually full. Very graceful failure for a corrupt system
  8365                                  ;	  configuration. There may be worse cases that were never
  8366                                  ;	  properly traced back to this bug. The problem cases only
  8367                                  ;	  occurred when partition sizes were very near FAT sector
  8368                                  ;	  rounding boundaries, which were rare cases.
  8369                                  ;
  8370                                  ;	Also, it's possible that some third-party partition program might
  8371                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8372                                  ;	  scheme. In this hypothetical case, the number of allocation
  8373                                  ;	  clusters which don't actually have FAT entries to represent
  8374                                  ;	  them might be larger and might create a more catastrophic
  8375                                  ;	  failure. So we'll provide the safeguard of limiting the
  8376                                  ;	  max_cluster to the amount that will fit in the FATs.
  8377                                  ;
  8378                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8379                                  
  8380                                  ;	make sure the number of fat sectors is actually enough to
  8381                                  ;	  hold that many clusters. otherwise, back the number of
  8382                                  ;	  clusters down
  8383                                  
  8384                                  	; 15/12/2022
  8385                                  	; bx = number of clusters
  8386                                  
  8387                                  	; 19/07/2018 - Retro DOS v3.0
  8388                                  	; MSDOS 6.0
  8389                                  	; 15/12/2022
  8390                                  	;mov	bx,ax			; remember calculated # clusters
  8391                                  
  8392                                  	; 01/08/2018 (MSDOS 3.3)
  8393                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8394                                  	;xor	ah,ah 
  8395                                  
  8396                                  	; 10/05/2019 - Retro DOS v4.0
  8397                                  	;mov	ax,[ES:BP+0Fh]
  8398 000010CE 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8399                                  
  8400                                  	;mul	word [es:bp+2]	
  8401 000010D2 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8402 000010D6 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8403 000010DA 720D                    	jb	short setend_fat12
  8404 000010DC D1EA                    	shr	dx,1
  8405                                  
  8406                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8407                                  	; 15/12/2022
  8408                                  ;cs3 7/2/92
  8409 000010DE 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8410                                  					; than enough for the maximum FAT,
  8411                                  					; so go ahead and use the calculated
  8412                                  					; number of clusters.
  8413                                  ;cs3 7/2/92
  8414                                  
  8415 000010E0 D1D8                    	rcr	ax,1			; find number of entries
  8416 000010E2 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8417                                  ;					;  into 12-bit fatland?
  8418 000010E5 7215                    	jb	short setend_faterr	; then go ahead and let the
  8419                                  ;					;  inconsistency pass through
  8420                                  ;					;  rather than lose data by
  8421                                  ;					;  correcting the fat type
  8422 000010E7 EB0E                    	jmp	short setend_fat16
  8423                                  
  8424                                  setend_fat12:
  8425 000010E9 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8426 000010EB 11D2                    	adc	dx,dx
  8427                                  
  8428                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8429                                  ;cs3 7/2/92
  8430                                  	; 15/12/2022
  8431 000010ED 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8432 000010F0 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8433                                  					; here. Check for it and use
  8434                                  					; the calculated size in this case.
  8435                                  ;cs3 7/2/92
  8436                                  
  8437 000010F2 2EF736[4610]            	div	word [cs:word3]
  8438                                  
  8439                                  setend_fat16:
  8440 000010F7 48                      	dec	ax			; limit at 1
  8441 000010F8 39D8                    	cmp	ax,bx			; is fat big enough?
  8442 000010FA 7602                    	jbe	short setend_fat	; use max value that'll fit
  8443                                  
  8444                                  setend_faterr:
  8445 000010FC 89D8                    	mov	ax,bx			; use calculated value
  8446                                  
  8447                                  setend_fat:
  8448                                  
  8449                                  ;	now ax = maximum legal cluster
  8450                                  
  8451                                  ;	end M008
  8452                                  
  8453                                  	;mov	[es:bp+0Dh], ax
  8454 000010FE 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8455                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8456                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8457 00001102 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8458                                  					; Init so first ALLOC starts at
  8459                                  					; begining of FAT
  8460                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8461                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8462 00001108 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8463                                  
  8464 0000110E C3                      	retn
  8465                                  
  8466                                  ;EndProc $SETDPB
  8467                                  
  8468                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8469                                  
  8470                                  ;
  8471                                  ;----------------------------------------------------------------------------
  8472                                  ;
  8473                                  ;**	$Dup_PDB
  8474                                  ;
  8475                                  ; Inputs:   DX is new segment address of process
  8476                                  ;	    SI is end of new allocation block
  8477                                  ;
  8478                                  ;----------------------------------------------------------------------------
  8479                                  ;
  8480                                  
  8481                                  _$DUP_PDB:
  8482                                  
  8483                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8484                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8485                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8486                                  
  8487                                  	; MSDOS 3.3
  8488                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8489                                  	;MOV	DS,[CS:CurrentPDB]
  8490                                  
  8491                                  	; 15/05/2019 - Retro DOS v4.0
  8492                                  	; MSDOS 6.0
  8493 0000110F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8494 00001114 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8495 00001119 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8496                                  
  8497 0000111D 56                      	PUSH	SI
  8498 0000111E EB0A                    	JMP	SHORT CreateCopy
  8499                                  
  8500                                  ;
  8501                                  ;----------------------------------------------------------------------------
  8502                                  ;
  8503                                  ; Inputs:
  8504                                  ;	DX = Segment number of new base
  8505                                  ; Function:
  8506                                  ;	Set up program base and copy term and ^C from int area
  8507                                  ; Returns:
  8508                                  ;	None
  8509                                  ; Called at DOS init
  8510                                  ;
  8511                                  ;----------------------------------------------------------------------------
  8512                                  ;
  8513                                  
  8514                                  ; 15/05/2019 - Retro DOS v4.0
  8515                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8516                                  
  8517                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8518                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8519                                  
  8520                                  _$CREATE_PROCESS_DATA_BLOCK:
  8521                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8522 00001120 E8A7F3                  	CALL	Get_User_Stack
  8523                                  	;mov	ds,[si+14h]
  8524 00001123 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8525                                  	;push	word [2]
  8526 00001126 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8527                                  CreateCopy:
  8528 0000112A 8EC2                    	MOV	ES,DX
  8529                                  
  8530 0000112C 31F6                    	XOR	SI,SI			; copy entire PDB
  8531 0000112E 89F7                    	MOV	DI,SI
  8532 00001130 B98000                  	MOV	CX,128
  8533 00001133 F3A5                    	REP	MOVSW
  8534                                  
  8535                                  ; DOS 3.3 7/9/86
  8536                                  	;mov	cx,20
  8537                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8538                                  	; 15/12/2022
  8539 00001135 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8540                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8541                                  	;mov	cx,FILPERPROC
  8542                                  
  8543                                  	;mov	di,18h
  8544 00001137 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8545                                  	;;PUSH	DS ; * 15/05/2019
  8546                                  	;;lds	si,[34h]
  8547                                  	;LDS	SI,[PDB.JFN_Pointer]
  8548                                  	;REP	MOVSB
  8549                                  	;;POP	DS ; * 15/05/2019
  8550                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8551                                  	; 05/12/2022
  8552                                  	; (push ds then pop ds is not needed here!)
  8553                                  	;push	ds
  8554                                  	;lds	si,[34h]
  8555 0000113A C5363400                	lds	si,[PDB.JFN_Pointer]
  8556 0000113E F3A4                    	rep	movsb
  8557                                  	;pop	ds
  8558                                  
  8559                                  ; DOS 3.3 7/9/86
  8560                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8561                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8562                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8563                                  
  8564 00001140 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8565                                  
  8566                                  	;;test	byte [cs:CreatePDB],0FFh
  8567                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8568                                  	; 17/12/2022
  8569 00001145 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8570                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8571 00001149 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8572                                  
  8573                                  ; Here we set up for a new process...
  8574                                  
  8575                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8576                                  	;POP	DS
  8577                                  
  8578                                  	; MSDOS 6.0
  8579                                  	;;getdseg <ds>			; ds -> dosdata
  8580                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8581                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8582                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8583                                  	; 15/12/2022
  8584                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8585                                  
  8586 0000114B 31DB                    	XOR	BX,BX			; dup all jfns
  8587                                  	;mov	cx,20
  8588                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8589                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8590                                  	; 15/12/2022
  8591 0000114D B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8592                                  
  8593                                  Create_dup_jfn:
  8594 0000114F 06                      	PUSH	ES ;**			; save new PDB
  8595 00001150 E84056                  	call	SFFromHandle		; get sf pointer
  8596 00001153 B0FF                    	MOV	AL,-1			; unassigned JFN
  8597 00001155 7224                    	JC	short CreateStash	; file was not really open
  8598                                  	;;test	word [es:di+5],1000h
  8599                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8600                                  	; 15/05/2019
  8601                                  	;test	byte [es:di+6],10h
  8602 00001157 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8603 0000115C 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8604                                  
  8605                                  ; We do not inherit network file handles.
  8606                                  
  8607                                  	;mov	ah,[es:di+2]
  8608 0000115E 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8609                                  	;and	ah,0F0h
  8610 00001162 80E4F0                  	AND	AH,SHARING_MASK
  8611                                  	;cmp	ah,70h
  8612 00001165 80FC70                  	CMP	AH,SHARING_NET_FCB
  8613 00001168 7411                    	jz	short CreateStash
  8614                                  
  8615                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8616                                  ; duplication operation.
  8617                                  
  8618 0000116A 893E[9E05]              	MOV	[THISSFT],DI
  8619 0000116E 8C06[A005]              	MOV	[THISSFT+2],ES
  8620 00001172 E85519                  	call	DOS_DUP 		; signal duplication
  8621                                  
  8622                                  ; get the old sfn for copy
  8623                                  
  8624 00001175 E8FE55                  	call	pJFNFromHandle		; ES:DI is jfn
  8625 00001178 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8626                                  
  8627                                  ; Take AL (old sfn or -1) and stash it into the new position
  8628                                  
  8629                                  CreateStash:
  8630 0000117B 07                      	POP	ES ;**
  8631                                  	;mov	[es:bx+18h],al
  8632 0000117C 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8633 00001180 43                      	INC	BX			; next jfn...
  8634 00001181 E2CC                    	LOOP	Create_dup_jfn
  8635                                  
  8636 00001183 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8637                                  	; 06/11/2022
  8638                                  	;mov	[es:16h],bx
  8639 00001187 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8640 0000118C 8C06[3003]              	MOV	[CurrentPDB],ES
  8641                                  	;MOV	DS,BX ; 28/07/2019
  8642                                  	; 07/12/2022
  8643                                  	;mov	ds,[cs:DosDSeg]
  8644                                  	; 15/12/2022
  8645                                  	; ds = [cs:DosDSeg]
  8646 00001190 C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8647                                  	;mov	ds,bx
  8648                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8649                                  	; 15/12/2022
  8650                                  	;mov	ds,bx
  8651                                  
  8652                                  ; end of new process create
  8653                                  
  8654                                  Create_PDB_cont:
  8655                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8656                                  
  8657                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8658                                  
  8659                                  	;; 28/07/2019
  8660                                  	;;push	ds
  8661                                  	;;mov	ds,[cs:DosDSeg]
  8662                                  	;mov	byte [CreatePDB],0
  8663                                  	;;pop	ds
  8664                                  
  8665                                  ; 05/12/2022
  8666                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8667                                  ;	; (push-pop ds is nonsense here! 
  8668                                  ;	;  but i am using same code with original MSDOS.SYS
  8669                                  ;	;  for address compatibility.)
  8670                                  ;	push	ds
  8671                                  ;	; ds = [cs:DosDSeg] !
  8672                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8673                                  ;	mov	byte [CreatePDB],0
  8674                                  ;	pop	ds
  8675                                  
  8676 00001195 58                      	POP	AX ;*
  8677                                  
  8678                                  	;entry	SETMEM
  8679                                  
  8680                                  	; 17/12/2022
  8681                                  	; cx = 0
  8682                                  
  8683                                  ;---------------------------------------------------------------------------
  8684                                  ; Inputs:
  8685                                  ;	AX = Size of memory in paragraphs
  8686                                  ;	DX = Segment
  8687                                  ; Function:
  8688                                  ;	Completely prepares a program base at the
  8689                                  ;	specified segment.
  8690                                  ; Called at DOS init
  8691                                  ; Outputs:
  8692                                  ;	DS = DX
  8693                                  ;	ES = DX
  8694                                  ;	[0] has INT int_abort
  8695                                  ;	[2] = First unavailable segment
  8696                                  ;	[5] to [9] form a long call to the entry point
  8697                                  ;	[10] to [13] have exit address (from int_terminate)
  8698                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8699                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8700                                  ; DX,BP unchanged. All other registers destroyed.
  8701                                  ;---------------------------------------------------------------------------
  8702                                  
  8703                                  SETMEM:
  8704                                  	;XOR	CX,CX
  8705                                  	; 17/12/2022
  8706                                  	; cx = 0
  8707 00001196 8ED9                    	MOV	DS,CX
  8708 00001198 8EC2                    	MOV	ES,DX
  8709                                  	;mov	si,88h
  8710 0000119A BE8800                  	MOV	SI,addr_int_terminate
  8711                                  	;mov	di,10 ; 0Ah
  8712 0000119D BF0A00                  	MOV	DI,SAVEXIT
  8713                                  	;MOV	CX,6
  8714                                  	; 15/12/2022
  8715 000011A0 B106                    	mov	cl,6
  8716 000011A2 F3A5                    	REP	MOVSW
  8717 000011A4 26A30200                	MOV	[ES:2],AX
  8718 000011A8 29D0                    	SUB	AX,DX
  8719 000011AA 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8720 000011AD 7603                    	JBE	short HAVDIF
  8721 000011AF B8FF0F                  	MOV	AX,MAXDIF
  8722                                  HAVDIF:
  8723 000011B2 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8724 000011B5 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8725 000011B8 29C3                    	SUB	BX,AX
  8726 000011BA B104                    	MOV	CL,4
  8727 000011BC D3E0                    	SHL	AX,CL
  8728 000011BE 8EDA                    	MOV	DS,DX
  8729                                  
  8730                                  	; (MSDOS 6.0 note)
  8731                                  	;
  8732                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8733                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8734                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8735                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8736                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8737                                  	; making this equvalence valid for this particular case. If however
  8738                                  	; there is less than 64K remaining the address in BX:AX will not 
  8739                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8740                                  	; into the PSP.
  8741                                  	;
  8742                                  	; Therefore for the case where there is less than 64K remaining in 
  8743                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8744                                  	; requirements will not work. Call 5, however will continue to work
  8745                                  	; for all cases.
  8746                                  	;
  8747                                  
  8748                                  	;mov	[6],ax
  8749                                  	;mov	[8],bx
  8750                                  
  8751 000011C0 A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8752 000011C3 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8753                                  
  8754                                  	; 06/05/2019 - Retro DOS v4.0
  8755 000011C7 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8756                                  					;    memory left
  8757 000011CA 740C                    	je	short addr_ok		; Y: the above calculated address is
  8758                                  					;    OK
  8759                                  					; N: 
  8760                                  
  8761 000011CC C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8762 000011D2 C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8763                                  addr_ok:
  8764                                  	;mov	word [0],20CDh
  8765 000011D8 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8766                                  	;mov	byte [5],9Ah
  8767 000011DE C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8768                                  	;mov	word [50h],21CDh
  8769 000011E3 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8770                                  	;mov	byte [52h],0CBh
  8771 000011E9 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8772                                  	;mov	word [34h],18h
  8773 000011EE C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8774                                  	;mov	word [36h],ds
  8775 000011F4 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8776                                  	;mov	word [32h],20
  8777 000011F8 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8778                                  ;
  8779                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8780                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8781                                  ; particular SFT.  We perform this by requiring that the server link together
  8782                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8783                                  ; initialize this pointer.
  8784                                  ;
  8785                                   	;mov	word [38h],-1
  8786 000011FE C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8787                                  	;mov	word [3Ah],-1
  8788 00001204 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8789                                  
  8790                                  	; 06/05/2019
  8791                                  	; Set the real version number in the PSP - 5.00
  8792                                  
  8793                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8794                                  	; 07/12/2022
  8795 0000120A 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8796                                  
  8797 00001211 C3                      	retn
  8798                                  
  8799                                  ; 29/04/2019 - Retro DOS v4.0
  8800                                  
  8801                                  ;BREAK <$GSetMediaID -- get set media ID>
  8802                                  
  8803                                  ;---------------------------------------------------------------------------
  8804                                  ; Inputs:
  8805                                  ;	BL= drive number as defined in IOCTL
  8806                                  ;	AL= 0 get media ID
  8807                                  ;	    1 set media ID
  8808                                  ;	DS:DX= buffer containing information
  8809                                  ;		DW  0  info level (set on input)
  8810                                  ;		DD  ?  serial #
  8811                                  ;		DB  11 dup(?)  volume id
  8812                                  ;		DB   8 dup(?)  file system type
  8813                                  ; Function:
  8814                                  ;	Get or set media ID
  8815                                  ; Returns:
  8816                                  ;	carry clear, DS:DX is filled
  8817                                  ;	carry set, error
  8818                                  ;---------------------------------------------------------------------------
  8819                                  
  8820                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8821                                  _$GSetMediaID:
  8822                                  	; RAWIO - GET_MEDIA_ID
  8823 00001212 B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8824 00001215 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8825 00001217 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8826                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8827                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8828                                  	; 15/12/2022
  8829 00001219 FEC8                    	dec	al
  8830 0000121B 7507                    	jnz	short errorfunc ; al > 1
  8831                                  	; RAWIO - SET_MEDIA_ID
  8832                                  	;mov	cx,0846h	      ;AN001;MS.;
  8833                                  	; 15/12/2022
  8834 0000121D B146                    	mov	cl,46h	; cx = 0846h 
  8835                                  doioctl:			      ;AN000;
  8836 0000121F B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8837                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8838                                  	;call	_$IOCTL
  8839                                  	;retn			      ;AN000;MS.;
  8840                                  	; 15/12/2022
  8841 00001221 E9E210                  	jmp	_$IOCTL
  8842                                  errorfunc:			      ;AN000;
  8843                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  8844                                  	;mov	al,1
  8845 00001224 B001                    	mov	al,error_invalid_function
  8846 00001226 E964F4                  	jmp	SYS_RET_ERR
  8847                                  
  8848                                  ; 16/05/2019 - Retro DOS v4.0
  8849                                  
  8850                                  ;============================================================================
  8851                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8852                                  ;============================================================================
  8853                                  ; 20/07/2018 - Retro DOS v3.0
  8854                                  ; 29/04/2019 - Retro DOS v4.0
  8855                                  
  8856                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8857                                  ;----------------------------------------------------------------------------
  8858                                  ;
  8859                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8860                                  ;	     Strings of different lengths don't match.
  8861                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  8862                                  ;   Outputs: Z if strings same, NZ if different
  8863                                  ;   Registers modified: NONE
  8864                                  ;----------------------------------------------------------------------------
  8865                                  
  8866                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8867                                  StrCmp:
  8868 00001229 56                      	push	si
  8869 0000122A 57                      	push	di
  8870 0000122B 50                      	push	ax
  8871                                  Cmplp:
  8872 0000122C AC                      	LODSB
  8873 0000122D E8203F                  	call	UCase			; convert to upper case
  8874 00001230 E8723F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8875 00001233 88C4                    	MOV	AH,AL
  8876 00001235 268A05                  	MOV	AL,[ES:DI]
  8877 00001238 47                      	INC	DI
  8878 00001239 E8143F                  	call	UCase			; convert to upper case
  8879 0000123C E8663F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8880 0000123F 38C4                    	CMP	AH,AL
  8881 00001241 7504                    	JNZ	short PopRet		; Strings dif
  8882                                  
  8883 00001243 08C0                    	OR	AL,AL
  8884 00001245 75E5                    	JNZ	short Cmplp		; More string
  8885                                  PopRet:
  8886 00001247 58                      	pop	ax
  8887 00001248 5F                      	pop	di
  8888 00001249 5E                      	pop	si
  8889 0000124A C3                      	retn
  8890                                  
  8891                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8892                                  ;----------------------------------------------------------------------------
  8893                                  ;
  8894                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8895                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  8896                                  ;	characters.
  8897                                  ;
  8898                                  ;   Inputs:	DS:SI - pointer to source string
  8899                                  ;		ES:DI - pointer to destination string
  8900                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8901                                  ;		DS:SI point byte after nul byte at end of source string
  8902                                  ;   Registers modified: SI,DI
  8903                                  ;----------------------------------------------------------------------------
  8904                                  
  8905                                  StrCpy:
  8906 0000124B 50                      	push	ax
  8907                                  CPYLoop:
  8908 0000124C AC                      	LODSB
  8909 0000124D E8003F                  	call	UCase			; convert to upper case
  8910 00001250 E8523F                  	call	PATHCHRCMP		; convert / to \ ;
  8911 00001253 AA                      	STOSB
  8912                                  
  8913 00001254 08C0                    	OR	AL,AL
  8914 00001256 75F4                    	JNZ	short CPYLoop
  8915 00001258 58                      	pop	ax
  8916 00001259 C3                      	retn
  8917                                  
  8918                                  ;----------------------------------------------------------------------------
  8919                                  ; Procedure Name : FStrCpy
  8920                                  ;----------------------------------------------------------------------------
  8921                                  
  8922                                  FStrCpy:
  8923 0000125A 50                      	push	ax
  8924                                  FCPYLoop:
  8925 0000125B AC                      	LODSB
  8926 0000125C AA                      	STOSB
  8927 0000125D 08C0                    	OR	AL,AL
  8928 0000125F 75FA                    	JNZ	short FCPYLoop
  8929 00001261 58                      	pop	ax
  8930 00001262 C3                      	retn
  8931                                  
  8932                                  ; 20/07/2018 - Retro DOS v3.0
  8933                                  ;----------------------------------------------------------------------------
  8934                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8935                                  ;----------------------------------------------------------------------------
  8936                                  ;
  8937                                  ;UCase:	
  8938                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8939                                  ;	retn
  8940                                  
  8941                                  ;Break <StrLen - compute length of string ES:DI>
  8942                                  ;----------------------------------------------------------------------------
  8943                                  ;**	StrLen - Compute Length of String
  8944                                  ;
  8945                                  ;	StrLen computes the length of a string, including the trailing 00
  8946                                  ;
  8947                                  ;	ENTRY	(es:di) = address of string
  8948                                  ;	EXIT	(cx) = size of string
  8949                                  ;	USES	cx, flags
  8950                                  ;----------------------------------------------------------------------------
  8951                                  
  8952                                  StrLen:
  8953 00001263 57                      	push	di
  8954 00001264 50                      	push	ax
  8955                                  	;MOV	CX,-1
  8956 00001265 B9FFFF                  	mov	cx,65535
  8957 00001268 30C0                    	XOR	AL,AL
  8958 0000126A F2AE                    	REPNE	SCASB
  8959 0000126C F7D1                    	NOT	CX
  8960 0000126E 58                      	pop	ax
  8961 0000126F 5F                      	pop	di
  8962 00001270 C3                      	retn
  8963                                  
  8964                                  ;----------------------------------------------------------------------------
  8965                                  ;**	DStrLen - Compute Length of String
  8966                                  ;
  8967                                  ;	ENTRY	(ds:si) = address of string
  8968                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8969                                  ;	USES	cx, flags
  8970                                  ;----------------------------------------------------------------------------
  8971                                  
  8972                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8973 00001271 E80300                  	CALL	XCHGP
  8974 00001274 E8ECFF                  	CALL	StrLen
  8975                                  	;CALL	XCHGP
  8976                                  	;retn
  8977                                  	; 18/12/2022
  8978                                  	;jmp	short XCHGP
  8979                                  
  8980                                  ;----------------------------------------------------------------------------
  8981                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8982                                  ;
  8983                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8984                                  ;
  8985                                  ;	ENTRY	none
  8986                                  ;	EXIT	pairs exchanged
  8987                                  ;	USES	SI, DI, DS, ES
  8988                                  ;----------------------------------------------------------------------------
  8989                                  
  8990                                  XCHGP:
  8991 00001277 1E                      	push	ds
  8992 00001278 06                      	push	es
  8993 00001279 1F                      	pop	ds
  8994 0000127A 07                      	pop	es
  8995 0000127B 87F7                    	XCHG	SI,DI
  8996                                  xchgp_retn:
  8997 0000127D C3                      	retn
  8998                                  
  8999                                  ;Break	<Idle - wait for a specified amount of time>
  9000                                  ;----------------------------------------------------------------------------
  9001                                  ;
  9002                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9003                                  ;   	   we spin until RetryLoop is exhausted.
  9004                                  ;
  9005                                  ;   Inputs:	RetryLoop is the number of times we spin
  9006                                  ;   Outputs:	Wait
  9007                                  ;   Registers modified: none
  9008                                  ;----------------------------------------------------------------------------
  9009                                  
  9010                                  Idle:
  9011                                  	;test	byte [SS:FSHARING],0FFh
  9012 0000127E 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9013                                  	;retnz
  9014 00001284 75F7                    	jnz	short xchgp_retn
  9015                                  	;SAVE	<CX>
  9016 00001286 51                      	push	cx
  9017 00001287 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9018 0000128C E308                    	JCXZ	Idle3
  9019                                  Idle1:	
  9020 0000128E 51                      	PUSH	CX
  9021 0000128F 31C9                    	XOR	CX,CX
  9022                                  Idle2:	
  9023 00001291 E2FE                    	LOOP	Idle2
  9024 00001293 59                      	POP	CX
  9025 00001294 E2F8                    	LOOP	Idle1
  9026                                  Idle3:	
  9027                                  	;RESTORE <CX>
  9028 00001296 59                      	pop	cx
  9029 00001297 C3                      	retn
  9030                                  
  9031                                  ;Break	<TableDispatch - dispatch to a table>
  9032                                  ;----------------------------------------------------------------------------
  9033                                  ;
  9034                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9035                                  ;   routine. Preserve all input registers to the routine.
  9036                                  ;
  9037                                  ;   Inputs:	Push	return address
  9038                                  ;		Push	Table address
  9039                                  ;		Push	index (byte)
  9040                                  ;   Outputs:	appropriate routine gets jumped to.
  9041                                  ;		return indicates invalid index
  9042                                  ;   Registers modified: none.
  9043                                  ;----------------------------------------------------------------------------
  9044                                  
  9045                                  struc TFrame	 ; TableFrame
  9046 00000000 ????                    .OldBP:	 resw 1  ; 0
  9047 00000002 ????                    .OldRet: resw 1  ; 2
  9048 00000004 ??                      .Index:	 resb 1  ; 4
  9049 00000005 ??                      .Pad:	 resb 1  ; 5  
  9050 00000006 ????                    .Tab:	 resw 1  ; 6
  9051 00000008 ????                    .NewRet: resw 1  ; 8
  9052                                  endstruc
  9053                                  
  9054                                  TableDispatch:
  9055 00001298 55                      	PUSH	BP
  9056 00001299 89E5                    	MOV	BP,SP
  9057 0000129B 53                      	PUSH	BX			; save BX
  9058                                  	;mov	bx,[bp+6]
  9059 0000129C 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9060 0000129F 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9061                                  	;cmp	[bp+4],bl
  9062 000012A2 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9063 000012A5 7317                    	JAE	short TableError	; yes
  9064                                  	;mov	bl,[bp+4]
  9065 000012A7 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9066 000012AA 30FF                    	XOR	BH,BH			; convert to word
  9067 000012AC D1E3                    	SHL	BX,1			; convert to word pointer
  9068 000012AE 43                      	INC	BX			; point past first length byte
  9069                                  	; 17/08/2018
  9070                                  	;add	bx,[bp+6]
  9071 000012AF 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9072 000012B2 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9073                                  	;mov	[bp+6],bx
  9074 000012B5 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9075 000012B8 5B                      	POP	BX			; restore BX
  9076 000012B9 5D                      	POP	BP			; restore BP
  9077 000012BA 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9078 000012BD C3                      	retn				; do operation
  9079                                  TableError:
  9080 000012BE 5B                      	POP	BX			; restore BX
  9081 000012BF 5D                      	POP	BP			; restore BP
  9082 000012C0 C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9083                                  
  9084                                  ;Break	<TestNet - determine if a CDS is for the network>
  9085                                  ;----------------------------------------------------------------------------
  9086                                  ;
  9087                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9088                                  ;	network CDS. This will handle NULL cds also.
  9089                                  ;
  9090                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9091                                  ;   Outputs:	ES:DI = ThisCDS
  9092                                  ;		carry Set => network
  9093                                  ;		carry Clear => local
  9094                                  ;   Registers modified: none.
  9095                                  ;----------------------------------------------------------------------------
  9096                                  
  9097                                  TestNet:
  9098                                  	;LES	DI,[CS:THISCDS]
  9099                                  
  9100                                  	; 16/05/2019 - Retro DOS v4.0
  9101 000012C3 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9102 000012C8 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9103 000012CD 83FFFF                  	CMP	DI,-1
  9104 000012D0 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9105                                  	;;test	word [es:di+43h],8000h
  9106                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9107                                  	;test	byte [es:di+44h],80h
  9108 000012D2 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9109 000012D7 7501                    	JNZ	short CMCRet		; jump has carry clear
  9110 000012D9 C3                      	retn				; carry is clear
  9111                                  CMCRet: 
  9112 000012DA F5                      	CMC
  9113 000012DB C3                      	retn
  9114                                  
  9115                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9116                                  ;----------------------------------------------------------------------------
  9117                                  ;
  9118                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9119                                  ;	network file.
  9120                                  ;
  9121                                  ;   Inputs:	ES:DI point to SFT
  9122                                  ;   Outputs:	Zero set if not network sft
  9123                                  ;		zero reset otherwise
  9124                                  ;		Carry CLEAR!!!
  9125                                  ;   Registers modified: none.
  9126                                  ;----------------------------------------------------------------------------
  9127                                  
  9128                                  IsSFTNet:
  9129                                  	;;test	word [es:di+5],8000h
  9130                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9131                                  	; 16/05/2019 
  9132                                  	;test	byte [es:di+6],80h
  9133 000012DC 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9134 000012E1 C3                      	retn
  9135                                  
  9136                                  ;Break	<FastInit - Initialize FastTable entries >
  9137                                  ;----------------------------------------------------------------------------
  9138                                  ;   DOS 4.00   2/9/87
  9139                                  ;   FastInit  - initialize the FASTXXX routine entry
  9140                                  ;		  in the FastTable
  9141                                  ;
  9142                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9143                                  ;		DS:SI = address of FASTXXX routine entry
  9144                                  ;		   SI = -1 for query only
  9145                                  ;   Outputs:	Carry flag clear, if success
  9146                                  ;		Carry flag set,   if failure
  9147                                  ;
  9148                                  ;
  9149                                  ;----------------------------------------------------------------------------
  9150                                  
  9151                                  ;Procedure FastInit,NEAR
  9152                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9153                                  
  9154                                  ;	; MSDOS 3.3
  9155                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9156                                  ;FastInit:
  9157                                  ;	mov	di,FastTable ; FastOpenTable
  9158                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9159                                  ;	mov	bx,cs			; get DOS segment
  9160                                  ;	cmp	ax,bx			; first time installed ?	
  9161                                  ;	je	short ok_install	; yes
  9162                                  ;	stc				; set carry
  9163                                  ;	retn				; (cf=1 means) already installed !
  9164                                  ;
  9165                                  ;ok_install:
  9166                                  ;	mov	bx,FastTable ; FastOpenTable
  9167                                  ;	mov	cx,ds
  9168                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9169                                  ;	mov	[cs:bx+4],cx
  9170                                  ;	mov	[cs:bx+2],si
  9171                                  ;	retn
  9172                                  
  9173                                  ; 16/05/2019 - Retro DOS v4.0
  9174                                  
  9175                                  FastInit:
  9176                                  	; MSDOS 6.0
  9177                                  	;hkn; set up es to dosdataseg.
  9178 000012E2 06                      	push	es
  9179                                  	;getdseg <es>			; es -> dosdata
  9180 000012E3 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9181                                  
  9182                                  	;hkn; FastTable is in DOSDATA
  9183 000012E8 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9184 000012EB 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9185 000012EC 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9186 000012EE D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9187 000012F0 D1E3                    	SHL	BX,1			;AN000;FO.
  9188 000012F2 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9189 000012F4 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9190                                  fcheck: 				;AN000;
  9191 000012F8 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9192 000012FA 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9193 000012FC 7407                    	JZ	short ok_install	;AN000;FO.;; yes
  9194 000012FE 09C0                    	OR	AX,AX			;AN000;FO.;
  9195 00001300 7403                    	JZ	short ok_install	;AN000;FO.;
  9196 00001302 F9                      	STC				;AN000;FO.;; already installed !
  9197 00001303 EB17                    	JMP	SHORT FSret		;AN000;FO. set carry
  9198                                  ok_install:				;AN000;
  9199 00001305 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9200 00001308 7412                    	JZ	short FSret		;AN000;FO.; yes
  9201 0000130A 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9202 0000130C 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9203 00001310 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9204                                  
  9205                                  ;hkn; FastFlg moved to DOSDATA
  9206 00001313 BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9207 00001316 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9208                                  	;or	byte [es:di],80h
  9209 00001318 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9210                                  FSret:					;AN000;
  9211 0000131C 07                      	pop	es
  9212 0000131D C3                      	retn				;AN000;FO.
  9213                                  
  9214                                  ;EndProc FastInit
  9215                                  
  9216                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9217                                  ;----------------------------------------------------------------------------
  9218                                  ;   DOS 3.3   6/10/86
  9219                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9220                                  ;
  9221                                  ;   Inputs:	None
  9222                                  ;   Outputs:	AX = -1 and carry flag set
  9223                                  ;
  9224                                  ;   Registers modified: none.
  9225                                  ;----------------------------------------------------------------------------
  9226                                  
  9227                                  FastRet:
  9228                                  	;mov	ax,-1
  9229                                  	;stc
  9230                                  	;retf
  9231 0000131E F9                      	STC
  9232 0000131F 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9233 00001321 CB                      	RETF
  9234                                  
  9235                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9236                                  ;----------------------------------------------------------------------------
  9237                                  ;   DOS 3.3   6/10/86
  9238                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9239                                  ;
  9240                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9241                                  ;   Outputs:	same output as $OPEN
  9242                                  ;
  9243                                  ;----------------------------------------------------------------------------
  9244                                  
  9245                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9246                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9247                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9248                                  
  9249                                  NLS_OPEN:
  9250                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9251                                  ;	MOV	BYTE [CPSWFLAG],0
  9252                                  ;	PUSH	BX		 ; save current state
  9253                                  
  9254 00001322 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9255 00001324 E8DB5C                  	call	_$OPEN
  9256                                  
  9257                                  ;	POP	BX		 ; restore current state
  9258                                  ;	MOV	[CPSWFLAG],BL
  9259 00001327 C3                      	RETN
  9260                                  
  9261                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9262                                  ;----------------------------------------------------------------------------
  9263                                  ;   DOS 3.3   6/10/86
  9264                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9265                                  ;
  9266                                  ;   Inputs:	BP = open mode
  9267                                  ;   Outputs:	same output as $LSEEK
  9268                                  ;
  9269                                  ;----------------------------------------------------------------------------
  9270                                  
  9271                                  ; 16/05/2019 - Retro DOS v4.0
  9272                                  
  9273                                  NLS_LSEEK:
  9274 00001328 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9275 0000132D 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9276 00001332 E81000                  	CALL	Fake_User_Stack
  9277 00001335 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9278 00001337 E87056                  	call	_$LSEEK
  9279 0000133A 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9280 0000133F 368F06[8405]            	POP	word [SS:USER_SP]
  9281 00001344 C3                      	RETN
  9282                                  
  9283                                  ;Break	<Fake_User_Stack - save user stack>
  9284                                  ;----------------------------------------------------------------------------
  9285                                  ;   DOS 3.3   6/10/86
  9286                                  ;   Fake_User_Stack - save user stack pointer
  9287                                  ;
  9288                                  ;----------------------------------------------------------------------------
  9289                                  
  9290                                  Fake_User_Stack:
  9291 00001345 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9292 00001349 36A3[8405]              	MOV	[SS:USER_SP],AX
  9293 0000134D 8CD0                    	MOV	AX,SS
  9294 0000134F 36A3[8605]              	MOV	[SS:USER_SS],AX
  9295 00001353 C3                      	RETN
  9296                                  
  9297                                  ;Break	<GetDevList - get device header list pointer>
  9298                                  ;----------------------------------------------------------------------------
  9299                                  ;   DOS 3.3   7/25/86
  9300                                  ;   GetDevList - get device header list pointer
  9301                                  ;
  9302                                  ;   Output: AX:BX points to the device header list
  9303                                  ;----------------------------------------------------------------------------
  9304                                  
  9305                                  GetDevList:
  9306                                  	; 16/05/2019 - Retro DOS v4.0
  9307 00001354 BE[280D]                	MOV	SI,SysInitTable
  9308 00001357 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9309 0000135C C534                    	LDS	SI,[SI]
  9310                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9311 0000135E 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9312                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9313 00001361 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9314 00001364 C3                      	RETN
  9315                                  
  9316                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9317                                  ;----------------------------------------------------------------------------
  9318                                  ;   DOS 3.3   7/25/86
  9319                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9320                                  ;
  9321                                  ;   Inputs:	BP = function code 0CH
  9322                                  ;   Outputs:	same output as generic $IOCTL
  9323                                  ;
  9324                                  ;----------------------------------------------------------------------------
  9325                                  
  9326                                  NLS_IOCTL:
  9327                                  	; 16/05/2019 - Retro DOS v4.0
  9328 00001365 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9329 0000136A 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9330 0000136F E8D3FF                  	CALL	Fake_User_Stack
  9331 00001372 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9332 00001374 E88F0F                  	call	_$IOCTL
  9333 00001377 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9334 0000137C 368F06[8405]            	POP	word [SS:USER_SP]
  9335 00001381 C3                      	RETN
  9336                                  
  9337                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9338                                  ;----------------------------------------------------------------------------
  9339                                  ;   DOS 3.3   7/25/86
  9340                                  ;   NLS_GETEXT	-
  9341                                  ;
  9342                                  ;   Inputs:	none
  9343                                  ;   Outputs:	AX = extended error
  9344                                  ;
  9345                                  ;----------------------------------------------------------------------------
  9346                                  
  9347                                  NLS_GETEXT:
  9348                                  	; 16/05/2019 - Retro DOS v4.0
  9349 00001382 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9350 00001386 C3                      	RETN
  9351                                  
  9352                                  ; 29/04/2019 - Retro DOS v4.0
  9353                                  
  9354                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9355                                  
  9356                                  ;----------------------------------------------------------------------------
  9357                                  ;   DOS 4.00
  9358                                  ;
  9359                                  ;   Inputs:	DL=0 get extended error message addr
  9360                                  ;		  =1 set extended error message addr
  9361                                  ;		  =2 get parser error message addr
  9362                                  ;		  =3 set parser error message addr
  9363                                  ;		  =4 get critical error message addr
  9364                                  ;		  =5 set critical error message addr
  9365                                  ;		  =6 get file system error message addr
  9366                                  ;		  =7 set file system error message addr
  9367                                  ;		  =8 get address for code reduction
  9368                                  ;		  =9 set address for code reduction
  9369                                  ;   Function:	get/set message address
  9370                                  ;   Outputs:	ES:DI points to addr when get
  9371                                  ;----------------------------------------------------------------------------
  9372                                  
  9373                                  ;Procedure MSG_RETRIEVAL,NEAR
  9374                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9375                                  
  9376                                  MSG_RETRIEVAL:
  9377                                  
  9378                                  ;;	NOTE:  This function lives in command.com resident code now.
  9379                                  ;;	If the int 2F ever gets this far, we'll return registers
  9380                                  ;;	unchanged, which produces the same result as before, if
  9381                                  ;;	command.com wasn't present (and therefore no messages available).
  9382                                  ;;
  9383                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9384                                  ;;	No_Op zeroes AL.
  9385                                  ;;
  9386                                  ;;;hkn; set up ds to point to DOSDATA
  9387                                  ;;	push	ds
  9388                                  ;;	getdseg	<ds>			; ds -> dosdata
  9389                                  ;;
  9390                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9391                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9392                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9393                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9394                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9395                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9396                                  ;;	DEC	AL		    ;AN000;;MS.
  9397                                  ;;toget:				    ;AN000;
  9398                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9399                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9400                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9401                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9402                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9403                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9404                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9405                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9406                                  ;;getget: 				     ;AN000;
  9407                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9408                                  ;;MSGret: 				     ;AN000;
  9409                                  ;;	POP	SI			     ;AN000;;MS.
  9410                                  ;;	POP	AX			     ;AN000;;MS.
  9411                                  ;;
  9412                                  ;;	pop	ds
  9413                                  
  9414                                  ;	return				     ;AN000;;MS. exit
  9415 00001387 C3                      	retn	; 29/04/2019
  9416                                  
  9417                                  ;============================================================================
  9418                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9419                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9420                                  ;============================================================================
  9421                                  ; 20/07/2018 - Retro DOS v3.0
  9422                                  
  9423                                  ;	; MSDOS 3.3
  9424                                  ;	; 08/08/2018 - Retro DOS v3.0
  9425                                  ;ECritMEM:
  9426                                  ;ECritSFT:
  9427                                  ;	;
  9428                                  ;ECritDisk:
  9429                                  ;	retn
  9430                                  ;	;push	ax
  9431                                  ;	
  9432                                  ;	mov	ax,8001h
  9433                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9434                                  ;			; AL = critical section number (00h-0Fh)
  9435                                  ;	pop	ax
  9436                                  ;	retn
  9437                                  ;
  9438                                  ;	; MSDOS 3.3
  9439                                  ;	; 08/08/2018 - Retro DOS v3.0
  9440                                  ;LCritMEM:
  9441                                  ;LCritSFT:
  9442                                  ;	;
  9443                                  ;LCritDisk:
  9444                                  ;	retn
  9445                                  ;	;push	ax
  9446                                  ;	
  9447                                  ;	mov	ax,8101h
  9448                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9449                                  ;			; AL = critical section number (00h-0Fh)
  9450                                  ;	pop	ax
  9451                                  ;	retn
  9452                                  ;
  9453                                  ;ECritDevice:
  9454                                  ;	retn
  9455                                  ;	;push	ax
  9456                                  ;	
  9457                                  ;	mov	ax,8002h
  9458                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9459                                  ;			; AL = critical section number (00h-0Fh)
  9460                                  ;	pop	ax
  9461                                  ;	retn
  9462                                  ;
  9463                                  ;LCritDevice:
  9464                                  ;	retn
  9465                                  ;	;push	ax
  9466                                  ;	
  9467                                  ;	mov	ax,8102h
  9468                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9469                                  ;			; AL = critical section number (00h-0Fh)
  9470                                  ;	pop	ax
  9471                                  ;	retn
  9472                                  
  9473                                  ;============================================================================
  9474                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9475                                  ;============================================================================
  9476                                  ; 12/05/2019 - Retro DOS v4.0
  9477                                  
  9478                                  ; Critical Section Routines
  9479                                  
  9480                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9481                                  
  9482                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9483                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9484                                  
  9485                                  ; ---------------------------------------------------------------------------
  9486                                  ; Each handler must leave everything untouched; including flags!
  9487                                  ;
  9488                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9489                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9490                                  ; ---------------------------------------------------------------------------
  9491                                  
  9492                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9493                                  ; ---------------------------------------------------------------------------
  9494                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9495                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9496                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9497                                  ; ---------------------------------------------------------------------------
  9498                                  
  9499                                  ;%macro POPFF 0
  9500                                  ;	jmp	$+3
  9501                                  ;	iret
  9502                                  ;	push	cs
  9503                                  ;	call	$-2
  9504                                  ;%endmacro
  9505                                  
  9506                                  ; ---------------------------
  9507                                  
  9508                                  ;Procedure  ECritDisk,NEAR
  9509                                  	;public  ECritMEM
  9510                                  	;public  ECritSFT
  9511                                  ECritMEM:
  9512                                  ECritSFT:
  9513                                  ;
  9514                                  ECritDisk:
  9515                                  
  9516                                  ;SR; Check if critical section is to be entered
  9517                                  
  9518 00001388 9C                      	pushf
  9519 00001389 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9520 0000138F 740D                    	jz	short ECritDisk_2
  9521                                  
  9522                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9523                                  ;	;popff  ; * (macro)
  9524                                  ;	jmp	short ECritDisk_1 ; *
  9525                                  ;
  9526                                  ;ECritDisk_iret: ; *
  9527                                  ;	iret ; *
  9528                                  
  9529                                  	; 16/12/2022
  9530                                  	; 13/11/2022
  9531                                  	;jmp	short ECritDisk_1
  9532                                  	; 06/11/2022
  9533                                  ;ECritDisk_iret:
  9534                                  ;	iret	
  9535                                  
  9536                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9537                                  ECritDisk_1:
  9538 00001391 0E                      	push	cs ; *
  9539 00001392 E80800                  	call	ECritDisk_iret ; *		
  9540                                  	
  9541                                  ECritDisk_0:
  9542 00001395 50                      	PUSH    AX
  9543                                  	;MOV	AX,8000h+critDisk
  9544                                  	;INT	int_IBM
  9545 00001396 B80180                  	mov	ax,8001h
  9546 00001399 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9547                                  			; AL = critical section number (00h-0Fh)
  9548 0000139B 58                      	POP     AX
  9549 0000139C C3                      	retn
  9550                                  
  9551                                  	; 16/12/2022
  9552                                  	; 13/11/2022
  9553                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9554                                  LCritDisk_iret: 
  9555 0000139D CF                      	iret
  9556                                  
  9557                                  ECritDisk_2:
  9558                                  	;;popff ; *
  9559                                  	;;retn
  9560                                  ;	jmp	short ECritDisk_3 ; *
  9561                                  ;ECritDisk_iret2: ; *
  9562                                  ;	iret
  9563                                  	
  9564                                  	; 16/12/2022
  9565                                  	; 13/11/2022
  9566                                  	;jmp	short ECritDisk_3
  9567                                  ;ECritDisk_iret2:
  9568                                  	;iret
  9569                                  
  9570                                  ECritDisk_3:
  9571 0000139E 0E                      	push    cs ; *
  9572                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9573                                  	;call	ECritDisk_iret2 ; *
  9574                                  	;retn
  9575                                  	; 16/12/2022
  9576 0000139F E8FBFF                  	call	ECritDisk_iret
  9577 000013A2 C3                      	retn
  9578                                  
  9579                                  ;EndProc ECritDisk
  9580                                  
  9581                                  ; ---------------------------
  9582                                  
  9583                                  ;Procedure   LCritDisk,NEAR
  9584                                  	;public  LCritMEM
  9585                                  	;public  LCritSFT
  9586                                  LCritMEM:
  9587                                  LCritSFT:
  9588                                  ;
  9589                                  LCritDisk:
  9590                                  
  9591                                  ;SR; Check if critical section is to be entered
  9592                                  
  9593 000013A3 9C                      	pushf
  9594 000013A4 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9595 000013AA 740C                    	jz	short LCritDisk_2
  9596                                  	;popff  ; * (macro)
  9597                                  ;	jmp	short LCritDisk_1 ; *
  9598                                  ;
  9599                                  ;LCritDisk_iret: ; *
  9600                                  ;	iret ; *
  9601                                  
  9602                                  	; 16/12/2022
  9603                                  	; 13/11/2022
  9604                                  	;jmp	short LCritDisk_1
  9605                                  ;LCritDisk_iret:
  9606                                  	;iret
  9607                                  
  9608                                  LCritDisk_1:
  9609 000013AC 0E                      	push	cs ; *
  9610 000013AD E8EDFF                  	call	LCritDisk_iret ; *		
  9611                                  	
  9612                                  LCritDisk_0:
  9613 000013B0 50                      	PUSH	AX
  9614                                  	;MOV	AX,8100h+critDisk
  9615                                  	;INT	int_IBM
  9616 000013B1 B80181                  	mov	ax,8101h
  9617 000013B4 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9618                                  			; AL = critical section number (00h-0Fh)
  9619 000013B6 58                      	POP	AX
  9620 000013B7 C3                      	retn
  9621                                  
  9622                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9623                                  ;	iret
  9624                                  
  9625                                  LCritDisk_2:
  9626                                  	;;popff ; *
  9627                                  	;;retn
  9628                                  ;	jmp	short LCritDisk_3 ; *
  9629                                  ;LCritDisk_iret2: ; *
  9630                                  ;	iret
  9631                                  
  9632                                  	; 16/12/2022
  9633                                  	; 13/11/2022
  9634                                  	;jmp	short LCritDisk_3
  9635                                  ;LCritDisk_iret2:
  9636                                  	;iret
  9637                                  
  9638                                  LCritDisk_3:
  9639 000013B8 0E                      	push    cs ; *
  9640                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9641                                  	;call	LCritDisk_iret2 ; *
  9642                                  	;retn
  9643                                  	; 16/12/2022
  9644 000013B9 E8E1FF                  	call	LCritDisk_iret
  9645 000013BC C3                      	retn
  9646                                  
  9647                                  ;EndProc LCritDisk
  9648                                  
  9649                                  ; ---------------------------
  9650                                  
  9651                                  ;Procedure   ECritDevice,NEAR
  9652                                  
  9653                                  ECritDevice:
  9654                                  
  9655                                  ;SR; Check if critical section is to be entered
  9656                                  
  9657 000013BD 9C                      	pushf
  9658 000013BE 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9659 000013C4 740D                    	jz	short ECritDevice_2
  9660                                  	;popff  ; * (macro)
  9661                                  ;	jmp	short ECritDevice_1 ; *
  9662                                  ;
  9663                                  ;ECritDevice_iret: ; *
  9664                                  ;	iret ; *
  9665                                  
  9666                                  	; 16/12/2022	
  9667                                  	; 13/11/2022
  9668                                  	;jmp	short ECritDevice_1
  9669                                  ;ECritDevice_iret:
  9670                                  	;iret
  9671                                  
  9672                                  ECritDevice_1:
  9673 000013C6 0E                      	push	cs ; *
  9674 000013C7 E80800                  	call	ECritDevice_iret ; *		
  9675                                  	
  9676                                  ECritDevice_0:
  9677 000013CA 50                      	PUSH	AX
  9678                                  	;MOV	AX,8000h+critDevice
  9679                                  	;INT	int_IBM
  9680 000013CB B80280                  	mov	ax,8002h
  9681 000013CE CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9682                                  			; AL = critical section number (00h-0Fh)
  9683 000013D0 58                      	POP     AX
  9684 000013D1 C3                      	retn
  9685                                  
  9686                                  	; 16/12/2022
  9687                                  	; 06/12/2022
  9688                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9689                                  LCritDevice_iret: 
  9690 000013D2 CF                      	iret
  9691                                  
  9692                                  ECritDevice_2:
  9693                                  	;;popff ; *
  9694                                  	;;retn
  9695                                  ;	jmp	short ECritDevice_3 ; *
  9696                                  ;ECritDevice_iret2: ; *
  9697                                  ;	iret
  9698                                  
  9699                                  	; 16/12/2022
  9700                                  	; 13/11/2022
  9701                                  	;jmp	short ECritDevice_3
  9702                                  ;ECritDevice_iret2:
  9703                                  	;iret
  9704                                  
  9705                                  ECritDevice_3:
  9706 000013D3 0E                      	push    cs ; *
  9707                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9708                                  	;call	ECritDevice_iret2 ; *
  9709                                  	;retn
  9710                                  	; 16/12/2022
  9711 000013D4 E8FBFF                  	call	ECritDevice_iret
  9712 000013D7 C3                      	retn
  9713                                  
  9714                                  ;EndProc ECritDevice
  9715                                  
  9716                                  ; ---------------------------
  9717                                  
  9718                                  ;Procedure   LCritDevice,NEAR
  9719                                  
  9720                                  LCritDevice:
  9721                                  
  9722                                  ;SR; Check if critical section is to be entered
  9723                                  
  9724 000013D8 9C                      	pushf
  9725 000013D9 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9726 000013DF 740C                    	jz	short LCritDevice_2
  9727                                  	;popff  ; * (macro)
  9728                                  ;	jmp	short LCritDevice_1 ; *
  9729                                  ;
  9730                                  ;LCritDevice_iret: ; *
  9731                                  ;	iret ; *
  9732                                  
  9733                                  	; 16/12/2022
  9734                                  	; 13/11/2022
  9735                                  	;jmp	short LCritDevice_1
  9736                                  ;LCritDevice_iret:
  9737                                  	;iret
  9738                                  
  9739                                  LCritDevice_1:
  9740 000013E1 0E                      	push	cs ; *
  9741 000013E2 E8EDFF                  	call	LCritDevice_iret ; *		
  9742                                  	
  9743                                  LCritDevice_0:
  9744 000013E5 50                      	PUSH	AX
  9745                                  	;MOV	AX,8100h+critDevice
  9746                                  	;INT	int_IBM
  9747 000013E6 B80281                  	mov	ax,8102h
  9748 000013E9 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9749                                  			; AL = critical section number (00h-0Fh)
  9750 000013EB 58                      	POP     AX
  9751 000013EC C3                      	retn
  9752                                  
  9753                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9754                                  ;	iret
  9755                                  
  9756                                  LCritDevice_2:
  9757                                  	;;popff ; *
  9758                                  	;;retn
  9759                                  ;	jmp	short LCritDevice_3 ; *
  9760                                  ;LCritDevice_iret2: ; *
  9761                                  ;	iret
  9762                                  
  9763                                  	; 16/12/2022
  9764                                  	; 13/11/2022
  9765                                  	;jmp	short LCritDevice_3
  9766                                  ;LCritDevice_iret2:
  9767                                  	;iret
  9768                                  
  9769                                  LCritDevice_3:
  9770 000013ED 0E                      	push    cs ; *
  9771                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9772                                  	;call	LCritDevice_iret2 ; *
  9773                                  	;retn
  9774                                  	; 16/12/2022
  9775 000013EE E8E1FF                  	call	LCritDevice_iret
  9776 000013F1 C3                      	retn
  9777                                  
  9778                                  ;EndProc LCritDevice
  9779                                  
  9780                                  ;============================================================================
  9781                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9782                                  ;============================================================================
  9783                                  ; 20/07/2018 - Retro DOS v3.0
  9784                                  
  9785                                  ;============================================================================
  9786                                  ; STDIO.ASM - (MSDOS 2.0)
  9787                                  ;============================================================================
  9788                                  
  9789                                  ;
  9790                                  ; Standard device IO for MSDOS (first 12 function calls)
  9791                                  ;
  9792                                  
  9793                                  ;.xlist
  9794                                  ;.xcref
  9795                                  ;INCLUDE STDSW.ASM
  9796                                  ;INCLUDE DOSSEG.ASM
  9797                                  ;.cref
  9798                                  ;.list
  9799                                  
  9800                                  ;TITLE   STDIO - device IO for MSDOS
  9801                                  ;NAME    STDIO
  9802                                  
  9803                                  ;INCLUDE IO.ASM
  9804                                  
  9805                                  ; ---------------------------------------------------------------------------
  9806                                  ;
  9807                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9808                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9809                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9810                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9811                                  ;			    to restore MSDOS 2.0 device IO source code 
  9812                                  ;
  9813                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9814                                  	
  9815                                  ;============================================================================
  9816                                  ; STDIO.ASM - (MSDOS 2.0)
  9817                                  ;============================================================================
  9818                                  
  9819                                  ;
  9820                                  ; Standard device IO for MSDOS (first 12 function calls)
  9821                                  ;
  9822                                  
  9823                                  ;.xlist
  9824                                  ;.xcref
  9825                                  ;INCLUDE STDSW.ASM
  9826                                  ;INCLUDE DOSSEG.ASM
  9827                                  ;.cref
  9828                                  ;.list
  9829                                  
  9830                                  ;TITLE   STDIO - device IO for MSDOS
  9831                                  ;NAME    STDIO
  9832                                  
  9833                                  ;INCLUDE IO.ASM
  9834                                  
  9835                                  ; ---------------------------------------------------------------------------
  9836                                  ;
  9837                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9838                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9839                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9840                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9841                                  ;			    to restore MSDOS 2.0 device IO source code 
  9842                                  ;
  9843                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9844                                  ;
  9845                                  ;============================================================================
  9846                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9847                                  ;============================================================================
  9848                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9849                                  
  9850                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9851                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9852                                  
  9853                                  ;============================================================================
  9854                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
  9855                                  ;============================================================================
  9856                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
  9857                                  
  9858                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9859                                  
  9860                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9861                                  ;
  9862                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9863                                  ;	NAME	IBMCPMIO
  9864                                  
  9865                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9866                                  ;
  9867                                  ;	$Std_Con_Input_No_Echo
  9868                                  ;	$Std_Con_String_Output
  9869                                  ;	$Std_Con_String_Input
  9870                                  ;	$RawConIO
  9871                                  ;	$RawConInput
  9872                                  ;	RAWOUT
  9873                                  ;	RAWOUT2
  9874                                  ;
  9875                                  
  9876                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9877                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9878                                  ; references to be SS or CS relative which is desired.
  9879                                  
  9880                                  ; ---------------------------------------------------------------------------
  9881                                  
  9882                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9883                                  ;	NAME	CPMIO2
  9884                                  
  9885                                  ;
  9886                                  ;	Microsoft Confidential
  9887                                  ;	Copyright (C) Microsoft Corporation 1991
  9888                                  ;	All Rights Reserved.
  9889                                  ;
  9890                                  
  9891                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9892                                  ;
  9893                                  ;	$Std_Con_Input
  9894                                  ;	$Std_Con_Output
  9895                                  ;	OUTT
  9896                                  ;	TAB
  9897                                  ;	BUFOUT
  9898                                  ;	$Std_Aux_Input
  9899                                  ;	$Std_Aux_Output
  9900                                  ;	$Std_Printer_Output
  9901                                  ;	$Std_Con_Input_Status
  9902                                  ;	$Std_Con_Input_Flush
  9903                                  ;
  9904                                  ;	Revision History:
  9905                                  ;
  9906                                  ;	  AN000	 version 4.00 - Jan. 1988
  9907                                  
  9908                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9909                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9910                                  ; references to be SS or CS relative which is desired.
  9911                                  
  9912                                  ;DOSCODE SEGMENT
  9913                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9914                                  
  9915                                  
  9916                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9917                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9918                                  ;hkn;	not valid. 
  9919                                  
  9920                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
  9921                                  ; 08/11/2022
  9922                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
  9923                                  
  9924                                  ;
  9925                                  ;----------------------------------------------------------------------------
  9926                                  ;
  9927                                  ; Procedure : $Std_Con_Input_No_Echo
  9928                                  ;
  9929                                  ;----------------------------------------------------------------------------
  9930                                  ;
  9931                                  
  9932                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9933                                  
  9934                                  ; Inputs:
  9935                                  ;	None
  9936                                  ; Function:
  9937                                  ;	Input character from console, no echo
  9938                                  ; Returns:
  9939                                  ;	AL = character
  9940                                  
  9941 000013F2 1E                      	push	ds
  9942 000013F3 56                      	push	si
  9943                                  INTEST:
  9944 000013F4 E8793E                  	call	STATCHK
  9945 000013F7 753B                    	jnz	short GET ; 08/09/2018
  9946                                  ;*************************************************************************
  9947                                  ;hkn; SS override
  9948 000013F9 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9949 000013FF 7505                    	jnz	short no_sys_wait
  9950 00001401 B405                    	mov	ah,5			; get input status with system wait
  9951 00001403 E87431                  	call	IOFUNC
  9952                                  no_sys_wait:
  9953                                  ;**************************************************************************
  9954 00001406 B484                    	MOV	AH,84h
  9955 00001408 CD2A                    	INT	int_IBM	 ; int 2Ah
  9956                                  
  9957                                  ;;; 7/15/86  update the date in the idle loop
  9958                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9959                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9960                                  
  9961                                  ;hkn; SS override
  9962 0000140A 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9963 00001410 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9964                                  
  9965 00001412 50                      	PUSH	AX
  9966 00001413 53                      	PUSH	BX			; following is tricky,
  9967 00001414 51                      	PUSH	CX			; it may be called by critical handler
  9968 00001415 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9969                                  					; other's READ or WRITE
  9970 00001416 1E                      	PUSH	DS			; save DS = SFT's segment
  9971                                  
  9972                                  ;hkn; READTIME must use ds = DOSDATA
  9973                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9974                                  
  9975 00001417 16                      	PUSH	SS ; 04/05/2019
  9976 00001418 1F                      	POP	DS
  9977                                  
  9978 00001419 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9979 0000141C E89802                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9980                                  	;invoke	READTIME		; readtime
  9981 0000141F E84EF7                  	call	READTIME
  9982 00001422 B80100                  	MOV	AX,1
  9983 00001425 E88F02                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9984                                  
  9985                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9986                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9987                                  ;	push	bx
  9988                                  ;	mov	bx,DATE_FLAG
  9989                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
  9990                                  ;	cmp	word [cs:bx],5872h
  9991                                  ;	jz	short FETCHI_TAG_chk_ok
  9992                                  ;	call	DOSINIT
  9993                                  ;FETCHI_TAG_chk_ok:
  9994                                  ;	pop	bx
  9995                                  
  9996 00001428 1F                      	POP	DS			; restore DS
  9997 00001429 5A                      	POP	DX
  9998 0000142A 59                      	POP	CX
  9999 0000142B 5B                      	POP	BX
 10000 0000142C 58                      	POP	AX
 10001                                  NoUpdate:
 10002                                  
 10003                                  ;hkn; SS override
 10004 0000142D 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10005                                  
 10006                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10007 00001432 EBC0                    	JMP	short INTEST
 10008                                  GET:
 10009 00001434 30E4                    	XOR	AH,AH
 10010 00001436 E84131                  	call	IOFUNC
 10011 00001439 5E                      	POP	SI
 10012 0000143A 1F                      	POP	DS
 10013                                  ;;; 7/15/86
 10014                                  
 10015                                  ;hkn; SS override
 10016                                  	; MSDOS 6.0
 10017 0000143B 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10018                                  	;
 10019 00001441 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10020 00001443 7506                    	JNZ	short noscan
 10021                                  
 10022                                  ;hkn; SS override
 10023 00001445 36C606[900D]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10024                                  noscan:
 10025 0000144B C3                      	retn
 10026                                  ;
 10027                                  ;----------------------------------------------------------------------------
 10028                                  ;
 10029                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10030                                  ;
 10031                                  ;
 10032                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10033                                  ;	EXIT	none
 10034                                  ;	USES	ALL
 10035                                  ;
 10036                                  ;----------------------------------------------------------------------------
 10037                                  ;
 10038                                  
 10039                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10040                                  
 10041 0000144C 89D6                    	mov	si,dx
 10042                                  STRING_OUT1:	
 10043 0000144E AC                      	lodsb
 10044 0000144F 3C24                    	cmp	al,'$'
 10045 00001451 74F8                    	je	short noscan
 10046                                  NEXT_STR1:
 10047 00001453 E88D02                  	call	OUTT
 10048                                  
 10049 00001456 EBF6                    	jmp	short STRING_OUT1
 10050                                  
 10051                                  ;----------------------------------------------------------------------------
 10052                                  ;
 10053                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10054                                  ;
 10055                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10056                                  ;
 10057                                  ;	ENTRY	(ds:dx) = input buffer
 10058                                  ;	EXIT	none
 10059                                  ;	USES	ALL
 10060                                  ;
 10061                                  ;----------------------------------------------------------------------------
 10062                                  
 10063                                  	; 15/01/2024
 10064                                  
 10065                                  _$STD_CON_STRING_INPUT:		;System call 10
 10066                                  
 10067 00001458 8CD0                    	mov	ax,ss
 10068 0000145A 8EC0                    	mov	es,ax
 10069 0000145C 89D6                    	mov	si,dx
 10070 0000145E 30ED                    	xor	ch,ch
 10071 00001460 AD                      	lodsw
 10072                                  
 10073                                  ;	(AL) = the buffer length
 10074                                  ;	(AH) = the template length
 10075                                  
 10076 00001461 08C0                            or	al,al
 10077 00001463 74E6                            jz	short noscan	;Buffer is 0 length!!?
 10078 00001465 88E3                    	mov	bl,ah		;Init template counter
 10079 00001467 88EF                            mov	bh,ch		;Init template counter
 10080                                  
 10081                                  ;	(BL) = the number of bytes in the template
 10082                                  
 10083 00001469 38D8                            cmp	al,bl
 10084 0000146B 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10085 0000146D 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10086 00001470 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10087                                  
 10088                                  ; The number of chars in the template is >= the number of chars in buffer or
 10089                                  ; there is no CR at the end of the template.  This is an inconsistant state
 10090                                  ; of affairs.  Pretend that the template was empty:
 10091                                  ;
 10092                                  
 10093                                  NOEDIT:	
 10094 00001472 88EB                    	mov	bl,ch		;Reset buffer
 10095                                  EDITON: 
 10096 00001474 88C2                    	mov	dl,al
 10097 00001476 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10098                                  
 10099                                  ;	Top level. We begin to read a line in.
 10100                                  
 10101                                  NEWLIN: 
 10102 00001477 36A0[F901]              	mov	al,[SS:CARPOS]
 10103 0000147B 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10104                                  
 10105 0000147F 56                      	push	si
 10106 00001480 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10107 00001483 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10108 00001488 88EF                    	mov	bh,ch		;No chars from template yet
 10109 0000148A 88EE                    	mov	dh,ch		;No chars to new line yet
 10110 0000148C E863FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10111 0000148F 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10112 00001491 7503                    	jnz	short GOTCH
 10113                                  
 10114                                  ;	This is the main loop of reading in a character and processing it.
 10115                                  ;
 10116                                  ;	(BH) = the index of the next byte in the template
 10117                                  ;	(BL) = the length of the template
 10118                                  ;	(DH) = the number of bytes in the buffer
 10119                                  ;	(DL) = the length of the buffer
 10120                                  
 10121                                  GETCH:
 10122 00001493 E85CFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10123                                  GOTCH:
 10124                                  ;
 10125                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10126                                  ; input queue.
 10127                                  ;
 10128 00001496 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10129 00001498 74F9                    	jz	short GETCH
 10130                                  
 10131                                  ;	If the leading char is the function-key lead byte
 10132                                  
 10133                                  	;cmp	al,[SS:ESCCHAR]
 10134                                  
 10135                                  	; 04/05/2019 - Retro DOS v4.0
 10136                                  
 10137                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10138                                  
 10139 0000149A 2E3A06[6E0A]            	CMP	AL,[cs:ESCCHAR]
 10140 0000149F 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10141                                  
 10142                                  ;	Rubout and ^H are both destructive backspaces.
 10143                                  
 10144 000014A1 3C7F                            cmp	al,c_DEL ; 7FH
 10145                                          ;jz	short BACKSPJ
 10146                                          ; 15/01/2024
 10147 000014A3 7466                    	je	short BACKSP
 10148 000014A5 3C08                    	cmp	al,c_BS  ; 8
 10149                                          ;jz	short BACKSPJ
 10150                                          ; 15/01/2024
 10151 000014A7 7462                    	je	short BACKSP
 10152                                  
 10153                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10154                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10155                                  	;	   	after CMP and a CMP again!
 10156                                  	;		
 10157                                  	;		-It would be better if they use a 'JMP short' to 
 10158                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10159                                  	;		between them. Then, they would be able use a patch
 10160                                  	;		between 5271h and 5279h when if it will be required.
 10161                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10162                                  	;	
 10163                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10164                                  
 10165                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10166                                  	;
 10167                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10168                                  
 10169                                  ;DOSCODE:526D	cmp     al, 8
 10170                                  ;DOSCODE:526F	jz      short BACKSPJ
 10171                                  ;DOSCODE:5271	cmp     al, 17h
 10172                                  ;DOSCODE:5273	nop
 10173                                  ;DOSCODE:5274	nop
 10174                                  ;DOSCODE:5275	cmp     al, 15h
 10175                                  ;DOSCODE:5277	nop
 10176                                  ;DOSCODE:5278	nop
 10177                                  ;DOSCODE:5279	cmp     al, 0Dh
 10178                                  ;DOSCODE:527B	jz      short ENDLIN
 10179                                  ;DOSCODE:527D	cmp     al, 0Ah
 10180                                  ;DOSCODE:527F	jz      short PHYCRLF
 10181                                  	
 10182                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10183                                  	; DOSCODE:525Dh
 10184                                  
 10185                                  ; 16/12/2022
 10186                                  %if 0
 10187                                  	; MSDOS 6.0
 10188                                  ;	^W deletes backward once and then backs up until a letter is before the
 10189                                  ;	cursor
 10190                                  
 10191                                  	CMP     AL,"W"-"@" ; 17h
 10192                                  
 10193                                  ;	The removal of the comment characters before the jump statement will
 10194                                  ;	cause ^W to backup a word.
 10195                                  
 10196                                  ;***	JZ	short WordDel
 10197                                  	NOP
 10198                                  	NOP
 10199                                  
 10200                                  	CMP     AL,"U"-"@" ; 15h
 10201                                  
 10202                                  ;	The removal of the comment characters before the jump statement will
 10203                                  ;	cause ^U to clear a line.
 10204                                  
 10205                                  ;***	JZ	short LineDel
 10206                                  	NOP
 10207                                  	NOP
 10208                                  
 10209                                  %endif
 10210                                  
 10211                                  ;	CR terminates the line.
 10212                                  
 10213 000014A9 3C0D                            cmp	al,c_CR ; 0Dh
 10214 000014AB 7430                            jz	short ENDLIN
 10215                                  
 10216                                  ;	LF goes to a new line and keeps on reading.
 10217                                  
 10218 000014AD 3C0A                            cmp	al,c_LF ; 0Ah
 10219 000014AF 7442                    	jz	short PHYCRLF
 10220                                  
 10221                                  ;	^X (or ESC) deletes the line and starts over
 10222                                  
 10223                                  	; MSDOS 3.3
 10224                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10225                                  	;jz	short KILNEW
 10226                                  
 10227                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10228                                  
 10229                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10230                                  
 10231 000014B1 2E3A06[6D0A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10232 000014B6 7440                    	jz	short KILNEW
 10233                                  	
 10234                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10235                                  	;jz	short KILNEW
 10236                                  
 10237                                  ; Otherwise, we save the input character.
 10238                                  
 10239                                  SAVCH:	
 10240 000014B8 38D6                    	cmp	dh,dl
 10241 000014BA 7317                    	jnb	short BUFFUL		; buffer is full.
 10242 000014BC AA                              stosb
 10243 000014BD FEC6                    	inc	dh                      ; increment count in buffer.
 10244 000014BF E8B502                  	call	BUFOUT			; Print control chars nicely
 10245                                  
 10246 000014C2 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10247 000014C8 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10248 000014CA 38DF                            cmp	bh,bl
 10249 000014CC 73C5                            jnb	short GETCH		; no more characters in template
 10250 000014CE 46                              inc	si                      ; Skip to next char in template
 10251 000014CF FEC7                            inc	bh                      ; remember position in template
 10252 000014D1 EBC0                            jmp	short GETCH
 10253                                  
 10254                                  	; 15/01/2024
 10255                                  ;BACKSPJ: 
 10256                                  	;jmp	short BACKSP
 10257                                  
 10258                                  BUFFUL: 
 10259 000014D3 B007                    	mov	al, 7			; Bell to signal full buffer
 10260 000014D5 E80B02                  	call	OUTT
 10261 000014D8 EBB9                    	jmp	short GETCH
 10262                                  
 10263                                  ESCAPE: 
 10264                                  	;transfer OEMFunctionKey
 10265 000014DA E9BCF5                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10266                                  
 10267                                  ENDLIN:
 10268 000014DD AA                              stosb				; Put the CR in the buffer
 10269 000014DE E80202                  	call	OUTT                    ; Echo it
 10270 000014E1 5F                              pop	di                      ; Get start of user buffer
 10271 000014E2 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10272 000014E5 FEC6                            inc	dh			; DH is length including CR
 10273                                  
 10274                                  COPYNEW:
 10275                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10276                                  	;mov	bp, es
 10277                                  	;mov	bx, ds
 10278                                  	;mov	es, bx
 10279                                  	;mov	ds, bp
 10280                                  	;mov	si, INBUF
 10281                                  	;mov	cl, dh
 10282                                  	;rep	movsb
 10283                                  	;retn
 10284                                  
 10285                                  	; CPMIO.ASM (MSDOS 6.0)
 10286                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10287                                  	;SAVE	<DS,ES>
 10288 000014E7 1E                      	PUSH	DS
 10289 000014E8 06                      	PUSH	ES
 10290                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10291 000014E9 1F                      	POP	DS
 10292 000014EA 07                      	POP	ES
 10293                                  
 10294                                  ;;hkn; INBUF is in DOSDATA
 10295 000014EB BE[FB01]                        MOV     SI,INBUF
 10296 000014EE 88F1                            MOV     CL,DH                   ; set up count
 10297 000014F0 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10298                                  OLDBAK_RETN:
 10299 000014F2 C3                              RETN
 10300                                  
 10301                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10302                                  
 10303                                  PHYCRLF:
 10304 000014F3 E81F01                  	CALL	CRLF
 10305 000014F6 EB9B                            JMP	short GETCH
 10306                                  
 10307                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10308                                  
 10309                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10310                                  
 10311                                  	; Note: Following routines were not used in IBMDOS.COM
 10312                                  	;	-CRTL+W, CRTL+U is not activated-
 10313                                  	;	but they were in the kernel code!?)
 10314                                  
 10315                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10316                                  	; DOSCODE:52B6h
 10317                                  
 10318                                  ;;;;;;;;
 10319                                  
 10320                                  ; 16/12/2022
 10321                                  %if 0
 10322                                  ;
 10323                                  ; Delete the previous line
 10324                                  ;
 10325                                  LineDel:
 10326                                  	OR      DH,DH
 10327                                  	JZ	short GETCH	 ; 06/12/2022
 10328                                  	Call    BackSpace
 10329                                  	JMP	short LineDel
 10330                                  
 10331                                  %endif
 10332                                  
 10333                                  ;
 10334                                  ; delete the previous word.
 10335                                  ;
 10336                                  WordDel:
 10337                                  WordLoop:
 10338                                  ;	Call    BackSpace               ; backspace the one spot
 10339                                  ;	OR      DH,DH
 10340                                  ;	JZ	short GetChj
 10341                                  ;	MOV     AL,[ES:DI-1]
 10342                                  ;	cmp     al,'0'
 10343                                  ;	jb	short GetChj
 10344                                  ;	cmp     al,'9'
 10345                                  ;	jbe	short WordLoop
 10346                                  ;	OR      AL,20h
 10347                                  ;	CMP     AL,'a'
 10348                                  ;	JB	short GetChj
 10349                                  ;	CMP     AL,'z'
 10350                                  ;	JBE	short WordLoop
 10351                                  ;GetChj: 
 10352                                  ;	JMP	GETCH
 10353                                  
 10354                                  ; 16/12/2022
 10355                                  %if 0
 10356                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10357                                  	; (Worddel is not called or jumped from anywhere!)
 10358                                  WordDel:
 10359                                  WordLoop:
 10360                                  	Call    BackSpace               ; backspace the one spot
 10361                                  	OR      DH,DH
 10362                                  	JZ	short GetChj
 10363                                  	MOV     AL,[ES:DI-1]
 10364                                  	cmp     al,'0'
 10365                                  	jb	short GetChj
 10366                                  	cmp     al,'9'
 10367                                  	jbe	short WordLoop
 10368                                  	OR      AL,20h
 10369                                  	CMP     AL,'a'
 10370                                  	JB	short GetChj
 10371                                  	CMP     AL,'z'
 10372                                  	JBE	short WordLoop
 10373                                  GetChj: 
 10374                                  	JMP	GETCH
 10375                                  
 10376                                  %endif
 10377                                  
 10378                                  ;;;;;;;;
 10379                                  
 10380                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10381                                  
 10382                                  ; The user wants to throw away what he's typed in and wants to start over.
 10383                                  ; We print the backslash and then go to the next line and tab to the correct
 10384                                  ; spot to begin the buffered input.
 10385                                  
 10386                                  KILNEW:
 10387 000014F8 B05C                            mov	al,'\'
 10388 000014FA E8E601                          call	OUTT            ;Print the CANCEL indicator
 10389 000014FD 5E                              pop	si		;Remember start of edit buffer
 10390                                  PUTNEW:
 10391 000014FE E81401                  	call	CRLF            ;Go to next line on screen
 10392 00001501 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10393 00001505 E84F02                  	call	TAB             ;Tab over
 10394 00001508 E96CFF                          JMP     NEWLIN		;Start over again
 10395                                  
 10396                                  ;	Destructively back up one character position
 10397                                  
 10398                                  BACKSP:
 10399                                  	; 09/09/2018
 10400 0000150B E80800                  	Call    BackSpace
 10401 0000150E EB83                    	JMP     short GETCH	; 15/01/2024
 10402                                  
 10403                                  	; 15/01/2024
 10404                                  ;User really wants an ESC character in his line
 10405                                  TWOESC:	
 10406 00001510 2EA0[6E0A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10407 00001514 EBA2                    	jmp	short SAVCH
 10408                                  
 10409                                  BackSpace:
 10410 00001516 08F6                    	or	dh,dh
 10411 00001518 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10412 0000151A E85800                  	call	BACKUP          ;Do the backup
 10413 0000151D 268A05                  	mov	al,[es:di]	;Get the deleted char
 10414 00001520 3C20                            cmp	al,20h	; ' '
 10415 00001522 730F                    	jnb	short OLDBAK	;Was a normal char
 10416 00001524 3C09                            cmp	al,c_HT ; 9
 10417 00001526 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10418                                  ;; 9/27/86 fix for ctrl-U backspace
 10419 00001528 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10420 0000152A 7407                    	JZ	short OLDBAK
 10421 0000152C 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10422 0000152E 7403                    	JZ	short OLDBAK
 10423                                  ;; 9/27/86 fix for ctrl-U backspace
 10424 00001530 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10425                                  OLDBAK:
 10426 00001533 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10427 00001539 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10428 0000153B 08FF                    	or	bh,bh
 10429 0000153D 74B3                            jz	short OLDBAK_RETN 
 10430                                  				;Not advanced in template, stay where we are
 10431 0000153F FECF                    	dec	bh		;Go back in template
 10432 00001541 4E                              dec	si
 10433 00001542 C3                      	retn
 10434                                  BAKTAB:
 10435 00001543 57                              push	di
 10436 00001544 4F                              dec	di		;Back up one char
 10437 00001545 FD                              std			;Go backward
 10438 00001546 88F1                            mov	cl,dh		;Number of chars currently in line
 10439 00001548 B020                            mov	al,20h	; ' '
 10440 0000154A 53                              push	bx
 10441 0000154B B307                            mov	bl,7		;Max
 10442 0000154D E30E                            jcxz	FIGTAB		;At start, do nothing
 10443                                  FNDPOS:
 10444 0000154F AE                              scasb			;Look back
 10445 00001550 7609                    	jbe	short CHKCNT
 10446 00001552 26807D0109              	cmp	byte [es:di+1],9
 10447 00001557 7409                    	jz	short HAVTAB	;Found a tab
 10448 00001559 FECB                    	dec	bl		;Back one char if non tab control char
 10449                                  CHKCNT:
 10450 0000155B E2F2                            loop	FNDPOS
 10451                                  FIGTAB:		
 10452 0000155D 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10453                                  HAVTAB:
 10454 00001562 28F3                    	sub	bl,dh
 10455 00001564 00D9                    	add	cl,bl
 10456 00001566 80E107                  	and	cl,7		;CX has correct number to erase
 10457 00001569 FC                      	cld			;Back to normal
 10458 0000156A 5B                      	pop	bx
 10459 0000156B 5F                      	pop	di
 10460 0000156C 74C5                    	jz	short OLDBAK	;Nothing to erase
 10461                                  TABBAK:
 10462 0000156E E80700                  	call	BACKMES
 10463 00001571 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10464 00001573 EBBE                    	jmp	short OLDBAK
 10465                                  
 10466                                  BACKUP:
 10467 00001575 FECE                            dec	dh		;Back up in line
 10468 00001577 4F                              dec	di
 10469                                  BACKMES:
 10470 00001578 B008                            mov	al,c_BS ; 8	;Backspace
 10471 0000157A E86601                          call	OUTT
 10472 0000157D B020                            mov	al,20h ; ' '	;Erase
 10473 0000157F E86101                          call	OUTT
 10474 00001582 B008                            mov	al,c_BS ; 8	;Backspace
 10475 00001584 E95C01                  	jmp	OUTT		;Done
 10476                                  
 10477                                  	; 15/01/2024
 10478                                  ;User really wants an ESC character in his line
 10479                                  ;TWOESC:	
 10480                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10481                                  ;	jmp	SAVCH
 10482                                  
 10483                                  ;Copy the rest of the template
 10484                                  COPYLIN:
 10485 00001587 88D9                            mov	cl,bl		;Total size of template
 10486 00001589 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10487 0000158B EB07                            jmp	short COPYEACH
 10488                                  
 10489                                  COPYSTR:
 10490 0000158D E83400                  	call	FINDOLD         ;Find the char
 10491 00001590 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10492                                  
 10493                                  ;Copy one char from template to line
 10494                                  COPYONE:
 10495 00001592 B101                            mov	cl,1
 10496                                  ;Copy CX chars from template to line
 10497                                  COPYEACH:
 10498 00001594 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10499 0000159A 38D6                    	cmp	dh,dl
 10500 0000159C 740F                            jz	short GETCH2		;At end of line, can't do anything
 10501 0000159E 38DF                            cmp	bh,bl
 10502 000015A0 740B                            jz	short GETCH2		;At end of template, can't do anything
 10503 000015A2 AC                              lodsb
 10504 000015A3 AA                              stosb
 10505 000015A4 E8D001                  	call	BUFOUT
 10506 000015A7 FEC7                            inc	bh			;Ahead in template
 10507 000015A9 FEC6                            inc	dh			;Ahead in line
 10508 000015AB E2E7                            loop	COPYEACH
 10509                                  GETCH2:
 10510 000015AD E9E3FE                          jmp	GETCH
 10511                                  
 10512                                  ;Skip one char in template
 10513                                  SKIPONE:
 10514 000015B0 38DF                    	cmp	bh,bl
 10515 000015B2 74F9                    	jz	short GETCH2		;At end of template
 10516 000015B4 FEC7                    	inc	bh			;Ahead in template
 10517 000015B6 46                      	inc	si
 10518 000015B7 E9D9FE                  	jmp	GETCH
 10519                                  
 10520                                  SKIPSTR:
 10521 000015BA E80700                  	call	FINDOLD                 ;Find out how far to go
 10522 000015BD 01CE                            add	si,cx			;Go there
 10523 000015BF 00CF                            add	bh,cl
 10524 000015C1 E9CFFE                          jmp	GETCH
 10525                                  
 10526                                  ;Get the next user char, and look ahead in template for a match
 10527                                  ;CX indicates how many chars to skip to get there on output
 10528                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10529                                  ;       address is popped off and a jump to GETCH is taken.
 10530                                  ;       Make sure nothing extra on stack when this routine
 10531                                  ;       is called!!! (no PUSHes before calling it).
 10532                                  
 10533                                  FINDOLD:
 10534 000015C4 E82BFE                          call	_$STD_CON_INPUT_NO_ECHO
 10535                                  
 10536                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10537                                  
 10538                                  	;CMP	AL,[SS:ESCCHAR]	
 10539                                  	;JNZ	SHORT FINDSETUP
 10540                                  
 10541                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10542                                  
 10543                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10544                                  
 10545 000015C7 2E3A06[6E0A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10546 000015CC 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10547                                  
 10548 000015CE E821FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10549 000015D1 EB1D                            JMP	SHORT NOTFND		; go try again
 10550                                  FINDSETUP:
 10551 000015D3 88D9                    	mov	cl,bl
 10552 000015D5 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10553 000015D7 7417                    	jz	short NOTFND	;At end of template
 10554 000015D9 49                              dec	cx		;Cannot point past end, limit search
 10555 000015DA 7414                            jz	short NOTFND	;If only one char in template, forget it
 10556 000015DC 06                      	push	es
 10557 000015DD 1E                      	push	ds
 10558 000015DE 07                      	pop	es
 10559 000015DF 57                      	push	di
 10560 000015E0 89F7                    	mov	di,si		;Template to ES:DI
 10561 000015E2 47                      	inc	di
 10562 000015E3 F2AE                    	repne	scasb		;Look
 10563 000015E5 5F                      	pop	di
 10564 000015E6 07                      	pop	es
 10565 000015E7 7507                    	jnz	short NOTFND	;Didn't find the char
 10566 000015E9 F6D1                            not	cl		;Turn how far to go into how far we went
 10567 000015EB 00D9                            add	cl,bl		;Add size of template
 10568 000015ED 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10569                                  FINDOLD_RETN:
 10570 000015EF C3                      	retn
 10571                                  
 10572                                  NOTFND:
 10573 000015F0 5D                              pop	bp              ;Chuck return address
 10574 000015F1 E99FFE                          jmp	GETCH
 10575                                  
 10576                                  REEDIT:
 10577 000015F4 B040                    	mov	al,'@'		;Output re-edit character
 10578 000015F6 E8EA00                  	call	OUTT
 10579 000015F9 5F                      	pop	di
 10580 000015FA 57                      	push	di
 10581 000015FB 06                      	push	es
 10582 000015FC 1E                      	push	ds
 10583 000015FD E8E7FE                  	call	COPYNEW		;Copy current line into template
 10584 00001600 1F                      	pop	ds
 10585 00001601 07                      	pop	es
 10586 00001602 5E                      	pop	si
 10587 00001603 88F3                    	mov	bl,dh		;Size of line is new size template
 10588 00001605 E9F6FE                  	jmp	PUTNEW		;Start over again
 10589                                  
 10590                                  EXITINS:
 10591                                  ENTERINS:
 10592 00001608 36F616[7905]            	not	byte [SS:INSMODE]
 10593 0000160D E983FE                  	jmp	GETCH
 10594                                  
 10595                                  ;Put a real live ^Z in the buffer (embedded)
 10596                                  CTRLZ:
 10597 00001610 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10598 00001612 E9A3FE                          jmp	SAVCH
 10599                                  
 10600                                  ;Output a CRLF
 10601                                  CRLF:
 10602 00001615 B00D                    	mov	al,c_CR ; 0Dh 
 10603 00001617 E8C900                  	call	OUTT
 10604 0000161A B00A                    	mov	al,c_LF ; 0Ah
 10605 0000161C E9C400                  	jmp	OUTT
 10606                                  
 10607                                  ;
 10608                                  ;----------------------------------------------------------------------------
 10609                                  ;
 10610                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10611                                  ;
 10612                                  ;	Input or output raw character from console, no echo
 10613                                  ;
 10614                                  ;	ENTRY	DL = -1 if input
 10615                                  ;		   =  output character if output
 10616                                  ;	EXIT	(AL) = input character if input
 10617                                  ;	USES	all
 10618                                  ;
 10619                                  ;----------------------------------------------------------------------------
 10620                                  ; 20/07/2018 - Retro DOS v3.0
 10621                                  
 10622                                  ; 04/05/2019 - Retro DOS v4.0
 10623                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10624                                  
 10625                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10626                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10627                                  
 10628                                  _$RAW_CON_IO:			; System call 6
 10629 0000161F 88D0                    	MOV	AL,DL
 10630 00001621 3CFF                    	CMP	AL,-1
 10631 00001623 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10632                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10633                                  	;jz	short rci1
 10634                                  	;jmp	short RAWOUT
 10635                                  	; 16/12/202
 10636                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10637                                  	;nop
 10638                                  rci1:
 10639                                  			; Get pointer to register save area
 10640 00001625 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10641 0000162A 31DB                    	XOR	BX,BX
 10642                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10643 0000162C E8D620                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10644                                          ;JC	SHORT RET17
 10645 0000162F 72BE                            jc	short FINDOLD_RETN
 10646 00001631 B401                    	MOV	AH,1
 10647 00001633 E8442F                  	CALL	IOFUNC
 10648 00001636 750B                    	JNZ	SHORT RESFLG
 10649 00001638 E8073C                  	CALL	SPOOLINT
 10650                                  	;OR	BYTE [ES:DI+16H],40H
 10651 0000163B 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10652 00001640 30C0                    	XOR	AL,AL
 10653                                  RET17:
 10654 00001642 C3                      	RETN
 10655                                  
 10656                                  RESFLG:
 10657                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10658 00001643 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10659                                  				; Reset user's zero flag
 10660                                  ;RILP:
 10661                                  rci0:
 10662 00001648 E8F73B                  	CALL	SPOOLINT
 10663                                  ;
 10664                                  ;----------------------------------------------------------------------------
 10665                                  ;
 10666                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10667                                  ;
 10668                                  ;	Input raw character from console, no echo
 10669                                  ;
 10670                                  ;	ENTRY	none
 10671                                  ;	EXIT	(al) = character
 10672                                  ;	USES	all
 10673                                  ;
 10674                                  ;----------------------------------------------------------------------------
 10675                                  ;
 10676                                  
 10677                                  ;rci0:	invoke	SPOOLINT
 10678                                  
 10679                                  	;entry	$RAW_CON_INPUT
 10680                                  
 10681                                  	; 04/05/2019 - Retro DOS v4.0
 10682                                  
 10683                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10684                                  
 10685                                  _$RAW_CON_INPUT:		; System call 7
 10686 0000164B 53                      	push	bx
 10687 0000164C 31DB                    	XOR	BX,BX
 10688                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10689 0000164E E8B420                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10690 00001651 5B                      	pop	bx
 10691 00001652 72EE                    	JC	SHORT RET17
 10692 00001654 B401                    	MOV	AH,1
 10693 00001656 E8212F                  	CALL	IOFUNC
 10694                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10695                                  	;XOR	AH,AH
 10696                                          ;CALL	IOFUNC
 10697                                          ;RETN
 10698 00001659 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10699 0000165B B484                    	MOV	AH,84h
 10700 0000165D CD2A                    	INT	int_IBM  ; int 2Ah
 10701 0000165F EBE7                    	JMP	short rci0
 10702                                  rci5:	
 10703 00001661 30E4                    	XOR	AH,AH
 10704                                  	;CALL	IOFUNC
 10705                                  	;RETN
 10706                                  	; 18/12/2022
 10707 00001663 E9142F                  	jmp	IOFUNC
 10708                                  
 10709                                  ;       Output the character in AL to stdout
 10710                                  ;
 10711                                  	;entry	RAWOUT
 10712                                  RAWOUT:
 10713 00001666 53                      	PUSH    BX
 10714 00001667 BB0100                  	MOV     BX,1
 10715                                  
 10716                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10717 0000166A E89820                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10718 0000166D 721B                    	JC	SHORT RAWRET1
 10719                                  
 10720                                  	;
 10721                                  	; MSDOS 2.11
 10722                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10723                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10724                                          ;PUSH	DS
 10725                                          ;PUSH	SI
 10726                                          ;LDS	SI,[SI+19H]		; output to special?
 10727                                  	;TEST	BYTE [SI+4],ISSPEC
 10728                                  	;POP	SI
 10729                                  	;
 10730                                          
 10731                                  	; MSDOS 3.3 & MSDOS 6.0
 10732                                  	;mov	bx,[si+5]
 10733 0000166F 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10734                                   ;
 10735                                   ; If we are a network handle OR if we are not a local device then go do the
 10736                                   ; output the hard way.
 10737                                   ;	
 10738                                  	;and	bx,8080h
 10739 00001672 81E38080                	AND	BX,sf_isnet+devid_device
 10740                                  	;cmp	bx,80h
 10741 00001676 81FB8000                	CMP	BX,devid_device
 10742 0000167A 7510                    	jnz     short RAWNORM
 10743 0000167C 1E                      	push    ds
 10744                                  	;lds	bx,[si+7]
 10745 0000167D C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10746                                  	;test	byte [bx+4],10h
 10747 00001680 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10748                                  	;
 10749                                  
 10750 00001684 1F                      	POP	DS
 10751 00001685 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10752                                  
 10753 00001687 CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10754                                  
 10755                                  	;JMP	SHORT RAWRET
 10756                                  ;RAWNORM:
 10757                                  ;	CALL    RAWOUT3
 10758                                  RAWRET: 
 10759 00001689 F8                      	CLC
 10760                                  RAWRET1:
 10761 0000168A 5B                      	POP     BX
 10762                                  RAWRET2:
 10763 0000168B C3                      	RETN
 10764                                  RAWNORM:
 10765 0000168C E80700                  	CALL    RAWOUT3
 10766 0000168F EBF8                    	jmp	short RAWRET
 10767                                  
 10768                                  ;	Output the character in AL to handle in BX
 10769                                  ;
 10770                                  ;	entry	RAWOUT2
 10771                                  
 10772                                  RAWOUT2:
 10773                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10774                                  	;JC	SHORT RET18
 10775 00001691 E87120                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10776 00001694 72F5                    	JC	SHORT RAWRET2
 10777                                  RAWOUT3:
 10778 00001696 50                      	PUSH	AX
 10779 00001697 EB0C                    	JMP	SHORT RAWOSTRT
 10780                                  ROLP:
 10781 00001699 E8A63B                  	CALL	SPOOLINT
 10782                                  
 10783                                  	; 01/05/2019 - Retro DOS v4.0
 10784                                  
 10785                                  	; MSDOS 6.0
 10786                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10787                                  	; 17/12/2022
 10788 0000169C 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 10789                                  	;or	word [ss:DOS34_FLAG],200h
 10790                                  				;AN002; set control break
 10791                                  	;invoke DSKSTATCHK
 10792 000016A2 E8193B                  	call	DSKSTATCHK	;AN002; check control break
 10793                                  RAWOSTRT:
 10794 000016A5 B403                    	MOV	AH,3
 10795 000016A7 E8D02E                  	CALL	IOFUNC
 10796 000016AA 74ED                    	JZ	SHORT ROLP
 10797                                  
 10798                                  	; MSDOS 6.0
 10799                                  ;SR;
 10800                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10801                                  ;the user failed. We do not send a char if this happens. We however return
 10802                                  ;to the caller with carry clear because this DOS call does not return any
 10803                                  ;status. 
 10804                                  ;
 10805 000016AC 40                      	inc	ax		;fail on I24 if ax = -1
 10806 000016AD 58                      	POP	AX
 10807 000016AE 7405                    	jz	short nosend	;yes, do not send char
 10808 000016B0 B402                    	MOV	AH,2
 10809 000016B2 E8C52E                  	call	IOFUNC
 10810                                  nosend:
 10811 000016B5 F8                      	CLC			; Clear carry indicating successful
 10812 000016B6 C3                      	retn
 10813                                  
 10814                                  	; MSDOS 3.3 & MSDOS 2.11
 10815                                  	;POP	AX
 10816                                  	;MOV	AH,2
 10817                                          ;CALL	IOFUNC
 10818                                  	;CLC			; Clear carry indicating successful
 10819                                  ;RET18:    
 10820                                  	;RETN
 10821                                  
 10822                                  ;;10/08/2018
 10823                                  ; 20/07/2018 - Retro DOS v3.0
 10824                                  ; ---------------------------------------------------------------------------
 10825                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10826                                  ; ---------------------------------------------------------------------------
 10827                                  
 10828                                  ; This routine is called at DOS init
 10829                                  
 10830                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10831                                  ;;OUTMES:
 10832                                  ;;	;LODS	CS:BYTE PTR [SI]
 10833                                  ;;	CS	LODSB
 10834                                  ;;	CMP     AL,"$" ; 24h
 10835                                  ;;	JZ	SHORT RET18
 10836                                  ;;	CALL	OUTT
 10837                                  ;;	JMP     SHORT OUTMES
 10838                                  
 10839                                  ; ---------------------------------------------------------------------------
 10840                                  
 10841                                  ; 20/07/2018 - Retro DOS v3.0
 10842                                  
 10843                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10844                                  
 10845                                  ;
 10846                                  ;----------------------------------------------------------------------------
 10847                                  ;
 10848                                  ; Inputs:
 10849                                  ;	AX=0 save the DEVCALL request packet
 10850                                  ;	  =1 restore the DEVCALL request packet
 10851                                  ; Function:
 10852                                  ;	save or restore the DEVCALL packet
 10853                                  ; Returns:
 10854                                  ;	none
 10855                                  ;
 10856                                  ;----------------------------------------------------------------------------
 10857                                  ;
 10858                                  
 10859                                  ; 04/05/2019 - Retro DOS v4.0
 10860                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 10861                                  
 10862                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10863                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 10864                                  
 10865                                  ; 12/05/2019
 10866                                  
 10867                                  Save_Restore_Packet:
 10868 000016B7 1E                      	PUSH	DS
 10869 000016B8 06                      	PUSH	ES
 10870 000016B9 56                      	PUSH	SI
 10871 000016BA 57                      	PUSH	DI
 10872                                  
 10873                                  	; 16/12/2022
 10874                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10875                                  	; 09/09/2018
 10876 000016BB BF[6C0D]                	mov	di,FAKE_STACK_2F 
 10877 000016BE BE[5A03]                	mov	si,DEVCALL
 10878                                  	;
 10879 000016C1 83F800                  	CMP	AX,0		; save packet
 10880 000016C4 7402                    	JZ	short save_packet ; 16/12/2022
 10881                                  	;je	short set_seg
 10882                                  
 10883                                  	; MSDOS 6.0
 10884                                  restore_packet:
 10885                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 10886                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 10887                                  	; MSDOS 3.3
 10888                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10889                                  	;mov	di,DEVCALL  ; 09/09/2018
 10890                                  	;
 10891                                  	;JMP	short set_seg
 10892                                  
 10893                                  	; 16/12/2022	
 10894                                  	; 09/09/2018
 10895 000016C6 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10896                                  
 10897                                  ; 16/12/2022
 10898                                  %if 0
 10899                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10900                                  	cmp	ax,0		; save packet
 10901                                  	jz	short save_packet
 10902                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 10903                                  	mov	di,DEVCALL 
 10904                                  	jmp	short set_seg
 10905                                  
 10906                                  	; MSDOS 6.0
 10907                                  save_packet:
 10908                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 10909                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 10910                                  	; 09/09/2018
 10911                                  	; MSDOS 3.3
 10912                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10913                                  	;mov	si,DEVCALL ; 09/09/2018
 10914                                  
 10915                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10916                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10917                                  	mov	si,DEVCALL
 10918                                  %endif
 10919                                  
 10920                                  ; 16/12/2022
 10921                                  save_packet:
 10922                                  ;set_seg:
 10923                                  	; MSDOS 3.3
 10924                                  	;mov	ax,cs
 10925                                  
 10926                                  	; MSDOS 6.0
 10927 000016C8 8CD0                    	MOV	AX,SS		; set DS,ES to DOSDATA	
 10928                                  
 10929 000016CA 8ED8                    	MOV	DS,AX
 10930 000016CC 8EC0                    	MOV	ES,AX
 10931 000016CE B90B00                  	MOV	CX,11		; 11 words to move
 10932 000016D1 F3A5                    	REP	MOVSW
 10933                                  
 10934 000016D3 5F                      	POP	DI
 10935 000016D4 5E                      	POP	SI
 10936 000016D5 07                      	POP	ES
 10937 000016D6 1F                      	POP	DS
 10938 000016D7 C3                      	retn
 10939                                  
 10940                                  ;============================================================================
 10941                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10942                                  ;============================================================================
 10943                                  ; 20/07/2018 - Retro DOS v3.0
 10944                                  ; 01/05/2019 - Retro DOS v4.0
 10945                                  
 10946                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10947                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10948                                  ;hkn;	not valid. 
 10949                                  
 10950                                  ;
 10951                                  ;----------------------------------------------------------------------------
 10952                                  ;
 10953                                  ;**	$STD_CON_INPUT - System Call 1
 10954                                  ;
 10955                                  ;	Input character from console, echo
 10956                                  ;
 10957                                  ;	ENTRY	none
 10958                                  ;	EXIT	(al) = character
 10959                                  ;	USES	ALL
 10960                                  ;
 10961                                  ;----------------------------------------------------------------------------
 10962                                  ;
 10963                                  
 10964                                  _$STD_CON_INPUT:	;System call 1
 10965                                  	
 10966 000016D8 E817FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10967 000016DB 50                      	PUSH	AX
 10968 000016DC E80400                  	CALL	OUTT
 10969 000016DF 58                      	POP	AX
 10970                                  CON_INPUT_RETN:	
 10971 000016E0 C3                      	RETN
 10972                                  
 10973                                  ;
 10974                                  ;----------------------------------------------------------------------------
 10975                                  ;
 10976                                  ;**	$STD_CON_OUTPUT - System Call 2
 10977                                  ;
 10978                                  ;	Output character to console
 10979                                  ;
 10980                                  ;	ENTRY	(dl) = character
 10981                                  ;	EXIT	none
 10982                                  ;	USES	all
 10983                                  ;
 10984                                  ;----------------------------------------------------------------------------
 10985                                  ;
 10986                                  
 10987                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 10988                                  
 10989                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10990                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 10991                                  
 10992                                  _$STD_CON_OUTPUT:	;System call 2
 10993                                  
 10994 000016E1 88D0                    	MOV	AL,DL
 10995                                  OUTT:
 10996 000016E3 3C20                    	CMP	AL,20H ; " "
 10997 000016E5 725C                    	JB	SHORT CTRLOUT
 10998 000016E7 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10999 000016E9 7405                    	JZ	SHORT OUTCH
 11000                                  OUTCHA:	
 11001                                  	;INC	BYTE PTR [CARPOS]
 11002 000016EB 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11003                                  OUTCH:
 11004 000016F0 1E                      	PUSH	DS
 11005 000016F1 56                      	PUSH	SI
 11006                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11007                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11008 000016F2 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11009                                  	;AND	BYTE [SS:CHARCO],00111111B
 11010                                  	; 01/05/2019 - Retro DOS v4.0
 11011 000016F7 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11012 000016FD 7505                    	JNZ	SHORT OUTSKIP
 11013                                  
 11014 000016FF 50                      	PUSH	AX
 11015 00001700 E86D3B                  	CALL	STATCHK
 11016 00001703 58                      	POP	AX
 11017                                  OUTSKIP:
 11018 00001704 E85FFF                  	CALL	RAWOUT				;output the character
 11019                                  
 11020 00001707 5E                      	POP	SI
 11021 00001708 1F                      	POP	DS
 11022                                  
 11023                                  	;TEST	BYTE PTR [PFLAG],-1
 11024                                  	;retz
 11025 00001709 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11026 0000170F 74CF                    	JZ	SHORT CON_INPUT_RETN
 11027                                  
 11028 00001711 53                      	PUSH	BX
 11029 00001712 1E                      	PUSH	DS
 11030 00001713 56                      	PUSH	SI
 11031 00001714 BB0100                  	MOV	BX,1
 11032                                  	; 20/07/2018 - Retro DOS v3.0
 11033                                  	; MSDOS 3.3
 11034                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11035 00001717 E8EB1F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11036                                  					;hkn; to sft entry
 11037 0000171A 7224                    	JC	SHORT TRIPOPJ
 11038                                  
 11039                                  	; 01/05/2019 - Retro DOS v4.0
 11040                                  
 11041                                  	;mov	bx,[si+5]
 11042 0000171C 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11043                                  	;test	bx,8000h
 11044                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11045 0000171F F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11046 00001722 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11047                                  	;;test	bx,80h
 11048                                  	;TEST	BX,devid_device 		; output to file?
 11049 00001724 F6C380                  	test	bl,devid_device ; 80h
 11050 00001727 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11051                                  	; 14/03/2018
 11052                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11053                                  	;jc	short TRIPOPJ
 11054                                  	; MSDOS 2.11
 11055                                  	;test	byte [SI+18H], 80h
 11056                                  	;jz	short TRIPOPJ
 11057 00001729 BB0400                  	MOV	BX,4
 11058 0000172C E8D61F                  	CALL	GET_IO_SFT
 11059 0000172F 720F                    	JC	SHORT TRIPOPJ
 11060                                  	;;test	word [si+5], 800h
 11061                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11062                                  	;test	byte [si+6],8 ; 08/11/2022
 11063 00001731 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11064                                  						; StdPrn redirected?
 11065                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11066                                  	;jz	LISSTRT2 ; 10/08/2018 
 11067                                  	; 16/12/2022
 11068 00001735 7503                    	jnz	short outch1
 11069 00001737 E98700                  	jmp	LISSTRT2
 11070                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11071                                  	;jz	short LISSTRT2J
 11072                                  outch1:
 11073                                  	;MOV	BYTE [PFLAG],0
 11074 0000173A 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11075                                  	; MSDOS 2.11
 11076                                  	;mov	bx,4
 11077                                  	;jmp	short LISSTRT2
 11078                                  	
 11079                                  TRIPOPJ:
 11080                                  	; 20/07/2018
 11081 00001740 E98100                  	JMP	TRIPOP
 11082                                  
 11083                                  	; 16/12/2022
 11084                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11085                                  ;LISSTRT2J:
 11086                                  ;	JMP	LISSTRT2
 11087                                  
 11088                                  CTRLOUT:
 11089 00001743 3C0D                    	CMP	AL,c_CR ; 0Dh
 11090 00001745 7420                    	JZ	SHORT ZERPOS
 11091 00001747 3C08                    	CMP	AL,c_BS ; 8
 11092 00001749 7424                    	JZ	SHORT BACKPOS
 11093 0000174B 3C09                    	CMP	AL,c_HT ; 9
 11094 0000174D 75A1                    	JNZ	SHORT OUTCH
 11095                                  	;MOV	AL,[CARPOS]
 11096 0000174F 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11097 00001753 0CF8                    	OR	AL,0F8H
 11098 00001755 F6D8                    	NEG	AL
 11099                                  TAB:
 11100 00001757 51                      	PUSH	CX
 11101 00001758 88C1                    	MOV	CL,AL
 11102 0000175A B500                    	MOV	CH,0
 11103 0000175C E307                    	JCXZ	POPTAB
 11104                                  TABLP:
 11105 0000175E B020                    	MOV	AL," "
 11106 00001760 E880FF                  	CALL	OUTT
 11107 00001763 E2F9                    	LOOP	TABLP
 11108                                  POPTAB:
 11109 00001765 59                      	POP	CX
 11110                                  
 11111 00001766 C3                      	RETN
 11112                                  
 11113                                  ZERPOS:
 11114                                  	;MOV	BYTE PTR [CARPOS],0
 11115 00001767 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11116                                  	; 10/08/2018
 11117 0000176D EB81                    	JMP	short OUTCH ; 04/05/2019
 11118                                  	
 11119                                  	; 18/12/2022
 11120                                  ;OUTJ:	
 11121                                  	;JMP	OUTT
 11122                                  
 11123                                  BACKPOS:
 11124                                  	;DEC	BYTE PTR [CARPOS]
 11125 0000176F 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11126 00001774 E979FF                  	JMP	OUTCH
 11127                                  
 11128                                  BUFOUT:
 11129 00001777 3C20                    	CMP	AL," "
 11130 00001779 7315                    	JAE	SHORT OUTJ		;Normal char
 11131 0000177B 3C09                    	CMP	AL,9
 11132 0000177D 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11133                                  	;DOS 3.3  7/14/86
 11134 0000177F 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11135 00001781 740D                    	JZ	short CTRLU
 11136 00001783 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11137 00001785 7409                    	JZ	short CTRLU
 11138                                  NOT_CTRLU:
 11139                                  	;DOS 3.3  7/14/86
 11140 00001787 50                      	PUSH	AX
 11141 00001788 B05E                    	MOV	AL,"^"
 11142 0000178A E856FF                  	CALL	OUTT		;Print '^' before control chars
 11143 0000178D 58                      	POP	AX
 11144 0000178E 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11145                                  CTRLU:
 11146                                  	;CALL	OUTT
 11147                                  	; 18/12/2022
 11148                                  OUTJ:
 11149 00001790 E950FF                  	jmp	OUTT
 11150                                  ;BUFOUT_RETN:
 11151                                  	;RETN
 11152                                  
 11153                                  ;
 11154                                  ;----------------------------------------------------------------------------
 11155                                  ;
 11156                                  ;**	$STD_AUX_INPUT - System Call 3
 11157                                  ;
 11158                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11159                                  ;
 11160                                  ;	ENTRY	none
 11161                                  ;	EXIT	(al) = character
 11162                                  ;	USES	all
 11163                                  ;
 11164                                  ;----------------------------------------------------------------------------
 11165                                  ;
 11166                                  
 11167                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11168                                  
 11169                                  _$STD_AUX_INPUT:	;System call 3
 11170                                  
 11171 00001793 E8DA3A                  	CALL	STATCHK
 11172 00001796 BB0300                  	MOV	BX,3
 11173 00001799 E8691F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11174                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11175                                  	;retc
 11176                                  	; 16/12/2022
 11177                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11178                                  	;JC	SHORT BUFOUT_RETN
 11179                                  	;JMP	SHORT TAISTRT
 11180                                  	; 07/12/2022
 11181 0000179C 7304                    	jnc	SHORT TAISTRT
 11182 0000179E C3                      	retn	
 11183                                  
 11184                                  AUXILP:
 11185 0000179F E8A03A                  	CALL	SPOOLINT
 11186                                  TAISTRT:
 11187 000017A2 B401                    	MOV	AH,1
 11188 000017A4 E8D32D                  	CALL	IOFUNC
 11189 000017A7 74F6                    	JZ	SHORT AUXILP
 11190 000017A9 30E4                    	XOR	AH,AH
 11191                                  	; 16/12/2022
 11192                                  	;CALL	IOFUNC
 11193                                  	;RETN
 11194                                  	; 07/12/2022
 11195 000017AB E9CC2D                  	jmp	IOFUNC
 11196                                  
 11197                                  ;
 11198                                  ;----------------------------------------------------------------------------
 11199                                  ;
 11200                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11201                                  ;
 11202                                  ;	ENTRY	(dl) = character
 11203                                  ;	EXIT	none
 11204                                  ;	USES	all
 11205                                  ;
 11206                                  ;----------------------------------------------------------------------------
 11207                                  ;
 11208                                  
 11209                                  _$STD_AUX_OUTPUT:	;System call 4
 11210                                  
 11211 000017AE 53                      	PUSH	BX
 11212 000017AF BB0300                  	MOV	BX,3
 11213 000017B2 EB04                    	JMP	SHORT SENDOUT
 11214                                  
 11215                                  ;
 11216                                  ;----------------------------------------------------------------------------
 11217                                  ;
 11218                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11219                                  ;
 11220                                  ;	ENTRY	(dl) = character
 11221                                  ;	EXIT	none
 11222                                  ;	USES	all
 11223                                  ;
 11224                                  ;----------------------------------------------------------------------------
 11225                                  ;
 11226                                  
 11227                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11228                                  
 11229 000017B4 53                      	PUSH	BX
 11230 000017B5 BB0400                  	MOV	BX,4
 11231                                  
 11232                                  SENDOUT:
 11233 000017B8 88D0                    	MOV	AL,DL
 11234 000017BA 50                      	PUSH	AX
 11235 000017BB E8B23A                  	CALL	STATCHK
 11236 000017BE 58                      	POP	AX
 11237 000017BF 1E                      	PUSH	DS
 11238 000017C0 56                      	PUSH	SI
 11239                                  LISSTRT2:
 11240 000017C1 E8CDFE                  	CALL	RAWOUT2
 11241                                  TRIPOP:
 11242 000017C4 5E                      	POP	SI
 11243 000017C5 1F                      	POP	DS
 11244 000017C6 5B                      	POP	BX
 11245                                  SCIS_RETN:	; 20/07/2018
 11246 000017C7 C3                      	RETN
 11247                                  ;
 11248                                  ;----------------------------------------------------------------------------
 11249                                  ;
 11250                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11251                                  ;
 11252                                  ;	Check console input status
 11253                                  ;
 11254                                  ;	ENTRY	none
 11255                                  ;	EXIT	AL = -1 character available, = 0 no character
 11256                                  ;	USES	all
 11257                                  ;
 11258                                  ;----------------------------------------------------------------------------
 11259                                  ;
 11260                                  
 11261                                  _$STD_CON_INPUT_STATUS:		 ;System call 11
 11262                                  
 11263 000017C8 E8A53A                  	CALL	STATCHK
 11264 000017CB B000                    	MOV	AL,0			; no xor!!
 11265                                  	;retz
 11266 000017CD 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11267 000017CF 0CFF                    	OR	AL,-1
 11268                                  ;SCIS_RETN:
 11269 000017D1 C3                      	RETN
 11270                                  
 11271                                  ;
 11272                                  ;----------------------------------------------------------------------------
 11273                                  ;
 11274                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11275                                  ;
 11276                                  ;	Flush console input buffer and perform call in AL
 11277                                  ;
 11278                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11279                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11280                                  ;		return arguments for the fcn supplied in (AL)
 11281                                  ;	USES	all
 11282                                  ;
 11283                                  ;----------------------------------------------------------------------------
 11284                                  ;
 11285                                  
 11286                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11287                                  
 11288 000017D2 50                      	PUSH	AX
 11289 000017D3 52                      	PUSH	DX
 11290 000017D4 31DB                    	XOR	BX,BX
 11291 000017D6 E82C1F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11292                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11293 000017D9 7205                    	JC	SHORT BADJFNCON
 11294 000017DB B404                    	MOV	AH,4
 11295 000017DD E89A2D                  	CALL	IOFUNC
 11296                                  
 11297                                  BADJFNCON:
 11298 000017E0 5A                      	POP	DX
 11299 000017E1 58                      	POP	AX
 11300 000017E2 88C4                    	MOV	AH,AL
 11301 000017E4 3C01                    	CMP	AL,1
 11302 000017E6 7413                    	JZ	SHORT REDISPJ
 11303 000017E8 3C06                    	CMP	AL,6
 11304 000017EA 740F                    	JZ	SHORT REDISPJ
 11305 000017EC 3C07                    	CMP	AL,7
 11306 000017EE 740B                    	JZ	SHORT REDISPJ
 11307 000017F0 3C08                    	CMP	AL,8
 11308 000017F2 7407                    	JZ	SHORT REDISPJ
 11309 000017F4 3C0A                    	CMP	AL,10
 11310 000017F6 7403                    	JZ	SHORT REDISPJ
 11311 000017F8 B000                    	MOV	AL,0
 11312 000017FA C3                      	RETN
 11313                                  
 11314                                  REDISPJ:
 11315 000017FB FA                      	CLI
 11316                                  	;transfer REDISP
 11317 000017FC E9C8EB                  	JMP	REDISP
 11318                                  
 11319                                  ;============================================================================
 11320                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11321                                  ;============================================================================
 11322                                  ; 20/07/2018 - Retro DOS v3.0
 11323                                  ; 17/05/2019 - Retro DOS v4.0
 11324                                  
 11325                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11326                                  ;
 11327                                  ;	$GET_FCB_POSITION
 11328                                  ;	$FCB_DELETE
 11329                                  ;	$GET_FCB_FILE_LENGTH
 11330                                  ;	$FCB_CLOSE
 11331                                  ;	$FCB_RENAME
 11332                                  ;	SaveFCBInfo
 11333                                  ;	ResetLRU
 11334                                  ;	SetOpenAge
 11335                                  ;	LRUFCB
 11336                                  ;	FCBRegen
 11337                                  ;	BlastSFT
 11338                                  ;	CheckFCB
 11339                                  ;	SFTFromFCB
 11340                                  ;	FCBHardErr
 11341                                  ;
 11342                                  ;	Revision history:
 11343                                  ;
 11344                                  ;		Created: ARR 4 April 1983"
 11345                                  ;			 MZ  6 June  1983 completion of functions
 11346                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11347                                  ;					  times.  Change so successive closes work by
 11348                                  ;					  always returning OK.	Also, detect I/O to
 11349                                  ;					  already closed FCB and return EOF.
 11350                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11351                                  ;					  out of sft into FCB for reconnection
 11352                                  ;
 11353                                  ;		A000	 version 4.00  Jan. 1988
 11354                                  
 11355                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11356                                  ;----------------------------------------------------------------------------
 11357                                  ;
 11358                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11359                                  ;	extent and next record field and set the random record field to point
 11360                                  ;	to that record
 11361                                  ;
 11362                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11363                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11364                                  ;   Registers modified: all
 11365                                  ;
 11366                                  ;----------------------------------------------------------------------------
 11367                                  ;
 11368                                  
 11369                                  _$GET_FCB_POSITION:
 11370 000017FF E8EB04                  	call	GetExtended		; point to FCB
 11371 00001802 E8BB04                  	call	GetExtent		; DX:AX is current record
 11372                                  	;mov	[si+21h],ax
 11373 00001805 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11374                                  	;mov	[si+23h],dl
 11375 00001808 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11376                                  	;cmp	word [si+0Eh],64
 11377 0000180B 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11378 0000180F 7303                    	JAE	short GetFCBBye
 11379                                  	;mov	[si+24h],dh
 11380 00001811 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11381                                  GoodPath:	; 16/12/2022
 11382                                  GetFCBBye:
 11383 00001814 E989EE                  	jmp	FCB_RET_OK
 11384                                  
 11385                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11386                                  ;----------------------------------------------------------------------------
 11387                                  ;
 11388                                  ;**	$FCB_Delete - Delete from FCB Template
 11389                                  ;
 11390                                  ;	given an FCB, remove all directory entries in the current
 11391                                  ;	directory that have names that match the FCB's ?  marks.
 11392                                  ;
 11393                                  ;	ENTRY	(DS:DX) = address of FCB
 11394                                  ;	EXIT	entries matching the FCB are deleted
 11395                                  ;		(al) = ff iff no entries were deleted
 11396                                  ;	USES	all
 11397                                  ;
 11398                                  ;----------------------------------------------------------------------------
 11399                                  ;
 11400                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11401                                  
 11402                                  _$FCB_DELETE:		; System call 19
 11403                                  					; OpenBuf is in DOSDATA
 11404 00001817 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11405                                  
 11406 0000181A E81354                  	call	TransFCB		; convert FCB to path
 11407 0000181D 7207                    	JC	short BadPath 		; signal no deletions
 11408                                  
 11409 0000181F 16                      	push	SS
 11410 00001820 1F                      	pop	DS			; SS is DOSDATA
 11411                                  
 11412 00001821 E8940D                  	call	DOS_DELETE		; wham
 11413                                  	;JC	short BadPath
 11414                                  	; 16/12/2022
 11415 00001824 73EE                    	jnc 	short GoodPath
 11416                                  ;GoodPath:
 11417                                  ;	;jmp	FCB_RET_OK		; do a good return
 11418                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11419                                  ;	jmp	short GetFCBBye
 11420                                  
 11421                                  BadPath:
 11422                                  	; Error code is in AX
 11423                                  
 11424 00001826 E97AEE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11425                                  
 11426                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11427                                  ;----------------------------------------------------------------------------
 11428                                  ;
 11429                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11430                                  ;	file in records (rounded up if partial).
 11431                                  ;
 11432                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11433                                  ;   Outputs:	Random record field updated to reflect the number of records
 11434                                  ;   Registers modified: all
 11435                                  ;
 11436                                  ;----------------------------------------------------------------------------
 11437                                  ;
 11438                                  	; 15/01/2024
 11439                                  
 11440                                  _$GET_FCB_FILE_LENGTH:
 11441                                  
 11442 00001829 E8C104                  	call	GetExtended		; get real FCB pointer
 11443                                  					; DX points to Input FCB
 11444                                  
 11445                                  					; OpenBuf is in DOSDATA
 11446 0000182C BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11447                                  
 11448 0000182F 1E                      	push	ds			; save pointer to true FCB
 11449 00001830 56                      	push	si
 11450 00001831 E8FC53                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11451 00001834 5E                      	pop	si
 11452 00001835 1F                      	pop	ds
 11453 00001836 72EE                    	JC	short BadPath
 11454 00001838 1E                      	push	ds			; save pointer
 11455 00001839 56                      	push	si
 11456 0000183A 16                      	push	ss		
 11457 0000183B 1F                      	pop	ds
 11458 0000183C E88B11                  	call	GET_FILE_INFO		; grab the info
 11459 0000183F 5E                      	pop	si			; get pointer back
 11460 00001840 1F                      	pop	ds
 11461 00001841 72E3                    	JC	short BadPath 		; invalid something
 11462                                  	; 15/01/2024
 11463                                  	;MOV	DX,BX (*)		; get high order size
 11464                                  	;MOV	AX,DI (**)		; get low order size
 11465 00001843 89D8                    	mov	ax,bx ; hw of file size
 11466                                  	;
 11467                                  	;mov	bx,[si+0Eh]
 11468 00001845 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11469 00001848 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11470 0000184A 7502                    	JNZ	short GetSize 		; not empty
 11471                                  	;MOV	BX,128
 11472 0000184C B380                    	mov	bl,128	; 15/01/2024
 11473                                  GetSize:
 11474                                  	; 15/01/2024
 11475                                  	;MOV	DI,AX			; save low order word
 11476                                  	;MOV	AX,DX			; move high order for divide
 11477                                  	;xchg	ax,dx ; (*)
 11478                                  	; ax = hw of file size
 11479                                  
 11480 0000184E 31D2                    	XOR	DX,DX			; clear out high
 11481 00001850 F7F3                    	DIV	BX			; wham
 11482 00001852 50                      	PUSH	AX			; save dividend
 11483 00001853 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11484 00001855 F7F3                    	DIV	BX			; wham
 11485 00001857 89D1                    	MOV	CX,DX			; save remainder
 11486 00001859 5A                      	POP	DX			; get high order dividend
 11487 0000185A E306                    	JCXZ	LengthStore		; no roundup
 11488 0000185C 83C001                  	ADD	AX,1
 11489 0000185F 83D200                  	ADC	DX,0			; 32-bit increment
 11490                                  LengthStore:
 11491                                  	;mov	[si+21h],ax
 11492 00001862 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11493                                  	;mov	[si+23h],dl
 11494 00001865 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11495 00001868 08F6                    	OR	DH,DH
 11496 0000186A 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11497                                  	;mov	[si+24h],dh
 11498 0000186C 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11499                                  	; 16/12/2022
 11500                                  GoodRet:
 11501                                  	;jmp	FCB_RET_OK
 11502 0000186F EBA3                    	jmp	short GoodPath
 11503                                  
 11504                                  ;Break <$FCB_Close - close a file>
 11505                                  ;----------------------------------------------------------------------------
 11506                                  ;
 11507                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11508                                  ;	as the FCB may be used for further I/O
 11509                                  ;
 11510                                  ;   Inputs:	DS:DX point to FCB
 11511                                  ;   Outputs:	AL = FF if file was not found on disk
 11512                                  ;   Registers modified: all
 11513                                  ;
 11514                                  ;----------------------------------------------------------------------------
 11515                                  ;
 11516                                  
 11517                                  _$FCB_CLOSE:		; System call 16
 11518                                  
 11519 00001871 30C0                    	XOR	AL,AL			; default search attributes
 11520 00001873 E87704                  	call	GetExtended		; DS:SI point to real FCB
 11521 00001876 7403                    	JZ	short NoAttr		; not extended
 11522 00001878 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11523                                  NoAttr:
 11524                                  					; SS override
 11525 0000187B 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11526 0000187F E8D903                  	call	SFTFromFCB
 11527 00001882 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11528                                  
 11529                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11530                                  	; there is no need to set the SFT's attribute.
 11531                                  
 11532                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11533                                  	;;; done
 11534                                  
 11535                                  	;mov	al,[es:di+4]
 11536 00001884 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11537 00001888 30E4                    	XOR	AH,AH
 11538 0000188A 50                      	PUSH	AX
 11539                                  
 11540                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11541                                  	;;; done
 11542                                  
 11543 0000188B E8CF5B                  	call	CheckShare
 11544 0000188E 7508                    	JNZ	short NoStash
 11545 00001890 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11546                                  	;mov	[es:di+4],al
 11547 00001894 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11548                                  NoStash:
 11549                                  	;mov	ax,[si+14h]
 11550 00001898 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11551                                  	;mov	[es:di+0Fh],ax
 11552 0000189B 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11553                                  	;mov	ax,[si+16h]
 11554 0000189F 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11555                                  	;mov	[es:di+0Dh],ax
 11556 000018A2 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11557                                  	;mov	ax,[si+10h]
 11558 000018A6 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11559                                  	;mov	[es:di+11h],ax
 11560 000018A9 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11561                                  	;mov	ax,[si+12h]
 11562 000018AD 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11563                                  	;mov	[es:di+13h],ax
 11564 000018B0 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11565                                  	;or	word [es:di+5],4000h
 11566                                  	; 17/12/2022
 11567 000018B4 26804D0640              	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11568                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11569 000018B9 16                      	push	ss
 11570 000018BA 1F                      	pop	ds
 11571 000018BB E80817                  	call	DOS_CLOSE	; wham
 11572 000018BE C43E[9E05]              	LES	DI,[THISSFT]
 11573                                  
 11574                                  	;;; 9/8/86 F.C. restore SFT attribute
 11575 000018C2 59                      	POP	CX
 11576                                  	;mov	[es:di+4],cl
 11577 000018C3 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11578                                  	;;; 9/8/86 F.C. restore SFT attribute
 11579                                  
 11580 000018C7 9C                      	PUSHF
 11581                                  	;test	word [es:di],0FFFFh
 11582                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11583                                  				; zero ref count gets blasted
 11584 000018C8 26833D00                	cmp	word [ES:DI],0
 11585 000018CC 7507                    	jnz     short CloseOK
 11586 000018CE 50                      	PUSH	AX
 11587 000018CF B04D                    	MOV	AL,'M'
 11588 000018D1 E8FC02                  	call	BlastSFT
 11589 000018D4 58                      	POP	AX
 11590                                  CloseOK:
 11591 000018D5 9D                      	POPF
 11592 000018D6 7397                    	JNC	short GoodRet
 11593                                  	;cmp	al,6
 11594 000018D8 3C06                    	CMP	AL,error_invalid_handle
 11595 000018DA 7493                    	JZ	short GoodRet
 11596                                  	;mov	al,2
 11597 000018DC B002                    	MOV	AL,error_file_not_found
 11598                                  fren90:
 11599                                  	; 16/12/2022
 11600                                  fcb_close_err:
 11601 000018DE E9C2ED                  	jmp	FCB_RET_ERR
 11602                                  
 11603                                  ;
 11604                                  ;----------------------------------------------------------------------------
 11605                                  ;
 11606                                  ;**	$FCB_Rename - Rename a File
 11607                                  ;
 11608                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11609                                  ;	multiple files copying from the meta characters.
 11610                                  ;
 11611                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11612                                  ;		    name of the files to be renamed. Starting at offset 11h
 11613                                  ;		    in the FCB is the destination name.
 11614                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11615                                  ;		AL = FF -> some files may have been renamed but:
 11616                                  ;			rename to existing file or source file not found
 11617                                  ;	USES	ALL
 11618                                  ;
 11619                                  ;----------------------------------------------------------------------------
 11620                                  ;
 11621                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11622                                  
 11623                                  _$FCB_RENAME:		; System call 23
 11624                                  
 11625 000018E1 E80904                  	call	GetExtended		; get pointer to real FCB
 11626 000018E4 52                      	push	dx
 11627 000018E5 8A04                    	MOV	AL,[SI] 		; get drive byte
 11628 000018E7 83C610                  	ADD	SI,10h			; point to destination
 11629                                  
 11630                                  					; RenBuf is in DOSDATA
 11631 000018EA BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11632 000018ED FF34                    	push	word [SI]
 11633 000018EF 1E                      	push	ds
 11634                                  	;push	di			; save source pointer for TransFCB
 11635                                  	; 16/01/2024 - BugFix !
 11636 000018F0 56                      	push	si
 11637 000018F1 8804                    	MOV	[SI],AL			; drop in real drive
 11638 000018F3 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11639 000018F5 E83853                  	call	TransFCB		; munch this pathname
 11640 000018F8 5E                      	pop	si
 11641 000018F9 1F                      	pop	ds	
 11642 000018FA 8F04                    	pop	WORD [SI]		; get path back
 11643 000018FC 5A                      	pop	dx			; Original FCB pointer
 11644 000018FD 72DF                    	JC	short fren90		; bad path -> error
 11645                                  
 11646                                  					; SS override for WFP_Start & Ren_WFP
 11647 000018FF 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11648 00001904 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11649                                  
 11650                                  					; OpenBuf is in DOSDATA
 11651 00001909 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11652 0000190C E82153                  	call	TransFCB		; wham
 11653                                  					; NOTE that this call is pointing
 11654                                  					;  back to the ORIGINAL FCB so
 11655                                  					;  SATTRIB gets set correctly
 11656 0000190F 72CD                    	JC	short fren90		; error
 11657 00001911 E8820E                  	call	DOS_RENAME
 11658 00001914 72C8                    	JC	short fren90
 11659                                  	; 16/12/2022
 11660 00001916 E987ED                  	jmp	FCB_RET_OK
 11661                                  	
 11662                                  ;	Error -
 11663                                  ;
 11664                                  ;	(al) = error code
 11665                                  
 11666                                  	; 16/12/2022
 11667                                  ;fren90:	
 11668                                  ;	;jmp	FCB_RET_ERR
 11669                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11670                                  ;	jmp	short fcb_close_err
 11671                                  
 11672                                  ;Break <Misbehavior fixers>
 11673                                  ;
 11674                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11675                                  ;   user's space so he may move them at will. Second, they have a small
 11676                                  ;   reserved area that may be used for system information. Third, there was
 11677                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11678                                  ;   usage.
 11679                                  ;
 11680                                  ;   This results in the following misbehavior:
 11681                                  ;
 11682                                  ;	infinite opens of the same file:
 11683                                  ;
 11684                                  ;	While (TRUE) {			While (TRUE) {
 11685                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11686                                  ;	    Read (FCB); 		    Write (FCB);
 11687                                  ;	    }				    }
 11688                                  ;
 11689                                  ;	infinite opens of different files:
 11690                                  ;
 11691                                  ;	While (TRUE) {			While (TRUE) {
 11692                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11693                                  ;	    Read (FCB); 		    Write (FCB);
 11694                                  ;	    }				    }
 11695                                  ;
 11696                                  ;	multiple closes of the same file:
 11697                                  ;
 11698                                  ;	FCBOpen (FCB);
 11699                                  ;	while (TRUE)
 11700                                  ;	    FCBClose (FCB);
 11701                                  ;
 11702                                  ;	I/O after closing file:
 11703                                  ;
 11704                                  ;	FCBOpen (FCB);
 11705                                  ;	while (TRUE) {
 11706                                  ;	    FCBWrite (FCB);
 11707                                  ;	    FCBClose (FCB);
 11708                                  ;	    }
 11709                                  ;
 11710                                  ;   The following is am implementation of a methodology for emulating the
 11711                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11712                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11713                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11714                                  ;   the local machine.
 11715                                  ;
 11716                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11717                                  ;   structures depending on the file itself and the state of operations of the
 11718                                  ;   OS. The information contained in this reserved field is enough to
 11719                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11720                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11721                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11722                                  ;
 11723                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11724                                  ;
 11725                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11726                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11727                                  ;   regenerated.
 11728                                  ;
 11729                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11730                                  ;   longer available. We can make up for this by using the following
 11731                                  ;   information:
 11732                                  ;
 11733                                  ;	The Drive number (from the DPB).
 11734                                  ;	The physical sector of the directory that contains the entry.
 11735                                  ;	The relative position of the entry in the sector.
 11736                                  ;	The first cluster field.
 11737                                  ;	The last used SFT.
 11738                                  ;      OR In the case of a device FCB
 11739                                  ;	The low 6 bits of sf_flags (indicating device type)
 11740                                  ;	The pointer to the device header
 11741                                  ;
 11742                                  ;   We read in the particular directory sector and examine the indicated
 11743                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11744                                  ;
 11745                                  ;   Some key items need to be remembered:
 11746                                  ;
 11747                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11748                                  ;	information. We enforce good behavior on the FCBs.
 11749                                  ;
 11750                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11751                                  ;	open VCs. The VCs may be closed only at process termination.
 11752                                  ;
 11753                                  ;	If this is not an installed version of the DOS, file sharing will
 11754                                  ;	always be present.
 11755                                  ;
 11756                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11757                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11758                                  ;
 11759                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11760                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11761                                  ;	proper OI record.
 11762                                  ;
 11763                                  ;   The test bits are:
 11764                                  ;
 11765                                  ;	00 -> local file
 11766                                  ;	40 -> sharing local
 11767                                  ;	80 -> network
 11768                                  ;	C0 -> local device
 11769                                  
 11770                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11771                                  ;----------------------------------------------------------------------------
 11772                                  ;
 11773                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11774                                  ;	pieces of information into the FCB to allow for subsequent
 11775                                  ;	regeneration. Poke LRU also.
 11776                                  ;
 11777                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11778                                  ;		DS:SI point to the FCB (not an extended one)
 11779                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11780                                  ;		DS:SI preserved
 11781                                  ;		ES:DI point to sft
 11782                                  ;   Registers modified: All
 11783                                  ;
 11784                                  ;
 11785                                  ;----------------------------------------------------------------------------
 11786                                  ;
 11787                                  
 11788                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11789                                  
 11790                                  SaveFCBInfo:
 11791                                  
 11792 00001919 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 11793 0000191E E8BBF9                  	call	IsSFTNet
 11794 00001921 740B                    	JZ	short SaveLocal		; if not network then save local info
 11795                                  ;
 11796                                  ;----- In net support -----
 11797                                  ;
 11798                                  	; 17/05/2019 - Retro DOS v4.0
 11799                                  
 11800                                  	; MSDOS 3.3
 11801                                  	;;mov	ax,[es:di+1Dh]
 11802                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 11803                                  	;;mov	[si+1Ah],ax
 11804                                  	;mov	[si+fcb_net_handle],ax
 11805                                  	;push	es
 11806                                  	;push	di
 11807                                  	;;les	di,[es:di+19h]
 11808                                  	;LES	DI,[ES:DI+sf_netid]
 11809                                  	;;mov	[si+1Ch],di
 11810                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 11811                                  	;;mov 	[si+1Eh],es
 11812                                  	;MOV	[SI+fcb_netID+2],ES
 11813                                  	;pop	di
 11814                                  	;pop	es
 11815                                  
 11816                                  	; MSDOS 6.0
 11817                                  	;mov	ax,[es:di+0Bh]
 11818 00001923 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 11819                                  	;mov	[si+1Ch],ax
 11820 00001927 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 11821                                  	
 11822                                  	;mov	bl,80h
 11823 0000192A B380                    	MOV	BL,FCBNETWORK
 11824                                  ;
 11825                                  ;----- END In net support -----
 11826                                  ;
 11827 0000192C EB65                    	jmp	SHORT SaveSFN
 11828                                  
 11829                                  SaveLocal:
 11830                                  	;IF	Installed
 11831 0000192E E82C5B                  	call	CheckShare
 11832                                  	;JZ	short SaveNoShare	; no sharer
 11833                                  	;JMP	short SaveShare		; sharer present
 11834                                  	; 16/12/2022
 11835                                  	; 28/07/2019
 11836 00001931 755B                    	jnz	short SaveShare
 11837                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11838                                  	;JZ	short SaveNoShare	; no sharer
 11839                                  	;JMP	short SaveShare		; sharer present
 11840                                  
 11841                                  SaveNoShare:
 11842                                  	;;test 	word [es:di+5],80h
 11843                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 11844 00001933 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 11845 00001938 7542                    	JNZ	short SaveNoShareDev	; Device
 11846                                  
 11847                                  	; Save no sharing local file information
 11848                                  
 11849                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 11850                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 11851 0000193A 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11852                                  	;mov	[si+1Dh],ax
 11853 0000193E 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11854                                  
 11855                                  	; MSDOS 6.0
 11856                                  
 11857                                  	;SR; Store high byte of directory sector
 11858                                  	;mov	ax,[es:di+1Dh]
 11859 00001941 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11860                                  	
 11861                                  	; SR;
 11862                                  	; We have to store the read-only and archive attributes of the file.
 11863                                  	; We extract it from the SFT and store it in the top two bits of the 
 11864                                  	; sector number ( sector number == 22 bits only )
 11865                                  
 11866                                  	;mov	bl,[es:di+4]
 11867 00001945 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 11868 00001949 88DF                    	mov	bh,bl
 11869 0000194B D0CB                    	ror	bl,1
 11870 0000194D D0E7                    	shl	bh,1
 11871 0000194F 08FB                    	or	bl,bh
 11872 00001951 80E3C0                  	and	bl,0C0h
 11873 00001954 08D8                    	or	al,bl
 11874                                  	;mov	[si+18h],al ; 08/11/2022
 11875 00001956 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 11876                                  
 11877                                  	; MSDOS 6.0 (& MSDOS 3.3)
 11878                                  	;mov	al,[es:di+1Fh]
 11879 00001959 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11880                                  	;mov	[si+1Fh],al
 11881 0000195D 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11882                                  	;mov	ax,[es:di+0Bh]
 11883 00001960 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11884                                  	;mov	[si+1Bh],ax
 11885 00001964 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11886 00001967 B300                    	MOV	BL,0
 11887                                  
 11888                                  	; Create the bits field from the dirty/device bits of the flags word 
 11889                                  	; and the mode byte
 11890                                  
 11891                                  SetFCBBits:
 11892                                  	;mov	ax,[es:di+5]
 11893 00001969 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11894 0000196D 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11895                                  	;or	al,[es:di+2]
 11896 0000196F 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11897                                  	;mov	[si+1Ah], al
 11898 00001973 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11899                                  
 11900                                  	; MSDOS 6.0
 11901                                  	
 11902                                  	; SR;
 11903                                  	; Check if we came here for local file or device. If for local file, 
 11904                                  	; skip setting of SFT index
 11905                                  	
 11906 00001976 08DB                    	or	bl,bl
 11907 00001978 742A                    	jz	short SaveNoSFN		; do not save SFN if local file
 11908                                  
 11909 0000197A EB17                    	JMP	short SaveSFN 		; go and save SFN
 11910                                  
 11911                                  	; Save no sharing local device information
 11912                                  
 11913                                  SaveNoShareDev:
 11914                                  	;mov	ax,[es:di+7]
 11915 0000197C 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11916                                  	;mov	[si+1Ah],ax
 11917 00001980 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11918                                  	;mov	ax,[es:di+9]
 11919 00001983 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11920 00001987 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11921                                  	;mov	bl,40h
 11922 0000198A B340                    	MOV	BL,FCBDEVICE
 11923 0000198C EBDB                    	JMP	SetFCBBits		; go and save SFN
 11924                                  
 11925                                  SaveShare:
 11926                                  	;ENDIF
 11927                                  
 11928                                  ;----- In share support -----
 11929                                  
 11930                                  	;call	far [ss:ShSave]
 11931 0000198E 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11932                                  
 11933                                  ;----- end in share support -----
 11934                                  
 11935                                  	; 17/05/2019
 11936                                  
 11937                                  SaveSFN:
 11938                                  	;lea	ax,[di-6]
 11939 00001993 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11940                                  	
 11941                                  	; Adjust for offset to table.
 11942                                  	
 11943 00001996 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11944                                  
 11945 0000199B 53                      	push	bx			;bx = FCB type (net/Share or local)
 11946                                  	;;mov	bl,53 ; MSDOS 3.3
 11947                                  	;mov	bl,59 ; MSDOS 6.0
 11948 0000199C B33B                    	MOV	BL,SF_ENTRY.size
 11949 0000199E F6F3                    	DIV	BL
 11950                                  	;mov	[si+18h],al
 11951 000019A0 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11952 000019A3 5B                      	pop	bx			;restore bx
 11953                                  
 11954                                  SaveNoSFN:
 11955                                  	;mov	ax,[es:di+5]
 11956 000019A4 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11957 000019A8 243F                    	AND	AL,3Fh			; get real drive
 11958 000019AA 08D8                    	OR	AL,BL
 11959                                  	;mov	[si+19h],al
 11960 000019AC 884419                  	MOV	[SI+fcb_l_drive],AL
 11961                                  
 11962 000019AF 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11963 000019B3 40                      	INC	AX
 11964                                  	;mov	[es:di+15h],ax
 11965 000019B4 26894515                	MOV	[ES:DI+sf_LRU],AX
 11966 000019B8 7506                    	JNZ	short SimpleStuff
 11967                                  	
 11968                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 11969                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 11970                                  	
 11971                                  	;mov	bx,15h
 11972 000019BA BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11973 000019BD E80500                  	call	ResetLRU
 11974                                  
 11975                                  	; Set new LRU to AX
 11976                                  SimpleStuff:
 11977 000019C0 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11978 000019C4 C3                      	retn
 11979                                  
 11980                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11981                                  ;----------------------------------------------------------------------------
 11982                                  ;
 11983                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 11984                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11985                                  ;   at 0.
 11986                                  ;
 11987                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11988                                  ;		ES:DI point to SFT currently being updated
 11989                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11990                                  ;		AX has 8000h
 11991                                  ;   Registers modified: none
 11992                                  ;
 11993                                  ;----------------------------------------------------------------------------
 11994                                  ;
 11995                                  
 11996                                  	; 17/05/2019 - Retro DOS v4.0
 11997                                  ResetLRU:
 11998                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11999                                  	; DOSDATA
 12000                                  
 12001 000019C5 B80080                  	MOV	AX,8000h
 12002 000019C8 06                      	push	es
 12003 000019C9 57                      	push	di
 12004                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12005 000019CA 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12006                                  	;mov	cx,[es:di+4]
 12007 000019CF 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12008                                  	;lea	di,[di+6]
 12009 000019D3 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12010                                  ovScan:
 12011 000019D6 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12012 000019D9 7703                    	JA	short ovLoop
 12013 000019DB 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12014                                  ovLoop:
 12015                                  	;;add	di,53	; MSDOS 3.3
 12016                                  	;add	di,59	; MSDOS 6.0	
 12017 000019DE 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12018 000019E1 E2F3                    	LOOP	ovScan
 12019 000019E3 5F                      	pop	di
 12020 000019E4 07                      	pop	es
 12021 000019E5 268901                  	MOV	[ES:DI+BX],AX
 12022 000019E8 C3                      	retn
 12023                                  
 12024                                  ;IF  0  ; We dont need this routine any more.
 12025                                  ;
 12026                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12027                                  ;----------------------------------------------------------------------------
 12028                                  ;
 12029                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12030                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12031                                  ;   count here and fill in the appropriate field.
 12032                                  ;
 12033                                  ;   Inputs:	ES:DI point to SFT
 12034                                  ;   Outputs:	ES:DI has the open age field filled in.
 12035                                  ;		If open age has wraparound, we will have subtracted 8000h
 12036                                  ;		    from all open ages.
 12037                                  ;   Registers modified: AX
 12038                                  ;
 12039                                  ;----------------------------------------------------------------------------
 12040                                  ;
 12041                                  ;SetOpenAge:
 12042                                  ;	; 20/07/2018 - Retro DOS v3.0
 12043                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12044                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12045                                  ;
 12046                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12047                                  ;
 12048                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12049                                  ;	INC	AX
 12050                                  ;	;mov	[es:di+17h],ax
 12051                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12052                                  ;	JNZ	short SetDone
 12053                                  ;	;mov	bx,17h
 12054                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12055                                  ;	call	ResetLRU
 12056                                  ;SetDone:
 12057                                  ;	MOV	[CS:OpenLRU],AX
 12058                                  ;	retn
 12059                                  ;
 12060                                  ;ENDIF	; SetOpenAge no longer needed
 12061                                  
 12062                                  ; 21/07/2018 - Retro DOS v3.0
 12063                                  ; LRUFCB for MSDOS 6.0 !
 12064                                  
 12065                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12066                                  ;----------------------------------------------------------------------------
 12067                                  ;
 12068                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12069                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12070                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12071                                  ;
 12072                                  ;   Inputs:	none
 12073                                  ;   Outputs:	ES:DI point to SFT
 12074                                  ;		ThisSFT points to SFT
 12075                                  ;		SFT is zeroed
 12076                                  ;		Carry set of closes failed
 12077                                  ;   Registers modified: none
 12078                                  ;
 12079                                  ;----------------------------------------------------------------------------
 12080                                  ;
 12081                                  ; MSDOS 6.0
 12082                                  ;IF 0	; rewritten this routine
 12083                                  ;
 12084                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12085                                  ;	call	save_world
 12086                                  ;	
 12087                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12088                                  ; to find the lease recently used one that is younger than the open age.  We
 12089                                  ; operate be scanning the list n times finding the least age that is greater
 12090                                  ; or equal to the previous minimum age.
 12091                                  ;
 12092                                  ;   BP is the count of times we need to go through this loop.
 12093                                  ;   AX is the current acceptable minimum age to consider
 12094                                  ;
 12095                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12096                                  ;	XOR	AX,AX			; low = 0;
 12097                                  ;
 12098                                  ; If we've scanned the table n times, then we are done.
 12099                                  ;
 12100                                  ;lru1:
 12101                                  ;	CMP	bp,0			; while (k--) {
 12102                                  ;	JZ	short lru75
 12103                                  ;	DEC	bp
 12104                                  ;
 12105                                  ; Set up for scan.
 12106                                  ;
 12107                                  ;   AX is the minimum age for consideration
 12108                                  ;   BX is the minimum age found during the scan
 12109                                  ;   SI is the position of the entry that corresponds to BX
 12110                                  ;
 12111                                  ;	MOV	BX,-1			;     min = 0xffff;
 12112                                  ;	MOV	si,BX			;     pos = 0xffff;
 12113                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12114                                  ;	;mov	cx,[es:di+4]
 12115                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12116                                  ;	;lea	di,[di+6]
 12117                                  ;	LEA	DI,[DI+SFT.SFTable]
 12118                                  ;
 12119                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12120                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12121                                  ; are done.  In both cases, we use the found entry.
 12122                                  ;
 12123                                  ;lru2:
 12124                                  ;	cmp	word [es:di],0
 12125                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12126                                  ;	jz	short lru25
 12127                                  ;	;cmp	word [es:di],-1
 12128                                  ;	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 12129                                  ;	cmp	word [es:di],sf_busy
 12130                                  ;	jnz	short lru3
 12131                                  ;
 12132                                  ; The entry is usable without further scan.  Go and use it.
 12133                                  ;
 12134                                  ;lru25:
 12135                                  ;	MOV	si,DI			;	      pos = i;
 12136                                  ;	JMP	short lru11		;	      goto got;
 12137                                  ;
 12138                                  ; See if the entry is for the network or for the sharer.
 12139                                  ;
 12140                                  ;  If for the sharer or network then
 12141                                  ;	if the age < current minimum AND >= allowed minimum then
 12142                                  ;	    this entry becomes current minimum
 12143                                  ;
 12144                                  ;lru3:
 12145                                  ;	;test	word [es:di+5],8000h
 12146                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12147                                  ;					;	  if (!net[i]
 12148                                  ;	JNZ	short lru35
 12149                                  ;if installed
 12150                                  ;	call	CheckShare		;		&& !sharing)
 12151                                  ;	JZ	short lru5		;	  else
 12152                                  ;ENDIF
 12153                                  ;
 12154                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12155                                  ; current minimum.
 12156                                  ;
 12157                                  ;lru35:
 12158                                  ;	;mov	dx,[es:di+17h]
 12159                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12160                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12161                                  ;	JB	short lru5
 12162                                  ;	CMP	DX,BX
 12163                                  ;	JAE	short lru5		;	      age[i] < min) {
 12164                                  ;
 12165                                  ; entry is new minimum.  Remember his age.
 12166                                  ;
 12167                                  ;	mov	bx,DX			;	      min = age[i];
 12168                                  ;	mov	si,di			;	      pos = i;
 12169                                  ;
 12170                                  ; End of loop.	gp back for more
 12171                                  ;
 12172                                  ;lru5:
 12173                                  ;	;add	di,53
 12174                                  ;	add	di,SF_ENTRY.size
 12175                                  ;	loop	lru2			;	      }
 12176                                  ;
 12177                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12178                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12179                                  ; complete.  Go find LRU.
 12180                                  ;
 12181                                  ;lru6:	
 12182                                  ;	cmp	si,-1			; position not -1?
 12183                                  ;	jz	short lru75		; no, done with everything
 12184                                  ;	lea	ax,[bx+1]		; set new threshold age
 12185                                  ;	jmp	short lru1		; go and loop for more
 12186                                  ;lru65:	
 12187                                  ;	stc
 12188                                  ;	jmp	short LRUDead		;	  return -1;
 12189                                  ;
 12190                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12191                                  ; network entry. We now make a second pass through to find the LRU entry
 12192                                  ; that is local-no-share or has age >= AX
 12193                                  ;
 12194                                  ;lru75:
 12195                                  ;	mov	bx,-1			; min = 0xffff;
 12196                                  ;	mov	si,bx			; pos = 0xffff;
 12197                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12198                                  ;	;mov	cx,[es:di+4]
 12199                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12200                                  ;	;lea	di,[di+6]
 12201                                  ;	LEA	DI,[DI+SFT.SFTable]
 12202                                  ;
 12203                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12204                                  ; then check for lru.
 12205                                  ;
 12206                                  ;lru8:
 12207                                  ;	;test	word [es:di+5],8000h
 12208                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12209                                  ;	jnz	short lru85		; is for network, go check age
 12210                                  ;	call	CheckShare		; sharer here?
 12211                                  ;	jz	short lru86		; no, go check lru
 12212                                  ;
 12213                                  ; Network or sharer.  Check age
 12214                                  ;
 12215                                  ;lru85:
 12216                                  ;	;cmp	[es:di+17h],ax
 12217                                  ;	cmp	[es:di+sf_OpenAge],ax
 12218                                  ;	jb	short lru9		; age is before threshold, skip it
 12219                                  ;
 12220                                  ; Check LRU
 12221                                  ;
 12222                                  ;lru86:
 12223                                  ;	;cmp	[es:di+15h],bx
 12224                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12225                                  ;	jae	short lru9		; no, skip this
 12226                                  ;	mov	si,di			; remember position
 12227                                  ;	;mov	bx,[es:di+15h]
 12228                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12229                                  ;
 12230                                  ; Done with this entry, go back for more.
 12231                                  ;
 12232                                  ;lru9:
 12233                                  ;	;add	di, 53
 12234                                  ;	add	di,SF_ENTRY.size
 12235                                  ;	loop	lru8
 12236                                  ;
 12237                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12238                                  ; out. The conditions here are:
 12239                                  ;
 12240                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12241                                  ;
 12242                                  ;lru10:
 12243                                  ;	cmp	si,-1			; if no one f
 12244                                  ;	jz	short lru65		;     return -1;
 12245                                  ;lru11:
 12246                                  ;	mov	di,si
 12247                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12248                                  ;	MOV	[CS:THISSFT+2],ES
 12249                                  ;
 12250                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12251                                  ; is 0.
 12252                                  ;
 12253                                  ;	;test	word [es:di+5],8000h
 12254                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12255                                  ;	JNZ	short LRUClose
 12256                                  ;IF INSTALLED
 12257                                  ;	call	CheckShare
 12258                                  ;	JZ	short LRUDone
 12259                                  ;ENDIF
 12260                                  ;
 12261                                  ; Repeat close until ref count is 0
 12262                                  ;
 12263                                  ;LRUClose:
 12264                                  ;	push	ss
 12265                                  ;	pop	ds
 12266                                  ;	LES	DI,[THISSFT]
 12267                                  ;	cmp     word [es:di],0
 12268                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12269                                  ;	JZ	short LRUDone 		; nope, all done
 12270                                  ;	call	DOS_CLOSE
 12271                                  ;	jnc	short LRUClose		; no error => clean up
 12272                                  ;	;cmp	al,6
 12273                                  ;	cmp	al,error_invalid_handle
 12274                                  ;	jz	short LRUClose
 12275                                  ;	stc
 12276                                  ;	JMP	short LRUDead
 12277                                  ;LRUDone:
 12278                                  ;	XOR	AL,AL
 12279                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12280                                  ;
 12281                                  ;LRUDead:
 12282                                  ;	call	restore_world
 12283                                  ;	LES     DI,[CS:THISSFT]
 12284                                  ;	jnc	short LRUFCB_retn
 12285                                  ;LRUFCB_err:
 12286                                  ;	; mov	al, 23h	
 12287                                  ;	MOV	AL,error_FCB_unavailable
 12288                                  ;LRUFCB_retn:	
 12289                                  ;	retn:
 12290                                  ;
 12291                                  ;ENDIF	; LRUFCB has been rewritten below.
 12292                                  
 12293                                  ; 17/05/2019 - Retro DOS v4.0
 12294                                  ; LRUFCB for MSDOS 6.0 !
 12295                                  ;----------------------------------------------------------------------------
 12296                                  ;
 12297                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12298                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12299                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12300                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12301                                  ; optimize regeneration operations by keeping track of the current local
 12302                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12303                                  ; local SFT in the SFT Block.
 12304                                  ;
 12305                                  ; Inputs: al = 0 => Regenerate SFT operation
 12306                                  ;	    = 1 => Allocate new SFT for Open/Create
 12307                                  ;
 12308                                  ; Outputs: Carry clear
 12309                                  ;	 	es:di = Address of allocated SFT
 12310                                  ;	  	ThisSFT = Address of allocated SFT
 12311                                  ;
 12312                                  ;	  carry set if closes of net/Share files failed 
 12313                                  ;		al = error_FCB_unavailable
 12314                                  ;
 12315                                  ; Registers affected: None
 12316                                  ;
 12317                                  ;----------------------------------------------------------------------------
 12318                                  
 12319                                  ;LruFCB	PROC	NEAR
 12320                                  LRUFCB:
 12321                                  	; 17/05/2019 - Retro DOS v4.0
 12322                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12323                                  
 12324                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12325                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12326                                  
 12327 000019E9 06                      	push	es	; * (MSDOS 6.21)
 12328                                  	
 12329 000019EA E8BEEA                  	call	save_world
 12330                                  	
 12331                                  	;getdseg <ds>		;ds = DOSDATA
 12332 000019ED 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12333                                  
 12334 000019F2 08C0                    	or	al,al		;Check if regenerate allocation
 12335 000019F4 751A                    	jnz	short lru1	;Try to find SFT to use
 12336                                  
 12337                                  	; This is a regen call. If LocalSFT contains the address of a valid 
 12338                                  	; local SFT, just return that SFT to reuse
 12339                                  
 12340 000019F6 8B3E[5D10]              	mov	di,[LocalSFT]
 12341 000019FA 0B3E[5F10]              	or	di,[LocalSFT+2]	;is address == 0?
 12342 000019FE 7410                    	jz	short lru1	;invalid local SFT, find one
 12343                                  
 12344                                  	; We have found a valid local SFT. Recycle this SFT
 12345                                  
 12346 00001A00 C43E[5D10]              	les	di,[LocalSFT]
 12347                                  
 12348                                  gotlocalSFT:
 12349 00001A04 893E[9E05]              	mov	[THISSFT],di
 12350 00001A08 8C06[A005]              	mov	[THISSFT+2],es
 12351 00001A0C F8                      	clc
 12352 00001A0D E9AD00                  	jmp	LRUDone		;clear up SFT and return
 12353                                  
 12354                                  lru1:
 12355 00001A10 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12356                                  	;mov	cx,[es:di+4]
 12357 00001A14 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12358                                  	;lea	di,[di+6]
 12359 00001A18 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12360                                  
 12361                                  	; We scan through all the SFTs scanning for a free one. It also 
 12362                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately. 
 12363                                  	; bx = min. LRU for local SFTs
 12364                                  	; si = pos. of local SFT with min. LRU
 12365                                  	; dx = min. LRU for net/Share SFTs
 12366                                  	; bp = pos. of net/Share SFT with min. LRU
 12367                                  
 12368 00001A1B BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12369 00001A1E 89DE                    	mov	si,bx
 12370 00001A20 89DA                    	mov	dx,bx
 12371 00001A22 89DD                    	mov	bp,bx
 12372                                  
 12373                                  findSFT:
 12374                                  	;See if this SFT is a free one. If so, return it
 12375 00001A24 26830D00                	or	word [es:di],0
 12376                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12377 00001A28 744D                    	jz	short gotSFT	;yes, SFT is free
 12378                                  	;;cmp	word [es:di],-1
 12379                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12380 00001A2A 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12381 00001A2E 7447                    	jz	short gotSFT	;no, can use it
 12382                                  
 12383                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12384                                  	; used for a later regen.
 12385                                  
 12386                                  	; 16/12/2022
 12387                                  	; 08/11/2022
 12388                                  	;test	byte [es:di+6],80h
 12389 00001A30 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12390                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12391                                  	;;test	word [es:di+5],8000h
 12392                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12393 00001A35 7532                    	jnz	short lru5	;yes, get net/Share LRU
 12394                                  
 12395                                  ;IF installed
 12396 00001A37 E8235A                  	call	CheckShare	;Share present?
 12397                                  ;ENDIF
 12398 00001A3A 752D                    	jnz	short lru5	;yes, get net/Share LRU
 12399                                  
 12400                                  	;Local SFT, register its address
 12401                                  
 12402                                  	; !!HACK!!!
 12403                                  	; There is a slightly dirty hack out here in a desperate bid to save  
 12404                                  	; code space. There is similar code duplicated at label 'gotSFT'. We 
 12405                                  	; enter from there if al = 0, update the LocalSFT variable, and since 
 12406                                  	; al = 0, we jump out of the loop to the exit point. I have commented 
 12407                                  	; out the code that previously existed at label 'gotSFT'
 12408                                  
 12409                                  hackpoint:
 12410 00001A3C 893E[5D10]              	mov	[LocalSFT],di
 12411 00001A40 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12412                                  
 12413 00001A44 08C0                    	or	al,al		;Is operation = REGEN?
 12414 00001A46 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12415                                  
 12416                                  	;Get LRU for local files
 12417                                  	
 12418                                  	;cmp	[es:di+15h],bx
 12419 00001A48 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12420 00001A4C 7306                    	jae	short lru4	;no, skip 
 12421                                  
 12422                                  	;mov	bx,[es:di+15h]
 12423 00001A4E 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12424 00001A52 89FE                    	mov	si,di		;store SFT position
 12425                                  
 12426                                  lru4:
 12427                                  	;add	di,59
 12428 00001A54 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12429 00001A57 E2CB                    	loop	findSFT
 12430                                  
 12431                                  	; Check whether we got a net/Share or local SFT. If local SFT 
 12432                                  	; available, we will reuse it instead of net/Share LRU
 12433                                  
 12434 00001A59 89F7                    	mov	di,si
 12435 00001A5B 83FEFF                  	cmp	si,-1		;local SFT available?
 12436 00001A5E 7517                    	jnz	short gotSFT	;yes, return it
 12437                                  
 12438                                  	;No local SFT, see if we got a net/Share SFT
 12439                                  
 12440 00001A60 89EF                    	mov	di,bp
 12441 00001A62 83FDFF                  	cmp	bp,-1		;net/Share SFT available?
 12442 00001A65 7530                    	jnz	short gotnetSFT	;yes, return it
 12443                                  noSFT:
 12444                                  	; NB: This error should never occur. We always must have an LRU SFT. 
 12445                                  	; This error can occur only if the SFT has been corrupted or the LRU 
 12446                                  	; count is not maintained properly.
 12447                                  
 12448 00001A67 EB51                    	jmp	short errorbadSFT ;error, no FCB available.
 12449                                  
 12450                                  	; Handle the LRU for net/Share SFTs
 12451                                  lru5:
 12452                                  	;cmp	[es:di+15h],dx
 12453 00001A69 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12454 00001A6D 73E5                    	jae	short lru4	;no, skip 
 12455                                  
 12456                                  	;mov	dx,[es:di+15h]
 12457 00001A6F 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12458                                  
 12459 00001A73 89FD                    	mov	bp,di		;store SFT position
 12460 00001A75 EBDD                    	jmp	short lru4	;continue with next SFT
 12461                                  
 12462                                  gotSFT:
 12463 00001A77 08C0                    	or	al,al
 12464 00001A79 74C1                    	jz	short hackpoint	;save es:di in LocalSFT
 12465                                  
 12466                                  	; HACK!!!
 12467                                  	; The code here differs from the code at 'hackpoint' only in the 
 12468                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint' 
 12469                                  	; and then from there jump out to 'gotlocalSFT'. The original code 
 12470                                  	; has been commented out below and replaced by the code just above.
 12471                                  
 12472                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12473                                  ;
 12474                                  ;	or	al,al		  ;Regen?
 12475                                  ;	jnz	short notlocaluse ;yes, register it and return
 12476                                  ;
 12477                                  ;Register this SFT as a local one
 12478                                  ;
 12479                                  ;	mov	[LocalSFT],di
 12480                                  ;	mov	[LocalSFT+2],es
 12481                                  ;	jmp	gotlocalSFT	;return to caller
 12482                                  ;
 12483                                  ;notlocaluse:
 12484                                  
 12485                                  	; The caller is probably going to use this SFT for a net/Share file. 
 12486                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN) 
 12487                                  	; does not really know whether it is a local file or not. We 
 12488                                  	; invalidate LocalSFT if the SFT we are going to use was previously 
 12489                                  	; registered as a local SFT that can be recycled.
 12490                                  
 12491 00001A7B 8CC0                    	mov	ax,es
 12492 00001A7D 393E[5D10]              	cmp	[LocalSFT],di		;Offset same?
 12493 00001A81 7506                    	jne	short notinvalid
 12494 00001A83 3906[5F10]              	cmp	[LocalSFT+2],ax		;Segments same?
 12495 00001A87 7403                    	je	short zerolocalSFT	;no, no need to invalidate
 12496                                  notinvalid:
 12497 00001A89 E978FF                  	jmp	gotlocalSFT
 12498                                  
 12499                                  	; The SFT we are going to use was registered in the LocalSFT variable. 
 12500                                  	; Invalidate this variable i.e LocalSFT = NULL
 12501                                  
 12502                                  zerolocalSFT:
 12503 00001A8C 31C0                    	xor	ax,ax ; 0
 12504 00001A8E A3[5D10]                	mov	[LocalSFT],ax
 12505 00001A91 A3[5F10]                	mov	[LocalSFT+2],ax
 12506                                  
 12507 00001A94 E96DFF                  	jmp	gotlocalSFT
 12508                                  
 12509                                  gotnetSFT:
 12510                                  	; We have an SFT that is currently net/Share. If it is going to be 
 12511                                  	; used for a regen, we know it has to be a local SFT. Update the 
 12512                                  	; LocalSFT variable
 12513                                  
 12514 00001A97 08C0                    	or	al,al
 12515 00001A99 7508                    	jnz	short closenet
 12516                                  
 12517 00001A9B 893E[5D10]              	mov	[LocalSFT],di
 12518 00001A9F 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12519                                  closenet:
 12520 00001AA3 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12521 00001AA7 8C06[A005]              	mov	[THISSFT+2],es	
 12522                                  
 12523                                  	; If we have sharing or thisSFT is a net sft, then close it until ref 
 12524                                  	; count is 0.
 12525                                  	; NB: We come here only if it is a net/Share SFT that is going to be 
 12526                                  	; recycled -- no need to check for this.
 12527                                  
 12528                                  LRUClose:
 12529 00001AAB 26833D00                	cmp	word [es:di],0
 12530                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12531 00001AAF 740C                    	jz	short LRUDone	; nope, all done
 12532                                  
 12533 00001AB1 E81215                  	call	DOS_CLOSE
 12534 00001AB4 73F5                    	jnc	short LRUClose	; no error => clean up
 12535                                  
 12536                                  	; Bugbug: I dont know why we are trying to close after we get an 
 12537                                  	; error closing. Seems like we could have a potential infinite loop  
 12538                                  	; here. This has to be verified.
 12539                                  
 12540 00001AB6 3C06                    	cmp	al,error_invalid_handle ; 6
 12541 00001AB8 74F1                    	je	short LRUClose
 12542                                  errorbadSFT:
 12543 00001ABA F9                      	stc
 12544 00001ABB EB05                    	JMP	short LRUDead
 12545                                  LRUDone:
 12546 00001ABD 30C0                    	XOR	AL,AL
 12547 00001ABF E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12548                                  
 12549                                  LRUDead:
 12550 00001AC2 E8CFE9                  	call	restore_world		; use macro
 12551                                  	
 12552 00001AC5 07                      	pop	es ; * (MSDOS 6.21)
 12553                                  
 12554                                  	;getdseg <es>
 12555 00001AC6 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12556                                  
 12557 00001ACB 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12558                                  
 12559                                  	;;retnc
 12560                                  	;jc	short LruFCB_err
 12561                                  	;retn
 12562                                  
 12563                                  	; 16/12/2022
 12564                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12565 00001AD0 7302                    	jnc	short LruFCB_retn
 12566                                  	;jc	short LruFCB_err
 12567                                  	;retn
 12568                                  		
 12569                                  LruFCB_err:
 12570 00001AD2 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12571                                  LruFCB_retn:
 12572 00001AD4 C3                      	retn
 12573                                  	
 12574                                  ;LruFCB	ENDP
 12575                                  
 12576                                  ; 17/05/2019 - Retro DOS v4.0
 12577                                  
 12578                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12579                                  
 12580                                  ; --------------------------------------------------------------------------
 12581                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12582                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12583                                  ; to copy the name to different destinations
 12584                                  ;
 12585                                  ; Inputs: ds:si = source string
 12586                                  ;	 es:di = destination string
 12587                                  ;	 cx = length of string
 12588                                  ;
 12589                                  ; Outputs: String copied to destination
 12590                                  ;
 12591                                  ; Registers affected: cx,di,si
 12592                                  ; --------------------------------------------------------------------------
 12593                                  
 12594                                  RegenCopyName:
 12595                                  CopyName:
 12596 00001AD5 AC                      	lodsb			;load character
 12597 00001AD6 E87736                  	call	UCase		; convert char to upper case
 12598                                  StuffChar2:
 12599 00001AD9 AA                      	STOSB			;store converted character
 12600 00001ADA E2F9                    	LOOP	CopyName	;
 12601                                  DoneName:
 12602 00001ADC C3                      	retn
 12603                                  
 12604                                  ; --------------------------------------------------------------------------
 12605                                  
 12606                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12607                                  FCBRegen:
 12608                                  	; called from SFTFromFCB. SS already DOSDATA
 12609                                  
 12610                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12611                                  	; we do not fill, size we do no fill, position we do not fill,
 12612                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12613                                  
 12614                                  	;mov	al,[si+19h]
 12615 00001ADD 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12616                                  
 12617                                  	; We discriminate based on the first two bits in the reserved field.
 12618                                  	
 12619                                  	;test	al,80h
 12620 00001AE0 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12621 00001AE2 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12622                                  
 12623                                  	; The FCB is for a network or a sharing based system. At this point 
 12624                                  	; we have already closed the SFT for this guy and reconnection is 
 12625                                  	; impossible.
 12626                                  	;
 12627                                  	; Remember that he may have given us a FCB with bogus information in
 12628                                  	; it. Check to see if sharing is present or if the redir is present.
 12629                                  	; If either is around, presume that we have cycled out the FCB and 
 12630                                  	; give the hard error. Otherwise, just return with carry set.
 12631                                  
 12632 00001AE4 E87659                  	call	CheckShare		; test for sharer
 12633 00001AE7 7509                    	JNZ	short RegenFail		; yep, fail this.
 12634                                  	
 12635                                  	;mov	ax,1100h
 12636 00001AE9 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12637 00001AEC CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12638                                  			; Return: AL = 00h  not installed, OK to install
 12639                                  			; 01h  not installed, not OK to install
 12640                                  			; FFh  installed
 12641 00001AEE 08C0                    	OR	AL,AL			; is it there?
 12642 00001AF0 740C                    	JZ	short RegenDead		; no, just fail the operation
 12643                                  RegenFail:
 12644                                  	; 17/05/2019 - Retro DOS v4.0
 12645                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12646 00001AF2 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12647                                  
 12648                                  	;cmp	ah,10h
 12649 00001AF6 80FC10                  	cmp	AH,FCB_CLOSE
 12650 00001AF9 7403                    	jz	short RegenDead
 12651 00001AFB E89301                  	call	FCBHardErr		; massive hard error.
 12652                                  RegenDead:
 12653 00001AFE F9                      	STC				; carry set
 12654                                  FCBRegen_retn:
 12655 00001AFF C3                      	retn
 12656                                  
 12657                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12658                                  	; so fail the operation.
 12659                                  
 12660                                  RegenNoSharing:
 12661 00001B00 E85A59                  	call	CheckShare		; Sharing around?
 12662 00001B03 75ED                    	JNZ	short RegenFail
 12663                                  	
 12664                                  	; Find an SFT for this guy.
 12665                                  	
 12666                                  	; 17/05/2019 - Retro DOS v4.0
 12667                                  
 12668                                  	; MSDOS 3.3
 12669                                  	;call	LRUFCB
 12670                                  	;jc	short FCBRegen_retn
 12671                                  	
 12672                                  	; MSDOS 6.0
 12673 00001B05 50                      	push	ax
 12674 00001B06 B000                    	mov	al,0			;indicate it is a regen operation
 12675 00001B08 E8DEFE                  	call	LRUFCB
 12676 00001B0B 58                      	pop	ax
 12677 00001B0C 72F1                    	jc	short FCBRegen_retn
 12678                                  
 12679                                  	;mov	word [es:di+2],8002h
 12680 00001B0E 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12681 00001B14 243F                    	AND	AL,3Fh			; get drive number for flags
 12682 00001B16 98                      	CBW
 12683                                  	;or	ax,4000h
 12684 00001B17 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12685                                  
 12686                                  	; The bits field consists of the upper two bits (dirty and device) 
 12687                                  	; from the SFT and the low 4 bits from the open mode.
 12688                                  
 12689                                  	;mov	cl,[si+1Ah]
 12690 00001B1A 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12691 00001B1D 88CD                    	MOV	CH,CL
 12692 00001B1F 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12693 00001B22 08E8                    	OR	AL,CH
 12694                                  	;and	cl,0Fh
 12695 00001B24 80E10F                  	AND	CL,access_mask		; get the mode bits
 12696                                  	;mov	[es:di+2],cl
 12697 00001B27 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12698                                  	;mov	[es:di+5],ax
 12699 00001B2B 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12700                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12701 00001B2F 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12702                                  	;mov	[es:di+31h],ax
 12703 00001B33 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12704 00001B37 1E                      	push	ds
 12705 00001B38 56                      	push	si
 12706 00001B39 06                      	push	es
 12707 00001B3A 57                      	push	di
 12708 00001B3B 16                      	push	ss
 12709 00001B3C 07                      	pop	es
 12710 00001B3D BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12711                                  
 12712 00001B40 B90800                  	MOV	CX,8
 12713 00001B43 46                      	INC	SI			; Skip past drive byte to name in FCB
 12714                                  
 12715                                  	; MSDOS 3.3
 12716                                  ;RegenCopyName:
 12717                                  	;lodsb
 12718                                  	;call	UCase
 12719                                  	;stosb
 12720                                  	;loop	RegenCopyName
 12721                                  
 12722                                  	; MSDOS 6.0
 12723 00001B44 E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12724                                  
 12725 00001B47 16                      	push	ss	; SS is DOSDATA
 12726 00001B48 1F                      	pop	ds
 12727                                  
 12728                                  	;mov	byte [ATTRIB],16h
 12729 00001B49 C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12730                                  					; Must set this to something interesting
 12731                                  					; to call DEVNAME.
 12732 00001B4E E86127                  	call	DEVNAME 		; check for device
 12733 00001B51 5E                      	pop	si
 12734 00001B52 07                      	pop	es
 12735 00001B53 5E                      	pop	si
 12736 00001B54 1F                      	pop	ds
 12737 00001B55 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12738                                  
 12739                                  	; Device found. We can ignore disk-specific info
 12740                                  
 12741                                  	;mov	[es:di+5],bh
 12742 00001B57 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12743                                  	;mov	byte [es:di+4],0
 12744 00001B5B 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12745                                  					; SS override
 12746                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12747 00001B60 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12748                                  	;mov	[es:di+7],si
 12749 00001B65 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12750                                  	;mov	[es:di+9],ds
 12751 00001B69 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12752 00001B6D C3                      	retn				; carry is clear
 12753                                  
 12754                                  RegenDeadJ:
 12755 00001B6E EB8E                    	JMP	short RegenDead
 12756                                  
 12757                                  	; File found. Just copy in the remaining pieces.
 12758                                  
 12759                                  RegenFileNoSharing:
 12760                                  	;mov	ax,[es:di+5]
 12761 00001B70 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12762 00001B74 83E03F                  	AND	AX,03Fh
 12763 00001B77 1E                      	push	ds
 12764 00001B78 56                      	push	si
 12765 00001B79 E8694F                  	call	FIND_DPB
 12766                                  	;mov	[es:di+7],si
 12767 00001B7C 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12768                                  	;mov	[es:di+9],ds
 12769 00001B80 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12770 00001B84 5E                      	pop	si
 12771 00001B85 1F                      	pop	ds
 12772 00001B86 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 12773                                  					; indicator was bogus
 12774                                  	;mov	ax,[si+1Dh]
 12775 00001B88 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 12776                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 12777                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 12778 00001B8B 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 12779                                  
 12780                                  	; MSDOS 6.0
 12781                                  
 12782                                  	; SR;
 12783                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 12784                                  	; number
 12785                                  
 12786                                  	;mov	al,[si+18h]
 12787 00001B8F 8A4418                  	mov	al,[si+fcb_sfn]
 12788 00001B92 24C0                    	and	al,0C0h		;get the 2 attribute bits
 12789 00001B94 88C4                    	mov	ah,al
 12790 00001B96 D0C4                    	rol	ah,1
 12791 00001B98 D0E8                    	shr	al,1
 12792 00001B9A 08E0                    	or	al,ah
 12793 00001B9C 243F                    	and	al,03Fh		;mask off unused bits
 12794                                  	;mov	[es:di+4],al
 12795 00001B9E 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 12796                                  
 12797                                  	; SR;
 12798                                  	; Update the higher word of the directory sector from the FCB
 12799                                  
 12800                                  	;;mov	al,[si+18h]
 12801 00001BA2 8A4418                  	mov	al,[si+fcb_sfn]
 12802 00001BA5 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 12803 00001BA7 28E4                    	sub	ah,ah
 12804                                  	;mov	[es:di+1Dh],ax
 12805 00001BA9 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 12806                                  
 12807                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12808                                  	;mov	ax,[si+1Bh]
 12809 00001BAD 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 12810                                  	;mov	[es:di+0Bh],ax
 12811 00001BB0 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 12812                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 12813                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 12814 00001BB4 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 12815                                  	;mov	al,[si+1Fh]
 12816 00001BB8 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 12817                                  	;mov  	[es:di+1Fh],al
 12818 00001BBB 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 12819                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12820 00001BBF 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 12821                                  					; Existing FCB entries would be
 12822                                  					; flushed unnecessarily because of
 12823                                  					; check in CheckFCB of the ref_count.
 12824                                  					; July 22/85 - BAS
 12825                                  	;lea	si,[si+1]
 12826 00001BC2 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 12827                                  	;lea	di,[di+20h]
 12828 00001BC5 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 12829                                  	;mov	cx,11
 12830 00001BC8 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 12831                                  	
 12832                                  	; MSDOS 6.0
 12833 00001BCB E807FF                  	call	RegenCopyName	;copy name to SFT 
 12834                                  	
 12835                                  	; MSDOS 3.3
 12836                                  ;RegenCopyName2:
 12837                                  	;lodsb
 12838                                  	;call    UCase
 12839                                  	;stosb
 12840                                  	;loop    RegenCopyName2
 12841                                  
 12842 00001BCE F8                      	clc
 12843 00001BCF C3                      	retn
 12844                                  
 12845                                  ; 17/05/2019 - Retro DOS v4.0
 12846                                  
 12847                                  ;**	BlastSFT - FIll SFT with Garbage
 12848                                  ; --------------------------------------------------------------------------
 12849                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 12850                                  ;	various garbage values to put into the SFT.  I don't know why,
 12851                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 12852                                  ;	necessary to show that the SFT is free after filling it.
 12853                                  ;
 12854                                  ;	ENTRY	(es:di) = address of SFT
 12855                                  ;		(al) = fill character
 12856                                  ;	EXIT	(ax) = -1
 12857                                  ;		'C' clear
 12858                                  ;	USES	AX, CX, Flags
 12859                                  
 12860                                  BlastSFT:
 12861 00001BD0 57                      	push	di
 12862                                  	;mov	cx,53 ; MSDOS 3.3
 12863                                  	;mov	cx,59 ; MSDOS 6.0
 12864 00001BD1 B93B00                  	mov	cx,SF_ENTRY.size
 12865 00001BD4 F3AA                    	rep	stosb
 12866 00001BD6 5F                      	pop	di
 12867 00001BD7 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 12868 00001BD9 268905                  	mov	[es:di],ax
 12869                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 12870                                  	;mov	[es:di+15h],ax
 12871 00001BDC 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 12872 00001BE0 48                      	dec	ax	; -1					    ;
 12873                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 12874 00001BE1 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 12875                                  BlastSFT_retn:
 12876 00001BE5 C3                      	retn				; return with 'C' clear     ;
 12877                                  
 12878                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 12879                                  ; --------------------------------------------------------------------------
 12880                                  ;
 12881                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 12882                                  ;   regenerated.
 12883                                  ;
 12884                                  ;   Inputs:	DS:SI point to FCB (not extended)
 12885                                  ;		AL is SFT index
 12886                                  ;   Outputs:	Carry Set - FCB needs to be regened
 12887                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 12888                                  ;   Registers modified: AX and BX
 12889                                  ;
 12890                                  ; --------------------------------------------------------------------------
 12891                                  
 12892                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12893                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 12894                                  CheckFCB:
 12895                                  		
 12896                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 12897                                  
 12898                                  	; MSDOS 3.3
 12899                                  
 12900                                  	; LES	DI,[CS:SFTFCB]
 12901                                  
 12902                                  	; MSDOS 6.0
 12903                                  	
 12904                                  	; SR;
 12905                                  	; We check if the given FCB is for a local file. If so, we return a 
 12906                                  	; bad SFT status forcing the caller to regenerate the SFT.
 12907                                  
 12908                                  	;test	byte [si+19h],0C0h
 12909 00001BE6 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 12910 00001BEA 744F                    	jz	short BadSFT		;Local file, return bad SFT
 12911 00001BEC 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 12912                                  
 12913                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12914                                  	;cmp	[es:di+4],al
 12915 00001BF1 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 12916 00001BF5 7244                    	JC	short BadSFT
 12917                                  	;;mov	bl,53 ; MSDOS 3.3
 12918                                  	;mov	bl,59 ; MSDOS 6.0
 12919 00001BF7 B33B                    	MOV	BL,SF_ENTRY.size
 12920 00001BF9 F6E3                    	MUL	BL
 12921                                  	;lea	di,[di+6]
 12922 00001BFB 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 12923 00001BFE 01C7                    	ADD	DI,AX
 12924                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 12925 00001C00 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 12926                                  	;cmp	[es:di+31h],ax
 12927 00001C04 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 12928 00001C08 7531                    	JNZ	short BadSFT		; must match process
 12929 00001C0A 26833D00                	cmp	word [es:di],0
 12930                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 12931 00001C0E 742B                    	JZ	short BadSFT		; must also be in use
 12932                                  	;mov	al,[si+19h]
 12933 00001C10 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12934                                  	;test	al,80h
 12935 00001C13 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 12936 00001C15 7430                    	JZ	short CheckNoShare	; No. try local or device
 12937                                  
 12938                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 12939                                  	; FCBSHARE is a superset of FCBNETWORK.
 12940                                  
 12941 00001C17 50                      	PUSH	AX
 12942                                  	;and	al,0C0h
 12943 00001C18 24C0                    	AND	AL,FCBMASK
 12944                                  	;cmp	al,0C0h
 12945 00001C1A 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 12946 00001C1C 58                      	POP	AX
 12947 00001C1D 751E                    	JNZ	short CheckNet		; yes
 12948                                  ;
 12949                                  ;----- In share support -----
 12950                                  ;
 12951                                  	;call	far [cs:JShare+(11*4)]
 12952 00001C1F 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 12953 00001C24 7215                    	JC	short BadSFT
 12954 00001C26 EB06                    	JMP	SHORT CheckD
 12955                                  ;
 12956                                  ;----- End in share support -----
 12957                                  ;
 12958                                  	; 09/11/2022
 12959                                  	; (There is not any procedure/sub
 12960                                  	;  which calls or jumps to CheckFirClus here)
 12961                                  	;;;
 12962                                  CheckFirClus:
 12963                                  	;cmp     bx,[es:di+0Bh]
 12964                                  	; 07/12/2022
 12965 00001C28 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 12966 00001C2C 750D                    	JNZ	short BadSFT
 12967                                  	;;;
 12968                                  CheckD: 
 12969 00001C2E 243F                    	AND	AL,3Fh
 12970                                  	;mov	ah,[es:di+5]
 12971 00001C30 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 12972 00001C34 80E43F                  	AND	AH,3Fh
 12973 00001C37 38C4                    	CMP	AH,AL
 12974                                  	; 16/12/2022
 12975 00001C39 74AA                    	jz	short BlastSFT_retn	; carry is clear
 12976                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12977                                  	;jnz	short BadSFT
 12978                                  ;CheckD_retn:
 12979                                  	;retn
 12980                                  BadSFT: 
 12981 00001C3B F9                      	STC
 12982 00001C3C C3                      	retn
 12983                                  				
 12984                                  CheckNet:
 12985                                  	; 17/05/2019 - Retro DOS v4.0
 12986                                  	
 12987                                  ;----- In net support -----
 12988                                  
 12989                                  	; MSDOS 3.3
 12990                                  	;;mov	ax,[si+1Ah]
 12991                                  	;mov	ax,[si+fcb_net_handle]
 12992                                  	;;cmp	ax,[es:di+1Dh]
 12993                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 12994                                  	;jnz	short BadSFT
 12995                                  	;;cmp	ax,[es:di+19h]
 12996                                  	;cmp	ax,[ES:DI+sf_netid]
 12997                                  	;jnz     short BadSFT
 12998                                  	;;mov	ax,[si+1Eh]
 12999                                  	;mov	ax,[si+fcb_l_attr]
 13000                                  	;;cmp	ax,[es:di+1Bh]
 13001                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13002                                  	;jnz     short BadSFT
 13003                                  
 13004                                  	; MSDOS 6.0
 13005                                  	;mov	ax,[si+1Ch]
 13006 00001C3D 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13007                                  	; 09/11/2022
 13008                                  	;cmp	ax,[es:di+0Bh] 
 13009 00001C40 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13010 00001C44 75F5                    	JNZ	short BadSFT
 13011                                  
 13012                                  ;----- END In net support -----
 13013                                  
 13014                                  CheckNet_retn:
 13015 00001C46 C3                      	retn
 13016                                  
 13017                                  CheckNoShare:
 13018                                  
 13019                                  ; 16/12/2022
 13020                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13021                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13022                                  ;	;test	al,40h
 13023                                  ;	test	AL,FCBDEVICE		; Device?
 13024                                  ;	;jnz	short $+2 ; 09/11/2022
 13025                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13026                                  
 13027                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13028                                  	;;mov	bx,[si+1Dh]
 13029                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13030                                  	;;cmp	bx,[es:di+1Dh]
 13031                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13032                                  	;jnz	short BadSFT
 13033                                  	;;mov	bl,[si+1Fh]
 13034                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13035                                  	;;cmp	bl,[es:di+1Fh]
 13036                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13037                                  	;jnz	short BadSFT
 13038                                  	;;mov	bl,[si+1Ah]
 13039                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13040                                  	;;mov	bh,[es:di+5]
 13041                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13042                                  	;xor	bh,bl
 13043                                  	;and	bh,0C0h
 13044                                  	;jnz	short BadSFT
 13045                                  	;;xor	bl,[es:di+2]
 13046                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13047                                  	;and	bl,0Fh
 13048                                  	;jnz	short BadSFT
 13049                                  	;push	di
 13050                                  	;push	si
 13051                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13052                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13053                                  	;;lea	si,[si+1]
 13054                                  	;LEA	SI,[SI+SYS_FCB.name]
 13055                                  	;;mov	cx,11
 13056                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13057                                  	;repe	cmpsb
 13058                                  	;pop	si
 13059                                  	;pop	di
 13060                                  	;jnz	short BadSFT
 13061                                  	;;mov	bx,[si+1Bh]
 13062                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13063                                  	;jmp	short CheckFirClus
 13064                                  
 13065                                  	; MSDOS 6.0
 13066                                  
 13067                                  	; SR;
 13068                                  	; The code below to match a local FCB with its SFT can no longer be
 13069                                  	; used. We just return a no-match status. This check is done right
 13070                                  	; at the top.
 13071                                  
 13072                                  CheckNoShareDev:
 13073                                  	;mov	bx,[si+1Ah]
 13074 00001C47 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13075                                  	;cmp	bx,[es:di+7]
 13076 00001C4A 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13077 00001C4E 75EB                    	JNZ	short BadSFT
 13078                                  	;mov	bx,[si+1Ch]
 13079 00001C50 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13080                                  	;cmp	bx,[es:di+9]
 13081 00001C53 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13082 00001C57 75E2                    	JNZ	short BadSFT
 13083 00001C59 EBD3                    	JMP	short CheckD
 13084                                  
 13085                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13086                                  ;----------------------------------------------------------------------------
 13087                                  ;
 13088                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13089                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13090                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13091                                  ;	with PID
 13092                                  ;
 13093                                  ;   Inputs:	DS:SI point to FCB
 13094                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13095                                  ;		Carry clear -> OK ES:DI -> SFT
 13096                                  ;		Carry set -> error in ax
 13097                                  ;   Registers modified: ES,DI, AX
 13098                                  ;
 13099                                  ;----------------------------------------------------------------------------
 13100                                  
 13101                                  SFTFromFCB:
 13102                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13103                                  
 13104                                  	; 17/05/2019 - Retro DOS v4.0
 13105                                  
 13106 00001C5B 50                      	push	ax
 13107 00001C5C 53                      	push	bx
 13108                                  	;mov	al,[si+18h]
 13109 00001C5D 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13110 00001C60 E883FF                  	call	CheckFCB
 13111 00001C63 5B                      	pop	bx
 13112 00001C64 58                      	pop	ax
 13113                                  	;MOV	[CS:THISSFT],DI		; SS override
 13114                                  	;MOV	[CS:THISSFT+2],ES
 13115 00001C65 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13116 00001C6A 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13117 00001C6F 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13118                                  	
 13119                                  	; 09/11/2022 (MSDOS 5.0)
 13120                                  	; 31/05/2019
 13121 00001C71 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13122 00001C72 E836E8                  	call	save_world
 13123 00001C75 E865FE                  	call	FCBRegen
 13124 00001C78 E819E8                  	call	restore_world		; use macro restore world
 13125 00001C7B 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13126                                  
 13127                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13128 00001C7C 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13129 00001C80 72C4                    	jc	short CheckNet_retn
 13130                                  
 13131                                  Set_SFT: 
 13132                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13133 00001C82 36C43E[9E05]            	les	di,[ss:THISSFT]
 13134                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13135 00001C87 36FF36[3C03]            	push	word [ss:PROC_ID]
 13136                                  	;pop	word [es:di+31h]
 13137 00001C8C 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13138 00001C90 C3                      	retn				; carry is clear
 13139                                  
 13140                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13141                                  ;----------------------------------------------------------------------------
 13142                                  ;
 13143                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13144                                  ;	unavailable FCB.
 13145                                  ;
 13146                                  ;   Inputs:	none.
 13147                                  ;   Outputs:	none.
 13148                                  ;   Registers modified: all
 13149                                  ;
 13150                                  ;----------------------------------------------------------------------------
 13151                                  
 13152                                  FCBHardErr:
 13153                                  	; 17/05/2019 - Retro DOS v4.0
 13154 00001C91 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13155                                  	;
 13156                                  	;mov	ax,23h
 13157 00001C96 B82300                  	MOV	AX,error_FCB_unavailable
 13158                                  	;;mov	byte [cs:ALLOWED],8
 13159                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13160 00001C99 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13161                                  	
 13162                                  	;LES	BP,[CS:THISDPB]
 13163 00001C9F 26C42E[8A05]            	les	bp,[es:THISDPB]
 13164                                  	
 13165 00001CA4 BF0100                  	MOV	DI,1			; Fake some registers
 13166 00001CA7 89F9                    	MOV	CX,DI
 13167                                  	;mov	dx,[es:bp+0Bh]
 13168 00001CA9 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13169 00001CAD E85F37                  	call	HARDERR
 13170 00001CB0 F9                      	STC
 13171 00001CB1 C3                      	retn
 13172                                  
 13173                                  ;============================================================================
 13174                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13175                                  ;============================================================================
 13176                                  ; 21/07/2018 - Retro DOS v3.0
 13177                                  ; 17/05/2019 - Retro DOS v4.0
 13178                                  
 13179                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13180                                  ;
 13181                                  ;	GetRR
 13182                                  ;	GetExtent
 13183                                  ;	SetExtent
 13184                                  ;	GetExtended
 13185                                  ;	GetRecSize
 13186                                  ;	FCBIO
 13187                                  ;	$FCB_OPEN
 13188                                  ;	$FCB_CREATE
 13189                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13190                                  ;	$FCB_RANDOM_READ_BLOCK
 13191                                  ;	$FCB_SEQ_READ
 13192                                  ;	$FCB_SEQ_WRITE
 13193                                  ;	$FCB_RANDOM_READ
 13194                                  ;	$FCB_RANDOM_WRITE
 13195                                  ;
 13196                                  ;	Revision history:
 13197                                  ;
 13198                                  ;		Created: ARR 4 April 1983
 13199                                  ;			 MZ  6 June  1983 completion of functions
 13200                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13201                                  ;				  times.  Change so successive closes work by
 13202                                  ;				  always returning OK.	Also, detect I/O to
 13203                                  ;				  already closed FCB and return EOF.
 13204                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13205                                  ;				  out of sft into FCB for reconnection
 13206                                  ;
 13207                                  ;	    A000   version 4.00	Jan. 1988
 13208                                  
 13209                                  ; Defintions for FCBOp flags
 13210                                  
 13211                                  RANDOM	equ 2				; random operation
 13212                                  FCBREAD equ 4				; doing a read
 13213                                  BLOCK	equ 8				; doing a block I/O
 13214                                  
 13215                                  ;Break <GetRR - return the random record field in DX:AX>
 13216                                  ;---------------------------------------------------------------------------
 13217                                  ;
 13218                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13219                                  ;	from the FCB pointed to by DS:SI
 13220                                  ;
 13221                                  ;   Inputs:	DS:SI point to an FCB
 13222                                  ;		BX has record size
 13223                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13224                                  ;   Registers modified: none
 13225                                  ;---------------------------------------------------------------------------
 13226                                  
 13227                                  GetRR:
 13228                                  	;mov	ax,[si+21h]
 13229 00001CB2 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13230                                  	;mov	dx,[si+23h]
 13231 00001CB5 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13232 00001CB8 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13233 00001CBB 7202                    	JB	short GetRRBye
 13234 00001CBD 30F6                    	XOR	DH,DH
 13235                                  GetRRBye:
 13236 00001CBF C3                      	retn
 13237                                  
 13238                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13239                                  ;---------------------------------------------------------------------------
 13240                                  ;
 13241                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13242                                  ;	NR fields in the FCB.
 13243                                  ;
 13244                                  ;   Inputs:	DS:SI - point to FCB
 13245                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13246                                  ;   Registers modified: none
 13247                                  ;---------------------------------------------------------------------------
 13248                                  
 13249                                  GetExtent:
 13250                                  	;mov	al,[si+20h]
 13251 00001CC0 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13252                                  	;mov	dx,[si+0Ch]
 13253 00001CC3 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13254 00001CC6 D0E0                    	SHL	AL,1
 13255 00001CC8 D1EA                    	SHR	DX,1
 13256 00001CCA D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13257 00001CCC 88D4                    	MOV	AH,DL
 13258 00001CCE 88F2                    	MOV	DL,DH
 13259 00001CD0 30F6                    	XOR	DH,DH
 13260 00001CD2 C3                      	retn
 13261                                  
 13262                                  ;Break <SetExtent - update the extent/NR field>
 13263                                  ;---------------------------------------------------------------------------
 13264                                  ;
 13265                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13266                                  ;	fields
 13267                                  ;
 13268                                  ;   Inputs:	DS:SI point to FCB
 13269                                  ;		DX:AX is a record location in file
 13270                                  ;   Outputs:	Extent/NR fields are filled in
 13271                                  ;   Registers modified: CX
 13272                                  ;---------------------------------------------------------------------------
 13273                                  
 13274                                  SetExtent:
 13275 00001CD3 50                      	push	ax
 13276 00001CD4 52                      	push	dx
 13277 00001CD5 89C1                    	MOV	CX,AX
 13278 00001CD7 247F                    	AND	AL,7FH			; next rec field
 13279                                  	;mov	[si+20h],al
 13280 00001CD9 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13281 00001CDC 80E180                  	AND	CL,80H			; save upper bit
 13282 00001CDF D1E1                    	SHL	CX,1
 13283 00001CE1 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13284 00001CE3 88E8                    	MOV	AL,CH
 13285 00001CE5 88D4                    	MOV	AH,DL
 13286                                  	;mov	[si+0Ch], ax
 13287 00001CE7 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13288 00001CEA 5A                      	pop	dx
 13289 00001CEB 58                      	pop	ax
 13290 00001CEC C3                      	retn
 13291                                  
 13292                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13293                                  ;---------------------------------------------------------------------------
 13294                                  ;
 13295                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13296                                  ;
 13297                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13298                                  ;   Outputs:	DS:SI point to the FCB part
 13299                                  ;		zeroflag set if not extended fcb
 13300                                  ;   Registers modified: SI
 13301                                  ;---------------------------------------------------------------------------
 13302                                  
 13303                                  GetExtended:
 13304 00001CED 89D6                    	MOV	SI,DX			; point to Something
 13305 00001CEF 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13306 00001CF2 7503                    	JNZ	short GetBye		; not there
 13307 00001CF4 83C607                  	ADD	SI,7			; point to FCB
 13308                                  GetBye:
 13309 00001CF7 39D6                    	CMP	SI,DX			; set condition codes
 13310                                  getextd_retn:
 13311 00001CF9 C3                      	retn
 13312                                  
 13313                                  ;Break <GetRecSize - return in BX the FCB record size>
 13314                                  ;---------------------------------------------------------------------------
 13315                                  ;
 13316                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13317                                  ;
 13318                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13319                                  ;   Outputs:	BX contains the record size
 13320                                  ;   Registers modified: None
 13321                                  ;---------------------------------------------------------------------------
 13322                                  
 13323                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13324                                  GetRecSize:
 13325                                  	;mov	bx,[si+0Eh]
 13326 00001CFA 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13327 00001CFD 09DB                    	OR	BX,BX			; is it nul?
 13328 00001CFF 74F8                    	jz	short getextd_retn
 13329 00001D01 BB8000                  	MOV	BX,128			; use default size
 13330                                  	;mov	[si+0Eh],bx
 13331 00001D04 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13332 00001D07 C3                      	retn
 13333                                  
 13334                                  ;BREAK <FCBIO - do internal FCB I/O>
 13335                                  ;---------------------------------------------------------------------------
 13336                                  ;
 13337                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13338                                  ;
 13339                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13340                                  ;		DS:DX point to FCB
 13341                                  ;		CX may have count of number of records to xfer
 13342                                  ;   Outputs:	AL has error code
 13343                                  ;   Registers modified: all
 13344                                  ;---------------------------------------------------------------------------
 13345                                  
 13346                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13347                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13348                                  FCBIO:
 13349                                  
 13350                                  FEOF	EQU	1
 13351                                  FTRIM	EQU	2
 13352                                  
 13353                                  %define	FCBErr	byte [bp-1]  ; byte	
 13354                                  %define	cRec	word [bp-3]  ; word	
 13355                                  ;%define RecPos	word [bp-7]  ; dword
 13356                                  %define RecPosL	word [bp-7]  ; word
 13357                                  %define RecPosH	word [bp-5]  ; word
 13358                                  %define	RecSize	word [bp-9]  ; word
 13359                                  ;%define bPos	word [bp-13] ; dword
 13360                                  %define bPosL	word [bp-13] ; word
 13361                                  %define bPosH	word [bp-11] ; word
 13362                                  %define cByte	word [bp-15] ; word	
 13363                                  %define cResult word [bp-17] ; word	
 13364                                  %define	cRecRes	word [bp-19] ; word
 13365                                  %define	FCBOp	byte [bp-20] ; byte
 13366                                  
 13367                                  	;Enter
 13368                                  
 13369 00001D08 55                      	push	bp
 13370 00001D09 89E5                    	mov	bp,sp
 13371 00001D0B 83EC14                  	sub	sp,20
 13372                                  	;mov	[bp-20],al
 13373 00001D0E 8846EC                  	MOV	FCBOp,AL
 13374                                  	;mov	byte [bp-1],0
 13375 00001D11 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13376 00001D15 E8D5FF                  	call	GetExtended		;   FCB = GetExtended ();
 13377                                  	;test	byte [bp-20],8
 13378 00001D18 F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13379 00001D1C 7503                    	JNZ	short GetPos
 13380 00001D1E B90100                  	MOV	CX,1			;	cRec = 1;
 13381                                  GetPos:
 13382                                  	;mov	[bp-3],cx
 13383 00001D21 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13384 00001D24 E899FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13385 00001D27 E8D0FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13386                                  	;mov	[bp-9],bx
 13387 00001D2A 895EF7                  	MOV	RecSize,BX
 13388                                  	;test	byte [bp-20],2
 13389 00001D2D F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13390 00001D31 7403                    	JZ	short GetRec
 13391 00001D33 E87CFF                  	call	GetRR			;	RecPos = GetRR ();
 13392                                  GetRec:
 13393                                  	;mov	[bp-7],ax
 13394 00001D36 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13395                                  	;mov	[bp-5],dx
 13396 00001D39 8956FB                  	MOV	RecPosH,DX
 13397 00001D3C E894FF                  	call	SetExtent		;   SetExtent (RecPos);
 13398                                  	;mov	ax,[bp-5]
 13399 00001D3F 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13400 00001D42 F7E3                    	MUL	BX
 13401 00001D44 89C7                    	MOV	DI,AX
 13402                                  	;mov	ax,[bp-7]
 13403 00001D46 8B46F9                  	MOV	AX,RecPosL
 13404 00001D49 F7E3                    	MUL	BX
 13405 00001D4B 01FA                    	ADD	DX,DI
 13406                                  	;mov	[bp-13],ax
 13407 00001D4D 8946F3                  	MOV	bPosL,AX
 13408                                  	;mov	[bp-11],dx
 13409 00001D50 8956F5                  	MOV	bPosH,DX
 13410                                  	;mov	ax,[bp-3]
 13411 00001D53 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13412 00001D56 F7E3                    	MUL	BX
 13413                                  	;mov	[bp-15],ax
 13414 00001D58 8946F1                  	MOV	cByte,AX
 13415                                  
 13416                                  ;hkn; 	SS override
 13417 00001D5B 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13418 00001D60 83D200                  	ADC	DX,0
 13419 00001D63 7419                    	JZ	short DoOper
 13420                                  	;mov	byte [bp-1],2
 13421 00001D65 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13422                                  
 13423                                  ;hkn; 	SS override
 13424 00001D69 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13425 00001D6D F7D8                    	NEG	AX
 13426 00001D6F 7501                    	JNZ	short DoDiv
 13427 00001D71 48                      	DEC	AX
 13428                                  DoDiv:
 13429 00001D72 31D2                    	XOR	DX,DX
 13430 00001D74 F7F3                    	DIV	BX
 13431                                  	;mov	[bp-3],ax
 13432 00001D76 8946FD                  	MOV	cRec,AX
 13433 00001D79 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13434                                  	;mov	[bp-15],ax
 13435 00001D7B 8946F1                  	MOV	cByte,AX		;	}
 13436                                  DoOper:
 13437 00001D7E 31DB                    	XOR	BX,BX
 13438                                  	;mov	[bp-17],bx
 13439 00001D80 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13440                                  	;cmp	[bp-15],bx
 13441 00001D83 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13442 00001D86 7506                    	JNZ	short DoGetExt
 13443                                  	;test	byte [bp-1],2
 13444 00001D88 F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13445                                  	;JZ	short DoGetExt
 13446                                  	;JMP	short SkipOp
 13447                                  	; 16/12/2022
 13448 00001D8C 7576                    	jnz	short SkipOp
 13449                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13450                                  	;JZ	short DoGetExt
 13451                                  	;JMP	short SkipOp
 13452                                  DoGetExt:
 13453 00001D8E E8CAFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13454 00001D91 730F                    	JNC	short ContinueOp
 13455                                  FCBDeath:
 13456 00001D93 E80DE9                  	call	FCB_RET_ERR		; signal error, map for extended
 13457                                  	;mov	word [bp-19],0
 13458 00001D96 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13459                                  	;mov	byte [bp-1],1
 13460 00001D9B C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13461 00001D9F E9EF00                  	JMP	FCBSave 		; bam!
 13462                                  ContinueOp:
 13463                                  	;mov	ax,[si+10h]
 13464 00001DA2 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 13465                                  	;mov	[es:di+11h],ax
 13466 00001DA5 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13467                                  	;mov	ax,[si+12h]
 13468 00001DA9 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13469                                  	;mov	[es:di+13h],ax
 13470 00001DAC 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13471                                  	;mov	ax,[bp-13]
 13472 00001DB0 8B46F3                  	MOV	AX,bPosL
 13473                                  	;mov	dx,[bp-11]
 13474 00001DB3 8B56F5                  	MOV	DX,bPosH
 13475                                  	;mov	[es:di+15h],ax
 13476 00001DB6 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13477                                  	;xchg	dx,[es:di+17h]
 13478 00001DBA 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13479 00001DBE 52                      	PUSH	DX			; save away Open age.
 13480                                  	;mov	cx,[bp-15]
 13481 00001DBF 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13482                                  
 13483                                  ;hkn; DOS_Read is in DOSCODE
 13484 00001DC2 BF[8933]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13485                                  	;test	byte [bp-20],4
 13486 00001DC5 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13487 00001DC9 7503                    	JNZ	short DoContext
 13488                                  
 13489                                  ;hkn; DOS_Write is in DOSCODE
 13490 00001DCB BF[B235]                	MOV	DI,DOS_WRITE
 13491                                  DoContext:
 13492 00001DCE 55                      	push	bp
 13493 00001DCF 1E                      	push	ds
 13494 00001DD0 56                      	push	si
 13495                                  
 13496                                  ;hkn; SS is DOSDATA
 13497 00001DD1 16                      	push	ss
 13498 00001DD2 1F                      	pop	ds
 13499                                  
 13500                                  ;; Fix for disk full
 13501 00001DD3 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE	
 13502                                  	
 13503 00001DD5 5E                      	pop	si
 13504 00001DD6 1F                      	pop	ds
 13505 00001DD7 5D                      	pop	bp
 13506 00001DD8 72B9                    	JC	short FCBDeath
 13507                                  	
 13508 00001DDA 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13509 00001DE0 740A                    	JZ	short NODSKFULL
 13510 00001DE2 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13511                                  	;mov	byte [bp-1],1 
 13512 00001DE8 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13513                                  NODSKFULL:
 13514                                  ;; Fix for disk full
 13515                                  	;mov	[bp-17],cx
 13516 00001DEC 894EEF                  	MOV	cResult,CX
 13517 00001DEF E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13518                                  	;pop	word [es:di+17h]	
 13519 00001DF2 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13520                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 13521                                  	;mov	ax,[es:di+11h]
 13522 00001DF6 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13523                                  	;mov	[si+10h],ax
 13524 00001DFA 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13525                                  	;mov	ax,[es:di+13h]
 13526 00001DFD 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13527                                  	;mov	[si+12h],ax
 13528 00001E01 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13529                                  					;	}
 13530                                  SkipOp:
 13531                                  	;mov	ax,[bp-17]
 13532 00001E04 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13533 00001E07 31D2                    	XOR	DX,DX
 13534                                  	;div	word [bp-9]
 13535 00001E09 F776F7                  	DIV	RecSize
 13536                                  	;mov	[bp-19],ax
 13537 00001E0C 8946ED                  	MOV	cRecRes,AX
 13538                                  	;add	[bp-7],ax
 13539 00001E0F 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13540                                  	;adc	word [bp-5],0
 13541 00001E12 8356FB00                	ADC	RecPosH,0
 13542                                  
 13543                                  ; If we have not gotten the expected number of records, we signal an EOF
 13544                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13545                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13546                                  ; do we.
 13547                                  
 13548                                  	;cmp	ax,[bp-3]
 13549 00001E16 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13550 00001E19 7411                    	JZ	short TryBlank
 13551                                  	;test	byte [bp-20],4
 13552 00001E1B F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13553 00001E1F 7507                    	JNZ	short SetEOF
 13554                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13555                                  	; MSDOS 3.3
 13556                                  	;;test	word [es:di+5],80h
 13557                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13558                                  	;JNZ	short TryBlank
 13559                                  	; MSDOS 5.0 & MSDOS 6.0
 13560                                  	;test	byte [es:di+5],80h
 13561 00001E21 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13562 00001E26 7504                    	jnz	short TryBlank
 13563                                  
 13564                                  SetEOF:
 13565                                  	;mov	byte [bp-1],1
 13566 00001E28 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13567                                  TryBlank:				;
 13568 00001E2C 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13569 00001E2E 7426                    	JZ	short SetExt
 13570                                  	;add	word [bp-7],1
 13571 00001E30 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13572                                  	;adc	word [bp-5],0
 13573 00001E34 8356FB00                	ADC	RecPosH,0
 13574                                  	;test	byte [bp-20],4
 13575 00001E38 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13576 00001E3C 7418                    	JZ	short SetExt
 13577                                  	;inc	word [bp-19]
 13578 00001E3E FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13579                                  	;mov	byte [bp-1],3
 13580 00001E41 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13581                                  	;mov	cx,[bp-9]
 13582 00001E45 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13583 00001E48 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13584 00001E4A 30C0                    	XOR	AL,AL
 13585                                  ;hkn; 	SS override
 13586 00001E4C 36C43E[2C03]            	les     di,[ss:DMAADD]
 13587                                  	;add	di,[bp-17]
 13588 00001E51 037EEF                  	ADD	DI,cResult
 13589 00001E54 F3AA                    	REP	STOSB			;   }	}
 13590                                  SetExt:
 13591                                  	;mov	dx,[bp-5]
 13592 00001E56 8B56FB                  	MOV	DX,RecPosH
 13593                                  	;mov	ax,[bp-7]
 13594 00001E59 8B46F9                  	MOV	AX,RecPosL
 13595                                  	;test	byte [bp-20],2
 13596 00001E5C F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 13597 00001E60 7406                    	JZ	short DoSetExt
 13598                                  	;test	byte [bp-20],8
 13599 00001E62 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 13600 00001E66 7403                    	JZ	short TrySetRR
 13601                                  DoSetExt:
 13602 00001E68 E868FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 13603                                  TrySetRR:
 13604                                  	;test	byte [bp-20],8
 13605 00001E6B F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13606 00001E6F 740F                    	JZ	short TryReturn
 13607                                  	;mov	[si+21h],ax
 13608 00001E71 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 13609                                  	;mov	[si+23h],dl
 13610 00001E74 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 13611                                  	;cmp	word [si+0Eh],64
 13612 00001E77 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 13613 00001E7B 7303                    	JAE	short TryReturn
 13614                                  	;mov	[si+24h],dh
 13615 00001E7D 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 13616                                  TryReturn: 
 13617                                  	;test	byte [bp-20],4
 13618 00001E80 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 13619 00001E84 750B                    	JNZ	short FCBSave
 13620 00001E86 1E                      	push	ds			;	FCB->FDate = date;
 13621 00001E87 E8BCEC                  	call	DATE16			;	FCB->FTime = time;
 13622 00001E8A 1F                      	pop	ds
 13623                                  	;mov	[si+14h],ax
 13624 00001E8B 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13625                                  	;mov	[si+16h],dx
 13626 00001E8E 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 13627                                  FCBSave: 
 13628                                  	;test	byte [bp-20],8
 13629 00001E91 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13630 00001E95 7409                    	jz	short DoReturn
 13631                                  	;mov	cx,[bp-19]
 13632 00001E97 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 13633 00001E9A E82DE6                  	call    Get_User_Stack
 13634                                  	;mov	[si+4],cx
 13635 00001E9D 894C04                  	MOV	[SI+user_env.user_CX],CX
 13636                                  DoReturn:
 13637                                  	;mov	al,[bp-1]
 13638 00001EA0 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 13639                                  	;Leave	
 13640 00001EA3 89EC                    	mov     sp,bp
 13641 00001EA5 5D                      	pop     bp
 13642 00001EA6 C3                      	retn
 13643                                  
 13644                                  ; 22/07/2018 - Retro DOS v3.0
 13645                                  
 13646                                  ;Break <$FCB_Open - open an old-style FCB>
 13647                                  ;---------------------------------------------------------------------------
 13648                                  ;
 13649                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 13650                                  ;	for us and asked to have the rest filled in.
 13651                                  ;
 13652                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13653                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13654                                  ;		FCB has the following fields filled in:
 13655                                  ;		    Time/Date Extent/NR Size
 13656                                  ;---------------------------------------------------------------------------
 13657                                  
 13658                                  _$FCB_OPEN:			; System call 15
 13659                                  
 13660 00001EA7 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 13661                                  
 13662                                  ;hkn; DOS_Open is in DOSCODE
 13663 00001EAA B9[0A2C]                	MOV	CX,DOS_OPEN
 13664                                  
 13665                                  ; The following is common code for Creation and openning of FCBs. AX is
 13666                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 13667                                  ; the FCB
 13668                                  
 13669                                  DoAccess:
 13670 00001EAD 1E                      	push	ds
 13671 00001EAE 52                      	push	dx
 13672 00001EAF 51                      	push	cx
 13673 00001EB0 50                      	push	ax			; save FCB pointer away
 13674                                  
 13675                                  ;hkn; 	OpenBuf is in DOSDATA
 13676 00001EB1 BF[BE03]                	MOV	DI,OPENBUF
 13677 00001EB4 E8794D                  	call	TransFCB		; crunch the fcb
 13678 00001EB7 58                      	pop	ax
 13679 00001EB8 59                      	pop	cx
 13680 00001EB9 5A                      	pop	dx
 13681 00001EBA 1F                      	pop	ds			; get fcb
 13682 00001EBB 7303                    	JNC	short FindFCB		; everything seems ok
 13683                                  FCBOpenErr:
 13684                                  	; AL has error code
 13685 00001EBD E9E3E7                  	jmp	FCB_RET_ERR
 13686                                  FindFCB:
 13687 00001EC0 E82AFE                  	call	GetExtended		; DS:SI will point to FCB
 13688                                  
 13689                                  	; 17/05/2019 - Retro DOS v4.0
 13690                                  
 13691                                  	; MSDOS 3.3
 13692                                  	;call	LRUFCB
 13693                                  	;jc	short HardMessage
 13694                                  
 13695                                  	; MSDOS 6.0
 13696 00001EC3 50                      	push	ax
 13697 00001EC4 B001                    	mov	al,1			;indicate Open/Create operation
 13698 00001EC6 E820FB                  	call	LRUFCB			; get a sft entry (no error)
 13699 00001EC9 58                      	pop	ax
 13700 00001ECA 722A                    	jc	short HardMessage
 13701                                  	
 13702                                  	;mov	word [es:di+2],8000h
 13703 00001ECC 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 13704 00001ED2 1E                      	push	ds
 13705 00001ED3 56                      	push	si	
 13706 00001ED4 53                      	push	bx			; save fcb pointer
 13707 00001ED5 89CE                    	MOV	SI,CX
 13708                                  
 13709                                  ;hkn; SS is DOSDATA
 13710 00001ED7 16                      	push	ss
 13711 00001ED8 1F                      	pop	ds			    ; let DOS_Open see variables
 13712 00001ED9 FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 13713 00001EDB 5B                      	pop	bx
 13714 00001EDC 5E                      	pop	si
 13715 00001EDD 1F                      	pop	ds			; get fcb
 13716                                  
 13717                                  ;hkn; SS override
 13718 00001EDE 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 13719 00001EE3 7318                    	JNC	short FCBOK		; operation succeeded
 13720                                  failopen:
 13721 00001EE5 50                      	PUSH	AX
 13722 00001EE6 B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 13723 00001EE8 E8E5FC                  	call	BlastSFT
 13724 00001EEB 58                      	POP	AX
 13725                                  	;cmp	ax,4
 13726 00001EEC 83F804                  	CMP	AX,error_too_many_open_files
 13727 00001EEF 7405                    	JZ	short HardMessage
 13728                                  	;cmp	ax,24h
 13729 00001EF1 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 13730 00001EF4 7505                    	jnz	short DeadFCB
 13731                                  HardMessage:
 13732 00001EF6 50                      	PUSH	AX
 13733 00001EF7 E897FD                  	call	FCBHardErr
 13734 00001EFA 58                      	POP	AX
 13735                                  DeadFCB:
 13736                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13737                                  	;jmp	FCB_RET_ERR
 13738 00001EFB EBC0                    	jmp	short FCBOpenErr
 13739                                  FCBOK:
 13740                                  	; MSDOS 6.0
 13741 00001EFD E8DCF3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 13742 00001F00 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 13743 00001F02 E85855                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 13744 00001F05 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 13745                                  ;SR;
 13746                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 13747                                  ; LocalSFT variable to reflect this.
 13748                                  
 13749 00001F07 36893E[5D10]            	mov	[ss:LocalSFT],di
 13750 00001F0C 368C06[5F10]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 13751                                  ;;SR;
 13752                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 13753                                  ;;
 13754                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 13755                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 13756                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 13757                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 13758                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 13759                                  
 13760                                  FCBOK2:
 13761                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13762 00001F11 26FF05                  	inc	word [es:di]
 13763                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 13764 00001F14 E802FA                  	call	SaveFCBInfo
 13765                                  	; MSDOS 3.3
 13766                                  	;call	SetOpenAge
 13767                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13768                                  	;test	word [es:di+5],80h
 13769                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13770 00001F17 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 13771 00001F1C 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 13772 00001F1E 8A04                    	MOV	AL,[SI]			; get drive byte
 13773 00001F20 E8944C                  	call	GETTHISDRV		; convert
 13774                                  	;INC	AL
 13775                                  	; 17/12/2022
 13776 00001F23 40                      	inc	ax
 13777 00001F24 8804                    	MOV	[SI],AL			; stash in good drive letter
 13778                                  FCBNoDrive:
 13779                                  	;mov	word [si+0Eh],128
 13780 00001F26 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 13781                                  
 13782                                  	;mov	ax,[es:di+0Dh]
 13783 00001F2B 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 13784                                  	;mov	[si+16h],ax
 13785 00001F2F 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 13786                                  	;mov	ax,[es:di+0Fh]
 13787 00001F32 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 13788                                  	;mov	[si+14h],ax
 13789 00001F36 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13790                                  	;mov	ax,[es:di+11h]
 13791 00001F39 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 13792                                  	;mov	[si+10h],ax
 13793 00001F3D 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13794                                  	;mov	ax,[es:di+13h]
 13795 00001F40 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13796                                  	;mov	[si+12h],ax
 13797 00001F44 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13798 00001F47 31C0                    	XOR	AX,AX			; convenient zero
 13799                                  	;mov	[si+0Ch],ax
 13800 00001F49 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 13801                                  
 13802                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 13803                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 13804                                  
 13805                                  ;hkn; 	SS override
 13806 00001F4C 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 13807                                  	;mov	ah,[es:di+4]
 13808 00001F51 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 13809                                  OpenScan:
 13810                                  	;cmp	al,[si+18h]
 13811 00001F55 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 13812 00001F58 7407                    	JZ	short SkipCheck
 13813 00001F5A 50                      	push	ax			; preserve count
 13814 00001F5B E888FC                  	call	CheckFCB		; do they match
 13815 00001F5E 58                      	pop	ax			; get count back
 13816 00001F5F 7309                    	JNC	short OpenFound		; found a match!
 13817                                  SkipCheck:
 13818 00001F61 FEC0                    	INC	AL			; advance to next FCB
 13819 00001F63 38E0                    	CMP	AL,AH			; table full?
 13820 00001F65 75EE                    	JNZ	short OpenScan		; no, go for more
 13821                                  OpenDone:
 13822 00001F67 30C0                    	xor	al,al			; return success
 13823 00001F69 C3                      	retn
 13824                                  
 13825                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 13826                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 13827                                  ; Consider:
 13828                                  ;
 13829                                  ;   open (foo)	delete (foo) open (bar)
 13830                                  ;
 13831                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 13832                                  ; foo even though foo is no longer needed; this is due to the server closing
 13833                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 13834                                  ; If we were to CLOSE bar, the server would then close the only reference to
 13835                                  ; bar and subsequent I/O would be lost to the redirector.
 13836                                  ;
 13837                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 13838                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 13839                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 13840                                  ; around. This will allow us to access the same file through multiple network
 13841                                  ; connections and NOT prematurely terminate when the ref count on one
 13842                                  ; connection goes to zero.
 13843                                  
 13844                                  OpenFound:
 13845                                  	;mov	[si+18h],al
 13846 00001F6A 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 13847 00001F6D 26FF05                  	inc	word [es:di]
 13848                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13849                                  					; remember this new invocation
 13850 00001F70 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 13851                                  	;mov	[es:di+15h],ax
 13852 00001F74 26894515                	MOV	[ES:DI+sf_LRU],AX
 13853                                  ;
 13854                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 13855                                  ; blast it to prevent other reuse.
 13856                                  ;
 13857 00001F78 16                      	push	ss
 13858 00001F79 1F                      	pop	ds
 13859 00001F7A C43E[9E05]              	LES	DI,[THISSFT]
 13860 00001F7E 26FF0D                  	dec	word [es:di]
 13861                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13862                                  					; free the newly allocated SFT
 13863 00001F81 E81155                  	call	ShareEnd
 13864 00001F84 B043                    	MOV	AL,'C'	 ; 43h
 13865 00001F86 E847FC                  	call	BlastSFT
 13866 00001F89 EBDC                    	JMP	short OpenDone
 13867                                  
 13868                                  ;BREAK	<$FCB_Create - create a new directory entry>
 13869                                  ;----------------------------------------------------------------------------
 13870                                  ;
 13871                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 13872                                  ;	FCB for us and asked to have the rest filled in.
 13873                                  ;
 13874                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13875                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13876                                  ;		FCB has the following fields filled in:
 13877                                  ;		    Time/Date Extent/NR Size
 13878                                  ;----------------------------------------------------------------------------
 13879                                  
 13880                                  _$FCB_CREATE:		; System call 22
 13881                                  
 13882                                  ;hkn; DOS_Create is in DOSCODE
 13883 00001F8B B9[E02A]                	MOV	CX,DOS_CREATE		; routine to call
 13884 00001F8E 31C0                    	XOR	AX,AX			; attributes to create
 13885 00001F90 E85AFD                  	call	GetExtended		; get extended FCB
 13886 00001F93 7403                    	JZ	short DoAccessJ		; not an extended FCB
 13887 00001F95 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 13888                                  DoAccessJ:
 13889 00001F98 E912FF                  	JMP	DoAccess		; do dirty work
 13890                                  
 13891                                  ; 22/07/2018 - Retro DOS v3.0
 13892                                  
 13893                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13894                                  ;----------------------------------------------------------------------------
 13895                                  ;
 13896                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13897                                  ;	and write a number of blocks from it.
 13898                                  ;
 13899                                  ;   Inputs:	DS:DX point to an FCB
 13900                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13901                                  ;		AL <> 0 Not enough room on disk for the output
 13902                                  ;
 13903                                  ;----------------------------------------------------------------------------
 13904                                  
 13905                                  _$FCB_RANDOM_WRITE_BLOCK:
 13906                                  	;mov	AL,0Ah	
 13907 00001F9B B00A                    	MOV	AL,RANDOM+BLOCK
 13908 00001F9D E968FD                  	JMP	FCBIO
 13909                                  
 13910                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13911                                  ;----------------------------------------------------------------------------
 13912                                  ;
 13913                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13914                                  ;	and read a number of blocks from it.
 13915                                  ;
 13916                                  ;   Inputs:	DS:DX point to an FCB
 13917                                  ;   Outputs:	AL = error codes defined above
 13918                                  ;
 13919                                  ;----------------------------------------------------------------------------
 13920                                  
 13921                                  _$FCB_RANDOM_READ_BLOCK:
 13922                                  	;mov	AL,0Eh	
 13923 00001FA0 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13924 00001FA2 E963FD                  	JMP	FCBIO
 13925                                  
 13926                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13927                                  ;----------------------------------------------------------------------------
 13928                                  ;
 13929                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13930                                  ;	memory
 13931                                  ;
 13932                                  ;   Inputs:	DS:DX point to an FCB
 13933                                  ;   Outputs:	AL = error codes defined above
 13934                                  ;
 13935                                  ;----------------------------------------------------------------------------
 13936                                  
 13937                                  _$FCB_SEQ_READ:
 13938                                  	;mov	AL,4	
 13939 00001FA5 B004                    	MOV	AL,FCBREAD
 13940 00001FA7 E95EFD                  	JMP	FCBIO
 13941                                  
 13942                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13943                                  ;----------------------------------------------------------------------------
 13944                                  ;
 13945                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13946                                  ;	file
 13947                                  ;
 13948                                  ;   Inputs:	DS:DX point to an FCB
 13949                                  ;   Outputs:	AL = error codes defined above
 13950                                  ;
 13951                                  ;----------------------------------------------------------------------------
 13952                                  
 13953                                  _$FCB_SEQ_WRITE:
 13954 00001FAA B000                    	MOV	AL,0
 13955 00001FAC E959FD                  	jmp	FCBIO
 13956                                  
 13957                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13958                                  ;----------------------------------------------------------------------------
 13959                                  ;
 13960                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13961                                  ;	record from it.
 13962                                  ;
 13963                                  ;   Inputs:	DS:DX point to an FCB
 13964                                  ;   Outputs:	AL = error codes defined above
 13965                                  ;
 13966                                  ;----------------------------------------------------------------------------
 13967                                  
 13968                                  _$FCB_RANDOM_READ:
 13969                                  	;mov	AL,6	
 13970 00001FAF B006                    	MOV	AL,RANDOM+FCBREAD
 13971 00001FB1 E954FD                  	jmp	FCBIO			; single block
 13972                                  
 13973                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13974                                  ;----------------------------------------------------------------------------
 13975                                  ;
 13976                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13977                                  ;	a record to it.
 13978                                  ;
 13979                                  ;   Inputs:	DS:DX point to an FCB
 13980                                  ;   Outputs:	AL = error codes defined above
 13981                                  ;
 13982                                  ;----------------------------------------------------------------------------
 13983                                  
 13984                                  _$FCB_RANDOM_WRITE:
 13985                                  	;mov	AL,2	
 13986 00001FB4 B002                    	MOV	AL,RANDOM
 13987 00001FB6 E94FFD                  	jmp	FCBIO
 13988                                  
 13989                                  ;============================================================================
 13990                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 13991                                  ;============================================================================
 13992                                  ; 22/07/2018 - Retro DOS v3.0
 13993                                  ; 17/05/2019 - Retro DOS v4.0
 13994                                  
 13995                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 13996                                  
 13997                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13998                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 13999                                  
 14000                                  ;**	Search.asm
 14001                                  ;----------------------------------------------------------------------------
 14002                                  ;	Directory search system calls.
 14003                                  ;	These will be passed direct text of the pathname from the user. 
 14004                                  ;	They will need to be passed through the macro expander prior to
 14005                                  ;	being sent through the low-level stuff. 
 14006                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14007                                  ;
 14008                                  ;	$Dir_Search_First	  written
 14009                                  ;	$Dir_Search_Next	  written
 14010                                  ;	$Find_First	  written
 14011                                  ;	$Find_Next		  written
 14012                                  ;	PackName		  written
 14013                                  ;
 14014                                  ;	Modification history:
 14015                                  ;
 14016                                  ;	  Created: ARR 4 April 1983
 14017                                  
 14018                                  ;----------------------------------------------------------------------------
 14019                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14020                                  ;
 14021                                  ; Inputs:
 14022                                  ;	DS:DX Points to unopenned FCB
 14023                                  ; Function:
 14024                                  ;	Directory is searched for first matching entry and the directory
 14025                                  ;	entry is loaded at the disk transfer address
 14026                                  ; Returns:
 14027                                  ;	AL = -1 if no entries matched, otherwise 0
 14028                                  ;----------------------------------------------------------------------------
 14029                                  
 14030                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14031                                  
 14032                                  _$DIR_SEARCH_FIRST:
 14033 00001FB9 368916[A605]            	MOV	[SS:THISFCB],DX
 14034 00001FBE 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14035 00001FC3 89D6                    	MOV	SI,DX
 14036 00001FC5 803CFF                  	CMP	BYTE [SI],0FFH
 14037 00001FC8 7503                    	JNZ	short NORMFCB4
 14038 00001FCA 83C607                  	ADD	SI,7			; Point to drive select byte
 14039                                  NORMFCB4:
 14040 00001FCD FF34                    	push	word [SI]		; Save original drive byte for later
 14041                                  
 14042 00001FCF 16                      	push	ss
 14043 00001FD0 07                      	pop	es			; get es to address DOSGroup
 14044                                  
 14045 00001FD1 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14046 00001FD4 E8594C                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14047 00001FD7 7304                    	JNC	short SearchIt		; no error, go and look
 14048 00001FD9 5B                      	pop	bx			; Clean stack
 14049                                  
 14050                                  ; Error code is in AX
 14051                                  
 14052                                  	; 09/11/2022
 14053                                  dcf_errj:
 14054 00001FDA E9C6E6                  	jmp	FCB_RET_ERR		; error
 14055                                  
 14056                                  SearchIt:
 14057 00001FDD 16                      	push	ss
 14058 00001FDE 1F                      	pop	ds			; get ready for search
 14059 00001FDF FF36[2C03]              	push	word [DMAADD]
 14060 00001FE3 FF36[2E03]              	push	word [DMAADD+2]
 14061 00001FE7 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14062 00001FED 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14063                                  	; MSDOS 3.3
 14064                                  	;call	DOS_SEARCH_FIRST
 14065                                  	; MSDOS 6.0
 14066 00001FF1 E88501                  	call	GET_FAST_SEARCH		; search
 14067 00001FF4 8F06[2E03]              	pop	word [DMAADD+2]
 14068 00001FF8 8F06[2C03]              	pop	word [DMAADD]
 14069 00001FFC 7303                    	JNC	short SearchSet		; no error, transfer info
 14070 00001FFE 5B                      	pop	bx			; Clean stack
 14071                                  
 14072                                  ; Error code is in AX
 14073                                  
 14074                                  	; 09/11/2022
 14075                                  	;jmp	FCB_RET_ERR
 14076 00001FFF EBD9                    	jmp	short dcf_errj
 14077                                  
 14078                                  ; The search was successful (or the search-next). We store the information
 14079                                  ; into the user's FCB for continuation.
 14080                                  
 14081                                  SearchSet:
 14082 00002001 BE[BE04]                	MOV	SI,SEARCHBUF
 14083 00002004 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14084 00002008 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh		;
 14085 0000200D 7403                    	JZ	short NORMFCB1
 14086 0000200F 83C707                  	ADD	DI,7			; Point past the extension
 14087                                  NORMFCB1:
 14088 00002012 5B                      	pop	bx			; Get original drive byte
 14089 00002013 08DB                    	OR	BL,BL
 14090 00002015 7506                    	JNZ	short SearchDrv
 14091 00002017 8A1E[3603]              	MOV	BL,[CURDRV]
 14092 0000201B FEC3                    	INC	BL
 14093                                  SearchDrv:
 14094 0000201D AC                      	LODSB				; Get correct search contin drive byte
 14095 0000201E 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14096 00002020 47                      	INC	DI
 14097                                  	;STOSB				; Store the correct "user" drive byte
 14098                                  					;  at the start of the search info
 14099 00002021 B90A00                  	MOV	CX,20/2
 14100 00002024 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14101 00002026 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14102                                  					;   byte to AL
 14103 00002028 AA                      	STOSB				; Search contin drive byte at end of
 14104                                  					;   contin info
 14105 00002029 C43E[2C03]              	LES	DI,[DMAADD]
 14106 0000202D F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14107 00002032 740D                    	JZ	short NORMFCB2
 14108 00002034 B0FF                    	MOV	AL,0FFh
 14109 00002036 AA                      	STOSB
 14110 00002037 FEC0                    	INC	AL
 14111                                  	;MOV	CX,5
 14112                                  	; 17/12/2022
 14113 00002039 B105                    	mov	cl,5
 14114 0000203B F3AA                    	REP	STOSB
 14115 0000203D A0[6D05]                	MOV	AL,[SATTRIB]
 14116 00002040 AA                      	STOSB
 14117                                  NORMFCB2:
 14118 00002041 88D8                    	MOV	AL,BL			; User Drive byte
 14119 00002043 AA                      	STOSB
 14120                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14121                                  	; 17/12/2022
 14122 00002044 B110                    	mov	cl,16
 14123 00002046 F3A5                    	REP	MOVSW
 14124 00002048 E955E6                  	jmp	FCB_RET_OK
 14125                                  
 14126                                  ;----------------------------------------------------------------------------
 14127                                  ;
 14128                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14129                                  ;
 14130                                  ; Inputs:
 14131                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14132                                  ; Function:
 14133                                  ;	Directory is searched for the next matching entry and the directory
 14134                                  ;	entry is loaded at the disk transfer address
 14135                                  ; Returns:
 14136                                  ;	AL = -1 if no entries matched, otherwise 0
 14137                                  ;----------------------------------------------------------------------------
 14138                                  
 14139                                  _$DIR_SEARCH_NEXT:
 14140 0000204B 368916[A605]            	MOV	[SS:THISFCB],DX
 14141 00002050 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14142 00002055 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14143 0000205B 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14144                                  
 14145 00002061 16                      	push	ss
 14146 00002062 07                      	pop	es
 14147                                  
 14148 00002063 BF[BE04]                	MOV	DI,SEARCHBUF
 14149                                  
 14150 00002066 89D6                    	MOV	SI,DX
 14151 00002068 803CFF                  	CMP	BYTE [SI],0FFh
 14152 0000206B 750D                    	JNZ	short NORMFCB6
 14153 0000206D 83C606                  	ADD	SI,6
 14154 00002070 AC                      	LODSB
 14155                                  
 14156 00002071 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14157 00002075 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14158                                  NORMFCB6:
 14159 0000207A AC                      	LODSB				; Get original user drive byte
 14160 0000207B 50                      	push	ax			; Put it on stack
 14161 0000207C 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14162 0000207F AA                      	STOSB				; Put in correct place
 14163 00002080 B90A00                  	MOV	CX,20/2
 14164 00002083 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14165                                  
 14166 00002085 16                      	push	ss
 14167 00002086 1F                      	pop	ds
 14168                                  
 14169 00002087 FF36[2C03]              	push	word [DMAADD]
 14170 0000208B FF36[2E03]              	push	word [DMAADD+2]
 14171 0000208F C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14172 00002095 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14173 00002099 E8250E                  	call	DOS_SEARCH_NEXT 	; Find it
 14174 0000209C 8F06[2E03]              	pop	word [DMAADD+2]
 14175 000020A0 8F06[2C03]              	pop	word [DMAADD]
 14176 000020A4 7203                    	JC	short SearchNoMore
 14177 000020A6 E958FF                  	JMP	SearchSet		; Ok set return
 14178                                  
 14179                                  SearchNoMore:
 14180 000020A9 C43E[A605]              	LES	DI,[THISFCB]
 14181 000020AD F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14182 000020B2 7403                    	JZ	short NORMFCB8
 14183 000020B4 83C707                  	ADD	DI,7			; Point past the extension
 14184                                  NORMFCB8:
 14185 000020B7 5B                      	pop	bx			; Get original drive byte
 14186 000020B8 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14187                                  					;  at the right spot
 14188                                  ; error code is in AX
 14189                                  
 14190 000020BB E9E5E5                  	jmp	FCB_RET_ERR
 14191                                  
 14192                                  ; 17/05/2019 - Retro DOS v4.0
 14193                                  
 14194                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14195                                  
 14196                                  ;---------------------------------------------------------------------------
 14197                                  ;
 14198                                  ;   Procedure Name : $FIND_FIRST
 14199                                  ; 
 14200                                  ;   Assembler usage:
 14201                                  ;	    MOV AH, FindFirst
 14202                                  ;	    LDS DX, name
 14203                                  ;	    MOV CX, attr
 14204                                  ;	    INT 21h
 14205                                  ;	; DMA address has datablock
 14206                                  ;
 14207                                  ;   Error Returns:
 14208                                  ;	    AX = error_path_not_found
 14209                                  ;	       = error_no_more_files
 14210                                  ;---------------------------------------------------------------------------
 14211                                  
 14212                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14213                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14214                                  
 14215                                  _$FIND_FIRST:
 14216 000020BE 89D6                    	MOV	SI,DX			; get name in appropriate place
 14217 000020C0 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14218                                  
 14219 000020C5 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14220                                  
 14221 000020C8 E8CB4B                  	call	TransPathSet		; convert the path
 14222 000020CB 7305                    	JNC	short Find_it 		; no error, go and look
 14223                                  FindError:
 14224                                  	;mov	al,3
 14225 000020CD B003                    	mov	al, error_path_not_found ; error and map into one.
 14226                                  	; 09/11/2022
 14227                                  FF_errj:
 14228 000020CF E9BBE5                  	jmp	SYS_RET_ERR
 14229                                  Find_it:
 14230 000020D2 16                      	push	ss
 14231 000020D3 1F                      	pop	ds
 14232                                  
 14233 000020D4 FF36[2C03]              	push	word [DMAADD]
 14234 000020D8 FF36[2E03]              	push	word [DMAADD+2]
 14235 000020DC C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14236 000020E2 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14237                                  	; MSDOS 3.3
 14238                                  	;call	DOS_SEARCH_FIRST
 14239                                  	; MSDOS 6.0
 14240 000020E6 E89000                  	call	GET_FAST_SEARCH 	; search
 14241 000020E9 8F06[2E03]              	pop	word [DMAADD+2]
 14242 000020ED 8F06[2C03]              	pop	word [DMAADD]
 14243                                  	
 14244                                  	; 16/12/2022
 14245                                  	;JNC	short FindSet 		; no error, transfer info
 14246 000020F1 72DC                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14247                                  	;
 14248                                  	;jmp	SYS_RET_ERR
 14249                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14250                                  ;FFF_errj:
 14251                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14252                                  
 14253                                  FindSet:
 14254 000020F3 BE[BE04]                	MOV	SI,SEARCHBUF
 14255 000020F6 C43E[2C03]              	LES	DI,[DMAADD]
 14256 000020FA B91500                  	MOV	CX,21
 14257 000020FD F3A4                    	REP	MOVSB
 14258 000020FF 56                      	PUSH	SI			; Save pointer to start of entry
 14259                                  	;mov	al,[si+0Bh]
 14260 00002100 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14261 00002103 AA                      	STOSB
 14262                                  	;add	si,16h ; 22
 14263 00002104 83C616                  	ADD	SI,dir_entry.dir_time
 14264 00002107 A5                      	MOVSW				; dir_time
 14265 00002108 A5                      	MOVSW				; dir_date
 14266 00002109 46                      	INC	SI
 14267 0000210A 46                      	INC	SI			; Skip dir_first
 14268 0000210B A5                      	MOVSW				; dir_size (2 words)
 14269 0000210C A5                      	MOVSW
 14270 0000210D 5E                      	POP	SI			; Point back to dir_name
 14271 0000210E E83500                   	CALL	PackName
 14272 00002111 E970E5                  	jmp	SYS_RET_OK		; bye with no errors
 14273                                  
 14274                                  ;---------------------------------------------------------------------------
 14275                                  ;
 14276                                  ;   Procedure Name : $FIND_NEXT
 14277                                  ;
 14278                                  ;   Assembler usage:
 14279                                  ;	; dma points at area returned by find_first
 14280                                  ;	    MOV AH, findnext
 14281                                  ;	    INT 21h
 14282                                  ;	; next entry is at dma
 14283                                  ;
 14284                                  ;   Error Returns:
 14285                                  ;	    AX = error_no_more_files
 14286                                  ;---------------------------------------------------------------------------
 14287                                  
 14288                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14289                                  _$FIND_NEXT:
 14290 00002114 16                      	push	ss
 14291 00002115 07                      	pop	es
 14292                                  
 14293 00002116 BF[BE04]                	MOV	DI,SEARCHBUF
 14294                                  
 14295 00002119 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14296                                  
 14297 0000211E B91500                  	MOV	CX,21
 14298 00002121 F3A4                    	REP	MOVSB			; Put the search continuation info
 14299                                  					;  in the right place
 14300 00002123 16                      	push	ss
 14301 00002124 1F                      	pop	ds			; get ready for search
 14302                                  	
 14303 00002125 FF36[2C03]              	push	word [DMAADD]
 14304 00002129 FF36[2E03]              	push	word [DMAADD+2]
 14305 0000212D C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14306 00002133 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14307 00002137 E8870D                  	call	DOS_SEARCH_NEXT 	; Find it
 14308 0000213A 8F06[2E03]              	pop	word [DMAADD+2]
 14309 0000213E 8F06[2C03]              	pop	word [DMAADD]
 14310 00002142 73AF                    	JNC	short FindSet 		; No error, set info
 14311                                  	;jmp	SYS_RET_ERR
 14312                                  	; 16/12/2022
 14313 00002144 EB89                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14314                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14315                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14316                                  
 14317                                  ;---------------------------------------------------------------------------
 14318                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14319                                  ;
 14320                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14321                                  ;	the ASCIZ format.
 14322                                  ;
 14323                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14324                                  ;		(ES:DI) = destination area (13 bytes)
 14325                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14326                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14327                                  ;---------------------------------------------------------------------------
 14328                                  
 14329                                  PackName:
 14330                                  ;	Move over 8 characters to cover the name component, then trim it's
 14331                                  ;	trailing blanks.
 14332                                  
 14333 00002146 B90800                  	MOV	CX,8			; Pack the name
 14334 00002149 F3A4                    	REP	MOVSB			; Move all of it
 14335                                  main_kill_tail:
 14336 0000214B 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14337 00002150 7507                    	JNZ	short find_check_dot
 14338 00002152 4F                      	DEC	DI			; Back up over trailing space
 14339 00002153 41                      	INC	CX
 14340 00002154 83F908                  	CMP	CX,8
 14341 00002157 72F2                    	JB	short main_kill_tail
 14342                                  find_check_dot:
 14343                                  	;CMP	WORD [SI],(" " << 8) | " "
 14344 00002159 813C2020                	cmp     word [si],2020h 
 14345 0000215D 7506                    	JNZ	short got_ext 		; Some chars in extension
 14346 0000215F 807C0220                	CMP	BYTE [SI+2]," "
 14347 00002163 7410                    	JZ	short find_done		; No extension
 14348                                  got_ext:
 14349 00002165 B02E                    	MOV	AL,"."	; 2Eh
 14350 00002167 AA                      	STOSB
 14351                                  	;MOV	CX,3
 14352                                  	; 18/12/2022
 14353                                  	;mov	cl,3
 14354                                  	;REP	MOVSB
 14355 00002168 A4                      	movsb
 14356 00002169 A4                      	movsb
 14357 0000216A A4                      	movsb
 14358                                  ext_kill_tail:
 14359 0000216B 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14360 00002170 7503                    	JNZ	short find_done
 14361 00002172 4F                      	DEC	DI			; Back up over trailing space
 14362 00002173 EBF6                    	JMP	short ext_kill_tail
 14363                                  find_done:
 14364 00002175 31C0                    	XOR	AX,AX
 14365 00002177 AA                      	STOSB				; NUL terminate
 14366 00002178 C3                      	retn
 14367                                  
 14368                                  ;---------------------------------------------------------------------------
 14369                                  
 14370                                  	; 17/05/2019 - Retro DOS v4.0
 14371                                  GET_FAST_SEARCH:
 14372                                  	; 22/07/2018
 14373                                  	; MSDOS 6.0
 14374                                  	; 17/12/2022
 14375 00002179 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14376                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14377                                  					;FO.trigger fastopen ;AN000;
 14378                                  	;call	DOS_SEARCH_FIRST
 14379                                  	;retn
 14380                                  	; 17/12/2022
 14381 0000217F E9530C                  	jmp	DOS_SEARCH_FIRST
 14382                                  
 14383                                  ;============================================================================
 14384                                  ; PATH.ASM, MSDOS 6.0, 1991
 14385                                  ;============================================================================
 14386                                  ; 06/08/2018 - Retro DOS v3.0
 14387                                  ; 17/05/2019 - Retro DOS v4.0
 14388                                  
 14389                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14390                                  
 14391                                  ;**	Directory related system calls. These will be passed direct text of the
 14392                                  ;	pathname from the user. They will need to be passed through the macro
 14393                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14394                                  ;	defined in DISPATCH. The system calls are:
 14395                                  ;
 14396                                  ;	$CURRENT_DIR  Written
 14397                                  ;	$RMDIR	  Written
 14398                                  ;	$CHDIR	  Written
 14399                                  ;	$MKDIR	  Written
 14400                                  ;
 14401                                  ;
 14402                                  ;	Modification history:
 14403                                  ;
 14404                                  ;	    Created: ARR 4 April 1983
 14405                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14406                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14407                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14408                                  ;				    current directory.
 14409                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14410                                  
 14411                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14412                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14413                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14414                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14415                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14416                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14417                                  ;	I_Need	cMeta,BYTE
 14418                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14419                                  
 14420                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14421                                  ;----------------------------------------------------------------------------
 14422                                  ;
 14423                                  ;   Procedure Name : $CURRENT_DIR
 14424                                  ;
 14425                                  ;   Assembler usage:
 14426                                  ;		LDS	SI,area
 14427                                  ;		MOV	DL,drive
 14428                                  ;		INT	21h
 14429                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14430                                  ;	    ; current directory.
 14431                                  ;   Error returns:
 14432                                  ;	    AX = error_invalid_drive
 14433                                  ;
 14434                                  ;----------------------------------------------------------------------------
 14435                                  
 14436                                  _$CURRENT_DIR:
 14437                                  	;06/08/2018 - Retro DOS v3.0
 14438                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14439 00002182 E803F2                  	call	ECritDisk
 14440 00002185 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14441 00002187 E8114A                  	call	GetVisDrv		; grab it
 14442 0000218A 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14443                                  CurdirErr:
 14444 0000218C E814F2                  	call	LCritDisk
 14445                                  
 14446                                  	; MSDOS 3.3
 14447                                  	;mov	al,0Fh
 14448                                  	
 14449                                  	; MSDOS 6.0
 14450 0000218F 1E                      	push	ds
 14451 00002190 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14452 00002195 A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14453 00002198 1F                      	pop	ds
 14454                                  
 14455                                  curdir_errj:
 14456 00002199 E9F1E4                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14457                                  
 14458                                  CurrentValidate:
 14459 0000219C 1E                      	push	ds			; save destination
 14460 0000219D 56                      	push	si
 14461                                  	
 14462                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14463                                  	
 14464                                  	; MSDOS 6.0
 14465 0000219E 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14466 000021A3 C536[A205]              	lds     si,[THISCDS]
 14467                                  
 14468                                  ; 16/12/2022
 14469                                  %if 0
 14470                                  	; 09/11/2022 (following test instruction is nonsense!)
 14471                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14472                                  
 14473                                  	;test	word [si+43h],8000h
 14474                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14475                                  	;jnz	short $+2  ; 09/11/2022	
 14476                                  	jnz	short DoCheck
 14477                                  %endif
 14478                                  
 14479                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14480                                  ; media check.
 14481                                  ;	CMP	word [SI+curdir.ID],0
 14482                                  ;	JZ	short GetDst
 14483                                  DoCheck:
 14484                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14485                                  
 14486                                  	; MSDOS 6.0
 14487 000021A7 1E                      	push	ds
 14488 000021A8 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14489 000021AD C606[4C03]00            	mov	byte [NoSetDir],0
 14490 000021B2 1F                      	pop	ds
 14491                                  
 14492 000021B3 BF[BE03]                	MOV	DI,OPENBUF
 14493 000021B6 E88621                  	call	ValidateCDS		; output is ES:DI -> CDS
 14494                                  
 14495 000021B9 06                      	push	es	 		; swap source and destination
 14496 000021BA 57                      	push	di
 14497 000021BB 5E                      	pop	si
 14498 000021BC 1F                      	pop	ds
 14499                                  GetDst:
 14500 000021BD 5F                      	pop	di
 14501 000021BE 07                      	pop	es			; get real destination
 14502 000021BF 72CB                    	JC	short CurdirErr
 14503                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14504                                  	;
 14505                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14506                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14507                                  	; 16/12/2022
 14508                                  	;add	si,0  ; add si,curdir.text
 14509                                  	;
 14510                                  	;add	si,[si+4Fh] ; 17/05/2019
 14511 000021C1 03744F                  	ADD	SI,[SI+curdir.end]
 14512 000021C4 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14513 000021C7 7501                    	JNZ	short CurrentCopy
 14514 000021C9 46                      	INC	SI
 14515                                  CurrentCopy:
 14516                                  ;	call	FStrCpy
 14517                                  ;; 10/29/86 E5 char
 14518 000021CA 50                      	PUSH	AX
 14519 000021CB AC                      	LODSB				; get char
 14520 000021CC 08C0                    	OR	AL,AL
 14521 000021CE 7413                    	JZ	short FOK
 14522 000021D0 3C05                    	CMP	AL,05H
 14523 000021D2 740D                    	JZ	short FCHANGE
 14524 000021D4 EB01                    	JMP	short FFF
 14525                                  FCPYNEXT:
 14526 000021D6 AC                      	LODSB				; get char
 14527                                  FFF:
 14528 000021D7 3C5C                    	CMP	AL,'\'			; beginning of directory
 14529 000021D9 7508                    	JNZ	short FOK		; no
 14530 000021DB AA                      	STOSB				; put into user's buffer
 14531 000021DC AC                      	LODSB				; 1st char of dir is 05?
 14532 000021DD 3C05                    	CMP	AL,05H
 14533 000021DF 7502                    	JNZ	short FOK		; no
 14534                                  FCHANGE:
 14535 000021E1 B0E5                    	MOV	AL,0E5H			; make it E5
 14536                                  FOK:
 14537 000021E3 AA                      	STOSB				; put into user's buffer
 14538 000021E4 08C0                    	OR	AL,AL			; final char
 14539 000021E6 75EE                    	JNZ	short FCPYNEXT		; no
 14540 000021E8 58                      	POP	AX
 14541                                  
 14542                                  ;; 10/29/86 E5 char
 14543 000021E9 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14544 000021EB E8B5F1                  	call	LCritDisk
 14545 000021EE E993E4                  	jmp	SYS_RET_OK		; no more, bye!
 14546                                  
 14547                                  ; 17/05/2019 - Retro DOS v4.0
 14548                                  
 14549                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14550                                  
 14551                                  ;BREAK <$RmDir -- Remove a directory>
 14552                                  ;----------------------------------------------------------------------------
 14553                                  ;
 14554                                  ; Procedure Name : $RmDir
 14555                                  ;
 14556                                  ; Inputs:
 14557                                  ;	DS:DX Points to asciz name
 14558                                  ; Function:
 14559                                  ;	Delete directory if empty
 14560                                  ; Returns:
 14561                                  ;	STD XENIX Return
 14562                                  ;	AX = error_path_not_found If path bad
 14563                                  ;	AX = error_access_denied If
 14564                                  ;		Directory not empty
 14565                                  ;		Path not directory
 14566                                  ;		Root directory specified
 14567                                  ;		Directory malformed (. and .. not first two entries)
 14568                                  ;		User tries to delete a current directory
 14569                                  ;	AX = error_current_directory
 14570                                  ;
 14571                                  ;----------------------------------------------------------------------------
 14572                                  
 14573                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14574                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14575                                  
 14576                                  _$RMDIR:
 14577 000021F1 52                      	push	dx			; Save ptr to name
 14578 000021F2 1E                      	push	ds
 14579 000021F3 89D6                    	mov	si,dx			; Load ptr into si
 14580 000021F5 BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14581 000021F8 57                      	push	di
 14582 000021F9 E8A24A                  	call	TransPathNoSet		; Translate the name
 14583 000021FC 5F                      	pop	di			; di = ptr to buf for trans name
 14584 000021FD 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14585 000021FF 1F                      	pop	ds
 14586 00002200 5A                      	pop	dx			; Restore the name
 14587                                  	;mov	al,3
 14588 00002201 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14589                                  	; 16/12/2022
 14590                                  rmdir_errj: ; 10/08/2018
 14591                                  chdir_errj:
 14592 00002203 EB94                    	jmp	short curdir_errj
 14593                                  	;jmp	SYS_RET_ERR
 14594                                  rmlset:
 14595 00002205 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14596 0000220B 7512                    	Jnz	short rmerr		;	return (-1);
 14597 0000220D 16                      	push	ss
 14598 0000220E 07                      	pop	es
 14599 0000220F 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14600                                  rmloop: 
 14601 00002211 E8F849                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14602 00002214 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14603 00002216 E810F0                  	call	StrCmp			; Are the 2 paths the same?
 14604 00002219 7404                    	jz	short rmerr		; Yes, report error.
 14605 0000221B FEC0                    	inc	al			; No, inc al to next drive number
 14606 0000221D EBF2                    	jmp	short rmloop		; Go check next drive.
 14607                                  rmerr:
 14608 0000221F 1F                      	pop	ds
 14609 00002220 5A                      	pop	dx			; Restore the name
 14610                                  	;mov	al,10h
 14611 00002221 B010                    	mov	al,error_current_directory ; error
 14612                                  	; 16/12/2022
 14613                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14614                                  ;chdir_errj:
 14615 00002223 EBDE                    	jmp	short rmdir_errj
 14616                                  rmcont:
 14617 00002225 1F                      	pop	ds
 14618 00002226 5A                      	pop	dx			; Restore the name
 14619 00002227 BE[AB32]                	MOV	SI,DOS_RMDIR
 14620 0000222A EB7C                    	JMP	DoDirCall
 14621                                  
 14622                                  ; 17/05/2019 - Retro DOS v4.0
 14623                                  
 14624                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 14625                                  
 14626                                  ;BREAK <$ChDir -- Change current directory on a drive>
 14627                                  ;----------------------------------------------------------------------------
 14628                                  ;
 14629                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 14630                                  ; for setting up the CDS for the specified drive appropriately.  There are
 14631                                  ; several cases to consider:
 14632                                  ;
 14633                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 14634                                  ;	it into a WFP.	We verify the existance of this directory and then
 14635                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 14636                                  ;	directory cluster.
 14637                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 14638                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 14639                                  ;	WFP back into the CDS.
 14640                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 14641                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 14642                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 14643                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 14644                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 14645                                  ;	to process the path but to return the logical CDS and the logical
 14646                                  ;	path.  We then copy the logical path into the logical CDS.
 14647                                  ;
 14648                                  ; Inputs:
 14649                                  ;	DS:DX Points to asciz name
 14650                                  ; Returns:
 14651                                  ;	STD XENIX Return
 14652                                  ;	AX = chdir_path_not_found if error
 14653                                  ;
 14654                                  ;----------------------------------------------------------------------------
 14655                                  
 14656                                  _$CHDIR:
 14657 0000222C BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14658 0000222F 89D6                    	MOV	SI,DX			; get source
 14659 00002231 E85E4A                  	call	TransPath		; go munge the path and get real CDS
 14660 00002234 7304                    	JNC	short ChDirCrack	; no errors, try path
 14661                                  ChDirErrP:
 14662                                  	;mov	al,3
 14663 00002236 B003                    	MOV	AL,error_path_not_found
 14664                                  ChDirErr:
 14665                                  	;jmp	SYS_RET_ERR 	; oops!
 14666                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14667 00002238 EBC9                    	jmp	short chdir_errj
 14668                                  
 14669                                  ChDirCrack:
 14670 0000223A 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 14671 0000223F 75F5                    	JNZ	short ChDirErrP
 14672                                  
 14673                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 14674                                  ; found.
 14675                                  
 14676 00002241 C43E[A205]              	LES	DI,[THISCDS]
 14677 00002245 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 14678 00002248 74EC                    	JZ	short ChDirErrP		;	error ();
 14679                                  
 14680                                  ; Find out if the directory exists.
 14681                                  
 14682 0000224A E81B10                  	call	DOS_CHDIR
 14683                                  	;Jc	short ChDirErr
 14684                                  	; 16/12/2022
 14685 0000224D 72B4                    	jc	short chdir_errj
 14686                                  ;
 14687                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 14688                                  ; not network). If one was seen, all we need to do is copy in the text
 14689                                  ;
 14690 0000224F C43E[A205]              	LES	DI,[THISCDS]
 14691                                  	;test	word [es:di+43h],2000h
 14692                                  	; 17/12/2022
 14693 00002253 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14694                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 14695 00002258 7425                    	JZ	short GotCDS
 14696                                  
 14697                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 14698                                  
 14699 0000225A 06                      	push	es	
 14700 0000225B 57                      	push	di
 14701 0000225C 51                      	push	cx			; save CDS and cluster...
 14702 0000225D E86AE2                  	call	Get_User_Stack		; get original text
 14703                                  	
 14704                                  	;mov	di,[si+6]
 14705 00002260 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 14706                                  	;mov	ds,[si+0Eh]
 14707 00002263 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 14708                                  	
 14709 00002266 BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 14710 00002269 87F7                    	XCHG	SI,DI
 14711 0000226B 30C0                    	XOR	AL,AL			; do no splicing
 14712 0000226D 57                      	push	di
 14713 0000226E E82D4A                  	call	TransPathNoSet		; Munge path
 14714 00002271 5E                      	pop	si
 14715                                  
 14716                                  ; There should NEVER be an error here.
 14717                                  
 14718                                  ;IF FALSE
 14719                                  ;	JNC SKipErr
 14720                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 14721                                  ;SkipErr:
 14722                                  ;ENDIF
 14723 00002272 C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 14724                                  	;mov	word [es:di+49h],-1
 14725 00002276 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 14726                                  					; no valid cluster here...
 14727 0000227C 59                      	pop	cx
 14728 0000227D 5F                      	pop	di
 14729 0000227E 07                      	pop	es
 14730                                  
 14731                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 14732                                  
 14733                                  GotCDS:
 14734                                  
 14735                                  ; wfp_start points to the text. See if it is long enough
 14736                                  
 14737                                  	; MSDOS 3.3
 14738                                  	;push	ss
 14739                                  	;pop	ds
 14740                                  	;mov	si,[WFP_START]
 14741                                  	;push	cx
 14742                                  	;call	DStrLen
 14743                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 14744                                  	;pop	cx
 14745                                  	;ja	short ChDirErrP
 14746                                  
 14747                                  	; MSDOS 6.0
 14748 0000227F E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 14749 00002282 77B2                    	JA	short ChDirErrP
 14750                                  	; MSDOS 3.3 & MSDOS 6.0
 14751                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 14752                                  	; 17/12/2022
 14753 00002284 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 14754 00002289 7512                    	JNZ	short SkipRecency
 14755                                  	; MSDOS 6.0
 14756                                  	;test	word [es:di+43h],2000h
 14757                                  	; 17/12/2022
 14758 0000228B 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14759                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 14760                                  					;PTM. for Join and Subst ;AN000;
 14761 00002290 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 14762 00002292 B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 14763                                  setdirclus:
 14764                                  	;mov	[es:di+49h],cx
 14765 00002295 26894D49                	MOV	[ES:DI+curdir.ID],CX
 14766 00002299 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 14767                                  SkipRecency:
 14768 0000229D E8BAEF                  	call	FStrCpy
 14769 000022A0 30C0                    	XOR	AL,AL
 14770                                  mkdir_ok:
 14771 000022A2 E9DFE3                  	jmp	SYS_RET_OK
 14772                                  
 14773                                  ; 17/05/2019 - Retro DOS v4.0
 14774                                  
 14775                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 14776                                  
 14777                                  ;BREAK <$MkDir - Make a directory entry>
 14778                                  ;---------------------------------------------------------------------------
 14779                                  ;
 14780                                  ; Procedure Name : $MkDir
 14781                                  ; Inputs:
 14782                                  ;	DS:DX Points to asciz name
 14783                                  ; Function:
 14784                                  ;	Make a new directory
 14785                                  ; Returns:
 14786                                  ;	STD XENIX Return
 14787                                  ;	AX = mkdir_path_not_found if path bad
 14788                                  ;	AX = mkdir_access_denied  If
 14789                                  ;		Directory cannot be created
 14790                                  ;		Node already exists
 14791                                  ;		Device name given
 14792                                  ;		Disk or directory(root) full
 14793                                  ;---------------------------------------------------------------------------
 14794                                  
 14795                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14796                                  
 14797                                  _$MKDIR:
 14798 000022A5 BE[6A31]                	MOV	SI,DOS_MKDIR
 14799                                  DoDirCall:
 14800 000022A8 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14801                                  
 14802 000022AB 56                      	push	si
 14803 000022AC 89D6                    	MOV	SI,DX			; get source
 14804 000022AE E8E149                  	call	TransPath		; go munge the path
 14805 000022B1 5E                      	pop	si
 14806 000022B2 7305                    	JNC	short MkDirCrack	; no errors, try path
 14807                                  MkErrP:
 14808 000022B4 B003                    	MOV	AL,error_path_not_found	; oops!
 14809                                  MkErr:
 14810 000022B6 E9D4E3                  	jmp	SYS_RET_ERR
 14811                                  MkDirCrack:
 14812 000022B9 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 14813 000022BF 75F3                    	JNZ	short MkErrP
 14814                                  
 14815                                  	; MSDOS 3.3
 14816                                  	;push	ss
 14817                                  	;pop	ds
 14818                                  	;call	si
 14819                                  	;jb	short MkErr
 14820                                  	;;jmp	short mkdir_ok
 14821                                  	;jmp	SYS_RET_OK
 14822                                  
 14823                                  	; MSDOS 6.0
 14824 000022C1 56                      	PUSH	SI			;PTM.			;AN000;
 14825 000022C2 E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 14826 000022C5 5E                      	POP	SI			;PTM.			;AN000;
 14827 000022C6 7604                    	JBE	short pathok		;PTM.			;AN000;
 14828                                  	;mov	al,5
 14829 000022C8 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 14830                                  	;jmp	SYS_RET_ERR		;PTM.
 14831 000022CA EBEA                    	jmp	short MkErr
 14832                                  pathok:
 14833 000022CC FFD6                    	CALL	SI			; go get file
 14834 000022CE 72E6                    	JC	short MkErr		; no errors
 14835                                  	; 16/12/2022
 14836                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14837 000022D0 EBD0                    	jmp	short mkdir_ok
 14838                                  	;jmp	SYS_RET_OK
 14839                                  
 14840                                  ;----------------------------------------------------------------------------
 14841                                  ;
 14842                                  ; Procedure Name : Check_PathLen
 14843                                  ;
 14844                                  ; Inputs:
 14845                                  ;	nothing
 14846                                  ; Function:
 14847                                  ;	check if final path length greater than 67
 14848                                  ; Returns:
 14849                                  ;	Above flag set if > 67
 14850                                  ;
 14851                                  ;---------------------------------------------------------------------------
 14852                                  
 14853                                  Check_PathLen:
 14854                                  	; 09/09/2018
 14855                                  	;mov	SI,[WFP_START]
 14856 000022D2 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 14857                                  Check_PathLen2:
 14858 000022D7 16                      	push	ss
 14859 000022D8 1F                      	pop	ds
 14860                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 14861 000022D9 51                      	push	CX	
 14862 000022DA E894EF                  	CALL	DStrLen
 14863 000022DD 83F943                  	CMP	CX,DIRSTRLEN ; 67
 14864 000022E0 59                      	POP	CX
 14865 000022E1 C3                      	retn
 14866                                  
 14867                                  ;============================================================================
 14868                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 14869                                  ;============================================================================
 14870                                  ; 07/08/2018 - Retro DOS v3.0
 14871                                  ; 17/05/2019 - Retro DOS v4.0
 14872                                  
 14873                                  ;**	IOCTL system call.
 14874                                  ;----------------------------------------------------------------------------
 14875                                  ;	$IOCTL
 14876                                  ;
 14877                                  ;	  Revision history:
 14878                                  ;
 14879                                  ;		Created: ARR 4 April 1983
 14880                                  ;
 14881                                  ;		GenericIOCTL added:		KGS	22 April 1985
 14882                                  ;
 14883                                  ;		A000	version 4.00	Jan. 1988
 14884                                  ;
 14885                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 14886                                  ;
 14887                                  
 14888                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 14889                                  ;---------------------------------------------------------------------------
 14890                                  ;
 14891                                  ;   Assembler usage:
 14892                                  ;	    MOV     BX, Handle
 14893                                  ;	    MOV     DX, Data
 14894                                  ;
 14895                                  ;	(or LDS     DX,BUF
 14896                                  ;	    MOV     CX,COUNT)
 14897                                  ;
 14898                                  ;	    MOV     AH, Ioctl
 14899                                  ;	    MOV     AL, Request
 14900                                  ;	    INT     21h
 14901                                  ;
 14902                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 14903                                  ;	    attribute word in DX, handle in BX:
 14904                                  ;	    DH = high word of device driver attributes
 14905                                  ;	    DL = low byte of sf_flags
 14906                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 14907                                  ;	    in BX.
 14908                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 14909                                  ;	    into DS:DX.  Return number read in AX.
 14910                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 14911                                  ;	    DS:DX.  Return bytes written in AX.
 14912                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 14913                                  ;	    into DS:DX.  Return number read in AX.
 14914                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 14915                                  ;	    DS:DX.  Return bytes written in AX.
 14916                                  ;	 6  Return input status of handle in BX. If a read will go to the
 14917                                  ;	    device, AL = 0FFh, otherwise 0.
 14918                                  ;	 7  Return output status of handle in BX. If a write will go to the
 14919                                  ;	    device, AL = 0FFh, otherwise 0.
 14920                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 14921                                  ;	    removable media, 0 otherwise.
 14922                                  ;	 9  Return the contents of the device attribute word in DX for the
 14923                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 14924                                  ;	    network. 8000h is the bit for local use.
 14925                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 14926                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 14927                                  ;	    the count and CX is the delay.
 14928                                  ;
 14929                                  ;   Error returns:
 14930                                  ;	    AX = error_invalid_handle
 14931                                  ;	       = error_invalid_function
 14932                                  ;	       = error_invalid_data
 14933                                  ;
 14934                                  ;-------------------------------------------------------------------------------
 14935                                  ;
 14936                                  ;   This is the documentation copied from DOS 4.0 it is much better
 14937                                  ;   than the above
 14938                                  ;
 14939                                  ;	There are several basic forms of IOCTL calls:
 14940                                  ;
 14941                                  ;
 14942                                  ;	** Get/Set device information:	**
 14943                                  ;
 14944                                  ;	ENTRY	(AL) = function code
 14945                                  ;		  0 - Get device information
 14946                                  ;		  1 - Set device information
 14947                                  ;		(BX) = file handle
 14948                                  ;		(DX) = info for "Set Device Information"
 14949                                  ;	EXIT	'C' set if error
 14950                                  ;		  (AX) = error code
 14951                                  ;		'C' clear if OK
 14952                                  ;		  (DX) = info for "Get Device Information"
 14953                                  ;	USES	ALL
 14954                                  ;
 14955                                  ;
 14956                                  ;	**  Read/Write Control Data From/To Handle  **
 14957                                  ;
 14958                                  ;	ENTRY	(AL) = function code
 14959                                  ;		  2 - Read device control info
 14960                                  ;		  3 - Write device control info
 14961                                  ;		(BX) = file handle
 14962                                  ;		(CX) = transfer count
 14963                                  ;		(DS:DX) = address for data
 14964                                  ;	EXIT	'C' set if error
 14965                                  ;		  (AX) = error code
 14966                                  ;		'C' clear if OK
 14967                                  ;		  (AX) = count of bytes transfered
 14968                                  ;	USES	ALL
 14969                                  ;
 14970                                  ;
 14971                                  ;	**  Read/Write Control Data From/To Block Device  **
 14972                                  ;
 14973                                  ;	ENTRY	(AL) = function code
 14974                                  ;		  4 - Read device control info
 14975                                  ;		  5 - Write device control info
 14976                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14977                                  ;		(CX) = transfer count
 14978                                  ;		(DS:DX) = address for data
 14979                                  ;	EXIT	'C' set if error
 14980                                  ;		  (AX) = error code
 14981                                  ;		'C' clear if OK
 14982                                  ;		  (AX) = count of bytes transfered
 14983                                  ;	USES	ALL
 14984                                  ;
 14985                                  ;
 14986                                  ;	**  Get Input/Output Status  **
 14987                                  ;
 14988                                  ;	ENTRY	(AL) = function code
 14989                                  ;		  6 - Get Input status
 14990                                  ;		  7 - Get Output Status
 14991                                  ;		(BX) = file handle
 14992                                  ;	EXIT	'C' set if error
 14993                                  ;		  (AX) = error code
 14994                                  ;		'C' clear if OK
 14995                                  ;		  (AL) = 00 if not ready
 14996                                  ;		  (AL) = FF if ready
 14997                                  ;	USES	ALL
 14998                                  ;
 14999                                  ;
 15000                                  ;	**  Get Drive Information  **
 15001                                  ;
 15002                                  ;	ENTRY	(AL) = function code
 15003                                  ;		  8 - Check for removable media
 15004                                  ;		  9 - Get device attributes
 15005                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15006                                  ;	EXIT	'C' set if error
 15007                                  ;		  (AX) = error code
 15008                                  ;		'C' clear if OK
 15009                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15010                                  ;		  (DX) = device attribute word (func. 9)
 15011                                  ;	USES	ALL
 15012                                  ;
 15013                                  ;
 15014                                  ;	**  Get Redirected bit	**
 15015                                  ;
 15016                                  ;	ENTRY	(AL) = function code
 15017                                  ;		  0Ah - Network stuff
 15018                                  ;		(BX) = file handle
 15019                                  ;	EXIT	'C' set if error
 15020                                  ;		  (AX) = error code
 15021                                  ;		'C' clear if OK
 15022                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15023                                  ;	USES	ALL
 15024                                  ;
 15025                                  ;
 15026                                  ;	**  Change sharer retry parameters  **
 15027                                  ;
 15028                                  ;	ENTRY	(AL) = function code
 15029                                  ;		  0Bh - Set retry parameters
 15030                                  ;		(CX) = retry loop count
 15031                                  ;		(DX) = number of retries
 15032                                  ;	EXIT	'C' set if error
 15033                                  ;		  (AX) = error code
 15034                                  ;		'C' clear if OK
 15035                                  ;	USES	ALL
 15036                                  ;
 15037                                  ;
 15038                                  ;   =================================================================
 15039                                  ;
 15040                                  ;	**  New Standard Control  **
 15041                                  ;
 15042                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15043                                  ;	FORMS ARE OBSOLETE.
 15044                                  ;
 15045                                  ;   =================================================================
 15046                                  ;
 15047                                  ;	ENTRY	(AL) = function code
 15048                                  ;		  0Ch - Control Function subcode
 15049                                  ;		(BX) = File Handle
 15050                                  ;		(CH) = Category Indicator
 15051                                  ;		(CL) = Function within category
 15052                                  ;		(DS:DX) = address for data, if any
 15053                                  ;		(SI) = Passed to device as argument, use depends upon function
 15054                                  ;		(DI) = Passed to device as argument, use depends upon function
 15055                                  ;	EXIT	'C' set if error
 15056                                  ;		  (AX) = error code
 15057                                  ;		'C' clear if OK
 15058                                  ;		  (SI) = Return value, meaning is function dependent
 15059                                  ;		  (DI) = Return value, meaning is function dependent
 15060                                  ;		  (DS:DX) = Return address, use is function dependent
 15061                                  ;	USES	ALL
 15062                                  ;
 15063                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15064                                  ;     (See inc\ioctl.inc for more info)
 15065                                  ;
 15066                                  ;	ENTRY	(AL) = function code
 15067                                  ;		  0Dh - Control Function subcode
 15068                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15069                                  ;		(CH) = Category Indicator
 15070                                  ;		(CL) = Function within category
 15071                                  ;		(DS:DX) = address for data, if any
 15072                                  ;		(SI) = Passed to device as argument, use depends upon function
 15073                                  ;		(DI) = Passed to device as argument, use depends upon function
 15074                                  ;
 15075                                  ;	EXIT	'C' set if error
 15076                                  ;		  (AX) = error code
 15077                                  ;		'C' clear if OK
 15078                                  ;		  (DS:DX) = Return address, use is function dependent
 15079                                  ;	USES	ALL
 15080                                  ;
 15081                                  ;---------------------------------------------------------------------------
 15082                                  	
 15083                                  	; 17/05/2019 - Retro DOS v4.0
 15084                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15085                                  
 15086                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15087                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15088                                  
 15089                                  IOCTLJMPTABLE:	;label	word
 15090                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15091 000022E2 [1E23]                  	dw	ioctl_getset_data	; 0
 15092 000022E4 [1E23]                  	dw	ioctl_getset_data   	; 1
 15093 000022E6 [6E23]                  	dw	ioctl_control_string	; 2
 15094 000022E8 [6E23]                  	dw	ioctl_control_string	; 3
 15095 000022EA [C224]                  	dw	ioctl_get_dev		; 4
 15096 000022EC [C224]                  	dw	ioctl_get_dev		; 5
 15097 000022EE [8823]                  	dw	ioctl_status		; 6
 15098 000022F0 [8823]                  	dw	ioctl_status		; 7
 15099 000022F2 [2924]                  	dw	ioctl_rem_media		; 8
 15100 000022F4 [6724]                  	dw	ioctl_drive_attr	; 9
 15101 000022F6 [B424]                  	dw	ioctl_handle_redir	; A
 15102 000022F8 [A423]                  	dw	Set_Retry_Parameters	; B
 15103 000022FA [B223]                  	dw	GENERICIOCTLHANDLE	; C
 15104 000022FC [C923]                  	dw	GENERICIOCTL		; D
 15105                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15106 000022FE [7325]                  	dw	ioctl_drive_owner	; E
 15107 00002300 [7325]                  	dw	ioctl_drive_owner	; F
 15108                                  	; MSDOS 6.0
 15109 00002302 [B223]                  	dw	query_handle_support	; 10h
 15110 00002304 [C923]                  	dw	query_device_support	; 11h
 15111                                  
 15112                                  	; 11/11/2022
 15113                                  _$IOCTL:
 15114 00002306 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15115 00002308 16                      	push	ss
 15116 00002309 1F                      	pop	ds			;hkn; SS is DOSDATA
 15117                                  
 15118                                  	; MSDOS 3.3
 15119                                  	;cmp	al,0Fh 
 15120                                  	; MSDOS 6.0
 15121 0000230A 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15122 0000230C 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15123                                  
 15124                                  	; 14/01/2024
 15125                                  	; 28/05/2019
 15126                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15127 0000230E 89C7                    	mov	di,ax			; di NOT a PARM
 15128 00002310 81E7FF00                	and	di,0FFh			; di = al
 15129 00002314 D1E7                    	shl	di,1			; di = index into jmp table
 15130                                  	;pop	AX			; Restore AL for generic IOCTL
 15131                                  
 15132 00002316 2EFFA5[E222]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15133                                  
 15134                                  ioctl_bad_funj2:
 15135 0000231B E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15136                                  
 15137                                  ;--------------------------------------------------------------------------
 15138                                  ;
 15139                                  ; IOCTL: AL = 0,1
 15140                                  ;
 15141                                  ; ENTRY: DS = DOSDATA
 15142                                  ;
 15143                                  ;--------------------------------------------------------------------------
 15144                                  
 15145                                  ioctl_getset_data:
 15146                                  	; MSDOS 6.0
 15147 0000231E E87244                  	call	SFFromHandle		; ES:DI -> SFT
 15148 00002321 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15149                                  ioctl_bad_handle:
 15150                                  	;mov	al,6
 15151 00002323 B006                    	mov	al,error_invalid_handle
 15152                                  ioctl_error:
 15153 00002325 E965E3                  	jmp	SYS_RET_ERR
 15154                                  
 15155                                  ioctl_check_permissions:
 15156 00002328 3C00                    	CMP	AL,0
 15157                                  	;mov	al,[es:di+5]
 15158 0000232A 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15159 0000232E 741B                    	JZ	short ioctl_read	; read the byte
 15160                                  
 15161 00002330 08F6                    	or	dh,dh
 15162 00002332 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15163                                  	;mov	al,0Dh
 15164 00002334 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15165                                  	;jmp	SYS_RET_ERR
 15166 00002336 EBED                    	jmp	short ioctl_error
 15167                                  
 15168                                  ioctl_check_device:
 15169 00002338 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15170 0000233A 74DF                    	jz	short ioctl_bad_funj2
 15171 0000233C 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15172                                  					;   device bit!! He can muck with the
 15173                                  					;   others at will.
 15174 0000233F C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15175 00002344 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15176                                  ioctl_ok:
 15177 00002348 E939E3                  	jmp	SYS_RET_OK
 15178                                  
 15179                                  ioctl_read:
 15180 0000234B C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15181 00002350 30E4                    	XOR	AH,AH
 15182 00002352 A880                    	test	AL,devid_device 	; Should I set high byte
 15183 00002354 740D                    	JZ	short ioctl_no_high	; no
 15184 00002356 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15185                                  	;les	di,[es:di+7]
 15186 0000235B 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15187                                  	;mov	ah,[es:di+5]
 15188 0000235F 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15189                                  ioctl_no_high:
 15190 00002363 89C2                    	MOV	DX,AX
 15191                                  ioctl_set_dx:	; 16/12/2022
 15192 00002365 E862E1                  	call	Get_User_Stack
 15193                                  	;mov	[si+6],dx
 15194 00002368 895406                  	MOV	[SI+user_env.user_DX],DX
 15195                                  	;;jmp	SYS_RET_OK
 15196                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15197                                  ioctl_ok_j:
 15198                                  	; 16/12/2022
 15199 0000236B E919E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15200                                  	;jmp	short ioctl_ok
 15201                                  	; 26/07/2019
 15202                                  	;jmp	SYS_RET_OK_clc
 15203                                  
 15204                                  ;--------------------------------------------------------------------------
 15205                                  ;
 15206                                  ; IOCTL: AL = 2,3
 15207                                  ;
 15208                                  ; ENTRY: DS = DOSDATA
 15209                                  ;	 SI = user's DS
 15210                                  ;
 15211                                  ;--------------------------------------------------------------------------
 15212                                  
 15213                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15214                                  ioctl_control_string:
 15215 0000236E E82244                  	call	SFFromHandle		; ES:DI -> SFT
 15216 00002371 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15217                                  	; 07/12/2022
 15218                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15219                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15220                                  	; MSDOS 5.0 & MSDOS 6.0
 15221 00002373 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15222 00002378 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15223 0000237A C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15224 0000237F 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15225 00002383 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15226 00002385 E94201                  	JMP	ioctl_do_string
 15227                                  
 15228                                  ;--------------------------------------------------------------------------
 15229                                  ;
 15230                                  ; IOCTL: AL = 6,7
 15231                                  ;
 15232                                  ; ENTRY: DS = DOSDATA
 15233                                  ;
 15234                                  ;--------------------------------------------------------------------------
 15235                                  
 15236                                  ioctl_status:
 15237 00002388 B401                    	MOV	AH,1
 15238 0000238A 2C06                    	SUB	AL,6			; 6=0,7=1
 15239 0000238C 7402                    	JZ	short ioctl_get_status
 15240 0000238E B403                    	MOV	AH,3
 15241                                  ioctl_get_status:
 15242 00002390 50                      	PUSH	AX
 15243 00002391 E87113                  	call	GET_IO_SFT
 15244 00002394 58                      	POP	AX
 15245                                  	;JNC	short DO_IOFUNC
 15246                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15247                                  	; 16/12/2022
 15248 00002395 728C                    	jc	short ioctl_bad_handle
 15249                                  DO_IOFUNC:
 15250 00002397 E8E021                  	call	IOFUNC
 15251 0000239A 88C4                    	MOV	AH,AL
 15252 0000239C B0FF                    	MOV	AL,0FFH
 15253 0000239E 7502                    	JNZ	short ioctl_status_ret
 15254 000023A0 FEC0                    	INC	AL
 15255                                  ioctl_status_ret:
 15256                                  	;jmp	SYS_RET_OK
 15257                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15258                                  	;jmp	short ioctl_ok_j
 15259                                  	; 16/12/2022
 15260 000023A2 EBA4                    	jmp	short ioctl_ok
 15261                                  
 15262                                  ;--------------------------------------------------------------------------
 15263                                  ;
 15264                                  ; IOCTL: AL = B
 15265                                  ;
 15266                                  ; ENTRY: DS = DOSDATA
 15267                                  ;
 15268                                  ;--------------------------------------------------------------------------
 15269                                  
 15270                                  Set_Retry_Parameters:
 15271                                  	; 09/09/2018
 15272 000023A4 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15273 000023A8 09D2                    	OR	DX,DX			; zero retries not allowed
 15274 000023AA 7475                    	JZ	short ioctl_bad_fun
 15275 000023AC 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15276                                  doneok:
 15277                                  	;jmp	SYS_RET_OK		; Done
 15278                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15279                                  	;jmp	short ioctl_status_ret
 15280                                  	; 16/12/2022
 15281 000023B0 EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15282                                  
 15283                                  ;--------------------------------------------------------------------------
 15284                                  ;
 15285                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15286                                  ;
 15287                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15288                                  ;	SI:DX -> Users Device Parameter Table
 15289                                  ;	IOCALL -> IOCTL_Req structure
 15290                                  ;
 15291                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15292                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15293                                  ;	call.
 15294                                  ;
 15295                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15296                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15297                                  ;         return address off the stack if the drive is invalid.
 15298                                  ;
 15299                                  ;--------------------------------------------------------------------------
 15300                                  
 15301                                  query_handle_support:	; Entry point for handles
 15302                                  GENERICIOCTLHANDLE:
 15303 000023B2 E8DE43                  	call	SFFromHandle		; Get SFT for device.
 15304 000023B5 726F                    	jc	short ioctl_bad_handlej
 15305                                  
 15306                                  	;test	word [es:di+5],8000h
 15307                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15308                                  	;test	byte [es:di+6],80h
 15309 000023B7 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15310 000023BC 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15311                                  
 15312 000023BE C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15313                                  	;les	di,[es:di+7]
 15314 000023C3 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15315 000023C7 EB0F                    	jmp	short Do_GenIOCTL
 15316                                  
 15317                                  query_device_support:	; Entry point for devices:
 15318                                  GENERICIOCTL:
 15319 000023C9 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15320 000023CE 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15321 000023D1 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15322                                  
 15323 000023D3 E88101                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15324 000023D6 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15325                                  
 15326                                  Do_GenIOCTL:
 15327                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15328                                  					; Can device handle Generic IOCTL funcs
 15329                                  	; 09/09/2018
 15330                                  	;test	byte [es:di+4],40h
 15331 000023D8 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15332 000023DD 7442                    	jz	short ioctl_bad_fun
 15333                                  
 15334                                  	; 17/05/2019 - Retro DOS v4.0
 15335                                  
 15336                                  	; MSDOS 6.0
 15337                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15338 000023DF C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15339                                  	;cmp	al,10h
 15340 000023E4 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15341 000023E6 7C0C                    	jl	short SetIOCtlBlock
 15342                                  	
 15343                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15344                                  	;test	byte [es:di+4],80h 
 15345 000023E8 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15346 000023ED 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15347                                  	;
 15348                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15349 000023EF C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15350                                  
 15351                                  SetIOCtlBlock:
 15352 000023F4 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15353 000023F5 57                      	PUSH	DI			; in DS:SI
 15354                                  					; Setup Generic IOCTL Request Block
 15355                                  	;mov	byte [IOCALL_REQLEN],23
 15356 000023F6 C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15357                                  	; 07/09/2018 (MSDOS 3.3)
 15358                                  	;;mov	byte [IOCALL_REQFUNC],19
 15359                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15360                                  	;
 15361 000023FB 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15362 000023FF 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15363 00002403 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15364 00002407 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15365 0000240B 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15366 0000240F 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15367 00002413 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15368                                  
 15369                                  ;hkn; IOCALL is in DOSDATA
 15370 00002417 BB[7C03]                	MOV	BX,IOCALL
 15371                                  
 15372 0000241A 16                      	PUSH	SS
 15373 0000241B 07                      	POP	ES
 15374                                  					; DS:SI -> Device header.
 15375 0000241C 5E                      	POP	SI
 15376 0000241D 1F                      	POP	DS
 15377                                  	; 10/08/2018
 15378 0000241E E9E200                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15379                                  
 15380                                  ioctl_bad_fun:
 15381 00002421 B001                    	mov	al, error_invalid_function  ; 1
 15382 00002423 E967E2                  	jmp	SYS_RET_ERR	
 15383                                  
 15384                                  ioctl_bad_handlej:
 15385 00002426 E9FAFE                  	jmp	ioctl_bad_handle
 15386                                  
 15387                                  ;---------------------------------------------------------------------------
 15388                                  ;
 15389                                  ; IOCTL: AL = 8
 15390                                  ;
 15391                                  ; ENTRY: DS = DOSDATA
 15392                                  ;
 15393                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15394                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15395                                  ;         return address off the stack if the drive is invalid.
 15396                                  ;
 15397                                  ;-------------------------------------------------------------------------
 15398                                  
 15399                                  ioctl_rem_media:
 15400                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15401 00002429 E82B01                  	CALL	Check_If_Net
 15402 0000242C 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15403                                  					;   certainly don't know how to do this
 15404                                  					;   call.
 15405                                  	;test	word [es:di+4],800h
 15406                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15407                                  	;test	byte [es:di+5],8
 15408 0000242E 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15409 00002433 74EC                    	JZ	short ioctl_bad_fun		; NO
 15410                                  
 15411                                  ;hkn; SS override for IOCALL
 15412 00002435 36C606[7E03]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15413 0000243B B00D                    	MOV	AL,REMHL  ; 13
 15414 0000243D 88DC                    	MOV	AH,BL			; Unit number
 15415 0000243F 36A3[7C03]              	MOV	[SS:IOCALL_REQLEN],AX
 15416 00002443 31C0                    	XOR	AX,AX
 15417 00002445 36A3[7F03]              	MOV	[SS:IOCALL_REQSTAT],AX
 15418 00002449 06                      	PUSH	ES
 15419 0000244A 1F                      	POP	DS
 15420 0000244B 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15421 0000244D 16                      	PUSH	SS
 15422 0000244E 07                      	POP	ES
 15423                                  
 15424                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15425 0000244F BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15426 00002452 1E                      	push	ds
 15427 00002453 56                      	push	si
 15428 00002454 E8FA22                  	call	DEVIOCALL2
 15429 00002457 5E                      	pop	si
 15430 00002458 1F                      	pop	ds
 15431                                  
 15432                                  ;hkn; SS override
 15433 00002459 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15434 0000245D 250002                  	AND	AX,STBUI ; 200h		; Mask to busy bit
 15435 00002460 B109                    	MOV	CL,9
 15436 00002462 D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15437                                  ioctl_da_ok_j:	; 11/11/2022
 15438 00002464 E91DE2                  	jmp	SYS_RET_OK
 15439                                  
 15440                                  ;-------------------------------------------------------------------------
 15441                                  ;
 15442                                  ; IOCTL: AL = 9
 15443                                  ;
 15444                                  ; ENTRY: DS = DOSDATA
 15445                                  ;
 15446                                  ;-------------------------------------------------------------------------
 15447                                  
 15448                                  ioctl_drive_attr:
 15449                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15450 00002467 88D8                    	mov	al,bl
 15451 00002469 E84B47                  	call	GETTHISDRV
 15452 0000246C 7241                    	jc	short ioctl_drv_err
 15453 0000246E E8B800                  	call	Get_Driver_BL
 15454                                  	; MSDOS 6.0
 15455 00002471 723C                    	JC	short ioctl_drv_err	; drive not valid
 15456                                  
 15457                                  	;mov	dx,[es:di+4]
 15458 00002473 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15459                                  					; get device attribute word
 15460 00002477 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15461                                  
 15462                                  ;hkn; SS override
 15463 00002479 36C43E[A205]            	LES	DI,[SS:THISCDS]
 15464                                  	;test	word [es:di+43h],8000h
 15465                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15466                                  	;test	byte [es:di+44h],80h
 15467 0000247E 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15468 00002483 7403                    	JZ	short IOCTLShare
 15469                                  
 15470                                  	;or	dx,1000h ; (MSDOS 3.3)
 15471                                  
 15472                                  ;	Net devices don't return a device attribute word.
 15473                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15474                                  
 15475 00002485 BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15476                                  IOCTLShare:
 15477 00002488 16                      	push	ss
 15478 00002489 1F                      	pop	ds
 15479 0000248A BE[BE03]                	MOV	SI,OPENBUF
 15480 0000248D 80C341                  	ADD	BL,"A"	; 41h
 15481 00002490 881C                    	MOV	[SI],BL
 15482 00002492 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15483 00002497 B80003                  	MOV	AX,0300h
 15484 0000249A F8                      	CLC
 15485                                  	;INT	int_IBM
 15486 0000249B CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15487                                  			; DS:SI -> ASCIZ disk device name 
 15488                                  			; (may be full path or only drive
 15489                                  			; specifier--must include the colon)
 15490                                  			; Return: CF clear if absolute disk access allowed
 15491 0000249D 7303                    	JNC	short IOCTLLocal	; Not shared
 15492                                  	;OR	DX,0200H		; Shared, bit 9
 15493                                  	; 17/12/2022
 15494 0000249F 80CE02                  	or	dh,02h
 15495                                  IOCTLLocal:
 15496                                  	;test	word [es:di+43h],1000h
 15497                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15498                                  	;test	byte [es:di+44h],10h
 15499 000024A2 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15500                                  	;JZ	short ioctl_set_DX
 15501                                  	; 16/12/2022
 15502 000024A7 7403                    	jz	short _ioctl_set_DX
 15503                                  	;OR	DX,8000h
 15504                                  	; 17/12/2022
 15505 000024A9 80CE80                  	or	dh,80h
 15506                                  ;ioctl_set_DX:
 15507                                  _ioctl_set_DX:
 15508                                  	; 16/12/2022
 15509 000024AC E9B6FE                  	jmp	ioctl_set_dx
 15510                                  ; 16/12/2022
 15511                                  %if 0	
 15512                                  	call	Get_User_Stack
 15513                                  	MOV	[SI+user_env.user_DX],DX
 15514                                  	;;jmp	SYS_RET_OK
 15515                                  	;; 25/06/2019
 15516                                  	;jmp	SYS_RET_OK_clc
 15517                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15518                                  ioctl_gd_ok_j:
 15519                                  	jmp	short ioctl_da_ok_j
 15520                                  %endif
 15521                                  
 15522                                  ioctl_drv_err:
 15523 000024AF B00F                    	mov	al,error_invalid_drive ; 0Fh
 15524                                  ioctl_gd_err_j:	; 11/11/2022
 15525 000024B1 E9D9E1                  	jmp	SYS_RET_ERR
 15526                                  
 15527                                  ;--------------------------------------------------------------------------
 15528                                  ;
 15529                                  ; IOCTL: AL = A
 15530                                  ;
 15531                                  ; ENTRY: DS = DOSDATA
 15532                                  ;
 15533                                  ;--------------------------------------------------------------------------
 15534                                  
 15535                                  ioctl_handle_redir:
 15536 000024B4 E8DC42                  	call	SFFromHandle		; ES:DI -> SFT
 15537 000024B7 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15538 000024B9 E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15539                                  
 15540                                  ioctl_got_sft:
 15541                                  	;mov	dx,[es:di+5]
 15542 000024BC 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15543                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15544                                  	; 16/12/2022
 15545 000024C0 EBEA                    	jmp	short _ioctl_set_DX
 15546                                  
 15547                                  	; 16/12/2022
 15548                                  ;ioctl_bad_funj:
 15549                                  	;JMP	ioctl_bad_fun
 15550                                  
 15551                                  ;--------------------------------------------------------------------------
 15552                                  ;
 15553                                  ; IOCTL: AL= 4,5
 15554                                  ;
 15555                                  ; ENTRY: DS = DOSDATA
 15556                                  ;	 SI = user's DS
 15557                                  ;
 15558                                  ;
 15559                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15560                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15561                                  ;         return address off the stack if the drive is invalid.
 15562                                  ;
 15563                                  ;-------------------------------------------------------------------------
 15564                                  
 15565                                  ioctl_get_dev:
 15566 000024C2 E89200                  	CALL	Check_If_Net
 15567                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15568                                  					; certainly don't know how to do this
 15569                                  					; call.
 15570                                  	; 16/12/2022
 15571 000024C5 7403                    	jz	short ioctl_do_string
 15572                                  ioctl_bad_funj:
 15573 000024C7 E957FF                  	JMP	ioctl_bad_fun
 15574                                  
 15575                                  ioctl_do_string:
 15576                                  	;test	word [es:di+4],4000h
 15577                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15578                                  	;test	byte [es:di+5],40h
 15579 000024CA 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15580 000024CF 74F6                    	JZ	short ioctl_bad_funj		; NO
 15581                                  					; assume IOCTL read
 15582 000024D1 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15583                                  
 15584 000024D6 A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 15585 000024D8 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 15586                                  
 15587                                  					; it is an IOCTL write
 15588 000024DA C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 15589                                  
 15590                                  ioctl_control_call:
 15591 000024DF B016                    	MOV	AL,DRDWRHL ; 22
 15592                                  ioctl_setup_pkt:
 15593 000024E1 88DC                    	MOV	AH,BL			; Unit number
 15594 000024E3 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15595 000024E6 31C0                    	XOR	AX,AX
 15596 000024E8 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15597 000024EB A2[8903]                	MOV	[IOMED],AL
 15598 000024EE 890E[8E03]              	MOV	[IOSCNT],CX
 15599 000024F2 8916[8A03]              	MOV	[IOXAD],DX
 15600 000024F6 8936[8C03]              	MOV	[IOXAD+2],SI
 15601 000024FA 06                      	PUSH	ES
 15602 000024FB 1F                      	POP	DS
 15603 000024FC 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15604 000024FE 16                      	PUSH	SS
 15605 000024FF 07                      	POP	ES
 15606                                  
 15607 00002500 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15608                                  ioctl_do_IO:
 15609 00002503 E84B22                  	call	DEVIOCALL2
 15610                                  
 15611                                  ;hkn; SS override for IOCALL
 15612                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 15613                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15614                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15615 00002506 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15616 0000250C 7507                    	JNZ	short ioctl_string_err
 15617                                  
 15618                                  ;hkn; SS override
 15619 0000250E 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 15620                                  	; 16/12/2022
 15621 00002512 E96FE1                  	jmp	SYS_RET_OK
 15622                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15623                                  	;jmp	short ioctl_gd_ok_j
 15624                                  
 15625                                  ioctl_string_err:
 15626 00002515 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 15627                                  device_err:
 15628 0000251A 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 15629 0000251E 89F8                    	MOV	AX,DI
 15630 00002520 E8E830                  	call	SET_I24_EXTENDED_ERROR
 15631                                  
 15632                                  ;hkn; use SS override
 15633                                  ;hkn;	mov	ax,[CS:EXTERR]
 15634 00002523 36A1[2403]              	mov	ax,[SS:EXTERR]
 15635                                  	;jmp	SYS_RET_ERR
 15636                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15637 00002527 EB88                    	jmp	short ioctl_gd_err_j
 15638                                  
 15639                                  ; 17/05/2019 - Retro DOS v4.0
 15640                                  
 15641                                  ;--------------------------------------------------------------------------
 15642                                  ; Proc name : Get_Driver_BL
 15643                                  ;
 15644                                  ;	DS is DOSDATA
 15645                                  ;	BL is drive number (0=default)
 15646                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 15647                                  ;	No regs modified
 15648                                  ;
 15649                                  ;---------------------------------------------------------------------------
 15650                                  
 15651                                  Get_Driver_BL:
 15652 00002529 50                      	PUSH	AX
 15653 0000252A 88D8                    	MOV	AL,BL			; Drive
 15654 0000252C E88846                  	call	GETTHISDRV
 15655 0000252F 7224                    	jc	short ioctl_bad_drv
 15656 00002531 30DB                    	XOR	BL,BL			; Unit zero on Net device
 15657 00002533 C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 15658 00002538 C43E[A205]              	LES	DI,[THISCDS]
 15659                                  	;test	word [es:di+43h],8000h
 15660                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15661                                  	;test	byte [es:di+44h],80h
 15662 0000253C 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15663                                  	;les	di,[es:di+45h]
 15664 00002541 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 15665 00002545 750D                    	JNZ	short got_dev_ptr	 ; Is net
 15666 00002547 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15667                                  	;mov	bl,[es:di+1]
 15668 0000254C 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 15669                                  	;les	di,[es:di+13h]
 15670 00002550 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 15671                                  got_dev_ptr:
 15672 00002554 F8                      	CLC
 15673                                  ioctl_bad_drv:
 15674 00002555 58                      	POP	AX
 15675 00002556 C3                      	retn
 15676                                  
 15677                                  ;-------------------------------------------------------------------------
 15678                                  ; Proc Name : Check_If_Net:
 15679                                  ;
 15680                                  ;
 15681                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 15682                                  ; If no device is found, the return address is popped off the stack, and a
 15683                                  ; jump is made to ioctl_drv_err.
 15684                                  ;
 15685                                  ; On Entry:
 15686                                  ; Registers same as those for Get_Driver_BL
 15687                                  ;
 15688                                  ; On Exit:
 15689                                  ; ZERO flag	- set if not a net device
 15690                                  ;		- reset if net device
 15691                                  ; ES:DI -> the device
 15692                                  ;
 15693                                  ;
 15694                                  ; BUGBUG: This function assumes the following stack setup on entry
 15695                                  ;
 15696                                  ;	  SP+2 -> Error return address
 15697                                  ;	  SP   -> Normal return address
 15698                                  ;
 15699                                  ;-------------------------------------------------------------------------
 15700                                  
 15701                                  Check_If_Net:
 15702                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15703 00002557 E8CFFF                  	CALL	Get_Driver_BL
 15704 0000255A 720E                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 15705 0000255C 06                      	PUSH	ES
 15706 0000255D 57                      	PUSH	DI
 15707 0000255E C43E[A205]              	LES	DI,[THISCDS]
 15708                                  	;test	word [es:di+43h],8000h
 15709                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15710                                  	;test	byte [es:di+44h],80h
 15711 00002562 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15712 00002567 5F                      	POP	DI
 15713 00002568 07                      	POP	ES
 15714 00002569 C3                      	retn
 15715                                  
 15716                                  ioctl_drv_err_pop:
 15717 0000256A 58                      	pop	ax			; pop off return address
 15718 0000256B E941FF                  	jmp	ioctl_drv_err
 15719                                  
 15720                                  ioctl_bad_funj3:
 15721 0000256E E9B0FE                  	jmp	ioctl_bad_fun
 15722                                  
 15723                                  ioctl_string_errj:
 15724 00002571 EBA2                    	jmp	short ioctl_string_err  ; 25/05/2019
 15725                                  
 15726                                  ;--------------------------------------------------------------------------
 15727                                  ;
 15728                                  ; IOCTL: AL = E, F
 15729                                  ;
 15730                                  ; ENTRY: DS = DOSDATA
 15731                                  ;
 15732                                  ;
 15733                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 15734                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15735                                  ;         return address off the stack if the drive is invalid.
 15736                                  ;
 15737                                  ;--------------------------------------------------------------------------
 15738                                  
 15739                                  ioctl_drive_owner:
 15740                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15741 00002573 E8E1FF                  	Call	Check_If_Net
 15742 00002576 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 15743                                  					;   certainly don't know how to do this
 15744                                  					;   call.
 15745                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 15746                                  	; 09/09/2018
 15747                                  	;test	byte [es:di+4],40h
 15748 00002578 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15749 0000257D 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 15750                                  	;mov	byte [IOCALL_REQFUNC],23
 15751 0000257F C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 15752 00002584 3C0E                    	cmp	al,0Eh			; Get Owner ?
 15753 00002586 7405                    	jz	short GetOwner
 15754                                  SetOwner:
 15755 00002588 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 15756                                  GetOwner:
 15757 0000258D B00D                    	MOV	AL,OWNHL ; 13
 15758 0000258F 88DC                    	MOV	AH,BL			; Unit number
 15759 00002591 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15760 00002594 31C0                    	XOR	AX,AX
 15761 00002596 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15762 00002599 06                      	PUSH	ES
 15763 0000259A 1F                      	POP	DS
 15764 0000259B 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15765 0000259D 16                      	PUSH	SS
 15766 0000259E 07                      	POP	ES
 15767 0000259F BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15768 000025A2 1E                      	push	ds
 15769 000025A3 56                      	push	si
 15770 000025A4 E8AA21                  	call	DEVIOCALL2
 15771 000025A7 5E                      	pop	si
 15772 000025A8 1F                      	pop	ds
 15773                                  ;hkn; SS override
 15774                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15775                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15776 000025A9 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15777 000025AF 75C0                    	jnz	short ioctl_string_errj
 15778 000025B1 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 15779                                  					; owner returned is 1-based.
 15780 000025B5 E9CCE0                  	jmp	SYS_RET_OK
 15781                                  
 15782                                  ;============================================================================
 15783                                  ; DELETE.ASM, MSDOS 6.0, 1991
 15784                                  ;============================================================================
 15785                                  ; 07/08/2018 - Retro DOS v3.0
 15786                                  ; 17/05/2019 - Retro DOS v4.0
 15787                                  
 15788                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 15789                                  ;	NAME	DOS_DELETE
 15790                                  
 15791                                  ;
 15792                                  ;	Microsoft Confidential
 15793                                  ;	Copyright (C) Microsoft Corporation 1991
 15794                                  ;	All Rights Reserved.
 15795                                  ;
 15796                                  
 15797                                  ;**	DELETE.ASM - Low level routine for deleting files
 15798                                  ;----------------------------------------------------------------------------
 15799                                  ;		DOS_DELETE
 15800                                  ;		REN_DEL_Check
 15801                                  ;		FastOpen_Delete	       ; DOS 3.3
 15802                                  ;		FastOpen_Update	       ; DOS 3.3
 15803                                  
 15804                                  ;   Revision history:
 15805                                  ;
 15806                                  ;   A000  version 4.00	Jan. 1988
 15807                                  ;   A001  Fastopen Rename fix	April 1989
 15808                                  
 15809                                  ;Installed = TRUE
 15810                                  
 15811                                  ;	i_need	NoSetDir,BYTE
 15812                                  ;	i_need	Creating,BYTE
 15813                                  ;	i_need	DELALL,BYTE
 15814                                  ;	i_need	THISDPB,DWORD
 15815                                  ;	i_need	THISSFT,DWORD
 15816                                  ;	i_need	THISCDS,DWORD
 15817                                  ;	i_need	CURBUF,DWORD
 15818                                  ;	i_need	ATTRIB,BYTE
 15819                                  ;	i_need	SATTRIB,BYTE
 15820                                  ;	i_need	WFP_START,WORD
 15821                                  ;	i_need	REN_WFP,WORD			 ;BN001
 15822                                  ;	i_need	NAME1,BYTE			 ;BN001
 15823                                  ;	i_need	FoundDel,BYTE
 15824                                  ;	i_need	AUXSTACK,BYTE
 15825                                  ;	i_need	VOLCHNG_FLAG,BYTE
 15826                                  ;	i_need	JShare,DWORD
 15827                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 15828                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 15829                                  ;
 15830                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 15831                                  ;
 15832                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 15833                                  ;	i_need	DMAADD,DWORD
 15834                                  ;	i_need	RENAMEDMA,BYTE
 15835                                  
 15836                                  ;----------------------------------------------------------------------------
 15837                                  ;
 15838                                  ; Procedure Name : DOS_DELETE
 15839                                  ;
 15840                                  ; Inputs:
 15841                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15842                                  ;		terminated)
 15843                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15844                                  ;		( = -1 if current dir not involved, else
 15845                                  ;		 Points to first char after last "/" of current dir part)
 15846                                  ;	[THISCDS] Points to CDS being used
 15847                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15848                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15849                                  ; Function:
 15850                                  ;	Delete the specified file(s)
 15851                                  ; Outputs:
 15852                                  ;	CARRY CLEAR
 15853                                  ;		OK
 15854                                  ;	CARRY SET
 15855                                  ;	    AX is error code
 15856                                  ;		error_file_not_found
 15857                                  ;			Last element of path not found
 15858                                  ;		error_path_not_found
 15859                                  ;			Bad path (not in curr dir part if present)
 15860                                  ;		error_bad_curr_dir
 15861                                  ;			Bad path in current directory part of path
 15862                                  ;		error_access_denied
 15863                                  ;			Attempt to delete device or directory
 15864                                  ;		***error_sharing_violation***
 15865                                  ;			Deny both access required, generates an INT 24.
 15866                                  ;			This error is NOT returned. The INT 24H is generated,
 15867                                  ;			  and the file is ignored (not deleted). Delete will
 15868                                  ;			  simply continue on looking for more files.
 15869                                  ;			  Carry will NOT be set in this case.
 15870                                  ; DS preserved, others destroyed
 15871                                  ;
 15872                                  ;----------------------------------------------------------------------------
 15873                                  
 15874                                  FILEFOUND   equ 01h
 15875                                  FILEDELETED equ 10h
 15876                                  
 15877                                  
 15878                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15879                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 15880                                  
 15881                                  DOS_DELETE:
 15882                                  
 15883                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 15884                                  ;hkn; appropriately at this point.
 15885                                  
 15886 000025B8 E808ED                  	call	TestNet
 15887 000025BB 7306                    	JNC	short LOCAL_DELETE
 15888                                  
 15889                                  ;IF NOT Installed
 15890                                  ;	transfer NET_DELETE
 15891                                  ;ELSE
 15892                                  	;MOV	AX,(MultNET SHL 8) | 19
 15893                                  	;INT	2FH
 15894                                  	;return
 15895                                  
 15896 000025BD B81311                  	mov	ax,1113h
 15897 000025C0 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 15898                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 15899                                  			;		fully-qualified filename in DOS CS
 15900                                  			; SDA CDS pointer -> current directory structure for drive with file
 15901                                  			; Return: CF set on error
 15902 000025C2 C3                      	retn
 15903                                  ;ENDIF
 15904                                  
 15905                                  LOCAL_DELETE:
 15906 000025C3 C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 15907 000025C8 E8BDED                  	call	ECritDisk
 15908                                  	;mov	word [CREATING],0E500h
 15909 000025CB C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 15910 000025D1 8B36[B205]              	MOV	SI,[WFP_START]
 15911                                  SKPNUL:
 15912 000025D5 AC                      	LODSB
 15913 000025D6 08C0                    	OR	AL,AL
 15914 000025D8 75FB                    	JNZ	short SKPNUL		; go to end
 15915 000025DA 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 15916 000025DD 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 15917 000025E1 7506                    	JNZ	short TEST_QUEST
 15918 000025E3 807C022A                	CMP	BYTE [SI+2],"*"
 15919 000025E7 741F                    	JZ	short CHECK_ATTS
 15920                                  TEST_QUEST:
 15921 000025E9 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 15922 000025EC 87FE                    	XCHG	DI,SI
 15923                                  
 15924 000025EE 16                      	push	ss
 15925                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 15926 000025EF 07                      	pop	es ; 17/05/2019
 15927                                  
 15928 000025F0 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 15929 000025F3 B90400                  	MOV	CX,4		; four sets of "??"
 15930 000025F6 F3AF                    	REPE	SCASW
 15931 000025F8 751C                    	JNZ	short NOT_ALL
 15932 000025FA 87FE                    	XCHG	DI,SI
 15933 000025FC AD                      	LODSW
 15934 000025FD 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 15935 00002600 7514                    	JNZ	short NOT_ALL
 15936 00002602 AD                      	LODSW
 15937 00002603 3D3F3F                  	CMP	AX,"??"
 15938 00002606 750E                    	JNZ	short NOT_ALL
 15939                                  CHECK_ATTS:
 15940 00002608 A0[6D05]                	MOV	AL,[SATTRIB]
 15941                                  	;and	al,1Fh
 15942 0000260B 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15943                                  					; Look only at hidden bits
 15944                                  	;cmp	al,1Fh
 15945 0000260D 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15946                                  					; All must be set
 15947 0000260F 7505                    	JNZ	short NOT_ALL
 15948                                  
 15949                                  ; NOTE WARNING DANGER-----
 15950                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 15951                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 15952                                  
 15953 00002611 C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 15954                                  NOT_ALL:
 15955 00002616 C606[4C03]01            	MOV	byte [NoSetDir],1
 15956 0000261B E8D719                  	call	GetPathNoSet
 15957 0000261E 7312                    	JNC	short Del_found
 15958 00002620 750B                    	JNZ	short _bad_path
 15959 00002622 08C9                    	OR	CL,CL
 15960 00002624 7407                    	JZ	short _bad_path
 15961                                  No_file:
 15962 00002626 B80200                  	MOV	AX,error_file_not_found
 15963                                  ErrorReturn:
 15964 00002629 F9                      	STC
 15965                                  	;call	LCritDisk
 15966                                  	;retn
 15967                                  	; 18/12/2022
 15968 0000262A E976ED                  	jmp	LCritDisk
 15969                                  
 15970                                  _bad_path:
 15971 0000262D B80300                  	MOV	AX,error_path_not_found
 15972 00002630 EBF7                    	JMP	short ErrorReturn
 15973                                  
 15974                                  Del_found:
 15975 00002632 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 15976 00002634 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 15977 00002639 7405                    	JZ	short NOT_DIR
 15978                                  Del_access_err:
 15979 0000263B B80500                  	MOV	AX,error_access_denied
 15980 0000263E EBE9                    	JMP	short ErrorReturn
 15981                                  
 15982                                  NOT_DIR:
 15983 00002640 08E4                    	OR	AH,AH			; Check if device name
 15984 00002642 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 15985                                  
 15986                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 15987                                  
 15988                                  DELFILE:
 15989 00002644 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 15990                                  
 15991                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 15992                                  ; DOS issue a build BPB call the next time this drive is accessed.
 15993                                  
 15994 00002649 1E                      	PUSH	DS
 15995 0000264A 8A26[7F05]              	MOV	AH,[DELALL]
 15996 0000264E C53E[E205]              	LDS	DI,[CURBUF]
 15997                                  	
 15998                                  ;hkn; SS override
 15999 00002652 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16000 00002658 7509                    	JNZ	short DoDelete		; yes
 16001                                  
 16002 0000265A F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16003 0000265E 7403                    	JZ	short DoDelete		; not read only
 16004                                  
 16005 00002660 1F                      	POP	DS
 16006 00002661 EB32                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16007                                  
 16008                                  DoDelete:
 16009 00002663 E88400                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16010 00002666 7303                    	JNC	short DEL_SHARE_OK
 16011 00002668 1F                      	POP	DS
 16012 00002669 EB2A                    	JMP	SHORT DELNXT		; Skip it
 16013                                  
 16014                                  DEL_SHARE_OK:
 16015                                  	; 17/05/2019 - Retro DOS v4.0
 16016                                  	; MSDOS 6.0
 16017                                  	;test	byte [di+5],40h
 16018 0000266B F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16019                                  					;LB. if already dirty		  ;AN000;
 16020 0000266F 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16021 00002671 E8FD35                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16022                                  	;or	byte [di+5],40h
 16023 00002674 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16024                                  yesdirty:
 16025 00002678 8827                    	mov	[bx],ah 
 16026                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16027 0000267A 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16028 0000267C 1F                      	POP	DS
 16029 0000267D 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16030                                  
 16031 00002682 83FB02                  	CMP	BX,2
 16032 00002685 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16033                                  	;cmp	bx,[es:bp+0Dh]
 16034 00002687 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16035 0000268B 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16036                                  
 16037 0000268D E83529                  	call	RELEASE 		; Free file data
 16038 00002690 7252                    	JC	short No_fileJ
 16039                                  
 16040                                  ; DOS 3.3  FastOpen
 16041                                  
 16042 00002692 E8C300                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16043                                  
 16044                                  ; DOS 3.3  FastOpen
 16045                                  
 16046                                  DELNXT:
 16047 00002695 C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16048 00002699 E8C218                  	call	GETENTRY		; Registers need to be reset
 16049 0000269C 7246                    	JC	short No_fileJ
 16050 0000269E E8F617                  	call	NEXTENT
 16051 000026A1 73A1                    	JNC	short DELFILE
 16052 000026A3 C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16053                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16054                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16055                                  	;;mov	al,[es:bp+0]
 16056                                  	; 15/12/2022
 16057 000026A7 268A4600                	MOV	AL,[ES:BP]
 16058 000026AB E8BB34                  	call	FLUSHBUF
 16059 000026AE 7234                    	JC	short No_fileJ
 16060                                  ;
 16061                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16062                                  ;
 16063                                  ;   not found not deleted		file not found
 16064                                  ;   not found	  deleted		*** impossible ***
 16065                                  ;	found not deleted		access denied (read-only)
 16066                                  ;	found	  deleted		no error
 16067                                  ;
 16068 000026B0 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16069 000026B5 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16070                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16071                                  ; and to force the DOS to issue a media check.
 16072 000026B7 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16073 000026BC 741C                    	jz	short No_Set_Flag
 16074 000026BE 50                      	PUSH	AX
 16075 000026BF 06                      	PUSH	ES
 16076 000026C0 57                      	PUSH	DI
 16077 000026C1 C43E[A205]              	LES	DI,[THISCDS]
 16078 000026C5 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16079 000026C8 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16080 000026CB 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16081                                  	
 16082                                  	; MSDOS 6.0
 16083 000026CF 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16084 000026D1 E8DE04                  	call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 16085                                  	 
 16086 000026D4 E82431                  	call	FATREAD_CDS		; force media check
 16087 000026D7 5F                      	POP	DI
 16088 000026D8 07                      	POP	ES
 16089 000026D9 58                      	POP	AX
 16090                                  No_Set_Flag:
 16091                                  	;call	LCritDisk		; carry is clear
 16092                                  	;retn
 16093                                  	; 18/12/2022
 16094 000026DA E9C6EC                  	jmp	LCritDisk
 16095                                  DelError:
 16096 000026DD F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16097 000026E2 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16098                                  No_fileJ:
 16099 000026E4 E93FFF                  	JMP	No_file ; 10/08/2018 		; Nope
 16100                                  Del_access_errJ:
 16101 000026E7 E951FF                  	JMP	Del_access_err ; 10/08/2018
 16102                                  
 16103                                  ; 08/08/2018 - Retro DOS v3.0
 16104                                  
 16105                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16106                                  ;---------------------------------------------------------------------------
 16107                                  ; Procedure Name : REN_DEL_Check
 16108                                  ;
 16109                                  ; Inputs:
 16110                                  ;	[THISDPB] set
 16111                                  ;	[CURBUF+2]:BX points to entry
 16112                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16113                                  ;	[WFP_Start] points to name
 16114                                  ; Function:
 16115                                  ;	Check for Exclusive access on given file.
 16116                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16117                                  ; Outputs:
 16118                                  ;	ES:BP = [THISDPB]
 16119                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16120                                  ;		last element will be loaded from the directory entry.  This is
 16121                                  ;		so the name given to the sharer doesn't have any meta chars in
 16122                                  ;		it.
 16123                                  ;	Carry set if sharing violation, INT 24H generated
 16124                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16125                                  ;		This is because input AX is preserved.
 16126                                  ;		Caller must set the error if needed.
 16127                                  ;	Carry clear
 16128                                  ;		OK
 16129                                  ; AX,DS,BX,SI,DI preserved
 16130                                  ;---------------------------------------------------------------------------
 16131                                  
 16132                                  REN_DEL_Check:
 16133                                  
 16134 000026EA 1E                      	PUSH	DS
 16135 000026EB 57                      	PUSH	DI
 16136 000026EC 50                      	PUSH	AX
 16137 000026ED 53                      	PUSH	BX
 16138 000026EE 56                      	PUSH	SI		; Save CURBUF pointers
 16139                                  	
 16140 000026EF 16                      	push	ss
 16141 000026F0 07                      	pop	es
 16142                                  
 16143                                  ;hkn; context ES will assume ES to DOSDATA
 16144                                  ;hkn; ASSUME	ES:DOSGROUP
 16145                                  
 16146                                  ;hkn; SS override
 16147 000026F1 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16148 000026F6 89DE                    	MOV	SI,BX
 16149                                  
 16150                                  ;hkn; SS override
 16151 000026F8 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16152 000026FD 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16153 000026FF 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 16154 00002702 E85EEB                  	call	StrLen		; CX is length of ES:DI including NUL
 16155 00002705 49                      	DEC	CX		; Don't include nul in count
 16156 00002706 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16157 00002708 E86A47                  	call	SkipBack	; Back up one element
 16158 0000270B 47                      	INC	DI		; Point to start of last element
 16159                                  
 16160                                  	; 17/05/2019 - Retro DOS v4.0
 16161                                  ;hkn; SS override
 16162                                  	; MSDOS 6.0
 16163 0000270C 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16164                                  	;
 16165 00002711 E832FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16166 00002714 5E                      	POP	SI		; Get back entry pointers
 16167 00002715 5B                      	POP	BX
 16168 00002716 53                      	PUSH	BX
 16169 00002717 56                      	PUSH	SI		; Back on stack
 16170                                  	
 16171 00002718 16                      	push	ss
 16172 00002719 1F                      	pop	ds
 16173                                  
 16174                                  ;hkn; context DS will assume ES to DOSDATA
 16175                                  ;hkn; ASSUME	DS:DOSGROUP
 16176                                  
 16177                                  ; Close the file if possible by us.
 16178                                  ;
 16179                                  ;if installed
 16180 0000271A FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16181                                  ;else
 16182                                  ;	Call	ShCloseFile
 16183                                  ;endif
 16184 0000271E 8C1E[A005]              	MOV	[THISSFT+2],DS
 16185                                  
 16186                                  ;hkn; AUXSTACK is in DOSDATA
 16187 00002722 C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16188                                  				; Scratch space
 16189 00002728 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16190 0000272A E81425                  	call	DOOPEN		; Fill in SFT for share check
 16191 0000272D C43E[9E05]              	LES	DI,[THISSFT]
 16192                                  	;mov	word [es:di+2],10h
 16193 00002731 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16194                                  				; requires exclusive access
 16195                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16196 00002737 26C7050100              	mov	word [ES:DI],1
 16197 0000273C E85B4D                  	call	ShareEnter
 16198 0000273F 720D                    	jc	short CheckDone
 16199 00002741 C43E[9E05]              	LES	DI,[THISSFT]
 16200                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16201 00002745 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16202                                  	
 16203 0000274A E8484D                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16204 0000274D F8                      	CLC
 16205                                  CheckDone:
 16206 0000274E C42E[8A05]              	LES	BP,[THISDPB]
 16207 00002752 5E                      	POP	SI
 16208 00002753 5B                      	POP	BX
 16209 00002754 58                      	POP	AX
 16210 00002755 5F                      	POP	DI
 16211 00002756 1F                      	POP	DS
 16212 00002757 C3                      	retn
 16213                                  
 16214                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16215                                  ;---------------------------------------------------------------------------
 16216                                  ; Procedure Name : FastOpen_Delete
 16217                                  ; Inputs:
 16218                                  ;	None
 16219                                  ; Function:
 16220                                  ;	Call FastOpen to delete the dir info.
 16221                                  ; Outputs:
 16222                                  ;	None
 16223                                  ;---------------------------------------------------------------------------
 16224                                  
 16225                                  FastOpen_Delete:
 16226 00002758 9C                      	PUSHF			; save flag
 16227 00002759 56                      	PUSH	SI		; save registers
 16228 0000275A 53                      	PUSH	BX
 16229 0000275B 50                      	PUSH	AX
 16230                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16231                                  ;hkn; SS override
 16232                                  	; 17/05/2019 - Retro DOS v4.0
 16233                                  	; MSDOS 6.0
 16234 0000275C 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16235                                  	
 16236 00002761 B003                    	MOV	AL,FONC_delete	; al = 3
 16237                                  fastinvoke:
 16238                                  ;hkn; FastTable is in DOSDATA
 16239 00002763 BB[320D]                	MOV	BX,FastTable+2
 16240 00002766 FF1F                    	CALL	far [BX]	; call fastopen
 16241 00002768 58                      	POP	AX		; restore registers
 16242 00002769 5B                      	POP	BX
 16243 0000276A 5E                      	POP	SI
 16244 0000276B 9D                      	POPF			; restore flag
 16245 0000276C C3                      	retn
 16246                                  
 16247                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16248                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16249                                  
 16250                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16251                                  ;---------------------------------------------------------------------------
 16252                                  ; PROCEDURE Name : FastOpen_Rename
 16253                                  ;
 16254                                  ; Inputs:
 16255                                  ;	 REN_WFP   = Path Name
 16256                                  ;	 NAME1	   = New Name
 16257                                  ; Function:
 16258                                  ;	Call FastOpen to rename the dir entry in the cache
 16259                                  ; Outputs:
 16260                                  ;	None
 16261                                  ;---------------------------------------------------------------------------
 16262                                  
 16263                                  FastOpen_Rename:
 16264                                  	; 17/05/2019 - Retro DOS v4.0
 16265                                  	; 08/08/2018 - Retro DOS v3.0
 16266                                  	; MSDOS 6.0
 16267 0000276D 9C                      	PUSHF			;AN001 save flag
 16268 0000276E 56                      	PUSH	SI		;AN001 save registers
 16269 0000276F 57                      	PUSH	DI		;AN001
 16270 00002770 53                      	PUSH	BX		;AN001
 16271 00002771 50                      	PUSH	AX		;AN001
 16272                                  	;
 16273                                  ;hkn; SS override
 16274 00002772 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16275                                  
 16276                                  ;hkn; NAME1 is in DOSDATA
 16277 00002777 BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16278                                  	;mov	al,6
 16279 0000277A B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16280                                  	
 16281                                  ;hkn; FastTable is in DOSDATA
 16282 0000277C BB[320D]                	MOV	BX,FastTable+2
 16283 0000277F FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16284                                  	
 16285 00002781 58                      	POP	AX		; restore registers  ;AN001
 16286 00002782 5B                      	POP	BX				     ;AN001
 16287 00002783 5F                      	POP	DI				     ;AN001
 16288 00002784 5E                      	POP	SI				     ;AN001
 16289 00002785 9D                      	POPF			; restore flag	     ;AN001
 16290 00002786 C3                      	retn					     ;AN001
 16291                                  
 16292                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16293                                  ;---------------------------------------------------------------------------
 16294                                  ; Procedure Name : FastOpen_Update
 16295                                  ;
 16296                                  ; Inputs:
 16297                                  ;	DL     drive number (A=0,B=1,,,)
 16298                                  ;	CX     first cluster #
 16299                                  ;	AH     0 updates dir entry
 16300                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16301                                  ;	ES:DI  directory entry
 16302                                  ; Function:
 16303                                  ;	Call FastOpen to update the dir info.
 16304                                  ; Outputs:
 16305                                  ;	None
 16306                                  ;---------------------------------------------------------------------------
 16307                                  
 16308                                  FastOpen_Update:
 16309 00002787 9C                      	PUSHF			; save flag
 16310 00002788 56                      	PUSH	SI
 16311 00002789 53                      	PUSH	BX		; save regs
 16312 0000278A 50                      	PUSH	AX
 16313 0000278B B004                    	MOV	AL,FONC_update	; al = 4
 16314 0000278D EBD4                    	JMP	short fastinvoke
 16315                                  
 16316                                  	; 17/05/2019
 16317                                  
 16318                                  	; MSDOS 6.0
 16319                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16320                                  ;---------------------------------------------------------------------------
 16321                                  Fast_Dispatch:
 16322                                  ;hkn; FastTable is in DOSDATA
 16323 0000278F BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16324                                  ;hkn; use SS override
 16325 00002792 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16326 00002795 C3                      	retn
 16327                                  
 16328                                  ;============================================================================
 16329                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16330                                  ;============================================================================
 16331                                  ; 08/08/2018 - Retro DOS v3.0
 16332                                  ; 17/05/2019 - Retro DOS v4.0
 16333                                  
 16334                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16335                                  ;	NAME	DOS_RENAME
 16336                                  
 16337                                  ;**	Low level routine for renaming files
 16338                                  ;----------------------------------------------------------------------------
 16339                                  ;	DOS_RENAME
 16340                                  ;
 16341                                  ;	Modification history:
 16342                                  ;
 16343                                  ;	    Created: ARR 30 March 1983
 16344                                  
 16345                                  ;----------------------------------------------------------------------------
 16346                                  ;
 16347                                  ; Procedure Name : DOS_RENAME
 16348                                  ;
 16349                                  ; Inputs:
 16350                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16351                                  ;		chars, NUL terminated)
 16352                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16353                                  ;		( = -1 if current dir not involved, else
 16354                                  ;		 Points to first char after last "/" of current dir part)
 16355                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16356                                  ;		chars, NUL terminated)
 16357                                  ;	[THISCDS] Points to CDS being used
 16358                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16359                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16360                                  ; Function:
 16361                                  ;	Rename the specified file(s)
 16362                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16363                                  ; Outputs:
 16364                                  ;	CARRY CLEAR
 16365                                  ;	    OK
 16366                                  ;	CARRY SET
 16367                                  ;	    AX is error code
 16368                                  ;		error_file_not_found
 16369                                  ;			No match for source, or dest path invalid
 16370                                  ;		error_not_same_device
 16371                                  ;			Source and dest are on different devices
 16372                                  ;		error_access_denied
 16373                                  ;			Directory specified (not simple rename),
 16374                                  ;			Device name given, Destination exists.
 16375                                  ;			NOTE: In third case some renames may have
 16376                                  ;			 been done if metas.
 16377                                  ;		error_path_not_found
 16378                                  ;			Bad path (not in curr dir part if present)
 16379                                  ;			SOURCE ONLY
 16380                                  ;		error_bad_curr_dir
 16381                                  ;			Bad path in current directory part of path
 16382                                  ;			SOURCE ONLY
 16383                                  ;		error_sharing_violation
 16384                                  ;			Deny both access required, generates an INT 24.
 16385                                  ; DS preserved, others destroyed
 16386                                  ;
 16387                                  ;----------------------------------------------------------------------------
 16388                                  
 16389                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16390                                  
 16391                                  DOS_RENAME:
 16392                                  
 16393                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16394                                  ;hkn; at this point to DOSDATA.
 16395                                  
 16396 00002796 E82AEB                  	call	TestNet
 16397 00002799 7306                    	JNC	short LOCAL_RENAME
 16398                                  
 16399                                  ;IF NOT Installed
 16400                                  ;	transfer NET_RENAME
 16401                                  ;ELSE
 16402                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16403                                  	;INT	2FH
 16404                                  	;return
 16405                                  
 16406 0000279B B81111                  	mov     ax, 1111h
 16407 0000279E CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16408                                  			; SS = DS = DOS CS, 
 16409                                  			; SDA first filename pointer = offset of fully-qualified old name
 16410                                  			; SDA CDS pointer -> current directory
 16411                                  			; Return: CF set on error
 16412 000027A0 C3                      	retn
 16413                                  ;ENDIF
 16414                                  
 16415                                  LOCAL_RENAME:
 16416 000027A1 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16417 000027A6 8B36[B205]              	MOV	SI,[WFP_START]
 16418 000027AA 8B3E[B405]              	MOV	DI,[REN_WFP]
 16419 000027AE 8A04                    	MOV	AL,[SI]
 16420 000027B0 8A25                    	MOV	AH,[DI]
 16421 000027B2 0D2020                  	OR	AX,2020H		; Lower case
 16422 000027B5 38E0                    	CMP	AL,AH
 16423 000027B7 7405                    	JZ	short SAMEDRV
 16424 000027B9 B81100                  	MOV	AX,error_not_same_device ; 11h
 16425 000027BC F9                      	STC
 16426 000027BD C3                      	retn
 16427                                  
 16428                                  SAMEDRV:
 16429 000027BE FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16430 000027C2 FF36[2C03]              	PUSH	WORD [DMAADD]
 16431 000027C6 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16432                                  
 16433                                  ;hkn; RENAMEDMA is in DOSDATA
 16434 000027CA C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16435 000027D0 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16436 000027D5 E8B0EB                  	call	ECritDisk
 16437 000027D8 E8FA05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16438                                  					;    points to entry
 16439 000027DB 7314                    	JNC	short Check_Dev
 16440 000027DD 83F812                  	CMP	AX,error_no_more_files ; 12h
 16441 000027E0 7503                    	JNZ	short GOTERR
 16442 000027E2 B80200                  	MOV	AX,error_file_not_found ; 2
 16443                                  GOTERR:
 16444 000027E5 F9                      	STC
 16445                                  RENAME_POP:
 16446 000027E6 8F06[2C03]              	POP	WORD [DMAADD]
 16447 000027EA 8F06[2E03]              	POP	WORD [DMAADD+2]
 16448                                  	;call	LCritDisk
 16449                                  	;retn
 16450                                  	; 16/12/2022
 16451 000027EE E9B2EB                  	jmp	LCritDisk
 16452                                  
 16453                                  Check_Dev:
 16454                                  	; 17/05/2019 - Retro DOS v4.0
 16455                                  	;mov	ax,5
 16456 000027F1 B80500                  	MOV	AX,error_access_denied	; Assume error
 16457                                  	
 16458                                  	; MSDOS 6.0
 16459 000027F4 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16460 000027F5 C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 16461                                  	;add	si,21
 16462 000027F9 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16463                                  	;test	byte [si+11],10h
 16464 000027FC F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16465 00002800 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16466 00002802 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16467 00002806 E8CEFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16468                                  notdir:
 16469 00002809 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16470 0000280A 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16471                                  
 16472                                  	; MSDOS 3.3 & MSDOS 6.0
 16473 0000280C 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16474 00002811 75D2                    	JNZ	short GOTERR
 16475                                  
 16476                                  ; At this point a source has been found. There is search continuation info (a
 16477                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16478                                  ; directory entry found.
 16479                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16480                                  ; throughout the RENAME since it is known at this point that the source and
 16481                                  ; destination are both on the same device.
 16482                                  ; [SATTRIB] is also set.
 16483                                  
 16484 00002813 89DE                    	MOV	SI,BX
 16485                                  	;add	si,26
 16486 00002815 83C61A                  	ADD	SI,dir_entry.dir_first
 16487 00002818 E8CFFE                  	call	REN_DEL_Check
 16488 0000281B 7305                    	JNC	short REN_OK1
 16489 0000281D B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16490 00002820 EBC4                    	JMP	short RENAME_POP
 16491                                  
 16492                                  ;------------------------------------------------------------------------------
 16493                                  ; Check if the source is a file or directory. If file, delete the entry
 16494                                  ; from the Fastopen cache. If directory, rename it later
 16495                                  ;------------------------------------------------------------------------------
 16496                                  
 16497                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16498                                  	; MSDOS 6.0
 16499 00002822 56                      	PUSH	SI
 16500 00002823 C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16501                                  	;add	si,21
 16502 00002827 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16503                                  	;test	byte [si+11],10h
 16504 0000282A F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16505 0000282E 7403                    	JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16506 00002830 5E                      	POP	SI			;BN00X
 16507 00002831 EB04                    	JMP	SHORT SWAP_SOURCE	;BN00X
 16508                                  NOT_DIR1:				;;BN00X it is a file, delete the entry
 16509 00002833 5E                      	POP	SI
 16510                                  
 16511                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 16512 00002834 E821FF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16513                                  SWAP_SOURCE:
 16514                                  	; MSDOS 3.3
 16515                                  	;MOV	SI,[REN_WFP]
 16516                                  	;MOV	[WFP_START],SI
 16517                                  	; MSDOS 6.0
 16518 00002837 A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16519 0000283A 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16520 0000283E 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16521 00002842 A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16522                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16523 00002845 C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16524                                  	;mov	word [CREATING],0E5FFh
 16525 0000284B C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16526                                  					; A rename is like a CREATE_NEW as far
 16527                                  					; as the destination is concerned.
 16528 00002851 E8A117                  	call	GetPathNoSet
 16529                                  
 16530                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16531                                  ;   since no files match the destination name. If it fails for any other
 16532                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16533                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16534                                  ;   if the rename should fail because we haven't built an explicit name by
 16535                                  ;   substituting for the meta chars in it. In this case the destination file
 16536                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16537                                  ;   in the directory entry part.
 16538                                  	
 16539 00002854 7223                    	JC	short NODEST
 16540                                  	
 16541                                  	; MSDOS 6.0
 16542                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16543                                  	; !! MSDOS 3.3 !!
 16544                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 16545                                  
 16546 00002856 08E4                    	OR	AH,AH			; Device?
 16547 00002858 792C                    	JNS	short SAVEDEST		; No, continue
 16548                                  BAD_ACC:
 16549 0000285A B80500                  	MOV	AX,error_access_denied
 16550 0000285D F9                      	STC
 16551                                  RENAME_CLEAN:
 16552 0000285E 9C                      	PUSHF				; Save carry state
 16553 0000285F 50                      	PUSH	AX			; and error code (if carry set)
 16554 00002860 A0[7605]                	MOV	AL,[THISDRV]
 16555 00002863 E80333                  	call	FLUSHBUF
 16556 00002866 58                      	POP	AX
 16557 00002867 803E[4A03]00            	CMP	byte [FAILERR],0
 16558 0000286C 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 16559 0000286E 9D                      	POPF
 16560 0000286F E974FF                  	JMP	RENAME_POP
 16561                                  
 16562                                  BAD_ERR:
 16563 00002872 58                      	POP	AX			; Saved flags
 16564                                  	; 16/12/202
 16565                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16566                                  BAD_PATH: ; *
 16567 00002873 B80300                  	MOV	AX,error_path_not_found
 16568 00002876 E96CFF                  	JMP	GOTERR
 16569                                  
 16570                                  NODEST:
 16571 00002879 75F8                    	JNZ	short BAD_PATH
 16572 0000287B 803E[4A03]00            	CMP	byte [FAILERR],0
 16573 00002880 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 16574                                  					; because user FAILed on I 24
 16575                                  	; 14/11/2022
 16576 00002882 08C9                    	OR	CL,CL
 16577                                  	;JNZ	short SAVEDEST
 16578                                  	; 17/05/2019
 16579 00002884 74ED                    	jz	short BAD_PATH ; *
 16580                                  ;BAD_PATH: ; *
 16581                                  ;	MOV	AX,error_path_not_found
 16582                                  ;	;STC
 16583                                  ;	;JMP	RENAME_POP
 16584                                  ;	; 17/05/2019
 16585                                  ;	jmp	GOTERR 
 16586                                  
 16587                                  ; 16/12/2022
 16588                                  %if 0
 16589                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16590                                  	or	cl,cl
 16591                                  	jnz	short SAVEDEST
 16592                                  	;jz	short BAD_PATH ; *
 16593                                  BAD_PATH: ; *
 16594                                  	;mov	ax,3
 16595                                  	mov	ax,error_path_not_found
 16596                                  	stc
 16597                                  	jmp	RENAME_POP
 16598                                  %endif
 16599                                  
 16600                                  SAVEDEST:
 16601 00002886 16                      	push	ss
 16602 00002887 07                      	pop	es
 16603                                  
 16604                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 16605 00002888 BF[5705]                	MOV	DI,NAME2
 16606 0000288B BE[4B05]                	MOV	SI,NAME1
 16607                                  
 16608 0000288E B90B00                  	MOV	CX,11
 16609 00002891 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 16610 00002893 A1[C205]                	MOV	AX,[DIRSTART]
 16611 00002896 A3[6405]                	MOV	[DESTSTART],AX
 16612                                  BUILDDEST:
 16613 00002899 16                      	push	ss
 16614 0000289A 07                      	pop	es			; needed due to JMP BUILDDEST below
 16615                                  
 16616                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 16617 0000289B BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 16618 0000289E BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 16619 000028A1 BE[5705]                	MOV	SI,NAME2		; Raw dest
 16620                                  
 16621 000028A4 B90B00                  	MOV	CX,11
 16622                                  
 16623                                  	; 17/05/2019 - Retro DOS v4.0
 16624                                  	
 16625                                  	; MSDOS 6.0
 16626 000028A7 E81401                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 16627                                  
 16628                                  	; MSDOS 3.3
 16629                                  
 16630                                  ; 08/08/2018 - Retro DOS v3.0
 16631                                  ; MSDOS 6.0 
 16632                                  ;---------------------------------------------------------------------------
 16633                                  ;Procedure: NEW_RENAME
 16634                                  ;
 16635                                  ;Input: DS:SI -> raw string with ?
 16636                                  ;	ES:DI -> destination string
 16637                                  ;	DS:BX -> source string
 16638                                  ;Function: replace ? chars of raw string with chars in source string and
 16639                                  ;	   put in destination string
 16640                                  ;Output: ES:DI-> new string
 16641                                  ;---------------------------------------------------------------------------
 16642                                  ;
 16643                                  ;NEW_RENAME:
 16644                                  ;NEWNAM:
 16645                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 16646                                  ;	LODSB
 16647                                  ;	CMP	AL,"?"
 16648                                  ;	JNZ	short NOCHG
 16649                                  ;	MOV	AL,[BX] 		; Get replace char
 16650                                  ;NOCHG:
 16651                                  ;	STOSB
 16652                                  ;	INC	BX			; Next replace char
 16653                                  ;	LOOP	NEWNAM
 16654                                  ;	; MSDOS 6.0
 16655                                  ;	;retn
 16656                                  
 16657                                  	; MSDOS 3.3 & MSDOS 6.0
 16658                                  	;mov	byte [ATTRIB],16h
 16659 000028AA C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 16660 000028AF C606[7E05]FF            	MOV	byte [CREATING],0FFH
 16661 000028B4 E8FB19                  	call	DEVNAME 		; Check if we built a device name
 16662 000028B7 73A1                    	JNC	short BAD_ACC
 16663 000028B9 8B1E[6405]              	MOV	BX,[DESTSTART]
 16664 000028BD C42E[8A05]              	LES	BP,[THISDPB]
 16665 000028C1 E8CB16                  	call	SETDIRSRCH		; Reset search to start of dir
 16666 000028C4 7294                    	JC	short BAD_ACC 		; Screw up
 16667 000028C6 E87D15                  	call	FINDENTRY		; See if new name already exists
 16668 000028C9 738F                    	JNC	short BAD_ACC 		; Error if found
 16669 000028CB 803E[4A03]00            	CMP	byte [FAILERR],0
 16670 000028D0 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 16671 000028D2 A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 16672 000028D5 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 16673 000028D9 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 16674                                  
 16675                                  	;mov	al,[RENAMEDMA+32]
 16676 000028DB A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 16677 000028DE A810                    	TEST	AL,attr_directory ; 10h
 16678 000028E0 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 16679                                  					; otherwise the . and .. entries get
 16680                                  					; wiped.
 16681 000028E2 A2[6B05]                	MOV	[ATTRIB],AL
 16682 000028E5 8C1E[A005]              	MOV	[THISSFT+2],DS
 16683                                  
 16684                                  ;hkn; AUXSTACK is in DOSDATA
 16685                                  	;mov	si,[RENAMEDMA+145h]
 16686 000028E9 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 16687 000028EC 8936[9E05]              	MOV	[THISSFT],SI
 16688                                  	;mov	word [SI+2],2
 16689 000028F0 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 16690 000028F5 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 16691 000028F7 E8AE21                  	call	RENAME_MAKE		; This is in mknode
 16692 000028FA 7303                    	JNC	short GOT_DEST
 16693                                  BAD_ACCJ:
 16694 000028FC E95BFF                  	JMP	BAD_ACC
 16695                                  
 16696                                  GOT_DEST:
 16697 000028FF 53                      	push	bx
 16698 00002900 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 16699 00002904 E88E4B                  	call	ShareEnd		; we need to remove it.
 16700 00002907 5B                      	pop	bx
 16701                                  
 16702                                  ; A zero length entry with the correct new name has now been made at
 16703                                  ;   [CURBUF+2]:BX.
 16704                                  
 16705 00002908 C43E[E205]              	LES	DI,[CURBUF]
 16706                                  
 16707                                  	; MSDOS 6.0
 16708                                  	;test	byte [es:di+5],40h
 16709 0000290C 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16710                                  					;LB. if already dirty		  ;AN000;
 16711 00002911 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 16712 00002913 E85B33                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16713                                  	;or	byte [es:di+5],40h
 16714 00002916 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16715                                  yesdirty1:
 16716 0000291B 89DF                    	MOV	DI,BX
 16717                                  	;add	di,11
 16718 0000291D 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 16719                                  
 16720                                  ;hkn; RENAMEDMA is in DOSDATA
 16721                                  	;mov	si,[RENAMEDMA+32]
 16722 00002920 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 16723                                  	;mov	cx,21
 16724 00002923 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 16725 00002926 F3A4                    	REP	MOVSB
 16726 00002928 E87D00                  	CALL	GET_SOURCE
 16727 0000292B 7277                    	JC	short RENAME_OVER
 16728 0000292D 89DF                    	MOV	DI,BX
 16729 0000292F 8E06[E405]              	MOV	ES,[CURBUF+2]
 16730 00002933 B0E5                    	MOV	AL,DIRFREE ; 0E5h
 16731 00002935 AA                      	STOSB				; "free" the source
 16732 00002936 EB13                    	JMP	SHORT DIRTY_IT
 16733                                  
 16734                                  SIMPLE_RENAME:
 16735 00002938 E86D00                  	CALL	GET_SOURCE		; Get the source back
 16736 0000293B 7267                    	JC	short RENAME_OVER
 16737 0000293D 89DF                    	MOV	DI,BX
 16738 0000293F 8E06[E405]              	MOV	ES,[CURBUF+2]
 16739                                  
 16740                                  ;hkn; NAME1 is in DOSDATA
 16741 00002943 BE[4B05]                	MOV	SI,NAME1		; New Name
 16742 00002946 B90B00                  	MOV	CX,11
 16743 00002949 F3A4                    	REP	MOVSB
 16744                                  DIRTY_IT:
 16745 0000294B 8B3E[E205]              	MOV	DI,[CURBUF]
 16746                                  
 16747                                  	; MSDOS 6.0
 16748 0000294F 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16749                                  					;LB. if already dirty		  ;AN000;
 16750 00002954 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 16751 00002956 E81833                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16752                                  	
 16753 00002959 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16754                                  
 16755                                  ;------------------------------------------------------------------------------
 16756                                  ; Check if the source is a directory of file. If directory rename it to the
 16757                                  ; the new name in the Fastopen cache buffer. If file name it has been
 16758                                  ; previously deleted.
 16759                                  ;------------------------------------------------------------------------------
 16760                                  
 16761                                  yesdirty2:
 16762                                  	; MSDOS 6.0
 16763 0000295E 56                      	PUSH	SI
 16764 0000295F C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 16765 00002963 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16766 00002966 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 16767 0000296A 7406                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 16768 0000296C E8FEFD                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 16769 0000296F 5E                      	POP	SI
 16770 00002970 EB01                    	JMP	SHORT NOT_DIRTY1
 16771                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 16772 00002972 5E                      	POP	SI
 16773                                  NOT_DIRTY1:				;;BN00X
 16774                                  NEXT_SOURCE:
 16775                                  ;hkn; RENAMEDMA is in DOSDATA
 16776 00002973 BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 16777                                  
 16778                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 16779                                  ; to enter it before going to RENAME_Next.
 16780                                  
 16781 00002976 E80FEA                  	call	ECritDisk
 16782 00002979 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 16783                                  				  ;  to FF when we made the prev new file).
 16784 0000297E E88C05                  	call	RENAME_NEXT
 16785                                  
 16786                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 16787                                  ; we were before.
 16788                                  
 16789 00002981 7221                    	JC	short RENAME_OVER
 16790                                  
 16791                                  	;lea	si,[bx+26]
 16792 00002983 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 16793 00002986 E861FD                  	call	REN_DEL_Check
 16794 00002989 7306                    	JNC	short REN_OK2
 16795 0000298B B82000                  	MOV	AX,error_sharing_violation ; 20h
 16796 0000298E E9CDFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16797                                  
 16798                                  ;------------------------------------------------------------------------------
 16799                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 16800                                  ; if directory, rename directory name in the Fastopen cache.
 16801                                  ;-----------------------------------------------------------------------------
 16802                                  
 16803                                  REN_OK2:
 16804                                  	; MSDOS 6.0
 16805                                  	;mov	al,[RERNAMEDMA+32]
 16806 00002991 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 16807                                  	;test	al,10h
 16808 00002994 A810                    	TEST	AL,attr_directory	;;BN00X directory
 16809 00002996 7406                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 16810                                  	
 16811                                  	; MSDOS 3.3 & MSDOS 6.0
 16812 00002998 E8BDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 16813 0000299B E9FBFE                  	JMP	BUILDDEST		;;BN00X
 16814                                  
 16815                                  	; MSDOS 6.0
 16816                                  Ren_Directory:
 16817 0000299E E8CCFD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 16818 000029A1 E9F5FE                  	JMP	BUILDDEST
 16819                                  
 16820                                  RENAME_OVER:
 16821 000029A4 F8                      	CLC
 16822 000029A5 E9B6FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16823                                  
 16824                                  ;----------------------------------------------------------------------------
 16825                                  ; Procedure: GET_SOURCE
 16826                                  ;
 16827                                  ; Inputs:
 16828                                  ;	RENAMEDMA has source info
 16829                                  ; Function:
 16830                                  ;	Re-find the source
 16831                                  ; Output:
 16832                                  ;	[CURBUF] set
 16833                                  ;	[CURBUF+2]:BX points to entry
 16834                                  ;	Carry set if error (currently user FAILed to I 24)
 16835                                  ; DS preserved, others destroyed
 16836                                  ;----------------------------------------------------------------------------
 16837                                  
 16838                                  GET_SOURCE:
 16839 000029A8 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 16840 000029AC C42E[8A05]              	LES	BP,[THISDPB]
 16841 000029B0 E8DC15                  	call	SETDIRSRCH
 16842 000029B3 7214                    	JC	short gs_ret_label	; retc
 16843 000029B5 E8D918                  	call	STARTSRCH
 16844 000029B8 A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 16845                                  	;call	GETENT
 16846                                  	; 18/12/2022
 16847 000029BB E9A315                  	jmp	GETENT
 16848                                  ;gs_ret_label:
 16849                                  	;retn
 16850                                  
 16851                                  ; MSDOS 6.0 
 16852                                  ;---------------------------------------------------------------------------
 16853                                  ;Procedure: NEW_RENAME
 16854                                  ;
 16855                                  ;Input: DS:SI -> raw string with ?
 16856                                  ;	ES:DI -> destination string
 16857                                  ;	DS:BX -> source string
 16858                                  ;Function: replace ? chars of raw string with chars in source string and
 16859                                  ;	   put in destination string
 16860                                  ;Output: ES:DI-> new string
 16861                                  ;---------------------------------------------------------------------------
 16862                                  
 16863                                  NEW_RENAME:
 16864                                  	; 17/05/2019 - Retro DOS v4.0
 16865                                  NEWNAM:
 16866                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 16867 000029BE AC                      	LODSB
 16868 000029BF 3C3F                    	CMP	AL,"?" ; 3Fh
 16869 000029C1 7502                    	JNZ	short NOCHG
 16870 000029C3 8A07                    	MOV	AL,[BX] 		; Get replace char
 16871                                  NOCHG:
 16872 000029C5 AA                      	STOSB
 16873 000029C6 43                      	INC	BX			; Next replace char
 16874 000029C7 E2F5                    	LOOP	NEWNAM
 16875                                  	; MSDOS 6.0
 16876                                  gs_ret_label:	; 18/12/2022
 16877 000029C9 C3                      	retn
 16878                                  
 16879                                  ;============================================================================
 16880                                  ; FINFO.ASM, MSDOS 6.0, 1991
 16881                                  ;============================================================================
 16882                                  ; 08/08/2018 - Retro DOS v3.0
 16883                                  ; 17/05/2019 - Retro DOS v4.0
 16884                                  
 16885                                  ;**	Low level routines for returning file information and setting file
 16886                                  ;	attributes
 16887                                  ;
 16888                                  ;	GET_FILE_INFO
 16889                                  ;	SET_FILE_ATTRIBUTE
 16890                                  ;
 16891                                  ;	Modification history:
 16892                                  ;
 16893                                  ;	    Created: ARR 30 March 1983
 16894                                  ;
 16895                                  ;	M025: Return access_denied if attempting to set
 16896                                  ;	      attribute of root directory.
 16897                                  ;
 16898                                  
 16899                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 16900                                  
 16901                                  ;---------------------------------------------------------------------------
 16902                                  ; Procedure Name : GET_FILE_INFO
 16903                                  ;
 16904                                  ; Inputs:
 16905                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16906                                  ;		terminated)
 16907                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16908                                  ;		( = -1 if current dir not involved, else
 16909                                  ;		 Points to first char after last "/" of current dir part)
 16910                                  ;	[THISCDS] Points to CDS being used
 16911                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16912                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16913                                  ; Function:
 16914                                  ;	Get Information about a file
 16915                                  ; Returns:
 16916                                  ;	CARRY CLEAR
 16917                                  ;	    AX = Attribute of file
 16918                                  ;	    CX = Time stamp of file
 16919                                  ;	    DX = Date stamp of file
 16920                                  ;	    BX:DI = Size of file (32 bit)
 16921                                  ;	CARRY SET
 16922                                  ;	    AX is error code
 16923                                  ;		error_file_not_found
 16924                                  ;			Last element of path not found
 16925                                  ;		error_path_not_found
 16926                                  ;			Bad path (not in curr dir part if present)
 16927                                  ;		error_bad_curr_dir
 16928                                  ;			Bad path in current directory part of path
 16929                                  ; DS preserved, others destroyed
 16930                                  ;---------------------------------------------------------------------------
 16931                                  
 16932                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16933                                  
 16934                                  GET_FILE_INFO:
 16935                                  
 16936                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 16937                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 16938                                  
 16939 000029CA E8F6E8                  	call	TestNet
 16940 000029CD 7306                    	JNC	short LOCAL_INFO
 16941                                  
 16942                                  ;IF NOT Installed
 16943                                  ;	transfer NET_GET_FILE_INFO
 16944                                  ;ELSE
 16945                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 16946                                  ;	INT	2FH
 16947                                  ;	return
 16948                                  
 16949 000029CF B80F11                  	mov     ax, 110Fh
 16950 000029D2 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 16951                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 16952                                  			; SDA CDS pointer -> current directory
 16953                                  			; Return: CF set on error, AX = file attributes
 16954 000029D4 C3                      	retn
 16955                                  ;ENDIF
 16956                                  
 16957                                  LOCAL_INFO:
 16958 000029D5 E8B0E9                  	call	ECritDisk
 16959 000029D8 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16960                                  	; MSDOS 3.3
 16961                                  	;call	GETPATH
 16962                                  	; MSDOS 6.0
 16963 000029DD E8D800                  	call	GET_FAST_PATH
 16964                                  	; MSDOS 3.3 & MSDOS 6.0
 16965 000029E0 7312                    	JNC	short info_check_dev
 16966                                  NO_PATH:
 16967 000029E2 750B                    	JNZ	short bad_path1
 16968 000029E4 08C9                    	OR	CL,CL
 16969 000029E6 7407                    	JZ	short bad_path1
 16970                                  info_no_file:
 16971 000029E8 B80200                  	MOV	AX,error_file_not_found
 16972                                  BadRet:
 16973 000029EB F9                      	STC
 16974                                  JustRet:
 16975                                  	;call	LCritDisk
 16976                                  	;retn
 16977                                  	; 18/12/2022
 16978 000029EC E9B4E9                  	jmp	LCritDisk
 16979                                  
 16980                                  bad_path1:
 16981 000029EF B80300                  	MOV	AX,error_path_not_found
 16982 000029F2 EBF7                    	jmp	short BadRet
 16983                                  
 16984                                  info_check_dev:
 16985 000029F4 08E4                    	OR	AH,AH
 16986 000029F6 78F0                    	JS	short info_no_file	; device
 16987                                  
 16988                                  	; MSDOS 6.0
 16989                                  ;SR;
 16990                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 16991                                  ;for a root dir
 16992                                  
 16993 000029F8 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 16994 000029FD 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 16995                                  
 16996 000029FF 30E4                    	xor	ah,ah
 16997 00002A01 B010                    	mov	al,attr_directory ; 10h
 16998                                  	;clc
 16999                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17000                                  	; (DOSCODE:683Eh)
 17001                                  	; 16/12/2022
 17002                                  	;clc
 17003 00002A03 EBE7                    	jmp	short JustRet
 17004                                  
 17005                                  not_root:
 17006                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17007 00002A05 1E                      	PUSH	DS
 17008 00002A06 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17009 00002A0A 89DE                    	MOV	SI,BX
 17010 00002A0C 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17011 00002A0E 89DF                    	MOV	DI,BX
 17012                                  	;mov	cx,[si+16h]
 17013 00002A10 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17014                                  	;mov	dx,[si+18h]
 17015 00002A13 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17016 00002A16 30E4                    	XOR	AH,AH
 17017                                  	;mov	al,[si+0Bh]
 17018 00002A18 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17019                                  	;test	al,10h
 17020 00002A1B A810                    	TEST	AL,attr_directory
 17021 00002A1D 7506                    	JNZ	short NO_SIZE
 17022                                  	;mov	di,[si+1Ch]
 17023 00002A1F 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17024                                  	;mov	bx,[si+1Eh]
 17025 00002A22 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17026                                  NO_SIZE:
 17027 00002A25 1F                      	POP	DS
 17028                                  	;CLC
 17029                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17030                                  	; (DOSCODE:6864h)
 17031                                  	; 16/12/2022
 17032                                  	;clc
 17033 00002A26 EBC4                    	jmp	short JustRet
 17034                                  
 17035                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17036                                  ;-------------------------------------------------------------------------------
 17037                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17038                                  ; Inputs:
 17039                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17040                                  ;		terminated)
 17041                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17042                                  ;		( = -1 if current dir not involved, else
 17043                                  ;		 Points to first char after last "/" of current dir part)
 17044                                  ;	[THISCDS] Points to CDS being used
 17045                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17046                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17047                                  ;	AX is new attributes to give to file
 17048                                  ; Function:
 17049                                  ;	Set File Attributes
 17050                                  ; Returns:
 17051                                  ;	CARRY CLEAR
 17052                                  ;	    No error
 17053                                  ;	CARRY SET
 17054                                  ;	    AX is error code
 17055                                  ;		error_file_not_found
 17056                                  ;			Last element of path not found
 17057                                  ;		error_path_not_found
 17058                                  ;			Bad path (not in curr dir part if present)
 17059                                  ;		error_bad_curr_dir
 17060                                  ;			Bad path in current directory part of path
 17061                                  ;		error_access_denied
 17062                                  ;			Attempt to set an attribute which cannot be set
 17063                                  ;			(attr_directory, attr_volume_ID)
 17064                                  ;		error_sharing_violation
 17065                                  ;			Sharing mode of file did not allow the change
 17066                                  ;			(this request requires exclusive write/read access)
 17067                                  ;			(INT 24H generated)
 17068                                  ; DS preserved, others destroyed
 17069                                  ;----------------------------------------------------------------------------
 17070                                  
 17071                                  SET_FILE_ATTRIBUTE:
 17072                                  
 17073                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17074                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17075                                  
 17076 00002A28 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17077 00002A2B 7414                    	JZ	short set_look
 17078                                  _BAD_ACC:
 17079 00002A2D C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17080 00002A32 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17081 00002A37 C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17082 00002A3C B80500                  	MOV	AX,error_access_denied ; 5
 17083 00002A3F F9                      	STC
 17084 00002A40 C3                      	retn
 17085                                  
 17086                                  set_look:
 17087 00002A41 E87FE8                  	call	TestNet
 17088 00002A44 7308                    	JNC	short LOCAL_SET
 17089                                  
 17090                                  ;IF NOT Installed
 17091                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17092                                  ;ELSE
 17093 00002A46 50                      	PUSH	AX
 17094                                  	
 17095                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17096                                  	;INT	2FH
 17097                                  
 17098 00002A47 B80E11                  	mov     ax, 110Eh
 17099 00002A4A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17100                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17101                                  			; SDA CDS pointer -> current directory
 17102                                  			; STACK: WORD new file attributes
 17103                                  			; Return: CF set on error
 17104                                  
 17105 00002A4C 5B                      	POP	BX			; clean stack
 17106 00002A4D C3                      	retn
 17107                                  ;ENDIF
 17108                                  
 17109                                  LOCAL_SET:
 17110 00002A4E E837E9                  	call	ECritDisk
 17111 00002A51 50                      	PUSH	AX			; Save new attributes
 17112 00002A52 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17113 00002A57 E89515                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17114 00002A5A 7303                    	JNC	short set_check_device
 17115 00002A5C 5B                      	POP	BX			; Clean stack (don't zap AX)
 17116 00002A5D EB83                    	JMP	short NO_PATH
 17117                                  
 17118                                  set_check_device:
 17119 00002A5F 08E4                    	OR	AH,AH
 17120 00002A61 7906                    	JNS	short set_check_share
 17121 00002A63 58                      	POP	AX
 17122 00002A64 E83CE9                  	call	LCritDisk
 17123 00002A67 EBC4                    	JMP	short _BAD_ACC 		; device
 17124                                  
 17125                                  set_check_share:
 17126 00002A69 58                      	POP	AX			; Get new attributes
 17127                                  
 17128                                  	; MSDOS 6.0
 17129 00002A6A 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17130 00002A6F 740A                    	je	short cannot_set_root	; M025: Y: return error
 17131                                  
 17132                                  	; MSDOS 3.3 & MSDOS 6.0
 17133 00002A71 E876FC                  	call	REN_DEL_Check
 17134 00002A74 730B                    	JNC	short set_do
 17135 00002A76 B82000                  	MOV	AX,error_sharing_violation ; 32
 17136 00002A79 EB3A                    	jmp	short OK_BYE
 17137                                  
 17138                                  	; MSDOS 6.0
 17139                                  cannot_set_root:			; M025:
 17140 00002A7B B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17141 00002A7E F9                      	stc				; M025: to set attr. of root
 17142 00002A7F EB34                    	jmp	short OK_BYE		; M025:
 17143                                  
 17144                                  set_do:
 17145                                  	; MSDOS 3.3 & MSDOS 6.0
 17146 00002A81 C43E[E205]              	LES	DI,[CURBUF]
 17147 00002A85 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17148 00002A8A 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17149                                  
 17150                                  	; MSDOS 6.0
 17151 00002A8E 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17152                                  					;LB. if already dirty		  ;AN000;
 17153 00002A93 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17154 00002A95 E8D931                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17155                                  	
 17156 00002A98 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17157                                  yesdirty3:
 17158 00002A9D A0[7605]                	MOV	AL,[THISDRV]
 17159                                  ;;;; 10/1/86 F.C update fastopen cache
 17160 00002AA0 52                      	PUSH	DX
 17161 00002AA1 57                      	PUSH	DI
 17162 00002AA2 B400                    	MOV	AH,0		  ; dir entry update
 17163 00002AA4 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17164 00002AA6 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17165 00002AA8 E8DCFC                  	call	FastOpen_Update
 17166 00002AAB 5F                      	POP	DI
 17167 00002AAC 5A                      	POP	DX
 17168                                  ;;;; 9/11/86 F.C update fastopen cache
 17169 00002AAD E8B930                  	call	FLUSHBUF
 17170 00002AB0 7303                    	JNC	short OK_BYE
 17171 00002AB2 B80200                  	MOV	AX,error_file_not_found
 17172                                  OK_BYE:
 17173                                  	;call	LCritDisk
 17174                                  	;retn
 17175                                  	; 16/12/2022
 17176 00002AB5 E9EBE8                  	jmp	LCritDisk
 17177                                  
 17178                                  	; 17/05/2019 - Retro DOS v4.0
 17179                                  
 17180                                  	; MSDOS 6.0
 17181                                  GET_FAST_PATH:
 17182                                  ;hkn; use SS override for FastOpenFlg
 17183 00002AB8 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17184                                  					;FO. trigger fastopen	;AN000;
 17185 00002ABE E82E15                  	call	GETPATH
 17186 00002AC1 9C                      	PUSHF			 	;FO.			;AN000;
 17187 00002AC2 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17188                                  					;FO. clear all fastopen flags ;AN000;
 17189 00002AC8 9D                      	POPF				;FO.			;AN000;
 17190 00002AC9 C3                      	retn
 17191                                  
 17192                                  ;============================================================================
 17193                                  ; DUP.ASM, MSDOS 6.0, 1991
 17194                                  ;============================================================================
 17195                                  ; 08/08/2018 - Retro DOS v3.0
 17196                                  ; 17/05/2019 - Retro DOS v4.0
 17197                                  
 17198                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17199                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17200                                  ;
 17201                                  ;	DOS_DUP
 17202                                  ;
 17203                                  ;	Modification history:
 17204                                  ;
 17205                                  ;	  Created: ARR 30 March 1983
 17206                                  
 17207                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17208                                  ;---------------------------------------------------------------------------
 17209                                  ; Procedure Name : DOS_DUP
 17210                                  ;
 17211                                  ; Inputs:
 17212                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17213                                  ;		(a non net SFT is OK, in this case the ref
 17214                                  ;		 count is simply incremented)
 17215                                  ; Function:
 17216                                  ;	Signal to the devices that a logical open is occurring
 17217                                  ; Returns:
 17218                                  ;	ES:DI point to SFT
 17219                                  ;    Carry clear
 17220                                  ;	SFT ref_count is incremented
 17221                                  ; Registers modified: None.
 17222                                  ; NOTE:
 17223                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17224                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17225                                  ;	that time.
 17226                                  ;---------------------------------------------------------------------------
 17227                                  
 17228                                  DOS_DUP:
 17229                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17230                                  
 17231                                  	; MSDOS 6.0
 17232 00002ACA 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17233 00002ACF 26C43E[9E05]            	les	di,[es:THISSFT]
 17234                                  
 17235                                  	;Entry	Dos_Dup_Direct
 17236                                  DOS_Dup_Direct:
 17237 00002AD4 E805E8                  	call	IsSFTNet
 17238 00002AD7 7503                    	JNZ	short DO_INC
 17239 00002AD9 E8F11B                  	call	DEV_OPEN_SFT
 17240                                  DO_INC:
 17241                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17242 00002ADC 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17243                                  					;   we're in big trouble anyway)
 17244 00002ADF C3                      	retn
 17245                                  
 17246                                  ;============================================================================
 17247                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17248                                  ;============================================================================
 17249                                  ; 08/08/2018 - Retro DOS v3.0
 17250                                  ; 18/05/2019 - Retro DOS v4.0
 17251                                  
 17252                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17253                                  ;NAME	DOS_CREATE
 17254                                  ;----------------------------------------------------------------------------
 17255                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17256                                  ;
 17257                                  ;	DOS_CREATE
 17258                                  ;	DOS_CREATE_NEW
 17259                                  ;	SET_MKND_ERR
 17260                                  ;	SET_Media_ID
 17261                                  ;	SET_EXT_Mode
 17262                                  ;
 17263                                  ;	Revision history:
 17264                                  ;
 17265                                  ;	    A000 version 4.00	  Jan. 1988
 17266                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17267                                  
 17268                                  ;Installed = TRUE
 17269                                  
 17270                                  ;	i_need	THISSFT,DWORD
 17271                                  ;	i_need	THISCDS,DWORD
 17272                                  ;	I_need	EXTERR,WORD
 17273                                  ;	I_Need	ExtErr_locus,BYTE
 17274                                  ;	I_need	JShare,DWORD
 17275                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17276                                  ;	I_need	SATTRIB,BYTE
 17277                                  ;	I_need	CALLVIDM,DWORD
 17278                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17279                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17280                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17281                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17282                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17283                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17284                                  
 17285                                  ;***	DOS_CREATE - Create a File
 17286                                  ;----------------------------------------------------------------------------
 17287                                  ;	DOS_Create is called to create the specified file, truncating
 17288                                  ;	the old one if it exists.
 17289                                  ;
 17290                                  ;	ENTRY	AX is Attribute to create
 17291                                  ;		(ds) = DOSDATA
 17292                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17293                                  ;			terminated)
 17294                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17295                                  ;			( = -1 if current dir not involved, else
 17296                                  ;			 Points to first char after last "/" of current dir part)
 17297                                  ;		[THISCDS] Points to CDS being used
 17298                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17299                                  ;		[THISSFT] Points to SFT to fill in if file created
 17300                                  ;			(sf_mode field set so that FCB may be detected)
 17301                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17302                                  ;
 17303                                  ;	EXIT	sf_ref_count is NOT altered
 17304                                  ;		CARRY CLEAR
 17305                                  ;		    THISSFT filled in.
 17306                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17307                                  ;		CARRY SET
 17308                                  ;		    AX is error code
 17309                                  ;			error_path_not_found
 17310                                  ;				Bad path (not in curr dir part if present)
 17311                                  ;			error_bad_curr_dir
 17312                                  ;				Bad path in current directory part of path
 17313                                  ;			error_access_denied
 17314                                  ;				Attempt to re-create read only file , or
 17315                                  ;				create a second volume id or create a dir
 17316                                  ;			error_sharing_violation
 17317                                  ;				The sharing mode was correct but not allowed
 17318                                  ;				generates an INT 24
 17319                                  ;	USES	all but DS
 17320                                  ;----------------------------------------------------------------------------
 17321                                  
 17322                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17323                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17324                                  
 17325                                  DOS_CREATE:
 17326                                  	; 18/05/2019 - Retro DOS v4.0
 17327                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17328                                  
 17329                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17330                                  ;hkn; this point.
 17331                                  
 17332 00002AE0 30E4                    	XOR	AH,AH		; Truncate is OK
 17333                                  
 17334                                  ;	Enter here from Dos_Create_New
 17335                                  ;
 17336                                  ;	(ah) = 0 iff truncate OK
 17337                                  
 17338                                  Create_inter:
 17339 00002AE2 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17340                                  				; Mask out any meaningless bits
 17341 00002AE4 7511                    	JNZ	short AttErr
 17342 00002AE6 A808                    	TEST	AL,attr_volume_id
 17343 00002AE8 7407                    	JZ	short NoReset
 17344                                  	
 17345                                  	; MSDOS 6.0
 17346                                  	; 16/12/2022
 17347 00002AEA 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17348                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17349                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17350                                  	
 17351 00002AEF B008                    	MOV	AL,attr_volume_id ; 8
 17352                                  NoReset:
 17353 00002AF1 0C20                    	OR	AL,attr_archive ; File changed  ; 20 h
 17354 00002AF3 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17355 00002AF5 740A                    	JZ	short ATT_OK
 17356                                  AttErr:
 17357 00002AF7 B80500                  	MOV	AX,5		; Attribute problem
 17358 00002AFA C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17359 00002AFF EB66                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17360                                  				   ;	attr_device to be set.
 17361                                  ATT_OK:
 17362 00002B01 C43E[9E05]              	LES	DI,[THISSFT]
 17363 00002B05 06                      	PUSH	ES
 17364 00002B06 C436[A205]              	LES	SI,[THISCDS]
 17365 00002B0A 83FEFF                  	CMP	SI,-1
 17366 00002B0D 751D                    	JNE	short TEST_RE_NET
 17367                                  
 17368                                  ;	No CDS, it must be redirected.
 17369                                  
 17370 00002B0F 07                      	POP	ES
 17371                                  
 17372                                  	; MSDOS 6.0
 17373                                  ;Extended open hooks
 17374                                  	;test	byte [EXTOPEN_ON],1
 17375 00002B10 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17376 00002B15 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17377                                  IFS_extopen:				    ;AN000;EO.
 17378 00002B17 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17379                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17380 00002B18 B82E11                  	mov	ax,112Eh
 17381 00002B1B CD2F                    	INT	2FH			    ;AN000;EO.
 17382 00002B1D 5B                      	POP	BX			    ;AN000;EO. trash bx
 17383 00002B1E C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17384 00002B23 C3                      	retn				    ;AN000;EO.
 17385                                  NOEXTOP:				    ;AN000;
 17386                                  ;Extended open hooks
 17387                                  
 17388                                  ;IF NOT Installed
 17389                                  ;	transfer NET_SEQ_CREATE
 17390                                  ;ELSE
 17391 00002B24 50                      	PUSH	AX
 17392                                  
 17393                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17394                                  	;INT	2FH
 17395                                  
 17396 00002B25 B81811                  	mov     ax,1118h
 17397 00002B28 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17398                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17399                                  			; SDA first filename pointer -> fully-qualified name of file
 17400                                  			; STACK: WORD file creation mode???
 17401                                  
 17402 00002B2A 5B                      	POP	BX			; BX is trashed anyway
 17403 00002B2B C3                      	retn
 17404                                  ;ENDIF
 17405                                  
 17406                                  ;	We have a CDS. See if it's network
 17407                                  
 17408                                  TEST_RE_NET:
 17409                                  	;;test	word [es:si+43h],8000h
 17410                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17411                                  	; 07/12/2022
 17412                                  	;test	byte [es:si+44h],80h
 17413                                  	; 17/12/2022
 17414 00002B2C 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17415 00002B31 07                      	POP	ES
 17416 00002B32 7419                    	JZ	short LOCAL_CREATE
 17417                                  
 17418                                  	; MSDOS 6.0
 17419 00002B34 E8BF00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17420 00002B37 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17421                                  	;;or	word [es:di+2],2
 17422                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17423                                  	; 17/12/2022
 17424 00002B39 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17425                                  
 17426                                  ;Extended open hooks
 17427                                  dochk:
 17428 00002B3E F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17429 00002B43 75D2                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17430                                  ;Extended open hooks
 17431                                  
 17432                                  ;IF NOT Installed
 17433                                  ;	transfer NET_CREATE
 17434                                  ;ELSE
 17435 00002B45 50                      	PUSH	AX
 17436                                  	
 17437                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17438                                  	;INT	2FH
 17439                                  	
 17440 00002B46 B81711                  	mov     ax,1117h
 17441 00002B49 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17442                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17443                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17444                                  			; SDA CDS pointer -> current directory
 17445                                  			; Return: CF set on error
 17446                                  
 17447 00002B4B 5B                      	POP	BX			; BX is trashed anyway
 17448                                  ;nomore:
 17449 00002B4C C3                      	retn
 17450                                  ;ENDIF
 17451                                  
 17452                                  ;**	It's a local create. We have a local CDS for it.
 17453                                  
 17454                                  LOCAL_CREATE:
 17455                                  	; MSDOS 6.0
 17456 00002B4D E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17457 00002B50 7205                    	JC	short setdone	;AN000;EO.
 17458                                  	
 17459                                  	; MSDOS 3.3 & MSDOS 6.0
 17460                                  	; 17/12/2022
 17461                                  	;;or	word [es:di+2],2
 17462                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17463                                  	;or	byte [es:di+2],2
 17464 00002B52 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17465                                  setdone:
 17466 00002B57 E82EE8                  	call	ECritDisk
 17467 00002B5A E8251F                  	call	MakeNode
 17468 00002B5D 7317                    	JNC	short Create_ok
 17469 00002B5F C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17470 00002B64 E83CE8                  	call	LCritDisk
 17471                                  
 17472                                  	;entry	SET_MKND_ERR
 17473                                  SET_MKND_ERR:
 17474                                  
 17475                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17476                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17477                                  
 17478                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17479 00002B67 BB[6E2B]                	MOV     BX,CRTERRTAB
 17480                                  	;XLAT  ; MSDOS 3.3
 17481                                  	; 18/05/2019 - Retro DOS v4.0
 17482 00002B6A 2E                      	CS
 17483 00002B6B D7                      	XLAT
 17484                                  CreatBadRet:
 17485 00002B6C F9                      	STC
 17486 00002B6D C3                      	retn
 17487                                  
 17488                                  ; 13/05/2019 - Retro DOS v4.0
 17489                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17490                                  ; ---------------------------------------------------------------------------
 17491                                  
 17492                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17493                                  
 17494                                  ; 17/07/2018 - Retro DOS v3.0
 17495                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17496                                  
 17497                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17498                                  ;	db	0,5,52h,50h,3,5,20h
 17499                                  
 17500                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17501                                  ;	db	0,5,52h,50h,3,5,20h,2
 17502                                  
 17503                                  ; 08/08/2018
 17504                                  
 17505                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17506 00002B6E 00                      	DB	0			; none
 17507 00002B6F 05                      	DB	error_access_denied	; MakeNode error 1
 17508 00002B70 52                      	DB	error_cannot_make	; MakeNode error 2
 17509 00002B71 50                      	DB	error_file_exists	; MakeNode error 3
 17510 00002B72 03                      	DB	error_path_not_found	; MakeNode error 4
 17511 00002B73 05                      	DB	error_access_denied	; MakeNode error 5
 17512 00002B74 20                      	DB	error_sharing_violation ; MakeNode error 6
 17513                                  	; MSDOS 6.0
 17514 00002B75 02                      	DB	error_file_not_found	; MakeNode error 7
 17515                                  
 17516                                  ; ---------------------------------------------------------------------------
 17517                                  
 17518                                  ; We have just created a new file. This results in the truncation of old
 17519                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17520                                  ; file to the current size.
 17521                                  
 17522                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17523                                  ; drive number to force a Build BPB after Media Check.
 17524                                  
 17525                                  ;;; FASTOPEN 8/29/86
 17526                                  Create_ok:
 17527 00002B76 E8DFFB                  	call	FastOpen_Delete
 17528                                  ;;; FASTOPEN 8/29/86
 17529 00002B79 A0[6D05]                	mov	al,[SATTRIB]
 17530 00002B7C A808                    	test	al,attr_volume_id
 17531 00002B7E 741C                    	jz	short NoVolLabel
 17532 00002B80 C43E[A205]              	LES	DI,[THISCDS]
 17533                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 17534 00002B84 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 17535 00002B87 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 17536 00002B8A 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 17537                                  	
 17538                                  	; 18/05/2019 - Retro DOS v4.0
 17539                                  
 17540                                  	; MSDOS 6.0
 17541 00002B8E B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 17542 00002B90 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 17543                                  	
 17544 00002B93 E8F2E7                  	call	ECritDisk
 17545 00002B96 E8622C                  	call	FATREAD_CDS		; force a media check
 17546 00002B99 E807E8                  	call	LCritDisk
 17547                                  
 17548                                  NoVolLabel:
 17549 00002B9C B80200                  	MOV	ax,2
 17550 00002B9F C43E[9E05]              	LES	DI,[THISSFT]
 17551                                  ;if installed
 17552                                  	;call	JShare + 14 * 4
 17553 00002BA3 FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 17554                                  ;else
 17555                                  ;	Call	ShSU
 17556                                  ;endif
 17557 00002BA7 E8F9E7                  	call	LCritDisk
 17558 00002BAA E94901                  	jmp	SET_SFT_MODE
 17559                                  
 17560                                  ;---------------------------------------------------------------------------
 17561                                  ; Procedure Name : Dos_Create_New
 17562                                  ;
 17563                                  ; Inputs:
 17564                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17565                                  ;		terminated)
 17566                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17567                                  ;		( = -1 if current dir not involved, else
 17568                                  ;		 Points to first char after last "/" of current dir part)
 17569                                  ;	[THISCDS] Points to CDS being used
 17570                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17571                                  ;	[THISSFT] Points to SFT to fill in if file created
 17572                                  ;		(sf_mode field set so that FCB may be detected)
 17573                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17574                                  ;	AX is Attribute to create
 17575                                  ; Function:
 17576                                  ;	Try to create the specified file truncating an old one that exists
 17577                                  ; Outputs:
 17578                                  ;	sf_ref_count is NOT altered
 17579                                  ;	CARRY CLEAR
 17580                                  ;	    THISSFT filled in.
 17581                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 17582                                  ;	CARRY SET
 17583                                  ;	    AX is error code
 17584                                  ;		error_path_not_found
 17585                                  ;			Bad path (not in curr dir part if present)
 17586                                  ;		error_bad_curr_dir
 17587                                  ;			Bad path in current directory part of path
 17588                                  ;		error_access_denied
 17589                                  ;			Create a second volume id or create a dir
 17590                                  ;		error_file_exists
 17591                                  ;			Already a file by this name
 17592                                  ; DS preserved, others destroyed
 17593                                  ;---------------------------------------------------------------------------
 17594                                  
 17595                                  DOS_Create_New:
 17596 00002BAD B401                    	MOV	AH,1		; Truncate is NOT OK
 17597 00002BAF E930FF                  	JMP	Create_inter
 17598                                  
 17599                                  ; MSDOS 6.0
 17600                                  ;---------------------------------------------------------------------------
 17601                                  ; Procedure Name : Set_Media_ID
 17602                                  ;
 17603                                  ; Inputs:
 17604                                  ;	NAME1= Volume ID
 17605                                  ;	BH= 0, delete volume id
 17606                                  ;	    1, set new volume id
 17607                                  ;	DS= DOSGROUP
 17608                                  ; Function:
 17609                                  ;	Set Volume ID to DOS 4.00 Boot record.
 17610                                  ; Outputs:
 17611                                  ;	CARRY CLEAR
 17612                                  ;	    volume id set
 17613                                  ;	CARRY SET
 17614                                  ;	    AX is error code
 17615                                  ;---------------------------------------------------------------------------
 17616                                  
 17617                                  	; 18/05/2019 - Retro DOS v4.0
 17618                                  Set_Media_ID:
 17619 00002BB2 50                      	PUSH	AX		;AN000;;>32mb
 17620 00002BB3 06                      	PUSH	ES		;AN000;;>32mb
 17621 00002BB4 57                      	PUSH	DI		;AN000;;>32mb
 17622                                  
 17623 00002BB5 FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 17624 00002BB7 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 17625 00002BB9 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 17626 00002BBB B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 17627                                  
 17628                                  ;hkn; PACKET_TEMP is in DOSDATA
 17629 00002BBE BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 17630                                  
 17631 00002BC1 53                      	PUSH	BX		;AN000;;>32mb
 17632 00002BC2 52                      	PUSH	DX		;AN000;;>32mb
 17633 00002BC3 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17634                                  
 17635                                  	;invoke	$IOCTL		;AN000;;>32mb
 17636 00002BC5 E83EF7                  	call	_$IOCTL	
 17637                                  
 17638 00002BC8 5A                      	POP	DX		;AN000;;>32mb
 17639 00002BC9 5B                      	POP	BX		;AN000;;>32mb
 17640 00002BCA 7224                    	JC	short geterr	;AN000;;>32mb
 17641                                  
 17642 00002BCC 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 17643 00002BCE 7405                    	JZ	short NoName	;AN000;>32mb yes
 17644                                  
 17645                                  ;hkn; NAME1 is in DOSDATA
 17646 00002BD0 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 17647                                  
 17648 00002BD3 EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 17649                                  NoName: 			;AN000;
 17650                                  
 17651                                  ;hkn; NO_NAME_ID is in DOSDATA
 17652 00002BD5 BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 17653                                  
 17654                                  doset:				;AN000;
 17655 00002BD8 89D7                    	MOV	DI,DX		;AN000;;>32mb
 17656                                  	;add	di,6
 17657 00002BDA 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 17658                                  
 17659                                  ;hkn; ES & DS must point to SS
 17660                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 17661 00002BDD 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 17662                                  
 17663 00002BDE 1F                      	POP	DS		;AN000;;>32mb
 17664                                  
 17665                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 17666 00002BDF 16                      	PUSH	SS		;AN000;;>32mb
 17667                                  
 17668 00002BE0 07                      	POP	ES		;AN000;;>32mb
 17669 00002BE1 B90B00                  	MOV	CX,11		;AN000;;>32mb
 17670 00002BE4 F3A4                    	REP	MOVSB		;AN000;;>32mb
 17671 00002BE6 B94608                  	MOV	CX,0846H	;AN001;;>32mb
 17672 00002BE9 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 17673 00002BEB 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17674                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 17675 00002BED E816F7                  	call	_$IOCTL	
 17676                                  geterr: 			;AN000;
 17677                                  ;hkn;	PUSH	CS		;AN000;>32mb
 17678 00002BF0 16                      	PUSH	SS		;AN000;>32mb
 17679                                  
 17680 00002BF1 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 17681                                  
 17682 00002BF2 5F                      	POP	DI		;AN000;;>32mb
 17683 00002BF3 07                      	POP	ES		;AN000;;>32mb
 17684 00002BF4 58                      	POP	AX		;AN000;;>32mb
 17685 00002BF5 C3                      	retn			;AN000;>32mb
 17686                                  
 17687                                  ; MSDOS 6.0
 17688                                  ;---------------------------------------------------------------------------
 17689                                  ; Procedure Name : Set_EXT_mode
 17690                                  ;
 17691                                  ; Inputs:
 17692                                  ;	[EXTOPEN_ON]= flag for extended open
 17693                                  ;	SAVE_BX= mode specified in Extended Open
 17694                                  ; Function:
 17695                                  ;	Set mode in ThisSFT
 17696                                  ; Outputs:
 17697                                  ;	carry set,mode is set if from Extended Open
 17698                                  ;	carry clear, mode not set yet
 17699                                  ;---------------------------------------------------------------------------
 17700                                  
 17701                                  ; 13/05/2019 - Retro DOS v4.0
 17702                                  
 17703                                  Set_EXT_mode:
 17704                                  
 17705                                  ;hkn; SS override
 17706 00002BF6 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17707 00002BFC 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 17708 00002BFE 50                      	PUSH	AX			    ;AN000;EO.
 17709                                  
 17710                                  ;hkn; SS override
 17711 00002BFF 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 17712                                  	;or	[es:di+2],ax
 17713 00002C03 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 17714 00002C07 58                      	POP	AX			    ;AN000;EO.
 17715 00002C08 F9                      	STC				    ;AN000;EO.
 17716                                  NOTEX:					    ;AN000;
 17717 00002C09 C3                      	retn				    ;AN000;EO.
 17718                                  
 17719                                  ;============================================================================
 17720                                  ; OPEN.ASM, MSDOS 6.0, 1991
 17721                                  ;============================================================================
 17722                                  ; 08/08/2018 - Retro DOS v3.0
 17723                                  ; 18/05/2019 - Retro DOS v4.0
 17724                                  
 17725                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 17726                                  ;	NAME	DOS_OPEN
 17727                                  
 17728                                  ;**	OPEN.ASM - File Open
 17729                                  ;----------------------------------------------------------------------------
 17730                                  ;	Low level routines for openning a file from a file spec.
 17731                                  ;	Also misc routines for sharing errors
 17732                                  ;
 17733                                  ;	DOS_Open
 17734                                  ;	Check_Access_AX
 17735                                  ;	SHARE_ERROR
 17736                                  ;	SET_SFT_MODE
 17737                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 17738                                  ;
 17739                                  ;	Revision history:
 17740                                  ;
 17741                                  ;	    Created: ARR 30 March 1983
 17742                                  ;	    A000	version 4.00   Jan. 1988
 17743                                  ;
 17744                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 17745                                  ; 	       remote extended opens and not save_cx.
 17746                                  ;
 17747                                  ;	M035 - if open made from exec then we must set the appropriate bits
 17748                                  ;	       on the stack before calling off to the redir.
 17749                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 17750                                  ;	       to handle open from exec. In this case set the appropriate bit
 17751                                  ;	       else do not.
 17752                                  ;----------------------------------------------------------------------------	
 17753                                  
 17754                                  ;Installed = TRUE
 17755                                  
 17756                                  ;	i_need	NoSetDir,BYTE
 17757                                  ;	i_need	THISSFT,DWORD
 17758                                  ;	i_need	THISCDS,DWORD
 17759                                  ;	i_need	CURBUF,DWORD
 17760                                  ;	i_need	CurrentPDB,WORD
 17761                                  ;	i_need	CURR_DIR_END,WORD
 17762                                  ;	I_need	RetryCount,WORD
 17763                                  ;	I_need	Open_Access,BYTE
 17764                                  ;	I_need	fSharing,BYTE
 17765                                  ;	i_need	JShare,DWORD
 17766                                  ;	I_need	FastOpenFlg,byte
 17767                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 17768                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 17769                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 17770                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 17771                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 17772                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 17773                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 17774                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 17775                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 17776                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 17777                                  ;	I_need	SAVE_BX,WORD			  ;M034
 17778                                  ;
 17779                                  ;	I_need	DOS_FLAG,BYTE
 17780                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 17781                                  
 17782                                  ;Break	<DOS_Open - internal file access>
 17783                                  ;---------------------------------------------------------------------------
 17784                                  ; Procedure Name : DOS_Open
 17785                                  ;
 17786                                  ; Inputs:
 17787                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17788                                  ;		terminated)
 17789                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17790                                  ;		( = -1 if current dir not involved, else
 17791                                  ;		 Points to first char after last "/" of current dir part)
 17792                                  ;	[THISCDS] Points to CDS being used
 17793                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17794                                  ;	[THISSFT] Points to SFT to fill in if file found
 17795                                  ;		(sf_mode field set so that FCB may be detected)
 17796                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17797                                  ;	AX is Access and Sharing mode
 17798                                  ;	  High NIBBLE of AL (Sharing Mode)
 17799                                  ;		sharing_compat	   file is opened in compatibility mode
 17800                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 17801                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 17802                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 17803                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 17804                                  ;	  Low NIBBLE of AL (Access Mode)
 17805                                  ;		open_for_read	file is opened for reading
 17806                                  ;		open_for_write	file is opened for writing
 17807                                  ;		open_for_both	file is opened for both reading and writing.
 17808                                  ;
 17809                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 17810                                  ;		(not checked)
 17811                                  ; Function:
 17812                                  ;	Try to open the specified file
 17813                                  ; Outputs:
 17814                                  ;	sf_ref_count is NOT altered
 17815                                  ;	CARRY CLEAR
 17816                                  ;	    THISSFT filled in.
 17817                                  ;	CARRY SET
 17818                                  ;	    AX is error code
 17819                                  ;		error_file_not_found
 17820                                  ;			Last element of path not found
 17821                                  ;		error_path_not_found
 17822                                  ;			Bad path (not in curr dir part if present)
 17823                                  ;		error_bad_curr_dir
 17824                                  ;			Bad path in current directory part of path
 17825                                  ;		error_invalid_access
 17826                                  ;			Bad sharing mode or bad access mode or bad combination
 17827                                  ;		error_access_denied
 17828                                  ;			Attempt to open read only file for writting, or
 17829                                  ;			open a directory
 17830                                  ;		error_sharing_violation
 17831                                  ;			The sharing mode was correct but not allowed
 17832                                  ;			generates an INT 24 on compatibility mode SFTs
 17833                                  ; DS preserved, others destroyed
 17834                                  ;----------------------------------------------------------------------------
 17835                                  
 17836                                  ; 18/05/2019 - Retro DOS v4.0
 17837                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 17838                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17839                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 17840                                  
 17841                                  DOS_OPEN:
 17842                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 17843                                  
 17844 00002C0A C606[4C03]00            	MOV	byte [NoSetDir],0
 17845 00002C0F E83601                  	CALL	Check_Access_AX
 17846 00002C12 722B                    	JC	short do_ret_label	    ; retc
 17847                                  
 17848 00002C14 C43E[9E05]              	LES	DI,[THISSFT]
 17849 00002C18 30E4                    	XOR	AH,AH
 17850                                  
 17851                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 17852                                  
 17853 00002C1A 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 17854 00002C1E 06                      	PUSH	ES
 17855 00002C1F C436[A205]              	LES	SI,[THISCDS]
 17856                                  	; 18/08/2018
 17857 00002C23 83FEFF                  	CMP	SI,-1
 17858 00002C26 7530                    	JNZ	short TEST_RE_NET1
 17859 00002C28 07                      	POP	ES
 17860                                  
 17861                                  	; MSDOS 6.0
 17862                                  ;Extended open hooks
 17863 00002C29 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 17864 00002C2E 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 17865                                  _IFS_extopen:									;AN000;
 17866 00002C30 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 17867                                  					    ; with which call was made. This
 17868                                  					    ; has the open access bits. 
 17869                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 17870                                  	
 17871 00002C33 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 17872                                  	;mov	ax,112Eh
 17873                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 17874 00002C34 B82E11                  	mov	ax,(MultNET*256)+46 
 17875 00002C37 CD2F                    	INT	2FH			    ;FT.				;AN000;
 17876 00002C39 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 17877 00002C3A C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 17878                                  
 17879                                  do_ret_label:
 17880 00002C3F C3                      	retn				    ;FT.				;AN000;
 17881                                  _NOEXTOP:
 17882                                  ;Extended open hooks
 17883                                  	;
 17884                                  ;IF NOT Installed
 17885                                  	;transfer NET_SEQ_OPEN
 17886                                  ;ELSE
 17887                                  	
 17888                                  do_net_int2f:
 17889 00002C40 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 17890 00002C45 7409                    	jz	short not_exec_open	; N: just do net open
 17891                                  					; Y: check to see if redir is aware
 17892                                  					;    of this 
 17893                                  	
 17894                                  					; M042 - start
 17895                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 17896 00002C47 F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 17897                                  					; Q: does this redir know how to 
 17898                                  					;    this
 17899 00002C4C 7402                    	jz	short not_exec_open	; N: just do net open
 17900                                  					; Y: set bit 3 of access byte and 
 17901                                  					;    set sharing mode to DENY_WRITE
 17902                                  					; M042 - end
 17903                                  	
 17904                                  	; NOTE: This specific mode has not been set for the code assembled
 17905                                  	; under the "NOT Installed" conditional. Currently Installed is 
 17906                                  	; always one.
 17907                                  					; M035 - set the bits on the stack
 17908                                  	;mov	al,23h
 17909 00002C4E B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 17910                                  	
 17911                                  not_exec_open:
 17912                                  	; MSDOS 3.3 & MSDOS 6.0
 17913 00002C50 50                      	PUSH	AX
 17914                                  
 17915                                  	;MOV	AX,(MultNET SHL 8) OR 22
 17916                                  	;INT	2FH
 17917                                  
 17918 00002C51 B81611                  	mov     ax,1116h
 17919 00002C54 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 17920                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17921                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17922                                  			; STACK: WORD file open mode
 17923                                  			; Return: CF set on error
 17924                                  
 17925 00002C56 5B                      	POP	BX			; clean stack
 17926                                  ;do_ret_label: ; 09/08/2018
 17927 00002C57 C3                      	retn
 17928                                  ;ENDIF
 17929                                  
 17930                                  TEST_RE_NET1:
 17931                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17932                                  	; 17/12/2022
 17933 00002C58 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17934 00002C5D 07                      	POP	ES
 17935                                  	; 18/05/2019
 17936 00002C5E 7409                    	JZ	short LOCAL_OPEN
 17937                                  
 17938                                  ;Extended open hooks
 17939                                  	; MSDOS 6.0
 17940 00002C60 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 17941 00002C65 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 17942                                  ;Extended open hooks
 17943                                  
 17944                                  ;IF NOT Installed
 17945                                  ;	transfer NET_OPEN
 17946                                  ;ELSE
 17947 00002C67 EBD7                    	jmp	short do_net_int2f
 17948                                  ;ENDIF
 17949                                  
 17950                                  LOCAL_OPEN:
 17951                                  	; MSDOS 3.3 & MSDOS 6.0
 17952 00002C69 E81CE7                  	call	ECritDisk
 17953                                  
 17954                                  ; DOS 3.3 FastOPen 6/16/86
 17955                                  
 17956                                  	;or	byte [FastOpenFlg],5
 17957 00002C6C 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 17958                                  
 17959 00002C71 E87B13                  	call	GETPATH
 17960                                  
 17961                                  ; DOS 3.3 FastOPen 6/16/86
 17962                                  
 17963 00002C74 731D                    	JNC	short Open_found
 17964 00002C76 7511                    	JNZ	short bad_path2
 17965 00002C78 08C9                    	OR	CL,CL
 17966 00002C7A 740D                    	JZ	short bad_path2
 17967                                  OpenFNF:
 17968 00002C7C B80200                  	MOV	AX,error_file_not_found	; 2
 17969                                  OpenBadRet:
 17970                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 17971                                  	; 12/08/2018
 17972                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 17973                                  	; MSDOS 6.0
 17974 00002C7F 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 17975 00002C85 F9                      	STC
 17976                                  	;call	LCritDisk
 17977                                  	; 16/12/2022
 17978 00002C86 E91AE7                  	jmp	LCritDisk
 17979                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 17980                                  	;retn 	; 08/09/2018
 17981                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17982                                  	;jmp	Clear_FastOpen
 17983                                  
 17984                                  bad_path2:
 17985 00002C89 B80300                  	MOV	AX,error_path_not_found	; 3
 17986 00002C8C EBF1                    	JMP	short OpenBadRet
 17987                                  
 17988                                  Open_Bad_Access:
 17989 00002C8E B80500                  	MOV	AX,error_access_denied	; 5
 17990 00002C91 EBEC                    	JMP	short OpenBadRet
 17991                                  
 17992                                  Open_found:
 17993 00002C93 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 17994 00002C95 08E4                    	OR	AH,AH
 17995 00002C97 783E                    	JS	short open_ok		; Devices don't have attributes
 17996 00002C99 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 17997                                  	;mov	al,[es:bx+0Bh]
 17998 00002C9D 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 17999 00002CA1 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18000 00002CA3 75E9                    	JNZ	short Open_Bad_Access
 18001 00002CA5 A801                    	TEST	AL,attr_read_only	; check write on read only
 18002 00002CA7 742E                    	JZ	short open_ok
 18003                                  
 18004                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18005                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18006                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18007                                  ; processing until the actual write operation:
 18008                                  ;
 18009                                  ; If FCB, then we change the mode to be read_only.
 18010                                  ; If net_FCB, then we change the mode to be read_only.
 18011                                  ; If not open for read then error.
 18012                                  
 18013 00002CA9 1E                      	push	ds
 18014 00002CAA 56                      	push	si
 18015 00002CAB C536[9E05]              	LDS	SI,[THISSFT]
 18016                                  	;mov	cx,[si+2]
 18017 00002CAF 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18018                                  	; 17/12/2022
 18019                                  	;test	ch,80h
 18020 00002CB2 F6C580                  	test	ch,sf_isFCB>>8
 18021                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18022 00002CB5 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18023 00002CB7 88CA                    	MOV	DL,CL
 18024 00002CB9 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18025 00002CBC 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18026 00002CBF 7508                    	JNZ	short NormalOpen	; no
 18027                                  ResetAccess:
 18028                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18029                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18030                                  	; 16/12/2022
 18031 00002CC1 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18032                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18033 00002CC4 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18034 00002CC7 EB0C                    	JMP	SHORT FillSFT
 18035                                  
 18036                                  ; The SFT is normal. See if the requested access is open_for_read
 18037                                  
 18038                                  NormalOpen:
 18039 00002CC9 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18040 00002CCC 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18041 00002CCF 7404                    	JZ	short FillSFT
 18042 00002CD1 5E                      	pop	si
 18043 00002CD2 1F                      	pop	ds
 18044 00002CD3 EBB9                    	JMP	short Open_Bad_Access
 18045                                  ;
 18046                                  ; All done, restore registers and fill the SFT.
 18047                                  ;
 18048                                  FillSFT:
 18049 00002CD5 5E                      	pop	si
 18050 00002CD6 1F                      	pop	ds
 18051                                  open_ok:
 18052 00002CD7 E8671F                  	call	DOOPEN			; Fill in SFT
 18053                                  
 18054                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18055                                  	; 18/05/2019
 18056                                  	;and	byte [ss:FastOpenFlag],80h
 18057 00002CDA 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18058                                  	; 12/08/2018
 18059                                  	;and	byte [FastOpenFlg],Fast_yes	
 18060                                  
 18061                                  	; MSDOS 6.0
 18062 00002CE0 E84600                  	CALL	DO_SHARE_CHECK
 18063 00002CE3 7303                    	JNC	short SHARE_OK
 18064                                  	;call	LCritDisk
 18065                                  	; 16/12/2022
 18066 00002CE5 E9BBE6                  	jmp	LCritDisk
 18067                                  	;;JMP	short Clear_FastOpen
 18068                                  	;retn	; 18/05/2019
 18069                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18070                                  	;jmp	short Clear_FastOpen	
 18071                                  
 18072                                  	; MSDOS 3.3
 18073                                  ;DO_SHARE_CHECK:
 18074                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18075                                  ;OpenShareRetry:
 18076                                  ;	push	cx			; Save number left to do
 18077                                  ;	call	SHARE_CHECK		; Final Check
 18078                                  ;	pop	cx			; CX = # left
 18079                                  ;	JNC	short SHARE_OK		; No problem with access
 18080                                  ;	call	Idle
 18081                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18082                                  ;OpenShareFail:
 18083                                  ;	LES	DI,[THISSFT]
 18084                                  ;	call	SHARE_ERROR
 18085                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18086                                  	
 18087                                  	;12/08/2018
 18088                                  	;mov	byte [ss:FastOpenFlg],0
 18089                                  	;08/09/2018
 18090                                  	;mov	byte [FastOpenFlg],0
 18091                                  	;call	LCritDisk
 18092                                  	;JMP	short Clear_FastOpen
 18093                                  	;retn
 18094                                  
 18095                                  SHARE_OK:
 18096                                  	; MSDOS 3.3 & MSDOS 6.0
 18097 00002CE8 B80300                  	MOV	AX,3
 18098 00002CEB C43E[9E05]              	LES	DI,[THISSFT]
 18099                                  ;if installed
 18100                                  	;call	JShare + 14 * 4
 18101 00002CEF FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18102                                  ;else
 18103                                  ;	Call	ShSU
 18104                                  ;endif
 18105 00002CF3 E8ADE6                  	call	LCritDisk
 18106                                  	
 18107                                  	;FallThru Set_SFT_Mode
 18108                                  
 18109                                  ;----------------------------------------------------------------------------
 18110                                  ; Procedure Name : SET_SFT_MODE
 18111                                  ;
 18112                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18113                                  ;
 18114                                  ;   Inputs:
 18115                                  ;	ThisSFT points to SFT
 18116                                  ;
 18117                                  ;   Outputs:
 18118                                  ;	Carry clear
 18119                                  ;   Registers modified: AX.
 18120                                  ;---------------------------------------------------------------------------
 18121                                  
 18122                                  ;hkn; called from create. DS already set up to DOSDATA.
 18123                                  
 18124                                  SET_SFT_MODE:
 18125 00002CF6 C43E[9E05]              	LES	DI,[THISSFT]
 18126 00002CFA E8D019                  	call	DEV_OPEN_SFT
 18127                                  	;test	word [es:di+2],8000h
 18128                                  	; 17/12/2022
 18129                                  	;test	byte [es:di+3],80h
 18130 00002CFD 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18131                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18132 00002D02 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18133 00002D04 A1[3003]                	MOV	AX,[CurrentPDB]
 18134                                  	;mov	[es:di+31h],ax
 18135 00002D07 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18136                                  
 18137                                  Clear_FastOpen:
 18138 00002D0B C3                      	retn			       ;;;;; DOS 3.3
 18139                                  
 18140                                  ;----------------------------------------------------------------------------
 18141                                  ; Procedure Name : SHARE_ERROR
 18142                                  ;
 18143                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18144                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18145                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18146                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18147                                  ;---------------------------------------------------------------------------
 18148                                  
 18149                                  SHARE_ERROR:
 18150                                  	; 17/12/2022
 18151                                  	;test	byte [es:di+3],80h
 18152 00002D0C 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18153                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18154 00002D11 750C                    	JNZ	short _HARD_ERR
 18155 00002D13 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18156 00002D17 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18157 00002D1A 80F900                  	CMP	CL,SHARING_COMPAT ; 0
 18158 00002D1D 7505                    	JNE	short _NO_HARD_ERR
 18159                                  _HARD_ERR:
 18160 00002D1F E84D47                  	call	SHARE_VIOLATION
 18161                                  	;retnc				; User wants retry
 18162 00002D22 73E7                    	jnc	short Clear_FastOpen
 18163                                  _NO_HARD_ERR:
 18164 00002D24 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18165 00002D27 F9                      	STC
 18166 00002D28 C3                      	retn
 18167                                  
 18168                                  ; MSDOS 6.0
 18169                                  ;----------------------------------------------------------------------------
 18170                                  ; Procedure Name : DO_SHARE_CHECK
 18171                                  ;
 18172                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18173                                  ; Functions: check file sharing mode is valid
 18174                                  ; Output: carry set, error
 18175                                  ;	  carry clear, share ok
 18176                                  ;----------------------------------------------------------------------------
 18177                                  
 18178                                  	; 18/05/2019 - Retro DOS v4.0
 18179                                  DO_SHARE_CHECK:
 18180 00002D29 E85CE6                  	call	ECritDisk		; enter critical section
 18181                                  OPN_RETRY:
 18182 00002D2C 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18183                                  OpenShareRetry:
 18184 00002D30 51                      	push	cx			; Save number left to do
 18185 00002D31 E83647                  	call	SHARE_CHECK		; Final Check
 18186 00002D34 59                      	pop	cx			; CX = # left
 18187 00002D35 730E                    	JNC	short Share_Ok2		; No problem with access
 18188 00002D37 E844E5                  	call	Idle
 18189 00002D3A E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18190                                  OpenShareFail:
 18191 00002D3C C43E[9E05]              	LES	DI,[THISSFT]
 18192 00002D40 E8C9FF                  	call	SHARE_ERROR
 18193 00002D43 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18194                                  Share_Ok2:
 18195                                  	;call	LCritDisk		; leave critical section
 18196                                  	;retn
 18197                                  	; 18/12/2022
 18198 00002D45 E95BE6                  	jmp	LCritDisk
 18199                                  
 18200                                  ;-----------------------------------------------------------------------------
 18201                                  ; Procedure Name : Check_Access
 18202                                  ;
 18203                                  ; Inputs:
 18204                                  ;	AX is mode
 18205                                  ;	  High NIBBLE of AL (Sharing Mode)
 18206                                  ;		sharing_compat	   file is opened in compatibility mode
 18207                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18208                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18209                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18210                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18211                                  ;	  Low NIBBLE of AL (Access Mode)
 18212                                  ;		open_for_read	file is opened for reading
 18213                                  ;		open_for_write	file is opened for writing
 18214                                  ;		open_for_both	file is opened for both reading and writing.
 18215                                  ; Function:
 18216                                  ;	Check this access mode for correctness
 18217                                  ; Outputs:
 18218                                  ;	[open_access] = AL input
 18219                                  ;	Carry Clear
 18220                                  ;		Mode is correct
 18221                                  ;		AX unchanged
 18222                                  ;	Carry Set
 18223                                  ;		Mode is bad
 18224                                  ;		AX = error_invalid_access
 18225                                  ; No other registers effected
 18226                                  ;----------------------------------------------------------------------------
 18227                                  
 18228                                  Check_Access_AX:
 18229 00002D48 A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18230 00002D4B 53                      	PUSH	BX
 18231                                  
 18232                                  ;	If sharing, then test for special sharing mode for FCBs
 18233                                  
 18234 00002D4C 88C3                    	MOV	BL,AL
 18235 00002D4E 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18236 00002D51 803E[7205]FF            	CMP	byte [FSHARING],-1
 18237 00002D56 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18238 00002D58 80FB70                  	CMP	BL,SHARING_NET_FCB
 18239 00002D5B 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18240                                  CheckShareMode:
 18241 00002D5D 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18242 00002D60 770D                    	JA	short Make_Bad_Access
 18243                                  CheckAccessMode:
 18244 00002D62 88C3                    	MOV	BL,AL
 18245 00002D64 80E30F                  	AND	BL,access_mask
 18246 00002D67 80FB02                  	CMP	BL,2
 18247 00002D6A 7703                    	JA	short Make_Bad_Access
 18248 00002D6C 5B                      	POP	BX
 18249 00002D6D F8                      	CLC
 18250 00002D6E C3                      	retn
 18251                                  
 18252                                  Make_Bad_Access:
 18253 00002D6F B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18254 00002D72 5B                      	POP	BX
 18255 00002D73 F9                      	STC
 18256 00002D74 C3                      	retn
 18257                                  
 18258                                  ;============================================================================
 18259                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18260                                  ;============================================================================
 18261                                  ; 08/08/2018 - Retro DOS v3.0
 18262                                  ; 18/05/2019 - Retro DOS v4.0
 18263                                  
 18264                                  ;**	Low level routine for returning disk drive information from a local
 18265                                  ;	  or NET device
 18266                                  ;
 18267                                  ;	DISK_INFO
 18268                                  ;
 18269                                  ;	  Modification history:
 18270                                  ;
 18271                                  ;		Created: ARR 30 March 1983
 18272                                  
 18273                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18274                                  ;---------------------------------------------------------------------------
 18275                                  ; Procedure Name : DISK_INFO
 18276                                  ;
 18277                                  ; Inputs:
 18278                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18279                                  ;		(It MAY NOT be NUL, error not detected)
 18280                                  ; Function:
 18281                                  ;	Get Interesting Drive Information
 18282                                  ; Returns:
 18283                                  ;	DX = Number of free allocation units
 18284                                  ;	BX = Total Number of allocation units on disk
 18285                                  ;	CX = Sector size
 18286                                  ;	AL = Sectors per allocation unit
 18287                                  ;	AH = FAT ID BYTE
 18288                                  ;	Carry set if error (currently user FAILed to I 24)
 18289                                  ; Segs except ES preserved, others destroyed
 18290                                  ;----------------------------------------------------------------------------
 18291                                  
 18292                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18293                                  ;hkn; DOSDATA. 
 18294                                  
 18295                                  DISK_INFO:
 18296                                  	; 08/08/2018 - Retro DOS v3.0
 18297                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18298                                  
 18299 00002D75 E84BE5                  	call	TestNet
 18300 00002D78 7306                    	JNC	short LOCAL_DSK_INFO
 18301                                  
 18302                                  ;IF NOT Installed
 18303                                  ;	transfer NET_DISK_INFO
 18304                                  ;ELSE
 18305                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18306                                  	;INT	2FH
 18307                                  	;return
 18308                                  
 18309 00002D7A B80C11                  	mov     ax,110Ch
 18310 00002D7D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18311                                  			; ES:DI -> current directory
 18312                                  			; Return: AL = sectors per cluster, BX = total clusters
 18313                                  			; CX = bytes per sector, DX = number of available clusters
 18314 00002D7F C3                      	retn
 18315                                  ;ENDIF
 18316                                  
 18317                                  LOCAL_DSK_INFO:
 18318 00002D80 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18319 00002D85 E800E6                  	call	ECritDisk
 18320 00002D88 E8702A                  	call	FATREAD_CDS		; perform media check.
 18321 00002D8B 7241                    	JC	short CRIT_LEAVE
 18322 00002D8D BB0200                  	MOV	BX,2
 18323 00002D90 E8B628                  	call	UNPACK			; Get first FAT sector into CURBUF
 18324 00002D93 7239                    	JC	short CRIT_LEAVE
 18325 00002D95 C536[E205]              	LDS	SI,[CURBUF]
 18326                                  	;mov	ah,[si+20]
 18327 00002D99 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18328                                  
 18329                                  ;hkn; SS is DOSDATA
 18330 00002D9C 16                      	push	ss
 18331 00002D9D 1F                      	pop	ds
 18332                                  	;mov	cx,[es:bp+0Dh]
 18333 00002D9E 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18334                                  
 18335                                  ; Examine the current free count. If it indicates that we have an invalid
 18336                                  ; count, do the expensive calculation.
 18337                                  
 18338                                  	;mov	dx,[es:bp+1Fh]
 18339 00002DA2 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18340 00002DA6 83FAFF                  	CMP	DX,-1			; is it valid?
 18341 00002DA9 7404                    	JZ	short DoScan
 18342                                  
 18343                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18344                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18345                                  ; the count.
 18346                                  
 18347 00002DAB 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18348 00002DAD 7222                    	JB	short GotVal		; yes, trust it.
 18349                                  DoScan:
 18350 00002DAF 31D2                    	XOR	DX,DX
 18351 00002DB1 49                      	DEC	CX
 18352                                  SCANFREE:
 18353 00002DB2 E89428                  	call	UNPACK
 18354 00002DB5 7217                    	JC	short CRIT_LEAVE
 18355 00002DB7 7501                    	JNZ	short NOTFREECLUS
 18356 00002DB9 42                      	INC	DX			; A free one
 18357                                  NOTFREECLUS:
 18358 00002DBA 43                      	INC	BX			; Next cluster
 18359 00002DBB E2F5                    	LOOP	SCANFREE
 18360 00002DBD 4B                      	DEC	BX			; BX was next cluster. Convert to
 18361                                  ReturnVals:
 18362 00002DBE 4B                      	DEC	BX			; count
 18363                                  	;mov	al,[es:bp+4]
 18364 00002DBF 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18365 00002DC3 FEC0                    	INC	AL			; Sectors/cluster
 18366                                  	;mov	cx,[es:bp+2]
 18367 00002DC5 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18368                                  	;mov	[es:bp+1Fh],dx
 18369 00002DC9 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18370 00002DCD F8                      	CLC
 18371                                  CRIT_LEAVE:
 18372                                  	;call	LCritDisk
 18373                                  	;retn
 18374                                  	; 17/12/2022
 18375 00002DCE E9D2E5                  	jmp	LCritDisk
 18376                                  
 18377                                  ; We have correctly computed everything previously. Load up registers for
 18378                                  ; return.
 18379                                  
 18380                                  GotVal: 
 18381 00002DD1 89CB                    	MOV	BX,CX			; get cluster count
 18382 00002DD3 EBE9                    	JMP	short ReturnVals
 18383                                  
 18384                                  ;============================================================================
 18385                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18386                                  ;============================================================================
 18387                                  ; 22/07/2018 - Retro DOS v3.0
 18388                                  
 18389                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18390                                  ;	NAME	DOS_SEARCH
 18391                                  
 18392                                  ;**	Low level routines for doing local and NET directory searches
 18393                                  ;
 18394                                  ;	DOS_SEARCH_FIRST
 18395                                  ;	DOS_SEARCH_NEXT
 18396                                  ;	RENAME_NEXT
 18397                                  ;
 18398                                  ;	Revision history:
 18399                                  ;
 18400                                  ;	    Created: ARR 30 March 1983
 18401                                  ;	    A000	version 4.00  Jan. 1988
 18402                                  ;	    A001	PTM 3564 -- search for fastopen
 18403                                  
 18404                                  ;Installed = TRUE
 18405                                  
 18406                                  ;--------------------------------------------------------------------------
 18407                                  ;
 18408                                  ; Procedure Name : DOS_SEARCH_FIRST
 18409                                  ;
 18410                                  ; Inputs:
 18411                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18412                                  ;		terminated)
 18413                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18414                                  ;		( = -1 if current dir not involved, else
 18415                                  ;		 Points to first char after last "/" of current dir part)
 18416                                  ;	[THISCDS] Points to CDS being used
 18417                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18418                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18419                                  ;	[DMAADD] Points to 53 byte buffer
 18420                                  ; Function:
 18421                                  ;	Initiate a search for the given file spec
 18422                                  ; Outputs:
 18423                                  ;	CARRY CLEAR
 18424                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18425                                  ;
 18426                                  ;	LOCAL
 18427                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18428                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18429                                  ;	    11 byte search name with Meta chars in it
 18430                                  ;	    Search Attribute Byte, attribute of search
 18431                                  ;	    WORD LastEnt value
 18432                                  ;	    WORD DirStart
 18433                                  ;	    4 byte pad
 18434                                  ;	    32 bytes of the directory entry found
 18435                                  ;	NET
 18436                                  ;	    21 bytes First byte has high bit set
 18437                                  ;	    32 bytes of the directory entry found
 18438                                  ;
 18439                                  ;	CARRY SET
 18440                                  ;	    AX = error code
 18441                                  ;		error_no_more_files
 18442                                  ;			No match for this file
 18443                                  ;		error_path_not_found
 18444                                  ;			Bad path (not in curr dir part if present)
 18445                                  ;		error_bad_curr_dir
 18446                                  ;			Bad path in current directory part of path
 18447                                  ; DS preserved, others destroyed
 18448                                  ;---------------------------------------------------------------------------
 18449                                  
 18450                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18451                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18452                                  
 18453                                  DOS_SEARCH_FIRST:
 18454                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18455                                  
 18456 00002DD5 C43E[A205]              	LES	DI,[THISCDS]
 18457 00002DD9 83FFFF                  	CMP	DI,-1
 18458 00002DDC 7506                    	JNZ	short TEST_RE_NET2
 18459                                  
 18460                                  ;IF NOT Installed
 18461                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18462                                  ;ELSE
 18463                                  	;mov	ax,1119h
 18464 00002DDE B81911                  	MOV	AX,(MultNET<<8)|25
 18465 00002DE1 CD2F                    	INT	2Fh
 18466 00002DE3 C3                      	retn
 18467                                  ;ENDIF
 18468                                  
 18469                                  TEST_RE_NET2:
 18470                                  	;test	word [es:di+43h],8000h
 18471                                  	; 17/12/2022
 18472                                  	;test	byte [es:di+44h],80h
 18473                                  	; 28/12/2022 (BugFix)
 18474 00002DE4 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8	
 18475                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18476 00002DE9 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18477                                  
 18478                                  ;IF NOT Installed
 18479                                  ;	transfer NET_SEARCH_FIRST
 18480                                  ;ELSE
 18481                                  	;mov	ax,111Bh
 18482 00002DEB B81B11                  	MOV	AX,(MultNET<<8)|27
 18483 00002DEE CD2F                    	INT	2FH
 18484 00002DF0 C3                      	retn
 18485                                  ;ENDIF
 18486                                  	; 18/05/2019 - Retro DOS v4.0
 18487                                  LOCAL_SEARCH_FIRST:
 18488 00002DF1 E894E5                  	call	ECritDisk
 18489                                  	; MSDOS 6.0
 18490                                  	;;test	word [DOS34_FLAG],400h
 18491                                  	; 17/12/2022
 18492                                  	;test	byte [DOS34_FLAG+1],04h
 18493 00002DF4 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18494                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18495 00002DF9 7405                    	JZ	short NOFN			;AN000;
 18496                                  	;or	byte [FastOpenFlg],1
 18497 00002DFB 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18498                                  NOFN:						;AN000;
 18499 00002E00 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18500                                  	; MSDOS 6.0
 18501 00002E05 E84101                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18502 00002E08 7305                    	JNC	short norm_GETPATH	;AN000;;FO. no
 18503                                  	;and	byte [FastOpenFlg],80h
 18504 00002E0A 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18505                                  norm_GETPATH:
 18506 00002E0F E8DD11                  	call	GETPATH
 18507                                  	; BX = offset NAME1
 18508                                  ;_getdone:
 18509 00002E12 7318                    	JNC	short find_check_dev
 18510 00002E14 7511                    	JNZ	short bad_path3
 18511 00002E16 08C9                    	OR	CL,CL
 18512 00002E18 740D                    	JZ	short bad_path3
 18513                                  find_no_more:
 18514                                  	;mov	ax,12h
 18515 00002E1A B81200                  	MOV	AX,error_no_more_files
 18516                                  BadBye:
 18517                                  	; MSDOS 6.0
 18518 00002E1D 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 18519                                  
 18520 00002E23 F9                      	STC
 18521                                  	;call	LCritDisk
 18522                                  	;retn
 18523                                  	; 18/12/2022
 18524 00002E24 E97CE5                  	jmp	LCritDisk
 18525                                  
 18526                                  bad_path3:
 18527                                  	;mov	ax,3
 18528 00002E27 B80300                  	MOV	AX,error_path_not_found
 18529 00002E2A EBF1                    	JMP	short BadBye
 18530                                  
 18531                                  find_check_dev:
 18532 00002E2C 08E4                    	OR	AH,AH
 18533 00002E2E 790A                    	JNS	short found_entry
 18534 00002E30 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 18535 00002E36 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 18536                                  found_entry:
 18537                                  
 18538                                  ; We set the physical drive byte here Instead of after found_it; Doing
 18539                                  ; a search-next may not have wfp_start set correctly
 18540                                  
 18541 00002E3A C43E[2C03]              	LES	DI,[DMAADD]
 18542 00002E3E 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 18543 00002E42 AC                      	LODSB
 18544 00002E43 2C40                    	SUB	AL,'A'-1                ; logical drive
 18545 00002E45 AA                      	STOSB				; High bit not set (local)
 18546                                  found_it:
 18547 00002E46 C43E[2C03]              	LES	DI,[DMAADD]
 18548 00002E4A 47                      	INC	DI
 18549                                  
 18550                                  	; MSDOS 6.0
 18551 00002E4B 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 18552                                  	;test	byte [FastOpenFlg],10h
 18553 00002E4C F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 18554 00002E51 7408                    	JZ	short notfast			  ;FO.;AN001;
 18555 00002E53 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 18556 00002E55 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 18557 00002E59 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 18558                                  
 18559                                  notfast:
 18560 00002E5B BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 18561                                  movmov:
 18562                                  ; Special E5 code
 18563 00002E5E A4                      	MOVSB
 18564 00002E5F 26807DFF05              	CMP	BYTE [ES:DI-1],5
 18565 00002E64 7505                    	JNZ	short NOTKANJB
 18566 00002E66 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 18567                                  NOTKANJB:
 18568 00002E6B B90A00                  	MOV	CX,10
 18569 00002E6E F3A4                    	REP	MOVSB
 18570                                  
 18571                                  	; 08/09/2018
 18572 00002E70 1F                      	POP	DS			;FO.;AN001; restore ds
 18573                                  
 18574 00002E71 A0[6B05]                	MOV	AL,[ATTRIB]
 18575 00002E74 AA                      	STOSB
 18576 00002E75 50                      	PUSH	AX			; Save AH device info
 18577 00002E76 A1[4803]                	MOV	AX,[LASTENT]
 18578 00002E79 AB                      	STOSW
 18579 00002E7A A1[C205]                	MOV	AX,[DIRSTART]
 18580 00002E7D AB                      	STOSW
 18581                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 18582 00002E7E 83C704                  	ADD	DI,4
 18583 00002E81 58                      	POP	AX			; Recover AH device info
 18584 00002E82 08E4                    	OR	AH,AH
 18585 00002E84 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 18586 00002E86 833E[E205]FF            	CMP	WORD [CURBUF],-1
 18587 00002E8B 7510                    	JNZ	short OKSTORE
 18588                                  
 18589                                  	; MSDOS 6.0
 18590 00002E8D F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 18591                                  					;AN000;;FO. from fastopen and is good
 18592 00002E92 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 18593                                  
 18594                                  	; The user has specified the root directory itself, rather than some
 18595                                  	; contents of it. We can't "find" that.
 18596                                  
 18597 00002E94 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 18598                                  					;   stuffing a -1 at Lastent
 18599 00002E9A E97DFF                  	JMP	find_no_more
 18600                                  
 18601                                  OKSTORE:
 18602 00002E9D 8E1E[E405]              	MOV	DS,[CURBUF+2]
 18603                                  DOSREL:
 18604                                  	; BX = offset NAME1 (from GETPATH)
 18605 00002EA1 89DE                    	MOV	SI,BX			; SI-> start of entry
 18606                                  
 18607                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 18608                                  
 18609                                  	;mov	cx,32
 18610 00002EA3 B92000                  	MOV	CX,dir_entry.size
 18611                                  ;;;;; 7/29/86
 18612 00002EA6 89F8                    	MOV	AX,DI			; save the 1st byte addr
 18613 00002EA8 F3A4                    	REP	MOVSB
 18614 00002EAA 89C7                    	MOV	DI,AX			; restore 1st byte addr
 18615 00002EAC 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 18616 00002EB0 7504                    	JNZ	short NO05
 18617 00002EB2 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 18618                                  NO05:
 18619                                  
 18620                                  ;;;;; 7/29/86
 18621                                  
 18622                                  ;hkn; FastOpenflg is in DOSDATA use SS
 18623                                  	; 16/12/2022
 18624                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18625                                  	; MSDOS 6.0
 18626                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18627                                  	; 18/05/2019 - Retro DOS v4.0
 18628 00002EB6 16                      	push	ss
 18629 00002EB7 1F                      	pop	ds
 18630                                  	; 16/12/2022
 18631 00002EB8 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 18632                                  
 18633                                  ;hkn; SS is DOSDATA
 18634                                  	;push	ss
 18635                                  	;pop	ds
 18636 00002EBD F8                      	CLC
 18637                                  	;call	LCritDisk
 18638                                  	;retn
 18639                                  	; 16/12/2022
 18640 00002EBE E9E2E4                  	jmp	LCritDisk
 18641                                  
 18642                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 18643                                  ;----------------------------------------------------------------------------
 18644                                  ;
 18645                                  ; Procedure Name : DOS_SEARCH_NEXT
 18646                                  ;
 18647                                  ; Inputs:
 18648                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 18649                                  ;	    (only first 21 bytes must have valid information)
 18650                                  ; Function:
 18651                                  ;	Look for subsequent matches
 18652                                  ; Outputs:
 18653                                  ;	CARRY CLEAR
 18654                                  ;	    The 53 bytes at DMAADD are updated for next call
 18655                                  ;		(see DOS_SEARCH_FIRST)
 18656                                  ;	CARRY SET
 18657                                  ;	    AX = error code
 18658                                  ;		error_no_more_files
 18659                                  ;			No more files to find
 18660                                  ; DS preserved, others destroyed
 18661                                  ;---------------------------------------------------------------------------
 18662                                  
 18663                                  ;hkn; called from search.asm. DS already set up at this point.
 18664                                  
 18665                                  DOS_SEARCH_NEXT:
 18666 00002EC1 C43E[2C03]              	LES	DI,[DMAADD]
 18667 00002EC5 268A05                  	MOV	AL,[ES:DI]
 18668 00002EC8 A880                    	TEST	AL,80H			; Test for NET
 18669 00002ECA 7406                    	JZ	short LOCAL_SEARCH_NEXT
 18670                                  ;IF NOT Installed
 18671                                  ;	transfer NET_SEARCH_NEXT
 18672                                  ;ELSE
 18673                                  	;mov	ax,111Ch
 18674 00002ECC B81C11                  	MOV	AX,(MultNET<<8)|28
 18675 00002ECF CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 18676                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 18677                                  		     ; Return: CF set on error, AX = DOS error code
 18678                                  		     ; CF clear if successful
 18679 00002ED1 C3                      	retn
 18680                                  ;ENDIF
 18681                                  
 18682                                  LOCAL_SEARCH_NEXT:
 18683                                  	;AL is drive A=1
 18684                                  	;mov	byte [EXTERR_LOCUS],2
 18685 00002ED2 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18686 00002ED7 E8AEE4                  	call	ECritDisk
 18687                                  
 18688                                  ;hkn; DummyCDS is in DOSDATA
 18689 00002EDA C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 18690                                  ;hkn; Segment address is DOSDATA - use ds
 18691                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 18692 00002EE0 8C1E[A405]              	mov	[THISCDS+2],DS
 18693                                  
 18694 00002EE4 0440                    	ADD	AL,'A'-1
 18695 00002EE6 E8113C                  	call	InitCDS
 18696                                  
 18697                                  ;	call	GETTHISDRV		; Set CDS pointer
 18698                                  
 18699 00002EE9 7236                    	JC	short No_files		; Bogus drive letter
 18700 00002EEB C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 18701                                  	;les	bp,[es:di+45h]
 18702 00002EEF 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 18703 00002EF3 E885D7                  	call	GOTDPB			; [THISDPB] = ES:BP
 18704                                  
 18705                                  	 ;16/12/2022
 18706 00002EF6 268A4600                	mov	al,[ES:BP]
 18707                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18708                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 18709 00002EFA A2[7605]                	mov	[THISDRV],AL
 18710                                  	;mov	word [CREATING],0E500h
 18711 00002EFD C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 18712 00002F03 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18713 00002F08 C536[2C03]              	LDS	SI,[DMAADD]
 18714 00002F0C AC                      	LODSB				; Drive Byte
 18715                                  
 18716                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 18717                                  RENAME_NEXT:
 18718                                  	;context ES
 18719 00002F0D 16                      	push	ss
 18720 00002F0E 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 18721                                  
 18722                                  ;hkn; NAME1 is in DOSDATA
 18723 00002F0F BF[4B05]                	MOV	DI,NAME1
 18724                                  
 18725 00002F12 B90B00                  	MOV	CX,11
 18726 00002F15 F3A4                    	REP	MOVSB			; Search name
 18727 00002F17 AC                      	LODSB				; Attribute
 18728                                  
 18729                                  ;hkn; SS override
 18730 00002F18 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 18731 00002F1C AD                      	LODSW				; LastEnt
 18732 00002F1D 09C0                    	OR	AX,AX
 18733 00002F1F 7903                    	JNS	short cont_load
 18734                                  No_files:
 18735 00002F21 E9F6FE                  	JMP	find_no_more
 18736                                  
 18737                                  cont_load:
 18738 00002F24 50                      	PUSH	AX			; Save LastEnt
 18739 00002F25 AD                      	LODSW				; DirStart
 18740 00002F26 89C3                    	MOV	BX,AX
 18741                                  
 18742                                  ;hkn; SS is DOSDATA
 18743                                  	;context DS
 18744 00002F28 16                      	push	ss
 18745 00002F29 1F                      	pop	ds
 18746 00002F2A C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 18747                                  	;invoke	SetDirSrch
 18748 00002F2E E85E10                  	call	SETDIRSRCH
 18749 00002F31 7303                    	JNC	short SEARCH_GOON
 18750 00002F33 58                      	POP	AX			; Clean stack
 18751 00002F34 EBEB                    	JMP	short No_files
 18752                                  
 18753                                  SEARCH_GOON:
 18754 00002F36 E85813                  	call	STARTSRCH
 18755 00002F39 58                      	POP	AX
 18756 00002F3A E82410                  	call	GETENT
 18757 00002F3D 72E2                    	JC	short No_files
 18758 00002F3F E8550F                  	call	NEXTENT
 18759 00002F42 72DD                    	JC	short No_files
 18760 00002F44 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 18761 00002F46 E9FDFE                  	JMP	found_it ; 10/08/2018
 18762                                  
 18763                                  ; MSDOS 6.0
 18764                                  ;---------------------------------------------------------------------------
 18765                                  ;
 18766                                  ; Procedure Name : CHECK_QUESTION
 18767                                  ;
 18768                                  ; Input: [WFP_START]= pointer to final path
 18769                                  ; Function: check '?' char
 18770                                  ; Output: carry clear, if no '?'
 18771                                  ;	 carry set, if '?' exists
 18772                                  ;---------------------------------------------------------------------------
 18773                                  
 18774                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18775                                  CHECK_QUESTION:
 18776                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 18777                                  ;hkn;	PUSH	CS			;AN000;;FO.
 18778 00002F49 16                      	push	ss
 18779 00002F4A 1F                      	POP	DS			;AN000;;FO. ds:si -> final path
 18780                                  	; 16/12/2022
 18781                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18782 00002F4B 8B36[B205]              	MOV	SI,[WFP_START]		;AN000;;FO.
 18783                                  	;mov	si,[ss:WFP_START]
 18784                                  getnext:				;AN000;
 18785 00002F4F AC                      	LODSB				;AN000;;FO. get char
 18786 00002F50 08C0                    	OR	AL,AL			;AN000;;FO. is it null
 18787 00002F52 7405                    	JZ	short NO_Question	;AN000;;FO. yes
 18788 00002F54 3C3F                    	CMP	AL,'?'                  ;AN000;;FO. is '?'
 18789 00002F56 75F7                    	JNZ	short getnext 		;AN000;;FO. no
 18790 00002F58 F9                      	STC				;AN000;;FO.
 18791                                  NO_Question:				;AN000;
 18792 00002F59 C3                      	retn				;AN000;;FO.
 18793                                  
 18794                                  ;============================================================================
 18795                                  ; ABORT.ASM, MSDOS 6.0, 1991
 18796                                  ;============================================================================
 18797                                  ; 23/07/2018 - Retro DOS v3.0
 18798                                  ; 18/05/2019 - Retro DOS v4.0
 18799                                  
 18800                                  ;**
 18801                                  ;
 18802                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 18803                                  ;  If process has NET resources a close all is sent out over the net.
 18804                                  ;
 18805                                  ;   DOS_ABORT
 18806                                  ;
 18807                                  ;   Modification history:
 18808                                  ;
 18809                                  ;       Created: ARR 30 March 1983
 18810                                  ;
 18811                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 18812                                  ;				being terminated only if it is busy.
 18813                                  ;
 18814                                  
 18815                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 18816                                  ;--------------------------------------------------------------------------
 18817                                  ;
 18818                                  ; Procedure Name : DOS_ABORT
 18819                                  ;
 18820                                  ; Inputs:
 18821                                  ;       [CurrentPDB] set to PID of process aborting
 18822                                  ; Function:
 18823                                  ;       Close all files and free all SFTs for this PID
 18824                                  ; Returns:
 18825                                  ;       None
 18826                                  ; All destroyed except stack
 18827                                  ;---------------------------------------------------------------------------
 18828                                  
 18829                                  DOS_ABORT:
 18830 00002F5A 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 18831 00002F5F 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 18832                                  reset_free_jfn:
 18833 00002F64 89CB                    	MOV     BX,CX
 18834 00002F66 51                      	PUSH    CX
 18835 00002F67 4B                      	DEC     BX                      ; get jfn (start with last one)
 18836                                  
 18837 00002F68 E8C338                  	CALL	_$CLOSE
 18838 00002F6B 59                      	POP     CX
 18839 00002F6C E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 18840                                  
 18841                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 18842                                  ; are running in the no-sharing no-network environment, we are simulating the
 18843                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 18844                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 18845                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 18846                                  ;
 18847                                  ; If sharing is loaded, then the following call to close process will
 18848                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 18849                                  ;
 18850                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 18851                                  ; known network resources. These resources are then responsible for cleaning
 18852                                  ; up after this process.
 18853                                  ;
 18854                                  ; Sleazy, eh?
 18855                                  
 18856                                  	;context DS			; SS is DOSDATA
 18857 00002F6E 16                      	push	ss
 18858 00002F6F 1F                      	pop	ds  ; 09/09/2018
 18859                                  
 18860                                  	;CallInstall Net_Abort, MultNET, 29
 18861 00002F70 B81D11                  	mov	ax, 111Dh
 18862 00002F73 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 18863                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 18864                                  			; DS???, SS = DOS CS
 18865                                  ;if installed
 18866 00002F75 FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 18867                                  ;else
 18868                                  ;	call 	MFTCloseP
 18869                                  ;endif
 18870                                  
 18871                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 18872                                  ; counts.
 18873                                  					; SS override
 18874 00002F79 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 18875                                  	;mov	cx,[es:di+4]
 18876 00002F7E 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 18877 00002F82 E317                    	jcxz    FCBScanDone
 18878                                  	;lea	di,[di+6]
 18879 00002F84 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 18880 00002F87 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18881                                  FCBTest:
 18882                                  	;cmp	[es:di+31h],ax
 18883 00002F8B 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 18884 00002F8F 7505                    	jnz	short FCBNext		; no, skip it
 18885 00002F91 26C7050000              	mov	word [es:di],0
 18886                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 18887                                  FCBNext:
 18888 00002F96 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 18889 00002F99 E2F0                    	loop    FCBTest
 18890                                  FCBScanDone:
 18891                                  
 18892                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 18893                                  
 18894 00002F9B 31DB                    	XOR     BX,BX
 18895                                  Scan:
 18896 00002F9D 53                      	push    bx
 18897 00002F9E E80838                  	call	SFFromSFN
 18898 00002FA1 5B                      	pop     bx
 18899                                  	;jnc	short Scan1
 18900                                  	;retn
 18901                                  	; 18/12/2022
 18902 00002FA2 72B5                    	jc	short NO_Question ; retn
 18903                                  
 18904                                  ;M038
 18905                                  ; Do what the comment above says, check for busy state
 18906                                  
 18907                                  Scan1:
 18908                                  	;cmp	word [es:di],0
 18909                                  	;jz	short scan_next  ; MSDOS 3.3
 18910                                  	; MSDOS 6.0
 18911 00002FA4 26833DFF                	cmp	word [es:di],sf_busy ; -1
 18912                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 18913                                  				; Is Sft busy? ;M038
 18914 00002FA8 7519                    	jnz	short scan_next
 18915                                  ;
 18916                                  ; we have a SFT that is busy. See if it is for the current process
 18917                                  ;
 18918 00002FAA 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18919                                  	;cmp	[es:di+31h],ax
 18920 00002FAE 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 18921 00002FB2 750F                    	jnz	short scan_next
 18922 00002FB4 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 18923                                  	;cmp	[es:di+2Fh],ax
 18924 00002FB8 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 18925 00002FBC 7505                    	jnz	short scan_next
 18926                                  
 18927                                  ; This SFT is labelled as ours.
 18928                                  
 18929 00002FBE 26C7050000              	mov	word [es:di],0
 18930                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 18931                                  scan_next:
 18932 00002FC3 43                      	inc     bx
 18933 00002FC4 EBD7                    	jmp     short Scan
 18934                                  
 18935                                  ;============================================================================
 18936                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 18937                                  ;============================================================================
 18938                                  ; 23/07/2018 - Retro DOS v3.0
 18939                                  ; 18/05/2019 - Retro DOS v4.0
 18940                                  
 18941                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 18942                                  ;
 18943                                  ;	DOS_CLOSE
 18944                                  ;	DOS_COMMIT
 18945                                  ;	FREE_SFT
 18946                                  ;	SetSFTTimes
 18947                                  ;
 18948                                  ;	Revision history:
 18949                                  ;
 18950                                  ;	   AN000  version 4.00	Jan. 1988
 18951                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 18952                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 18953                                  
 18954                                  ;Installed = TRUE
 18955                                  
 18956                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 18957                                  ;---------------------------------------------------------------------------
 18958                                  ;
 18959                                  ; Procedure Name : DOS_CLOSE
 18960                                  ;
 18961                                  ; Inputs:
 18962                                  ;	[THISSFT] set to the SFT for the file being used
 18963                                  ; Function:
 18964                                  ;	Close the indicated file via the SFT
 18965                                  ; Returns:
 18966                                  ;	sf_ref_count decremented otherwise
 18967                                  ;	ES:DI point to SFT
 18968                                  ;	Carry set if error
 18969                                  ;	    AX has error code
 18970                                  ; DS preserved, others destroyed
 18971                                  ;---------------------------------------------------------------------------
 18972                                  
 18973                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 18974                                  
 18975                                  ; 18/05/2019 - Retro DOS v4.0
 18976                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 18977                                  
 18978                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18979                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 18980                                  
 18981                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 18982                                  
 18983                                  DOS_CLOSE:
 18984 00002FC6 C43E[9E05]              	LES	DI,[THISSFT]
 18985                                  	;mov	bx,[ES:DI+5]
 18986 00002FCA 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 18987                                  
 18988                                  ; Network closes are handled entirely by the net code.
 18989                                  
 18990                                  	;;test	bx,8000h
 18991                                  	;TEST	BX,sf_isnet
 18992                                  	; 17/12/2022
 18993                                  	;test	bh,80h
 18994 00002FCE F6C780                  	test	bh,(sf_isnet>>8)
 18995 00002FD1 7406                    	JZ	short LocalClose
 18996                                  
 18997                                  	;CallInstall Net_Close,MultNET,6
 18998 00002FD3 B80611                  	mov     ax,1106h
 18999 00002FD6 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19000                                  			; ES:DI -> SFT
 19001                                  			; SFT DPB field -> DPB of drive containing file
 19002                                  			; Return: CF set on error, AX = DOS error code
 19003                                  			; CF clear if successful
 19004 00002FD8 C3                      	retn
 19005                                  
 19006                                  ; All closes release the sharing information.
 19007                                  ; No commit releases sharing information
 19008                                  ;
 19009                                  ; All closes decrement the ref count.
 19010                                  ; No commit decrements the ref count.
 19011                                  
 19012                                  LocalClose:
 19013 00002FD9 E8ACE3                  	call	ECritDisk
 19014 00002FDC E86B01                  	CALL	SetSFTTimes
 19015 00002FDF E8E200                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19016                                  
 19017                                  ;hkn; SS is DOSDATA
 19018                                  	;Context DS
 19019 00002FE2 16                      	push	ss
 19020 00002FE3 1F                      	pop	ds
 19021                                  
 19022 00002FE4 50                      	push	ax
 19023 00002FE5 53                      	push	bx
 19024 00002FE6 E8AC44                  	call	ShareEnd
 19025 00002FE9 5B                      	pop	bx
 19026 00002FEA 58                      	pop	ax
 19027                                  
 19028                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19029                                  
 19030                                  CloseEntry:
 19031 00002FEB 50                      	PUSH	AX
 19032                                  
 19033                                  ; File clean or device does not get stamped nor disk looked at.
 19034                                  
 19035                                  	;test	bx,0C0h
 19036                                  	; 17/12/2022
 19037 00002FEC F6C3C0                  	test	bl,devid_file_clean+devid_device
 19038                                  	;TEST	BX,devid_file_clean+devid_device
 19039 00002FEF 7403                    	JZ	short rdir
 19040                                  	; 14/11/2022
 19041 00002FF1 E9BD00                  	JMP	FREE_SFT_OK		; either clean or device
 19042                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19043                                  
 19044                                  ; Retrieve the directory entry for the file
 19045                                  
 19046                                  rdir:
 19047 00002FF4 E8DA00                  	CALL	DirFromSFT
 19048                                  	;mov	al,5
 19049 00002FF7 B005                    	MOV	AL,error_access_denied
 19050 00002FF9 7303                    	JNC	short clook
 19051                                  	; 14/11/2022
 19052 00002FFB E9B400                  	JMP	CloseFinish		; pretend the close worked.
 19053                                  	;jc	short CloseFinish ; 24/07/2019
 19054                                  clook:
 19055                                  
 19056                                  ; ES:DI points to entry
 19057                                  ; DS:SI points to SFT
 19058                                  ; ES:BX points to buffer header
 19059                                  
 19060 00002FFE 57                      	push	di
 19061 00002FFF 56                      	push	si
 19062                                  	;lea	si,[si+20h]
 19063 00003000 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19064                                  
 19065                                  ; ES:DI point to directory entry
 19066                                  ; DS:SI point to unpacked name
 19067                                  
 19068 00003003 E871E2                  	call	XCHGP
 19069                                  
 19070                                  ; ES:DI point to unpacked name
 19071                                  ; DS:SI point to directory entry
 19072                                  
 19073 00003006 E8EC0E                  	call	MetaCompare
 19074 00003009 E86BE2                  	call	XCHGP
 19075 0000300C 5E                      	pop	si
 19076 0000300D 5F                      	pop	di
 19077 0000300E 740C                    	JZ	short CLOSE_GO		; Name OK
 19078                                  Bye:	
 19079 00003010 89F7                    	MOV	DI,SI
 19080 00003012 1E                      	PUSH	DS
 19081 00003013 07                      	POP	ES			; ES:DI points to SFT
 19082 00003014 16                      	PUSH	SS
 19083 00003015 1F                      	POP	DS
 19084 00003016 F9                      	STC
 19085                                  	;mov	al,2
 19086 00003017 B002                    	MOV	AL,error_file_not_found
 19087 00003019 E99600                  	JMP	CloseFinish ; 24/07/2019
 19088                                  
 19089                                  	; 18/05/2019 - Retro DOS v4.0
 19090                                  CLOSE_GO:
 19091                                  	; MSDOS 6.0
 19092                                  	;test	word [si+2],8000h
 19093                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19094                                  	; 17/12/2022
 19095                                  	;test	byte [si+3],80h
 19096 0000301C F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19097 00003020 740D                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19098                                  	; MSDOS 3.3 & MSDOS 6.0
 19099                                  	;mov	ch,[es:di+0Bh]
 19100 00003022 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19101                                  	;mov	al,[si+4]
 19102 00003026 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 19103                                  
 19104                                  ;hkn; SS override
 19105 00003029 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19106                                  	; MSDOS 3.3
 19107                                  	;;call	MatchAttributes
 19108                                  	;;JNZ	short Bye		; attributes do not match
 19109                                  	; 18/05/2019
 19110 0000302D EB07                    	JMP	SHORT setattr		;FT.
 19111                                  nofcb:
 19112                                  	; MSDOS 6.0
 19113                                  	;mov	al,[si+4]
 19114 0000302F 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19115 00003032 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19116                                  setattr:
 19117                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19118                                  	;or	byte [es:di+0Bh],20h
 19119 00003036 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19120                                  	; MSDOS 6.0
 19121                                  	;mov	ax,[es:di+1Ah]
 19122 0000303B 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19123                                  					;F.O. save old first cluster
 19124                                  ;hkn; SS override
 19125 0000303F 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19126                                  
 19127                                  	;mov	ax,[si+0Bh]
 19128 00003043 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19129                                  	;mov	[es:di+1Ah],ax
 19130 00003046 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19131                                  	;mov	ax,[si+11h]
 19132 0000304A 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19133                                  	;mov	[es:di+1Ch],ax
 19134 0000304D 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19135                                  	;mov	ax,[si+13h]
 19136 00003051 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19137                                  	;mov	[es:di+1Eh],ax
 19138 00003054 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19139                                  	;mov	ax,[si+0Fh]
 19140 00003058 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19141                                  	;mov	[es:di+18h],ax
 19142 0000305B 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19143                                  	;mov	ax,[si+0Dh]
 19144 0000305F 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19145                                  	;mov	[es:di+16h],ax
 19146 00003062 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19147                                  
 19148                                  	; MSDOS 6.0
 19149                                  ;; File Tagging
 19150 00003066 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 19151                                  				  ;LB. if already dirty		    ;AN000;
 19152 0000306B 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19153                                  	; 02/06/2019
 19154 0000306D E8012C                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19155                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19156                                  	;or	byte [es:bx+5],40h
 19157 00003070 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19158                                  yesdirty4:
 19159 00003075 1E                      	push	ds
 19160 00003076 56                      	push	si
 19161                                  	; MSDOS 6.0
 19162                                  	;mov	cx,[si+0Bh]
 19163                                  	; 07/12/2022
 19164 00003077 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19165                                  ;hkn; SS override
 19166 0000307A 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19167                                  	; MSDOS 3.3 
 19168                                  	;push	ss
 19169                                  	;pop	ds
 19170                                  	;MOV	AL,[THISDRV]
 19171                                  ;;; 10/1/86  update fastopen cache
 19172                                  	; MSDOS 3.3 & MSDOS 6.0
 19173 0000307E 52                      	PUSH	DX
 19174 0000307F B400                    	MOV	AH,0			; dir entry update
 19175 00003081 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19176                                  	; MSDOS 6.0
 19177 00003083 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19178 00003085 750D                    	JNZ	short do_update2	;AN005; no, do update
 19179 00003087 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19180                                  	;mov	di,[si+1Bh]
 19181 00003089 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19182                                  	;mov	cx,[si+1Dh]
 19183 0000308C 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19184                                  	;mov	dh,[si+1Fh]
 19185 0000308F 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19186 00003092 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19187                                  do_update2:				;AN011;F.O.
 19188                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19189                                  	; 
 19190 00003094 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19191 00003099 7407                    	JZ	short do_update		;AN011;F.O. yes
 19192 0000309B B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19193 0000309D 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19194                                  do_update:				;AN005;
 19195                                  ;hkn; SS is DOSDATA
 19196                                  	;Context DS
 19197 000030A2 16                      	push	ss
 19198 000030A3 1F                      	pop	ds	
 19199                                  	; MSDOS 3.3 & MSDOS 6.0
 19200 000030A4 E8E0F6                  	call	FastOpen_Update 	; invoke fastopen
 19201 000030A7 5A                      	POP	DX
 19202                                  
 19203                                  ;;; 10/1/86  update fastopen cache
 19204 000030A8 E8BE2A                  	call	FLUSHBUF		; flush all relevant buffers
 19205 000030AB 5F                      	pop	di
 19206 000030AC 07                      	pop	es
 19207                                  	;mov	al,5
 19208 000030AD B005                    	MOV	AL,error_access_denied
 19209 000030AF 7201                    	JC	short CloseFinish
 19210                                  FREE_SFT_OK:
 19211 000030B1 F8                      	CLC				; signal no error.
 19212                                  CloseFinish:
 19213                                  
 19214                                  ; Indicate to the device that the SFT is being closed.
 19215                                  
 19216                                  ;;;; 7/21/86
 19217 000030B2 9C                      	PUSHF				; save flag from DirFromSFT
 19218 000030B3 E81F16                  	call	DEV_CLOSE_SFT
 19219 000030B6 9D                      	POPF
 19220                                  ;;;; 7/21/86
 19221                                  ;
 19222                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19223                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19224                                  ; going to be moving from busy to free.
 19225                                  ;
 19226 000030B7 59                      	POP	CX			; get old ref count
 19227 000030B8 9C                      	PUSHF
 19228 000030B9 49                      	DEC	CX			; if cx != 1
 19229 000030BA 7503                    	JNZ	short NoFree		; then do NOT free SFT
 19230 000030BC 26890D                  	mov	[es:di],cx
 19231                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19232                                  NoFree:
 19233 000030BF E8E1E2                  	call	LCritDisk
 19234 000030C2 9D                      	POPF
 19235 000030C3 C3                      	retn
 19236                                  
 19237                                  ;---------------------------------------------------------------------------
 19238                                  ;
 19239                                  ; Procedure Name : FREE_SFT
 19240                                  ;
 19241                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19242                                  ; Flags preserved. Return old ref count in AX
 19243                                  ;
 19244                                  ; Note that busy is indicated by the SFT ref count being -1.
 19245                                  ;
 19246                                  ;---------------------------------------------------------------------------
 19247                                  
 19248                                  FREE_SFT:
 19249 000030C4 9C                      	PUSHF		; Save carry state
 19250 000030C5 268B05                  	mov	ax,[es:di]
 19251                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19252 000030C8 48                      	DEC	AX
 19253 000030C9 7501                    	JNZ	short SetCount
 19254 000030CB 48                      	DEC	AX
 19255                                  SetCount:
 19256 000030CC 268705                  	xchg	ax,[es:di]
 19257                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19258 000030CF 9D                      	POPF
 19259 000030D0 C3                      	retn
 19260                                  
 19261                                  	; 18/05/2019 - Retro DOS v4.0
 19262                                  
 19263                                  ;----------------------------------------------------------------------------
 19264                                  ;
 19265                                  ; Procedure Name : DirFromSFT
 19266                                  ;
 19267                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19268                                  ;
 19269                                  ;   Inputs:	ES:DI point to SFT
 19270                                  ;		DS = DOSDATA
 19271                                  ;   Outputs:
 19272                                  ;		EXTERR_LOCUS = errLOC_Disk
 19273                                  ;		CurBuf points to buffer
 19274                                  ;		Carry Clear -> operation OK
 19275                                  ;		    ES:DI point to entry
 19276                                  ;		    ES:BX point to buffer
 19277                                  ;		    DS:SI point to SFT
 19278                                  ;		Carry SET   -> operation failed
 19279                                  ;		    registers trashified
 19280                                  ;   Registers modified: ALL
 19281                                  ;----------------------------------------------------------------------------
 19282                                  
 19283                                  DirFromSFT:
 19284                                  	;mov	byte [EXTERR_LOCUS],2
 19285 000030D1 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19286 000030D6 06                      	push	es
 19287 000030D7 57                      	push	di
 19288                                  	; MSDOS 3.3
 19289                                  	;;mov	dx,[es:di+1Dh]
 19290                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19291                                  	; MSDOS 6.0
 19292                                  	;mov	dx,[es:[di+1Dh]
 19293 000030D8 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19294 000030DC 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19295                                  	;mov	dx,[es:di+1Bh]
 19296 000030E0 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19297                                  	; 19/05/2019
 19298 000030E4 FF36[0706]              	PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19299                                  	; MSDOS 3.3 & MSDOS 6.0
 19300 000030E8 52                      	PUSH	DX
 19301 000030E9 E8FF26                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19302                                  					; [THISDPB] set
 19303 000030EC 5A                      	POP	DX
 19304 000030ED 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19305 000030F1 7225                    	JC	short PopDone
 19306 000030F3 30C0                    	XOR	AL,AL			; Pre read
 19307                                  	;mov	byte [ALLOWED],18h
 19308 000030F5 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19309 000030FA E86E29                  	call	GETBUFFR
 19310 000030FD 7219                    	JC	short PopDone
 19311 000030FF 5E                      	pop	si
 19312 00003100 1F                      	pop	ds			; Get back SFT pointer
 19313                                  
 19314                                  ;hkn; SS override
 19315 00003101 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19316                                  	;or	byte [es:di+5],4
 19317 00003106 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19318 0000310B 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19319                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19320                                  	;lea	di,[di+20] ; MSDOS 6.0
 19321 0000310D 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19322                                  	;mov	al,32
 19323 00003110 B020                    	MOV	AL,dir_entry.size
 19324                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19325 00003112 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19326 00003115 01C7                    	ADD	DI,AX			; Point at the entry
 19327 00003117 C3                      	retn				; carry is clear
 19328                                  PopDone:
 19329 00003118 5F                      	pop	di
 19330 00003119 07                      	pop	es
 19331                                  PopDone_retn:
 19332 0000311A C3                      	retn
 19333                                  
 19334                                  ;----------------------------------------------------------------------------
 19335                                  ;
 19336                                  ;**	DOS_Commit - UPdate Directory Entries
 19337                                  ;
 19338                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19339                                  ;		(DS) = DOSGROUP
 19340                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19341                                  ;	USES	all but DS
 19342                                  ;
 19343                                  ;----------------------------------------------------------------------------
 19344                                  
 19345                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19346                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19347                                  
 19348                                  DOS_COMMIT:
 19349                                  	;hkn; called from srvcall. DS already set up.
 19350 0000311B C43E[9E05]              	LES	DI,[THISSFT]
 19351                                  	;mov	bx,[es:di+5]
 19352 0000311F 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19353                                  	;test	bx,0C0h
 19354                                  	; 17/12/2022
 19355 00003123 F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19356                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19357 00003126 75F2                    	jnz	short PopDone_retn
 19358                                  	;test	bx,8000h
 19359                                  	; 17/12/2022
 19360                                  	;test	bh,80h
 19361 00003128 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19362                                  	;TEST	BX,sf_isnet ; 8000h
 19363 0000312B 7406                    	JZ	short LOCAL_COMMIT
 19364                                  
 19365                                  ;IF NOT Installed
 19366                                  ;	transfer NET_COMMIT
 19367                                  ;ELSE
 19368                                  	;mov	ax,1107h
 19369 0000312D B80711                  	MOV	AX,(MultNET<<8)|7
 19370 00003130 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19371                                  			; ES:DI -> SFT
 19372                                  			; SFT DPB field -> DPB of drive containing file
 19373                                  			; Return: CF set on error, AX = DOS error code
 19374                                  			; CF clear if successful
 19375                                  localcommit_retn: ; 18/12/2022	
 19376 00003132 C3                      	retn
 19377                                  ;ENDIF
 19378                                  
 19379                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19380                                  ; There are three ways we can do this. One is to enter a critical section to
 19381                                  ; protect a potential free. The second is to increment the ref count to mask
 19382                                  ; the close decrementing.
 19383                                  ;
 19384                                  ; The proper way is to let the caller's of close decide if a decrement should
 19385                                  ; be done. We do this by providing another entry into close after the
 19386                                  ; decrement and after the share information release.
 19387                                  
 19388                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19389                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19390                                  
 19391                                  LOCAL_COMMIT:
 19392 00003133 E852E2                  	call	ECritDisk
 19393                                  	; MSDOS 6.0
 19394 00003136 E84FE2                  	call	ECritDisk	;PTM.
 19395 00003139 E80E00                  	call	SetSFTTimes
 19396 0000313C B8FFFF                  	MOV	AX,-1
 19397 0000313F E8A9FE                  	call	CloseEntry
 19398                                  	; MSDOS 6.0
 19399 00003142 9C                      	PUSHF			;PTM.				;AN000;
 19400 00003143 E88715                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19401 00003146 9D                      	POPF			;PTM.				;AN000;
 19402                                  	;call	LCritDisk	;PTM.				;AN000;
 19403                                  	; 18/12/2022
 19404 00003147 E959E2                  	jmp	LCritDisk
 19405                                  ;localcommit_retn:
 19406                                  ;	retn
 19407                                  
 19408                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19409                                  ;----------------------------------------------------------------------------
 19410                                  ;
 19411                                  ; Procedure Name : SetSFTTimes
 19412                                  ;
 19413                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19414                                  ;   Reflect these times in other SFT's for the same file.
 19415                                  ;
 19416                                  ;   Inputs:	ES:DI point to SFT
 19417                                  ;		BX = sf_flags set apprpriately
 19418                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19419                                  ;   Registers modified: All except ES:DI, BX, AX
 19420                                  ;
 19421                                  ;----------------------------------------------------------------------------
 19422                                  
 19423                                  SetSFTTimes:
 19424                                  ;	File clean or device does not get stamped nor disk looked at.
 19425                                  	
 19426                                  	;test	bx,0C0h
 19427                                  	; 17/12/2022
 19428 0000314A F6C3C0                  	test	bl,devid_file_clean+devid_device
 19429                                  	;TEST	BX,devid_file_clean+devid_device
 19430                                  	;retnz				; clean or device => no timestamp
 19431 0000314D 75E3                    	jnz	short localcommit_retn
 19432                                  
 19433                                  ;	file and dirty. See if date is good
 19434                                  
 19435                                  	;test	bx,4000h
 19436                                  	; 17/12/2022
 19437                                  	;test	bh,40h
 19438 0000314F F6C740                  	test	bh,(sf_close_nodate>>8)
 19439                                  	;TEST	BX,sf_close_nodate
 19440                                  	;retnz				; nodate => no timestamp
 19441 00003152 75DE                    	jnz	short localcommit_retn
 19442                                  
 19443 00003154 50                      	push	ax
 19444 00003155 53                      	push	bx
 19445 00003156 E8EDD9                  	call	DATE16			; Date/Time to AX/DX
 19446                                  	;mov	[es:di+0Fh],ax
 19447 00003159 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 19448                                  	;mov	[es:di+0Dh],dx
 19449 0000315D 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 19450 00003161 31C0                    	XOR	AX,AX
 19451                                  ;if installed
 19452                                  	;call	JShare + 14 * 4
 19453 00003163 FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 19454                                  ;else
 19455                                  ;	call	ShSU
 19456                                  ;endif
 19457 00003167 5B                      	pop	bx
 19458 00003168 58                      	pop	ax
 19459 00003169 C3                      	retn
 19460                                  
 19461                                  ;============================================================================
 19462                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 19463                                  ;============================================================================
 19464                                  ; 23/07/2018 - Retro DOS v3.0
 19465                                  ; 18/05/2019 - Retro DOS v4.0
 19466                                  
 19467                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 19468                                  
 19469                                  ;TITLE DIRCALL - Directory manipulation internal calls
 19470                                  ;NAME  DIRCALL
 19471                                  
 19472                                  ;**	Low level directory manipulation routines for making removing and
 19473                                  ;	  verifying local or NET directories
 19474                                  ;
 19475                                  ;	DOS_MKDIR
 19476                                  ;	DOS_CHDIR
 19477                                  ;	DOS_RMDIR
 19478                                  ;
 19479                                  ;	Modification history:
 19480                                  ;
 19481                                  ;		Created: ARR 30 March 1983
 19482                                  
 19483                                  ;BREAK <DOS_MkDir - Make a directory entry>
 19484                                  ;---------------------------------------------------------------------------
 19485                                  ;
 19486                                  ; Procedure Name : DOS_MkDir
 19487                                  ;
 19488                                  ; Inputs:
 19489                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19490                                  ;		terminated)
 19491                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19492                                  ;		( = -1 if current dir not involved, else
 19493                                  ;		 Points to first char after last "/" of current dir part)
 19494                                  ;	[THISCDS] Points to CDS being used
 19495                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19496                                  ; Function:
 19497                                  ;	Make a new directory
 19498                                  ; Returns:
 19499                                  ;	Carry Clear
 19500                                  ;		No error
 19501                                  ;	Carry Set
 19502                                  ;	    AX is error code
 19503                                  ;		error_path_not_found
 19504                                  ;			Bad path (not in curr dir part if present)
 19505                                  ;		error_bad_curr_dir
 19506                                  ;			Bad path in current directory part of path
 19507                                  ;		error_access_denied
 19508                                  ;			Already exists, device name
 19509                                  ; DS preserved, Others destroyed
 19510                                  ;---------------------------------------------------------------------------
 19511                                  
 19512                                  ;hkn; called from path.asm. DS already set up.
 19513                                  
 19514                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19515                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 19516                                  
 19517                                  DOS_MKDIR:
 19518 0000316A E856E1                  	call	TestNet
 19519 0000316D 7313                    	JNC	short LOCAL_MKDIR
 19520                                  
 19521                                  ;IF NOT Installed
 19522                                  ;	transfer NET_MKDIR
 19523                                  ;ELSE
 19524                                  	;mov	ax,1103h
 19525 0000316F B80311                  	MOV	AX,(MultNET<<8)|3
 19526 00003172 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 19527                                  			; SS = DOS CS
 19528                                  			; SDA first filename pointer -> fully-qualified directory name
 19529                                  			; SDA CDS pointer -> current directory
 19530                                  			; Return: CF set on error, AX = DOS error code
 19531                                  			; CF clear if successful
 19532 00003174 C3                      	retn
 19533                                  ;ENDIF
 19534                                  
 19535                                  NODEACCERRJ:
 19536                                  	;mov	ax,5
 19537 00003175 B80500                  	MOV	AX,error_access_denied
 19538                                  _BadRet:
 19539 00003178 F9                      	STC
 19540                                  	;call	LCritDisk
 19541                                  	;retn
 19542                                  	; 18/12/2022
 19543 00003179 E927E2                  	jmp	LCritDisk
 19544                                  
 19545                                  PATHNFJ:
 19546 0000317C E824E2                  	call	LCritDisk
 19547 0000317F E9E5F9                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 19548                                  
 19549                                  LOCAL_MKDIR:
 19550 00003182 E803E2                  	call	ECritDisk
 19551                                  
 19552                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 19553                                  
 19554 00003185 8C16[A005]              	MOV	[THISSFT+2],SS
 19555                                  
 19556                                  ;hkn; DOSDATA
 19557 00003189 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 19558                                  
 19559                                  ;  NOTE: Need WORD PTR because MASM takes type of
 19560                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 19561                                  
 19562                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 19563 0000318F C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 19564                                  				; make sure SHARER won't complain.
 19565                                  	;mov	al,10h
 19566 00003195 B010                    	MOV	AL,attr_directory
 19567 00003197 E8E818                  	call	MakeNode
 19568 0000319A 72E0                    	JC	short PATHNFJ
 19569 0000319C 83F803                  	CMP	AX,3
 19570 0000319F 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 19571 000031A1 C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 19572 000031A5 C53E[E205]              	LDS	DI,[CURBUF]
 19573 000031A9 29FE                    	SUB	SI,DI
 19574 000031AB 56                      	PUSH	SI		; Pointer to dir_first
 19575                                  	; MSDOS 6.0
 19576                                  	;push	word [DI+8]
 19577 000031AC FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 19578                                  	; MSDOS 3.3 & MSDOS 6.0
 19579                                  	;push	word [di+6]
 19580 000031AF FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 19581 000031B2 16                      	push	ss
 19582 000031B3 1F                      	pop	ds
 19583 000031B4 FF36[C205]              	PUSH	word [DIRSTART]	; Parent for .. entry
 19584 000031B8 31C0                    	XOR	AX,AX
 19585 000031BA A3[C205]                	MOV	[DIRSTART],AX	; Null directory
 19586 000031BD E8F517                  	call	NEWDIR
 19587 000031C0 7276                    	JC	short NODEEXISTSPOPDEL ; No room
 19588 000031C2 E89C0D                  	call	GETENT		; First entry
 19589 000031C5 7271                    	JC	short NODEEXISTSPOPDEL ; Screw up
 19590 000031C7 C43E[E205]              	LES	DI,[CURBUF]
 19591                                  
 19592                                  	; MSDOS 6.0
 19593 000031CB 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 19594                                  				 ;LB. if already dirty		    ;AN000;
 19595 000031D0 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 19596 000031D2 E89C2A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 19597                                  	
 19598                                  	; MSDOS 3.3 & MSDOS 6.0
 19599                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 19600 000031D5 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 19601                                  yesdirty5:
 19602                                  	;;add	di,16 ; MSDOS 3.3
 19603                                  	;add	di,20 ; MSDOS 6.0
 19604 000031DA 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 19605 000031DD B82E20                  	MOV	AX,202EH	; ". "
 19606 000031E0 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 19607 000031E4 E87718                  	call	SETDOTENT
 19608 000031E7 B82E2E                  	MOV	AX,2E2EH	; ".."
 19609 000031EA 5A                      	POP	DX		; Parent
 19610 000031EB E87018                  	call	SETDOTENT
 19611 000031EE C42E[8A05]              	LES	BP,[THISDPB]
 19612                                  	;mov	byte [ALLOWED],18h
 19613 000031F2 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19614 000031F7 5A                      	POP	DX		; Entry sector
 19615                                  	; MSDOS 6.0
 19616 000031F8 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 19617                                  
 19618 000031FC 30C0                    	XOR	AL,AL		; Pre read
 19619 000031FE E86A28                  	call	GETBUFFR
 19620 00003201 7262                    	JC	short NODEEXISTSP
 19621 00003203 8B16[C205]              	MOV	DX,[DIRSTART]
 19622 00003207 C53E[E205]              	LDS	DI,[CURBUF]
 19623                                  	;or	byte [di+5],4
 19624 0000320B 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19625 0000320F 5E                      	POP	SI		; dir_first pointer
 19626 00003210 01FE                    	ADD	SI,DI
 19627 00003212 8914                    	MOV	[SI],DX
 19628 00003214 31D2                    	XOR	DX,DX
 19629 00003216 895402                  	MOV	[SI+2],DX	; Zero size
 19630 00003219 895404                  	MOV	[SI+4],DX
 19631                                  DIRUP:
 19632                                  	; MSDOS 6.0
 19633 0000321C F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 19634                                  	;			 ;LB. if already dirty 		   ;AN000;
 19635 00003220 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 19636 00003222 E84C2A                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 19637                                  	
 19638                                  	; MSDOS 3.3 & MSDOS 6.0
 19639                                  	;or	byte [di+5],40h
 19640 00003225 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 19641                                  yesdirty6:
 19642 00003229 16                      	push	ss
 19643 0000322A 1F                      	pop	ds
 19644 0000322B 268A4600                	mov	al,[es:bp]
 19645                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 19646 0000322F E83729                  	call	FLUSHBUF
 19647                                  	;mov	ax,5
 19648 00003232 B80500                  	MOV	AX,error_access_denied
 19649                                  	;call	LCritDisk
 19650                                  	;retn
 19651                                  	; 18/12/2022
 19652 00003235 E96BE1                  	jmp	LCritDisk
 19653                                  
 19654                                  NODEEXISTSPOPDEL:
 19655 00003238 5A                      	POP	DX		; Parent
 19656 00003239 5A                      	POP	DX		; Entry sector
 19657                                  	; MSDOS 6.0 
 19658 0000323A 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 19659 0000323E C42E[8A05]              	LES	BP,[THISDPB]
 19660                                  	;mov	byte [ALLOWED],18h
 19661 00003242 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19662 00003247 30C0                    	XOR	AL,AL		; Pre read
 19663 00003249 E81F28                  	call	GETBUFFR
 19664 0000324C 7217                    	JC	short NODEEXISTSP
 19665 0000324E C53E[E205]              	LDS	DI,[CURBUF]
 19666                                  	;or	byte [di+5],4
 19667 00003252 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19668 00003256 5E                      	POP	SI		; dir_first pointer
 19669 00003257 01FE                    	ADD	SI,DI
 19670                                  	;sub	si,1Ah ; 26
 19671 00003259 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 19672 0000325C C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 19673 0000325F E8BAFF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 19674                                  NODEEXISTS:
 19675 00003262 E910FF                  	JMP	NODEACCERRJ ; 10/08/2018
 19676                                  
 19677                                  NODEEXISTSP:
 19678 00003265 5E                      	POP	SI		; Clean stack
 19679 00003266 EBFA                    	JMP	short NODEEXISTS
 19680                                  
 19681                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19682                                  
 19683                                  ;BREAK <DOS_ChDir -- Verify a directory>
 19684                                  ;----------------------------------------------------------------------------
 19685                                  ;
 19686                                  ; Procedure Name : DOS_ChDir
 19687                                  ;
 19688                                  ; Inputs:
 19689                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19690                                  ;		terminated)
 19691                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19692                                  ;		( = -1 if current dir not involved, else
 19693                                  ;		 Points to first char after last "/" of current dir part)
 19694                                  ;	[THISCDS] Points to CDS being used May not be NUL
 19695                                  ; Function:
 19696                                  ;	Validate the path for potential new current directory
 19697                                  ; Returns:
 19698                                  ;	NOTE:
 19699                                  ;	    [SATTRIB] is modified by this call
 19700                                  ;	Carry Clear
 19701                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 19702                                  ;		Caller must NOT set ID fields on a NET CDS.
 19703                                  ;	Carry Set
 19704                                  ;	    AX is error code
 19705                                  ;		error_path_not_found
 19706                                  ;			Bad path
 19707                                  ;		error_access_denied
 19708                                  ;			device or file name
 19709                                  ; DS preserved, Others destroyed
 19710                                  ;----------------------------------------------------------------------------
 19711                                  
 19712                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 19713                                  
 19714                                  ; 18/05/2019 - Retro DOS v4.0
 19715                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 19716                                  
 19717                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19718                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 19719                                  
 19720                                  DOS_CHDIR:
 19721 00003268 E858E0                  	call	TestNet
 19722 0000326B 7306                    	JNC	short LOCAL_CHDIR
 19723                                  
 19724                                  ;IF NOT Installed
 19725                                  ;	transfer NET_CHDIR
 19726                                  ;ELSE
 19727                                  	;mov	ax,1105h
 19728 0000326D B80511                  	MOV	AX,(MultNET<<8)|5
 19729 00003270 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 19730                                  			; SS = DOS CS
 19731                                  			; SDA first filename pointer -> fully-qualified directory name
 19732                                  			; SDA CDS pointer -> current directory
 19733                                  			; Return: CF set on error, AX = DOS error code
 19734                                  			; CF clear if successful
 19735 00003272 C3                      	retn
 19736                                  ;ENDIF
 19737                                  
 19738                                  LOCAL_CHDIR:
 19739 00003273 E812E1                  	call	ECritDisk
 19740                                  	; MSDOS 6.0
 19741                                  	;;test	word [es:di+43h],2000h
 19742                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 19743                                  	; 17/12/2022
 19744                                  	;test	byte [es:di+44h],20h
 19745 00003276 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 19746 0000327B 7406                    	JZ	short nojoin		   ;PTM.
 19747                                  	;mov	word [es:di+49h], 0FFFFh
 19748 0000327D 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 19749                                  nojoin:
 19750                                  	; MSDOS 3.3 & MSDOS 6.0
 19751 00003283 C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 19752                                  	;mov	byte [SATTRIB],16h
 19753 00003288 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19754                                  				; Dir calls can find these
 19755                                  ; DOS 3.3  6/24/86 FastOpen
 19756 0000328D 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 19757 00003292 E85A0D                  	call	GETPATH
 19758 00003295 9C                      	PUSHF						;AN000;
 19759 00003296 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 19760 0000329B 9D                      	POPF						;AN000;
 19761                                  ; DOS 3.3  6/24/86 FastOpen
 19762                                  
 19763                                  	; MSDOS 3.3
 19764                                  	;mov	byte [FastOpenFlg],0
 19765                                  	
 19766                                  	;mov	ax,3
 19767 0000329C B80300                  	MOV	AX,error_path_not_found
 19768 0000329F 7207                    	JC	short ChDirDone
 19769 000032A1 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19770 000032A3 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 19771 000032A7 F8                      	CLC
 19772                                  ChDirDone:
 19773                                  	;call	LCritDisk
 19774                                  	;retn
 19775                                  	; 18/12/2022
 19776 000032A8 E9F8E0                  	jmp	LCritDisk
 19777                                  
 19778                                  ;BREAK <DOS_RmDir -- Remove a directory>
 19779                                  ;----------------------------------------------------------------------------
 19780                                  ;
 19781                                  ; Procedure Name : DOS_RmDir
 19782                                  ;
 19783                                  ; Inputs:
 19784                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19785                                  ;		terminated)
 19786                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19787                                  ;		( = -1 if current dir not involved, else
 19788                                  ;		 Points to first char after last "/" of current dir part)
 19789                                  ;	[THISCDS] Points to CDS being used
 19790                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19791                                  ; Function:
 19792                                  ;	Remove a directory
 19793                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 19794                                  ; Returns:
 19795                                  ;	NOTE:
 19796                                  ;	    [SATTRIB] is modified by this call
 19797                                  ;	Carry Clear
 19798                                  ;		No error
 19799                                  ;	Carry Set
 19800                                  ;	    AX is error code
 19801                                  ;		error_path_not_found
 19802                                  ;			Bad path (not in curr dir part if present)
 19803                                  ;		error_bad_curr_dir
 19804                                  ;			Bad path in current directory part of path
 19805                                  ;		error_access_denied
 19806                                  ;			device or file name, root directory
 19807                                  ;			Bad directory ('.' '..' messed up)
 19808                                  ; DS preserved, Others destroyed
 19809                                  ;----------------------------------------------------------------------------
 19810                                  
 19811                                  ;hkn; called from path.asm. DS already set up.
 19812                                  
 19813                                  ; 18/05/2019 - Retro DOS v4.0
 19814                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 19815                                  
 19816                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19817                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 19818                                  
 19819                                  DOS_RMDIR:
 19820 000032AB E815E0                  	call	TestNet
 19821 000032AE 7306                    	JNC	short LOCAL_RMDIR
 19822                                  
 19823                                  ;IF NOT Installed
 19824                                  ;	transfer NET_RMDIR
 19825                                  ;ELSE
 19826                                  	;mov	ax,1101h
 19827 000032B0 B80111                  	MOV	AX,(MultNET<<8)|1
 19828 000032B3 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 19829                                  			; SS = DOS CS
 19830                                  			; SDA first filename pointer -> fully-qualified directory name
 19831                                  			; SDA CDS pointer -> current directory
 19832                                  			; Return: CF set on error, AX = DOS error code
 19833                                  			; CF clear if successful
 19834 000032B5 C3                      	retn
 19835                                  ;ENDIF
 19836                                  
 19837                                  LOCAL_RMDIR:
 19838 000032B6 E8CFE0                  	call	ECritDisk
 19839 000032B9 C606[4C03]00            	MOV	byte [NoSetDir],0
 19840                                  	;mov	byte [SATTRIB],16h
 19841 000032BE C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19842                                  					; Dir calls can find these
 19843 000032C3 E8290D                  	call	GETPATH
 19844 000032C6 720C                    	JC	short NOPATH		; Path not found
 19845 000032C8 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19846 000032CA 8B3E[C205]              	MOV	DI,[DIRSTART]
 19847 000032CE 09FF                    	OR	DI,DI			; Root ?
 19848 000032D0 750E                    	JNZ	short rmdir_get_buf	; No
 19849 000032D2 EB09                    	JMP	SHORT NOTDIRPATH
 19850                                  
 19851                                  NOPATH:
 19852                                  	;mov	ax,3
 19853 000032D4 B80300                  	MOV	AX,error_path_not_found
 19854 000032D7 E99EFE                  	JMP	_BadRet
 19855                                  
 19856                                  NOTDIRPATHPOP:
 19857 000032DA 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 19858 000032DB 58                      	POP	AX
 19859                                  NOTDIRPATHPOP2:
 19860 000032DC 58                      	POP	AX
 19861                                  NOTDIRPATH:
 19862 000032DD E995FE                  	JMP	NODEACCERRJ
 19863                                  
 19864                                  rmdir_get_buf:
 19865 000032E0 C53E[E205]              	LDS	DI,[CURBUF]
 19866 000032E4 29FB                    	SUB	BX,DI		; Compute true offset
 19867 000032E6 53                      	PUSH	BX		; Save entry pointer
 19868                                  	
 19869                                  	; MSDOS 6.0
 19870                                  	;push	word [di+8]
 19871 000032E7 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 19872                                  	
 19873                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19874                                  	;push	word [di+6]
 19875 000032EA FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 19876                                  
 19877                                  ;hkn; SS is DOSDATA
 19878                                  	;context DS
 19879 000032ED 16                      	push	ss
 19880 000032EE 1F                      	pop	ds
 19881                                  	;context ES
 19882 000032EF 16                      	push	ss
 19883 000032F0 07                      	pop	es
 19884                                  
 19885                                  ;hkn; NAME1 is in DOSDATA
 19886 000032F1 BF[4B05]                	MOV	DI,NAME1
 19887 000032F4 B03F                    	MOV	AL,'?'
 19888 000032F6 B90B00                  	MOV	CX,11
 19889 000032F9 F3AA                    	REP	STOSB
 19890 000032FB 30C0                    	XOR	AL,AL
 19891 000032FD AA                      	STOSB				; Nul terminate it
 19892 000032FE E8900F                  	call	STARTSRCH		; Set search
 19893 00003301 E85A0C                  	call	GETENTRY		; Get start of directory
 19894 00003304 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 19895 00003306 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19896 0000330A 89DE                    	MOV	SI,BX
 19897 0000330C AD                      	LODSW
 19898                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 19899 0000330D 3D2E20                  	cmp	ax,202Eh ; ". "
 19900 00003310 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 19901                                  	;add	si,30
 19902 00003312 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 19903 00003315 AD                      	LODSW
 19904                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 19905                                  	;cmp	ax, '..'
 19906 00003316 3D2E2E                  	cmp	ax,2E2Eh
 19907 00003319 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 19908                                  
 19909                                  ;hkn; SS is DOSDATA
 19910                                  	;context DS
 19911 0000331B 16                      	push	ss
 19912 0000331C 1F                      	pop	ds
 19913 0000331D C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 19914 00003323 E8380C                  	call	GETENTRY		; Get next entry
 19915 00003326 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 19916                                  	;mov	byte [ATTRIB],16h
 19917 00003328 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 19918 0000332D E82D0B                  	call	SRCH			; Do a search
 19919 00003330 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 19920 00003332 803E[4A03]00            	CMP	byte [FAILERR],0
 19921 00003337 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 19922 00003339 C42E[8A05]              	LES	BP,[THISDPB]
 19923 0000333D 8B1E[C205]              	MOV	BX,[DIRSTART]
 19924 00003341 E8811C                  	call	RELEASE 		; Release data in sub dir
 19925 00003344 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 19926 00003346 5A                      	POP	DX			; Sector # of entry
 19927 00003347 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 19928                                  	;mov	byte [ALLOWED],18h
 19929 0000334B C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19930 00003350 30C0                    	XOR	AL,AL			; Pre read
 19931 00003352 E81627                  	call	GETBUFFR		; Get sector back
 19932 00003355 7285                    	JC	short NOTDIRPATHPOP2	; Screw up
 19933 00003357 C53E[E205]              	LDS	DI,[CURBUF]
 19934                                  	;or	byte [di+5],4
 19935 0000335B 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19936 0000335F 5B                      	POP	BX			; Pointer to start of entry
 19937 00003360 01FB                    	ADD	BX,DI			; Corrected
 19938 00003362 C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 19939                                  
 19940                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19941 00003365 1E                      	PUSH	DS
 19942                                  
 19943                                  ;hkn; SS is DOSDATA
 19944                                  	;context DS
 19945 00003366 16                      	push	ss
 19946 00003367 1F                      	pop	ds
 19947                                  
 19948                                  	; MSDOS 6.0
 19949 00003368 E8EDF3                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 19950                                  
 19951                                  ;	; MSDOS 3.3
 19952                                  ;_FastOpen_Delete:
 19953                                  ;	push	ax
 19954                                  ;	mov	si,[WFP_START]
 19955                                  ;	mov	bx,FastTable
 19956                                  ;	;mov	al,3  ; FONC_delete
 19957                                  ;	mov	al,FONC_delete
 19958                                  ;	call	far [BX+2]  ; FastTable+2
 19959                                  ;	pop	ax
 19960                                  
 19961 0000336B 1F                      	POP	DS
 19962                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19963                                  
 19964 0000336C E9ADFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 19965                                  
 19966                                  ;============================================================================
 19967                                  ; DISK.ASM, MSDOS 6.0, 1991
 19968                                  ;============================================================================
 19969                                  ; 23/07/2018 - Retro DOS v3.0 
 19970                                  ; 04/05/2019 - Retro DOS v4.0
 19971                                  
 19972                                  ;	TITLE	DISK - Disk utility routines
 19973                                  ;	NAME	Disk
 19974                                  
 19975                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19976                                  ;
 19977                                  ;	SWAPCON
 19978                                  ;	SWAPBACK
 19979                                  ;	DOS_READ
 19980                                  ;	DOS_WRITE
 19981                                  ;	get_io_sft
 19982                                  ;	DirRead
 19983                                  ;	FIRSTCLUSTER
 19984                                  ;	SET_BUF_AS_DIR
 19985                                  ;	FATSecRd
 19986                                  ;	DREAD
 19987                                  ;	CHECK_WRITE_LOCK
 19988                                  ;	CHECK_READ_LOCK
 19989                                  ;
 19990                                  ;	Revision history:
 19991                                  ;
 19992                                  ;		A000   version 4.00  Jan. 1988
 19993                                  ;
 19994                                  ;----------------------------------------------------------------------------
 19995                                  ;
 19996                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 19997                                  ;		error happens, DOS retries the entire block assuming that
 19998                                  ;		zero characters were transferred. Modified the code to take
 19999                                  ;		into account the number of characters transfered before
 20000                                  ;		retrying the operation.
 20001                                  ;
 20002                                  ;----------------------------------------------------------------------------
 20003                                  ;
 20004                                  
 20005                                  ;Installed = TRUE
 20006                                  
 20007                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20008                                  
 20009                                  ; **** Drivers for file input from devices ****
 20010                                  ;----------------------------------------------------------------------------
 20011                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20012                                  ;   of handles 0 and 1
 20013                                  ;
 20014                                  ;   Inputs:	DS is DOSDATA
 20015                                  ;   Outputs:	CONSWAP is set to false.
 20016                                  ;   Registers modified: none
 20017                                  ;----------------------------------------------------------------------------
 20018                                  
 20019                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20020                                  
 20021                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20022                                  ; 04/05/2019 - Retro DOS v4.0
 20023                                  
 20024                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20025                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20026                                  
 20027                                  SWAPBACK:
 20028 0000336F C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20029 00003374 C3                      	retn
 20030                                  
 20031                                  ;----------------------------------------------------------------------------
 20032                                  ;
 20033                                  ; Procedure Name : SWAPCON
 20034                                  ;
 20035                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20036                                  ;
 20037                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20038                                  ;		DS is DOSDATA
 20039                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20040                                  ;   Registers modified: none
 20041                                  ;--------------------------------------------------------------------------
 20042                                  
 20043                                  SWAPCON:
 20044                                  	; MSDOS 3.3
 20045                                  	;push	es
 20046                                  	;push	di
 20047                                  	;mov	byte [CONSWAP],1
 20048                                  	;les	di,[THISSFT]
 20049                                  	;mov	word [CONSFT],di
 20050                                  	;mov	word [CONSFT+2],es
 20051                                  	;pop	di
 20052                                  	;pop	es
 20053                                  	;retn
 20054                                  
 20055                                  	; MSDOS 6.0
 20056 00003375 C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20057 0000337A 50                      	push	ax
 20058 0000337B A1[9E05]                	mov	ax,[THISSFT]
 20059 0000337E A3[E605]                	mov	[CONSFT],ax
 20060 00003381 A1[A005]                	mov	ax,[THISSFT+2]
 20061 00003384 A3[E805]                	mov	[CONSFT+2],ax
 20062 00003387 58                      	pop	ax
 20063 00003388 C3                      	retn
 20064                                  
 20065                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20066                                  ; 04/05/2019 - Retro DOS v4.0
 20067                                  
 20068                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20069                                  ;-----------------------------------------------------------------------------
 20070                                  ;
 20071                                  ; Inputs:
 20072                                  ;	ThisSFT set to the SFT for the file being used
 20073                                  ;	[DMAADD] contains transfer address
 20074                                  ;	CX = No. of bytes to read
 20075                                  ;	DS = DOSDATA
 20076                                  ; Function:
 20077                                  ;	Perform read operation
 20078                                  ; Outputs:
 20079                                  ;    Carry clear
 20080                                  ;	SFT Position and cluster pointers updated
 20081                                  ;	CX = No. of bytes read
 20082                                  ;	ES:DI point to SFT
 20083                                  ;    Carry set
 20084                                  ;	AX is error code
 20085                                  ;	CX = 0
 20086                                  ;	ES:DI point to SFT
 20087                                  ; DS preserved, all other registers destroyed
 20088                                  ;
 20089                                  ;-----------------------------------------------------------------------------
 20090                                  
 20091                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20092                                  
 20093                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20094                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20095                                  
 20096                                  DOS_READ:
 20097 00003389 C43E[9E05]              	LES	DI,[THISSFT]
 20098                                  
 20099                                  ; Verify that the sft has been opened in a mode that allows reading.
 20100                                  
 20101                                  	;mov	al,[es:di+2]
 20102 0000338D 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20103                                  	;and	al,0Fh
 20104 00003391 240F                    	AND	AL,access_mask
 20105                                  	;cmp	al,1
 20106 00003393 3C01                    	CMP	AL,open_for_write
 20107 00003395 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20108 00003397 E91506                  	jmp	SET_ACC_ERR
 20109                                  
 20110                                  READ_NO_MODE:
 20111 0000339A E8ED04                  	call	SETUP
 20112 0000339D E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20113 0000339F E83ADF                  	call	IsSFTNet
 20114 000033A2 7408                    	JZ	short LOCAL_READ
 20115                                  
 20116                                  ;IF NOT Installed
 20117                                  ;	transfer NET_READ
 20118                                  ;ELSE
 20119                                  	;mov	ax,1108h
 20120 000033A4 B80811                  	MOV	AX,(MultNET<<8)|8
 20121 000033A7 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20122                                  			; ES:DI -> SFT
 20123                                  			; SFT DPB field -> DPB of drive containing file
 20124                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20125                                  			; Return: CF set on error, CX = bytes read
 20126 000033A9 C3                      	retn
 20127                                  ;ENDIF
 20128                                  
 20129                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20130                                  ; except return immediately.
 20131                                  
 20132                                  NoIORet:
 20133 000033AA F8                      	CLC
 20134 000033AB C3                      	retn
 20135                                  
 20136                                  LOCAL_READ:
 20137                                  	;test	word [es:di+5],80h
 20138                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20139 000033AC 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20140 000033B1 750E                    	JNZ	short READDEV
 20141                                  
 20142                                  	;mov	byte [EXTERR_LOCUS],2
 20143 000033B3 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20144 000033B8 E8CDDF                  	call	ECritDisk
 20145 000033BB E8AD05                  	call	DISKREAD
 20146                                  
 20147                                  critexit:
 20148                                  	;call	LCritDisk
 20149                                  	;retn
 20150                                  	; 16/12/2022
 20151 000033BE E9E2DF                  	jmp	LCritDisk
 20152                                  
 20153                                  ; We are reading from a device. Examine the status of the device to see if we
 20154                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20155                                  ; null device, we can safely indicate no transfer.
 20156                                  
 20157                                  READDEV:
 20158                                  	;mov	byte [EXTERR_LOCUS],4
 20159 000033C1 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20160                                  	;mov	bl,[es:di+5]
 20161 000033C6 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20162 000033CA C43E[2C03]              	LES	DI,[DMAADD]
 20163                                  	;test	bl,40h
 20164 000033CE F6C340                  	test	BL,devid_device_EOF	; End of file?
 20165 000033D1 7407                    	JZ	short ENDRDDEVJ3
 20166                                  	;test	bl,4
 20167 000033D3 F6C304                  	test	BL,devid_device_null	; NUL device?
 20168 000033D6 7405                    	JZ	short TESTRAW 		; NO
 20169 000033D8 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20170                                  ENDRDDEVJ3:
 20171                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20172                                  	;JMP	short ENDRDDEVJ2
 20173                                  	; 16/12/2022
 20174 000033DA E96701                  	jmp	ENDRDDEV ; 04/05/2019
 20175                                  
 20176                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20177                                  ; bizarre std_con_string_input.
 20178                                  
 20179                                  TESTRAW:
 20180                                  	;test	bl,20h
 20181 000033DD F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20182 000033E0 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20183                                  	;test	bl,1
 20184 000033E2 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20185 000033E5 7461                    	JZ	short NOTRDCON
 20186 000033E7 E98F01                  	JMP	READCON
 20187                                  
 20188                                  DVRDRAW:
 20189 000033EA 06                      	PUSH	ES
 20190 000033EB 1F                      	POP	DS			; Xaddr to DS:DI
 20191                                  
 20192                                  	; 04/05/2019 - Retro DOS v4.0
 20193                                  
 20194                                  	; MSDOS 6.0
 20195                                  ;SR;
 20196                                  ;Check for win386 presence -- if present, do polled read of characters
 20197                                  
 20198 000033EC 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20199 000033F2 7408                    	jz	short ReadRawRetry	;not present
 20200 000033F4 F6C301                  	test	bl,devid_device_con_in	;is it console device
 20201 000033F7 7403                    	jz	short ReadRawRetry	;no, do normal read
 20202 000033F9 E9BA00                  	jmp	do_polling		;yes, do win386 polling loop
 20203                                  
 20204                                  ReadRawRetry:
 20205 000033FC 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 20206 000033FE 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20207 00003400 89C2                    	MOV	DX,AX			; Start at 0
 20208 00003402 E8C213                  	call	SETREAD
 20209 00003405 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20210                                  
 20211                                  ;hkn; SS override
 20212 00003406 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20213 0000340B E84013                  	call	DEVIOCALL
 20214 0000340E 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20215 00003410 B486                    	MOV	AH,86H			; Read error
 20216                                  
 20217                                  ;hkn; SS override
 20218 00003412 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20219                                  	; MSDOS 3.3
 20220                                  	;test	di,8000h
 20221                                  	;jz	short CRDROK
 20222                                  	; MSDOS 6.0
 20223 00003417 09FF                    	or	di,di
 20224 00003419 7923                    	jns	short CRDROK		; no errors
 20225                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20226 0000341B E8C01F                  	call	CHARHARD
 20227 0000341E 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 20228                                  
 20229                                  	; 04/05/2019
 20230                                  
 20231                                  	; MSDOS 6.0
 20232 00003420 36033E[6C03]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20233 00003425 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20234                                  
 20235                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20236 0000342A 08C0                    	OR	AL,AL
 20237 0000342C 7410                    	JZ	short CRDROK		; Ignore
 20238 0000342E 3C03                    	CMP	AL,3
 20239 00003430 7403                    	JZ	short CRDFERR 		; fail.
 20240 00003432 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20241 00003433 EBC7                    	JMP	short ReadRawRetry	; Retry
 20242                                  
 20243                                  ; We have encountered a device-driver error. We have informed the user of it
 20244                                  ; and he has said for us to fail the system call.
 20245                                  
 20246                                  CRDFERR:
 20247 00003435 5F                      	POP	DI			; Clean stack
 20248                                  DEVIOFERR:
 20249                                  
 20250                                  ;hkn; SS override
 20251 00003436 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20252 0000343B E96F05                  	jmp	SET_ACC_ERR_DS
 20253                                  
 20254                                  CRDROK:
 20255 0000343E 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20256 0000343F 89D7                    	MOV	DI,DX
 20257                                  
 20258                                  ;hkn; SS override
 20259 00003441 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20260                                  	;JMP	SHORT ENDRDDEVJ3
 20261                                  	; 16/12/2022
 20262 00003446 EB6B                    	jmp	short ENDRDDEVJ2
 20263                                  
 20264                                  ; We are going to do a cooked read on some character device. There is a
 20265                                  ; problem here, what does the data look like? Is it a terminal device, line
 20266                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20267                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20268                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20269                                  ; included in data). this "simulates" the way con works in cooked mode
 20270                                  ; reading one line at a time. With file data, however, the lines will look
 20271                                  ; like, LF line CR. This is a little weird.
 20272                                  
 20273                                  NOTRDCON:
 20274 00003448 8CC0                    	MOV	AX,ES
 20275 0000344A 8ED8                    	MOV	DS,AX
 20276 0000344C 89FB                    	MOV	BX,DI
 20277 0000344E 31D2                    	XOR	DX,DX
 20278 00003450 89D0                    	MOV	AX,DX
 20279 00003452 51                      	PUSH	CX
 20280 00003453 B90100                  	MOV	CX,1
 20281 00003456 E86E13                  	call	SETREAD
 20282 00003459 59                      	POP	CX
 20283                                  
 20284                                  ;hkn; SS override
 20285 0000345A 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20286                                  	;lds	si,[si+7]
 20287 0000345F C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20288                                  DVRDLP:
 20289 00003462 E8591D                  	call	DSKSTATCHK
 20290 00003465 E8E912                  	call	DEVIOCALL2
 20291 00003468 57                      	PUSH	DI		; Save "count" done
 20292 00003469 B486                    	MOV	AH,86H
 20293                                  
 20294                                  ;hkn; SS override
 20295 0000346B 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20296                                  	
 20297                                  	; MSDOS 3.3
 20298                                  	;test	di,8000h
 20299                                  	;jz	short CRDOK
 20300                                  	; MSDOS 6.0
 20301 00003470 09FF                    	or	di,di
 20302 00003472 7917                    	jns	short CRDOK
 20303                                  	
 20304 00003474 E8671F                  	call	CHARHARD
 20305 00003477 5F                      	POP	DI
 20306                                  
 20307                                  ;hkn; SS override
 20308 00003478 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20309 0000347F 3C01                    	CMP	AL,1
 20310 00003481 74DF                    	JZ	short DVRDLP		;Retry
 20311 00003483 3C03                    	CMP	AL,3
 20312 00003485 74AF                    	JZ	short DEVIOFERR		; FAIL
 20313 00003487 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20314 00003489 EB12                    	JMP	SHORT DVRDIGN
 20315                                  
 20316                                  CRDOK:
 20317 0000348B 5F                      	POP	DI
 20318                                  
 20319                                  ;hkn; SS override
 20320 0000348C 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20321                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20322 00003492 751F                    	JNZ	short ENDRDDEVJ2
 20323                                  	; 16/12/2022
 20324                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20325                                  
 20326 00003494 1E                      	PUSH	DS
 20327                                  
 20328                                  ;hkn; SS override
 20329 00003495 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20330 0000349A 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20331 0000349C 1F                      	POP	DS
 20332                                  DVRDIGN:
 20333                                  
 20334                                  ;hkn; SS override
 20335 0000349D 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20336 000034A2 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20337 000034A9 47                      	INC	DI			; Next character
 20338 000034AA 3C1A                    	CMP	AL,1Ah			; ^Z?
 20339                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20340 000034AC 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20341                                  	; 16/12/2022
 20342                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20343 000034AE 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20344 000034B0 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20345 000034B2 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20346                                  					;  AX=FFFF which is not likely
 20347                                  ENDRDDEVJ2:
 20348                                  	; 16/12/2022
 20349                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20350                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20351 000034B3 E98E00                  	jmp	ENDRDDEV
 20352                                  
 20353                                  	; 04/05/2019
 20354                                  
 20355                                  	; MSDOS 6.0
 20356                                  ;SR;
 20357                                  ;Polling code for raw read on CON when WIN386 is present
 20358                                  ;
 20359                                  ;At this point -- ds:di is transfer address
 20360                                  ;		  cx is count
 20361                                  
 20362                                  do_polling:
 20363 000034B6 89FB                    	mov	bx,di			;ds:bx is Xfer address
 20364 000034B8 31C0                    	xor	ax,ax
 20365 000034BA 89C2                    	mov	dx,ax
 20366 000034BC E80813                  	call	SETREAD			;prepare device packet
 20367                                  
 20368                                  do_io:
 20369                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 20370                                  
 20371 000034BF 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 20372 000034C4 1E                      	push	ds
 20373 000034C5 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 20374 000034CA E88112                  	call	DEVIOCALL		;call device driver
 20375 000034CD 1F                      	pop	ds
 20376                                  	
 20377                                  	;test	word [es:bx+3],8000h
 20378                                  	; 16/12/2022
 20379                                  	;test	byte [es:bx+4],80h
 20380 000034CE 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 20381                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 20382 000034D3 7413                    	jz	short check_busy	;no
 20383                                  
 20384 000034D5 1E                      	push	ds
 20385 000034D6 89FA                    	mov	dx,di
 20386                                  	;invoke charhard		;invoke int 24h handler
 20387 000034D8 E8031F                  	call	CHARHARD
 20388 000034DB 89D7                    	mov	di,dx
 20389 000034DD 08C0                    	or	al,al
 20390 000034DF 745D                    	jz	short pop_done_read	;ignore by user, assume read done
 20391 000034E1 3C03                    	cmp	al,3
 20392 000034E3 7448                    	jz	short devrderr		;user asked to fail
 20393 000034E5 1F                      	pop	ds
 20394 000034E6 EBD7                    	jmp	short do_io		;user asked to retry
 20395                                  
 20396                                  check_busy:
 20397                                  	;test	word [es:bx+3],200h
 20398                                  	; 16/12/2022
 20399 000034E8 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 20400                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 20401 000034ED 7547                    	jnz	short no_char		;yes, no character available
 20402                                  
 20403                                  ;Character is available. Read in 1 character at a time until all characters
 20404                                  ;are read in or no character is available
 20405                                  
 20406 000034EF 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 20407 000034F4 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 20408 000034FA 1E                      	push	ds
 20409 000034FB 36C536[9E05]            	lds	si,[ss:THISSFT]
 20410 00003500 E84B12                  	call	DEVIOCALL
 20411                                  
 20412 00003503 89FA                    	mov	dx,di
 20413 00003505 B486                    	mov	ah,86h
 20414                                  	;mov	di,[es:bx+3]
 20415 00003507 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 20416 0000350B F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 20417 0000350F 7410                    	jz	short next_char		;no,read next character
 20418                                  
 20419                                  	;invoke	charhard		;invoke int 24h handler
 20420 00003511 E8CA1E                  	call	CHARHARD
 20421 00003514 89D7                    	mov	di,dx			;restore di
 20422 00003516 08C0                    	or	al,al			;
 20423 00003518 7424                    	jz	short pop_done_read	;ignore by user,assume read is done
 20424 0000351A 3C03                    	cmp	al,3
 20425 0000351C 740F                    	jz	short devrderr		;user issued a 'fail',indicate error
 20426 0000351E 1F                      	pop	ds
 20427 0000351F EB9E                    	jmp	short do_io		;user issued a retry
 20428                                  
 20429                                  next_char:
 20430 00003521 1F                      	pop	ds
 20431 00003522 89D7                    	mov	di,dx
 20432 00003524 49                      	dec	cx			;decrement count
 20433 00003525 E318                    	jcxz	done_read		;all characters read in
 20434 00003527 26FF470E                	inc	word [es:bx+14]		;update transfer address
 20435 0000352B EB92                    	jmp	short do_io			;read next character in
 20436                                  
 20437                                  devrderr:
 20438 0000352D 5F                      	pop	di			;discard segment address
 20439 0000352E 36C43E[9E05]            	les	di,[ss:THISSFT]
 20440                                  	;transfer SET_ACC_ERR_DS	;indicate error
 20441 00003533 E97704                  	jmp     SET_ACC_ERR_DS
 20442                                  
 20443                                  no_char:
 20444                                  ;Since no character is available, we let win386 switch the VM out
 20445                                  
 20446 00003536 50                      	push	ax
 20447 00003537 B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 20448 00003539 CD2A                    	int	2Ah			;indicate idle to WIN386
 20449                                  
 20450                                  ;When control returns from WIN386, we continue the raw read
 20451                                  
 20452 0000353B 58                      	pop	ax
 20453 0000353C EB81                    	jmp	do_io
 20454                                  
 20455                                  pop_done_read:
 20456 0000353E 1F                      	pop	ds
 20457                                  done_read:
 20458 0000353F 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 20459                                  
 20460                                  	; 16/12/2022
 20461                                  
 20462                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20463                                  	;jmp	ENDRDDEV ; 04/05/2019
 20464                                  
 20465                                  	; 04/05/2019 - Retro DOS v4.0
 20466                                  ENDRDDEV:
 20467 00003544 16                      	push	ss
 20468 00003545 1F                      	pop	ds
 20469 00003546 EB1F                    	jmp	short endrddev1
 20470                                  
 20471                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20472                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20473                                  
 20474                                  TRANBUF:
 20475 00003548 AC                      	LODSB
 20476 00003549 AA                      	STOSB
 20477 0000354A 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 20478 0000354C 7503                    	JNZ	short NORMCH
 20479 0000354E C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 20480                                  NORMCH:
 20481 00003551 3C0A                    	CMP	AL,c_LF ; 0Ah
 20482 00003553 E0F3                    	LOOPNZ	TRANBUF
 20483 00003555 7507                    	JNZ	short ENDRDCON
 20484 00003557 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 20485 00003559 E887E1                  	call	OUTT		; Transmit linefeed
 20486 0000355C 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 20487                                  ENDRDCON:
 20488                                  ;hkn; SS is DOSDATA
 20489 0000355E 16                      	push	ss
 20490 0000355F 1F                      	pop	ds
 20491 00003560 E80CFE                  	CALL	SWAPBACK
 20492 00003563 8936[2200]              	MOV	[CONTPOS],SI
 20493                                  
 20494                                  	; 16/12/2022
 20495                                  ;ENDRDDEV:
 20496                                  ;;hkn; SS is DOSDATA
 20497                                  ;	push	ss
 20498                                  ;	pop	ds
 20499                                  endrddev1:	; 04/05/2019
 20500 00003567 893E[B805]              	MOV	[NEXTADD],DI
 20501 0000356B 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20502 0000356D C43E[9E05]              	LES	DI,[THISSFT]
 20503                                  	;and	byte [es:di+5],0BFh
 20504 00003571 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20505                                  				; Mark as no more data available
 20506                                  SETSFTC:
 20507                                  	; 31/07/2019
 20508                                  	;call	SETSFT
 20509                                  	;retn
 20510 00003576 E9C804                  	jmp	SETSFT
 20511                                  
 20512                                  ; 16/12/2022
 20513                                  %if 0
 20514                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20515                                  ENDRDDEV:
 20516                                  ;hkn; SS is DOSDATA
 20517                                  	push	ss
 20518                                  	pop	ds
 20519                                  	MOV	[NEXTADD],DI
 20520                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20521                                  	LES	DI,[THISSFT]
 20522                                  	;and	byte [es:di+5],0BFh
 20523                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20524                                  				; Mark as no more data available
 20525                                  SETSFTC:
 20526                                  	;call	SETSFT
 20527                                  	;retn
 20528                                  	jmp	SETSFT	
 20529                                  %endif
 20530                                  
 20531                                  READCON:
 20532 00003579 E8F9FD                  	CALL	SWAPCON
 20533 0000357C 8B36[2200]              	MOV	SI,[CONTPOS]
 20534 00003580 09F6                    	OR	SI,SI
 20535 00003582 75C4                    	JNZ	short TRANBUF
 20536 00003584 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 20537 00003589 7406                    	JZ	short GETBUF
 20538 0000358B C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 20539                                  GETBUF:
 20540 00003591 51                      	PUSH	CX
 20541 00003592 06                      	PUSH	ES
 20542 00003593 57                      	PUSH	DI
 20543                                  
 20544                                  ;hkn; CONBUF is in DOSDATA
 20545 00003594 BA[7B02]                	MOV	DX,CONBUF
 20546                                  
 20547 00003597 E8BEDE                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 20548 0000359A 5F                      	POP	DI
 20549 0000359B 07                      	POP	ES
 20550 0000359C 59                      	POP	CX
 20551                                  
 20552                                  ;hkn; CONBUF is in DOSDATA
 20553 0000359D BE[7D02]                	MOV	SI,CONBUF+2
 20554                                  
 20555 000035A0 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 20556 000035A3 75A3                    	JNZ	short TRANBUF
 20557 000035A5 B01A                    	MOV	AL,1AH
 20558 000035A7 AA                      	STOSB
 20559 000035A8 4F                      	DEC	DI
 20560 000035A9 B00A                    	MOV	AL,c_LF
 20561 000035AB E835E1                  	call	OUTT		; Send linefeed
 20562 000035AE 31F6                    	XOR	SI,SI
 20563 000035B0 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 20564                                  
 20565                                  ; 24/07/2018 - Retro DOS v3.0
 20566                                  
 20567                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 20568                                  ;---------------------------------------------------------------------------
 20569                                  ;
 20570                                  ; Procedure Name : DOS_WRITE
 20571                                  ;
 20572                                  ; Inputs:
 20573                                  ;	ThisSFT set to the SFT for the file being used
 20574                                  ;	[DMAADD] contains transfer address
 20575                                  ;	CX = No. of bytes to write
 20576                                  ; Function:
 20577                                  ;	Perform write operation
 20578                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 20579                                  ;		to current sf_position
 20580                                  ; Outputs:
 20581                                  ;    Carry clear
 20582                                  ;	SFT Position and cluster pointers updated
 20583                                  ;	CX = No. of bytes written
 20584                                  ;	ES:DI point to SFT
 20585                                  ;    Carry set
 20586                                  ;	AX is error code
 20587                                  ;	CX = 0
 20588                                  ;	ES:DI point to SFT
 20589                                  ; DS preserved, all other registers destroyed
 20590                                  ;---------------------------------------------------------------------------
 20591                                  
 20592                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 20593                                  ;hkn; point to DOSDATA.
 20594                                  
 20595                                  ; 04/05/2019 - Retro DOS v4.0
 20596                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 20597                                  
 20598                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20599                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 20600                                  
 20601                                  DOS_WRITE:
 20602 000035B2 C43E[9E05]              	LES	DI,[THISSFT]
 20603                                  	;mov	al,[ES:DI+2]
 20604 000035B6 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20605                                  	;and	al,0Fh
 20606 000035BA 240F                    	AND	AL,access_mask
 20607                                  	;cmp	al,0
 20608 000035BC 3C00                    	CMP	AL,open_for_read
 20609 000035BE 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 20610                                  BadMode:
 20611 000035C0 E9EC03                  	jmp	SET_ACC_ERR
 20612                                  
 20613                                  ; NOTE: The following check for writting to a Read Only File is performed
 20614                                  ;	    ONLY on FCBs!!!!
 20615                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 20616                                  ;	    of a read only file which can then be written to.
 20617                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 20618                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 20619                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 20620                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 20621                                  ;	    to a read-only file.
 20622                                  
 20623                                  Check_FCB_RO:
 20624                                  	;;test	word [es:di+2],8000h
 20625                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 20626                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 20627                                  	
 20628                                  	;test	byte [es:di+3],80h
 20629 000035C3 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 20630 000035C8 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 20631                                  
 20632                                  	;test	byte [es:di+4],1
 20633 000035CA 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 20634 000035CF 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 20635                                  WRITE_NO_MODE:
 20636 000035D1 E8B602                  	call	SETUP
 20637 000035D4 E805DD                  	call	IsSFTNet
 20638 000035D7 7406                    	JZ	short LOCAL_WRITE
 20639                                  
 20640                                  ;IF NOT Installed
 20641                                  ;	transfer NET_WRITE
 20642                                  ;ELSE
 20643                                  	;mov	ax,1109h
 20644 000035D9 B80911                  	MOV	AX,(MultNET<<8)|9
 20645 000035DC CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 20646                                  			; ES:DI -> SFT
 20647                                  			; SFT DPB field -> DPB of drive containing file
 20648                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20649                                  			; Return: CF set on error, CX = bytes written
 20650 000035DE C3                      	retn
 20651                                  ;ENDIF
 20652                                  
 20653                                  LOCAL_WRITE:
 20654                                  	;;test	word [es:di+5],80h
 20655                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20656                                  	;jnz	short WRTDEV
 20657                                  
 20658                                  	;test	byte [es:di+5],80h
 20659 000035DF 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 20660 000035E4 756E                    	jnz	short WRTDEV
 20661                                  
 20662                                  	;mov	byte [EXTERR_LOCUS],2
 20663 000035E6 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20664 000035EB E89ADD                  	call	ECritDisk
 20665                                  
 20666 000035EE E80805                  	call	DISKWRITE
 20667                                  
 20668                                  	; 04/05/2019 - Retro DOS v4.0
 20669                                  
 20670                                  	; MSDOS 6.0
 20671                                  ; Extended Open
 20672 000035F1 7210                    	JC	short nocommit
 20673                                  	
 20674 000035F3 C43E[9E05]              	LES	DI,[THISSFT]
 20675                                  	
 20676                                  	;;test	word [ES:DI+2],4000h
 20677                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 20678                                  	;JZ	short nocommit
 20679                                  	
 20680                                  	;test	byte [ES:DI+3],40h
 20681 000035F7 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 20682 000035FC 7405                    	JZ	short nocommit
 20683                                  	
 20684 000035FE 51                      	PUSH	CX
 20685 000035FF E819FB                  	call	DOS_COMMIT
 20686 00003602 59                      	POP	CX
 20687                                  nocommit:
 20688                                  ; Extended Open
 20689                                  	;call	LCritDisk
 20690                                  	;retn
 20691                                  	; 18/12/2022
 20692 00003603 E99DDD                  	jmp	LCritDisk
 20693                                  
 20694                                  DVWRTRAW:
 20695 00003606 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20696 00003608 E8EF11                  	call	SETWRITE
 20697 0000360B 1E                      	PUSH	DS			; Save seg of transfer
 20698                                  
 20699                                  ;hkn; SS override
 20700 0000360C 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20701 00003611 E83A11                  	call	DEVIOCALL		; DS:SI -> DEVICE
 20702                                  
 20703 00003614 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 20704 00003616 B487                    	MOV	AH,87H
 20705                                  
 20706                                  ;hkn; SS override
 20707 00003618 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20708                                  
 20709                                  	; MSDOS 3.3
 20710                                  	;test	di,8000h
 20711                                  	;jz	short CWRTROK
 20712                                  
 20713                                  	; MSDOS 6.0
 20714 0000361D 09FF                    	or	di,di
 20715 0000361F 7920                    	jns	short CWRTROK
 20716                                  	
 20717                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20718 00003621 E8BA1D                  	call	CHARHARD
 20719                                  
 20720                                  	; 04/05/2019  - Retro DOS v4.0
 20721                                  
 20722                                  	; MSDOS 6.0
 20723 00003624 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 20724 00003629 89D3                    	mov	bx,dx			; number of chars xferred	M065
 20725 0000362B 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 20726 00003630 89DF                    	mov	di,bx			;				M065
 20727                                  	
 20728                                  	; MSDOS 3.3
 20729                                  	;MOV	BX,DX			; Recall transfer addr		M065
 20730                                  
 20731                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20732 00003632 08C0                    	OR	AL,AL
 20733 00003634 740B                    	JZ	short CWRTROK 		; Ignore
 20734 00003636 3C03                    	CMP	AL,3
 20735 00003638 7403                    	JZ	short CWRFERR
 20736 0000363A 1F                      	POP	DS			; Recover saved seg of transfer
 20737 0000363B EBC9                    	JMP	short DVWRTRAW		; Try again
 20738                                  CWRFERR:
 20739 0000363D 58                      	POP	AX			; Chuck saved seg of transfer
 20740 0000363E E9F4FD                  	JMP	CRDFERR 		; Will pop one more stack element
 20741                                  CWRTROK:
 20742 00003641 58                      	POP	AX			; Chuck saved seg of transfer
 20743 00003642 1F                      	POP	DS
 20744 00003643 A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 20745                                  ENDWRDEV:
 20746 00003646 C43E[9E05]              	LES	DI,[THISSFT]
 20747 0000364A 89C1                    	MOV	CX,AX
 20748                                  	;call	ADDREC
 20749                                  	;retn
 20750                                  	; 16/12/2022
 20751                                  	; 10/06/2019
 20752 0000364C E91304                  	jmp	ADDREC
 20753                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20754                                  	;call	ADDREC
 20755                                  	;retn
 20756                                  	
 20757                                  WRTNUL:
 20758 0000364F 89CA                    	MOV	DX,CX			; Entire transfer done
 20759                                  WRTCOOKJ:
 20760 00003651 E98D00                  	JMP	WRTCOOKDONE
 20761                                  WRTDEV:
 20762                                  	;mov	byte [EXTERR_LOCUS],4
 20763 00003654 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20764                                  	;or	byte [es:di+5],40h
 20765 00003659 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 20766                                  					; Reset EOF for input
 20767                                  	;mov	bl,[es:di+5]
 20768 0000365E 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20769 00003662 31C0                    	XOR	AX,AX
 20770 00003664 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 20771 00003666 1E                      	PUSH	DS
 20772 00003667 88D8                    	MOV	AL,BL
 20773 00003669 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 20774 0000366D 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 20775 0000366F 31D2                    	XOR	DX,DX			; Set starting point
 20776                                  	;test	al,20h
 20777 00003671 A820                    	test	AL,devid_device_raw	; Raw?
 20778                                  	;JZ	short TEST_DEV_CON
 20779                                  	;JMP	DVWRTRAW
 20780                                  	; 16/12/2022
 20781 00003673 7591                    	jnz	short DVWRTRAW
 20782                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20783                                  	;JZ	short TEST_DEV_CON
 20784                                  	;JMP	short DVWRTRAW
 20785                                  
 20786                                  TEST_DEV_CON:
 20787                                  	;test	al,2
 20788 00003675 A802                    	test	AL,devid_device_con_out ; Console output device?
 20789 00003677 756E                    	jnz	short WRITECON
 20790                                  	;test	al,4
 20791 00003679 A804                    	test	AL,devid_device_null
 20792 0000367B 75D2                    	JNZ	short WRTNUL
 20793 0000367D 89D0                    	MOV	AX,DX
 20794 0000367F 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 20795 00003682 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 20796 00003684 51                      	PUSH	CX
 20797 00003685 B90100                  	MOV	CX,1
 20798 00003688 E86F11                  	call	SETWRITE
 20799 0000368B 59                      	POP	CX
 20800                                  
 20801                                  ;hkn; SS override
 20802 0000368C 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20803                                  ;
 20804                                  ;SR; Removed X25 support from here
 20805                                  ;
 20806                                  	;lds	si,[si+7]
 20807 00003691 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20808                                  DVWRTLP:
 20809 00003694 E8271B                  	call	DSKSTATCHK
 20810 00003697 E8B710                  	call	DEVIOCALL2
 20811 0000369A 57                      	PUSH	DI
 20812 0000369B B487                    	MOV	AH,87H
 20813                                  
 20814                                  ;hkn; SS override
 20815 0000369D 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20816                                  	
 20817                                  	; MSDOS 3.3
 20818                                  	;test	di,8000h
 20819                                  	;jz	short CWROK
 20820                                  
 20821                                  	; MSDOS 6.0
 20822 000036A2 09FF                    	or	di,di
 20823 000036A4 7916                    	jns	short CWROK
 20824                                  	
 20825                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20826 000036A6 E8351D                  	call	CHARHARD
 20827 000036A9 5F                      	POP	DI
 20828                                  
 20829                                  ;hkn; SS override
 20830 000036AA 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20831 000036B1 3C01                    	CMP	AL,1
 20832 000036B3 74DF                    	JZ	short DVWRTLP 	; Retry
 20833 000036B5 08C0                    	OR	AL,AL
 20834 000036B7 740C                    	JZ	short DVWRTIGN	; Ignore
 20835                                  	; 10/08/2018
 20836 000036B9 E979FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 20837                                  CWROK:
 20838 000036BC 5F                      	POP	DI
 20839                                  
 20840                                  ;hkn; SS override
 20841 000036BD 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 20842 000036C3 741C                    	JZ	short WRTCOOKDONE
 20843                                  DVWRTIGN:
 20844 000036C5 42                      	INC	DX
 20845                                  
 20846                                  ;hkn; SS override for CALLXAD
 20847 000036C6 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 20848 000036CB 47                      	INC	DI
 20849 000036CC 1E                      	PUSH	DS
 20850 000036CD 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20851 000036D2 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 20852 000036D5 1F                      	POP	DS
 20853 000036D6 7409                    	JZ	short WRTCOOKDONE
 20854                                  
 20855                                  ;hkn; SS override
 20856 000036D8 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20857 000036DF E2B3                    	LOOP	DVWRTLP
 20858                                  WRTCOOKDONE:
 20859 000036E1 89D0                    	MOV	AX,DX
 20860 000036E3 1F                      	POP	DS
 20861 000036E4 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 20862                                  
 20863                                  WRITECON:
 20864 000036E7 1E                      	PUSH	DS
 20865                                  
 20866                                  ;hkn; SS is DOSDATA
 20867 000036E8 16                      	push	ss
 20868 000036E9 1F                      	pop	ds
 20869 000036EA E888FC                  	CALL	SWAPCON
 20870 000036ED 1F                      	POP	DS
 20871 000036EE 89DE                    	MOV	SI,BX
 20872 000036F0 51                      	PUSH	CX
 20873                                  WRCONLP:
 20874 000036F1 AC                      	LODSB
 20875 000036F2 3C1A                    	CMP	AL,1Ah		; ^Z?
 20876 000036F4 7405                    	JZ	short CONEOF
 20877 000036F6 E8EADF                  	call	OUTT
 20878 000036F9 E2F6                    	LOOP	WRCONLP
 20879                                  CONEOF:
 20880 000036FB 58                      	POP	AX			; Count
 20881 000036FC 29C8                    	SUB	AX,CX			; Amount actually written
 20882 000036FE 1F                      	POP	DS
 20883 000036FF E86DFC                  	CALL	SWAPBACK
 20884 00003702 E941FF                  	JMP	ENDWRDEV
 20885                                  
 20886                                  ;---------------------------------------------------------------------------
 20887                                  ;
 20888                                  ; Procedure Name : get_io_sft
 20889                                  ;
 20890                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 20891                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 20892                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 20893                                  ;
 20894                                  ;---------------------------------------------------------------------------
 20895                                  
 20896                                  ; 04/05/2019 - Retro DOS v4.0
 20897                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 20898                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20899                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 20900                                  
 20901                                  GET_IO_SFT:
 20902                                  	;test	byte [SS:CONSWAP],0FFh
 20903 00003705 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 20904 0000370B 7512                    	JNZ	short GetRedir
 20905                                  GetNormal:
 20906 0000370D 16                      	push	ss
 20907 0000370E 1F                      	pop	ds
 20908 0000370F 06                      	PUSH	ES
 20909 00003710 57                      	PUSH	DI
 20910 00003711 E87F30                  	call	SFFromHandle
 20911 00003714 7206                    	JC	short RET44P
 20912 00003716 8CC6                    	MOV	SI,ES
 20913 00003718 8EDE                    	MOV	DS,SI
 20914 0000371A 89FE                    	MOV	SI,DI
 20915                                  RET44P:
 20916 0000371C 5F                      	POP	DI
 20917 0000371D 07                      	POP	ES
 20918 0000371E C3                      	retn
 20919                                  GetRedir:
 20920 0000371F 83FB01                  	CMP	BX,1
 20921 00003722 77E9                    	JA	short GetNormal
 20922 00003724 36C536[E605]            	LDS	SI,[SS:CONSFT]
 20923 00003729 F8                      	CLC
 20924                                  get_io_sft_retn:
 20925 0000372A C3                      	retn
 20926                                  
 20927                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 20928                                  ;---------------------------------------------------------------------------
 20929                                  ;
 20930                                  ; Procedure Name : DIRREAD
 20931                                  ;
 20932                                  ; Inputs:
 20933                                  ;	AX = Directory block number (relative to first block of directory)
 20934                                  ;	ES:BP = Base of drive parameters
 20935                                  ;	[DIRSEC] = First sector of first cluster of directory
 20936                                  ;	[CLUSNUM] = Next cluster
 20937                                  ;	[CLUSFAC] = Sectors/Cluster
 20938                                  ; Function:
 20939                                  ;	Read the directory block into [CURBUF].
 20940                                  ; Outputs:
 20941                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 20942                                  ;	[SECCLUSPOS] Set
 20943                                  ;	ES:BP unchanged
 20944                                  ;	[CURBUF] Points to Buffer with dir sector
 20945                                  ;	Carry set if error (user said FAIL to I 24)
 20946                                  ; DS preserved, all other registers destroyed.
 20947                                  ;---------------------------------------------------------------------------
 20948                                  
 20949                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 20950                                  
 20951                                  DIRREAD:
 20952                                  
 20953                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 20954                                  ; the same as what is in the DPB! In the case of the root directory, we have
 20955                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 20956                                  ; by DIRStart = 0.
 20957                                  
 20958 0000372B 31D2                    	XOR	DX,DX
 20959 0000372D 833E[C205]00            	CMP	word [DIRSTART],0
 20960 00003732 7503                    	jnz	short SubDir
 20961 00003734 92                      	XCHG	AX,DX
 20962 00003735 EB0C                    	JMP	short DoRead
 20963                                  
 20964                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 20965                                  
 20966                                  SubDir:
 20967 00003737 88C2                    	MOV	DL,AL
 20968                                  	;and	dl,[es:bp+4]
 20969 00003739 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 20970                                  
 20971                                  ;	(DX) = sector-in-cluster
 20972                                  
 20973                                  	;mov	cl,[es:bp+5]
 20974 0000373D 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20975 00003741 D3E8                    	SHR	AX,CL
 20976                                  
 20977                                  ;	(DX) = position in cluster
 20978                                  ;	(AX) = number of clusters to skip
 20979                                  
 20980                                  DoRead:
 20981 00003743 8816[7305]              	MOV	[SECCLUSPOS],DL
 20982 00003747 89C1                    	MOV	CX,AX
 20983 00003749 88D4                    	MOV	AH,DL
 20984                                  
 20985                                  ;	(CX) = number of clusters to skip.
 20986                                  ;	(AH) = remainder
 20987                                  
 20988                                  	; 04/05/2019 - Retro DOS v4.0
 20989                                  
 20990                                  	; MSDOS 6.0
 20991 0000374B 8B16[C005]              	MOV	DX,[DIRSEC+2]	     	  ;>32mb
 20992 0000374F 8916[0706]              	MOV	[HIGH_SECTOR],DX	  ;>32mb
 20993 00003753 8B16[BE05]              	MOV	DX,[DIRSEC]
 20994 00003757 00E2                    	ADD	DL,AH
 20995 00003759 80D600                  	ADC	DH,0
 20996 0000375C 8316[0706]00            	ADC	word [HIGH_SECTOR],0	  ;>32mb
 20997                                  
 20998 00003761 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 20999 00003765 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21000 00003769 E319                    	JCXZ	FIRSTCLUSTER
 21001                                  SKPCLLP:
 21002 0000376B E8DB1E                  	call	UNPACK
 21003 0000376E 72BA                    	jc	short get_io_sft_retn
 21004 00003770 87DF                    	XCHG	BX,DI
 21005 00003772 E8BD1E                  	call	IsEOF			; test for eof based on fat size
 21006 00003775 7302                    	JAE	short HAVESKIPPED
 21007 00003777 E2F2                    	LOOP	SKPCLLP
 21008                                  HAVESKIPPED:
 21009 00003779 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21010 0000377D 89FA                    	MOV	DX,DI
 21011 0000377F 88E3                    	MOV	BL,AH
 21012 00003781 E86917                  	call	FIGREC
 21013                                  
 21014                                  	;entry	FIRSTCLUSTER
 21015                                  
 21016                                  FIRSTCLUSTER:
 21017                                  	;mov	byte [ALLOWED],18h
 21018 00003784 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 21019 00003789 30C0                    	XOR	AL,AL		; Indicate pre-read
 21020 0000378B E8DD22                  	call	GETBUFFR
 21021 0000378E 729A                    	jc	short get_io_sft_retn
 21022                                  
 21023                                  	;entry	SET_BUF_AS_DIR
 21024                                  
 21025                                  SET_BUF_AS_DIR:
 21026                                  
 21027                                  ;	Set the type of CURBUF to be a directory sector.
 21028                                  ;	Only flags are modified.
 21029                                  
 21030 00003790 1E                      	PUSH	DS
 21031 00003791 56                      	PUSH	SI
 21032 00003792 C536[E205]              	LDS	SI,[CURBUF]
 21033                                  	;or	byte [si+5],4
 21034 00003796 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21035 0000379A 5E                      	POP	SI
 21036 0000379B 1F                      	POP	DS
 21037                                  dirread_retn:
 21038 0000379C C3                      	retn
 21039                                  
 21040                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21041                                  ;----------------------------------------------------------------------------
 21042                                  ;
 21043                                  ; Procedure Name : FATSECRD
 21044                                  ; Inputs:
 21045                                  ;	Same as DREAD
 21046                                  ;	DS:BX = Transfer address
 21047                                  ;	CX = Number of sectors
 21048                                  ;	DX = Absolute record number
 21049                                  ;	ES:BP = Base of drive parameters
 21050                                  ; Function:
 21051                                  ;	Calls BIOS to perform FAT read.
 21052                                  ; Outputs:
 21053                                  ;	Same as DREAD
 21054                                  ;---------------------------------------------------------------------------
 21055                                  
 21056                                  	; 04/05/2019 - Retro DOS v4.0
 21057                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)	
 21058                                  
 21059                                  FATSECRD:
 21060                                  ;hkn; SS override
 21061                                  	;mov	byte [ss:ALLOWED],18h
 21062 0000379D 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21063 000037A3 89CF                    	MOV	DI,CX
 21064                                  	;mov	cl,[es:bp+8]
 21065 000037A5 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21066                                  	; MSDOS 3.3
 21067                                  	;;mov	al,[es:bp+0Fh]
 21068                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 				
 21069                                  	;XOR	AH,AH
 21070                                  	; MSDOS 6.0
 21071                                  	;mov	ax,[es:bp+0Fh]
 21072 000037A9 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21073 000037AD 30ED                    	XOR	CH,CH	
 21074 000037AF 52                      	PUSH	DX
 21075                                  NXTFAT:
 21076                                  	; MSDOS 6.0
 21077                                  ;hkn; SS override
 21078 000037B0 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21079 000037B7 51                      	PUSH	CX			;32mb
 21080 000037B8 50                      	PUSH	AX
 21081 000037B9 89F9                    	MOV	CX,DI
 21082 000037BB E85B00                  	call	DSKREAD
 21083 000037BE 58                      	POP	AX
 21084 000037BF 59                      	POP	CX
 21085 000037C0 7420                    	JZ	short RET41P		; Carry clear
 21086 000037C2 01C2                    	ADD	DX,AX
 21087 000037C4 E2EA                    	LOOP	NXTFAT
 21088 000037C6 5A                      	POP	DX
 21089 000037C7 89F9                    	MOV	CX,DI
 21090                                  
 21091                                  ; NOTE FALL THROUGH
 21092                                  
 21093                                  ;Break	<DREAD -- DO A DISK READ>
 21094                                  ;---------------------------------------------------------------------------
 21095                                  ;
 21096                                  ; Procedure Name : DREAD
 21097                                  ;
 21098                                  ; Inputs:
 21099                                  ;	DS:BX = Transfer address
 21100                                  ;	CX = Number of sectors
 21101                                  ;	DX = Absolute record number	      (LOW)
 21102                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21103                                  ;	ES:BP = Base of drive parameters
 21104                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21105                                  ; Function:
 21106                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21107                                  ;	errors, will call HARDERRRW for further action.
 21108                                  ; Outputs:
 21109                                  ;	Carry set if error (currently user FAILED to INT 24)
 21110                                  ; DS,ES:BP preserved. All other registers destroyed.
 21111                                  ;---------------------------------------------------------------------------
 21112                                  
 21113                                  	;entry	DREAD
 21114                                  DREAD:
 21115 000037C9 E84D00                  	call	DSKREAD
 21116 000037CC 74CE                    	jz	short dirread_retn	; Carry clear
 21117                                  ;hkn; SS override
 21118 000037CE 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21119 000037D4 E89A00                  	call	HARDERRRW
 21120 000037D7 3C01                    	CMP	AL,1			; Check for retry
 21121 000037D9 74EE                    	JZ	short DREAD
 21122 000037DB 3C03                    	CMP	AL,3			; Check for FAIL
 21123 000037DD F8                      	CLC
 21124 000037DE 7501                    	JNZ	short NO_CAR		; Ignore
 21125 000037E0 F9                      	STC
 21126                                  NO_CAR:
 21127 000037E1 C3                      	retn
 21128                                  RET41P: 
 21129 000037E2 5A                      	POP	DX
 21130 000037E3 C3                      	retn
 21131                                  
 21132                                  ; 24/07/2018 - Retro DOS v3.0
 21133                                  
 21134                                  ;Break	<CHECK_WRITE_LOCK>
 21135                                  ;---------------------------------------------------------------------------
 21136                                  ;
 21137                                  ; Procedure Name : CHECK_WRITE_LOCK
 21138                                  ;
 21139                                  ; Inputs:
 21140                                  ;	output of SETUP
 21141                                  ;	ES:DI -> SFT
 21142                                  ; Function:
 21143                                  ;	check write lock
 21144                                  ; Outputs:
 21145                                  ;	Carry set if error
 21146                                  ;	Carry clear if ok
 21147                                  ;
 21148                                  ;----------------------------------------------------------------------------
 21149                                  
 21150                                  	; 04/05/2019 - Retro DOS v4.0
 21151                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21152                                  
 21153                                  CHECK_WRITE_LOCK:
 21154                                  	; MSDOS 6.0
 21155                                  	;test	byte [es:di+4],8
 21156 000037E4 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21157                                  	;JZ	short write_cont			     ;no
 21158                                  	;;call	SET_ACC_ERR_DS
 21159                                  	;;retn
 21160                                  	;;jnz	SET_ACC_ERR_DS
 21161                                  	; 19/08/2018
 21162                                  	;jz	short write_cont
 21163                                  	;jmp	SET_ACC_ERR_DS
 21164                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21165 000037E9 7403                    	JZ	short write_cont
 21166                                  	;call	SET_ACC_ERR_DS
 21167                                  	;retn
 21168                                  	; 16/12/2022
 21169 000037EB E9BF01                  	jmp	SET_ACC_ERR_DS
 21170                                  
 21171                                  write_cont:				;
 21172 000037EE 51                      	PUSH	CX			;save reg
 21173 000037EF 09C9                    	OR	CX,CX			;
 21174 000037F1 7501                    	JNZ	short Not_Truncate	;
 21175 000037F3 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21176                                  Not_Truncate:				;
 21177 000037F4 B080                    	MOV	AL,80H			;check write access
 21178 000037F6 E8283C                  	call	LOCK_CHECK		;check lock
 21179 000037F9 59                      	POP	CX			;restore reg
 21180 000037FA 7305                    	JNC	short WRITE_OK		;lock ok
 21181 000037FC E86501                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21182 000037FF 73ED                    	JNC	short write_cont	;retry
 21183                                  WRITE_OK:				;
 21184 00003801 C3                      	retn				;
 21185                                  
 21186                                  ;Break	<CHECK_READ_LOCK>
 21187                                  ;---------------------------------------------------------------------------
 21188                                  ;
 21189                                  ; Procedure Name : CHECK_READ_LOC
 21190                                  ;
 21191                                  ; Inputs:
 21192                                  ;	ES:DI -> SFT
 21193                                  ;	output of SETUP
 21194                                  ; Function:
 21195                                  ;	check read lock
 21196                                  ; Outputs:
 21197                                  ;	Carry set if error
 21198                                  ;	Carry clear if ok
 21199                                  ;----------------------------------------------------------------------------
 21200                                  
 21201                                  CHECK_READ_LOCK:
 21202                                  	; MSDOS 6.0
 21203                                  	;test	byte [es:di+4],8
 21204 00003802 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21205                                  	;JZ	short do_retry			   	     ; no
 21206                                  	;;call	SET_ACC_ERR
 21207                                  	;;retn
 21208                                  	;;jnz	SET_ACC_ERR
 21209                                  	; 16/12/2022
 21210                                  	; 28/07/2019
 21211 00003807 7403                    	jz	short do_retry
 21212 00003809 E9A301                  	jmp	SET_ACC_ERR
 21213                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21214                                  	;JZ	short do_retry
 21215                                  	;call	SET_ACC_ERR
 21216                                  	;retn
 21217                                  do_retry:				;
 21218 0000380C 30C0                    	xor	al,al			;check read access
 21219 0000380E E8103C                  	call	LOCK_CHECK		;check lock
 21220 00003811 7305                    	JNC	short READLOCK_OK 	;lock ok
 21221 00003813 E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21222 00003816 73F4                    	JNC	short do_retry		;retry
 21223                                  READLOCK_OK:				;
 21224 00003818 C3                      	retn				;
 21225                                  
 21226                                  ;============================================================================
 21227                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21228                                  ;============================================================================
 21229                                  ; 24/07/2018 - Retro DOS v3.0
 21230                                  ; 04/05/2019 - Retro DOS v4.0
 21231                                  
 21232                                  ;	TITLE	DISK2 - Disk utility routines
 21233                                  ;	NAME	Disk2
 21234                                  
 21235                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21236                                  ;
 21237                                  ;	DskRead
 21238                                  ;	DWRITE
 21239                                  ;	DSKWRITE
 21240                                  ;	HarderrRW
 21241                                  ;	SETUP
 21242                                  ;	BREAKDOWN
 21243                                  ;	READ_LOCK_VIOLATION
 21244                                  ;	WRITE_LOCK_VIOLATION
 21245                                  ;	DISKREAD
 21246                                  ;	SET_ACC_ERR_DS
 21247                                  ;	SET_ACC_ERR
 21248                                  ;	SETSFT
 21249                                  ;	SETCLUS
 21250                                  ;	AddRec
 21251                                  ;
 21252                                  ;	Revision history:
 21253                                  ;
 21254                                  ;		AN000 version 4.00 Jan. 1988
 21255                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21256                                  
 21257                                  ; 04/05/2019 - Retro DOS v4.0
 21258                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21259                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21260                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21261                                  
 21262                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21263                                  ;---------------------------------------------------------------------------
 21264                                  ;
 21265                                  ; Procedure Name : DSKREAD
 21266                                  ;
 21267                                  ; Inputs:
 21268                                  ;	DS:BX = Transfer addr
 21269                                  ;	CX = Number of sectors
 21270                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21271                                  ;	DX = Absolute record number	       (LOW)
 21272                                  ;	ES:BP = Base of drive parameters
 21273                                  ; Function:
 21274                                  ;	Call BIOS to perform disk read
 21275                                  ; Outputs:
 21276                                  ;	DI = CX on entry
 21277                                  ;	CX = Number of sectors unsuccessfully transfered
 21278                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21279                                  ;	Zero set if OK (from BIOS) (carry clear)
 21280                                  ;	Zero clear if error (carry clear)
 21281                                  ; SI Destroyed, others preserved
 21282                                  ;---------------------------------------------------------------------------
 21283                                  
 21284                                  DSKREAD:
 21285 00003819 51                      	PUSH	CX
 21286                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21287 0000381A 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21288                                  	;mov	al,[es:bp+1]
 21289 0000381E 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21290 00003822 53                      	PUSH	BX
 21291 00003823 06                      	PUSH	ES
 21292 00003824 E8A00F                  	call	SETREAD
 21293 00003827 EB27                    	JMP	short DODSKOP
 21294                                  
 21295                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21296                                  ;--------------------------------------------------------------------------
 21297                                  ;
 21298                                  ; Procedure Name : DWRITE
 21299                                  ;
 21300                                  ; Inputs:
 21301                                  ;	DS:BX = Transfer address
 21302                                  ;	CX = Number of sectors
 21303                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21304                                  ;	DX = Absolute record number	       (LOW)
 21305                                  ;	ES:BP = Base of drive parameters
 21306                                  ;	[ALLOWED] must be set in case HARDERR called
 21307                                  ; Function:
 21308                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21309                                  ;	errors, will call HARDERRRW for further action.
 21310                                  ; Output:
 21311                                  ;	Carry set if error (currently, user FAILed to I 24)
 21312                                  ; BP preserved. All other registers destroyed.
 21313                                  ;----------------------------------------------------------------------------
 21314                                  
 21315                                  	;entry	DWRITE
 21316                                  DWRITE:
 21317 00003829 E81600                  	CALL	DSKWRITE
 21318 0000382C 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 21319                                  
 21320                                  ;hkn; SS override
 21321 0000382E 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 21322 00003834 E83A00                  	call	HARDERRRW
 21323 00003837 3C01                    	CMP	AL,1		; Check for retry
 21324 00003839 74EE                    	JZ	short DWRITE
 21325 0000383B 3C03                    	CMP	AL,3		; Check for FAIL
 21326 0000383D F8                      	CLC
 21327 0000383E 7501                    	JNZ	short NO_CAR2 	; Ignore
 21328 00003840 F9                      	STC
 21329                                  NO_CAR2:
 21330                                  dw_ret_label:
 21331 00003841 C3                      	retn
 21332                                  
 21333                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 21334                                  ;---------------------------------------------------------------------------
 21335                                  ;
 21336                                  ; Procedure Name : DSKWRITE
 21337                                  ;
 21338                                  ; Inputs:
 21339                                  ;	DS:BX = Transfer addr
 21340                                  ;	CX = Number of sectors
 21341                                  ;	DX = Absolute record number	       (LOW)
 21342                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21343                                  ;	ES:BP = Base of drive parameters
 21344                                  ; Function:
 21345                                  ;	Call BIOS to perform disk read
 21346                                  ; Outputs:
 21347                                  ;	DI = CX on entry
 21348                                  ;	CX = Number of sectors unsuccessfully transfered
 21349                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21350                                  ;	Zero set if OK (from BIOS) (carry clear)
 21351                                  ;	Zero clear if error (carry clear)
 21352                                  ; SI Destroyed, others preserved
 21353                                  ;
 21354                                  ;----------------------------------------------------------------------------
 21355                                  
 21356                                  	;entry	DSKWRITE
 21357                                  DSKWRITE:
 21358 00003842 51                      	PUSH	CX
 21359                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21360 00003843 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21361                                  	;mov	al,[es:bp+1]
 21362 00003847 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21363 0000384B 53                      	PUSH	BX
 21364 0000384C 06                      	PUSH	ES
 21365 0000384D E8AA0F                  	call	SETWRITE
 21366                                  DODSKOP:
 21367 00003850 8CD9                    	MOV	CX,DS		; Save DS
 21368 00003852 1F                      	POP	DS		; DS:BP points to DPB
 21369 00003853 1E                      	PUSH	DS
 21370                                  
 21371                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 21372 00003854 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 21373 00003858 E8F60E                  	call	DEVIOCALL2
 21374                                  
 21375 0000385B 8ED9                    	MOV	DS,CX		; Restore DS
 21376 0000385D 07                      	POP	ES		; Restore ES
 21377 0000385E 5B                      	POP	BX
 21378                                  
 21379                                  ;hkn; SS override
 21380 0000385F 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 21381 00003864 5F                      	POP	DI
 21382 00003865 29F9                    	SUB	CX,DI
 21383 00003867 F7D9                    	NEG	CX		; Number of sectors not transferred
 21384                                  
 21385                                  ;hkn; SS override
 21386 00003869 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 21387                                  	;test	ax,8000h
 21388                                  	; 17/12/2022
 21389                                  	;test	ah,80h
 21390 0000386D F6C480                  	test	ah,(STERR>>8)
 21391                                  	;test	AX,STERR
 21392 00003870 C3                      	retn
 21393                                  
 21394                                  ;Break	<HardErrRW - map extended errors and call harderr>
 21395                                  ;---------------------------------------------------------------------------
 21396                                  ;
 21397                                  ; Procedure Name : HardErrRW
 21398                                  ;
 21399                                  ; Inputs:
 21400                                  ;	AX is error code from read or write
 21401                                  ;	Other registers set as per HARDERR
 21402                                  ; Function:
 21403                                  ;	Checks the error code for special extended
 21404                                  ;	errors and maps them if needed. Then invokes
 21405                                  ;	Harderr
 21406                                  ; Outputs:
 21407                                  ;	Of HARDERR
 21408                                  ; AX may be modified prior to call to HARDERR.
 21409                                  ; No other registers altered.
 21410                                  ;
 21411                                  ;---------------------------------------------------------------------------
 21412                                  
 21413                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21414                                  HARDERRRW:
 21415                                  	;cmp	al,0Fh
 21416 00003871 3C0F                    	CMP	AL,error_I24_wrong_disk
 21417 00003873 7512                    	JNZ	short DO_ERR				; Nothing to do
 21418                                  
 21419                                  	; MSDOS 3.3
 21420                                  	;push	ds
 21421                                  	;push	si
 21422                                  	;lds	si,[ss:CALLVIDRW]
 21423                                  	;mov	[ss:EXTERRPT+2], ds
 21424                                  	;mov	[ss:EXTERRPT], si
 21425                                  	;pop	si
 21426                                  	;pop	ds
 21427                                  
 21428                                  	; MSDOS 6.0
 21429 00003875 50                      	push	ax
 21430 00003876 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 21431 0000387A 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 21432 0000387E 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 21433 00003882 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 21434 00003886 58                      	pop	ax
 21435                                  DO_ERR:
 21436                                  	;;call	HARDERR
 21437                                  	;;retn
 21438                                  	; 16/12/2022
 21439                                  	; 10/06/2019
 21440 00003887 E9851B                  	jmp	HARDERR	
 21441                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21442                                  	;call	HARDERR
 21443                                  	;retn
 21444                                  
 21445                                  ; 24/07/2018 - Retro DOS v3.0
 21446                                  
 21447                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 21448                                  ;----------------------------------------------------------------------------
 21449                                  ;
 21450                                  ; Procedure Name : SETUP
 21451                                  ;
 21452                                  ; Inputs:
 21453                                  ;	ES:DI point to SFT (value also in THISSFT)
 21454                                  ;	DMAAdd contains transfer address
 21455                                  ;	CX = Byte count
 21456                                  ;	DS = DOSDATA
 21457                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 21458                                  ;		2nd of caller of caller.
 21459                                  ; Outputs:
 21460                                  ;	    CX = byte count
 21461                                  ;	    [THISDPB] = Base of drive parameters if file
 21462                                  ;		      = Pointer to device header if device or NET
 21463                                  ;	    ES:DI Points to SFT
 21464                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 21465                                  ;	    [TRANS] = 0 (No transfers yet)
 21466                                  ;	    BytPos = Byte position in file
 21467                                  ;
 21468                                  ;	The following fields are relevant to local files (not devices) only:
 21469                                  ;
 21470                                  ;	    SecPos = Position of first sector (local files only)
 21471                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 21472                                  ;	    [CLUSNUM] = First cluster (local files only)
 21473                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 21474                                  ;	    [THISDRV] = Physical unit number (local files only)
 21475                                  ;
 21476                                  ;      RETURNS ONE LEVEL UP WITH:
 21477                                  ;	   CX = 0
 21478                                  ;	   CARRY = Clear
 21479                                  ;	IF AN ERROR IS DETECTED
 21480                                  ; All other registers destroyed
 21481                                  ;----------------------------------------------------------------------------
 21482                                  
 21483                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 21484                                  
 21485                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 21486                                  
 21487                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21488                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 21489                                  
 21490                                  SETUP:
 21491                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 21492                                  
 21493                                  	;lds 	si,[es:di+7]
 21494 0000388A 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 21495                                  
 21496                                  ;hkn; SS override
 21497 0000388E 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 21498                                  
 21499                                  ;hkn; SS is DOSDATA
 21500 00003893 16                      	push	ss
 21501 00003894 1F                      	pop	ds
 21502                                  
 21503 00003895 8936[8A05]              	MOV	[THISDPB],SI
 21504                                  
 21505 00003899 8B1E[2C03]              	MOV	BX,[DMAADD]
 21506 0000389D 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 21507 000038A1 C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 21508                                  	;mov	ax,[es:di+15h]
 21509 000038A6 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 21510                                  	;mov	dx,[es:di+17h]
 21511 000038AA 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 21512 000038AE 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 21513 000038B2 A3[CE05]                	MOV	[BYTPOS],AX
 21514                                  	;test	word [es:di+5],8080h
 21515 000038B5 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 21516 000038BB 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 21517 000038BD 06                      	PUSH	ES
 21518 000038BE C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 21519                                  
 21520                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21521                                  	;;mov	bl,[es:bp+0]
 21522                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 21523                                  	; 05/12/2022
 21524 000038C2 268A5E00                	mov	bl,[es:bp]
 21525                                  	
 21526 000038C6 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 21527                                  	;mov	bx,[es:bp+2]
 21528 000038CA 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21529                                  
 21530                                  	;; MSDOS 3.3
 21531                                  	;cmp	dx,bx
 21532                                  	;jnb	short EOFERR
 21533                                  	;div	bx
 21534                                  	;mov	[SECPOS],ax
 21535                                  	;mov	[BYTSECPOS],dx
 21536                                  	;mov	dx,ax
 21537                                  	;;and	al,[es:bp+4]
 21538                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 21539                                  	;mov	[SECCLUSPOS],al
 21540                                  	;mov	ax,cx
 21541                                  	;;mov	cl,[es:bp+5]
 21542                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21543                                  	;shr	dx,cl
 21544                                  	;mov	[CLUSNUM],dx
 21545                                  	;pop	es
 21546                                  	;mov	cx,ax
 21547                                  
 21548                                  	; 04/05/2019 - Retro DOS v4.0
 21549                                  
 21550                                  	; MSDOS 6.0
 21551                                  ;M039: Optimized this section.
 21552 000038CE 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 21553 000038CF E83E05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 21554 000038D2 8916[CC05]              	MOV	[BYTSECPOS],DX
 21555 000038D6 A3[C405]                	MOV	[SECPOS],AX
 21556 000038D9 890E[C605]              	MOV	[SECPOS+2],CX
 21557 000038DD 89CA                    	MOV	DX,CX
 21558                                  
 21559 000038DF 89C3                    	MOV	BX,AX
 21560                                  	;and	bl,[es:bp+4]
 21561 000038E1 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 21562 000038E5 881E[7305]              	MOV	[SECCLUSPOS],BL
 21563                                  
 21564 000038E9 E84B05                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 21565 000038EC 59                      	POP	CX			;CX = byte count.
 21566 000038ED 751F                    	JNZ	short EOFERR		;cluster number above 64k
 21567                                  	;cmp	ax,[es:bp+0Dh]
 21568 000038EF 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 21569 000038F3 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 21570                                  
 21571 000038F5 A3[BC05]                	MOV	[CLUSNUM],AX
 21572 000038F8 07                      	POP	ES			; ES:DI point to SFT
 21573                                  ;M039
 21574                                  
 21575                                  NOSETSTUFF:
 21576 000038F9 89C8                    	MOV	AX,CX		; AX = Byte count.
 21577 000038FB 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 21578 000038FF 730C                    	JNC	short setup_OK	; Must be less than 64
 21579 00003901 A1[2C03]                	MOV	AX,[DMAADD]
 21580 00003904 F7D8                    	NEG	AX		; Amount of room left in segment (know
 21581                                  				;    less than 64K since max value of CX
 21582                                  				;    is FFFF).
 21583 00003906 7501                    	JNZ	short NoDec
 21584 00003908 48                      	DEC	AX
 21585                                  NoDec:
 21586 00003909 89C1                    	MOV	CX,AX		; Can do this much
 21587 0000390B E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 21588                                  setup_OK:
 21589 0000390D C3                      	retn
 21590                                  
 21591                                  EOFERR:
 21592 0000390E 07                      	POP	ES		; ES:DI point to SFT
 21593 0000390F 31C9                    	XOR	CX,CX		; No bytes read
 21594                                  ;;;;;;;;;;; 7/18/86
 21595                                  	; MSDOS 3.3
 21596                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 21597                                  ;;;;;;;;;;;
 21598                                  NOROOM:
 21599 00003911 5B                      	POP	BX		; Kill return address
 21600 00003912 F8                      	CLC
 21601 00003913 C3                      	retn			; RETURN TO CALLER OF CALLER
 21602                                  
 21603                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 21604                                  ;---------------------------------------------------------------------------
 21605                                  ;
 21606                                  ; Procedure Name : BREAKDOWN
 21607                                  ;
 21608                                  ; Inputs:
 21609                                  ;	CX = Length of disk transfer in bytes
 21610                                  ;	ES:BP = Base of drive parameters
 21611                                  ;	[BYTSECPOS] = Byte position within first sector
 21612                                  ;	DS = DOSDATA
 21613                                  ; Outputs:
 21614                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 21615                                  ;	[SECCNT] = No. of whole sectors to transfer
 21616                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 21617                                  ; AX, BX, DX destroyed. No other registers affected.
 21618                                  ;---------------------------------------------------------------------------
 21619                                  
 21620                                  BREAKDOWN:
 21621 00003914 A1[CC05]                	MOV	AX,[BYTSECPOS]
 21622 00003917 89CB                    	MOV	BX,CX
 21623 00003919 09C0                    	OR	AX,AX
 21624 0000391B 740E                    	JZ	short SAVFIR	; Partial first sector?
 21625                                  	;sub	ax,[es:bp+2]
 21626 0000391D 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 21627 00003921 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 21628 00003923 29C3                    	SUB	BX,AX		; Subtract from total length
 21629 00003925 7304                    	JAE	short SAVFIR
 21630 00003927 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 21631 00003929 31DB                    	XOR	BX,BX		; And no bytes are left
 21632                                  SAVFIR:
 21633 0000392B A3[D205]                	MOV	[BYTCNT1],AX
 21634 0000392E 89D8                    	MOV	AX,BX
 21635 00003930 31D2                    	XOR	DX,DX
 21636                                  	;div	word [ES:BP+2]
 21637 00003932 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 21638 00003936 A3[D605]                	MOV	[SECCNT],AX
 21639 00003939 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 21640                                  	; MSDOS 3.3
 21641                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 21642                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 21643                                  	;CMP	AX,1
 21644                                  	;retnz
 21645                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 21646                                  	;MOV	[BYTCNT2],AX
 21647                                  	;MOV	[SECCNT],DX	; DX = 0
 21648                                  _RET45:
 21649 0000393D C3                      	retn
 21650                                  
 21651                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 21652                                  
 21653                                  ;----------------------------------------------------------------------------
 21654                                  ;
 21655                                  ; Procedure Name : READ_LOCK_VIOLATION
 21656                                  ;
 21657                                  ; ES:DI points to SFT. This entry used by NET_READ
 21658                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 21659                                  ; Else do retrys.
 21660                                  ; ES:DI,DS,CX preserved
 21661                                  ;
 21662                                  ;----------------------------------------------------------------------------
 21663                                  
 21664                                  READ_LOCK_VIOLATION:
 21665 0000393E C606[7505]00            	MOV	byte [READOP],0
 21666                                  ERR_ON_CHECK:
 21667                                  	;;test	word [es:di+2],8000h
 21668                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21669                                  	;JNZ	short HARD_ERR
 21670                                  
 21671                                  	; 04/05/2019
 21672                                  	;test	byte [es:di+3],80h
 21673 00003943 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21674 00003948 750E                    	JNZ	short HARD_ERR
 21675                                  
 21676 0000394A 51                      	PUSH	CX
 21677                                  	;mov	cl,[es:di+2]
 21678 0000394B 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 21679                                  	;and	cl,0F0h
 21680 0000394F 80E1F0                  	AND	CL,SHARING_MASK
 21681                                  	;cmp	cl,0
 21682 00003952 80F900                  	CMP	CL,SHARING_COMPAT
 21683 00003955 59                      	POP	CX
 21684 00003956 7505                    	JNE	short NO_HARD_ERR
 21685                                  HARD_ERR:
 21686 00003958 E8DC3A                  	call	LOCK_VIOLATION
 21687 0000395B 73E0                    	jnc	short _RET45		; User wants Retrys
 21688                                  NO_HARD_ERR:
 21689 0000395D 31C9                    	XOR	CX,CX			;No bytes transferred
 21690                                  	;mov	ax,21h
 21691 0000395F B82100                  	MOV	AX,error_lock_violation
 21692 00003962 F9                      	STC
 21693 00003963 C3                      	retn
 21694                                  
 21695                                  ;----------------------------------------------------------------------------
 21696                                  ;
 21697                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 21698                                  ;
 21699                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 21700                                  ; This entry used by NET_WRITE
 21701                                  ;
 21702                                  ;----------------------------------------------------------------------------
 21703                                  
 21704                                  WRITE_LOCK_VIOLATION:
 21705 00003964 C606[7505]01            	MOV	byte [READOP],1
 21706 00003969 EBD8                    	JMP	short ERR_ON_CHECK
 21707                                  
 21708                                  ; 04/05/2019 - Retro DOS v4.0
 21709                                  
 21710                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 21711                                  
 21712                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 21713                                  ;----------------------------------------------------------------------------
 21714                                  ;
 21715                                  ; Procedure Name : DISKREAD
 21716                                  ;
 21717                                  ; Inputs:
 21718                                  ;	Outputs of SETUP
 21719                                  ; Function:
 21720                                  ;	Perform disk read
 21721                                  ; Outputs:
 21722                                  ;    Carry clear
 21723                                  ;	CX = No. of bytes read
 21724                                  ;	ES:DI point to SFT
 21725                                  ;	SFT offset and cluster pointers updated
 21726                                  ;    Carry set
 21727                                  ;	CX = 0
 21728                                  ;	ES:DI point to SFT
 21729                                  ;	AX has error code
 21730                                  ;----------------------------------------------------------------------------
 21731                                  
 21732                                  ;hkn; called from disk.asm. DS already set up.
 21733                                  
 21734                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21735                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 21736                                  
 21737                                  DISKREAD:
 21738                                  	;mov	ax,[es:di+11h]
 21739 0000396B 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 21740                                  	;mov	bx,[es:di+13h]
 21741 0000396F 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 21742 00003973 2B06[CE05]              	SUB	AX,[BYTPOS]
 21743 00003977 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 21744 0000397B 7226                    	JB	short RDERR		;Read starts past EOF
 21745 0000397D 750A                    	JNZ	short ENUF		;More than 64k to EOF
 21746 0000397F 09C0                    	OR	AX,AX
 21747 00003981 7420                    	JZ	short RDERR		;Read starts at EOF
 21748 00003983 39C8                    	CMP	AX,CX
 21749 00003985 7302                    	JAE	short ENUF		;I/O fits
 21750 00003987 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 21751                                  ENUF:
 21752                                  	; MSDOS 3.3
 21753                                  	;test	byte [es:di+4],8
 21754                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 21755                                  	;jnz	short SET_ACC_ERR
 21756                                  	;call	LOCK_CHECK
 21757                                  	;jnb	short _READ_OK
 21758                                  	;call	READ_LOCK_VIOLATION
 21759                                  	;jnb	short ENUF
 21760                                  	;retn
 21761                                  
 21762                                  	; MSDOS 6.0
 21763 00003989 E876FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 21764 0000398C 7301                    	JNC	short _READ_OK 		; There are no locks
 21765 0000398E C3                      	retn
 21766                                  
 21767                                  _READ_OK:
 21768 0000398F C42E[8A05]              	LES	BP,[THISDPB]
 21769 00003993 E87EFF                  	CALL	BREAKDOWN
 21770 00003996 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 21771                                  
 21772 0000399A E8B113                  	call	FNDCLUS
 21773                                       	; MSDOS 6.0			;M022 conditional removed here
 21774 0000399D 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 21775                                  					; migrated from 330a - HKN
 21776 0000399F 09C9                    	OR	CX,CX
 21777 000039A1 7413                    	JZ	short SKIPERR
 21778                                  RDERR:
 21779 000039A3 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 21780 000039A5 E92502                  	jmp	WRTERR22
 21781                                  
 21782                                  ;RDLASTJ: 
 21783                                  	;JMP	RDLAST                  ;M039
 21784                                  
 21785                                  SETSFTJ2: 
 21786 000039A8 E99600                  	JMP	SETSFT
 21787                                  
 21788                                  CANOT_READ:
 21789                                  	; MSDOS 3.3
 21790                                  	;POP	CX		;M039.
 21791                                  	; MSDOS 3.3 & MSDOS 6.0
 21792 000039AB 59                      	POP	CX              ;Clean stack.
 21793 000039AC 5B                      	POP	BX
 21794                                  
 21795                                  	;entry	SET_ACC_ERR_DS
 21796                                  SET_ACC_ERR_DS:
 21797                                  
 21798                                  ;hkn; SS is DOSDATA
 21799                                  	;Context DS
 21800 000039AD 16                      	push	ss
 21801 000039AE 1F                      	pop	ds
 21802                                  
 21803                                  	;entry	SET_ACC_ERR
 21804                                  SET_ACC_ERR:
 21805 000039AF 31C9                    	XOR	CX,CX
 21806                                  	;mov	ax,5
 21807 000039B1 B80500                  	MOV	AX,error_access_denied
 21808 000039B4 F9                      	STC
 21809 000039B5 C3                      	retn
 21810                                  
 21811                                  SKIPERR:
 21812 000039B6 8916[BA05]              	MOV	[LASTPOS],DX
 21813 000039BA 891E[BC05]              	MOV	[CLUSNUM],BX
 21814 000039BE 833E[D205]00            	CMP	word [BYTCNT1],0
 21815 000039C3 7405                    	JZ	short RDMID
 21816                                  
 21817 000039C5 E8FC13                  	call	BUFRD
 21818 000039C8 72E3                    	JC	short SET_ACC_ERR_DS
 21819                                  
 21820                                  RDMID:
 21821 000039CA 833E[D605]00            	CMP	word [SECCNT],0
 21822                                  	;JZ	RDLAST ; 10/08/2018
 21823 000039CF 7453                    	jz	short RDLAST
 21824                                  
 21825 000039D1 E88914                  	call	NEXTSEC
 21826 000039D4 72D2                    	JC	short SETSFTJ2
 21827                                  
 21828 000039D6 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 21829                                  ONSEC:
 21830 000039DB 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 21831 000039DF 8B0E[D605]              	MOV	CX,[SECCNT]
 21832 000039E3 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21833                                  RDLP:
 21834 000039E7 E8A414                  	call	OPTIMIZE
 21835 000039EA 72C1                    	JC	short SET_ACC_ERR_DS
 21836                                  
 21837 000039EC 57                      	PUSH	DI                      ;DI = Next physical cluster.
 21838 000039ED 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 21839 000039EE 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 21840                                  	;mov	byte [ALLOWED],38h
 21841 000039EF C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 21842 000039F4 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 21843                                  
 21844 000039F8 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 21845 000039F9 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 21846                                  
 21847                                  	; 04/05/2019 - Retro DOS v4.0
 21848                                  
 21849                                  	; MSDOS 6.0
 21850 000039FA E86122                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 21851                                  
 21852                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21853 000039FD E8C9FD                  	call	DREAD
 21854                                  
 21855                                  	; MSDOS 3.3 
 21856                                  	;pop	bx
 21857                                  	;pop	dx
 21858                                  	;jc	short CANOT_READ
 21859                                  	;add	bx,dx	; (bx = Extent end)
 21860                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 21861                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 21862                                  	;call	SETVISIT
 21863                                  	; ->***
 21864                                  ;M039
 21865                                  	; MSDOS 6.0 
 21866 00003A00 59                      	pop	cx
 21867 00003A01 5A                      	pop	dx
 21868 00003A02 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 21869 00003A07 72A2                    	jc	short CANOT_READ
 21870                                  
 21871 00003A09 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 21872                                  
 21873                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 21874                                  ;            sectors, also termed an "Extent".)
 21875                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 21876                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 21877                                  ;       ES:BP -> Drive Parameter Block (DPB).
 21878                                  ;
 21879                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 21880                                  ;	buffers must be "read" into the transfer memory block, so that the
 21881                                  ;       transfer memory reflects the most recent data.
 21882                                  
 21883 00003A0E E85E00                  	call	DskRdBufScan
 21884                                  
 21885                                  	;Context DS
 21886 00003A11 16                      	push	ss
 21887 00003A12 1F                      	pop	ds
 21888                                          
 21889 00003A13 59                      	pop	cx
 21890 00003A14 5B                              pop	bx
 21891                                  
 21892                                  ;       CX = # of sector remaining.
 21893                                  ;       BX = Next physical cluster.
 21894                                  
 21895                                  ;M039
 21896                                  
 21897                                  ;;;;;;;;
 21898                                  ;	; 25/07/2018 - Retro DOS v3.0
 21899                                  ;	; ***->
 21900                                  ;	; MSDOS 3.3
 21901                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 21902                                  ;bufq:
 21903                                  ;;	DX = Extent start.
 21904                                  ;;	BX = Extent end.
 21905                                  ;;	 AL = Drive #.
 21906                                  ;;     DS:DI-> 1st buffer in queue.
 21907                                  ;
 21908                                  ;	;or	byte [di+5],20h
 21909                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 21910                                  ;	;cmp	al,[di+4]	
 21911                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 21912                                  ;	jnz	short bufq3
 21913                                  ;	;cmp	[di+6],dx
 21914                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 21915                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 21916                                  ;	;cmp	[di+6],bx
 21917                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 21918                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 21919                                  ;	
 21920                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 21921                                  ;
 21922                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 21923                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 21924                                  ;;      as MRU (Most Recently Used).
 21925                                  ;
 21926                                  ;	;test	byte [di+5],40h
 21927                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 21928                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 21929                                  ;	pop	ax ; transfer address
 21930                                  ;	push	ax
 21931                                  ;	push	di
 21932                                  ;	push	dx
 21933                                  ;	;sub	dx,[di+6]
 21934                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 21935                                  ;	neg	dx
 21936                                  ;
 21937                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 21938                                  ;;           block.
 21939                                  ;
 21940                                  ;	mov	si,di
 21941                                  ;	mov	di,ax
 21942                                  ;	mov	ax,dx
 21943                                  ;	;mov	cx,[es:bp+6]	
 21944                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 21945                                  ;	mul	cx
 21946                                  ;	add	di,ax
 21947                                  ;
 21948                                  ;	lea	si,[si+16]
 21949                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 21950                                  ;	shr	cx,1
 21951                                  ;	push	es
 21952                                  ;	mov	es,[SS:DMAADD+2]
 21953                                  ;
 21954                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 21955                                  ;;      DS:SI-> Buffer sector data.
 21956                                  ;;      ES:DI-> Destination within Transfer memory block.
 21957                                  ;
 21958                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 21959                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 21960                                  ;	;rep	movsb                   ;Copy last byte.
 21961                                  ;	jnc	short bufq1
 21962                                  ;	movsb
 21963                                  ;bufq1:
 21964                                  ;	pop	es
 21965                                  ;	pop	dx
 21966                                  ;	pop	di
 21967                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 21968                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 21969                                  ;bufq2:
 21970                                  ;	call	SCANPLACE
 21971                                  ;bufq3:
 21972                                  ;	call	SKIPVISIT
 21973                                  ;	jnz	short bufq
 21974                                  ;	
 21975                                  ;	push	ss
 21976                                  ;	pop	ds
 21977                                  ;	pop	cx
 21978                                  ;	pop	cx
 21979                                  ;	pop	bx	
 21980                                  ;bufq4:
 21981                                  ;;;;;;;
 21982 00003A15 E30D                    	JCXZ	RDLAST
 21983                                  
 21984 00003A17 E8181C                  	call	IsEOF			; test for eof on fat size
 21985 00003A1A 7325                    	JAE	short SETSFT
 21986                                  
 21987 00003A1C B200                    	MOV	DL,0
 21988 00003A1E FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 21989 00003A22 EBC3                    	JMP	short RDLP ; 19/05/2019
 21990                                  
 21991                                  RDLAST:
 21992 00003A24 A1[D405]                	MOV	AX,[BYTCNT2]
 21993 00003A27 09C0                    	OR	AX,AX
 21994 00003A29 7416                    	JZ	short SETSFT
 21995 00003A2B A3[D205]                	MOV	[BYTCNT1],AX
 21996                                  
 21997 00003A2E E82C14                  	call	NEXTSEC
 21998 00003A31 720E                    	JC	short SETSFT
 21999                                  
 22000 00003A33 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22001 00003A39 E88813                  	call	BUFRD
 22002                                  	; 10/08/2018
 22003                                  
 22004 00003A3C 7303                    	JNC	short SETSFT
 22005 00003A3E E96CFF                  	JMP	SET_ACC_ERR_DS
 22006                                  
 22007                                  ;------------------------------------------------------------------------------
 22008                                  ;
 22009                                  ; Procedure Name : SETSFT
 22010                                  ; Inputs:
 22011                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22012                                  ;		and set cluster fields
 22013                                  ; Function:
 22014                                  ;	Update [THISSFT] based on the transfer
 22015                                  ; Outputs:
 22016                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22017                                  ;	ES:DI points to [THISSFT]
 22018                                  ;	CX No. of bytes transferred
 22019                                  ;	Carry clear
 22020                                  ;
 22021                                  ;----------------------------------------------------------------------------
 22022                                  
 22023                                  	;entry	SETSFT
 22024                                  
 22025                                  ; 26/07/2018 - Retro DOS v3.0
 22026                                  SETSFT:
 22027 00003A41 C43E[9E05]              	LES	DI,[THISSFT]
 22028                                  
 22029                                  ; Same as SETSFT except ES:DI already points to SFT
 22030                                  	;entry	SETCLUS
 22031                                  SETCLUS:	
 22032 00003A45 8B0E[B805]              	MOV	CX,[NEXTADD]
 22033 00003A49 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22034                                  	;;test	word [es:di+5],80h
 22035                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22036                                  	;JNZ	short ADDREC		; don't set clusters if device
 22037                                  
 22038                                  	; 04/05/2019 - Retro DOS v4.0
 22039                                  	;test	byte [es:di+5],80h
 22040 00003A4D 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22041 00003A52 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22042                                  
 22043 00003A54 A1[BC05]                	MOV	AX,[CLUSNUM]
 22044                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22045                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22046 00003A57 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22047 00003A5B A1[BA05]                	MOV	AX,[LASTPOS]
 22048                                  	;mov	[es:di+19h],ax
 22049 00003A5E 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22050                                  
 22051                                  ;----------------------------------------------------------------------------
 22052                                  ;
 22053                                  ; Procedure : AddRec
 22054                                  ; Inputs:
 22055                                  ;	ES:DI points to SFT
 22056                                  ;	CX is No. Bytes transferred
 22057                                  ; Function:
 22058                                  ;	Update the SFT offset based on the transfer
 22059                                  ; Outputs:
 22060                                  ;	sf_position updated to point to first byte after transfer
 22061                                  ;	ES:DI points to SFT
 22062                                  ;	CX No. of bytes transferred
 22063                                  ;	Carry clear
 22064                                  ;----------------------------------------------------------------------------
 22065                                  
 22066                                  	;entry	AddRec
 22067                                  ADDREC:
 22068 00003A62 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22069                                  	;add	[es:di+15h],cx
 22070 00003A64 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22071                                  	;adc	word [es:di+17h], 0
 22072 00003A68 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22073                                  RET28:	
 22074 00003A6D F8                      	CLC
 22075 00003A6E C3                      	retn
 22076                                  
 22077                                  ; 25/07/2018
 22078                                  ; MSDOS 6.0
 22079                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22080                                  ;----------------------------------------------------------------------------
 22081                                  ;
 22082                                  ; Procedure Name : DskRdBufScan
 22083                                  ;
 22084                                  ; Inputs:
 22085                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22086                                  ;            sectors, also termed an "Extent".)
 22087                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22088                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22089                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22090                                  ;
 22091                                  ; Function:
 22092                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22093                                  ;	"read" into the transfer memory block, so that the transfer memory
 22094                                  ;	reflects the most recent data.
 22095                                  ;
 22096                                  ; Outputs:
 22097                                  ;       Transfer memory updated as required.
 22098                                  ;
 22099                                  ; Uses:
 22100                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22101                                  ;       SS override for all global variables.
 22102                                  ;
 22103                                  ; Notes:
 22104                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22105                                  ;	than the FIRST.
 22106                                  ;----------------------------------------------------------------------------
 22107                                  ;M039: Created
 22108                                  
 22109                                  ; 04/05/2019 - Retro DOS v4.0
 22110                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22111                                  
 22112                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22113                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22114                                  
 22115                                  ;procedure DskRdBufScan,NEAR
 22116                                  ;
 22117                                  ;ASSUME  DS:NOTHING
 22118                                  
 22119                                  DskRdBufScan:
 22120 00003A6F 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22121 00003A75 743C                    	je	short bufx		     ; -no, skip all work.
 22122                                  
 22123 00003A77 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22124 00003A7C 89DE                    	mov     si,bx
 22125 00003A7E 01D1                    	add     cx,dx
 22126 00003A80 83D600                  	adc     si,0
 22127                                  
 22128 00003A83 E8801F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22129                                  	;mov	ax,[di+2]
 22130 00003A86 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22131 00003A89 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22132                                  		
 22133                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22134                                  	;;mov	al,[es:bp+0]
 22135                                  	;mov	al,[es:bp+DPB.DRIVE]
 22136                                  	; 15/12/2022
 22137 00003A8D 268A4600                	mov	al,[es:bp]
 22138                                  
 22139                                  ;       BX:DX = Extent start.
 22140                                  ;       SI:CX = Extent end + 1.
 22141                                  ;          AL = Drive #.
 22142                                  ;       DS:DI-> 1st buffer in queue.
 22143                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22144                                  
 22145                                  bufq:	
 22146                                  	;cmp	al,[di+4]
 22147 00003A91 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22148 00003A94 7514                    	jne	short bufq1        	;  -no, jump.
 22149                                  
 22150                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22151                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22152                                  
 22153                                  	;cmp	bx,[di+8]
 22154 00003A96 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22155 00003A99 7503                    	jne	short bufq01
 22156                                  	;cmp	dx,[di+6]
 22157 00003A9B 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22158                                  bufq01:
 22159 00003A9E 770A                    	ja	short bufq1
 22160                                  
 22161                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22162                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22163                                  
 22164                                  	;cmp	si,[di+8]
 22165 00003AA0 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22166 00003AA3 7503                    	jne	short bufq02
 22167                                  	;cmp	cx,[di+6]
 22168 00003AA5 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22169                                  bufq02:
 22170 00003AA8 770A                    	ja	short bufq2
 22171                                  bufq1:	
 22172 00003AAA 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22173 00003AAF 8B3D                    	mov	di,[di]
 22174                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22175 00003AB1 75DE                    	jne	short bufq		; -no, do next buffer
 22176                                  bufx:
 22177 00003AB3 C3                      	retn				;Exit.
 22178                                  
 22179                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22180                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22181                                  ;       as MRU (Most Recently Used).
 22182                                  
 22183                                  bufq2:	
 22184 00003AB4 50                      	push	ax
 22185                                  	;test	byte [di+5],40h
 22186 00003AB5 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22187 00003AB9 742F                    	jz	short bufq3                    ; -no, jump.
 22188                                  
 22189                                  ;       SaveReg <cx,dx,si,di,es>
 22190 00003ABB 51                      	push	cx
 22191 00003ABC 52                      	push	dx
 22192 00003ABD 56                      	push	si
 22193 00003ABE 57                      	push	di
 22194 00003ABF 06                      	push	es
 22195                                  
 22196 00003AC0 89D0                    	mov     ax,dx
 22197                                  	;sub	ax,[di+6]
 22198 00003AC2 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22199 00003AC5 F7D8                    	neg	ax
 22200                                  
 22201                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22202                                  ;            block. (Note: the upper word of the sector # may be ignored
 22203                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22204                                  ;            is imposed by the input parameters of the disk read operation.)
 22205                                  
 22206                                  	;lea	si,[di+20]
 22207 00003AC7 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22208                                  	;mov	cx,[es:bp+2]
 22209 00003ACA 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22210 00003ACE F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22211 00003AD0 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22212 00003AD5 01C7                    	add	di,ax
 22213 00003AD7 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22214 00003ADC D1E9                    	shr	cx,1
 22215                                  
 22216                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22217                                  ;       DS:SI-> Buffer sector data.
 22218                                  ;       ES:DI-> Destination within Transfer memory block.
 22219                                  
 22220 00003ADE F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22221                                  	;; 04/05/2019
 22222                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22223                                  	;;rep	movsb                   ;Copy last byte.
 22224                                  	;jnc	short bufq03	
 22225                                  	;movsb
 22226                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22227 00003AE0 83D100                  	adc	cx,0
 22228 00003AE3 F3A4                    	rep	movsb
 22229                                  bufq03:
 22230                                  	;RestoreReg <es,di,si,dx,cx>
 22231 00003AE5 07                      	pop	es
 22232 00003AE6 5F                      	pop	di
 22233 00003AE7 5E                      	pop	si
 22234 00003AE8 5A                      	pop	dx
 22235 00003AE9 59                      	pop	cx
 22236                                  
 22237                                  ;       DS:DI -> current buffer.
 22238                                  bufq3:	
 22239 00003AEA 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22240                                          ;invoke SCANPLACE
 22241 00003AEC E8291F                  	call	SCANPLACE
 22242 00003AEF 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22243 00003AF4 58                      	pop	ax
 22244                                  	;jne	short bufq		; -no, jump.
 22245                                  	;;jmp	short bufx		; -yes, exit.
 22246                                  	;; 12/06/2019
 22247                                  	;retn
 22248                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22249 00003AF5 759A                    	jne	short bufq
 22250 00003AF7 EBBA                    	jmp	short bufx
 22251                                  
 22252                                  ;EndProc DskRdBufScan
 22253                                  
 22254                                  ;============================================================================
 22255                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22256                                  ;============================================================================
 22257                                  ; 04/05/2019 - Retro DOS v4.0
 22258                                  ; 24/07/2018 - Retro DOS v3.0
 22259                                  
 22260                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22261                                  ;----------------------------------------------------------------------------
 22262                                  ;
 22263                                  ; Procedure Name : DISKWRITE
 22264                                  ;
 22265                                  ; Inputs:
 22266                                  ;       Outputs of SETUP
 22267                                  ; Function:
 22268                                  ;       Perform disk write
 22269                                  ; Outputs:
 22270                                  ;    Carry clear
 22271                                  ;       CX = No. of bytes written
 22272                                  ;       ES:DI point to SFT
 22273                                  ;       SFT offset and cluster pointers updated
 22274                                  ;    Carry set
 22275                                  ;       CX = 0
 22276                                  ;       ES:DI point to SFT
 22277                                  ;       AX has error code
 22278                                  ;----------------------------------------------------------------------------
 22279                                  
 22280                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 22281                                  
 22282                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 22283                                  
 22284                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22285                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 22286                                  
 22287                                  DISKWRITE:
 22288                                  	; MSDOS 3.3
 22289                                  	; IBMDOS.COM - Offset 436Dh
 22290                                  	;;test	byte [es:di+4],8
 22291                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22292                                  	;jz	short write_cont
 22293                                  	;jmp	SET_ACC_ERR_DS
 22294                                  ;write_cont:
 22295                                  	;push	cx
 22296                                  	;or	cx,cx
 22297                                  	;jnz	short Not_Truncate
 22298                                  	;;mov	cx,-1
 22299                                  	;dec	cx
 22300                                  ;Not_Truncate:
 22301                                  	;call	LOCK_CHECK
 22302                                  	;pop	cx
 22303                                  	;jnb	short _WRITE_OK
 22304                                  	;call	WRITE_LOCK_VIOLATION
 22305                                  	;jnb	short DISKWRITE
 22306                                  	;retn
 22307                                  
 22308                                  	; MSDOS 6.0
 22309 00003AF9 E8E8FC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 22310                                  	; 19/08/2018
 22311 00003AFC 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 22312 00003AFE C3                      	retn
 22313                                  
 22314                                  WRTEOFJ:
 22315 00003AFF E9DE01                  	JMP     WRTEOF
 22316                                  
 22317                                  _WRITE_OK:
 22318                                   	; 27/07/2018
 22319                                  	; IBMDOS.COM - Offset 438Eh
 22320                                  	
 22321                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22322                                  	;and	word [es:di+5],0BFBFh
 22323 00003B02 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 22324                                  				; Mark file as dirty, clear no date on close
 22325                                  
 22326                                  	; 04/05/2019 - Retro DOS v4.0	
 22327                                  
 22328                                  	; MSDOS 6.0
 22329                                  	; mov 	ax,[es:di+11h]
 22330 00003B08 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 22331 00003B0C A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 22332                                  	;mov	ax,[es:di+13h]
 22333 00003B0F 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 22334 00003B13 A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 22335                                  
 22336                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 22337                                  
 22338                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22339 00003B16 C42E[8A05]              	LES     BP,[THISDPB]
 22340                                  
 22341 00003B1A E8F7FD                  	call	BREAKDOWN
 22342                                  
 22343 00003B1D A1[CE05]                	MOV     AX,[BYTPOS]
 22344 00003B20 8B16[D005]              	MOV     DX,[BYTPOS+2]
 22345 00003B24 E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 22346 00003B26 01C8                    	ADD     AX,CX
 22347 00003B28 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 22348                                  
 22349                                  	;mov	bx,[es:bp+2]
 22350 00003B2B 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 22351                                  
 22352                                  	; MSDOS 3.3
 22353                                  	;cmp	dx,bx
 22354                                  	;jnb	short WRTERR33
 22355                                  	;div	bx
 22356                                  	;mov	bx,ax
 22357                                  	;OR	DX,DX
 22358                                  	;JNZ	short CALCLUS
 22359                                  	;dec	ax
 22360                                  ;CALCLUS:
 22361                                  	; MSDOS 3.3
 22362                                  	;mov	cl,[es:bp+5]
 22363                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22364                                  	;shr	ax,cl
 22365                                  	;push	ax
 22366                                  	;push	dx
 22367                                  	;push	es
 22368                                  	;les	di,[THISSFT]
 22369                                  	;;mov	ax,[es:di+11h]
 22370                                  	;;mov	dx,[es:di+13h]
 22371                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 22372                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 22373                                  	;pop	es
 22374                                  	;;DX:AX = current file size (in bytes).
 22375                                  	;;div	word [es:bp+2]
 22376                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22377                                  	;mov	cx,ax
 22378                                  	;or	dx,dx
 22379                                  	;jz	short NORND
 22380                                  	;inc	ax
 22381                                  ;NORND:
 22382                                  	; MSDOS 6.0
 22383 00003B2F E8DE02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 22384 00003B32 89C6                    	MOV	SI,AX
 22385 00003B34 890E[0706]                      MOV	[HIGH_SECTOR],CX
 22386                                  
 22387                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 22388                                  
 22389 00003B38 09D2                    	OR	DX,DX
 22390 00003B3A 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 22391 00003B3B 89CA                    	MOV	DX,CX			;M039
 22392 00003B3D 7506                    	JNZ	short CALCLUS
 22393 00003B3F 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 22394 00003B42 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 22395                                  
 22396                                  CALCLUS:
 22397                                  	; MSDOS 6.0
 22398 00003B45 E8EF02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 22399 00003B48 5A                      	POP	DX
 22400                                  
 22401                                  ;       AX = Last cluster to write.
 22402                                  ;       DX = # of bytes in last sector to write (the "tail").
 22403                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 22404                                  
 22405 00003B49 50                      	PUSH	AX
 22406 00003B4A 52                      	PUSH	DX
 22407                                  ;M039
 22408 00003B4B 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 22409 00003B4F A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 22410 00003B52 E8BB02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 22411 00003B55 890E[0E06]              	mov	[TEMP_VAR2],cx
 22412 00003B59 890E[CA05]              	mov	[VALSEC+2],cx
 22413 00003B5D 89C1                    	mov	cx,ax
 22414 00003B5F 89F3                    	mov	bx,si
 22415                                  
 22416                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 22417                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 22418                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 22419                                  ;                     DX = # of bytes in last sector of current file.
 22420                                  ;M039
 22421 00003B61 09D2                    	OR	DX,DX
 22422 00003B63 7408                    	JZ	short NORND
 22423 00003B65 83C001                  	ADD	AX,1            	;Round up if any remainder	;AC000;
 22424 00003B68 8316[CA05]00            	ADC	word [VALSEC+2],0
 22425                                  NORND:	
 22426                                  	; MSDOS 3.3 & MSDOS 6.0
 22427 00003B6D A3[C805]                	MOV     [VALSEC],AX
 22428                                  
 22429                                  ;       [VALSEC] = Last sector of current file.
 22430                                  
 22431 00003B70 31C0                    	XOR     AX,AX
 22432 00003B72 A3[DE05]                	MOV     [GROWCNT],AX
 22433 00003B75 A3[E005]                	MOV     [GROWCNT+2],AX
 22434 00003B78 58                      	POP     AX
 22435                                  
 22436                                  	; MSDOS 6.0
 22437 00003B79 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 22438 00003B7D 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 22439 00003B81 7264                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 22440 00003B83 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 22441 00003B85 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 22442 00003B87 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 22443 00003B8B EB09                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 22444                                  lowsec:
 22445 00003B8D BF0000                  	MOV	DI,0			;F.C. >32mb
 22446                                  	; MSDOS 3.3 & MSDOS 6.0
 22447 00003B90 29CB                    	SUB	BX,CX			; Number of full sectors
 22448 00003B92 7253                    	JB	short NOGROW
 22449 00003B94 7444                    	JZ	short TESTTAIL
 22450                                  yesgrow:
 22451                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22452 00003B96 89D1                    	MOV     CX,DX
 22453 00003B98 93                      	XCHG    AX,BX
 22454                                  	;mul	word [es:bp+2]
 22455 00003B99 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 22456                                  	
 22457                                  	; MSDOS 6.0
 22458 00003B9D 8916[0706]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 22459 00003BA1 A3[0E06]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 22460 00003BA4 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 22461                                  	;mul	word [es:bp+2]
 22462 00003BA6 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 22463                                  	
 22464 00003BAA 0306[0706]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 22465 00003BAE 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 22466 00003BB0 A1[0E06]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 22467                                  
 22468                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22469 00003BB3 29C8                    	SUB     AX,CX			; Take off current "tail"
 22470 00003BB5 83DA00                  	SBB     DX,0			; 32-bit extension
 22471 00003BB8 01D8                    	ADD     AX,BX			; Add on new "tail"
 22472 00003BBA 83D200                  	ADC     DX,0			; ripple tim's head off
 22473 00003BBD EB21                    	JMP     SHORT SETGRW
 22474                                  
 22475                                  HAVSTART:
 22476                                  	;int 3
 22477 00003BBF 89C1                    	MOV     CX,AX
 22478 00003BC1 E8AA11                  	call	SKPCLP
 22479                                  	;JCXZ	DOWRTJ
 22480                                  	; 16/12/2022
 22481 00003BC4 E357                    	jcxz	DOWRT
 22482                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22483                                  	;jcxz	DOWRTJ
 22484                                  
 22485 00003BC6 E85013                  	call	ALLOCATE
 22486                                  	;JNC	short DOWRTJ
 22487                                  	; 16/12/2022
 22488 00003BC9 7352                    	jnc	short DOWRT
 22489                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22490                                  	;jnc	short DOWRTJ
 22491                                  
 22492                                  	;entry   WRTERR
 22493                                  WRTERR:
 22494 00003BCB B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort      ;AN000;
 22495                                  
 22496                                  	;entry WRTERR22
 22497                                  WRTERR22:
 22498 00003BCD A0[7605]                	MOV     AL,[THISDRV]		;MS.                            ;AN000;
 22499                                  
 22500                                  	; 27/07/2018
 22501                                  WRTERR33:
 22502                                  	;MOV	CX,0			;No bytes transferred
 22503 00003BD0 31C9                    	XOR     CX,CX
 22504                                  					
 22505 00003BD2 C43E[9E05]              	LES     DI,[THISSFT]
 22506                                  	;CLC ; 19/05/2019
 22507                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22508                                  	; 16/12/2022
 22509                                  	;clc
 22510 00003BD6 C3                      	retn
 22511                                  
 22512                                  	; 16/12/2022
 22513                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22514                                  ;DOWRTJ:
 22515                                  	;JMP	short DOWRT
 22516                                  
 22517                                  ACC_ERRWJ:
 22518                                  	; 10/08/2018
 22519                                  	;JMP	SET_ACC_ERRW
 22520                                  	; 16/12/2022
 22521 00003BD7 E9D3FD                  	jmp	SET_ACC_ERR_DS
 22522                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22523                                  	;jmp	SET_ACC_ERRW	
 22524                                  
 22525                                  TESTTAIL:
 22526 00003BDA 29D0                    	SUB     AX,DX
 22527 00003BDC 7609                    	JBE	short NOGROW
 22528 00003BDE 31D2                    	XOR     DX,DX
 22529                                  SETGRW:
 22530 00003BE0 A3[DE05]                	MOV	[GROWCNT],AX
 22531 00003BE3 8916[E005]              	MOV	[GROWCNT+2],DX
 22532                                  NOGROW:
 22533 00003BE7 58                      	POP     AX
 22534 00003BE8 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 22535 00003BEC E85F11                  	call	FNDCLUS
 22536 00003BEF 72E6                    	JC	short ACC_ERRWJ
 22537 00003BF1 891E[BC05]              	MOV     [CLUSNUM],BX
 22538 00003BF5 8916[BA05]              	MOV     [LASTPOS],DX
 22539                                  
 22540 00003BF9 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 22541 00003BFB 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 22542 00003BFD E3C0                    	JCXZ    HAVSTART        ; See if no more data
 22543 00003BFF 51                      	PUSH    CX              ; No. of clusters short of first
 22544 00003C00 89C1                    	MOV     CX,AX
 22545 00003C02 E81413                  	call	ALLOCATE
 22546 00003C05 59                      	POP     CX
 22547 00003C06 72C3                    	JC	short WRTERR
 22548 00003C08 8B16[BA05]              	MOV     DX,[LASTPOS]
 22549 00003C0C 42                      	INC     DX
 22550 00003C0D 49                      	DEC     CX
 22551 00003C0E 7405                    	JZ	short NOSKIP
 22552 00003C10 E85B11                  	call	SKPCLP
 22553 00003C13 72C2                    	JC	short ACC_ERRWJ
 22554                                  NOSKIP:
 22555 00003C15 891E[BC05]              	MOV     [CLUSNUM],BX
 22556 00003C19 8916[BA05]              	MOV     [LASTPOS],DX
 22557                                  DOWRT:
 22558 00003C1D 833E[D205]00            	CMP     word [BYTCNT1],0
 22559 00003C22 7409                    	JZ	short WRTMID
 22560 00003C24 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22561 00003C28 E8D211                  	call	BUFWRT
 22562 00003C2B 72AA                    	JC	short ACC_ERRWJ
 22563                                  WRTMID:
 22564 00003C2D A1[D605]                	MOV     AX,[SECCNT]
 22565 00003C30 09C0                    	OR      AX,AX
 22566                                  	; 20/11/2022
 22567 00003C32 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 22568 00003C34 0106[C405]              	ADD     [SECPOS],AX
 22569                                  	; 19/05/2019
 22570                                  	; MSDOS 6.0
 22571 00003C38 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 22572 00003C3D E81D12                  	call	NEXTSEC
 22573                                  	; 16/12/2022
 22574 00003C40 7295                    	JC	short ACC_ERRWJ
 22575                                  	;JC	short SET_ACC_ERRW	;M039
 22576 00003C42 C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 22577 00003C47 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 22578 00003C4B 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22579 00003C4F 8B0E[D605]              	MOV     CX,[SECCNT]
 22580                                  WRTLP:
 22581 00003C53 E83812                  	call	OPTIMIZE
 22582 00003C56 7248                    	JC	short SET_ACC_ERRW
 22583                                  	; 16/12/2022
 22584                                  	;JC	short ACC_ERRWJ
 22585                                  
 22586                                  ;M039
 22587                                  ;       DI = Next physical cluster.
 22588                                  ;       AX = # sectors remaining.
 22589                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 22590                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22591                                  ;	     sectors, also termed an "Extent".)
 22592                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22593                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22594                                  ;
 22595                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22596                                  ;	are in Extent; they are being over-written.
 22597                                  
 22598 00003C58 57                      	push    di
 22599 00003C59 50                      	push    ax
 22600                                  
 22601                                  	; MSDOS 3.3
 22602                                  	; IBMDOS.COM (1987) - Offset 4497h
 22603                                  	;push	dx
 22604                                  	;push	bx
 22605                                  	;mov	al,[es:bp]
 22606                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 22607                                  	;mov	bx,cx
 22608                                  	;add	bx,dx	; (bx = Extent end)
 22609                                  
 22610                                  ;	DX = Extent start.
 22611                                  ;	BX = Extent end.
 22612                                  ;	AL = Drive #.
 22613                                  
 22614                                  	;call	SETVISIT
 22615                                  
 22616                                  ;wbufq1:
 22617                                  	;;or	byte [di+5],20h
 22618                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22619                                  	;;cmp	al,[di+4]	
 22620                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 22621                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 22622                                  	;;cmp	[di+6],dx
 22623                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 22624                                  	;jb	short wbufq2
 22625                                  	;;cmp	[di+6],bx
 22626                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 22627                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 22628                                  
 22629                                  	;; Buffer sector is in the Extent
 22630                                  
 22631                                  	;;mov	word [di+4],20FFh
 22632                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 22633                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 22634                                  	;				; .buf_flags, AH = 0, reset/clear
 22635                                  	;call	SCANPLACE
 22636                                  ;wbufq2:
 22637                                  	;call	SKIPVISIT
 22638                                  	;jnz	short wbufq1
 22639                                  	;pop	bx
 22640                                  	;pop	dx
 22641                                  
 22642                                          ; MSDOS 6.0
 22643 00003C5A E82D01                  	call	DskWrtBufPurge		;DS trashed.
 22644                                  
 22645                                  ;ASSUME DS:NOTHING
 22646                                  ;M039
 22647                                  	; MSDOS 3.3 & MSDOS 6.0
 22648                                  ;hkn; SS override for DMAADD and ALLOWED
 22649 00003C5D 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 22650                                  	;mov	byte [ss:ALLOWED],38h
 22651 00003C62 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22652                                  
 22653                                  ;	put logic from DWRITE in-line here so we can modify it
 22654                                  ;	for DISK FULL conditions.
 22655                                  
 22656                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22657                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 22658                                  
 22659                                  	; 16/12/2022
 22660                                  	; MSDOS 3.3 (& MSDOS 5.0)
 22661                                  	;call	DWRITE
 22662                                  
 22663                                  ;DWRITE_OKAY:
 22664                                  
 22665                                  	; 16/12/2022
 22666                                  	; MSDOS 5.0 (& MSDOS 3.3)
 22667                                  	;pop     cx
 22668                                  	;pop     bx
 22669                                  	;push    ss
 22670                                  	;pop     ds
 22671                                  	;jc      short SET_ACC_ERRW
 22672                                  	;jcxz    WRTLAST
 22673                                  	;mov     dl, 0
 22674                                  	;inc     word [LASTPOS]
 22675                                  	;jmp     short WRTLP
 22676                                  
 22677                                  	; 16/12/2022
 22678                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22679                                  DWRITE_LUP:
 22680                                  	; 23/07/2019 - Retro DOS v3.2
 22681                                  
 22682                                  	; MSDOS 6.0
 22683 00003C68 E8D7FB                  	call	DSKWRITE
 22684 00003C6B 7417                    	jz	short DWRITE_OKAY
 22685                                  
 22686                                  ;;	int	3
 22687                                  
 22688 00003C6D 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 22689 00003C6F 7423                    	jz	short DWRITE_DISK_FULL
 22690                                  
 22691                                  	; 16/12/2022
 22692                                  
 22693                                  ;;hkn; SS override
 22694 00003C71 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 22695 00003C77 E8F7FB                  	call	HARDERRRW
 22696 00003C7A 3C01                    	CMP	AL,1		; Check for retry
 22697 00003C7C 74EA                    	JZ	short DWRITE_LUP
 22698                                  
 22699                                  	; 16/12/2022
 22700                                  	; 23/07/2019
 22701                                  	;POP	CX ; *4*
 22702                                  	;POP	BX ; *5*
 22703                                  	;
 22704                                  	;push	ss
 22705                                  	;pop	ds
 22706                                  	;
 22707                                  
 22708                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22709                                  
 22710                                  	; 16/12/2022
 22711 00003C7E 3C03                    	CMP	AL,3		; Check for FAIL
 22712 00003C80 F8                      	CLC
 22713 00003C81 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 22714 00003C83 F9                      	STC
 22715                                  
 22716                                  DWRITE_OKAY:
 22717                                  	; 16/12/2022
 22718                                  	; 23/07/2019
 22719                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22720 00003C84 59                      	POP	CX ; *4*
 22721 00003C85 5B                      	POP	BX ; *5*
 22722                                  
 22723                                  ;       CX = # sectors remaining.
 22724                                  ;       BX = Next physical cluster.
 22725                                  
 22726                                  ;hkn; SS override
 22727                                          ;Context DS
 22728                                  	; 16/12/2022
 22729                                  	;push	ss
 22730                                  	;pop	ds
 22731                                  
 22732                                  	; 16/12/2022
 22733 00003C86 7218                    	jc	short SET_ACC_ERRW
 22734                                  
 22735                                  	; 16/12/2022
 22736 00003C88 16                      	push	ss
 22737 00003C89 1F                      	pop	ds
 22738                                  
 22739 00003C8A E317                    	JCXZ    WRTLAST
 22740                                  
 22741                                  	;MOV	DL,0
 22742 00003C8C 30D2                    	xor	dl,dl ; 23/07/2019
 22743 00003C8E FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 22744 00003C92 EBBF                    	JMP     short WRTLP
 22745                                  
 22746                                  	; 23/07/2019 - Retro DOS v3.2
 22747                                  	; 09/08/2018
 22748                                  	; MSDOS 6.0
 22749                                  DWRITE_DISK_FULL:
 22750                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 22751                                  	; 16/12/2022
 22752 00003C94 16                      	push	ss
 22753 00003C95 1F                      	pop	ds
 22754 00003C96 59                      	pop	cx		; unjunk stack
 22755 00003C97 5B                      	pop	bx
 22756 00003C98 C606[0B06]01            	mov	byte [DISK_FULL],1
 22757                                  	;stc
 22758 00003C9D E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 22759                                  
 22760                                  	; 16/12/2022
 22761                                  SET_ACC_ERRW:
 22762 00003CA0 E90AFD                  	jmp	SET_ACC_ERR_DS
 22763                                  
 22764                                  WRTLAST:
 22765 00003CA3 A1[D405]                	MOV     AX,[BYTCNT2]
 22766 00003CA6 09C0                    	OR      AX,AX
 22767 00003CA8 7413                    	JZ	short FINWRT
 22768 00003CAA A3[D205]                	MOV     [BYTCNT1],AX
 22769 00003CAD E8AD11                  	call	NEXTSEC
 22770 00003CB0 72EE                    	JC	short SET_ACC_ERRW
 22771 00003CB2 C706[CC05]0000          	MOV     word [BYTSECPOS],0
 22772 00003CB8 E84211                  	call	BUFWRT
 22773 00003CBB 72E3                    	JC	short SET_ACC_ERRW
 22774                                  FINWRT:
 22775 00003CBD C43E[9E05]              	LES     DI,[THISSFT]
 22776 00003CC1 A1[DE05]                	MOV     AX,[GROWCNT]
 22777 00003CC4 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 22778 00003CC8 09C0                    	OR      AX,AX
 22779 00003CCA 7502                    	JNZ	short UPDATE_size
 22780 00003CCC E30F                    	JCXZ    SAMSIZ
 22781                                  UPDATE_size:
 22782                                  	;add	[es:di+11h],ax
 22783 00003CCE 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 22784                                  	;adc	[es:di+13h],cx
 22785 00003CD2 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 22786                                  
 22787                                  ; Make sure that all other SFT's see this growth also.
 22788                                  
 22789 00003CD6 B80100                  	MOV     AX,1
 22790                                  ;if installed
 22791                                  	;Call	JShare + 14 * 4
 22792 00003CD9 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22793                                  ;else
 22794                                  ;	Call    ShSU
 22795                                  ;endif
 22796                                  
 22797                                  SAMSIZ:
 22798 00003CDD E965FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 22799                                  
 22800                                  	; 16/12/2022
 22801                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22802                                  ;SET_ACC_ERRW:
 22803                                  	;jmp	SET_ACC_ERR_DS
 22804                                  
 22805                                  WRTEOF:
 22806 00003CE0 89C1                    	MOV     CX,AX
 22807 00003CE2 09D1                    	OR      CX,DX
 22808 00003CE4 746C                    	JZ	short KILLFIL
 22809 00003CE6 83E801                  	SUB     AX,1
 22810 00003CE9 83DA00                  	SBB     DX,0
 22811                                  
 22812                                  	; MSDOS 3.3
 22813                                  	;;div	word [es:bp+2]
 22814                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22815                                  	;;mov	cl,[es:bp+5]
 22816                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 22817                                  	;shr	ax,cl
 22818                                  
 22819                                  	; MSDOS 6.0
 22820 00003CEC 53                      	PUSH	BX
 22821                                  	;mov	bx,[es:bp+2]
 22822 00003CED 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 22823 00003CF1 E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 22824 00003CF4 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 22825 00003CF5 89CA                    	MOV	DX,CX			      ;M039
 22826 00003CF7 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 22827 00003CFB E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 22828                                  
 22829 00003CFE 89C1                    	MOV     CX,AX
 22830 00003D00 E84B10                  	call	FNDCLUS
 22831                                  SET_ACC_ERRWJ2:
 22832 00003D03 729B                    	JC	short SET_ACC_ERRW
 22833                                  
 22834 00003D05 E326                    	JCXZ    RELFILE
 22835 00003D07 E80F12                  	call	ALLOCATE
 22836                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 22837                                  	; 16/12/2022
 22838 00003D0A 7303                    	jnc	short UPDATE
 22839 00003D0C E9BCFE                  	JMP	WRTERR
 22840                                  UPDATE:
 22841 00003D0F C43E[9E05]              	LES	DI,[THISSFT]
 22842 00003D13 A1[CE05]                	MOV	AX,[BYTPOS]
 22843                                  	;mov	[es:di+11h],ax
 22844 00003D16 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 22845 00003D1A A1[D005]                	MOV	AX,[BYTPOS+2]
 22846                                  	;mov	[es:di+13h],ax
 22847 00003D1D 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 22848                                  ;
 22849                                  ; Make sure that all other SFT's see this growth also.
 22850                                  ;
 22851 00003D21 B80200                  	MOV     AX,2
 22852                                  ;if installed
 22853                                  	;Call	JShare + 14 * 4
 22854 00003D24 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22855                                  ;else
 22856                                  ;	Call    ShSU
 22857                                  ;endif
 22858 00003D28 31C9                    	XOR     CX,CX
 22859 00003D2A E935FD                  	jmp	ADDREC
 22860                                  
 22861                                  	; 16/12/2022
 22862                                  ;WRTERRJ: 
 22863                                  	;JMP	WRTERR
 22864                                  
 22865                                  ;;;;;;;;;;;;;;;; 7/18/86
 22866                                  ;;;;;;;;;;;;;;;;
 22867                                  
 22868                                  RELFILE:
 22869                                  	; MSDOS 6.0
 22870 00003D2D 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 22871 00003D2E C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 22872                                  	;cmp	dx,[es:di+19h]
 22873 00003D32 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 22874 00003D36 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 22875                                  	;mov	[es:di+19h],0
 22876 00003D38 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 22877                                  	;mov	dx,[es:di+0Bh]
 22878 00003D3E 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 22879                                  	;mov	[es:di+35h],dx
 22880 00003D42 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 22881                                  SKIPRESET:                            		;AN002; BL
 22882 00003D46 07                      	POP     ES                    		;AN002; BL
 22883                                  ;
 22884 00003D47 BAFFFF                  	MOV     DX,0FFFFH
 22885 00003D4A E87A12                  	call	RELBLKS
 22886                                  	; 16/12/2022
 22887                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22888 00003D4D 73C0                    	jnc	short UPDATE
 22889                                  SET_ACC_ERRWJ:
 22890                                  	;JC	short SET_ACC_ERRWJ2
 22891                                  	;JMP	SHORT UPDATE
 22892                                  	; 16/12/2022
 22893 00003D4F E95BFC                  	jmp	SET_ACC_ERR_DS
 22894                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22895                                  	;JC	short SET_ACC_ERRWJ2
 22896                                  	;JMP	SHORT UPDATE
 22897                                  
 22898                                  KILLFIL:
 22899 00003D52 31DB                    	XOR     BX,BX
 22900 00003D54 06                      	PUSH    ES
 22901 00003D55 C43E[9E05]              	LES     DI,[THISSFT]
 22902                                  	;mov	[es:di+19h],bx
 22903 00003D59 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 22904                                  	;mov	[es:di+35h],bx ; 04/05/2019
 22905 00003D5D 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 22906                                  	;xchg	bx,[es:di+0Bh]
 22907 00003D61 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 22908 00003D65 07                      	POP	ES
 22909                                  
 22910 00003D66 09DB                    	OR	BX,BX
 22911                                  	;JZ	short UPDATEJ
 22912                                  	; 16/12/2022
 22913 00003D68 74A5                    	jz	short UPDATE
 22914                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22915                                  	;jz	short UPDATEJ
 22916                                  
 22917                                  ;; 10/23/86 FastOpen update
 22918 00003D6A 06                      	PUSH	ES              ; since first cluster # is 0
 22919 00003D6B 55                      	PUSH	BP              ; we must delete the old cache entry
 22920 00003D6C 50                      	PUSH	AX
 22921 00003D6D 51                      	PUSH	CX
 22922 00003D6E 52                      	PUSH	DX
 22923 00003D6F C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 22924                                  	; 15/12/2022
 22925 00003D73 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 22926                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22927                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 22928 00003D77 89D9                    	MOV	CX,BX                    ; first cluster #
 22929 00003D79 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 22930 00003D7B E809EA                  	call	FastOpen_Update          ; call fastopen
 22931 00003D7E 5A                      	POP	DX
 22932 00003D7F 59                      	POP	CX
 22933 00003D80 58                      	POP	AX
 22934 00003D81 5D                      	POP	BP
 22935 00003D82 07                      	POP	ES
 22936                                  ;; 10/23/86 FastOpen update
 22937                                  
 22938 00003D83 E83F12                  	call	RELEASE
 22939 00003D86 72C7                    	JC	short SET_ACC_ERRWJ
 22940                                  UPDATEJ:
 22941                                  	; 20/11/2022
 22942 00003D88 EB85                    	JMP	short UPDATE ; 10/08/2018
 22943                                  
 22944                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 22945                                  ;----------------------------------------------------------------------------
 22946                                  ;
 22947                                  ; Procedure Name : DskWrtBufPurge
 22948                                  ;
 22949                                  ; Inputs:
 22950                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22951                                  ;	     sectors, also termed an "Extent".)
 22952                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22953                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22954                                  ;
 22955                                  ; Function:
 22956                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22957                                  ;	are in Extent; they are being over-written.
 22958                                  ;
 22959                                  ; Outputs:
 22960                                  ;       (Same as Input.)
 22961                                  ; Uses:
 22962                                  ;       All registers except DS,AX,SI,DI preserved.
 22963                                  ;       SS override for all global variables.
 22964                                  ;----------------------------------------------------------------------------
 22965                                  ;M039: Created
 22966                                  
 22967                                  ;procedure   DskWrtBufPurge,NEAR
 22968                                  ;
 22969                                  ;ASSUME  DS:NOTHING
 22970                                  
 22971                                  ; 04/05/2019 - Retro DOS v4.0
 22972                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 22973                                  
 22974                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22975                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 22976                                  
 22977                                  DskWrtBufPurge:
 22978                                  	;SaveReg <bx,cx>
 22979 00003D8A 53                      	push	bx
 22980 00003D8B 51                      	push	cx
 22981                                  
 22982 00003D8C 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 22983 00003D91 89DE                    	mov	si,bx
 22984 00003D93 01D1                    	add	cx,dx
 22985 00003D95 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 22986                                  
 22987                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22988                                  	;;mov	al,[es:bp+0]
 22989                                  	;mov	al,[es:bp+DPB.DRIVE]
 22990                                  	; 15/12/2022
 22991 00003D98 268A4600                	mov	al,[es:bp]
 22992                                  
 22993                                  ;	BX:DX = Extent start.
 22994                                  ;	SI:CX = Extent end + 1.
 22995                                  ;	AL = Drive #
 22996                                  
 22997 00003D9C 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 22998 00003DA2 7431                    	je	short nosc		; -no, jump.
 22999                                  
 23000                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23001                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23002                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23003                                  
 23004 00003DA4 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23005 00003DA9 752A                    	jne	short nosc		; -no, jump.
 23006                                  
 23007 00003DAB 50                      	push    ax
 23008 00003DAC 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23009 00003DB0 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23010                                  
 23011                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23012                                  	;jbe	short sc5		; -yes, jump.
 23013                                  
 23014 00003DB5 39FE                    	cmp	si,di
 23015 00003DB7 7502                    	jne	short sc01
 23016 00003DB9 39C1                    	cmp	cx,ax
 23017                                  sc01: 
 23018 00003DBB 7617                    	jbe	short sc5	
 23019                                  
 23020 00003DBD 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23021 00003DC2 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23022                                  	
 23023                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23024                                  	;jae	short sc5		; -yes, jump.
 23025                                  
 23026 00003DC5 39FB                    	cmp	bx,di
 23027 00003DC7 7502                    	jne	short sc02
 23028 00003DC9 39C2                    	cmp	dx,ax
 23029                                  sc02:
 23030 00003DCB 7307                    	jnb	short sc5
 23031                                  
 23032 00003DCD 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23033                                  sc5:	
 23034 00003DD4 58                      	pop     ax
 23035                                  
 23036                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23037                                  ;	written.
 23038                                  
 23039                                  nosc:	
 23040 00003DD5 E82E1C                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23041                                  
 23042                                  _bufq:	
 23043                                  	;cmpo	al,[di+4]
 23044 00003DD8 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23045 00003DDB 7527                    	jne	short bufq5		; -no, jump.
 23046                                  
 23047                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23048                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23049                                  
 23050                                  	;cmp	bx,[di+8]
 23051 00003DDD 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23052 00003DE0 7503                    	jne	short bufq04
 23053                                  	;cmp	dx,[di+6]
 23054 00003DE2 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23055                                  bufq04:
 23056 00003DE5 771D                    	ja	short bufq5
 23057                                  
 23058                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23059                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23060                                  
 23061                                  	;cmp	si,[di+8]
 23062 00003DE7 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23063 00003DEA 7503                    	jne	short bufq05
 23064                                  	;cmp	cx,[di+6]
 23065 00003DEC 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23066                                  bufq05:
 23067 00003DEF 7613                    	jbe	short bufq5
 23068                                  
 23069                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23070                                  
 23071                                  	;test	byte [di+5],40h
 23072 00003DF1 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23073 00003DF5 7403                    	jz	short bufq4		; -no, jump.
 23074 00003DF7 E87D1E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23075                                  bufq4:
 23076                                  	;mov	word [di+4],20FFh
 23077 00003DFA C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23078                                  
 23079 00003DFF E8161C                  	call	SCANPLACE
 23080 00003E02 EB02                    	jmp     short bufq6
 23081                                  bufq5: 
 23082 00003E04 8B3D                    	mov     di,[di]
 23083                                  	;mov	di,[di+BUFFINFO.buf_next]
 23084                                  bufq6: 
 23085 00003E06 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23086 00003E0B 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23087                                  	
 23088                                  	;RestoreReg <cx,bx>
 23089 00003E0D 59                      	pop	cx
 23090 00003E0E 5B                      	pop	bx
 23091 00003E0F C3                      	retn
 23092                                  
 23093                                  ;EndProc DskWrtBufPurge
 23094                                  
 23095                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23096                                  ;----------------------------------------------------------------------------
 23097                                  ;
 23098                                  ; Procedure Name : DIV32
 23099                                  ;
 23100                                  ; Inputs:
 23101                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23102                                  ; Function:
 23103                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23104                                  ; Outputs:
 23105                                  ;       CX:AX = quotient , DX= remainder
 23106                                  ; Uses:
 23107                                  ;       All registers except AX,CX,DX preserved.
 23108                                  ;----------------------------------------------------------------------------
 23109                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23110                                  
 23111                                  ; 04/05/2019 - Retro DOS v4.0
 23112                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23113                                  
 23114                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23115                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23116                                  
 23117                                  DIV32:
 23118 00003E10 81FB0002                	cmp	bx,512
 23119 00003E14 7515                    	jne	short div5
 23120                                  
 23121 00003E16 89D1                    	mov	cx,dx
 23122 00003E18 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23123 00003E1A 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23124 00003E1E 88E0                    	mov	al,ah
 23125 00003E20 88CC                    	mov	ah,cl
 23126 00003E22 88E9                    	mov	cl,ch
 23127 00003E24 30ED                    	xor	ch,ch
 23128 00003E26 D1E9                    	shr	cx,1
 23129 00003E28 D1D8                    	rcr	ax,1
 23130 00003E2A C3                      	retn
 23131                                  div5:	
 23132 00003E2B 89C1                    	mov	cx,ax
 23133 00003E2D 89D0                    	mov	ax,dx
 23134 00003E2F 31D2                    	xor	dx,dx
 23135 00003E31 F7F3                    	div	bx              ; 0:AX/BX
 23136 00003E33 91                      	xchg	cx,ax
 23137 00003E34 F7F3                    	div	bx              ; DX:AX/BX
 23138 00003E36 C3                      	retn
 23139                                  
 23140                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23141                                  ;----------------------------------------------------------------------------
 23142                                  ;
 23143                                  ; Procedure Name : SHR32
 23144                                  ;
 23145                                  ; Inputs:
 23146                                  ;	DX:AX = 32 bit sector number
 23147                                  ; Function:
 23148                                  ;       Perform 32 bit shift right
 23149                                  ; Outputs:
 23150                                  ;	AX = cluster number
 23151                                  ;	ZF = 1 if no error
 23152                                  ;	   = 0 if error (cluster number > 64k)
 23153                                  ; Uses:
 23154                                  ;       DX,CX
 23155                                  ;---------------------------------------------------------------------------
 23156                                  ; M017	- SHR32 rewritten for better performance
 23157                                  ; M039	- Additional optimization
 23158                                  
 23159                                  ; 04/05/2019 - Retro DOS v4.0
 23160                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23161                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23162                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23163                                  
 23164                                  SHR32:
 23165                                  	;mov	cl,[es:bp+5]
 23166 00003E37 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23167 00003E3B 30ED                    	xor	ch,ch	    ;ZF=1
 23168 00003E3D E306                    	jcxz	norota
 23169                                  
 23170                                  rotashft2:
 23171 00003E3F D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23172 00003E41 D1D8                    	rcr	ax,1	    ;ZF not affected.
 23173 00003E43 E2FA                    	loop	rotashft2
 23174                                  norota:
 23175 00003E45 C3                      	retn
 23176                                  
 23177                                  ;============================================================================
 23178                                  ; DIR.ASM, MSDOS 6.0, 1991
 23179                                  ;============================================================================
 23180                                  ; 27/07/2018 - Retro DOS v3.0
 23181                                  ; 19/05/2019 - Retro DOS v4.0 
 23182                                  
 23183                                  ;	TITLE	DIR - Directory and path cracking
 23184                                  ;	NAME	Dir
 23185                                  
 23186                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23187                                  ;---------------------------------------------------------------------------
 23188                                  ;
 23189                                  ; Procedure Name : FINDENTRY,SEARCH
 23190                                  ;
 23191                                  ; Inputs:
 23192                                  ;	[THISDPB] set
 23193                                  ;	[SECCLUSPOS] = 0
 23194                                  ;	[DIRSEC] = Starting directory sector number
 23195                                  ;	[CLUSNUM] = Next cluster of directory
 23196                                  ;	[CLUSFAC] = Sectors/Cluster
 23197                                  ;	[NAME1] = Name to look for
 23198                                  ; Function:
 23199                                  ;	Find file name in disk directory.
 23200                                  ;	"?" matches any character.
 23201                                  ; Outputs:
 23202                                  ;	Carry set if name not found
 23203                                  ;	ELSE
 23204                                  ;	Zero set if attributes match (always except when creating)
 23205                                  ;	AH = Device ID (bit 7 set if not disk)
 23206                                  ;	[THISDPB] = Base of drive parameters
 23207                                  ;	DS = DOSGROUP
 23208                                  ;	ES = DOSGROUP
 23209                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23210                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23211                                  ;	[CURBUF] has directory record with match
 23212                                  ;	[NAME1] has file name
 23213                                  ;	[LASTENT] is entry number of the entry
 23214                                  ; All other registers destroyed.
 23215                                  ;----------------------------------------------------------------------------
 23216                                  
 23217                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23218                                  ;hkn; this point.
 23219                                  
 23220                                  SEARCH:
 23221                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23222                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23223                                  
 23224                                  	; 19/05/2019 - Retro DOS v4.0
 23225                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23226                                  
 23227                                  	; 27/07/2018 - Retro DOS v3.0
 23228                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23229                                  	; 15/03/2018 - Retro DOS v2.0
 23230                                  
 23231                                  	;entry	FindEntry
 23232                                  FINDENTRY:
 23233 00003E46 E84804                  	call	STARTSRCH
 23234 00003E49 A0[6B05]                	MOV	AL,[ATTRIB]
 23235                                  	;and	al,9Eh
 23236 00003E4C 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23237                                  	;cmp	al,8
 23238 00003E4E 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23239 00003E50 7503                    	JNZ	short NOTVOLSRCH	; No
 23240 00003E52 E87501                  	CALL	SETROOTSRCH		; Yes force search of root
 23241                                  NOTVOLSRCH:
 23242 00003E55 E80601                  	CALL	GETENTRY
 23243 00003E58 7303                    	JNC	short SRCH
 23244 00003E5A E99500                  	JMP	SETESRET
 23245                                  
 23246                                  	;entry	Srch
 23247                                  SRCH:
 23248 00003E5D 1E                      	PUSH	DS
 23249 00003E5E 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23250                                  
 23251                                  ;	(DS:BX) = directory entry address
 23252                                  
 23253 00003E62 8A27                    	mov	ah,[BX]
 23254                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23255 00003E64 08E4                    	OR	AH,AH			; End of directory?
 23256 00003E66 743A                    	JZ	short FREE
 23257                                  
 23258                                  ;hkn; SS override
 23259 00003E68 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23260 00003E6D 7433                    	JZ	short FREE
 23261                                  	;test	byte [bx+0Bh],8
 23262 00003E6F F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23263                                  					; Volume ID file?
 23264 00003E73 7405                    	JZ	short CHKFNAM 		; NO
 23265                                  
 23266                                  ;hkn; SS override
 23267 00003E75 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 23268                                  CHKFNAM:
 23269                                  ;	Context ES
 23270 00003E7A 8CD6                    	MOV	SI,SS
 23271 00003E7C 8EC6                    	MOV	ES,SI
 23272 00003E7E 89DE                    	MOV	SI,BX
 23273                                  
 23274                                  ;hkn; NAME1 is in DOSDATA
 23275 00003E80 BF[4B05]                	MOV	DI,NAME1
 23276                                  ;;;;; 7/29/86
 23277                                  
 23278                                  ;hkn; SS override for NAME1
 23279 00003E83 36803E[4B05]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 23280 00003E89 7506                    	JNZ	short NO_E5
 23281 00003E8B 36C606[4B05]05          	MOV	BYTE [SS:NAME1],05H
 23282                                  NO_E5:
 23283                                  ;;;;; 7/29/86
 23284 00003E91 E86100                  	CALL	MetaCompare
 23285 00003E94 7428                    	JZ	short FOUND
 23286 00003E96 1F                      	POP	DS
 23287                                  
 23288                                  	;entry	NEXTENT
 23289                                  NEXTENT:
 23290 00003E97 C42E[8A05]              	LES	BP,[THISDPB]
 23291 00003E9B E86600                  	CALL	NEXTENTRY
 23292 00003E9E 73BD                    	JNC	short SRCH
 23293 00003EA0 EB50                    	JMP	SHORT SETESRET
 23294                                  
 23295                                  FREE:
 23296 00003EA2 1F                      	POP	DS
 23297 00003EA3 8B0E[4803]              	MOV	CX,[LASTENT]
 23298 00003EA7 3B0E[D805]              	CMP	CX,[ENTFREE]
 23299 00003EAB 7304                    	JAE	short TSTALL
 23300 00003EAD 890E[D805]              	MOV	[ENTFREE],CX
 23301                                  TSTALL:
 23302 00003EB1 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 23303                                  NEXTENTJ:
 23304 00003EB5 74E0                    	je	short NEXTENT 		; No - continue search
 23305 00003EB7 890E[DA05]              	MOV	[ENTLAST],CX
 23306 00003EBB F9                      	STC
 23307 00003EBC EB34                    	JMP	SHORT SETESRET
 23308                                  
 23309                                  FOUND:
 23310                                  ; We have a file with a matching name. We must now consider the attributes:
 23311                                  ; ATTRIB	Action
 23312                                  ; ------	------
 23313                                  ; Volume_ID	Is Volume_ID in test?
 23314                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 23315                                  ;		If create then Is ATTRIB equal to test?
 23316                                  
 23317 00003EBE 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 23318 00003EC0 1F                      	POP	DS
 23319 00003EC1 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 23320                                  	;and	ah,9Eh
 23321 00003EC5 80E4DE                  	AND	AH,~attr_ignore
 23322                                  	;lea	si,[si+15]
 23323 00003EC8 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 23324                                  					; point to first cluster field
 23325                                  	;test	ch,8
 23326 00003ECB F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 23327 00003ECE 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 23328                                  	;test	ah,8
 23329 00003ED0 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 23330                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 23331                                  	; 16/12/2022
 23332 00003ED3 74C2                    	jz	short NEXTENT ; 19/05/2019
 23333                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23334                                  	;JZ	short NEXTENTJ
 23335 00003ED5 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 23336 00003ED7 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 23337                                  check_one_volume_id:
 23338                                  	;CMP	ah,8
 23339 00003ED9 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 23340                                  	;JZ	short NEXTENTJ		; Yes, continue search
 23341                                  	; 16/12/2022
 23342 00003EDC 74B9                    	je	short NEXTENT ; 19/05/2019
 23343                                  	;JZ	short NEXTENTJ
 23344 00003EDE E8C403                  	CALL	MatchAttributes
 23345 00003EE1 7407                    	JZ	SHORT RETFF
 23346 00003EE3 F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 23347                                  	; 16/12/2022
 23348                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 23349 00003EE8 74AD                    	jz	short NEXTENT ; 19/05/2019
 23350                                  RETFF:
 23351 00003EEA C42E[8A05]              	LES	BP,[THISDPB]
 23352                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23353                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 23354                                  	; 15/12/2022
 23355 00003EEE 268A6600                	MOV	AH,[ES:BP]
 23356                                  SETESRET:
 23357 00003EF2 16                      	PUSH	SS
 23358 00003EF3 07                      	POP	ES
 23359 00003EF4 C3                      	retn
 23360                                  
 23361                                  ;----------------------------------------------------------------------------
 23362                                  ;
 23363                                  ; Procedure Name : MetaCompare
 23364                                  ;
 23365                                  ; Inputs:
 23366                                  ;	DS:SI -> 11 character FCB style name NO '?'
 23367                                  ;	    Typically this is a directory entry.  It MUST be in upper case
 23368                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 23369                                  ;	    Typically this is a FCB or SFT.  It MUST be in upper case
 23370                                  ; Function:
 23371                                  ;	Compare FCB style names allowing for ? match to any char
 23372                                  ; Outputs:
 23373                                  ;	Zero if match else NZ
 23374                                  ; Destroys CX,SI,DI all others preserved
 23375                                  ;----------------------------------------------------------------------------
 23376                                  
 23377                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23378                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 23379                                  
 23380                                  MetaCompare:
 23381 00003EF5 B90B00                  	MOV	CX,11
 23382                                  WILDCRD:
 23383 00003EF8 F3A6                    	REPE	CMPSB
 23384 00003EFA 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 23385                                  CHECK_META:
 23386 00003EFC 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 23387 00003F01 74F5                    	JZ	short WILDCRD
 23388                                  MetaRet:
 23389 00003F03 C3                       	retn				; Zero set, Match
 23390                                  
 23391                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 23392                                  ;----------------------------------------------------------------------------
 23393                                  ;
 23394                                  ; Procedure Name : NEXTENTRY
 23395                                  ;
 23396                                  ; Inputs:
 23397                                  ;	Same as outputs of GETENTRY, above
 23398                                  ; Function:
 23399                                  ;	Update BX, and [LASTENT] for next directory entry.
 23400                                  ;	Carry set if no more.
 23401                                  ;----------------------------------------------------------------------------
 23402                                  
 23403                                  NEXTENTRY:
 23404                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23405                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 23406                                  
 23407                                  	; 19/05/2019 - Retro DOS v4.0
 23408                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 23409                                  
 23410                                  	; 27/07/2018 - Retro DOS v3.0
 23411                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 23412                                  	; 15/03/2018 - Retro DOS v2.0
 23413                                  
 23414 00003F04 A1[4803]                	MOV	AX,[LASTENT]
 23415 00003F07 3B06[DA05]              	CMP	AX,[ENTLAST]
 23416 00003F0B 7422                    	JZ	short NONE
 23417 00003F0D 40                      	INC	AX
 23418                                  	;ADD	BX,32
 23419 00003F0E 8D5F20                  	LEA	BX,[BX+32]
 23420 00003F11 39D3                    	CMP	BX,DX
 23421                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 23422                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 23423                                  	; 16/12/2022
 23424 00003F13 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 23425 00003F15 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 23426 00003F19 FEC3                    	INC	BL
 23427 00003F1B 3A1E[7705]              	CMP	BL,[CLUSFAC]
 23428 00003F1F 7215                    	JB	short SAMECLUS
 23429 00003F21 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 23430 00003F25 E80A17                  	call	IsEOF
 23431 00003F28 7305                    	JAE	short NONE
 23432                                  	; 23/07/2019
 23433 00003F2A 83FB02                  	CMP	BX,2
 23434                                  	;JB	short NONE
 23435                                  	;JMP	short GETENT
 23436                                  	; 16/12/2022
 23437 00003F2D 7332                    	jnb	short GETENT
 23438                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23439                                  	;JB	short NONE
 23440                                  	;JMP	short GETENT
 23441                                  NONE:
 23442 00003F2F F9                      	STC
 23443 00003F30 C3                      	retn
 23444                                  HAVIT:
 23445 00003F31 A3[4803]                	MOV	[LASTENT],AX
 23446 00003F34 F8                      	CLC
 23447                                  nextentry_retn:
 23448 00003F35 C3                      	retn
 23449                                  SAMECLUS:
 23450 00003F36 881E[7305]              	MOV	[SECCLUSPOS],BL
 23451 00003F3A A3[4803]                	MOV	[LASTENT],AX
 23452 00003F3D 1E                      	PUSH	DS
 23453 00003F3E C53E[E205]              	LDS	DI,[CURBUF]
 23454                                  	; 19/05/2019
 23455                                  	; MSDOS 6.0
 23456                                  	;mov	dx,[di+8]
 23457 00003F42 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 23458                                  ;hkn; SS override
 23459 00003F45 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 23460                                  	;mov	dx,[di+6]
 23461 00003F4A 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 23462                                  	;inc	dx ; MSDOS 3.3
 23463                                  	; MSDOS 6.0
 23464 00003F4D 83C201                  	ADD	DX,1				;AN000; >32mb
 23465 00003F50 368316[0706]00          	ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 23466                                  	; MSDOS 3.3 & MSDOS 6.0
 23467 00003F56 1F                      	POP	DS
 23468 00003F57 E82AF8                  	call	FIRSTCLUSTER
 23469 00003F5A 31DB                    	XOR	BX,BX
 23470 00003F5C EB23                    	JMP	short SETENTRY
 23471                                  
 23472                                  ;----------------------------------------------------------------------------
 23473                                  ;
 23474                                  ; Procedure Name : GETENTRY
 23475                                  ;
 23476                                  ; Inputs:
 23477                                  ;	[LASTENT] has directory entry
 23478                                  ;	ES:BP points to drive parameters
 23479                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 23480                                  ; Function:
 23481                                  ;	Locates directory entry in preparation for search
 23482                                  ;	GETENT provides entry for passing desired entry in AX
 23483                                  ; Outputs:
 23484                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 23485                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 23486                                  ;	[LASTENT] = New directory entry number
 23487                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 23488                                  ;	Carry set if error (currently user FAILed to I 24)
 23489                                  ;----------------------------------------------------------------------------
 23490                                  
 23491                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23492                                  GETENTRY:
 23493                                  	; 27/07/2018 - Retro DOS v3.0
 23494 00003F5E A1[4803]                	MOV	AX,[LASTENT]
 23495                                  
 23496                                  	;entry	GETENT
 23497                                  GETENT:
 23498 00003F61 A3[4803]                	MOV	[LASTENT],AX
 23499                                  ;
 23500                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 23501                                  ; directory.
 23502                                  ;
 23503 00003F64 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 23504 00003F66 D3C0                    	rol	ax,cl			; keep hight order bits
 23505 00003F68 89C2                    	mov	dx,ax
 23506                                  	; 19/05/2019 - Retro DOS v4.0
 23507                                  	;and	ax,0FFE0h
 23508                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23509                                  	;and	ax,~(32-1)		; mask off high order bits
 23510                                  	; 16/12/2022
 23511 00003F6A 24E0                    	and	al,0E0h ; ~31
 23512 00003F6C 83E21F                  	and	dx,1Fh
 23513                                  	;and	dx,32-1			; mask off low order bits
 23514                                  ;
 23515                                  ; DX:AX contain the byte offset of the required directory entry from the
 23516                                  ; beginning of the directory. Convert this to a sector number. Round the
 23517                                  ; sector size down to a multiple of 32.
 23518                                  ;
 23519                                  	;mov	bx,[es:bp+2]
 23520 00003F6F 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 23521 00003F73 80E3E0                  	and	bl,0E0h
 23522                                  	;AND	BL,255-31		; Must be multiple of 32
 23523 00003F76 F7F3                    	DIV	BX
 23524 00003F78 89D3                    	MOV	BX,DX			; Position within sector
 23525 00003F7A 53                      	PUSH	BX
 23526 00003F7B E8ADF7                  	call	DIRREAD
 23527 00003F7E 5B                      	POP	BX
 23528                                  	;retc
 23529 00003F7F 72B4                    	jc	short nextentry_retn	
 23530                                  SETENTRY:
 23531 00003F81 8B16[E205]              	MOV	DX,[CURBUF]
 23532                                  	;add	dx,16 ; MSDOS 3.3
 23533                                  	;add	dx,20 ; MSDOS 6.0 
 23534 00003F85 83C214                  	ADD	DX,BUFINSIZ
 23535 00003F88 01D3                    	ADD	BX,DX
 23536                                  	;add	dx,[es:bp+2]
 23537 00003F8A 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 23538 00003F8E C3                      	retn
 23539                                  
 23540                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 23541                                  ;----------------------------------------------------------------------------
 23542                                  ;
 23543                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 23544                                  ;
 23545                                  ; Inputs:
 23546                                  ;	BX cluster number of start of directory
 23547                                  ;	ES:BP Points to DPB
 23548                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 23549                                  ; Function:
 23550                                  ;	Set up a directory search
 23551                                  ; Outputs:
 23552                                  ;	[DIRSTART] = BX
 23553                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 23554                                  ;	Carry set if error (currently user FAILed to I 24)
 23555                                  ; destroys AX,DX,BX
 23556                                  ;----------------------------------------------------------------------------
 23557                                  
 23558                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23559                                  SETDIRSRCH:
 23560 00003F8F 09DB                    	OR	BX,BX
 23561 00003F91 7437                    	JZ	short SETROOTSRCH
 23562 00003F93 891E[C205]              	MOV	[DIRSTART],BX
 23563                                  	;mov	al,[es:bp+4]
 23564 00003F97 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 23565 00003F9B FEC0                    	INC	AL
 23566 00003F9D A2[7705]                	MOV	[CLUSFAC],AL
 23567                                  
 23568                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23569                                  	;SAVE	<SI>
 23570 00003FA0 56                      	push	si
 23571                                  	;test	byte [FastOpenFlg],2
 23572 00003FA1 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 23573 00003FA6 7507                    	JNZ	short UNP_OK
 23574                                  
 23575                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23576                                  	;invoke	UNPACK
 23577 00003FA8 E89E16                  	call	UNPACK
 23578 00003FAB 7302                    	JNC	short UNP_OK
 23579                                  	;RESTORE <SI>
 23580 00003FAD 5E                      	pop	si
 23581                                  	;return
 23582 00003FAE C3                      	retn
 23583                                  
 23584                                  UNP_OK:
 23585 00003FAF 893E[BC05]              	MOV	[CLUSNUM],DI
 23586 00003FB3 89DA                    	MOV	DX,BX
 23587 00003FB5 30DB                    	XOR	BL,BL
 23588 00003FB7 881E[7305]              	MOV	[SECCLUSPOS],BL
 23589                                  	;invoke	FIGREC
 23590 00003FBB E82F0F                  	call	FIGREC
 23591                                  	;RESTORE <SI>
 23592 00003FBE 5E                      	pop	si
 23593                                  	
 23594                                  	; 19/05/2019 - Retro DOS v4.0
 23595                                  
 23596                                  	; MSDOS 6.0
 23597                                  	;PUSH	DX			   ;AN000; >32mb
 23598                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 23599                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 23600                                  	;POP	DX			   ;AN000; >32mb
 23601                                  
 23602                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23603                                  	;push	dx
 23604                                  	;mov	dx,[HIGH_SECTOR]
 23605                                  	;mov	[DIRSEC+2],dx
 23606                                  	;pop	dx
 23607                                  	;MOV	[DIRSEC],dx
 23608                                  	; 16/12/2022
 23609 00003FBF A1[0706]                	mov	ax,[HIGH_SECTOR]
 23610 00003FC2 A3[C005]                	mov	[DIRSEC+2],AX
 23611 00003FC5 8916[BE05]              	MOV	[DIRSEC],DX
 23612                                  
 23613                                  	; 16/12/2022
 23614                                  	; cf=0 (at the return of FIGREC)
 23615                                  	;CLC
 23616 00003FC9 C3                      	retn
 23617                                  
 23618                                  	;entry	SETROOTSRCH
 23619                                  SETROOTSRCH:
 23620 00003FCA 31C0                    	XOR	AX,AX
 23621 00003FCC A3[C205]                	MOV	[DIRSTART],AX
 23622 00003FCF A2[7305]                	MOV	[SECCLUSPOS],AL
 23623 00003FD2 48                      	DEC	AX
 23624 00003FD3 A3[BC05]                	MOV	[CLUSNUM],AX
 23625                                  	;mov	ax,[es:bp+0Bh]
 23626 00003FD6 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 23627                                  	; 19/05/2019
 23628                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 23629                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 23630 00003FDA 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 23631 00003FDE 29D0                    	SUB	AX,DX
 23632 00003FE0 A2[7705]                	MOV	[CLUSFAC],AL
 23633 00003FE3 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 23634                                  	; MSDOS 6.0
 23635 00003FE7 C706[C005]0000          	MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 23636 00003FED F8                      	CLC
 23637 00003FEE C3                      	retn
 23638                                  
 23639                                  ;============================================================================
 23640                                  ; DIR2.ASM, MSDOS 6.0, 1991
 23641                                  ;============================================================================
 23642                                  ; 27/07/2018 - Retro DOS v3.0
 23643                                  ; 19/05/2019 - Retro DOS v4.0 
 23644                                  
 23645                                  ;	TITLE	DIR2 - Directory and path cracking
 23646                                  ;	NAME	Dir2
 23647                                  
 23648                                  ;Break	<GETPATH -- PARSE A WFP>
 23649                                  ;----------------------------------------------------------------------------
 23650                                  ;
 23651                                  ; Procedure Name : GETPATH
 23652                                  ;
 23653                                  ; Inputs:
 23654                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 23655                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 23656                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23657                                  ;		( = -1 if current dir not involved, else
 23658                                  ;		 Points to first char after last "/" of current dir part)
 23659                                  ;	[THISCDS] Points to CDS being used
 23660                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 23661                                  ;	[NoSetDir] set
 23662                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 23663                                  ; Function:
 23664                                  ;	Crack the path
 23665                                  ; Outputs:
 23666                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 23667                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 23668                                  ;	ID1 field of [THISCDS] updated appropriately
 23669                                  ;	[ATTRIB] = [SATTRIB]
 23670                                  ;	ES:BP Points to DPB
 23671                                  ;	Carry set if bad path
 23672                                  ;	   SI Points to path element causing failure
 23673                                  ;	   Zero set
 23674                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23675                                  ;	      start a search on the last directory
 23676                                  ;	      CL is zero if there is a bad name in the path
 23677                                  ;	      CL is non-zero if the name was simply not found
 23678                                  ;		 [ENTFREE] may have free spot in directory
 23679                                  ;		 [NAME1] is the name.
 23680                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23681                                  ;	   Zero reset
 23682                                  ;	      File in middle of path or bad name in path or attribute mismatch
 23683                                  ;		or path too long or malformed path
 23684                                  ;	ELSE
 23685                                  ;	   [CurBuf] = -1 if root directory
 23686                                  ;	   [CURBUF] contains directory record with match
 23687                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23688                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 23689                                  ;	   AH = device ID
 23690                                  ;	      bit 7 of AH set if device SI and BX
 23691                                  ;	      will point DOSGROUP relative The firclus
 23692                                  ;	      field of the device entry contains the device pointer
 23693                                  ;	   [NAME1] Has name looked for
 23694                                  ;	   If last element is a directory zero is set and:
 23695                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23696                                  ;	      are set up to start a search on it.
 23697                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23698                                  ;	      like that for a file (except for zero flag)
 23699                                  ;	   If last element is a file zero is reset
 23700                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23701                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23702                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 23703                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 23704                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 23705                                  ; DS preserved, Others destroyed
 23706                                  ;---------------------------------------------------------------------------
 23707                                  
 23708                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 23709                                  ;hkn; DS already set up at this point.
 23710                                  
 23711                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23712                                  GETPATH:
 23713                                  	;mov	word [CREATING],0E500h
 23714 00003FEF C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 23715                                  
 23716                                  ; Same as GetPath only CREATING and DELALL already set
 23717                                  
 23718                                  	;entry	GetPathNoSet
 23719                                  GetPathNoSet:
 23720                                  	;mov	byte [EXTERR_LOCUS],2	
 23721 00003FF5 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 23722 00003FFA C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 23723                                  
 23724                                  ; See if the input indicates a device that has already been detected. If so,
 23725                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 23726                                  
 23727 00004000 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 23728                                  	;cmp	word [DI+1],5C3Ah
 23729                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 23730 00004004 817D013A5C              	cmp	word [DI+1],':\'
 23731 00004009 7438                    	JZ	short CrackIt
 23732                                  
 23733                                  ; Let ChkDev find it in the device list
 23734                                  
 23735 0000400B 83C703                  	ADD	DI,3
 23736                                  	; 18/08/2018
 23737                                  	;MOV	SI,DI			; let CHKDEV see the original name
 23738                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23739                                  	; 16/12/2022
 23740                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 23741 0000400E E8B000                  	CALL	CHKDEV
 23742 00004011 722E                    	JC	short InternalError
 23743                                  
 23744                                  Build_devJ:
 23745 00004013 A0[6D05]                	MOV	AL,[SATTRIB]
 23746 00004016 A2[6B05]                	MOV	[ATTRIB],AL
 23747                                  	;mov	byte [EXTERR_LOCUS],1
 23748 00004019 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 23749                                  					; "finding" a char device
 23750                                  					; set LOCUS to Unknown. This makes
 23751                                  					; certain idiotic problems reported
 23752                                  					; by a certain 3 letter OEM go away.
 23753                                  
 23754                                  ; Take name in name1 and pack it back into where wfp_start points. This
 23755                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 23756                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 23757                                  ; wfp into the share set.
 23758                                  ;
 23759                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 23760                                  ; non-space seen +1.  This position is kept in DX.
 23761                                  
 23762                                  ;hkn; SS is DOSDATA
 23763 0000401E 16                      	push	ss
 23764 0000401F 07                      	pop	es
 23765                                  
 23766                                  ;hkn; NAME1 is in DOSDATA
 23767 00004020 BE[4B05]                	mov	si,NAME1
 23768 00004023 8B3E[B205]              	mov	di,[WFP_START]
 23769 00004027 89FA                    	mov	dx,di
 23770 00004029 B90800                  	mov	cx,8			; 8 chars in device name
 23771                                  MoveLoop:
 23772 0000402C AC                      	lodsb
 23773 0000402D AA                      	stosb
 23774 0000402E 3C20                    	cmp	al," "
 23775 00004030 7402                    	jz	short NoSave
 23776                                  
 23777 00004032 89FA                    	mov	dx,di
 23778                                  NoSave:
 23779 00004034 E2F6                    	loop	MoveLoop
 23780                                  
 23781                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 23782                                  ; at this point.
 23783                                  
 23784 00004036 89D7                    	mov	di,dx
 23785 00004038 C60500                  	mov	byte [di],0		; end of string
 23786 0000403B E8D302                  	call	Build_device_ent	; Clears carry sets zero
 23787 0000403E FEC0                    	INC	AL			; reset zero
 23788 00004040 C3                      	retn
 23789                                  
 23790                                  InternalError:
 23791                                  InternalError_loop:
 23792 00004041 EBFE                    	JMP	short InternalError_loop	; freeze
 23793                                  
 23794                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 23795                                  
 23796                                  CrackIt:
 23797 00004043 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 23798 00004047 83FEFF                  	CMP	SI,-1			; valid?
 23799 0000404A 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 23800 0000404C 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 23801                                  LOOK_SING:
 23802                                  	;mov	byte [ATTRIB],16h
 23803 0000404F C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 23804                                  					; Attributes to search through Dirs
 23805 00004054 C43E[A205]              	LES	DI,[THISCDS]
 23806 00004058 B8FFFF                  	MOV	AX,-1
 23807                                  	;mov	bx,[es:di+73]
 23808 0000405B 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 23809 0000405F 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 23810                                  
 23811                                  ; AX = -1
 23812                                  ; BX = cluster number of current directory. THis number is -1 if the media
 23813                                  ;      has been uncertainly changed.
 23814                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 23815                                  ;      may be -1 if no current directory part has been used.
 23816                                  
 23817 00004063 39C6                    	CMP	SI,AX			; if Current directory is not part
 23818 00004065 7440                    	JZ	short NO_CURR_D		; then we must crack from root
 23819 00004067 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 23820                                  
 23821                                  ; DOS 3.3  6/25/86
 23822 00004069 743C                    	JZ	short NO_CURR_D		; no, crack form the root
 23823                                  	;test	byte [FastOpenFlg],1
 23824 0000406B F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 23825 00004070 7442                    	JZ	short GOT_SEARCH_CLUSTER	; no
 23826 00004072 06                      	PUSH	ES			; save registers
 23827 00004073 57                      	PUSH	DI
 23828 00004074 51                      	PUSH	CX
 23829 00004075 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 23830 00004078 56                      	PUSH	SI
 23831 00004079 53                      	PUSH	BX
 23832                                  
 23833 0000407A C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 23834 0000407E 8B36[B205]              	MOV	SI,[WFP_START]
 23835                                  
 23836                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 23837 00004082 BB[300D]                	MOV	BX,FastOpenTable
 23838 00004085 BF[460D]                	MOV	DI,Dir_Info_Buff
 23839 00004088 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 23840                                  	;mov	al,1
 23841 0000408B B001                    	MOV	AL,FONC_Look_up
 23842 0000408D 1E                      	PUSH	DS
 23843 0000408E 07                      	POP	ES
 23844                                  	;call	far [BX+2]
 23845 0000408F FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 23846 00004092 7208                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 23847                                  					; Go to Got_Srch_cluster
 23848 00004094 803C00                  	CMP	BYTE [SI],0		;fastopen has current dir info?
 23849 00004097 7404                    	JE	short GO_Chk_end	;yes. Go to got_search_cluster
 23850 00004099 F9                      	stc
 23851 0000409A EB01                    	jmp	short GO_Chk_end	;Go to No_Curr_D
 23852                                  GO_Chk_end1:
 23853 0000409C F8                      	clc
 23854                                  GO_Chk_end:				; restore registers
 23855 0000409D 5B                      	POP	BX
 23856 0000409E 5E                      	POP	SI
 23857 0000409F 8F44FF                  	POP	word [SI-1]
 23858 000040A2 59                      	POP	CX
 23859 000040A3 5F                      	POP	DI
 23860 000040A4 07                      	POP	ES
 23861 000040A5 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 23862                                  
 23863                                  ; DOS 3.3  6/25/86
 23864                                  ;
 23865                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 23866                                  ; of path and go crack from root.
 23867                                  
 23868                                  NO_CURR_D:
 23869 000040A7 8B36[B205]              	MOV	SI,[WFP_START]
 23870 000040AB 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 23871 000040AE C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23872 000040B2 EB3C                    	JMP	short ROOTPATH
 23873                                  
 23874                                  ; We are able to crack from the current directory part. Go set up for search
 23875                                  ; of specified cluster.
 23876                                  
 23877                                  GOT_SEARCH_CLUSTER:
 23878 000040B4 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23879 000040B8 E8D4FE                  	call	SETDIRSRCH
 23880                                  	;JC	short SETFERR
 23881                                  	;JMP	short FINDPATH
 23882                                  	; 16/12/2022
 23883 000040BB 7344                    	jnc	short FINDPATH ; 17/08/2018
 23884                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23885                                  	;JC	short SETFERR
 23886                                  	;JMP	short FINDPATH
 23887                                  SETFERR:
 23888 000040BD 30C9                    	XOR	CL,CL			; set zero
 23889 000040BF F9                      	STC
 23890 000040C0 C3                      	retn
 23891                                  
 23892                                  ;---------------------------------------------------------------------------
 23893                                  ;
 23894                                  ; Procedure Name : ChkDev
 23895                                  ;
 23896                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 23897                                  ;   device.
 23898                                  ; Blasts CX,SI,DI,AX,BX
 23899                                  ;---------------------------------------------------------------------------
 23900                                  
 23901                                  CHKDEV:
 23902 000040C1 89FE                    	MOV	SI,DI
 23903 000040C3 8CD7                    	MOV	DI,SS
 23904 000040C5 8EC7                    	MOV	ES,DI
 23905                                  
 23906 000040C7 BF[4B05]                	MOV	DI,NAME1
 23907 000040CA B90900                  	MOV	CX,9
 23908                                  TESTLOOP:
 23909 000040CD E87F10                  	call	GETLET
 23910                                  
 23911 000040D0 3C2E                    	CMP	AL,'.'
 23912 000040D2 740E                    	JZ	short TESTDEVICE
 23913 000040D4 E8CE10                  	call	PATHCHRCMP
 23914 000040D7 7407                    	JZ	short NOTDEV
 23915 000040D9 08C0                    	OR	AL,AL
 23916 000040DB 7405                    	JZ	short TESTDEVICE
 23917                                  
 23918 000040DD AA                      	STOSB
 23919 000040DE E2ED                    	LOOP	TESTLOOP
 23920                                  NOTDEV:
 23921 000040E0 F9                      	STC
 23922 000040E1 C3                      	retn
 23923                                  
 23924                                  TESTDEVICE:
 23925 000040E2 83C102                  	ADD	CX,2
 23926 000040E5 B020                    	MOV	AL,' '
 23927 000040E7 F3AA                    	REP	STOSB
 23928 000040E9 8CD0                    	MOV	AX,SS
 23929 000040EB 8ED8                    	MOV	DS,AX
 23930                                  	;call	DEVNAME
 23931                                  	;retn
 23932                                  	; 18/12/2022
 23933 000040ED E9C201                  	jmp	DEVNAME
 23934                                  
 23935                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 23936                                  ;----------------------------------------------------------------------------
 23937                                  ;
 23938                                  ; Procedure Name : ROOTPATH,FINDPATH
 23939                                  ;
 23940                                  ; Inputs:
 23941                                  ;	Same as FINDPATH but,
 23942                                  ;	SI Points to asciz string of path which is assumed to start at
 23943                                  ;		the root (no leading '/').
 23944                                  ; Function:
 23945                                  ;	Search from root for path
 23946                                  ; Outputs:
 23947                                  ;	Same as FINDPATH but:
 23948                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 23949                                  ;	[NoSetDir] is ignored.
 23950                                  ;----------------------------------------------------------------------------
 23951                                  
 23952                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23953                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 23954                                  
 23955                                  ROOTPATH:
 23956 000040F0 E8D7FE                  	call	SETROOTSRCH
 23957 000040F3 803C00                  	CMP	BYTE [SI],0
 23958 000040F6 7509                    	JNZ	short FINDPATH
 23959                                  
 23960                                  ; Root dir specified
 23961 000040F8 A0[6D05]                	MOV	AL,[SATTRIB]
 23962 000040FB A2[6B05]                	MOV	[ATTRIB],AL
 23963 000040FE 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 23964                                  					; (dir), clears carry.
 23965 00004100 C3                      	retn
 23966                                  
 23967                                  ; Inputs:
 23968                                  ;	[ATTRIB] Set to get through directories
 23969                                  ;	[SATTRIB] Set to find last element
 23970                                  ;	ES:BP Points to DPB
 23971                                  ;	SI Points to asciz string of path (no leading '/').
 23972                                  ;	[SECCLUSPOS] = 0
 23973                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 23974                                  ;	[CLUSNUM] = Cluster # of next cluster
 23975                                  ;	[CLUSFAC] = Sectors per cluster
 23976                                  ;	[NoSetDir] set
 23977                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23978                                  ;		( = -1 if current dir not involved, else
 23979                                  ;		 Points to first char after last "/" of current dir part)
 23980                                  ;	[THISCDS] Points to CDS being used
 23981                                  ;	[CREATING] and [DELALL] set
 23982                                  ; Function:
 23983                                  ;	Parse path name
 23984                                  ; Outputs:
 23985                                  ;	ID1 field of [THISCDS] updated appropriately
 23986                                  ;	[ATTRIB] = [SATTRIB]
 23987                                  ;	ES:BP Points to DPB
 23988                                  ;	[THISDPB] = ES:BP
 23989                                  ;	Carry set if bad path
 23990                                  ;	   SI Points to path element causing failure
 23991                                  ;	   Zero set
 23992                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23993                                  ;	      start a search on the last directory
 23994                                  ;	      CL is zero if there is a bad name in the path
 23995                                  ;	      CL is non-zero if the name was simply not found
 23996                                  ;		 [ENTFREE] may have free spot in directory
 23997                                  ;		 [NAME1] is the name.
 23998                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23999                                  ;	   Zero reset
 24000                                  ;	      File in middle of path or bad name in path
 24001                                  ;		or path too long or malformed path
 24002                                  ;	ELSE
 24003                                  ;	   [CURBUF] contains directory record with match
 24004                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24005                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24006                                  ;	   [NAME1] Has name looked for
 24007                                  ;	   AH = device ID
 24008                                  ;	      bit 7 of AH set if device SI and BX
 24009                                  ;	      will point DOSGROUP relative The firclus
 24010                                  ;	      field of the device entry contains the device pointer
 24011                                  ;	   If last element is a directory zero is set and:
 24012                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24013                                  ;	      are set up to start a search on it,
 24014                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24015                                  ;	      like that for a file (except for zero flag)
 24016                                  ;	   If last element is a file zero is reset
 24017                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24018                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24019                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24020                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24021                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24022                                  ; Destroys all other registers
 24023                                  
 24024                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24025                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24026                                  
 24027                                      	;entry	FINDPATH
 24028                                  FINDPATH:
 24029 00004101 06                      	PUSH	ES			; Save ES:BP
 24030 00004102 56                      	PUSH	SI
 24031 00004103 89F7                    	MOV	DI,SI
 24032 00004105 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24033 00004109 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24034 0000410E 740E                    	JZ	short NOIDS		; No current dir part
 24035 00004110 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24036 00004114 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24037 00004116 C43E[A205]              	LES	DI,[THISCDS]
 24038                                  	;mov	[es:di+73],cx
 24039 0000411A 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 24040                                  NOIDS:
 24041                                  
 24042                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24043                                  ; character in the string. CX,DI may be destroyed.
 24044                                  ;
 24045                                  ;	invoke	NAMETRANS
 24046                                  ;	MOV	CL,AL
 24047                                  ;
 24048                                  ; The above is the slow method. The name has *already* been munged by
 24049                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24050                                  ; the name until ., \ or 0 is hit.
 24051                                  
 24052 0000411E 8CD0                    	MOV	AX,SS
 24053 00004120 8EC0                    	MOV	ES,AX
 24054                                  
 24055                                  ;hkn; Name1 is in DOSDATA
 24056 00004122 BF[4B05]                	MOV	DI,NAME1
 24057 00004125 B82020                  	MOV	AX,'  ' ; 2020h
 24058 00004128 AA                      	STOSB
 24059 00004129 AB                      	STOSW
 24060 0000412A AB                      	STOSW
 24061 0000412B AB                      	STOSW
 24062 0000412C AB                      	STOSW
 24063 0000412D AB                      	STOSW
 24064                                  
 24065                                  ;hkn; Name1 is in DOSDATA
 24066 0000412E BF[4B05]                	MOV	DI,NAME1
 24067 00004131 30E4                    	XOR	AH,AH			; bits for CL
 24068                                  GetNam:
 24069                                  	; 19/05/2019 - Retro DOS v4.0
 24070                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24071                                  
 24072                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24073                                  	; 16/12/2022
 24074                                  	;inc	cl ; not required !	
 24075                                  	
 24076 00004133 AC                      	LODSB
 24077 00004134 3C2E                    	CMP	AL,'.'	; 2Eh
 24078 00004136 7412                    	JZ	short _SetExt
 24079 00004138 08C0                    	OR	AL,AL
 24080 0000413A 7424                    	JZ	short _GetDone
 24081 0000413C 3C5C                    	CMP	AL,'\'	; 5Ch
 24082 0000413E 7420                    	JZ	short _GetDone
 24083 00004140 3C3F                    	CMP	AL,'?'	; 3Fh
 24084 00004142 7503                    	JNZ	short StoNam
 24085 00004144 80CC01                  	OR	AH,1
 24086                                  StoNam: 
 24087 00004147 AA                      	STOSB
 24088 00004148 EBE9                    	JMP	short GetNam
 24089                                  _SetExt:
 24090 0000414A BF[5305]                	MOV	DI,NAME1+8
 24091                                  GetExt:
 24092 0000414D AC                      	LODSB
 24093 0000414E 08C0                    	OR	AL,AL
 24094 00004150 740E                    	JZ	short _GetDone
 24095 00004152 3C5C                    	CMP	AL,'\'
 24096 00004154 740A                    	JZ	short _GetDone
 24097 00004156 3C3F                    	CMP	AL,'?'
 24098 00004158 7503                    	JNZ	short StoExt
 24099 0000415A 80CC01                  	OR	AH,1
 24100                                  StoExt: 
 24101 0000415D AA                      	STOSB
 24102 0000415E EBED                    	JMP	short GetExt
 24103                                  _GetDone:
 24104 00004160 4E                      	DEC	SI
 24105 00004161 88E1                    	MOV	CL,AH  ; ?*!
 24106 00004163 80C980                  	OR	CL,80H
 24107 00004166 5F                      	POP	DI			; Start of this element
 24108 00004167 07                      	POP	ES			; Restore ES:BP
 24109 00004168 39FE                    	CMP	SI,DI
 24110 0000416A 7503                    	JNZ	short check_device
 24111 0000416C E9EA00                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24112                                  check_device:
 24113 0000416F 56                      	PUSH	SI			; Start of next element
 24114 00004170 8A04                    	MOV	AL,[SI]
 24115 00004172 08C0                    	OR	AL,AL
 24116 00004174 7508                    	JNZ	short NOT_LAST
 24117                                  
 24118                                  ; for last element of the path switch to the correct search attributes
 24119                                  
 24120 00004176 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24121 0000417A 883E[6B05]              	MOV	[ATTRIB],BH
 24122                                  
 24123                                  NOT_LAST:
 24124                                  
 24125                                  ; check name1 to see if we have a device...
 24126                                  
 24127 0000417E 06                      	PUSH	ES			; Save ES:BP
 24128                                  
 24129                                  ;hkn; SS is DOSDATA
 24130                                  	;context ES
 24131 0000417F 16                      	push	ss
 24132 00004180 07                      	pop	es
 24133 00004181 E82E01                  	call	DEVNAME 		; blast BX
 24134 00004184 07                      	POP	ES			; Restore ES:BP
 24135 00004185 720B                    	JC	short FindFile		; Not a device
 24136 00004187 08C0                    	OR	AL,AL			; Test next char again
 24137 00004189 7403                    	JZ	short GO_BDEV
 24138 0000418B E9CF00                  	JMP	FILEINPATH		; Device name in middle of path
 24139                                  
 24140                                  GO_BDEV:
 24141 0000418E 5E                      	POP	SI			; Points to NUL at end of path
 24142 0000418F E981FE                  	JMP	Build_devJ
 24143                                  
 24144                                  FindFile:
 24145                                  ;;;; 7/28/86
 24146 00004192 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24147 00004197 7505                    	JNZ	short NOE5		; no
 24148 00004199 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24149                                  NOE5:
 24150                                  ;;;; 7/28/86
 24151 0000419E 57                      	PUSH	DI			; Start of this element
 24152 0000419F 06                      	PUSH	ES			; Save ES:BP
 24153 000041A0 51                      	PUSH	CX			; CL return from NameTrans
 24154                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24155                                  
 24156 000041A1 E89C02                  	CALL	LookupPath		; call fastopen to get dir entry
 24157 000041A4 7303                    	JNC	short DIR_FOUND		; found dir entry
 24158                                  
 24159                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24160 000041A6 E89DFC                  	call	FINDENTRY
 24161                                  DIR_FOUND:
 24162 000041A9 59                      	POP	CX
 24163 000041AA 07                      	POP	ES
 24164 000041AB 5F                      	POP	DI
 24165 000041AC 7303                    	JNC	short LOAD_BUF
 24166 000041AE E9D100                  	JMP	BADPATHPOP
 24167                                  
 24168                                  LOAD_BUF:
 24169 000041B1 C53E[E205]              	LDS	DI,[CURBUF]
 24170                                  	;test	byte [bx+0Bh],10h
 24171 000041B5 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24172 000041B9 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24173 000041BB E99F00                  	JMP	FILEINPATH		; Error or end of path
 24174                                  
 24175                                  ; if we are not setting the directory, then check for end of string
 24176                                  
 24177                                  GO_NEXT:
 24178                                  ;hkn; SS override
 24179 000041BE 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24180 000041C4 7423                    	JZ	short SetDir
 24181 000041C6 89FA                    	MOV	DX,DI			; Save pointer to entry
 24182 000041C8 8CD9                    	MOV	CX,DS
 24183                                  
 24184                                  ;hkn; SS is DOSDATA
 24185                                  	;context DS
 24186 000041CA 16                      	push	ss
 24187 000041CB 1F                      	pop	ds
 24188 000041CC 5F                      	POP	DI			; Start of next element
 24189                                  	; 19/05/2019 - Retro DOS v4.0
 24190                                  	; MSDOS 6.0
 24191 000041CD F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24192 000041D2 740B                    	JZ	short _nofast			; the FastOpen
 24193 000041D4 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24194 000041D9 7404                    	JZ	short _nofast			; no
 24195 000041DB 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24196                                  _nofast:
 24197 000041DF 803D00                  	CMP	BYTE [DI],0
 24198                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24199                                  	;;JMP	_SETRET  ; retn		; Got it
 24200                                  	;retn	; 05/09/2018
 24201                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24202                                  	;jmp	_SETRET
 24203                                  	; 16/12/2022
 24204 000041E2 7421                    	jz	short _SETRET
 24205                                  
 24206                                  NEXT_ONE:
 24207 000041E4 57                      	PUSH	DI			; Put start of next element back on stack
 24208 000041E5 89D7                    	MOV	DI,DX
 24209 000041E7 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24210                                  SetDir:
 24211 000041E9 8B14                    	MOV	DX,[SI] 		; Dir_first
 24212                                  
 24213                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24214 000041EB 1E                      	PUSH	DS		      ; save [curbuf+2]
 24215                                  ;hkn; SS is DOSDATA
 24216 000041EC 16                      	push	ss
 24217 000041ED 1F                      	pop	ds		      ; set DS Dosgroup
 24218                                  	;test	byte [FastOpenFlg],2
 24219 000041EE F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24220 000041F3 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 24221 000041F5 89D3                    	MOV	BX,DX		      ; not found
 24222 000041F7 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 24223 000041FB 50                      	PUSH	AX		      ; save device id (AH)
 24224 000041FC E890FD                  	call	SETDIRSRCH
 24225 000041FF 58                      	POP	AX		      ; restore device id (AH)
 24226 00004200 83C402                  	ADD	SP,2		      ; pop ds in stack
 24227 00004203 EB3E                    	JMP	short FAST_OPEN_SKIP
 24228                                  
 24229                                  	; 16/12/2022
 24230                                  _SETRET:
 24231 00004205 C3                      	retn
 24232                                  
 24233                                  DO_NORMAL:
 24234 00004206 1F                      	POP	DS			; DS = [curbuf + 2]
 24235                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24236                                  
 24237 00004207 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 24238 00004209 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 24239 0000420B 53                      	PUSH	BX
 24240 0000420C 50                      	PUSH	AX
 24241 0000420D 56                      	PUSH	SI
 24242 0000420E 51                      	PUSH	CX
 24243                                  	;push	word [di+6]
 24244 0000420F FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 24245                                  	; 19/05/2019
 24246                                  	; MSDOS 6.0
 24247                                  	;push	word [di+8]
 24248 00004212 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 24249 00004215 89D3                    	MOV	BX,DX
 24250                                  
 24251                                  ;hkn; SS is DOSDATA
 24252                                  	;context DS
 24253 00004217 16                      	push	ss
 24254 00004218 1F                      	pop	ds
 24255                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 24256 00004219 E873FD                  	call	SETDIRSRCH		; the entry sector buffer
 24257                                  	; 19/05/2019
 24258                                  	; MSDOS 6.0
 24259 0000421C 8F06[0706]              	POP	word [HIGH_SECTOR]
 24260 00004220 5A                      	POP	DX
 24261 00004221 720A                    	JC	short SKIP_GETB
 24262                                  	;mov	byte [ALLOWED],18h
 24263 00004223 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 24264 00004228 30C0                    	XOR	AL,AL
 24265                                  	;invoke	GETBUFFR		; Get the entry buffer back
 24266 0000422A E83E18                  	call	GETBUFFR
 24267                                  SKIP_GETB:
 24268 0000422D 59                      	POP	CX
 24269 0000422E 5E                      	POP	SI
 24270 0000422F 58                      	POP	AX
 24271 00004230 5B                      	POP	BX
 24272 00004231 7305                    	JNC	short SET_THE_BUF
 24273 00004233 5F                      	POP	DI			; Start of next element
 24274 00004234 89FE                    	MOV	SI,DI			; Point with SI
 24275 00004236 EB21                    	JMP	SHORT _BADPATH
 24276                                  
 24277                                  SET_THE_BUF:
 24278 00004238 E855F5                  	call	SET_BUF_AS_DIR
 24279 0000423B 8B3E[E205]              	MOV	DI,[CURBUF]
 24280 0000423F 01FE                    	ADD	SI,DI			; Get the offsets back
 24281 00004241 01FB                    	ADD	BX,DI
 24282                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24283                                  FAST_OPEN_SKIP:
 24284 00004243 5F                      	POP	DI			; Start of next element
 24285 00004244 E89D02                  	CALL	InsertPath		; insert dir entry info
 24286                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24287 00004247 8A05                    	MOV	AL,[DI]
 24288 00004249 08C0                    	OR	AL,AL
 24289 0000424B 74B8                    	JZ	short _SETRET		; At end
 24290 0000424D 47                      	INC	DI			; Skip over "/"
 24291 0000424E 89FE                    	MOV	SI,DI			; Point with SI
 24292 00004250 E8520F                  	call	PATHCHRCMP
 24293 00004253 7503                    	JNZ	short find_bad_name	; oops
 24294 00004255 E9A9FE                  	JMP	FINDPATH		; Next element
 24295                                  
 24296                                  find_bad_name:
 24297 00004258 4E                      	DEC	SI			; Undo above INC to get failure point
 24298                                  _BADPATH:
 24299 00004259 30C9                    	XOR	CL,CL			; Set zero
 24300 0000425B EB2C                    	JMP	SHORT BADPRET
 24301                                  
 24302                                  FILEINPATH:
 24303 0000425D 5F                      	POP	DI			; Start of next element
 24304                                  
 24305                                  ;hkn; SS is DOSDATA
 24306                                  	;context DS			; Got to from one place with DS gone
 24307 0000425E 16                      	push	ss
 24308 0000425F 1F                      	pop	ds
 24309                                  
 24310                                  ; DOS 3.3 FastOpen
 24311                                  	;test	byte [FastOpenFlg],1
 24312 00004260 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 24313 00004265 740B                    	JZ	short NO_FAST		; device info to fastopen
 24314                                  	;test	byte [FastOpenFlg],2
 24315 00004267 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24316 0000426C 7404                    	JZ	short NO_FAST
 24317 0000426E 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 24318                                  					 ; success
 24319                                  NO_FAST:
 24320                                  ; DOS 3.3 FastOpen
 24321 00004272 8A05                    	MOV	AL,[DI]
 24322 00004274 08C0                    	OR	AL,AL
 24323 00004276 7404                    	JZ	short INCRET
 24324 00004278 89FE                    	MOV	SI,DI			; Path too long
 24325 0000427A EB0D                    	JMP	SHORT BADPRET
 24326                                  
 24327                                  INCRET:
 24328                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24329                                  
 24330 0000427C E86502                  	CALL   InsertPath		; insert dir entry info
 24331                                  
 24332                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24333 0000427F FEC0                    	INC	AL			; Reset zero
 24334                                  	; 16/12/2022	
 24335                                  ;_SETRET:
 24336 00004281 C3                      	retn
 24337                                  
 24338                                  BADPATHPOP:
 24339 00004282 5E                      	POP	SI			; Start of next element
 24340 00004283 8A04                    	MOV	AL,[SI]
 24341 00004285 89FE                    	MOV	SI,DI			; Start of bad element
 24342 00004287 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 24343                                  BADPRET:
 24344 00004289 A0[6D05]                	MOV	AL,[SATTRIB]
 24345 0000428C A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 24346 0000428F F9                      	STC
 24347 00004290 C3                      	retn
 24348                                  
 24349                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 24350                                  ;---------------------------------------------------------------------------
 24351                                  ;
 24352                                  ; Procedure Name : STARTSRCH
 24353                                  ;
 24354                                  ; Inputs:
 24355                                  ;	[THISDPB] Set
 24356                                  ; Function:
 24357                                  ;	Set up a search for GETENTRY and NEXTENTRY
 24358                                  ; Outputs:
 24359                                  ;	ES:BP = Drive parameters
 24360                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 24361                                  ; Destroys ES,BP,AX
 24362                                  ;--------------------------------------------------------------------------
 24363                                  
 24364                                  STARTSRCH:
 24365 00004291 C42E[8A05]              	LES	BP,[THISDPB]
 24366 00004295 31C0                    	XOR	AX,AX
 24367 00004297 A3[4803]                	MOV	[LASTENT],AX
 24368 0000429A A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 24369 0000429D 48                      	DEC	AX
 24370 0000429E A3[D805]                	MOV	[ENTFREE],AX
 24371 000042A1 A3[DA05]                	MOV	[ENTLAST],AX
 24372 000042A4 C3                      	retn
 24373                                  
 24374                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 24375                                  ;----------------------------------------------------------------------------
 24376                                  ; Procedure Name : MatchAttributes
 24377                                  ;
 24378                                  ; Input:    [Attrib] = attribute to search for
 24379                                  ;	    CH = found attribute
 24380                                  ; Output:   JZ <match>
 24381                                  ;	    JNZ <nomatch>
 24382                                  ; Registers modified: noneski
 24383                                  ;----------------------------------------------------------------------------
 24384                                  
 24385                                  MatchAttributes:
 24386 000042A5 50                      	PUSH	AX
 24387                                  
 24388                                  ;hkn; SS override
 24389 000042A6 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 24390 000042AA F6D0                    	NOT	AL			; AL <- SearchSet'
 24391 000042AC 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 24392                                  	;and	al,16h
 24393 000042AE 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 24394                                  ;
 24395                                  ; the result is non-zero if an attribute is not in the search set
 24396                                  ; and in the found set and in the important set. This means that we do not
 24397                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 24398                                  ;
 24399 000042B0 58                      	POP	AX
 24400 000042B1 C3                      	retn
 24401                                  
 24402                                  ; 19/05/2019 - Retro DOS v4.0
 24403                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 24404                                  
 24405                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24406                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 24407                                  
 24408                                  ;Break <DevName - Look for name of device>
 24409                                  ;---------------------------------------------------------------------------
 24410                                  ;
 24411                                  ; Procedure Name : DevName
 24412                                  ;
 24413                                  ; Inputs:
 24414                                  ;	DS,ES:DOSDATA
 24415                                  ;	Filename in NAME1
 24416                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 24417                                  ; Function:
 24418                                  ;	Determine if file is in list of I/O drivers
 24419                                  ; Outputs:
 24420                                  ;	Carry set if not a device
 24421                                  ;	ELSE
 24422                                  ;	Zero flag set
 24423                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 24424                                  ;	     bits 0-4 set from low byte of attribute word
 24425                                  ;	DEVPT = DWORD pointer to Device header of device
 24426                                  ; BX destroyed, others preserved
 24427                                  ;---------------------------------------------------------------------------
 24428                                  
 24429                                  DEVNAME:
 24430                                  	; 28/07/2018 - Retro DOS v3.0
 24431                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 24432                                  
 24433 000042B2 56                      	PUSH	SI
 24434 000042B3 57                      	PUSH	DI
 24435 000042B4 51                      	PUSH	CX
 24436 000042B5 50                      	PUSH	AX
 24437                                  
 24438                                  ; E5 special code
 24439 000042B6 FF36[4B05]              	PUSH	WORD [NAME1]
 24440 000042BA 803E[4B05]05            	CMP	byte [NAME1],5
 24441 000042BF 7505                    	JNZ	short NOKTR
 24442 000042C1 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 24443                                  NOKTR:
 24444                                  	;test	byte [ATTRIB],8
 24445 000042C6 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 24446                                  					; If looking for VOL id don't find devs
 24447 000042CB 7521                    	JNZ	short RET31
 24448                                  
 24449                                  ;hkn; NULDEV is in DOSDATA
 24450 000042CD BE[4800]                	MOV	SI,NULDEV
 24451                                  LOOKIO:
 24452                                  	; 21/11/2022
 24453                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 24454                                  	; 17/12/2022
 24455                                  	;test	byte [si+5],80h
 24456 000042D0 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 24457                                  	;;test	word [si+4],8000h
 24458                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 24459 000042D4 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 24460 000042D6 89F0                    	MOV	AX,SI
 24461                                  	;add	si,10
 24462 000042D8 83C60A                  	ADD	SI,SYSDEV.NAME
 24463                                  
 24464                                  ;hkn; NAME1 is in DOSDATA
 24465 000042DB BF[4B05]                	MOV	DI,NAME1
 24466 000042DE B90400                  	MOV	CX,4			; All devices are 8 letters
 24467 000042E1 F3A7                    	REPE	CMPSW			; Check for name in list
 24468 000042E3 89C6                    	MOV	SI,AX
 24469 000042E5 7415                    	JZ	short IOCHK		; Found it?
 24470                                  SKIPDEV:
 24471 000042E7 C534                    	LDS	SI,[SI]			; Get address of next device
 24472 000042E9 83FEFF                  	CMP	SI,-1			; At end of list?
 24473 000042EC 75E2                    	JNZ	short LOOKIO
 24474                                  RET31:	
 24475 000042EE F9                      	STC				; Not found
 24476                                  RETNV:	
 24477 000042EF 8CD1                    	MOV	CX,SS
 24478 000042F1 8ED9                    	MOV	DS,CX
 24479                                  
 24480 000042F3 8F06[4B05]              	POP	WORD [NAME1]
 24481 000042F7 58                      	POP	AX
 24482 000042F8 59                      	POP	CX
 24483 000042F9 5F                      	POP	DI
 24484 000042FA 5E                      	POP	SI
 24485 000042FB C3                      	RETN
 24486                                  
 24487                                  IOCHK:
 24488                                  ;hkn; SS override for DEVPT
 24489 000042FC 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 24490                                  	;mov	bh,[si+4]
 24491 00004301 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 24492 00004304 80CFC0                  	OR	BH,0C0h
 24493 00004307 80E7DF                  	and	bh,0DFh
 24494                                  	;AND	BH,~(020h)		; Clears Carry
 24495 0000430A 368936[9A05]            	MOV	[SS:DEVPT],SI
 24496 0000430F EBDE                    	JMP	short RETNV
 24497                                  
 24498                                  ;BREAK <Build_device_ent - Make a Directory entry>
 24499                                  ;---------------------------------------------------------------------------
 24500                                  ; Procedure Name : Build_device_ent
 24501                                  ;
 24502                                  ; Inputs:
 24503                                  ;	[NAME1] has name
 24504                                  ;	BH is attribute field (supplied by DEVNAME)
 24505                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 24506                                  ; Function:
 24507                                  ;	Build a directory entry for a device at DEVFCB
 24508                                  ; Outputs:
 24509                                  ;	BX points to DEVFCB
 24510                                  ;	SI points to dir_first field
 24511                                  ;	AH = input BH
 24512                                  ;	AL = 0
 24513                                  ;	dir_first = DEVPT
 24514                                  ;	Zero Set, Carry Clear
 24515                                  ; DS,ES,BP preserved, others destroyed
 24516                                  ;--------------------------------------------------------------------------
 24517                                  
 24518                                  Build_device_ent:
 24519 00004311 B82020                  	MOV	AX,"  " ; 2020h
 24520                                  
 24521                                  ;hkn; DEVFCB is in DOSDATA
 24522 00004314 BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 24523                                  
 24524                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 24525                                  
 24526 00004317 AB                      	STOSW
 24527 00004318 AA                      	STOSB				; Blank out extent field
 24528                                  	;mov	al,40h
 24529 00004319 B040                    	MOV	AL,attr_device
 24530                                  
 24531                                  ;	Fill Dir_attr
 24532                                  
 24533 0000431B AA                      	STOSB				; Set attribute field
 24534 0000431C 31C0                    	XOR	AX,AX
 24535 0000431E B90A00                  	MOV	CX,10
 24536                                  
 24537                                  ; Fill dir_pad
 24538                                  
 24539 00004321 F3AB                    	REP	STOSW			; Fill rest with zeros
 24540 00004323 E820C8                  	call	DATE16
 24541                                  
 24542                                  ;hkn; DEVFCB is in DOSDATA
 24543 00004326 BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 24544 00004329 92                      	XCHG	AX,DX
 24545                                  
 24546                                  ; Fill dir_time
 24547                                  
 24548 0000432A AB                      	STOSW
 24549 0000432B 92                      	XCHG	AX,DX
 24550                                  
 24551                                  ; Fill dir_date
 24552                                  
 24553 0000432C AB                      	STOSW
 24554 0000432D 89FE                    	MOV	SI,DI			; SI points to dir_first field
 24555 0000432F A1[9A05]                	MOV	AX,[DEVPT]
 24556                                  
 24557                                  ; Fill dir_first
 24558                                  
 24559 00004332 AB                      	STOSW				; Dir_first points to device
 24560 00004333 A1[9C05]                	MOV	AX,[DEVPT+2]
 24561                                  ;
 24562                                  ; Fill dir_size_l
 24563                                  ;
 24564 00004336 AB                      	STOSW
 24565 00004337 88FC                    	MOV	AH,BH			; Put device atts in AH
 24566                                  
 24567                                  ;hkn; DEVFCB is in DOSDATA
 24568 00004339 BB[4B05]                	MOV	BX,DEVFCB
 24569 0000433C 30C0                    	XOR	AL,AL			; Set zero, clear carry
 24570 0000433E C3                      	retn
 24571                                  
 24572                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 24573                                  ;----------------------------------------------------------------------------
 24574                                  ;
 24575                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 24576                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 24577                                  ;   If invalid, reset original CDS to root.
 24578                                  ;
 24579                                  ;   Inputs:	ThisCDS points to CDS of interest
 24580                                  ;		SS:DI points to temp buffer
 24581                                  ;   Outputs:	The current directory string is validated on the appropriate
 24582                                  ;		    drive
 24583                                  ;		ThisDPB changed
 24584                                  ;		ES:DI point to CDS
 24585                                  ;		Carry set if error (currently user FAILed to I 24)
 24586                                  ;   Registers modified: all
 24587                                  ;----------------------------------------------------------------------------
 24588                                  
 24589                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24590                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 24591                                  
 24592                                  ValidateCDS:
 24593                                  	; 19/05/2019 - Retro DOS v4.0
 24594                                  	; 28/07/2018 - Retro DOS v3.0
 24595                                  
 24596                                     %define  Temp	[bp-2]	; word
 24597                                     %define  SaveCDS	[bp-6]	; dword
 24598                                     %define  SaveCDSL	[bp-6]	; word
 24599                                     %define  SaveCDSH	[bp-4]	; word
 24600                                  
 24601                                  	;Enter
 24602 0000433F 55                      	push	bp
 24603 00004340 89E5                    	mov	bp,sp
 24604 00004342 83EC06                  	sub	sp,6
 24605                                  
 24606 00004345 897EFE                  	MOV	Temp,DI
 24607                                  
 24608                                  ;hkn; SS override
 24609 00004348 36C536[A205]            	LDS	SI,[SS:THISCDS]
 24610 0000434D 8976FA                  	MOV	SaveCDSL,SI
 24611 00004350 8C5EFC                  	MOV	SaveCDSH,DS
 24612                                  	;EnterCrit critDisk
 24613 00004353 E832D0                  	call	ECritDisk
 24614                                  	; 21/11/2022
 24615                                  	;test	byte [SI+curdir.flags+1],80h
 24616                                  	;test	word [si+67],8000h
 24617                                  	; 17/12/2022
 24618                                  	;test	byte [SI+68],80h
 24619 00004356 F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 24620                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 24621 0000435A 7403                    	JZ	short _DoSplice
 24622 0000435C E99200                  	JMP	FatFail
 24623                                  _DoSplice:
 24624 0000435F 30D2                    	XOR	DL,DL
 24625 00004361 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 24626                                  
 24627                                  ;hkn; SS is DOSDATA
 24628                                  	;Context ES
 24629 00004366 16                      	push	ss
 24630 00004367 07                      	pop	es
 24631                                  	;Invoke	FStrcpy
 24632 00004368 E8EFCE                  	call	FStrCpy
 24633 0000436B 8B76FE                  	MOV	SI,Temp
 24634                                  
 24635                                  ;hkn; SS is DOSDATA
 24636                                  	;Context DS
 24637 0000436E 16                      	push	ss
 24638 0000436F 1F                      	pop	ds	
 24639                                  	;Invoke	Splice
 24640 00004370 E8A32B                  	call	Splice
 24641                                  
 24642                                   ;hkn; SS is DOSDATA
 24643                                  	;Context DS			;   FatReadCDS (ThisCDS);
 24644 00004373 16                      	push	ss
 24645 00004374 1F                      	pop	ds
 24646 00004375 8816[4C03]              	MOV	[NoSetDir],DL
 24647 00004379 C43E[A205]              	LES	DI,[THISCDS]
 24648                                  	;SAVE	<BP>
 24649 0000437D 55                      	push	bp
 24650                                  	;Invoke	FATREAD_CDS
 24651 0000437E E87A14                  	call	FATREAD_CDS	
 24652                                  	;RESTORE <BP>
 24653 00004381 5D                      	pop	bp
 24654 00004382 726D                    	JC	short FatFail
 24655                                  
 24656 00004384 C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 24657                                  	;cmp	word [si+73],-1
 24658 00004388 837C49FF                	CMP	word [SI+curdir.ID],-1
 24659 0000438C 7555                    	JNZ	short RestoreCDS
 24660                                  
 24661                                  ;hkn; SS is DOSDATA
 24662                                  	;Context ES
 24663 0000438E 16                      	push	ss
 24664 0000438F 07                      	pop	es
 24665                                  
 24666                                  ;hkn; SS override
 24667                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 24668 00004390 36FF36[B205]            	push	word [SS:WFP_START]
 24669                                  	;cmp	si,[bp-6]
 24670 00004395 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 24671 00004398 750B                    	JNZ	short DoChdir
 24672                                  	;mov	di,[bp-2]
 24673 0000439A 8B7EFE                  	MOV	DI,Temp
 24674                                  
 24675                                  ;hkn; SS override
 24676 0000439D 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 24677                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 24678 000043A2 E8B5CE                  	call	FStrCpy
 24679                                  DoChdir:
 24680                                  ;hkn; SS is DOSDATA
 24681                                  	;Context DS
 24682 000043A5 16                      	push	ss
 24683 000043A6 1F                      	pop	ds
 24684                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 24685 000043A7 FF36[6D05]              	push	word [SATTRIB]
 24686 000043AB 55                      	push	bp
 24687                                  	;Invoke	DOS_ChDir
 24688 000043AC E8B9EE                  	call	DOS_CHDIR
 24689                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 24690 000043AF 5D                      	pop	bp
 24691 000043B0 5B                      	pop	bx
 24692 000043B1 8F06[B205]              	pop	word [WFP_START]
 24693 000043B5 881E[6D05]              	MOV	[SATTRIB],BL
 24694 000043B9 C576FA                  	LDS	SI,SaveCDS
 24695 000043BC 730F                    	JNC	short SetCluster	;	if (c == -1) {
 24696                                  
 24697                                  ;hkn; SS override for THISCDS
 24698 000043BE 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 24699 000043C3 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 24700 000043C8 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 24701 000043CA 884C03                  	MOV	[SI+3],CL		;	    }
 24702                                  SetCluster:
 24703                                  	;mov	word [si+73],0FFFFh
 24704 000043CD C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 24705 000043D2 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 24706                                  	; 21/11/2022
 24707                                  	;test	byte [si+curdir.flags+1],20h
 24708                                  	; 19/05/2019
 24709                                  	; MSDOS 6.0
 24710                                  	; 17/12/2022
 24711                                  	;test	byte [si+68],20h
 24712 000043D7 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 24713                                  	;;test	word [si+67],2000h
 24714                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 24715 000043DB 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 24716 000043DD B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 24717                                  _setdirclus:
 24718                                  	;mov	[si+73],cx
 24719 000043E0 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 24720                                  RestoreCDS:
 24721 000043E3 C47EFA                  	LES	DI,SaveCDS
 24722 000043E6 36893E[A205]            	MOV	[SS:THISCDS],DI
 24723 000043EB 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 24724 000043F0 F8                      	CLC
 24725                                  FatFail:
 24726                                  	;LeaveCrit critDisk
 24727 000043F1 E8AFCF                  	call	LCritDisk
 24728                                  
 24729                                  	;les	di,[bp-6]
 24730 000043F4 C47EFA                  	LES	DI,SaveCDS
 24731                                  	;Leave
 24732 000043F7 89EC                    	mov	sp,bp
 24733 000043F9 5D                      	pop	bp
 24734 000043FA C3                      	retn
 24735                                  
 24736                                  ; 28/07/2018 - Retro DOS v3.0
 24737                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 24738                                  
 24739                                  ;Break	<CheckThisDevice - Check for being a device>
 24740                                  ;---------------------------------------------------------------------------
 24741                                  ;
 24742                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 24743                                  ;   device specified. We will return carry if there is a device present. 
 24744                                  ;   The forms of devices we will recognize are:
 24745                                  ;
 24746                                  ;	[path]device
 24747                                  ;
 24748                                  ;   Note that the drive letter has *already* been removed. All other forms
 24749                                  ;   are not considered to be devices. If such a device is found we change
 24750                                  ;   the source pointer to point to the device component.
 24751                                  ;
 24752                                  ;   Inputs:	ES is DOSDATA
 24753                                  ;		DS:SI contains name
 24754                                  ;   Outputs:	ES is DOSDATA
 24755                                  ;		DS:SI point to name or device
 24756                                  ;		Carry flag set if device was found
 24757                                  ;		Carry flag reset otherwise
 24758                                  ;   Registers Modified: all except ES:DI, DS
 24759                                  ;----------------------------------------------------------------------------
 24760                                  
 24761                                  CheckThisDevice:
 24762 000043FB 57                      	push	di
 24763 000043FC 56                      	push	si
 24764 000043FD 89F7                    	MOV	DI,SI
 24765                                  
 24766                                  ; Check for presence of \dev\ (Dam multiplan!)
 24767                                  
 24768 000043FF 8A04                    	MOV	AL,[SI]
 24769 00004401 E8A10D                  	call	PATHCHRCMP		; is it a path char?
 24770 00004404 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 24771 00004406 46                      	INC	SI			; simulate LODSB
 24772                                  
 24773                                  ; We have the leading path separator. Look for DEV part.
 24774                                  
 24775 00004407 AD                      	LODSW
 24776 00004408 0D2020                  	OR	AX,2020h
 24777 0000440B 3D6465                  	cmp	ax,"de"
 24778                                  	;CMP	AX,"e"<< 8 + "d"
 24779 0000440E 752D                    	JNZ	short NotDevice		; not "de", assume not device
 24780 00004410 AC                      	LODSB
 24781 00004411 0C20                    	OR	AL,20h
 24782 00004413 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 24783 00004415 7526                    	JNZ	short NotDevice
 24784 00004417 AC                      	LODSB
 24785 00004418 E88A0D                  	call	PATHCHRCMP		; do we have the last path separator?
 24786 0000441B 7520                    	JNZ	short NotDevice		; no. go for it.
 24787                                  
 24788                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 24789                                  ; SI and DevName may destroy DS.
 24790                                  
 24791                                  ParseDev:
 24792 0000441D 1E                      	push	ds
 24793 0000441E 56                      	push	si			; preserve the source pointer
 24794 0000441F E8C10C                  	call	NameTrans		; advance DS:SI
 24795 00004422 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 24796 00004425 F9                      	STC				; simulate a Carry return from DevName
 24797 00004426 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 24798                                  
 24799                                  ;hkn; SS is DOSDATA
 24800 00004428 16                      	push	ss
 24801 00004429 1F                      	pop	ds
 24802                                  
 24803                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 24804                                  ;
 24805                                  ; SR;
 24806                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 24807                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 24808                                  ; old call set the volume attribute bit.
 24809                                  
 24810 0000442A A0[6D05]                	mov	al,[SATTRIB]
 24811 0000442D A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 24812                                  
 24813                                  ; M026 - end
 24814                                  
 24815 00004430 E87FFE                  	call	DEVNAME
 24816                                  
 24817                                  SkipSearch:
 24818 00004433 5E                      	pop	si
 24819 00004434 1F                      	pop	ds
 24820                                  
 24821                                  ; SI points to the beginning of the potential device. If we have a device
 24822                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 24823                                  ; original value. At this point Carry set indicates FILE.
 24824                                  
 24825                                  CheckReturn:
 24826 00004435 5F                      	pop	di			; get original SI
 24827 00004436 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 24828 00004438 89FE                    	MOV	SI,DI
 24829                                  Check_Done:
 24830 0000443A 5F                      	pop	di
 24831 0000443B F5                      	CMC				; invert carry. Carry => device
 24832 0000443C C3                      	retn
 24833                                  NotDevice:
 24834 0000443D F9                      	STC
 24835 0000443E EBF5                    	JMP	short CheckReturn
 24836                                  
 24837                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 24838                                  ;-----------------------------------------------------------------------------
 24839                                  ;
 24840                                  ; Procedure Name : LookupPath
 24841                                  ;
 24842                                  ; Output  DS:SI -> path name,
 24843                                  ;	  ES:DI -> dir entry info buffer
 24844                                  ;	  ES:CX -> extended dir info buffer
 24845                                  ;
 24846                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 24847                                  ;			     FastOpen, DS:SI points to char just one after
 24848                                  ;			     the last char of path name which is fully or
 24849                                  ;			     partially found in FastOPen
 24850                                  ;	  carry flag set : FastOpen not in memory or path name not found
 24851                                  ;
 24852                                  ;----------------------------------------------------------------------------
 24853                                  
 24854                                  LookupPath:
 24855                                  ;	PUSH	AX
 24856                                  
 24857                                  ;hkn; SS override
 24858                                  	;test	byte [ss:FastOpenFlg],1
 24859 00004440 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 24860 00004446 7503                    	JNZ	short FASTINST			    ; and this routine is
 24861                                  NOLOOK:
 24862 00004448 E99700                  	JMP	NOLOOKUP			    ; executed once
 24863                                  
 24864                                  FASTINST:
 24865                                  ;hkn; SS override
 24866                                  	;test	byte [ss:FastOpenFlg],8
 24867 0000444B 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 24868 00004451 75F5                    	JNZ	short NOLOOK			    ; yes
 24869                                  
 24870 00004453 BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 24871                                  
 24872                                  ;hkn; SS override
 24873 00004456 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 24874 0000445B BF[460D]                	MOV	DI,Dir_Info_Buff
 24875 0000445E B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24876 00004461 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 24877 00004463 1E                      	PUSH	DS
 24878 00004464 07                      	POP	ES
 24879                                  
 24880                                  ;hkn; SS override
 24881                                  	;call	far [bx+2]
 24882 00004465 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 24883 00004468 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 24884                                  
 24885 0000446A 8D5CFE                  	LEA	BX,[SI-2]
 24886                                  
 24887                                  ;hkn; SS override
 24888 0000446D 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 24889 00004472 745D                    	JZ	short NOTFOUND			    ; no
 24890                                  
 24891                                  	; 19/05/2019 - Retro DOS v4.0
 24892                                  
 24893                                  	; MSDOS 6.0				    ; fully or partially found
 24894 00004474 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 24895 00004477 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 24896 00004479 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 24897                                  
 24898                                  ;hkn; SS override for attrib/sattrib
 24899 0000447A 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 24900 0000447F 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 24901 00004484 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 24902                                  	;mov	ch,[es:di+0Bh]
 24903 00004489 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 24904 0000448D E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 24905                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 24906 00004490 59                      	POP	CX				    ;AN000;FO.;
 24907 00004491 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 24908                                  parfnd:
 24909                                  
 24910                                  ;hkn; SS override
 24911 00004493 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 24912 00004498 89CB                    	MOV	BX,CX
 24913                                  	; MSDOS 6.0
 24914                                  	;mov	ax,[bx+7]
 24915 0000449A 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 24916                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 24917 0000449D 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 24918 000044A1 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 24919 000044A4 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 24920                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24921                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 24922                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 24923 000044A8 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 24924 000044AB 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 24925                                  
 24926 000044AF 06                      	PUSH	ES				    ; save ES
 24927                                  ;hkn; SS override
 24928 000044B0 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 24929 000044B5 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 24930                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 24931 000044B8 07                      	POP	ES				    ; pop ES
 24932                                  ;SR;
 24933                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 24934                                  ;indicate it is not a root dir
 24935                                  
 24936 000044B9 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 24937 000044C0 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 24938 000044C5 89FB                    	MOV	BX,DI				    ; start of entry
 24939                                  	;lea	si,[di+1Ah]
 24940 000044C7 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 24941                                  						    ; dir_first field in the
 24942                                  						    ; dir entry
 24943                                  ;hkn; SS override for FastOpenFlg
 24944                                  	;or	byte [ss:FastOpenFlg],2
 24945 000044CA 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 24946                                  ;	POP	AX
 24947 000044D0 C3                      	RETN
 24948                                  NOTFOUND:
 24949 000044D1 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 24950 000044D4 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 24951 000044D6 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 24952                                  Partial_Success:
 24953                                  	;and	byte [SS:FastOpenFlg],0FBh
 24954 000044DC 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 24955                                  NOLOOKUP:
 24956                                  ;	POP	AX
 24957 000044E2 F9                      	STC
 24958 000044E3 C3                      	RETN
 24959                                  
 24960                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 24961                                  ;-----------------------------------------------------------------------------
 24962                                  ;
 24963                                  ; Procedure Name : InsertPath
 24964                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 24965                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 24966                                  ;	  DS = DOSDATA
 24967                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 24968                                  ;
 24969                                  ;-----------------------------------------------------------------------------
 24970                                  
 24971                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24972                                  
 24973                                  InsertPath:
 24974 000044E4 9C                      	PUSHF
 24975                                  ;hkn; SS override for FastOpenFlag
 24976                                  	;test	byte [SS:FastOpenFlg], 1
 24977 000044E5 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24978 000044EB 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 24979                                  	;test	byte [ss:FastOpenFlg],2
 24980 000044ED 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 24981 000044F3 740D                    	JZ	short INSERT_DIR_INFO		; no
 24982                                  	;and	byte [ss:FastOpenFlg],0FDh
 24983 000044F5 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 24984 000044FB 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 24985 00004500 EB5E                    	JMP	short GET_NEXT2
 24986                                  INSERT_DIR_INFO:				; save registers
 24987 00004502 1E                      	PUSH	DS
 24988 00004503 06                      	PUSH	ES
 24989 00004504 53                      	PUSH	BX
 24990 00004505 56                      	PUSH	SI
 24991 00004506 57                      	PUSH	DI
 24992 00004507 51                      	PUSH	CX
 24993 00004508 50                      	PUSH	AX
 24994                                  
 24995                                  ;hkn; SS override
 24996 00004509 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 24997 0000450E BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 24998                                  	;mov	ax,[di+6]
 24999 00004511 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25000                                  	; MSDOS 6.0
 25001                                  	;mov	[ss:si+1],ax
 25002 00004514 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25003                                  	; 19/05/2019 - Retro DOS v4.0
 25004 00004518 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25005                                  
 25006                                  ;hkn; SS is DOSDATA
 25007 0000451B 16                      	push	ss
 25008 0000451C 1F                      	pop	ds
 25009                                  	; MSDOS 3.3	
 25010                                  	;;mov	[si+1],ax	
 25011                                  	;MOV	[SI+FEI.dirsec],AX
 25012                                  	; MSDOS 6.0
 25013                                  	;mov	[si+3],ax
 25014 0000451D 894403                  	MOV	[SI+FEI.dirsec+2],AX  ;AN000;>32mb save high dir sector
 25015                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25016 00004520 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25017                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25018                                  	;mov	[si+3],ax ; MSDOS 3.3
 25019 00004523 894405                  	MOV	[SI+FEI.clusnum],AX
 25020                                  	; MSDOS 6.0
 25021 00004526 A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25022                                  	;mov	[si+7],ax
 25023 00004529 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25024 0000452C A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25025                                  	;mov	[si+9],ax
 25026 0000452F 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25027                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25028 00004532 89D8                    	MOV	AX,BX
 25029                                  	;;add	di,16  ; MSDOS 3.3
 25030                                  	;add	di,20  ; MSDOS 6.0
 25031 00004534 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25032 00004537 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25033                                  	;mov	cl,32
 25034 00004539 B120                    	MOV	CL,dir_entry.size
 25035 0000453B F6F1                    	DIV	CL
 25036                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25037 0000453D 8804                    	mov	[si],al
 25038                                  
 25039 0000453F 1E                      	PUSH	DS
 25040 00004540 07                      	POP	ES
 25041                                  
 25042 00004541 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25043 00004545 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25044                                  	;cmp	word [di+1Ah],0
 25045 00004547 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25046                                  					; never insert info when file is empty
 25047 0000454B 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25048                                  
 25049 0000454D 56                      	PUSH	SI			; ES:BX -> extended info
 25050 0000454E 5B                      	POP	BX
 25051                                  
 25052                                  	;mov	al,2
 25053 0000454F B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25054 00004551 BE[300D]                	MOV	SI,FastOpenTable
 25055                                  	;call	far [es:si+2]
 25056                                  	; 07/12/2022
 25057 00004554 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25058                                  
 25059 00004558 F8                      	CLC
 25060                                  SKIP_INSERT:
 25061 00004559 58                      	POP	AX
 25062 0000455A 59                      	POP	CX			; restore registers
 25063 0000455B 5F                      	POP	DI
 25064 0000455C 5E                      	POP	SI
 25065 0000455D 5B                      	POP	BX
 25066 0000455E 07                      	POP	ES
 25067 0000455F 1F                      	POP	DS
 25068                                  GET_NEXT2:
 25069                                  	;or	[ss:FastOpenFlg],8
 25070 00004560 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25071                                  					; we got dir info from fastopen so
 25072                                  GET_NEXT_ELEMENT:
 25073 00004566 9D                      	POPF
 25074 00004567 C3                      	RETN
 25075                                  
 25076                                  ;============================================================================
 25077                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25078                                  ;============================================================================
 25079                                  ; 17/07/2018 - Retro DOS v3.0
 25080                                  ; 30/04/2019 - Retro DOS v4.0
 25081                                  
 25082                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25083                                  
 25084                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25085                                  
 25086                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25087                                  
 25088                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25089                                  ;DEV001s:
 25090                                  ;		length of packets
 25091 00004568 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25092                                  ;LenTab: db	22,14,22,13,15,14
 25093                                  
 25094                                  ;	Error Function
 25095                                  
 25096                                  CmdTab:
 25097 0000456E 8604                    	DB	86h, DEVRD	; 0 input
 25098 00004570 8605                    	DB	86h, DEVRDND	; 1 input status
 25099 00004572 8708                    	DB	87h, DEVWRT	; 2 output
 25100 00004574 870A                    	DB	87h, DEVOST	; 3 output status
 25101 00004576 8607                    	DB	86h, DEVIFL	; 4 input flush
 25102 00004578 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25103                                  
 25104                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25105                                  
 25106                                  ;CmdTab:
 25107                                  ;	db	86h, 4
 25108                                  ;	db	86h, 5
 25109                                  ;	db	87h, 8
 25110                                  ;	db	87h, 10
 25111                                  ;	db	86h, 7
 25112                                  ;	db	86h, 5
 25113                                  
 25114                                  ;DEV001E:
 25115                                  
 25116                                  ; 30/04/2019 - Retro DOS v4.0
 25117                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25118                                  
 25119                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25120                                  ;----------------------------------------------------------------------------
 25121                                  ;
 25122                                  ; Procedure Name : IOFUNC
 25123                                  ;
 25124                                  ; Inputs:
 25125                                  ;	DS:SI Points to SFT
 25126                                  ;	AH is function code
 25127                                  ;		= 0 Input
 25128                                  ;		= 1 Input Status
 25129                                  ;		= 2 Output
 25130                                  ;		= 3 Output Status
 25131                                  ;		= 4 Flush
 25132                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25133                                  ;				   present.
 25134                                  ;	AL = character if output
 25135                                  ; Function:
 25136                                  ;	Perform indicated I/O to device or file
 25137                                  ; Outputs:
 25138                                  ;	AL is character if input
 25139                                  ;	If a status call
 25140                                  ;		zero set if not ready
 25141                                  ;		zero reset if ready (character in AL for input status)
 25142                                  ; For regular files:
 25143                                  ;	Input Status
 25144                                  ;		Gets character but restores position
 25145                                  ;		Zero set on EOF
 25146                                  ;	Input
 25147                                  ;		Gets character advances position
 25148                                  ;		Returns ^Z on EOF
 25149                                  ;	Output Status
 25150                                  ;		Always ready
 25151                                  ; AX altered, all other registers preserved
 25152                                  ;----------------------------------------------------------------------------
 25153                                  
 25154                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25155                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25156                                  
 25157                                  IOFUNC:
 25158 0000457A 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25159                                  					; DEVIOBUF
 25160 0000457F 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25161 00004586 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25162 0000458D 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25163                                  	;test	byte [si+6],80h
 25164                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25165 00004591 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25166 00004595 7403                    	JZ	short IOTO22		;AN000;
 25167 00004597 E9A500                  	JMP	IOTOFILE		;AN000;
 25168                                  IOTO22:
 25169                                  	;test	word [si+5],80h
 25170                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25171 0000459A F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25172 0000459E 7503                    	JNZ	short IOTO33		;AN000;
 25173 000045A0 E99C00                  	JMP	IOTOFILE		;AN000;
 25174                                  IOTO33:
 25175 000045A3 06                      	push	es ; * (MSDOS 6.21)
 25176 000045A4 E804BF                  	call	save_world
 25177 000045A7 8CDA                    	MOV	DX,DS
 25178 000045A9 8CD3                    	MOV	BX,SS
 25179 000045AB 8EDB                    	MOV	DS,BX
 25180 000045AD 8EC3                    	MOV	ES,BX
 25181 000045AF 31DB                    	XOR	BX,BX
 25182 000045B1 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25183 000045B4 7503                    	jnz	short _no_sys_wait
 25184                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25185                                  	; 16/12/2022
 25186 000045B6 80CF04                  	or	bh,04h
 25187                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25188                                  				    ; It is up to device driver to carry out
 25189                                  				    ; appropriate action.
 25190                                  _no_sys_wait:
 25191 000045B9 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25192 000045BD 31DB                    	XOR	BX,BX
 25193 000045BF 881E[8903]              	MOV	[IOMED],BL
 25194                                  
 25195 000045C3 88E3                    	MOV	BL,AH		 	; get function
 25196 000045C5 2E8AA7[6845]            	MOV	AH,[cs:BX+LenTab]
 25197 000045CA D1E3                    	SHL	BX,1
 25198 000045CC 2E8B8F[6E45]            	MOV	CX,[cs:BX+CmdTab]
 25199 000045D1 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25200 000045D4 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25201 000045D8 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25202                                  
 25203 000045DC 8EDA                    	MOV	DS,DX
 25204 000045DE E86D01                  	CALL	DEVIOCALL
 25205 000045E1 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25206 000045E6 21FF                    	and	di,di
 25207 000045E8 7834                    	js	short DevErr
 25208                                  OKDevIO:
 25209 000045EA 8CD0                    	MOV	AX,SS
 25210 000045EC 8ED8                    	MOV	DS,AX
 25211                                  
 25212                                  	;cmp	ch,5
 25213 000045EE 80FD05                  	CMP	CH,DEVRDND
 25214 000045F1 7506                    	JNZ	short DNODRD
 25215 000045F3 A0[8903]                	MOV	AL,[IORCHR]
 25216 000045F6 A2[BC03]                	MOV	[DEVIOBUF],AL
 25217                                  
 25218                                  DNODRD: 
 25219 000045F9 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 25220 000045FD F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 25221                                  	;and	ah,2
 25222 000045FF 80E402                  	AND	AH,STBUI>>8
 25223                                  
 25224                                  QuickReturn:				;AN000; 2/13/KK
 25225 00004602 E88FBE                  	call	restore_world
 25226 00004605 07                      	pop	es ; * (MSDOS 6.21)
 25227                                  
 25228                                  	; SR;
 25229                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 25230                                  	; IoStatFail = -1 (set after return from the I24)
 25231                                  
 25232                                  	; MSDOS 6.0
 25233 00004606 9C                      	pushf
 25234 00004607 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 25235 0000460B 98                      	cbw				;sign extend to word
 25236 0000460C 83F8FF                  	cmp	ax,-1
 25237 0000460F 7507                    	jne	short not_fail_ret
 25238 00004611 36FE06[8300]            	inc	byte [ss:IoStatFail]
 25239 00004616 9D                      	popf
 25240 00004617 C3                      	retn
 25241                                  
 25242                                  not_fail_ret:
 25243 00004618 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 25244 0000461C 9D                      	popf
 25245 0000461D C3                      	retn
 25246                                  
 25247                                  DevErr:
 25248 0000461E 88CC                    	MOV	AH,CL
 25249 00004620 E8BB0D                  	call	CHARHARD
 25250 00004623 3C01                    	CMP	AL,1
 25251 00004625 7507                    	JNZ	short NO_RETRY
 25252 00004627 E86ABE                  	call	restore_world
 25253                                  	; 12/05/2019
 25254 0000462A 07                      	pop	es ; * (MSDOS 6.21)		
 25255 0000462B E94CFF                  	JMP	IOFUNC	; 10/08/2018
 25256                                  
 25257                                  NO_RETRY:
 25258                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 25259                                  	; ready so that DOS doesn't get caught in a status loop when user 
 25260                                  	; simply wants to ignore the error.
 25261                                  	;
 25262                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 25263                                  	; should be checked by the caller on return
 25264                                  
 25265                                  					; SS override
 25266 0000462E 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 25267                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 25268                                  
 25269                                  	; SR;
 25270                                  	; Check if user failed
 25271                                  
 25272                                  	; MSDOS 6.0
 25273 00004634 3C03                    	cmp	al,3
 25274 00004636 7505                    	jnz	short not_fail
 25275 00004638 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 25276                                  not_fail:
 25277 0000463D EBAB                    	JMP	short OKDevIO
 25278                                  
 25279                                  IOTOFILE:
 25280 0000463F 08E4                    	OR	AH,AH
 25281 00004641 7421                    	JZ	short IOIN
 25282 00004643 FECC                    	DEC	AH
 25283 00004645 7405                    	JZ	short IOIST
 25284 00004647 FECC                    	DEC	AH
 25285 00004649 7411                    	JZ	short IOUT
 25286                                  IOUT_retn:	; 18/12/2022
 25287 0000464B C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 25288                                  IOIST:
 25289                                  	;push	word [si+15h]
 25290 0000464C FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 25291                                  	;push	word [si+17h]
 25292 0000464F FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 25293 00004652 E80F00                  	CALL	IOIN
 25294                                  	;pop	word [si+17h]
 25295 00004655 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 25296                                  	;pop	word [si+15h]
 25297 00004658 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 25298 0000465B C3                      	retn
 25299                                  IOUT:
 25300 0000465C E82500                  	CALL	SETXADDR
 25301 0000465F E850EF                  	call	DOS_WRITE
 25302                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 25303                                  	; 18/12/2022
 25304 00004662 EB54                    	jmp	RESTXADDR
 25305                                  ;IOUT_retn:
 25306                                  	;retn			; come crying to me when things don't
 25307                                  				; work ARR
 25308                                  IOIN:
 25309 00004664 E81D00                  	CALL	SETXADDR
 25310                                  					; SS override for DOS34_FLAG
 25311                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 25312                                  	;or	word [ss:DOS34_FLAG],40h
 25313                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25314                                  	; 16/12/2022
 25315 00004667 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 25316 0000466D E819ED                  	CALL	DOS_READ
 25317                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 25318                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 25319                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25320                                  	; 16/12/2022
 25321 00004670 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 25322 00004676 09C9                    	OR	CX,CX			; Check EOF
 25323 00004678 E83D00                  	CALL	RESTXADDR
 25324                                  					; SS override
 25325 0000467B 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 25326 0000467F 75CA                    	jnz	short IOUT_retn	
 25327 00004681 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 25328 00004683 C3                      	retn
 25329                                  
 25330                                  SETXADDR:
 25331                                  					; SS override
 25332 00004684 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 25333                                  
 25334 00004689 06                      	push	es ; * (MSDOS 6.21)
 25335                                  
 25336 0000468A E81EBE                  	call	save_world
 25337                                  					; SS override for DMAADD and THISSFT
 25338 0000468D 36FF36[2C03]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 25339 00004692 36FF36[2E03]            	PUSH	WORD [SS:DMAADD+2]
 25340 00004697 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 25341                                  
 25342 0000469C 16                      	push	ss
 25343 0000469D 1F                      	pop	ds
 25344                                  
 25345 0000469E 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 25346 000046A2 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 25347 000046A6 890E[2E03]              	MOV	[DMAADD+2],CX
 25348 000046AA 8B0E[8A03]              	MOV	CX,[IOXAD]
 25349 000046AE 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 25350 000046B2 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 25351 000046B6 EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 25352                                  
 25353                                  RESTXADDR:
 25354 000046B8 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 25355 000046BC 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 25356 000046C0 8F06[2C03]              	POP	WORD [DMAADD]
 25357                                  
 25358 000046C4 E8CDBD                  	call	restore_world
 25359                                  
 25360 000046C7 07                      	pop	es ; * (MSDOS 6.21)
 25361                                  					; SS override
 25362                                  RESTRET:
 25363 000046C8 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 25364                                  
 25365                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 25366                                  ; 21/11/2022
 25367                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 25368                                  
 25369                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 25370                                  
 25371                                  ;----------------------------------------------------------------------------
 25372                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 25373                                  ;
 25374                                  ;	Dev_Open_SFT issues an open call to the device associated with
 25375                                  ;	the SFT.
 25376                                  ;
 25377                                  ;	ENTRY	(ES:DI) = SFT
 25378                                  ;	EXIT	none
 25379                                  ;	USES	all
 25380                                  ;----------------------------------------------------------------------------
 25381                                  
 25382                                  DEV_OPEN_SFT:
 25383 000046CD 06                      	push	es ; * (MSDOS 6.21)
 25384 000046CE E8DABD                  	call	save_world
 25385                                  	;mov	al,0Dh	
 25386 000046D1 B00D                    	MOV	AL,DEVOPN
 25387 000046D3 EB06                    	JMP	SHORT DO_OPCLS
 25388                                  
 25389                                  ;----------------------------------------------------------------------------
 25390                                  ; Procedure Name : DEV_CLOSE_SFT
 25391                                  ;
 25392                                  ; Inputs:
 25393                                  ;	ES:DI Points to SFT
 25394                                  ; Function:
 25395                                  ;	Issue a CLOSE call to the correct device
 25396                                  ; Outputs:
 25397                                  ;	None
 25398                                  ; ALL preserved
 25399                                  ;----------------------------------------------------------------------------
 25400                                  
 25401                                  DEV_CLOSE_SFT:
 25402 000046D5 06                      	push	es ; * (MSDOS 6.21)
 25403 000046D6 E8D2BD                  	call	save_world
 25404                                  	;mov	al,0Eh	
 25405 000046D9 B00E                    	MOV	AL,DEVCLS
 25406                                  
 25407                                  	; Main entry for device open and close. AL contains the function 
 25408                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 25409                                  	; open/close to block devices. This allows networks to function but 
 25410                                  	; does NOT hang up with bogus change-line code.
 25411                                  
 25412                                  	;entry	DO_OPCLS
 25413                                  DO_OPCLS:
 25414                                  	; Is the SFT for the net? If so, no action necessary.
 25415                                  
 25416                                  	; MSDOS 6.0
 25417                                  	;test	word [es:di+5],8000h
 25418                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 25419 000046DB 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25420 000046E0 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 25421 000046E2 30E4                    	XOR	AH,AH			; Unit
 25422                                  	;test	byte [es:di+5],80h
 25423 000046E4 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 25424                                  	;les	di,[es:di+7]
 25425 000046E9 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 25426 000046ED 7513                    	JNZ	short GOT_DEV_ADDR
 25427                                  
 25428                                  	; We are about to call device open/close on a block driver. If no 
 25429                                  	; sharing then just short circuit to done.
 25430                                  	
 25431                                  	; MSDOS 6.0
 25432                                  					; SS override
 25433 000046EF 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 25434 000046F5 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 25435                                  
 25436                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25437                                  	;mov	ah,[es:di+1]
 25438 000046F7 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 25439 000046FB 268A0D                  	mov	cl,[es:di]
 25440                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 25441                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 25442                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 25443 000046FE 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 25444                                  GOT_DEV_ADDR:				; ES:DI -> device
 25445                                  	;test	word [es:di+4],800h
 25446                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 25447 00004702 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 25448 00004707 7440                    	JZ	short OPCLS_DONE	; Device can't
 25449 00004709 06                      	PUSH	ES
 25450 0000470A 1F                      	POP	DS
 25451 0000470B 89FE                    	MOV	SI,DI			; DS:SI -> device
 25452                                  
 25453                                  OPCLS_RETRY:
 25454                                  	;Context ES
 25455 0000470D 16                      	push	ss
 25456 0000470E 07                      	pop	es
 25457                                  					; DEVCALL is in DOSDATA
 25458 0000470F BF[5A03]                	MOV	DI,DEVCALL
 25459                                  
 25460 00004712 89FB                    	MOV	BX,DI
 25461 00004714 50                      	PUSH	AX
 25462                                  	;mov	al,13
 25463 00004715 B00D                    	MOV	AL,DOPCLHL
 25464 00004717 AA                      	STOSB				; Length
 25465 00004718 58                      	POP	AX
 25466 00004719 86E0                    	XCHG	AH,AL
 25467 0000471B AA                      	STOSB				; Unit
 25468 0000471C 86E0                    	XCHG	AH,AL
 25469 0000471E AA                      	STOSB				; Command
 25470 0000471F 26C7050000              	MOV	WORD [ES:DI],0		; Status
 25471 00004724 50                      	PUSH	AX			; Save Unit,Command
 25472                                  	;invoke	DEVIOCALL2
 25473 00004725 E82900                  	call	DEVIOCALL2
 25474                                  
 25475                                  	;mov	di,[es:bx+3]
 25476 00004728 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 25477                                  	;test	di,8000h
 25478                                  	;jz	short OPCLS_DONEP	
 25479 0000472C 21FF                    	and	di,di
 25480 0000472E 7918                    	jns	short OPCLS_DONEP	; No error
 25481                                  	; 21/11/2022
 25482                                  	;test	word [si+4],8000h
 25483                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25484                                  	;test	word [si+5],80h
 25485 00004730 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25486 00004734 7404                    	JZ	short BLKDEV
 25487 00004736 B486                    	MOV	AH,86H			; Read error in data, Char dev
 25488 00004738 EB04                    	JMP	SHORT HRDERR
 25489                                  BLKDEV:
 25490 0000473A 88C8                    	MOV	AL,CL			; Drive # in AL
 25491 0000473C B406                    	MOV	AH,6			; Read error in data, Blk dev
 25492                                  HRDERR:
 25493                                  	;invoke	CHARHARD
 25494 0000473E E89D0C                  	call	CHARHARD
 25495 00004741 3C01                    	cmp	al,1
 25496 00004743 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 25497                                  					;  Note that FAIL is essentually IGNORED
 25498 00004745 58                      	POP	AX			; Get back Unit, Command
 25499 00004746 EBC5                    	JMP	short OPCLS_RETRY
 25500                                  OPCLS_DONEP:
 25501 00004748 58                      	POP	AX			; Clean stack
 25502                                  OPCLS_DONE:
 25503 00004749 E848BD                  	call	restore_world
 25504 0000474C 07                      	pop	es ; * (MSDOS 6.21)
 25505 0000474D C3                      	retn
 25506                                  
 25507                                  ; 30/04/2019 - Retro DOS v4.0
 25508                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 25509                                  
 25510                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25511                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 25512                                  
 25513                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 25514                                  ;----------------------------------------------------------------------------
 25515                                  ;**	DevIoCall  - Call Device
 25516                                  ;
 25517                                  ;	ENTRY	DS:SI Points to device SFT
 25518                                  ;		ES:BX Points to request data
 25519                                  ;	EXIT	DS:SI -> Device driver
 25520                                  ;	USES	DS:SI,AX
 25521                                  ;----------------------------------------------------------------------------
 25522                                  ;**	DevIoCall2 - Call Device
 25523                                  ;
 25524                                  ;	ENTRY	DS:SI Points to DPB
 25525                                  ;		ES:BX Points to request data
 25526                                  ;	EXIT	DS:SI -> Device driver
 25527                                  ;	USES	DS:SI,AX
 25528                                  ;----------------------------------------------------------------------------
 25529                                  
 25530                                  DEVIOCALL:
 25531                                  					; SS override for CALLSSEC, 
 25532                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 25533 0000474E C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 25534                                  
 25535                                  	;entry	DEVIOCALL2
 25536                                  DEVIOCALL2:
 25537                                  	;EnterCrit critDevice
 25538 00004751 E869CC                  	call	ECritDevice
 25539                                  
 25540                                  	; MSDOS 6.0
 25541                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 25542                                  	;test	byte [si+5],80h
 25543 00004754 F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 25544 00004758 7548                    	jnz	short chardev2		;AN000; >32mb no
 25545                                  
 25546                                  	; 16/12/2022
 25547                                  	; 22/11/2022
 25548 0000475A 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 25549 0000475E 3C04                    	cmp	al,DEVRD	; 4
 25550 00004760 7408                    	je	short chkext	
 25551 00004762 3C08                    	cmp	al,DEVWRT	; 8
 25552 00004764 7404                    	je	short chkext
 25553 00004766 3C09                    	cmp	al,DEVWRTV	; 9
 25554 00004768 7538                    	jne	short chardev2
 25555                                  
 25556                                  	; 16/12/2022
 25557                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25558                                  	;;cmp	byte [es:bx+2],4
 25559                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 25560                                  	;JZ	short chkext		;AN000; >32mb   yes
 25561                                  	;;cmp	byte [es:bx+2],8
 25562                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 25563                                  	;JZ	short chkext		;AN000; >32mb   yes
 25564                                  	;;cmp	byte [es:bx+2],9
 25565                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 25566                                  	;				;AN000; >32mb write/verify ?
 25567                                  	;JNZ	short chardev2		;AN000; >32mb no
 25568                                  chkext:
 25569 0000476A E89900                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 25570 0000476D 7255                    	JC	short dev_exit		;AN000;LB. done
 25571                                  
 25572                                  	;test	byte [si+4],2
 25573 0000476F F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 25574 00004773 741D                    	JZ	short chksector		;AN000;>32mb   no
 25575 00004775 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 25576 00004779 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 25577 0000477D 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 25578 00004784 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 25579 00004788 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 25580 0000478C 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 25581 00004790 EB10                    	JMP	short chardev2		;AN000; >32mb
 25582                                  chksector:				;AN000; >32mb
 25583 00004792 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 25584 00004798 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 25585                                  	;mov	word [es:bx+3],8107h
 25586 0000479A 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 25587                                  					;AN000; >32mb
 25588 000047A0 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 25589                                  
 25590                                  chardev2:				;AN000;
 25591                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 25592                                  	; preserved
 25593                                  
 25594                                  	;mov	ax,[si+6]
 25595 000047A2 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 25596 000047A5 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25597 000047A9 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 25598 000047AE 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25599                                  
 25600                                  	;mov	ax,[si+8]
 25601 000047B3 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 25602 000047B6 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25603 000047BA 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25604                                  
 25605                                  	; MSDOS 6.0
 25606 000047BF E84001                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 25607 000047C2 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 25608                                  
 25609                                  dev_exit:
 25610                                  	;LeaveCrit critDevice
 25611                                  	;call	LCritDevice
 25612                                  	;retn
 25613                                  	; 18/12/2022
 25614 000047C4 E911CC                  	jmp	LCritDevice
 25615                                  
 25616                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 25617                                  ; 22/11/2022
 25618                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 25619                                  
 25620                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 25621                                  ;---------------------------------------------------------------------------
 25622                                  ;
 25623                                  ; Procedure Name : SETREAD, SETWRITE
 25624                                  ;
 25625                                  ; Inputs:
 25626                                  ;	DS:BX = Transfer Address
 25627                                  ;	CX = Record Count
 25628                                  ;	DX = Starting Record
 25629                                  ;	AH = Media Byte
 25630                                  ;	AL = Unit Code
 25631                                  ; Function:
 25632                                  ;	Set up the device call header at DEVCALL
 25633                                  ; Output:
 25634                                  ;	ES:BX Points to DEVCALL
 25635                                  ; No other registers effected
 25636                                  ;
 25637                                  ;---------------------------------------------------------------------------
 25638                                  
 25639                                  SETREAD:
 25640 000047C7 57                      	PUSH	DI
 25641 000047C8 51                      	PUSH	CX
 25642 000047C9 50                      	PUSH	AX
 25643 000047CA B104                    	MOV	CL,DEVRD ; mov cl,4
 25644                                  SETCALLHEAD:
 25645 000047CC B016                    	MOV	AL,DRDWRHL ; mov al,16h
 25646 000047CE 16                      	PUSH	SS
 25647 000047CF 07                      	POP	ES
 25648                                  					; DEVCALL is in DOSDATA
 25649 000047D0 BF[5A03]                	MOV	DI,DEVCALL
 25650                                  
 25651 000047D3 AA                      	STOSB				; length
 25652 000047D4 58                      	POP	AX			; 
 25653 000047D5 AA                      	STOSB				; Unit
 25654 000047D6 50                      	PUSH	AX
 25655 000047D7 88C8                    	MOV	AL,CL
 25656 000047D9 AA                      	STOSB				; Command code
 25657 000047DA 31C0                    	XOR	AX,AX
 25658 000047DC AB                      	STOSW				; Status
 25659 000047DD 83C708                  	ADD	DI,8			; Skip link fields
 25660 000047E0 58                      	POP	AX
 25661 000047E1 86E0                    	XCHG	AH,AL
 25662 000047E3 AA                      	STOSB				; Media byte
 25663 000047E4 86C4                    	XCHG	AL,AH
 25664 000047E6 50                      	PUSH	AX
 25665 000047E7 89D8                    	MOV	AX,BX
 25666 000047E9 AB                      	STOSW
 25667                                  
 25668 000047EA 8CD8                    	MOV	AX,DS
 25669 000047EC AB                      	STOSW				; Transfer addr
 25670                                  
 25671 000047ED 59                      	POP	CX			; Real AX
 25672 000047EE 58                      	POP	AX			; Real CX
 25673 000047EF AB                      	STOSW				; Count
 25674                                  
 25675 000047F0 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 25676 000047F1 AB                      	STOSW				; Start
 25677 000047F2 91                      	XCHG	AX,CX
 25678 000047F3 87D1                    	XCHG	DX,CX
 25679 000047F5 5F                      	POP	DI
 25680                                  					; DEVCALL is in DOSDATA
 25681 000047F6 BB[5A03]                	MOV	BX,DEVCALL
 25682 000047F9 C3                      	retn
 25683                                  
 25684                                  	;entry	SETWRITE
 25685                                  SETWRITE:
 25686                                  
 25687                                  ; Inputs:
 25688                                  ;	DS:BX = Transfer Address
 25689                                  ;	CX = Record Count
 25690                                  ;	DX = Starting Record
 25691                                  ;	AH = Media Byte
 25692                                  ;	AL = Unit Code
 25693                                  ; Function:
 25694                                  ;	Set up the device call header at DEVCALL
 25695                                  ; Output:
 25696                                  ;	ES:BX Points to DEVCALL
 25697                                  ; No other registers effected
 25698                                  
 25699 000047FA 57                      	PUSH	DI
 25700 000047FB 51                      	PUSH	CX
 25701 000047FC 50                      	PUSH	AX
 25702 000047FD B108                    	MOV	CL,DEVWRT ; mov cl,8
 25703 000047FF 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 25704 00004804 EBC6                    	JMP	SHORT SETCALLHEAD
 25705                                  
 25706                                  ; 30/04/2019 - Retro DOS v4.0
 25707                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 25708                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25709                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 25710                                  
 25711                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 25712                                  ;---------------------------------------------------------------------------
 25713                                  ;
 25714                                  ; Procedure Name : RW_SC
 25715                                  ;
 25716                                  ; Inputs:
 25717                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 25718                                  ;	 [SC_STATUS]= SC validity status
 25719                                  ;	 [SEQ_SECTOR]= last sector read
 25720                                  ; Function:
 25721                                  ;	Read from or write through secondary cache
 25722                                  ; Output:
 25723                                  ;	ES:BX Points to DEVCALL
 25724                                  ;	carry clear, I/O is not done
 25725                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 25726                                  ;	carry set, I/O is done
 25727                                  ;
 25728                                  ;----------------------------------------------------------------------------
 25729                                  
 25730                                  RW_SC:
 25731                                  	; SS override for all variables used.
 25732                                  	
 25733 00004806 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 25734 0000480C 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 25735 0000480E 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 25736 00004814 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 25737 00004816 51                      	PUSH	CX			    ;AN000;LB.
 25738 00004817 52                      	PUSH	DX			    ;AN000;LB. yes
 25739 00004818 1E                      	PUSH	DS			    ;AN000;LB. save registers
 25740 00004819 56                      	PUSH	SI			    ;AN000;LB.
 25741 0000481A 06                      	PUSH	ES			    ;AN000;LB.
 25742 0000481B 57                      	PUSH	DI			    ;AN000;LB.
 25743                                  
 25744 0000481C 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 25745 00004821 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 25746 00004827 7408                    	JZ	short doread		    ;AN000;LB. yes
 25747 00004829 E8C400                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 25748 0000482C E98E00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 25749                                  scexit4:				    ;AN000;
 25750 0000482F F8                      	CLC				    ;AN000;LB. I/O not done yet
 25751 00004830 C3                      	retn				    ;AN000;LB.
 25752                                  doread: 				    ;AN000;
 25753 00004831 E82601                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 25754 00004834 720A                    	JC	short readSC		    ;AN000;LB.
 25755 00004836 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 25756 0000483D F9                      	STC				    ;AN000;LB. set carry
 25757 0000483E EB6B                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 25758                                  readSC: 				    ;AN000;
 25759 00004840 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 25760 00004844 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 25761 00004849 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 25762 0000484E 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 25763 00004853 83F800                  	CMP	AX,0			    ;AN000;LB. greater than 64K
 25764 00004856 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 25765                                  chklow: 						
 25766 00004858 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 25767 0000485B 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 25768 0000485D 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 25769 00004864 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 25770 00004868 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 25771                                  readsr:
 25772 0000486C 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 25773 00004870 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 25774 00004874 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 25775 00004878 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 25776                                  
 25777 0000487C 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 25778 00004880 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 25779 00004884 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25780 00004888 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 25781 0000488C 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 25782 00004892 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 25783 00004896 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 25784 0000489A 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 25785 0000489E 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 25786 000048A2 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 25787 000048A6 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 25788                                  saveseq2:				    ;AN000;
 25789 000048AA F8                      	CLC				    ;AN000;LB. clear carry
 25790                                  saveseq:				    ;AN000;	
 25791 000048AB 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 25792 000048AF 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 25793 000048B3 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 25794 000048B7 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 25795 000048BB EB01                    	JMP	short scexit 		    ;AN000;LB.	
 25796                                  scexit2:				    ;AN000;LB.
 25797 000048BD F8                      	CLC				    ;AN000;LB.	clear carry
 25798                                  scexit: 				    ;AN000;		
 25799 000048BE 5F                      	POP	DI			    ;AN000;LB.
 25800 000048BF 07                      	POP	ES			    ;AN000;LB. restore registers
 25801 000048C0 5E                      	POP	SI			    ;AN000;LB.
 25802 000048C1 1F                      	POP	DS			    ;AN000;LB.
 25803 000048C2 5A                      	POP	DX			    ;AN000;LB.
 25804 000048C3 59                      	POP	CX			    ;AN000;LB.
 25805 000048C4 C3                      	retn				    ;AN000;LB.
 25806                                  
 25807                                  ;Break	<IN_SC -- check if in secondary cache>
 25808                                  ;--------------------------------------------------------------------------
 25809                                  ;
 25810                                  ; Procedure Name : IN_SC
 25811                                  ;
 25812                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25813                                  ;	   [CURSC_DRIVE]= current SC drive
 25814                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25815                                  ;	   [SC_CACHE_COUNT]= SC count
 25816                                  ;	   [HIGH_SECTOR]:DX= sector number
 25817                                  ; Function:
 25818                                  ;	Check if the sector is in secondary cache
 25819                                  ; Output:
 25820                                  ;	carry clear, in SC
 25821                                  ;	   CX= the index in the secondary cache
 25822                                  ;	carry set, not in SC
 25823                                  ;
 25824                                  ;---------------------------------------------------------------------------
 25825                                  
 25826                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25827                                  IN_SC:
 25828                                  	; SS override for all variables used
 25829 000048C5 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 25830 000048C9 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 25831 000048CE 751E                    	JNZ	short outrange2		    ;AN000;;LB. no
 25832 000048D0 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 25833 000048D4 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 25834 000048D6 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 25835 000048DB 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 25836 000048E0 83F800                  	CMP	AX,0			    ;AN000;;LB. greater than 64K
 25837 000048E3 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 25838 000048E5 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 25839 000048EA 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 25840 000048EC F8                      	CLC				    ;AN000;;LB. clear carry
 25841                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 25842                                  	; 16/12/2022
 25843 000048ED C3                      	retn	; 30/04/2019
 25844                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25845                                  	;jmp	short inexit
 25846                                  
 25847                                  outrange2:				    ;AN000;;LB. set carry
 25848 000048EE F9                      	STC				    ;AN000;;LB.
 25849                                  inexit: 				    ;AN000;;LB.
 25850 000048EF C3                      	retn				    ;AN000;;LB.
 25851                                  
 25852                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 25853                                  ;---------------------------------------------------------------------------
 25854                                  ;
 25855                                  ; Procedure Name : Invalidate_Sc
 25856                                  ;
 25857                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25858                                  ;	   [CURSC_DRIVE]= current SC drive
 25859                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25860                                  ;	   [SC_CACHE_COUNT]= SC count
 25861                                  ;	   [SC_STATUS]= SC status word
 25862                                  ;	   [HIGH_SECTOR]:DX= sector number
 25863                                  ;
 25864                                  ; Function:
 25865                                  ;	invalidate secondary cache if in there
 25866                                  ; Output:
 25867                                  ;	[SC_STATUS] is updated
 25868                                  ;---------------------------------------------------------------------------
 25869                                  
 25870                                  INVALIDATE_SC:
 25871                                  	; SS override for all variables used
 25872                                  
 25873 000048F0 E8D2FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 25874 000048F3 720C                    	JC	short outrange		    ;AN000;;LB. no
 25875 000048F5 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 25876 000048F8 D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 25877 000048FA F7D0                    	NOT	AX			    ;AN000;;LB.
 25878 000048FC 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 25879                                  outrange:				    ;AN000;;LB.
 25880 00004901 C3                      	retn				    ;AN000;;LB.
 25881                                  
 25882                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 25883                                  ; 22/11/2022
 25884                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 25885                                  
 25886                                  ;Break	<VIRREAD- virtually read data into buffer>
 25887                                  ;--------------------------------------------------------------------------
 25888                                  ;
 25889                                  ; Procedure Name : SC_FLAG
 25890                                  ;
 25891                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 25892                                  ;		     1, continuous sectors were read into SC
 25893                                  ; Function:
 25894                                  ;	   Move data from SC to buffer
 25895                                  ; Output:
 25896                                  ;	 carry clear, data is moved to buffer
 25897                                  ;	 carry set, bad sector or exceeds maximum sector
 25898                                  ;	   SC_FLAG =0
 25899                                  ;	   CALLSCNT=1
 25900                                  ;	   SC_STATUS= -1 if succeeded
 25901                                  ;     
 25902                                  ;		       0 if failed
 25903                                  ;--------------------------------------------------------------------------
 25904                                  
 25905                                  VIRREAD:
 25906                                  	; SS override for all variables used
 25907                                  
 25908 00004902 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 25909 00004908 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 25910 0000490A 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 25911 0000490E 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 25912 00004912 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 25913 00004916 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 25914 0000491A 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 25915 00004920 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 25916                                  
 25917                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 25918 00004927 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 25919 0000492D 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 25920 0000492F 1E                      	PUSH	DS			    ;AN000;;LB.
 25921 00004930 56                      	PUSH	SI			    ;AN000;;LB.
 25922 00004931 06                      	PUSH	ES			    ;AN000;;LB.
 25923 00004932 57                      	PUSH	DI			    ;AN000;;LB.
 25924 00004933 52                      	PUSH	DX			    ;AN000;;LB.
 25925 00004934 51                      	PUSH	CX			    ;AN000;;LB.
 25926 00004935 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 25927 00004937 E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC t
 25928 0000493A 59                      	POP	CX
 25929 0000493B 5A                      	POP	DX			    ;AN000;;LB.
 25930 0000493C 5F                      	POP	DI			    ;AN000;;LB.
 25931 0000493D 07                      	POP	ES			    ;AN000;;LB.
 25932 0000493E 5E                      	POP	SI			    ;AN000;;LB.
 25933 0000493F 1F                      	POP	DS			    ;AN000;;LB.
 25934 00004940 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 25935                                  scerror:				    ;AN000;
 25936 00004942 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 25937 00004949 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 25938 00004950 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 25939 00004956 F9                      	STC				    ;AN000;;LB. carry set
 25940 00004957 C3                      	retn				    ;AN000;;LB.
 25941                                  sc2end: 				    ;AN000;
 25942 00004958 F8                      	CLC				    ;AN000;;LB. carry clear
 25943 00004959 C3                      	retn				    ;AN000;;LB.
 25944                                  
 25945                                  ; 30/04/2019 - Retro  DOS v4.0
 25946                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 25947                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25948                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 25949                                  
 25950                                  ;Break	<SC2BUF- move data from SC to buffer>
 25951                                  ;----------------------------------------------------------------------------
 25952                                  ;
 25953                                  ; Procedure Name : SC2BUF
 25954                                  ;
 25955                                  ; Inputs:  [SC_STATUS] = SC validity status
 25956                                  ;	   [SC_SECTOR_SIZE] = request sector size
 25957                                  ;	   [SC_CACHE_PTR] = pointer to SC
 25958                                  ; Function:
 25959                                  ;	   Move data from SC to buffer
 25960                                  ; Output:
 25961                                  ;	   carry clear, in SC  and data is moved
 25962                                  ;	   carry set, not in SC and data is not moved
 25963                                  ;---------------------------------------------------------------------------
 25964                                  
 25965                                  SC2BUF:
 25966                                  	; SS override for all variables used
 25967 0000495A E868FF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 25968 0000495D 7241                    	JC	short noSC		    ;AN000;LB. no
 25969 0000495F B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 25970 00004962 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 25971 00004964 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 25972 00004969 7435                    	JZ	short noSC		    ;AN000;LB. invalid
 25973                                  ;entry SC2BUF2
 25974                                  SC2BUF2:				    ;AN000;
 25975 0000496B 89C8                    	MOV	AX,CX			    ;AN000;LB. times index with
 25976 0000496D 36F726[AD0D]            	MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 25977 00004972 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 25978 00004977 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25979 0000497C 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 25980 0000497E 89C6                    	MOV	SI,AX			    ;AN000;LB.
 25981 00004980 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 25982 00004985 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 25983 0000498A 368B0E[AD0D]            	MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 25984 0000498F D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 25985                                  ;entry MOVWORDS
 25986                                  MOVWORDS:				    ;AN000;
 25987 00004991 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 25988 00004997 7403                    	JZ	short nodd		    ;AN000;LB. no
 25989 00004999 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 25990 0000499B 66                      	DB	66H			    ;AN000;LB. use double word move
 25991                                  nodd:
 25992 0000499C F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 25993 0000499E F8                      	CLC				    ;AN000;LB. clear carry
 25994 0000499F C3                      	retn				    ;AN000;LB. exit
 25995                                  noSC:					    ;AN000;
 25996 000049A0 F9                      	STC				    ;AN000;LB. set carry
 25997                                  sexit:					    ;AN000;
 25998 000049A1 C3                      	retn				    ;AN000;LB.
 25999                                  
 26000                                  ;============================================================================
 26001                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 26002                                  ;============================================================================
 26003                                  ; 29/07/2018 - Retro DOS v3.0
 26004                                  ; 19/05/2019 - Retro DOS v4.0
 26005                                  
 26006                                  ;	TITLE	MKNODE - Node maker
 26007                                  ;	NAME	MKNODE
 26008                                  
 26009                                  ;**	MKNODE.ASM
 26010                                  ;----------------------------------------------------------------------------
 26011                                  ;	Low level routines for making a new local file system node
 26012                                  ;	and filling in an SFT from a directory entry
 26013                                  ;
 26014                                  ;	BUILDDIR
 26015                                  ;	SETDOTENT
 26016                                  ;	MakeNode
 26017                                  ;	NEWENTRY
 26018                                  ;	FREEENT
 26019                                  ;	NEWDIR
 26020                                  ;	DOOPEN
 26021                                  ;	RENAME_MAKE
 26022                                  ;	CHECK_VIRT_OPEN
 26023                                  ;
 26024                                  ;	Revision history:
 26025                                  ;
 26026                                  ;	 AN000	version 4.0  Jan. 1988
 26027                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26028                                  
 26029                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26030                                  ;----------------------------------------------------------------------------
 26031                                  ;
 26032                                  ; Procedure Name : BUILDDIR,NEWDIR
 26033                                  ;
 26034                                  ; Inputs:
 26035                                  ;       ES:BP Points to DPB
 26036                                  ;       [THISSFT] Set if using NEWDIR entry point
 26037                                  ;               (used by ALLOCATE)
 26038                                  ;       [LASTENT] current last valid entry number in directory if no free
 26039                                  ;               entries
 26040                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26041                                  ; Function:
 26042                                  ;       Grow directory if no free entries and not root
 26043                                  ; Outputs:
 26044                                  ;       CARRY SET IF FAILURE
 26045                                  ;       ELSE
 26046                                  ;          AX entry number of new entry
 26047                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26048                                  ;               AX = first entry of new dir
 26049                                  ;       GETENT should be called to set [LASTENT]
 26050                                  ;
 26051                                  ;----------------------------------------------------------------------------
 26052                                  
 26053                                  ; 19/05/2019 - Retro DOS v4.0
 26054                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26055                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26056                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26057                                  
 26058                                  BUILDDIR:
 26059                                  	; 29/07/2018 - Retro DOS v3.0
 26060                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26061                                  
 26062 000049A2 A1[D805]                        MOV     AX,[ENTFREE]
 26063 000049A5 83F8FF                          CMP     AX,-1
 26064 000049A8 7402                            JZ	short CHECK_IF_ROOT
 26065 000049AA F8                              CLC
 26066 000049AB C3                              retn
 26067                                  
 26068                                  CHECK_IF_ROOT:
 26069 000049AC 833E[C205]00                    CMP     word [DIRSTART],0
 26070 000049B1 7502                            JNZ	short NEWDIR
 26071 000049B3 F9                              STC
 26072                                  builddir_retn:
 26073 000049B4 C3                              retn				; Can't grow root
 26074                                  
 26075                                  	;entry   NEWDIR
 26076                                  NEWDIR:        
 26077 000049B5 8B1E[C205]              	MOV     BX,[DIRSTART]
 26078 000049B9 09DB                            OR      BX,BX
 26079 000049BB 7405                            JZ	short NULLDIR
 26080 000049BD E84006                  	call	GETEOF
 26081 000049C0 72F2                            jc	short builddir_retn	; Screw up
 26082                                  NULLDIR:
 26083 000049C2 B90100                          MOV     CX,1
 26084 000049C5 E85105                  	call	ALLOCATE
 26085 000049C8 72EA                            jc	short  builddir_retn
 26086 000049CA 8B16[C205]                      MOV     DX,[DIRSTART]
 26087 000049CE 09D2                            OR      DX,DX
 26088 000049D0 750D                            JNZ	short ADDINGDIR
 26089 000049D2 E8BAF5                  	call	SETDIRSRCH
 26090 000049D5 72DD                            jc	short  builddir_retn
 26091 000049D7 C706[4803]FFFF                  MOV     word [LASTENT],-1
 26092 000049DD EB2B                            JMP     SHORT GOTDIRREC
 26093                                  ADDINGDIR:
 26094 000049DF 53                              PUSH    BX
 26095 000049E0 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26096 000049E4 E84B0C                          call	IsEOF
 26097 000049E7 5B                              POP     BX
 26098 000049E8 7219                            JB	short NOTFIRSTGROW
 26099                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26100 000049EA 891E[BC05]                      MOV     [CLUSNUM],BX
 26101 000049EE 51                              PUSH    CX
 26102 000049EF 50                              PUSH    AX
 26103 000049F0 55                              PUSH    BP
 26104 000049F1 B401                            MOV     AH,1			; CLUSNUM update
 26105                                  	; 15/12/2022
 26106 000049F3 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26107                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26108                                  	;;mov	dl,[es:bp+0]
 26109                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26110 000049F7 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26111 000049FB 89DD                            MOV     BP,BX 			; CLUSNUM
 26112 000049FD E887DD                  	call	FastOpen_Update
 26113 00004A00 5D                              POP     BP
 26114 00004A01 58                              POP     AX
 26115 00004A02 59                              POP     CX
 26116                                  
 26117                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26118                                  NOTFIRSTGROW:
 26119 00004A03 89DA                            MOV     DX,BX
 26120 00004A05 30DB                            XOR     BL,BL
 26121 00004A07 E8E304                  	call	FIGREC
 26122                                  GOTDIRREC:
 26123                                  	;mov	cl,[es:bp+4]
 26124 00004A0A 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26125 00004A0E FEC1                            INC     CL
 26126 00004A10 30ED                            XOR     CH,CH
 26127                                  ZERODIR:
 26128 00004A12 51                              PUSH    CX
 26129                                  	;mov	byte [ALLOWED],18h
 26130 00004A13 C606[4B03]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 26131 00004A18 B0FF                            MOV     AL,0FFH
 26132 00004A1A E84E10                          call	GETBUFFR
 26133 00004A1D 7302                            JNC	short GET_SSIZE
 26134 00004A1F 59                              POP     CX
 26135 00004A20 C3                              retn
 26136                                  
 26137                                  GET_SSIZE:
 26138                                  	;mov	cx,[es:bp+2]
 26139 00004A21 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26140 00004A25 06                              PUSH    ES
 26141 00004A26 C43E[E205]                      LES     DI,[CURBUF]
 26142                                  	;or	byte [es:di+5],4
 26143 00004A2A 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26144 00004A2F 57                              PUSH    DI
 26145                                  	;;add	di,16	; MSDOS 3.3
 26146                                  	;add	di,20	; MSDOS 6.0	
 26147 00004A30 83C714                          ADD     DI,BUFINSIZ
 26148 00004A33 31C0                            XOR     AX,AX
 26149 00004A35 D1E9                            SHR     CX,1
 26150 00004A37 F3AB                            REP     STOSW
 26151 00004A39 7301                            JNC	short EVENZ
 26152 00004A3B AA                              STOSB
 26153                                  EVENZ:
 26154 00004A3C 5F                              POP     DI
 26155                                  
 26156                                  	; MSDOS 6.0
 26157 00004A3D 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26158                                  					;LB. if already dirty		  ;AN000;
 26159 00004A42 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26160 00004A44 E82A12                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26161                                          
 26162                                  	;or	byte [es:di+5],40h
 26163 00004A47 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26164                                  yesdirty7:
 26165 00004A4C 07                              POP	ES
 26166 00004A4D 59                              POP	CX
 26167                                  
 26168                                  	; 19/05/2019 - Retro DOS v4.0
 26169                                  
 26170                                  	; MSDOS 3.3
 26171                                  	;INC	DX
 26172                                  
 26173                                  	; MSDOS 6.0
 26174 00004A4E 83C201                  	add	dx,1
 26175 00004A51 8316[0706]00            	adc	word [HIGH_SECTOR],0
 26176                                  
 26177 00004A56 E2BA                            LOOP    ZERODIR
 26178                                  
 26179 00004A58 A1[4803]                        MOV     AX,[LASTENT]
 26180 00004A5B 40                              INC     AX
 26181 00004A5C F8                              CLC
 26182 00004A5D C3                              retn
 26183                                  
 26184                                  ;--------------------------------------------------------------------------
 26185                                  ;
 26186                                  ; Procedure Name : SETDOTENT
 26187                                  ;
 26188                                  ; set up a . or .. directory entry for a directory.
 26189                                  ;
 26190                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 26191                                  ;               AX contains ". " or ".."
 26192                                  ;               DX contains first cluster of entry
 26193                                  ;
 26194                                  ;----------------------------------------------------------------------------
 26195                                  
 26196                                  SETDOTENT:
 26197                                  ;	Fill in name field
 26198 00004A5E AB                              STOSW
 26199 00004A5F B90400                          MOV     CX,4
 26200 00004A62 B82020                          MOV     AX,"  " ; 2020h
 26201 00004A65 F3AB                            REP     STOSW
 26202 00004A67 AA                              STOSB
 26203                                  
 26204                                  ;	Set up attribute
 26205                                  	;mov	al, 10h
 26206 00004A68 B010                            MOV     AL,attr_directory
 26207 00004A6A AA                              STOSB
 26208                                  
 26209                                  ;	Initialize time and date of creation
 26210 00004A6B 83C70A                          ADD     DI,10
 26211 00004A6E 8B36[9E05]                      MOV     SI,[THISSFT]
 26212                                  	;mov	ax,[si+0Dh]
 26213 00004A72 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 26214 00004A75 AB                              STOSW
 26215                                  	;mov	ax,[si+0Fh]
 26216 00004A76 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 26217 00004A79 AB                      	STOSW
 26218                                  
 26219                                  ;	Set up first cluster field
 26220 00004A7A 89D0                            MOV     AX,DX
 26221 00004A7C AB                              STOSW
 26222                                  
 26223                                  ;	0 file size
 26224 00004A7D 31C0                            XOR     AX,AX
 26225 00004A7F AB                              STOSW
 26226 00004A80 AB                              STOSW
 26227 00004A81 C3                              retn
 26228                                  
 26229                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 26230                                  ;---------------------------------------------------------------------------
 26231                                  ;
 26232                                  ; Procedure Name : MakeNode
 26233                                  ;
 26234                                  ; Inputs:
 26235                                  ;       AL - attribute to create
 26236                                  ;       AH = 0 if it is ok to truncate a file already by this name
 26237                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 26238                                  ;               (AH ignored on dirs and devices)
 26239                                  ;
 26240                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 26241                                  ;               a name already existant is ALWAYS an error in these cases.
 26242                                  ;
 26243                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 26244                                  ;               terminated)
 26245                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 26246                                  ;               ( = -1 if current dir not involved, else
 26247                                  ;                Points to first char after last "/" of current dir part)
 26248                                  ;       [THISCDS] Points to CDS being used
 26249                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 26250                                  ; Function:
 26251                                  ;       Make a new node
 26252                                  ; Outputs:
 26253                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 26254                                  ;       CARRY SET IF ERROR
 26255                                  ;          AX = 1 A node by this name exists and is a directory
 26256                                  ;          AX = 2 A new node could not be created
 26257                                  ;          AX = 3 A node by this name exists and is a disk file
 26258                                  ;               (AH was NZ on input)
 26259                                  ;          AX = 4 Bad Path
 26260                                  ;               SI return from GetPath maintained
 26261                                  ;          AX = 5 Attribute mismatch
 26262                                  ;          AX = 6 Sharing Violation
 26263                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 26264                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 26265                                  ;       ELSE
 26266                                  ;          AX = 0 Disk Node
 26267                                  ;          AX = 3 Device Node (error in some cases)
 26268                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 26269                                  ;               containing new node.
 26270                                  ;          [CURBUF+2]:BX Points to entry
 26271                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 26272                                  ;          [THISSFT] is filled in
 26273                                  ;               sf_mode = unchanged.
 26274                                  ;          Attribute byte in entry is input AL
 26275                                  ; DS preserved, others destroyed
 26276                                  ;
 26277                                  ;-------------------------------------------------------------------------
 26278                                  
 26279                                  ; 19/05/2019 - Retro DOS v4.0
 26280                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 26281                                  
 26282                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26283                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 26284                                  
 26285                                  MakeNode:
 26286                                  	;mov	word [CREATING],0E5FFh
 26287 00004A82 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 26288 00004A88 50                              PUSH    AX              ; Save AH value
 26289 00004A89 C606[4C03]00            	MOV	byte [NoSetDir],0
 26290 00004A8E A2[6D05]                	MOV	[SATTRIB],AL
 26291 00004A91 E861F5                  	call	GetPathNoSet
 26292 00004A94 88CA                            MOV     DL,CL           ; Save CL info
 26293 00004A96 89C1                            MOV     CX,AX           ; Device ID to CH
 26294 00004A98 58                              POP     AX              ; Get back AH
 26295 00004A99 732E                            JNC	short make_exists ; File existed
 26296 00004A9B 7505                            JNZ	short make_err_4 ; Path bad
 26297 00004A9D 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 26298 00004AA0 7406                            JZ	short make_type	; Name simply not found, and no metas
 26299                                  make_err_4:
 26300 00004AA2 B004                            MOV     AL,4            ; case 1 bad path
 26301                                  make_err_ret:
 26302 00004AA4 30E4                            XOR     AH,AH
 26303 00004AA6 F9                              STC
 26304                                  ;make_retn:	; 22/11/2022
 26305 00004AA7 C3                              retn
 26306                                  
 26307                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 26308                                  RENAME_MAKE:
 26309                                  make_type:
 26310                                  ;Extended Open hooks
 26311                                  	; MSDOS 6.0
 26312                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 26313 00004AA8 F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 26314 00004AAD 7411                    	JZ	short make_type2	;FT. no				;AN000;
 26315 00004AAF 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 26316                                  					;FT. set for extended open ;AN000;
 26317                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 26318 00004AB4 F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 26319 00004AB9 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 26320 00004ABB F9                      	STC				;FT. set carry			;AN000;
 26321 00004ABC B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 26322                                  	; 22/11/2022
 26323                                  make_retn:
 26324                                  	;return
 26325 00004ABF C3                      	retn				;FT.				;AN000;
 26326                                  
 26327                                  ;	Extended Open hooks
 26328                                  
 26329                                  make_type2:
 26330 00004AC0 C43E[9E05]                      LES     DI,[THISSFT]
 26331 00004AC4 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 26332 00004AC6 F9                              STC                     ; Not found
 26333 00004AC7 EB5A                            JMP     short make_new
 26334                                  
 26335                                  ; The node exists. It may be either a device, directory or file:
 26336                                  ;   Zero set => directory
 26337                                  ;   High bit of CH on => device
 26338                                  ;   else => file
 26339                                  
 26340                                  make_exists:
 26341 00004AC9 7448                            JZ	short make_exists_dir
 26342 00004ACB B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 26343                                  	;test	byte [ATTRIB],18h
 26344 00004ACD F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 26345 00004AD2 753B                            JNZ	short make_err_ret_5
 26346                                  				; Cannot already exist as Disk or Device Node
 26347                                                                  ;       if making DIR or Volume ID
 26348 00004AD4 08ED                            OR      CH,CH
 26349 00004AD6 781A                            JS	short make_share ; No further checks on attributes if device
 26350 00004AD8 08E4                            OR      AH,AH
 26351 00004ADA 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 26352 00004ADC 51                              PUSH    CX              ; Save device ID
 26353 00004ADD 8E06[E405]                      MOV     ES,[CURBUF+2]
 26354                                  	;mov	ch,[es:bx+0Bh]
 26355 00004AE1 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 26356                                  	;test	ch,1
 26357 00004AE5 F6C501                  	test	CH,attr_read_only
 26358 00004AE8 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 26359 00004AEA E8B8F7                  	call	MatchAttributes
 26360 00004AED 59                              POP     CX              ; Devid back in CH
 26361 00004AEE 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 26362 00004AF0 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 26363                                  make_share:
 26364 00004AF2 30E4                            XOR     AH,AH
 26365 00004AF4 50                              PUSH    AX              ; Save Disk or Device node
 26366 00004AF5 51                              PUSH    CX              ; Save Device ID
 26367 00004AF6 88EC                            MOV     AH,CH           ; Device ID to AH
 26368 00004AF8 E84601                          CALL    DOOPEN          ; Fill in SFT for share check
 26369 00004AFB C43E[9E05]                      LES     DI,[THISSFT]
 26370 00004AFF 56                      	push	si
 26371 00004B00 53                      	push	bx		; Save CURBUF pointers
 26372 00004B01 E89629                  	call	ShareEnter
 26373 00004B04 735A                            jnc	short MakeEndShare
 26374                                  
 26375                                  ; User failed request.
 26376 00004B06 5B                      	pop	bx
 26377 00004B07 5E                      	pop	si
 26378 00004B08 59                      	pop	cx
 26379 00004B09 58                      	pop	ax
 26380                                  
 26381                                  Make_Share_ret:
 26382 00004B0A B006                            MOV     AL,6
 26383 00004B0C EB96                            JMP	short make_err_ret
 26384                                  
 26385                                  make_err_ret_5P:
 26386 00004B0E 59                              POP     CX              ; Get back device ID
 26387                                  make_err_ret_5:
 26388 00004B0F B005                            MOV     AL,5            ; Attribute mismatch
 26389                                          ; 22/11/2022
 26390 00004B11 EB91                    	JMP     short make_err_ret
 26391                                  
 26392                                  make_exists_dir:
 26393 00004B13 B001                            MOV     AL,1            ; exists as directory, always an error
 26394                                  	; 22/11/2022
 26395 00004B15 EB8D                    	JMP     short make_err_ret
 26396                                  
 26397                                  make_save:
 26398 00004B17 50                              PUSH    AX              ; Save whether Disk or File
 26399 00004B18 89C8                            MOV     AX,CX           ; Device ID to AH
 26400 00004B1A E87400                          CALL    NEWENTRY
 26401 00004B1D 58                              POP     AX              ; 0 if Disk, 3 if File
 26402 00004B1E 739F                            jnc	short make_retn
 26403 00004B20 B002                            MOV     AL,2            ; create failed case 2
 26404                                  make_save_retn:
 26405 00004B22 C3                              retn
 26406                                  
 26407                                  make_new:
 26408 00004B23 E8F1FF                          call    make_save
 26409 00004B26 72FA                            jc	short make_save_retn	; case 2 fail
 26410                                  	;test	byte [ATTRIB],10h
 26411 00004B28 F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 26412 00004B2D 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 26413                                  					; so don't tell the sharer about them
 26414 00004B2F 50                      	push	ax
 26415 00004B30 53                      	push	bx
 26416 00004B31 56                      	push	si		
 26417 00004B32 E86529                          call	ShareEnter
 26418 00004B35 5E                      	pop	si
 26419 00004B36 5B                      	pop	bx
 26420 00004B37 58                      	pop	ax
 26421 00004B38 73E8                    	jnc	short make_save_retn
 26422                                  
 26423                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 26424                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 26425                                  ; possible: delete the newly created directory entry and return share_error.
 26426                                  
 26427 00004B3A 50                              PUSH    AX
 26428 00004B3B C43E[E205]                      LES     DI,[CURBUF]
 26429                                  	;mov	byte [es:bx],0E5h
 26430 00004B3F 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 26431                                  	
 26432                                  	; MSDOS 6.0
 26433                                  	;test	byte [es:di+5],40h
 26434 00004B43 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 26435                                  					;LB. if already dirty		  ;AN000;
 26436 00004B48 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 26437                                  	; 22/11/2022
 26438 00004B4A E82411                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 26439                                  	;or	byte [es:di+5],40h
 26440 00004B4D 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 26441                                  yesdirty8:
 26442 00004B52 C42E[8A05]                      LES     BP,[THISDPB]
 26443                                  	; 15/12/2022
 26444 00004B56 268A4600                        mov	al,[ES:BP]
 26445                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26446                                  	;;mov	al,[es:bp+0]
 26447                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 26448 00004B5A E80C10                          call	FLUSHBUF		; write out buffer.
 26449 00004B5D 58                              POP     AX
 26450 00004B5E EBAA                            jmp	short Make_Share_ret
 26451                                  
 26452                                  ; We have found an existing file. We have also entered it into the share set.
 26453                                  ; At this point we need to call newentry to correctly address the problem of
 26454                                  ; getting rid of old data (create an existing file) or creating a new
 26455                                  ; directory entry (create a new file). Unfortunately, this operation may
 26456                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 26457                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 26458                                  ; the share set now, do the operation and then reassert the share access.
 26459                                  ;
 26460                                  ; We are allowed to do this! There is no window! After all, we are in
 26461                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 26462                                  
 26463                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26464                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 26465                                  
 26466                                  MakeEndShare:
 26467 00004B60 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 26468 00004B64 31C0                            XOR     AX,AX
 26469 00004B66 E81FC8                  	call	ECritSFT
 26470 00004B69 268705                  	xchg	AX,[ES:DI]
 26471                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 26472 00004B6C 50                      	push	ax
 26473 00004B6D 57                      	push	di
 26474 00004B6E 06                      	push	es
 26475 00004B6F 9C                              PUSHF
 26476 00004B70 E82229                          call	ShareEnd                ; remove sharing
 26477 00004B73 9D                              POPF
 26478 00004B74 07                      	pop	es
 26479 00004B75 5F                      	pop	di
 26480 00004B76 268F05                          pop	word [ES:DI]	
 26481                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 26482 00004B79 E827C8                  	call	LCritSFT
 26483                                  	; 22/11/2022
 26484                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 26485 00004B7C 5B                      	pop	bx
 26486 00004B7D 5E                      	pop	si
 26487 00004B7E 59                      	pop	cx
 26488 00004B7F 58                      	pop	ax
 26489 00004B80 E894FF                          CALL    make_save
 26490                                  
 26491                                  ; If the user failed, we do not reenter into the sharing set.
 26492                                  
 26493 00004B83 729D                            jc	short make_save_retn	; bye if error
 26494 00004B85 50                      	push	ax
 26495 00004B86 53                      	push	bx
 26496 00004B87 56                      	push	si
 26497 00004B88 9C                              PUSHF
 26498 00004B89 E80E29                          call	ShareEnter
 26499 00004B8C 9D                              POPF
 26500 00004B8D 5E                      	pop	si
 26501 00004B8E 5B                      	pop	bx
 26502 00004B8F 58                      	pop	ax
 26503                                  
 26504                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 26505                                  
 26506                                  makeendshare_retn:
 26507 00004B90 C3                              retn
 26508                                  
 26509                                  ;---------------------------------------------------------------------------
 26510                                  ;
 26511                                  ; Procedure Name : NEWENTRY
 26512                                  ;
 26513                                  ; Inputs:
 26514                                  ;       [THISSFT] set
 26515                                  ;       [THISDPB] set
 26516                                  ;       [LASTENT] current last valid entry number in directory if no free
 26517                                  ;               entries
 26518                                  ;       [VOLID] set if a volume ID was found during search
 26519                                  ;	Attrib Contains attributes for new file
 26520                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26521                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 26522                                  ;               NC means file existed (device)
 26523                                  ;               C  means file did not exist
 26524                                  ;       AH = Device ID byte
 26525                                  ;       If FILE
 26526                                  ;           [CURBUF+2]:BX points to start of directory entry
 26527                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26528                                  ;       If device
 26529                                  ;           DS:BX points to start of "fake" directory entry
 26530                                  ;           DS:SI points to dir_first of "fake" directory entry
 26531                                  ;               (has DWORD pointer to device header)
 26532                                  ; Function:
 26533                                  ;       Make a new directory entry
 26534                                  ;       If an old one existed it is truncated first
 26535                                  ; Outputs:
 26536                                  ;       Carry set if error
 26537                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 26538                                  ;               vol ID, user FAILed to I 24
 26539                                  ;       else
 26540                                  ;               outputs of DOOPEN
 26541                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 26542                                  ;
 26543                                  ;----------------------------------------------------------------------------
 26544                                  
 26545                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26546                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 26547                                  
 26548                                  NEWENTRY:
 26549 00004B91 C42E[8A05]                      LES     BP,[THISDPB]
 26550 00004B95 7316                            JNC	short EXISTENT	
 26551 00004B97 803E[4A03]00                    CMP     byte [FAILERR],0
 26552 00004B9C F9                              STC
 26553 00004B9D 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 26554 00004B9F E800FE                          CALL    BUILDDIR        ; Try to build dir
 26555 00004BA2 72EC                            jc	short makeendshare_retn	; Failed
 26556 00004BA4 E8BAF3                          call	GETENT          ; Point at that free entry
 26557 00004BA7 72E7                            jc	short makeendshare_retn	; Failed
 26558 00004BA9 EB0E                            JMP     SHORT FREESPOT
 26559                                  
 26560                                  ERRRET3:
 26561 00004BAB F9                              STC
 26562                                  newentry_retn:
 26563 00004BAC C3                              retn
 26564                                  
 26565                                  EXISTENT:
 26566 00004BAD 08E4                            OR      AH,AH           ; Check if file is I/O device
 26567 00004BAF 7903                            JNS	short NOT_DEV1
 26568 00004BB1 E98D00                          JMP     DOOPEN          ; If so, proceed with open
 26569                                  
 26570                                  NOT_DEV1:
 26571 00004BB4 E82C01                          call	FREEENT		; Free cluster chain
 26572 00004BB7 72F3                            jc	short newentry_retn ; Failed
 26573                                  FREESPOT:
 26574                                  	;test	byte [ATTRIB],8
 26575 00004BB9 F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 26576 00004BBE 7407                            JZ	short NOTVOLID
 26577 00004BC0 803E[7B05]00                    CMP     BYTE [VOLID],0
 26578 00004BC5 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 26579                                  NOTVOLID:
 26580 00004BC7 8E06[E405]                      MOV     ES,[CURBUF+2]
 26581 00004BCB 89DF                            MOV     DI,BX
 26582                                  
 26583 00004BCD BE[4B05]                        MOV     SI,NAME1
 26584                                  
 26585 00004BD0 B90500                          MOV     CX,5
 26586 00004BD3 F3A5                            REP     MOVSW
 26587 00004BD5 A4                              MOVSB                   ; Move name into dir entry
 26588 00004BD6 A0[6B05]                	MOV	AL,[ATTRIB]
 26589 00004BD9 AA                      	STOSB                   ; Attributes
 26590                                  
 26591                                  ;; File Tagging for Create DOS 4.00
 26592 00004BDA B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 26593                                  ;; File Tagging for Create DOS 4.00
 26594                                  
 26595 00004BDC 31C0                            XOR     AX,AX
 26596 00004BDE F3AB                            REP     STOSW           ; Zero pad
 26597 00004BE0 E863BF                          call	DATE16
 26598 00004BE3 92                              XCHG    AX,DX
 26599 00004BE4 AB                              STOSW                   ; dir_time
 26600 00004BE5 92                              XCHG    AX,DX
 26601 00004BE6 AB                              STOSW                   ; dir_date
 26602 00004BE7 31C0                            XOR     AX,AX
 26603 00004BE9 57                              PUSH    DI              ; Correct SI input value
 26604                                  				; 	(recomputed for new buffer)
 26605 00004BEA AB                              STOSW                   ; Zero dir_first and size
 26606 00004BEB AB                              STOSW
 26607 00004BEC AB                              STOSW
 26608                                  updnxt:
 26609 00004BED 8B36[E205]              	MOV	SI,[CURBUF]
 26610                                  
 26611                                  	; 19/05/2019 - Retro DOS v4.0
 26612                                  
 26613                                  	; MSDOS 6.0
 26614 00004BF1 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26615                                  				;LB. if already dirty		  ;AN000;
 26616 00004BF6 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 26617 00004BF8 E87610                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 26618                                          
 26619                                  	;or	byte [es:si+5],40h
 26620 00004BFB 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26621                                  yesdirty9:
 26622 00004C00 C42E[8A05]                      LES     BP,[THISDPB]
 26623                                  	; 15/12/2022
 26624 00004C04 268A4600                	MOV	AL,[ES:BP]
 26625                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26626                                  	;;mov	al,[es:bp+0]
 26627                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 26628 00004C08 50                              PUSH    AX
 26629 00004C09 53                              PUSH    BX
 26630                                  
 26631                                  ; If we have a file, we need to increment the open ref. count so that
 26632                                  ; we have some protection against invalid media changes if an Int 24
 26633                                  ; error occurs.
 26634                                  ; Do nothing for a device.
 26635                                  
 26636 00004C0A 06                      	push	es
 26637 00004C0B 57                      	push	di
 26638 00004C0C C43E[9E05]                      LES     DI,[THISSFT]
 26639                                  	;test	word [es:di+5],80h
 26640                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 26641 00004C10 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26642 00004C15 751A                            jnz	short GotADevice
 26643 00004C17 1E                      	push	ds
 26644 00004C18 53                      	push	bx
 26645 00004C19 C51E[8A05]                      LDS     BX,[THISDPB]
 26646                                  	;mov	[es:di+7],bx
 26647 00004C1D 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 26648 00004C21 8CDB                            MOV     BX,DS
 26649                                  	;mov	[es:di+9],bx
 26650 00004C23 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 26651 00004C27 5B                      	pop	bx
 26652 00004C28 1F                      	pop	ds ; need to use DS for segment later on
 26653 00004C29 E8A1FA                  	call	DEV_OPEN_SFT    ; increment ref. count
 26654 00004C2C C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 26655                                  GotADevice:
 26656 00004C31 5F                      	pop	di
 26657 00004C32 07                      	pop	es
 26658                                  
 26659 00004C33 E8330F                          call	FLUSHBUF
 26660 00004C36 E8F900                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 26661 00004C39 5B                              POP     BX
 26662 00004C3A 58                              POP     AX
 26663 00004C3B 5E                              POP     SI              ; Get SI input back
 26664 00004C3C 88C4                            MOV     AH,AL           ; Get I/O driver number back
 26665 00004C3E 7301                    	jnc	short DOOPEN    ; Failed
 26666 00004C40 C3                      	retn
 26667                                  	
 26668                                  ;NOTE FALL THROUGH
 26669                                  
 26670                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 26671                                  
 26672                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26673                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 26674                                  
 26675                                  ; DOOPEN
 26676                                  ;----------------------------------------------------------------------------
 26677                                  ;
 26678                                  ; Inputs:
 26679                                  ;       [THISDPB] points to DPB if file
 26680                                  ;       [THISSFT] points to SFT being used
 26681                                  ;       AH = Device ID byte
 26682                                  ;       If FILE
 26683                                  ;           [CURBUF+2]:BX points to start of directory entry
 26684                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26685                                  ;       If device
 26686                                  ;           DS:BX points to start of "fake" directory entry
 26687                                  ;           DS:SI points to dir_first of "fake" directory entry
 26688                                  ;               (has DWORD pointer to device header)
 26689                                  ; Function:
 26690                                  ;       Fill in SFT from dir entry
 26691                                  ; Outputs:
 26692                                  ;       CARRY CLEAR
 26693                                  ;       sf_ref_count and sf_mode fields not altered
 26694                                  ;       sf_flags high byte = 0
 26695                                  ;       sf_flags low byte = AH except
 26696                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 26697                                  ;       sf_attr sf_date sf_time sf_name set from entry
 26698                                  ;       sf_position = 0
 26699                                  ;       If device
 26700                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 26701                                  ;           sf_size = 0
 26702                                  ;       If file
 26703                                  ;           sf_firclus sf_size set from entry
 26704                                  ;           sf_devptr = [THISDPB]
 26705                                  ;           sf_cluspos = 0
 26706                                  ;           sf_lstclus = sf_firclus
 26707                                  ;           sf_dirsec sf_dirpos set
 26708                                  ; DS,SI,BX preserved, others destroyed
 26709                                  ;
 26710                                  ;----------------------------------------------------------------------------
 26711                                  
 26712                                  	;entry	DOOPEN
 26713                                  DOOPEN:
 26714                                  ;	Generate and store attribute
 26715                                  
 26716 00004C41 88E6                            MOV     DH,AH           ; AH to different place
 26717 00004C43 C43E[9E05]                      LES     DI,[THISSFT]
 26718                                  	;add	di,4
 26719 00004C47 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 26720 00004C4A 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 26721                                                                  ;   attribute of 0 (for R/O testing etc).
 26722 00004C4C 08F6                            OR      DH,DH           ; See if our assumption good.
 26723 00004C4E 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 26724 00004C50 8E1E[E405]                      MOV     DS,[CURBUF+2]
 26725                                  	;mov	al,[BX+0Bh]
 26726 00004C54 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 26727                                  				; If file, get attrib from dir entry
 26728                                  DEV_SFT1:
 26729 00004C57 AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 26730                                  
 26731                                  ;	Generate and store flags word
 26732                                  
 26733 00004C58 31C0                            XOR     AX,AX
 26734 00004C5A 88F0                            MOV     AL,DH
 26735                                  	;or	al,40h
 26736 00004C5C 0C40                            OR      AL,devid_file_clean
 26737 00004C5E AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 26738                                  
 26739                                  ;	Generate and store device pointer
 26740                                  
 26741 00004C5F 1E                              PUSH    DS
 26742                                  	;lds	ax,[bx+1Ah]
 26743 00004C60 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 26744 00004C63 08F6                            OR      DH,DH
 26745 00004C65 7805                            JS	short DEV_SFT2
 26746                                  
 26747                                  ;hkn; SS override
 26748 00004C67 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 26749                                  DEV_SFT2:
 26750 00004C6C AB                              STOSW 			; store offset
 26751 00004C6D 8CD8                            MOV     AX,DS
 26752 00004C6F 1F                              POP     DS
 26753 00004C70 AB                      	STOSW			; store segment
 26754                                  				; ES:DI -> sf_firclus
 26755                                  
 26756                                  ;	Generate pointer to, generate and store first cluster 
 26757                                  ;	(irrelevant for devices)
 26758                                  
 26759 00004C71 56                              PUSH    SI              ; Save pointer to dir_first
 26760 00004C72 A5                              MOVSW                   ; dir_first -> sf_firclus
 26761                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 26762                                  
 26763                                  ;	Copy time/date of last modification
 26764                                  
 26765                                  	;sub	si,6
 26766 00004C73 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 26767                                  				; DS:SI->dir_time
 26768 00004C76 A5                              MOVSW                   ; dir_time -> sf_time
 26769                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 26770 00004C77 A5                              MOVSW                   ; dir_date -> sf_date
 26771                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 26772                                  
 26773                                  ;	Generate and store file size (0 for devices)
 26774                                  
 26775 00004C78 AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 26776 00004C79 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 26777 00004C7A 89C1                            MOV     CX,AX           ; dir_size_l in CX
 26778 00004C7C AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 26779 00004C7D 08F6                            OR      DH,DH
 26780 00004C7F 7904                            JNS	short FILE_SFT1
 26781 00004C81 31C0                            XOR     AX,AX
 26782 00004C83 89C1                            MOV     CX,AX           ; Devices are open ended
 26783                                  FILE_SFT1:
 26784 00004C85 91                              XCHG    AX,CX
 26785 00004C86 AB                              STOSW                   ; Low word of sf_size
 26786 00004C87 91                              XCHG    AX,CX
 26787 00004C88 AB                              STOSW                   ; High word of sf_size
 26788                                                                  ; ES:DI -> sf_position
 26789                                  ; Initialize position to 0
 26790                                  
 26791 00004C89 31C0                            XOR     AX,AX
 26792 00004C8B AB                              STOSW
 26793 00004C8C AB                              STOSW                   ; sf_position
 26794                                                                  ; ES:DI -> sf_cluspos
 26795                                  
 26796                                  ; Generate cluster optimizations for files
 26797                                  
 26798 00004C8D 08F6                            OR      DH,DH
 26799 00004C8F 7843                            JS	short DEV_SFT3
 26800 00004C91 AB                              STOSW                   ; sf_cluspos ; 19h
 26801                                  	;mov	ax,[bx+1Ah]
 26802 00004C92 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 26803                                  	; 19/05/2019
 26804                                  	; MSDOS 3.3
 26805                                  	;STOSW 			; sf_lstclus ; 1Bh
 26806                                  	; MSDOS 6.0
 26807 00004C95 57                              PUSH	DI              ;AN004; save dirsec offset
 26808                                  	;sub	di,1Bh
 26809 00004C96 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 26810                                  	;mov	[es:di+35h],ax
 26811 00004C99 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 26812 00004C9D 5F                              POP	DI              ;AN004; restore dirsec offset
 26813                                  
 26814                                  ; DOS 3.3  FastOpen  6/13/86
 26815                                  
 26816 00004C9E 1E                      	PUSH	DS
 26817                                  
 26818                                  ;hkn; SS is DOSDATA
 26819 00004C9F 16                      	push	ss
 26820 00004CA0 1F                      	pop	ds
 26821                                  	;test	byte [FastOpenFlg],4
 26822 00004CA1 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 26823 00004CA6 7411                    	JZ	short Not_FastOpen
 26824                                  
 26825                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 26826 00004CA8 BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 26827                                  
 26828                                  	;mov	ax,[si+1]
 26829 00004CAB 8B4401                          MOV     AX,[SI+FEI.dirsec]
 26830 00004CAE AB                              STOSW                   ; sf_dirsec
 26831                                  	; MSDOS 6.0
 26832                                  	;mov	ax,[si+3]
 26833 00004CAF 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 26834                                  				;;; changed for >32mb
 26835 00004CB2 AB                              STOSW                   ; sf_dirsec
 26836                                  	; 19/08//2018
 26837 00004CB3 8A04                    	mov	al,[SI]
 26838                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 26839 00004CB5 AA                              STOSB                   ; sf_dirpos
 26840 00004CB6 1F                              POP	DS
 26841 00004CB7 EB19                            JMP     short Next_Name
 26842                                  
 26843                                  ; DOS 3.3  FastOpen  6/13/86
 26844                                  
 26845                                  Not_FastOpen:
 26846                                          ;POP     DS		; normal path
 26847                                  
 26848                                  ;hkn; SS override
 26849                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 26850                                  	; 16/12/2022
 26851                                  	; 28/07/2019
 26852 00004CB9 8B36[E205]              	mov	si,[CURBUF]
 26853 00004CBD 1F                      	pop	ds
 26854                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26855                                  	;pop	ds
 26856                                  	;mov	si,[ss:CURBUF]
 26857                                  	
 26858                                  	;mov	ax,[si+6]
 26859 00004CBE 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 26860 00004CC1 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26861                                  	; 19/05/2019        
 26862                                  	; MSDOS 6.0
 26863                                  	;mov	ax,[si+8]
 26864 00004CC2 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 26865 00004CC5 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26866                                          
 26867 00004CC6 89D8                    	MOV     AX,BX
 26868                                  	;;add	si,16	; MSDOS 3.3	
 26869                                  	;add	si,20	; MSDOS 6.0
 26870 00004CC8 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 26871 00004CCB 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 26872                                          ;mov	cl,32
 26873 00004CCD B120                    	MOV     CL,dir_entry.size
 26874 00004CCF F6F1                            DIV     CL
 26875 00004CD1 AA                              STOSB                   ; sf_dirpos
 26876                                  Next_Name:
 26877 00004CD2 EB03                            JMP     SHORT FILE_SFT2
 26878                                  
 26879                                  DEV_SFT3:
 26880                                  	;add	di,7
 26881 00004CD4 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 26882                                  FILE_SFT2:
 26883                                  
 26884                                  ; Copy in the object's name
 26885                                  
 26886 00004CD7 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 26887 00004CD9 B90B00                          MOV     CX,11
 26888 00004CDC F3A4                            REP     MOVSB           ; sf_name
 26889 00004CDE 5E                              POP     SI              ; recover DS:SI -> dir_first
 26890                                  
 26891                                  ;hkn; SS is DOSDATA
 26892 00004CDF 16                              push	ss
 26893 00004CE0 1F                      	pop	ds
 26894 00004CE1 F8                              CLC
 26895 00004CE2 C3                              retn
 26896                                  
 26897                                  ;---------------------------------------------------------------------------
 26898                                  ;
 26899                                  ; Procedure Name : FREEENT
 26900                                  ;
 26901                                  ; Inputs:
 26902                                  ;       ES:BP -> DPB
 26903                                  ;       [CURBUF] Set
 26904                                  ;       [CURBUF+2]:BX points to directory entry
 26905                                  ;       [CURBUF+2]:SI points to above dir_first
 26906                                  ; Function:
 26907                                  ;       Free the cluster chain for the entry if present
 26908                                  ; Outputs:
 26909                                  ;       Carry set if error (currently user FAILed to I 24)
 26910                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 26911                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 26912                                  ;---------------------------------------------------------------------------
 26913                                  
 26914                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26915                                  FREEENT:
 26916 00004CE3 1E                              PUSH    DS
 26917 00004CE4 C53E[E205]                      LDS     DI,[CURBUF]
 26918 00004CE8 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 26919                                  	; 19/05/2019 - Retro DOS v4.0
 26920                                  	; MSDOS 6.0
 26921 00004CEA 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 26922                                  ;hkn; SS override
 26923 00004CED 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 26924 00004CF2 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 26925 00004CF5 1F                              POP     DS
 26926 00004CF6 83F902                  	CMP	CX,2
 26927 00004CF9 7235                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 26928                                  	;cmp	cx,[es:bp+0Dh]
 26929 00004CFB 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 26930 00004CFF 772F                            JA	short RET1	; Treat like zero length file (firclus mucked)
 26931 00004D01 29FB                            SUB     BX,DI
 26932 00004D03 53                              PUSH    BX              ; Save offset
 26933 00004D04 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 26934 00004D08 52                              PUSH    DX              ; Save sector number
 26935 00004D09 89CB                            MOV     BX,CX
 26936 00004D0B E8B702                          call	RELEASE         ; Free any data allocated
 26937 00004D0E 5A                              POP     DX
 26938 00004D0F 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 26939 00004D13 7302                            JNC	short GET_BUF_BACK
 26940 00004D15 5B                              POP     BX
 26941                                  freeent_retn:
 26942 00004D16 C3                              retn			; Screw up
 26943                                  
 26944                                  GET_BUF_BACK:
 26945                                  	;mov	byte [ALLOWED],18h
 26946 00004D17 C606[4B03]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 26947 00004D1C 30C0                            XOR     AL,AL
 26948 00004D1E E84A0D                  	call	GETBUFFR        ; Get sector back
 26949 00004D21 5B                              POP     BX              ; Get offset back
 26950 00004D22 72F2                            jc	short freeent_retn
 26951 00004D24 E869EA                  	call	SET_BUF_AS_DIR
 26952 00004D27 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 26953 00004D2B 89DE                            MOV     SI,BX
 26954                                  	;add	si,1Ah
 26955 00004D2D 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 26956                                  RET1:
 26957 00004D30 F8                              CLC
 26958 00004D31 C3                              retn
 26959                                  
 26960                                  ;---------------------------------------------------------------------------
 26961                                  ;
 26962                                  ; Procedure Name : CHECK_VIRT_OPEN
 26963                                  ;
 26964                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 26965                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 26966                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 26967                                  ; flag [VIRTUAL_OPEN].
 26968                                  ; No registers affected (including flags).
 26969                                  ; On input, [THISSFT] points to current SFT.
 26970                                  ;
 26971                                  ;---------------------------------------------------------------------------
 26972                                  
 26973                                  CHECK_VIRT_OPEN:
 26974 00004D32 50                      	PUSH    AX
 26975 00004D33 9F                              lahf                    ; preserve flags
 26976 00004D34 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 26977 00004D39 7410                            JZ	short ALL_CLOSED
 26978 00004D3B C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 26979 00004D40 06                      	push	es
 26980 00004D41 57                      	push	di
 26981 00004D42 C43E[9E05]                      LES     DI,[THISSFT]
 26982 00004D46 E88CF9                          call	DEV_CLOSE_SFT
 26983 00004D49 5F                      	pop	di
 26984 00004D4A 07                      	pop	es
 26985                                  
 26986                                  ALL_CLOSED:
 26987 00004D4B 9E                              sahf                    ; restore flags
 26988 00004D4C 58                              POP     AX
 26989 00004D4D C3                              retn
 26990                                  
 26991                                  ;============================================================================
 26992                                  ; ROM.ASM, MSDOS 6.0, 1991
 26993                                  ;============================================================================
 26994                                  ; 29/07/2018 - Retro DOS v3.0
 26995                                  ; 20/05/2019 - Retro DOS v4.0
 26996                                  
 26997                                  ;	TITLE	ROM - Miscellaneous routines
 26998                                  ;	NAME	ROM
 26999                                  
 27000                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 27001                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 27002                                  ;
 27003                                  ;	SKPCLP
 27004                                  ;	FNDCLUS
 27005                                  ;	BUFSEC
 27006                                  ;	BUFRD
 27007                                  ;	BUFWRT
 27008                                  ;	NEXTSEC
 27009                                  ;	OPTIMIZE
 27010                                  ;	FIGREC
 27011                                  ;	ALLOCATE
 27012                                  ;	RESTFATBYT
 27013                                  ;	RELEASE
 27014                                  ;	RELBLKS
 27015                                  ;	GETEOF
 27016                                  ;
 27017                                  ;	Modification history:
 27018                                  ;
 27019                                  ;		Created: ARR 30 March 1983
 27020                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 27021                                  
 27022                                  ;Break   <FNDCLUS -- Skip over allocation units>
 27023                                  ;--------------------------------------------------------------------------
 27024                                  ;
 27025                                  ; Procedure Name : FNDCLUS
 27026                                  ;
 27027                                  ; Inputs:
 27028                                  ;       CX = No. of clusters to skip
 27029                                  ;       ES:BP = Base of drive parameters
 27030                                  ;       [THISSFT] point to SFT
 27031                                  ; Outputs:
 27032                                  ;       BX = Last cluster skipped to
 27033                                  ;       CX = No. of clusters remaining (0 unless EOF)
 27034                                  ;       DX = Position of last cluster
 27035                                  ;       Carry set if error (currently user FAILed to I 24)
 27036                                  ; DI destroyed. No other registers affected.
 27037                                  ;--------------------------------------------------------------------------
 27038                                  
 27039                                  ; 20/05/2019 - Retro DOS v4.0
 27040                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27041                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27042                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27043                                  
 27044                                  FNDCLUS:
 27045 00004D4E 06                      	PUSH	ES
 27046 00004D4F C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27047                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27048                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27049 00004D53 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27050                                  	;mov	dx,[es:di+19h]
 27051 00004D57 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27052 00004D5B 09DB                    	OR	BX,BX
 27053 00004D5D 7424                    	JZ	short NOCLUS
 27054                                  
 27055 00004D5F 29D1                            SUB     CX,DX
 27056 00004D61 7308                            JNB	short FINDIT
 27057                                  
 27058 00004D63 01D1                            ADD     CX,DX
 27059 00004D65 31D2                            XOR     DX,DX
 27060                                  	;mov	bx,[es:di+0Bh]
 27061 00004D67 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27062                                  FINDIT:
 27063 00004D6B 07                              POP	ES
 27064 00004D6C E313                    	JCXZ	RET9
 27065                                  
 27066                                  	;entry	SKPCLP
 27067                                  SKPCLP:
 27068 00004D6E E8D808                  	call	UNPACK
 27069 00004D71 7214                            jc	short fndclus_retn	; retc
 27070                                  
 27071                                  	; 09/09/2018
 27072                                  
 27073                                  	; MSDOS 3.3
 27074                                  	;push	bx
 27075                                  	;mov	bx,di
 27076                                  	;call	IsEOF
 27077                                  	;pop	bx	
 27078                                  	;jae	short RET9
 27079                                  
 27080                                  	; 20/05/2019 - Retro DOS v4.0
 27081                                  
 27082                                  	; MSDOS 6.0
 27083 00004D73 87DF                    	xchg	bx,di
 27084 00004D75 E8BA08                  	call	IsEOF
 27085 00004D78 87DF                    	xchg	bx,di
 27086 00004D7A 7305                    	jae	short RET9
 27087                                  
 27088 00004D7C 87DF                            XCHG    BX,DI
 27089 00004D7E 42                              INC     DX
 27090                                  
 27091 00004D7F E2ED                    	LOOP	SKPCLP			; RMFS
 27092                                  RET9:	
 27093 00004D81 F8                      	CLC
 27094 00004D82 C3                              retn
 27095                                  NOCLUS:
 27096 00004D83 07                              POP	ES
 27097 00004D84 41                              INC	CX
 27098 00004D85 4A                              DEC	DX
 27099 00004D86 F8                              CLC
 27100                                  
 27101                                  fndclus_retn:
 27102 00004D87 C3                              retn
 27103                                  
 27104                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27105                                  ;--------------------------------------------------------------------------
 27106                                  ;
 27107                                  ; Procedure Name : BUFSEC
 27108                                  ;
 27109                                  ; Inputs:
 27110                                  ;       AH = priority of buffer
 27111                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27112                                  ;       ES:BP = Base of drive parameters
 27113                                  ;       [CLUSNUM] = Physical cluster number
 27114                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27115                                  ;       [BYTCNT1] = Size of transfer
 27116                                  ; Function:
 27117                                  ;       Insure specified sector is in buffer, flushing buffer before
 27118                                  ;       read if necessary.
 27119                                  ; Outputs:
 27120                                  ;       ES:DI = Pointer to buffer
 27121                                  ;       SI = Pointer to transfer address
 27122                                  ;       CX = Number of bytes
 27123                                  ;       [NEXTADD] updated
 27124                                  ;       [TRANS] set to indicate a transfer will occur
 27125                                  ;       Carry set if error (user FAILed to I 24)
 27126                                  ;--------------------------------------------------------------------------
 27127                                  
 27128                                  BUFSEC:
 27129 00004D88 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27130 00004D8C 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27131                                  	;mov	byte [ALLOWED],38h
 27132 00004D90 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27133 00004D95 E85501                          CALL    FIGREC
 27134 00004D98 E8D00C                  	call	GETBUFFR
 27135 00004D9B 72EA                            jc	short fndclus_retn
 27136                                  
 27137 00004D9D C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 27138 00004DA2 8B36[B805]                      MOV     SI,[NEXTADD]
 27139 00004DA6 89F7                            MOV     DI,SI
 27140 00004DA8 8B0E[D205]                      MOV     CX,[BYTCNT1]
 27141 00004DAC 01CF                            ADD     DI,CX
 27142 00004DAE 893E[B805]                      MOV     [NEXTADD],DI
 27143 00004DB2 C43E[E205]                      LES     DI,[CURBUF]
 27144                                  	;or	byte [es:di+5],8
 27145 00004DB6 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 27146                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 27147                                  	;lea	di,[di+20] ; MSDOS 6.0
 27148 00004DBB 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 27149 00004DBE 033E[CC05]                      ADD     DI,[BYTSECPOS]
 27150 00004DC2 F8                              CLC
 27151 00004DC3 C3                              retn
 27152                                  
 27153                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 27154                                  
 27155                                  ;---------------------------------------------------------------------------
 27156                                  ;
 27157                                  ; Procedure Name : BUFRD
 27158                                  ;
 27159                                  ; Do a partial sector read via one of the system buffers
 27160                                  ; ES:BP Points to DPB
 27161                                  ; Carry set if error (currently user FAILed to I 24)
 27162                                  ;
 27163                                  ; DS - set to DOSDATA
 27164                                  ;
 27165                                  ;----------------------------------------------------------------------------
 27166                                  
 27167                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27168                                  	; 20/05/2019 - Retro DOS v4.0
 27169                                  BUFRD:
 27170 00004DC4 06                              PUSH	ES
 27171 00004DC5 31C0                            xor	ax, ax			; pre-read sector
 27172 00004DC7 E8BEFF                          CALL    BUFSEC
 27173 00004DCA 7303                            JNC	short BUF_OK
 27174                                  
 27175                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 27176 00004DCC 07                              POP	ES
 27177 00004DCD EB2B                            JMP     SHORT RBUFPLACED
 27178                                  
 27179                                  BUF_OK:
 27180 00004DCF 8CC3                            MOV     BX,ES
 27181 00004DD1 8E06[2E03]                      MOV     ES,[DMAADD+2]
 27182 00004DD5 8EDB                            MOV     DS,BX
 27183 00004DD7 87FE                    	XCHG    DI,SI
 27184 00004DD9 D1E9                            SHR     CX,1
 27185                                  ;M039
 27186                                  	; MSDOS 3.3
 27187                                  	;JNC	short EVENRD
 27188                                  	;MOVSB
 27189                                  ;EVENRD:
 27190                                  	;REP     MOVSW
 27191                                  
 27192                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 27193                                  ;       DS:SI-> Source within Buffer.
 27194                                  ;       ES:DI-> Destination within Transfer memory block.
 27195                                  
 27196                                  	; MSDOS 6.0
 27197 00004DDB F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 27198                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27199                                  	;rep	movsb                   ;Copy last byte.
 27200                                  	; 16/12/2022
 27201 00004DDD 7301                    	jnc	short EVENRD ; **** 20/05/2019
 27202 00004DDF A4                      	movsb ; ****
 27203                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27204                                  	;adc	cx,0
 27205                                  	;rep	movsb
 27206                                  ;M039
 27207                                  EVENRD: ; ****
 27208 00004DE0 07                              POP	ES
 27209                                  ;hkn; SS override
 27210 00004DE1 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 27211                                  	;;lea	bx,[di+16]
 27212                                  	;lea	bx,[di+20] ; MSDOS 6.0
 27213 00004DE6 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 27214 00004DE9 29DE                            SUB     SI,BX                   ; Position in buffer
 27215 00004DEB E8310C                          call	PLACEBUF
 27216                                  	;cmp	si,[es:bp+2]
 27217 00004DEE 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 27218 00004DF2 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 27219                                  ;M039
 27220                                  	; MSDOS 3.3
 27221                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27222                                                                          ;  even though it is MRU.
 27223                                          ; MSDOS 6.0
 27224 00004DF4 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 27225                                  ;M039					; chucking even though it is MRU.
 27226                                  
 27227                                  RBUFPLACEDC:
 27228 00004DF9 F8                              CLC
 27229                                  RBUFPLACED:
 27230 00004DFA 16                      	push	ss
 27231 00004DFB 1F                      	pop	ds
 27232 00004DFC C3                              retn
 27233                                  
 27234                                  ;----------------------------------------------------------------------------
 27235                                  ;
 27236                                  ; Procedure : BUFWRT
 27237                                  ;
 27238                                  ; Do a partial sector write via one of the system buffers
 27239                                  ; ES:BP Points to DPB
 27240                                  ; Carry set if error (currently user FAILed to I 24)
 27241                                  ;
 27242                                  ; DS - set to DOSDATA
 27243                                  ;
 27244                                  ;----------------------------------------------------------------------------
 27245                                  
 27246                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27247                                  	; 20/05/2019 - Retro DOS v4.0
 27248                                  BUFWRT:
 27249 00004DFD A1[C405]                        MOV     AX,[SECPOS]
 27250                                          ; MSDOS 6.0
 27251 00004E00 83C001                  	ADD	AX,1            	; Set for next sector
 27252 00004E03 A3[C405]                        MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 27253 00004E06 8316[C605]00                    ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 27254 00004E0B A1[C605]                        MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 27255 00004E0E 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 27256 00004E12 B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 27257 00004E14 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 27258 00004E16 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 27259 00004E18 A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 27260                                  
 27261                                  	; MSDOS 3.3
 27262                                  	;INC	AX
 27263                                  	;MOV	[SECPOS],AX ; 09/09/2018
 27264                                  
 27265                                  	; 20/05/2019
 27266                                  	; MSDOS 3.3 & MSDOS 6.0
 27267 00004E1B 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 27268 00004E1F B001                            MOV     AL,1
 27269 00004E21 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 27270                                  _doread:
 27271 00004E23 30C0                            XOR     AL,AL
 27272                                  NOREAD:
 27273 00004E25 06                              PUSH	ES
 27274 00004E26 E85FFF                          CALL    BUFSEC
 27275 00004E29 72A1                    	JC	short BUF_IO_FAIL
 27276 00004E2B 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 27277 00004E2F D1E9                            SHR     CX,1
 27278                                  ;M039
 27279                                  	; MSDOS 3.3
 27280                                  	;JNC	short EVENWRT ; 09/09/2018
 27281                                  	;MOVSB
 27282                                  ;EVENWRT:
 27283                                  	;REP	MOVSW
 27284                                  
 27285                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 27286                                  ;       DS:SI-> Source within Transfer memory block.
 27287                                  ;       ES:DI-> Destination within Buffer.
 27288                                  
 27289                                  	; MSDOS 6.0
 27290 00004E31 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 27291                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27292                                  	;rep	movsb                   ;Copy last byte.
 27293                                  	; 16/12/2022
 27294 00004E33 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 27295 00004E35 A4                      	movsb ; ****
 27296                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27297                                  	;adc	cx,0
 27298                                  	;rep	movsb
 27299                                  ;M039
 27300                                  EVENWRT: ; ****
 27301 00004E36 07                              POP	ES
 27302                                  
 27303                                  ;hkn; SS override
 27304 00004E37 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 27305                                  
 27306                                  	; MSDOS 6.0
 27307 00004E3C F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27308                                  					;LB. if already dirty		  ;AN000;
 27309 00004E40 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 27310 00004E42 E82C0E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27311                                  	
 27312                                  	;or	byte [bx+5],40h
 27313 00004E45 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27314                                  yesdirty10:
 27315                                  	;;lea	si,[bx+16]
 27316                                  	;lea	si,[bx+20] ; MSDOS 6.0
 27317 00004E49 8D7714                          LEA     SI,[BX+BUFINSIZ]
 27318 00004E4C 29F7                            SUB     DI,SI                   ; Position in buffer
 27319                                  ;M039
 27320                                  	; MSDOS 3.3
 27321                                  	;MOV	SI,DI
 27322                                  	;MOV	DI,BX
 27323                                  	;call	PLACEBUF
 27324                                  	;;cmp	si,[es:bp+2]
 27325                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27326                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 27327                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27328                                                                          ;  even though it is MRU.
 27329                                  	; MSDOS 6.0
 27330                                  	;cmp	di,[es:bp+2]
 27331 00004E4E 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27332 00004E52 7205                            JB	short WBUFPLACED	; No, leave buf where it is
 27333 00004E54 36891E[6D00]                    MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 27334                                  					; chucking even though it is MRU.
 27335                                  ;M039
 27336                                  
 27337                                  WBUFPLACED:
 27338 00004E59 F8                              CLC
 27339 00004E5A 16                      	push	ss
 27340 00004E5B 1F                      	pop	ds
 27341 00004E5C C3                              retn
 27342                                  
 27343                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 27344                                  ;---------------------------------------------------------------------------
 27345                                  ;
 27346                                  ; Procedure Name : NEXTSEC
 27347                                  ;
 27348                                  ; Compute the next sector to read or write
 27349                                  ; ES:BP Points to DPB
 27350                                  ;
 27351                                  ;---------------------------------------------------------------------------
 27352                                  
 27353                                  NEXTSEC:
 27354 00004E5D F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 27355 00004E62 7426                            JZ	short CLRET
 27356                                  
 27357 00004E64 A0[7305]                        MOV     AL,[SECCLUSPOS]
 27358 00004E67 FEC0                            INC     AL
 27359                                  	;cmp	al,[es:bp+4]
 27360 00004E69 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 27361 00004E6D 7618                            JBE	short SAVPOS
 27362                                  
 27363 00004E6F 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27364 00004E73 E8BC07                          call	IsEOF
 27365 00004E76 7314                            JAE	short NONEXT
 27366                                  
 27367 00004E78 E8CE07                          call	UNPACK
 27368 00004E7B 720F                            JC	short NONEXT
 27369                                  clusgot:
 27370 00004E7D 893E[BC05]                      MOV     [CLUSNUM],DI
 27371 00004E81 FF06[BA05]                      INC     word [LASTPOS]
 27372 00004E85 B000                            MOV     AL,0
 27373                                  SAVPOS:
 27374 00004E87 A2[7305]                        MOV     [SECCLUSPOS],AL
 27375                                  CLRET:
 27376 00004E8A F8                              CLC
 27377 00004E8B C3                              retn
 27378                                  NONEXT:
 27379 00004E8C F9                              STC
 27380 00004E8D C3                              retn
 27381                                  
 27382                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 27383                                  ;----------------------------------------------------------------------------
 27384                                  ;
 27385                                  ; Procedure Name : OPTIMIZE
 27386                                  ;
 27387                                  ; Inputs:
 27388                                  ;       BX = Physical cluster
 27389                                  ;       CX = No. of records
 27390                                  ;       DL = sector within cluster
 27391                                  ;       ES:BP = Base of drive parameters
 27392                                  ;       [NEXTADD] = transfer address
 27393                                  ; Outputs:
 27394                                  ;       AX = No. of records remaining
 27395                                  ;       BX = Transfer address
 27396                                  ;       CX = No. or records to be transferred
 27397                                  ;       DX = Physical sector address            (LOW)
 27398                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 27399                                  ;       DI = Next cluster
 27400                                  ;       [CLUSNUM] = Last cluster accessed
 27401                                  ;       [NEXTADD] updated
 27402                                  ;       Carry set if error (currently user FAILed to I 24)
 27403                                  ; ES:BP unchanged. Note that segment of transfer not set.
 27404                                  ;
 27405                                  ;---------------------------------------------------------------------------
 27406                                  
 27407                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27408                                  OPTIMIZE:
 27409 00004E8E 52                      	PUSH    DX
 27410 00004E8F 53                              PUSH    BX
 27411                                  	;mov	al,[es:bp+4]
 27412 00004E90 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 27413 00004E94 FEC0                            INC     AL              ; Number of sectors per cluster
 27414 00004E96 88C4                            MOV     AH,AL
 27415 00004E98 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 27416 00004E9A 89CA                            MOV     DX,CX
 27417                                  	;MOV	CX,0
 27418                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27419                                  	; 16/12/2022
 27420 00004E9C 31C9                    	xor	cx,cx	; sub cx,cx
 27421                                  OPTCLUS:
 27422                                  ; AL has number of sectors available in current cluster
 27423                                  ; AH has number of sectors available in next cluster
 27424                                  ; BX has current physical cluster
 27425                                  ; CX has number of sequential sectors found so far
 27426                                  ; DX has number of sectors left to transfer
 27427                                  ; ES:BP Points to DPB
 27428                                  ; ES:SI has FAT pointer
 27429                                  
 27430                                  do_norm3:
 27431 00004E9E E8A807                          call	UNPACK
 27432 00004EA1 7237                            JC	short OP_ERR
 27433                                  clusgot2:
 27434 00004EA3 00C1                    	ADD	CL,AL
 27435 00004EA5 80D500                          ADC     CH,0
 27436 00004EA8 39D1                            CMP     CX,DX
 27437 00004EAA 7333                            JAE	short BLKDON
 27438 00004EAC 88E0                            MOV     AL,AH
 27439 00004EAE 43                              INC     BX
 27440 00004EAF 39DF                            CMP     DI,BX
 27441 00004EB1 74EB                            JZ	short OPTCLUS
 27442 00004EB3 4B                              DEC     BX
 27443                                  FINCLUS:
 27444 00004EB4 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 27445 00004EB8 29CA                            SUB     DX,CX           ; Number of sectors still needed
 27446 00004EBA 52                              PUSH    DX
 27447 00004EBB 89C8                            MOV     AX,CX
 27448                                  	;mul	word[ES:BP+2]
 27449 00004EBD 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 27450                                  				; Number of sectors times sector size
 27451 00004EC1 8B36[B805]                      MOV     SI,[NEXTADD]
 27452 00004EC5 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 27453 00004EC7 A3[B805]                        MOV     [NEXTADD],AX
 27454 00004ECA 58                              POP     AX              ; Number of sectors still needed
 27455 00004ECB 5A                              POP     DX              ; Starting cluster
 27456 00004ECC 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 27457 00004ECE 011E[BA05]                      ADD     [LASTPOS],BX
 27458 00004ED2 5B                              POP     BX              ; BL = sector position within cluster
 27459 00004ED3 E81700                  	call	FIGREC
 27460 00004ED6 89F3                            MOV     BX,SI
 27461 00004ED8 F8                      	CLC
 27462 00004ED9 C3                              retn
 27463                                  OP_ERR:
 27464 00004EDA 83C404                          ADD     SP,4
 27465 00004EDD F9                      	STC
 27466 00004EDE C3                              retn
 27467                                  BLKDON:
 27468 00004EDF 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 27469 00004EE1 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 27470 00004EE3 FECC                            DEC     AH              ; Adjust to mean position within cluster
 27471 00004EE5 8826[7305]                      MOV     [SECCLUSPOS],AH
 27472 00004EE9 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 27473 00004EEB EBC7                            JMP     SHORT FINCLUS
 27474                                  
 27475                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 27476                                  ;---------------------------------------------------------------------------
 27477                                  ;
 27478                                  ; Procedure Name : FIGREC
 27479                                  ;
 27480                                  ; Inputs:
 27481                                  ;       DX = Physical cluster number
 27482                                  ;       BL = Sector position within cluster
 27483                                  ;       ES:BP = Base of drive parameters
 27484                                  ; Outputs:
 27485                                  ;       DX = physical sector number           (LOW)
 27486                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 27487                                  ; No other registers affected.
 27488                                  ;
 27489                                  ;---------------------------------------------------------------------------
 27490                                  
 27491                                  	; 10/06/2019
 27492                                  	; 20/05/2019 - Retro DOS v4.0
 27493                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 27494                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27495                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 27496                                  FIGREC:
 27497 00004EED 51                              PUSH    CX
 27498                                  	;mov	cl,[es:bp+5]
 27499 00004EEE 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 27500 00004EF2 4A                              DEC     DX
 27501 00004EF3 4A                              DEC     DX
 27502                                  
 27503                                  	; MSDOS 3.3
 27504                                  	;SHL	DX,CL
 27505                                  
 27506                                  ;hkn; SS override HIGH_SECTOR
 27507                                  	; MSDOS 6.0
 27508 00004EF4 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 27509 00004EFB 08C9                    	OR	CL,CL				;F.C. >32mb
 27510 00004EFD 740C                    	JZ	short noshift			;F.C. >32mb
 27511 00004EFF 30ED                    	XOR	CH,CH 				;F.C. >32mb
 27512                                  rotleft:					;F.C. >32mb
 27513 00004F01 F8                      	CLC					;F.C. >32mb
 27514 00004F02 D1D2                    	RCL	DX,1				;F.C. >32mb
 27515                                  	; 10/06/2019
 27516 00004F04 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 27517 00004F09 E2F6                    	LOOP	rotleft				;F.C. >32mb
 27518                                  noshift:
 27519                                  	; MSDOS 3.3 & MSDOS 6.0
 27520 00004F0B 08DA                            OR      DL,BL
 27521                                  	;add	dx,[es:bp+0Bh]
 27522 00004F0D 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 27523                                  	; MSDOS 6.0
 27524                                  	; 10/06/2019
 27525 00004F11 368316[0706]00                  ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 27526                                  	; MSDOS 3.3 & MSDOS 6.0        
 27527 00004F17 59                      	POP     CX
 27528                                  figrec_retn:
 27529 00004F18 C3                              retn
 27530                                  
 27531                                  ; 20/05/2019 - Retro DOS v4.0
 27532                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 27533                                  
 27534                                  ; 30/07/2018 - Retro DOS v3.0
 27535                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 27536                                  
 27537                                  ;Break   <ALLOCATE -- Assign disk space>
 27538                                  ;---------------------------------------------------------------------------
 27539                                  ;
 27540                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 27541                                  ;
 27542                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 27543                                  ;   FAT-chained onto the end of the existing file.
 27544                                  ;
 27545                                  ;   The DPB contains the cluster # of the last free cluster allocated
 27546                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 27547                                  ;   numbered clusters, looking for the necessary free blocks.
 27548                                  ;
 27549                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 27550                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 27551                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 27552                                  ;
 27553                                  ;       If we get to the end of the disk without satisfaction:
 27554                                  ;
 27555                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 27556                                  ;               return (insufficient_disk_space)
 27557                                  ;           ELSE
 27558                                  ;               dpb_next_free = 2; start scan over from the beginning.
 27559                                  ;
 27560                                  ;   Note that there is no multitasking interlock. There is no race when
 27561                                  ;   examining the entrys in an in-core FAT block since there will be no
 27562                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 27563                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 27564                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 27565                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 27566                                  ;   satisfied. We can't allow another activation to think this cluster is
 27567                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 27568                                  ;   allocated.
 27569                                  ;
 27570                                  ;   Note that when we run out of space this algorithem will scan from
 27571                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 27572                                  ;   redundantly scanning the later part of the disk. This only happens when
 27573                                  ;   we run out of space, so sue me.
 27574                                  ;
 27575                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27576                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27577                                  ;                                                                          ;
 27578                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 27579                                  ;   explanation:
 27580                                  ;
 27581                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 27582                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 27583                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 27584                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 27585                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 27586                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 27587                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 27588                                  ;   the
 27589                                  ;           LOOP   findfre         ; alloc more if needed
 27590                                  ;   instruction when the first cluster is allocated to the nul file. The
 27591                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 27592                                  ;
 27593                                  ;   This method is obviously useless (because it is non-reentrant) for
 27594                                  ;   multitasking, and will have to be changed. Storing the required value on
 27595                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 27596                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 27597                                  ;   problems with INT 24 well.
 27598                                  ;
 27599                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27600                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27601                                  ;                                                                          ;
 27602                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 27603                                  ;               CX = No. of clusters to allocate
 27604                                  ;               ES:BP = Base of drive parameters
 27605                                  ;               [THISSFT] = Points to SFT
 27606                                  ;
 27607                                  ;       EXIT    'C' set if insufficient space
 27608                                  ;                 [FAILERR] can be tested to see the reason for failure
 27609                                  ;                 CX = max. no. of clusters that could be added to file
 27610                                  ;               'C' clear if space allocated
 27611                                  ;                 BX = First cluster allocated
 27612                                  ;                 FAT is fully updated
 27613                                  ;                 sf_FIRCLUS field of SFT set if file was null
 27614                                  ;
 27615                                  ;       USES    ALL but SI, BP
 27616                                  
 27617                                  ;callmagic  proc near
 27618                                  ;       push    ds                             ;push segment of routine 
 27619                                  ;       push    Offset MagicPatch              ;push offset for routine
 27620                                  ;       retf                                   ;simulate jmp far
 27621                                  ;                                              ;far return address is on
 27622                                  ;                                              ;stack, so far return from
 27623                                  ;                                              ;call will return this routine
 27624                                  ;callmagic  endp
 27625                                  
 27626                                  ALLOCATE:
 27627                                  	; 10/09/2018
 27628                                  ;BEGIN MAGICDRV MODIFICATIONS
 27629                                  ;
 27630                                  ;7/5/92 scottq
 27631                                  ;
 27632                                  ;This is the disk compression patch location which allows
 27633                                  ;the disk compression software to fail allocations if the
 27634                                  ;FAT would allows allocation, but the free space for compressed
 27635                                  ;data would not.
 27636                                  ;        
 27637                                  ;;;	call    far ptr MAGICPATCH
 27638                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 27639                                  ;;; but we do know the segment and offset of the routine
 27640                                  ;;; so simulate a far call to dosdata:magicpatch
 27641                                  ;;; note dosassume above, so DS -> dosdata
 27642                                  
 27643                                  	; MSDOS 6.0
 27644                                          ;clc				;clear carry so we fall through
 27645                                  	;				;if no patch is present
 27646                                  	;push	cs			;push segment for far return
 27647                                          ;call	callmagic		;this is a near call
 27648                                          ;jnc	short Regular_Allocate_Path
 27649                                  	;jmp	Disk_Full_Return
 27650                                  
 27651                                  ;Regular_Allocate_Path:
 27652                                  	; 20/05/2019 - Retro DOS v4.0
 27653                                  ;END MAGICDRV MODIFICATIONS
 27654                                  
 27655                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27656                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 27657                                  
 27658 00004F19 53                              PUSH    BX                      ; save (bx)
 27659 00004F1A 31DB                            XOR     BX,BX
 27660 00004F1C E82A07                  	call	UNPACK
 27661 00004F1F 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 27662 00004F23 5B                              POP     BX
 27663 00004F24 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 27664                                  
 27665 00004F26 51                              PUSH    CX
 27666 00004F27 53                              PUSH    BX
 27667                                  
 27668 00004F28 89DA                            MOV     DX,BX
 27669                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 27670                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 27671 00004F2A 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 27672 00004F2E 83FB02                          cmp     bx,2
 27673 00004F31 7709                            ja	short FINDFRE
 27674                                  
 27675                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 27676                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 27677                                  
 27678                                  ads1:
 27679                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 27680                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 27681 00004F33 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 27682 00004F39 BB0100                          mov     bx,1                    ; Counter next instruction so first
 27683                                                                          ;       cluster examined is 2
 27684                                  
 27685                                  ;   Scanning both forwards and backwards for a free cluster
 27686                                  ;
 27687                                  ;       (BX) = forwards scan pointer
 27688                                  ;       (CX) = clusters remaining to be allocated
 27689                                  ;       (DX) = current last cluster in file
 27690                                  ;       (TOS) = last cluster of file
 27691                                  
 27692                                  FINDFRE:
 27693 00004F3C 43                              INC     BX
 27694                                  	;cmp	bx,[es:bp+0Dh]
 27695 00004F3D 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 27696 00004F41 7757                    	ja	short ads7	; at end of disk
 27697 00004F43 E80307                          call	UNPACK          ; check out this cluster
 27698 00004F46 722F                            jc	short ads4	; FAT error             [INTERR?]
 27699 00004F48 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 27700                                  
 27701                                  ;   Have found a free cluster. Chain it to the file
 27702                                  ;
 27703                                  ;       (BX) = found free cluster #
 27704                                  ;       (DX) = current last cluster in file
 27705                                  
 27706                                  	;;mov	[es:bp+1Ch],bx
 27707                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 27708 00004F4A 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 27709 00004F4E 92                              xchg    ax,dx           ; save (dx) in ax
 27710 00004F4F BA0100                          mov     dx,1            ; mark this free guy as "1"
 27711 00004F52 E84807                  	call	PACK            ; set special "temporary" mark
 27712 00004F55 7220                            jc	short ads4	; FAT error             [INTERR?]
 27713                                  	;;cmp	word [es:bp+1Eh],-1
 27714                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27715 00004F57 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27716 00004F5C 7404                            JZ	short NO_ALLOC	; No
 27717                                  	;;dec	word [es:bp+1Eh]
 27718                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 27719 00004F5E 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 27720                                  NO_ALLOC:
 27721 00004F62 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 27722 00004F63 87DA                            XCHG    BX,DX
 27723 00004F65 89D0                            MOV     AX,DX
 27724 00004F67 E83307                  	call	PACK            ; link free cluster onto file
 27725                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 27726                                                                  ;    cluster 0 with FIRCLUS value.
 27727 00004F6A 720B                            jc	short ads4	; FAT error [INTERR?]
 27728 00004F6C 93                              xchg    BX,AX           ; (BX) = last one we looked at
 27729 00004F6D 89DA                            mov     dx,bx           ; (dx) = current end of file
 27730 00004F6F E2CB                            LOOP    FINDFRE         ; alloc more if needed
 27731                                  
 27732                                  ;   We've successfully extended the file. Clean up and exit
 27733                                  ;
 27734                                  ;       (BX) = last cluster in file
 27735                                  
 27736 00004F71 BAFFFF                          MOV     DX,0FFFFH
 27737 00004F74 E82607                  	call	PACK            ; mark last cluster EOF
 27738                                  
 27739                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 27740                                  ;   2 whole bytes. Hope its worth it...
 27741                                  ;
 27742                                  ;       'C' set if error
 27743                                  ;       calling (BX) and (CX) pushed on stack
 27744                                  
 27745                                  ads4:   
 27746 00004F77 5B                      	POP     BX
 27747 00004F78 59                              POP     CX              ; Don't need this stuff since we're successful
 27748 00004F79 729D                            jc	short figrec_retn
 27749 00004F7B E8CB06                          call	UNPACK          ; Get first cluster allocated for return
 27750                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 27751 00004F7E 7298                            jc	short figrec_retn
 27752 00004F80 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 27753 00004F83 7293                            jc	short figrec_retn
 27754 00004F85 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 27755 00004F87 09FF                            OR      DI,DI           ; clear 'C'
 27756 00004F89 758D                    	jnz	short figrec_retn ; we were extending an existing file
 27757                                  
 27758                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 27759                                  ;   info
 27760                                  dofastk:
 27761                                  	; 20/05/2019
 27762                                  	; MSDOS 6.0
 27763                                  	;push	dx ; * MSDOS 6.0
 27764                                  	;;mov	dl,[es:bp+0]
 27765                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 27766                                  	;mov	dl,[es:bp]
 27767                                  
 27768                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27769                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 27770                                  	
 27771                                  	; 16/12/2022
 27772                                  	;push	dx ; *
 27773                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 27774                                  	; 15/12/2022
 27775                                  	;mov	dl,[es:bp]
 27776                                  	
 27777                                  	; MSDOS 3.3 & MSDOS 6.0
 27778 00004F8B 06                      	PUSH	ES
 27779 00004F8C C43E[9E05]              	LES     DI,[THISSFT]
 27780                                  	;mov	[es:di+0Bh],bx
 27781 00004F90 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 27782                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 27783                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 27784 00004F94 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 27785 00004F98 07                      	POP	ES
 27786                                  	;retn
 27787                                  
 27788                                  	;pop	dx ; * MSDOS 6.0
 27789                                  
 27790                                  	; 16/12/2022
 27791                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27792                                  	;pop	dx ; *
 27793                                  
 27794 00004F99 C3                      	retn	
 27795                                  
 27796                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 27797                                  ;   of the disk...
 27798                                  
 27799                                  ads7:   
 27800 00004F9A 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 27801 00004F9F 7592                    	jnz	short ads1	; start scan from front of disk
 27802                                  
 27803                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 27804                                  ;   the space back to the free list and tell the caller how much he could have
 27805                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 27806                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 27807                                  ;
 27808                                  ;       (CX) = clusters remaining to be allocated
 27809                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 27810                                  ;       (TOS+1) = # of clusters wanted to allocate
 27811                                  
 27812 00004FA1 5B                              POP     BX              ; (BX) = last cluster of file
 27813 00004FA2 BAFFFF                          MOV     DX,0FFFFH
 27814 00004FA5 E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 27815 00004FA8 58                              POP     AX              ; No. of clusters requested
 27816                                                                  ; Don't "retc". We are setting Carry anyway,
 27817                                                                  ;   Alloc failed, so proceed with return CX
 27818                                                                  ;   setup.
 27819 00004FA9 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 27820 00004FAB E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 27821                                                                  ;   Alloc failed.
 27822                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 27823                                          ; MSDOS 6.0
 27824 00004FAE C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 27825 00004FB3 F9                              STC
 27826 00004FB4 C3                              retn
 27827                                  
 27828                                  ;-----------------------------------------------------------------------
 27829                                  ;
 27830                                  ; Procedure Name : RESTFATBYT
 27831                                  ;
 27832                                  ; SEE ALLOCATE CAVEAT
 27833                                  ;       Carry set if error (currently user FAILed to I 24)
 27834                                  ;-----------------------------------------------------------------------
 27835                                  
 27836                                  RESTFATBYT:
 27837 00004FB5 53                              PUSH    BX
 27838 00004FB6 52                              PUSH    DX
 27839 00004FB7 57                              PUSH    DI
 27840 00004FB8 31DB                            XOR     BX,BX
 27841 00004FBA 8B16[9605]                      MOV     DX,[FATBYT]
 27842 00004FBE E8DC06                  	call	PACK
 27843 00004FC1 5F                              POP     DI
 27844 00004FC2 5A                              POP     DX
 27845 00004FC3 5B                              POP     BX
 27846                                  ; 16/12/2022
 27847                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27848                                  ;RELEASE_flush:
 27849 00004FC4 C3                      	retn
 27850                                  
 27851                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 27852                                  ;---------------------------------------------------------------------------
 27853                                  ;
 27854                                  ; Procedure Name : RELEASE
 27855                                  ;
 27856                                  ; Inputs:
 27857                                  ;       BX = Cluster in file
 27858                                  ;       ES:BP = Base of drive parameters
 27859                                  ; Function:
 27860                                  ;       Frees cluster chain starting with [BX]
 27861                                  ;       Carry set if error (currently user FAILed to I 24)
 27862                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 27863                                  ;
 27864                                  ;-----------------------------------------------------------------------------
 27865                                  
 27866                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27867                                  	; 20/05/2019 - Retro DOS v4.0
 27868                                  RELEASE:
 27869 00004FC5 31D2                            XOR     DX,DX
 27870                                  
 27871                                  	;entry	RELBLKS
 27872                                  RELBLKS:
 27873                                  
 27874                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 27875                                  ;   and free the rest in the chain.
 27876                                  
 27877 00004FC7 E87F06                  	call	UNPACK
 27878 00004FCA 7224                    	jc	short RELEASE_flush
 27879 00004FCC 7422                    	jz	short RELEASE_flush
 27880 00004FCE 89F8                            MOV     AX,DI
 27881 00004FD0 52                              PUSH    DX
 27882 00004FD1 E8C906                  	call	PACK
 27883 00004FD4 5A                              POP     DX
 27884 00004FD5 7219                    	jc	short RELEASE_flush
 27885 00004FD7 09D2                            OR      DX,DX
 27886 00004FD9 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 27887                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 27888                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27889 00004FDB 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27890 00004FE0 7404                            JZ	short NO_DEALLOC	; No
 27891 00004FE2 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 27892                                  NO_DEALLOC:
 27893 00004FE6 89C3                            MOV     BX,AX
 27894 00004FE8 48                              dec     ax              ; check for "1"
 27895 00004FE9 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 27896 00004FEB E84406                  	call	IsEOF
 27897 00004FEE 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 27898                                  
 27899                                  	; 16/12/2022
 27900                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27901                                  ;%if 0
 27902                                  RELEASE_flush:
 27903                                  	; MSDOS 6.0
 27904 00004FF0 268A4600                	mov	al,[es:bp]
 27905                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 27906 00004FF4 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 27907 00004FF5 51                      	push	cx		;  them to be preserved.
 27908 00004FF6 06                      	push	es
 27909 00004FF7 55                      	push	bp
 27910 00004FF8 E86E0B                  	call	FLUSHBUF	; commit buffers for this drive
 27911 00004FFB 5D                      	pop	bp
 27912 00004FFC 07                      	pop	es
 27913 00004FFD 59                      	pop	cx
 27914 00004FFE 5E                      	pop	si
 27915                                  ;%endif
 27916                                  RET12:
 27917 00004FFF C3                      	retn
 27918                                  
 27919                                  ;Break	<GETEOF -- Find the end of a file>
 27920                                  ;------------------------------------------------------------------------
 27921                                  ;
 27922                                  ; Procedure Name : GETEOF
 27923                                  ;
 27924                                  ; Inputs:
 27925                                  ;       ES:BP Points to DPB
 27926                                  ;       BX = Cluster in a file
 27927                                  ;       DS = CS
 27928                                  ; Outputs:
 27929                                  ;       BX = Last cluster in the file
 27930                                  ;       Carry set if error (currently user FAILed to I 24)
 27931                                  ; DI destroyed. No other registers affected.
 27932                                  ;
 27933                                  ;--------------------------------------------------------------------------
 27934                                  
 27935                                  GETEOF:
 27936 00005000 E84606                  	call	UNPACK
 27937 00005003 72FA                            jc	short RET12
 27938 00005005 53                              PUSH    BX
 27939 00005006 89FB                            MOV     BX,DI
 27940 00005008 E82706                  	call	IsEOF
 27941 0000500B 5B                              POP     BX
 27942 0000500C 73F1                            JAE     short RET12
 27943 0000500E 89FB                            MOV     BX,DI
 27944 00005010 EBEE                            JMP     short GETEOF
 27945                                  
 27946                                  ;============================================================================
 27947                                  ; FCB.ASM, MSDOS 6.0, 1991
 27948                                  ;============================================================================
 27949                                  ; 30/07/2018 - Retro DOS v3.0
 27950                                  ; 20/05/2019 - Retro DOS v4.0
 27951                                  
 27952                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 27953                                  ;	NAME	FCB
 27954                                  
 27955                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 27956                                  ;		  filename characters
 27957                                  ;
 27958                                  ;	MakeFcb
 27959                                  ;	NameTrans
 27960                                  ;	PATHCHRCMP
 27961                                  ;	GetLet
 27962                                  ;	UCase
 27963                                  ;	GetLet3
 27964                                  ;	GetCharType
 27965                                  ;	TESTKANJ
 27966                                  ;	NORMSCAN
 27967                                  ;	DELIM
 27968                                  ;
 27969                                  ;	Revision history:
 27970                                  ;
 27971                                  ;		A000  version 4.00  Jan. 1988
 27972                                  ;	
 27973                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 27974                                  
 27975                                  TableLook	EQU	-1
 27976                                  
 27977                                  SCANSEPARATOR	EQU	1
 27978                                  DRVBIT		EQU	2
 27979                                  NAMBIT		EQU	4
 27980                                  EXTBIT		EQU	8
 27981                                  
 27982                                  ;----------------------------------------------------------------------------
 27983                                  ;
 27984                                  ; Procedure : MakeFcb
 27985                                  ;
 27986                                  ;----------------------------------------------------------------------------
 27987                                  
 27988                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27989                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 27990                                  MAKEFCB:
 27991                                  ;hkn; SS override
 27992 00005012 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 27993 00005018 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 27994                                  	;test	al,2
 27995 0000501A A802                    	test	AL,DRVBIT	; Use current drive field if default?
 27996 0000501C 7504                    	JNZ	short DEFDRV
 27997 0000501E 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 27998                                  DEFDRV:
 27999 00005022 47                      	INC	DI
 28000 00005023 B90800                  	MOV	CX,8
 28001                                  	;test	al,4
 28002 00005026 A804                    	test	AL,NAMBIT	; Use current name fields as default?
 28003 00005028 93                      	XCHG	AX,BX		; Save bits in BX
 28004 00005029 B020                    	MOV	AL," "
 28005 0000502B 7404                    	JZ	short FILLB	; If not, go fill with blanks
 28006 0000502D 01CF                    	ADD	DI,CX
 28007 0000502F 31C9                    	XOR	CX,CX		; Don't fill any
 28008                                  FILLB:
 28009 00005031 F3AA                    	REP	STOSB
 28010 00005033 B103                    	MOV	CL,3
 28011 00005035 F6C308                  	test	BL,EXTBIT	; Use current extension as default
 28012 00005038 7404                    	JZ	short FILLB2
 28013 0000503A 01CF                    	ADD	DI,CX
 28014 0000503C 31C9                    	XOR	CX,CX
 28015                                  FILLB2:
 28016 0000503E F3AA                    	REP	STOSB
 28017 00005040 91                      	XCHG	AX,CX		; Put zero in AX
 28018 00005041 AB                      	STOSW
 28019 00005042 AB                      	STOSW			; Initialize two words after to zero
 28020 00005043 83EF10                  	SUB	DI,16		; Point back at start
 28021                                  	;test	bl,1
 28022 00005046 F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 28023 00005049 7409                    	JZ	short SKPSPC
 28024 0000504B E88D00                  	CALL	SCANB		; Peel off blanks and tabs
 28025 0000504E E82701                  	CALL	DELIM		; Is it a one-time-only delimiter?
 28026 00005051 7504                    	JNZ	short NOSCAN
 28027 00005053 46                      	INC	SI		; Skip over the delimiter
 28028                                  SKPSPC:
 28029 00005054 E88400                  	CALL	SCANB		; Always kill preceding blanks and tabs
 28030                                  NOSCAN:
 28031 00005057 E8F500                  	CALL	GETLET
 28032 0000505A 761E                    	JBE	short NODRV	; Quit if termination character
 28033 0000505C 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 28034 0000505F 7519                    	JNZ	short NODRV
 28035 00005061 46                      	INC	SI		; Skip over colon
 28036 00005062 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 28037 00005064 760F                    	JBE	short BADDRV	; Drive letter out of range
 28038                                  
 28039 00005066 50                      	PUSH	AX
 28040 00005067 E8311B                  	call	GetVisDrv
 28041 0000506A 58                      	POP	AX
 28042 0000506B 730A                    	JNC	short HAVDRV
 28043                                  
 28044                                  	; 20/05/2019 - Retro DOS v4.0
 28045                                  	; MSDOS 6.0
 28046                                  ;hkn; SS override
 28047 0000506D 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28048                                  					; if not FAT drive ;AN000;
 28049 00005073 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28050                                  BADDRV:
 28051 00005075 B2FF                    	MOV	DL,-1
 28052                                  HAVDRV:
 28053 00005077 AA                      	STOSB			; Put drive specifier in first byte
 28054 00005078 46                      	INC	SI
 28055 00005079 4F                      	DEC	DI		; Counteract next two instructions
 28056                                  NODRV:
 28057 0000507A 4E                      	DEC	SI		; Back up
 28058 0000507B 47                      	INC	DI		; Skip drive byte
 28059                                  
 28060                                  	;entry	NORMSCAN
 28061                                  NORMSCAN:
 28062 0000507C B90800                  	MOV	CX,8
 28063 0000507F E82700                  	CALL	GETWORD 	; Get 8-letter file name
 28064 00005082 803C2E                  	CMP	BYTE [SI],"."
 28065 00005085 7515                    	JNZ	short NODOT
 28066 00005087 46                      	INC	SI		; Skip over dot if present
 28067                                  
 28068                                  	; MSDOS 6.0
 28069                                  ;hkn; SS override
 28070                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28071                                  	; 10/06/2019
 28072 00005088 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28073 0000508E 7406                    	JZ	short VOLOK				;AN000;
 28074 00005090 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28075 00005091 B90200                  	MOV	CX,2					;AN000;
 28076 00005094 EB03                    	JMP	SHORT contvol				;AN000;
 28077                                  VOLOK:
 28078 00005096 B90300                  	MOV	CX,3		; Get 3-letter extension
 28079                                  contvol:
 28080 00005099 E81300                  	CALL	MUSTGETWORD
 28081                                  NODOT:
 28082 0000509C 88D0                    	MOV	AL,DL
 28083                                  
 28084                                  	; MSDOS 6.0
 28085                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28086                                  	; 18/12/2022
 28087 0000509E 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28088                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28089                                  
 28090 000050A4 C3                      	retn
 28091                                  
 28092                                  NONAM:
 28093 000050A5 01CF                    	ADD	DI,CX
 28094 000050A7 4E                      	DEC	SI
 28095 000050A8 C3                      	retn
 28096                                  
 28097                                  GETWORD:
 28098 000050A9 E8A300                  	CALL	GETLET		
 28099 000050AC 76F7                    	JBE	short NONAM	; Exit if invalid character
 28100 000050AE 4E                      	DEC	SI
 28101                                  
 28102                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 28103                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 28104                                  
 28105                                  MUSTGETWORD:
 28106 000050AF E89D00                  	CALL	GETLET
 28107                                  
 28108                                  ;	If spaceFlag is set then we allow spaces in a pathname
 28109                                  
 28110                                  ;IF NOT TABLELOOK
 28111                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 28112                                  ;ENDIF
 28113 000050B2 750C                    	JNZ	short MustCheckCX
 28114                                  
 28115                                  ;hkn; SS override
 28116 000050B4 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 28117 000050BA 7419                    	JZ	short FILLNAM
 28118 000050BC 3C20                    	CMP	AL," "
 28119 000050BE 7515                    	JNZ	short FILLNAM
 28120                                  
 28121                                  MustCheckCX:
 28122 000050C0 E3ED                    	JCXZ	MUSTGETWORD
 28123 000050C2 49                      	DEC	CX
 28124 000050C3 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 28125 000050C5 7504                    	JNZ	short NOSTAR
 28126 000050C7 B03F                    	MOV	AL,"?"
 28127 000050C9 F3AA                    	REP	STOSB
 28128                                  NOSTAR:
 28129 000050CB AA                      	STOSB
 28130 000050CC 3C3F                    	CMP	AL,"?"
 28131 000050CE 75DF                    	JNZ	short MUSTGETWORD
 28132 000050D0 80CA01                  	OR	DL,1		; Flag ambiguous file name
 28133 000050D3 EBDA                    	JMP	short MUSTGETWORD
 28134                                  FILLNAM:
 28135 000050D5 B020                    	MOV	AL," "
 28136 000050D7 F3AA                    	REP	STOSB
 28137 000050D9 4E                      	DEC	SI
 28138 000050DA C3                      	retn
 28139                                  
 28140                                  SCANB:
 28141 000050DB AC                      	LODSB
 28142 000050DC E8A100                  	CALL	SPCHK
 28143 000050DF 74FA                    	JZ	short SCANB
 28144 000050E1 4E                      	DEC	SI
 28145                                  scanb_retn:
 28146 000050E2 C3                      	retn
 28147                                  
 28148                                  ;----------------------------------------------------------------------------
 28149                                  ;
 28150                                  ; Procedure Name : NameTrans
 28151                                  ;
 28152                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 28153                                  ; allow spaces in pathnames
 28154                                  ;
 28155                                  ;   Inputs:	DS:SI points to start of path element
 28156                                  ;   Outputs:	Name1 has unpacked name, uppercased
 28157                                  ;		ES = DOSGroup
 28158                                  ;		DS:SI advanced after name
 28159                                  ;   Registers modified: DI,AX,DX,CX
 28160                                  ;
 28161                                  ;----------------------------------------------------------------------------
 28162                                  
 28163                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28164                                  	; 20/05/2019 - Retro DOS v4.0
 28165                                  NameTrans:
 28166                                  ;hkn; SS override
 28167 000050E3 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 28168 000050E9 16                      	push	ss
 28169 000050EA 07                      	pop	es
 28170                                  
 28171                                  ;hkn; NAME1 is in DOSDATA
 28172 000050EB BF[4B05]                	MOV	DI,NAME1
 28173 000050EE 57                      	PUSH	DI
 28174 000050EF B82020                  	MOV	AX,'  '
 28175 000050F2 B90500                  	MOV	CX,5
 28176 000050F5 AA                      	STOSB
 28177 000050F6 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 28178 000050F8 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 28179 000050FA 88C2                    	MOV	DL,AL
 28180 000050FC AA                      	STOSB
 28181 000050FD 5F                      	POP	DI
 28182                                  
 28183 000050FE E87BFF                  	CALL	NORMSCAN
 28184                                  
 28185                                  ;hkn; SS override for NAME1
 28186 00005101 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 28187 00005107 75D9                    	jnz	short scanb_retn
 28188 00005109 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 28189 0000510F C3                      	retn
 28190                                  
 28191                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 28192                                  ;============================================================================
 28193                                  
 28194                                  ; 20/05/2019 - Retro DOS v4.0
 28195                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28196                                  
 28197                                  ;If TableLook
 28198                                  
 28199                                  ;hkn; Table	SEGMENT
 28200                                  ;	PUBLIC	CharType
 28201                                  ;----------------------------------------------------------------------------
 28202                                  
 28203                                  ; Character type table for file name scanning
 28204                                  ; Table provides a mapping of characters to validity bits.
 28205                                  ; Four bits are provided for each character. Values 7Dh and above
 28206                                  ; have all bits set, so that part of the table is chopped off, and
 28207                                  ; the translation routine is responsible for screening these values.
 28208                                  ; The bit values are defined in DOSSYM.INC
 28209                                  
 28210                                  ;	      ; ^A and NUL
 28211                                  ;CharType:
 28212                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28213                                  ;	      ; ^C and ^B
 28214                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28215                                  ;	      ; ^E and ^D
 28216                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28217                                  ;	      ; ^G and ^F
 28218                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28219                                  ;	      ; TAB and BS
 28220                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28221                                  ;	      ; ^K and ^J
 28222                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28223                                  ;	      ; ^M and ^L
 28224                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28225                                  ;	      ; ^O and ^N
 28226                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28227                                  ;	      ; ^Q and ^P
 28228                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28229                                  ;	      ; ^S and ^R
 28230                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28231                                  ;	      ; ^U and ^T
 28232                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28233                                  ;	      ; ^W and ^V
 28234                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28235                                  ;	      ; ^Y and ^X
 28236                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28237                                  ;	      ; ESC and ^Z
 28238                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28239                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28241                                  ;	      ; ^_ and ^^
 28242                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28243                                  ;	      ; ! and SPACE
 28244                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 28245                                  ;	      ; # and "
 28246                                  ;	 db   LOW (NOT FFCB+FCHK)
 28247                                  ;	      ; $ - )
 28248                                  ;	 db   3 dup (0FFh)
 28249                                  ;	      ; + and *
 28250                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 28251                                  ;	      ; - and '
 28252                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 28253                                  ;	      ; / and .
 28254                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 28255                                  ;	      ; 0 - 9
 28256                                  ;	 db   5 dup (0FFh)
 28257                                  ;	      ; ; and :
 28258                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28259                                  ;	      ; = and <
 28260                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28261                                  ;	      ; ? and >
 28262                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28263                                  ;	      ; A - Z
 28264                                  ;	 db   13 dup (0FFh)
 28265                                  ;	      ; \ and [
 28266                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 28267                                  ;	      ; ^ and ]
 28268                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28269                                  ;	      ; _ - {
 28270                                  ;	 db   15 dup (0FFh)
 28271                                  ;	      ; } and |
 28272                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28273                                  
 28274                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 28275                                  ;					; character in the table
 28276                                  
 28277                                  ;FCHK	equ 1		; normal name char, no chks needed
 28278                                  ;FDELIM	equ 2		; is a delimiter
 28279                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 28280                                  ;FFCB	equ 8		; is valid in an FCB
 28281                                  
 28282                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28283                                  ;----------------------------------------------------------------------------
 28284                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 28285                                  
 28286                                  CharType: ; 63 bytes
 28287 00005110 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 28288 00005118 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 28289 00005120 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 28290 00005128 FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 28291 00005130 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 28292 00005138 FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 28293 00005140 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 28294 00005148 FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 28295                                  
 28296                                  CharType_last equ ($ - CharType) * 2
 28297                                  
 28298                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 28299                                  ;----------------------------------------------------------------------------
 28300                                  ;CharType:
 28301                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28302                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28303                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28304                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28305                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 28306                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 28307                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28308                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 28309                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28310                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28311                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28312                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 28313                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28314                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28315                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28316                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 28317                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28318                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28319                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28320                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28321                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28322                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28323                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28324                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28325                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28326                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28327                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28328                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28329                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28330                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28331                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28332                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28333                                  
 28334                                  ;hkn; Table	ENDS
 28335                                  
 28336                                  ;ENDIF
 28337                                  
 28338                                  ; 20/05/2019 - Retro DOS v4.0
 28339                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 28340                                  
 28341                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28342                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 28343                                  
 28344                                  ;----------------------------------------------------------------------------
 28345                                  ;
 28346                                  ; Procedure Names : GetLet, UCase, GetLet3
 28347                                  ;
 28348                                  ; These routines take a character, convert it to upper case, and check
 28349                                  ; for delimiters.  Three different entry points:
 28350                                  ;	GetLet -  DS:[SI] = character to convert
 28351                                  ;	UCase  -  AL = character to convert
 28352                                  ;	GetLet3 - AL = character
 28353                                  ;		  [BX] = translation table to use
 28354                                  ;
 28355                                  ;	Exit (in all cases) : AL = upper case character
 28356                                  ;			      CY set if char is control char other than TAB
 28357                                  ;			      ZF set if char is a delimiter
 28358                                  ;	Uses : AX, flags
 28359                                  ;
 28360                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 28361                                  ; inline version.  Return with carry set is only possible in the inline
 28362                                  ; version. The table lookup version is the one in use.
 28363                                  ;
 28364                                  ;----------------------------------------------------------------------------
 28365                                  
 28366                                  ; This entry point has character at [SI]
 28367                                  
 28368                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 28369                                  GETLET:	
 28370 0000514F AC                      	LODSB
 28371                                  
 28372                                  ; This entry point has character in AL
 28373                                  
 28374                                  	;entry	UCase
 28375                                  UCase:	
 28376                                  	; 09/08/2018
 28377                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 28378                                  _UCase:
 28379 00005150 53                      	PUSH	BX
 28380 00005151 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 28381                                  
 28382                                  ; Convert the character in AL to upper case
 28383                                  
 28384                                  gl_0:
 28385 00005154 3C61                    	CMP	AL,"a"
 28386 00005156 7214                    	JB	short gl_2	; Already upper case, go check type
 28387 00005158 3C7A                    	CMP	AL,"z"
 28388 0000515A 7702                    	JA	short gl_1
 28389 0000515C 2C20                    	SUB	AL,20H		; Convert to upper case
 28390                                  
 28391                                  ; Map European character to upper case
 28392                                  
 28393                                  gl_1:
 28394 0000515E 3C80                    	CMP	AL,80H
 28395 00005160 720A                    	JB	short gl_2	; Not EuroChar, go check type
 28396 00005162 2C80                    	SUB	AL,80H		; translate to upper case with this index
 28397                                  
 28398                                  	; M048 - Start 
 28399                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 28400                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 28401                                  	; preserve it.
 28402                                  
 28403                                  	; 09/08/2018 - Retro DOS v3.0
 28404                                  	; MSDOS 3.3
 28405                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 28406                                  	;CS	XLAT
 28407                                  
 28408                                  	; 20/05/2019 - Retro DOS v4.0
 28409                                  
 28410                                  	; MSDOS 6.0
 28411 00005164 1E                      	push	ds
 28412                                  	;getdseg <ds>
 28413 00005165 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 28414 0000516A D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 28415 0000516B 1F                      	pop	ds
 28416                                  
 28417                                  	; M048 - End
 28418                                  
 28419                                  ; Now check the type
 28420                                  
 28421                                  ;If TableLook
 28422                                  gl_2:
 28423                                  	; 20/05/2019 - Retro DOS v4.0
 28424 0000516C 50                      	PUSH	AX
 28425                                  
 28426                                  	; MSDOS 3.3
 28427                                  	;mov	bx,CharType
 28428                                  	;; 09/08/2018
 28429                                  	;;xlat	byte [cs:bx]
 28430                                  	;cs	xlat	
 28431                                  	
 28432                                  	; MSDOS 6.0
 28433 0000516D E81800                  	CALL	GetCharType	; returns type flags in AL
 28434                                  	
 28435                                  	;test	al,1	
 28436 00005170 A801                    	TEST	AL,FCHK 	; test for normal character
 28437 00005172 58                      	POP	AX
 28438 00005173 5B                      	POP	BX
 28439 00005174 C3                      	RETN
 28440                                  
 28441                                  ; This entry has character in AL and lookup table in BX
 28442                                  
 28443                                  	; MSDOS 6.0
 28444                                  ;	;entry GetLet3
 28445                                  GETLET3: ; 10/08/2018
 28446 00005175 53                      	PUSH	BX
 28447 00005176 EBDC                    	JMP	short gl_0
 28448                                  ;ELSE
 28449                                  ;
 28450                                  ;gl_2:
 28451                                  ;	POP	BX
 28452                                  ;	CMP	AL,"."
 28453                                  ;	retz
 28454                                  ;	CMP	AL,'"'
 28455                                  ;	retz
 28456                                  ;	CALL	PATHCHRCMP
 28457                                  ;	retz
 28458                                  ;	CMP	AL,"["
 28459                                  ;	retz
 28460                                  ;	CMP	AL,"]"
 28461                                  ;	retz
 28462                                  ;ENDIF
 28463                                  
 28464                                  ;---------------------------------------------------------------------
 28465                                  ;
 28466                                  ; DELIM - check if character is a delimiter
 28467                                  ;	Entry : AX = character to check
 28468                                  ;	Exit  : ZF set if character is not a delimiter
 28469                                  ;	Uses  : Flags
 28470                                  ;
 28471                                  ;--------------------------------------------------------------------
 28472                                  
 28473                                  	;entry	DELIM
 28474                                  DELIM:
 28475                                  ;IF TableLook
 28476                                  	; 20/05/2019 - Retro DOS v4.0
 28477 00005178 50                      	PUSH	AX
 28478                                  
 28479                                  	; MSDOS 3.3
 28480                                  	;push	bx
 28481                                  	;mov	bx,CharType
 28482                                  	;;09/08/2018
 28483                                  	;;xlat	byte [cs:bx]
 28484                                  	;cs	xlat
 28485                                  	;pop	bx
 28486                                  
 28487                                  	; MSDOS 6.0
 28488 00005179 E80C00                  	CALL	GetCharType
 28489                                  	
 28490                                  	;test	al,2
 28491 0000517C A802                    	TEST	AL,FDELIM
 28492 0000517E 58                      	POP	AX
 28493 0000517F C3                      	RETN
 28494                                  ;ELSE
 28495                                  ;	CMP	AL,":"
 28496                                  ;	retz
 28497                                  ;
 28498                                  ;	CMP	AL,"<"
 28499                                  ;	retz
 28500                                  ;	CMP	AL,"|"
 28501                                  ;	retz
 28502                                  ;	CMP	AL,">"
 28503                                  ;	retz
 28504                                  ;
 28505                                  ;	CMP	AL,"+"
 28506                                  ;	retz
 28507                                  ;	CMP	AL,"="
 28508                                  ;	retz
 28509                                  ;	CMP	AL,";"
 28510                                  ;	retz
 28511                                  ;	CMP	AL,","
 28512                                  ;	retz
 28513                                  ;ENDIF
 28514                                  
 28515                                  ;-------------------------------------------------------------------------
 28516                                  ;
 28517                                  ;  SPCHK - checks to see if a character is a space or equivalent
 28518                                  ;	Entry : AL = character to check
 28519                                  ;	Exit  : ZF set if character is a space
 28520                                  ;	Uses  : flags
 28521                                  ;
 28522                                  ;-------------------------------------------------------------------------
 28523                                  
 28524                                  	;entry SPCHK
 28525                                  SPCHK:
 28526                                  ;IF TableLook
 28527                                  	; 20/05/2019 - Retro DOS v4.0
 28528 00005180 50                      	PUSH	AX
 28529                                  
 28530                                  	; MSDOS 3.3
 28531                                  	;push	bx
 28532                                  	;mov	bx,CharType
 28533                                  	;; 09/08/2018
 28534                                  	;;xlat	byte [cs:bx]
 28535                                  	;cs	xlat
 28536                                  	;pop	bx
 28537                                  
 28538                                  	; MSDOS 6.0
 28539 00005181 E80400                  	CALL	GetCharType
 28540                                  	
 28541                                  	;test	al,4
 28542 00005184 A804                    	TEST	AL,FSPCHK
 28543 00005186 58                      	POP	AX
 28544 00005187 C3                      	RETN
 28545                                  ;ELSE
 28546                                  ;	CMP	AL,9		; Filter out tabs too
 28547                                  ;	retz
 28548                                  ;; WARNING! " " MUST be the last compare
 28549                                  ;	CMP	AL," "
 28550                                  ;	return
 28551                                  ;ENDIF
 28552                                  
 28553                                  ;-------------------------------------------------------------------------
 28554                                  ;
 28555                                  ;  GetCharType - return flag bits indicating character type
 28556                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 28557                                  ;	defined above at label CharType.
 28558                                  ;
 28559                                  ;	Entry : AL = character to return type flags for
 28560                                  ;	Exit  : AL = type flags
 28561                                  ;	Uses  : AL, flags
 28562                                  ;
 28563                                  ;-------------------------------------------------------------------------
 28564                                  
 28565                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28566                                  
 28567                                  	; 20/05/2019 - Retro DOS v4.0
 28568                                  	; MSDOS 6.0
 28569                                  GetCharType:
 28570                                  	;cmp	al,7Eh
 28571 00005188 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 28572 0000518A 7316                    	jae	short gct_90		; return standard value
 28573                                  
 28574 0000518C 53                      	push	bx
 28575 0000518D BB[1051]                	mov	bx,CharType		; load lookup table
 28576 00005190 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 28577                                  	;xlat	cs:[bx] 		; get flags
 28578 00005192 2ED7                    	cs	xlat	
 28579 00005194 5B                      	pop	bx
 28580                                  
 28581                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 28582                                  ; we have to shift the flags down to the low nibble
 28583                                  
 28584 00005195 7308                    	jnc	short gct_80		; carry clear, no shift needed
 28585                                  
 28586 00005197 D0E8                    	shr	al,1			; we want high nibble, shift it down
 28587 00005199 D0E8                    	shr	al,1
 28588 0000519B D0E8                    	shr	al,1
 28589 0000519D D0E8                    	shr	al,1
 28590                                  gct_80:
 28591 0000519F 240F                    	and	al,0Fh			; clear the unused nibble
 28592 000051A1 C3                      	retn
 28593                                  gct_90:
 28594 000051A2 B00F                    	mov	al,0Fh			; set all flags
 28595 000051A4 C3                      	retn
 28596                                  
 28597                                  ;----------------------------------------------------------------------------
 28598                                  ;
 28599                                  ; Procedure : PATHCHRCMP
 28600                                  ;
 28601                                  ;----------------------------------------------------------------------------
 28602                                  
 28603                                  PATHCHRCMP:
 28604 000051A5 3C2F                    	CMP	AL,'/'
 28605 000051A7 7606                    	JBE	short PathRet
 28606 000051A9 3C5C                    	CMP	AL,'\'
 28607 000051AB C3                      	retn
 28608                                  GotFor:
 28609 000051AC B05C                    	MOV	AL,'\'
 28610 000051AE C3                      	retn
 28611                                  PathRet:
 28612 000051AF 74FB                    	JZ	short GotFor
 28613 000051B1 C3                      	retn
 28614                                  
 28615                                  ;============================================================================
 28616                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 28617                                  ;============================================================================
 28618                                  ; 30/07/2018 - Retro DOS v3.0
 28619                                  ; 29/04/2019 - Retro DOS v4.0
 28620                                  
 28621                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 28622                                  
 28623                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 28624                                  
 28625                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 28626                                  ;	NAME	IBMCTRLC
 28627                                  
 28628                                  ;**	Low level routines for detecting special characters on CON input,
 28629                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 28630                                  ;	process termination code, and the INT 0 divide overflow handler.
 28631                                  ;
 28632                                  ;	FATAL
 28633                                  ;	FATAL1
 28634                                  ;	reset_environment
 28635                                  ;	DSKSTATCHK
 28636                                  ;	SPOOLINT
 28637                                  ;	STATCHK
 28638                                  ;	CNTCHAND
 28639                                  ;	DIVOV
 28640                                  ;	CHARHARD
 28641                                  ;	HardErr
 28642                                  ;
 28643                                  ;	Revision history:
 28644                                  ;
 28645                                  ;	    AN000	version 4.0   Jan 1988
 28646                                  ;	    A002	PTM    -- dir >lpt3 hangs
 28647                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 28648                                  ;
 28649                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 28650                                  ;	      flags register. In order to return to user normally DOS used to
 28651                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 28652                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 28653                                  ;
 28654                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 28655                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 28656                                  ;	      charhard.
 28657                                  
 28658                                  ; 29/04/2019 - Retro DOS v4.0
 28659                                  	; MSDOS 6.0
 28660                                  ;		public	LowInt23Addr		
 28661                                  LowInt23Addr: ;	LABEL	DWORD
 28662 000051B2 [E710]0000              	DW	LowInt23, 0
 28663                                  
 28664                                  ;		public	LowInt24Addr
 28665                                  LowInt24Addr: ;	LABEL	DWORD
 28666 000051B6 [FB10]0000              	DW	LowInt24, 0
 28667                                  
 28668                                  ;		public	LowInt28Addr
 28669                                  LowInt28Addr: ;	LABEL	DWORD
 28670 000051BA [0F11]0000              	DW	LowInt28, 0
 28671                                  
 28672                                  ;Break	<Checks for ^C in CON I/O>
 28673                                  
 28674                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28675                                  ; 05/05/2019 - Retro DOS v4.0
 28676                                  
 28677                                  ;---------------------------------------------------------------------------
 28678                                  ;
 28679                                  ; Procedure Name : DSKSTATCHK
 28680                                  ;
 28681                                  ; Check for ^C if only one level in
 28682                                  ;
 28683                                  ;---------------------------------------------------------------------------
 28684                                  
 28685                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 28686                                  
 28687                                  DSKSTATCHK:        
 28688                                  	;CMP	BYTE [INDOS],1
 28689 000051BE 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 28690                                  	;retnz			; Do NOTHING
 28691                                  	; 16/12/2022
 28692 000051C4 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 28693                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28694                                  	;jz	short _RET37 ; dskstatchk1
 28695                                  	;retn
 28696                                  ;_RET37:
 28697                                  ;dskstatchk1:
 28698 000051C6 51                      	PUSH    CX
 28699 000051C7 06                              PUSH    ES
 28700 000051C8 53                              PUSH    BX
 28701 000051C9 1E                              PUSH    DS
 28702 000051CA 56                              PUSH    SI
 28703                                          
 28704                                  	;PUSH	CS
 28705                                          ;POP	ES
 28706                                          ;PUSH	CS
 28707                                          ;POP	DS
 28708                                  
 28709 000051CB 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 28710 000051CD 8EC3                    	MOV	ES,BX		; for deviocall2
 28711 000051CF 8EDB                    	MOV	DS,BX
 28712                                  
 28713                                  	; 16/12/2022
 28714                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28715                                  
 28716                                  	; 05/05/2019
 28717                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 28718                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 28719                                  	;mov	word [ss:DSKSTST],0
 28720                                  
 28721                                  	; 16/12/2022
 28722                                  	; 25/06/2019
 28723 000051D1 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 28724 000051D6 C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 28725 000051DB C706[9503]0000          	mov	word [DSKSTST],0
 28726                                  
 28727 000051E1 BB[9203]                        MOV     BX,DSKSTCALL
 28728                                  
 28729                                  	;LDS	SI,[ss:BCON]
 28730                                          ; 25/062019
 28731 000051E4 C536[3200]              	lds	si,[BCON]
 28732                                  
 28733                                  ; 16/12/2022
 28734                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28735                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 28736                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 28737                                  ;	mov	word [ss:DSKSTST],0
 28738                                  ;	mov	bx,DSKSTCALL
 28739                                  ;	lds	si,[ss:BCON]
 28740                                  
 28741 000051E8 E866F5                  	CALL	DEVIOCALL2
 28742                                   	; 15/03/2018
 28743                                  	;;test	word [ss:DSKSTST],200h
 28744                                          ;TEST	WORD [SS:DSKSTST],STBUI
 28745                                  	; 05/05/2019
 28746 000051EB 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 28747 000051F1 7408                    	jz	short _GotCh		; No characters available
 28748                                  
 28749 000051F3 30C0                            XOR     AL,AL                   ; Set zero
 28750                                  RET36:
 28751 000051F5 5E                              POP     SI
 28752 000051F6 1F                              POP     DS
 28753 000051F7 5B                              POP     BX
 28754 000051F8 07                              POP     ES
 28755 000051F9 59                              POP     CX
 28756                                  	; 16/12/2022
 28757                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28758                                  _RET37:
 28759 000051FA C3                              RETN
 28760                                  
 28761                                  _GotCh:
 28762 000051FB 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 28763                                  
 28764 000051FF 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 28765 00005201 75F2                            JNZ     SHORT RET36
 28766 00005203 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 28767 00005209 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 28768 0000520F 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 28769                                  	; 09/09/2018
 28770 00005214 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 28771 0000521B 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 28772 00005222 E82CF5                  	CALL	DEVIOCALL2              ; Eat the ^C
 28773 00005225 5E                              POP     SI
 28774 00005226 1F                              POP     DS
 28775 00005227 5B                              POP     BX                      ; Clean stack
 28776 00005228 07                              POP     ES
 28777 00005229 59                              POP     CX
 28778 0000522A E9D000                          JMP	CNTCHAND ; 10/08/2018
 28779                                  
 28780                                  	; 05/05/2019
 28781                                  NOSTOP:
 28782                                  	; MSDOS 6.0
 28783 0000522D 3C10                    	CMP	AL,"P"-"@"
 28784 0000522F 7509                    	JNZ	short check_next
 28785                                  				    	; SS override
 28786 00005231 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 28787 00005237 7406                    	JZ	short INCHKJ		; no
 28788 00005239 C3                      	retn
 28789                                  check_next:
 28790                                  	;IF	NOT TOGLPRN
 28791                                  	;CMP	AL,"N"-"@"
 28792                                  	;JZ	short INCHKJ
 28793                                  	;ENDIF
 28794                                  
 28795 0000523A 3C03                    	CMP	AL,"C"-"@"
 28796 0000523C 7401                    	JZ	short INCHKJ
 28797                                  check_end:
 28798 0000523E C3                      	retn
 28799                                  
 28800                                  	; MSDOS 3.3
 28801                                          ;CMP     AL,"P"-"@"  ; cmp al,16	
 28802                                          ;JZ	short INCHKJ
 28803                                  
 28804                                  	; 15/04/2018
 28805                                          ;;IF	NOT TOGLPRN
 28806                                          ;CMP	AL,"N"-"@"
 28807                                          ;JZ	SHORT INCHKJ
 28808                                          ;;ENDIF
 28809                                  	
 28810                                  	;CMP     AL,"C"-"@"  ; cmp al,3	
 28811                                          ;JZ	short INCHKJ
 28812                                  	;RETN
 28813                                  
 28814                                  	; 08/09/2018
 28815                                  INCHKJ:	; 10/08/2018
 28816 0000523F E9A500                  	JMP	INCHK
 28817                                  
 28818                                  ;----------------------------------------------------------------------------
 28819                                  ;
 28820                                  ; Procedure Name : SpoolInt
 28821                                  ;
 28822                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 28823                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 28824                                  ; the middle of an INT 24.
 28825                                  ;
 28826                                  ;----------------------------------------------------------------------------
 28827                                  
 28828                                  SPOOLINT:
 28829 00005242 9C                              PUSHF
 28830                                  	; 15/03/2018
 28831 00005243 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 28832 00005249 7423                            JZ      SHORT POPFRET
 28833 0000524B 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 28834 00005251 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 28835                                  
 28836                                  	; 30/07/2018
 28837                                  
 28838                                  	; Note that we are going to allow an external program to issue system 
 28839                                  	; calls at this time. We MUST preserve IdleInt across this.
 28840                                  
 28841 00005253 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 28842                                  
 28843                                  	; 05/05/2019 - Retro DOS v4.0
 28844                                   
 28845                                  	; MSDOS 6.0
 28846 00005258 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 28847 0000525E 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 28848 00005260 CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 28849 00005262 EB05                    	jmp	short spool_ret_addr
 28850                                  
 28851                                  do_low_int28:
 28852                                  	;call	far [ss:LowInt28Addr]
 28853 00005264 2EFF1E[BA51]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 28854                                  
 28855                                  spool_ret_addr:
 28856                                  	;INT	int_spooler		; INT 28h
 28857                                  
 28858 00005269 368F06[5803]            	POP	WORD [SS:IDLEINT]
 28859                                  POPFRET:
 28860 0000526E 9D                              POPF
 28861                                  _RET18:  
 28862 0000526F C3                      	RETN
 28863                                  
 28864                                  ; 05/05/2019 - Retro DOS v4.0
 28865                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 28866                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28867                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 28868                                  
 28869                                  ;----------------------------------------------------------------------------
 28870                                  ;
 28871                                  ; Procedure Name : STATCHK
 28872                                  ;
 28873                                  ;----------------------------------------------------------------------------
 28874                                  
 28875                                  STATCHK:
 28876 00005270 E84BFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 28877                                                                          ; input redirection
 28878 00005273 53                              PUSH    BX
 28879 00005274 31DB                            XOR     BX,BX
 28880 00005276 E88CE4                          CALL	GET_IO_SFT
 28881 00005279 5B                              POP     BX
 28882 0000527A 72F3                            JC      SHORT _RET18
 28883                                  
 28884 0000527C B401                            MOV     AH,1
 28885 0000527E E8F9F2                          CALL	IOFUNC
 28886 00005281 74BF                            JZ      SHORT SPOOLINT
 28887 00005283 3C13                            CMP     AL,'S'-'@'
 28888 00005285 75A6                            JNZ     SHORT NOSTOP
 28889                                  
 28890                                  	; 05/05/2019
 28891                                  	; MSDOS 6.0			; SS override
 28892 00005287 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 28893 0000528D 75AF                    	JNZ	short check_end		; AN000; yes
 28894                                  
 28895 0000528F 30E4                            XOR     AH,AH
 28896 00005291 E8E6F2                          CALL	IOFUNC                  ; Eat Cntrl-S
 28897 00005294 EB4A                            JMP     SHORT PAUSOSTRT
 28898                                  PRINTOFF:
 28899                                  PRINTON:
 28900 00005296 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 28901                                  
 28902                                  	; 30/07/2018 - Retro DOS v3.0
 28903 0000529B 53                      	PUSH	BX
 28904 0000529C BB0400                  	MOV	BX,4
 28905 0000529F E863E4                  	call	GET_IO_SFT
 28906 000052A2 5B                      	POP	BX
 28907 000052A3 72CA                    	jc	short _RET18
 28908 000052A5 06                      	PUSH	ES
 28909 000052A6 57                      	PUSH	DI
 28910 000052A7 1E                      	PUSH	DS
 28911 000052A8 07                      	POP	ES
 28912 000052A9 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 28913                                  	;test	word [es:di+5],800h
 28914                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 28915                                  	; 05/05/2019
 28916 000052AB 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 28917 000052B0 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 28918                                  
 28919                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 28920                                  					; See if allowed
 28921 000052B2 50                      	push	ax
 28922 000052B3 B82611                  	mov	ax,1126h
 28923 000052B6 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 28924                                  			; Return: CF set on error, AX = error code
 28925                                  			; STACK unchanged
 28926 000052B8 58                      	pop	ax
 28927                                  
 28928 000052B9 730F                    	JNC	short NORM_PR 		; Echo is OK
 28929                                  
 28930                                  					; SS override
 28931 000052BB 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 28932                                  
 28933                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 28934                                  
 28935 000052C1 50                      	push    ax
 28936 000052C2 B82411                  	mov     ax,1124h
 28937 000052C5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 28938                                  			; ES:DI -> SFT, SS = DOS CS
 28939 000052C7 58                      	pop     ax
 28940                                  
 28941 000052C8 EB10                    	JMP	SHORT RETP6
 28942                                  NORM_PR:
 28943 000052CA 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 28944 000052D0 7505                    	JNZ	short PRNOPN
 28945 000052D2 E800F4                  	call	DEV_CLOSE_SFT
 28946 000052D5 EB03                    	JMP	SHORT RETP6
 28947                                  PRNOPN:
 28948 000052D7 E8F3F3                  	call	DEV_OPEN_SFT
 28949                                  RETP6:
 28950 000052DA 5F                      	POP	DI
 28951 000052DB 07                      	POP	ES
 28952                                  STATCHK_RETN:
 28953 000052DC C3                              RETN
 28954                                  PAUSOLP:
 28955 000052DD E862FF                          CALL    SPOOLINT
 28956                                  PAUSOSTRT:
 28957 000052E0 B401                            MOV     AH,1
 28958 000052E2 E895F2                          CALL	IOFUNC
 28959 000052E5 74F6                            JZ      SHORT PAUSOLP
 28960                                  INCHK:
 28961 000052E7 53                              PUSH    BX
 28962 000052E8 31DB                            XOR     BX,BX
 28963 000052EA E818E4                          CALL	GET_IO_SFT
 28964 000052ED 5B                              POP     BX
 28965 000052EE 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 28966 000052F0 30E4                            XOR     AH,AH
 28967 000052F2 E885F2                          CALL	IOFUNC
 28968                                  	; 30/07/2018
 28969                                  	; MSDOS 3.3
 28970                                          ;CMP	AL,'P'-'@' ;cmp al,16
 28971                                          ;JNZ	SHORT NOPRINT
 28972                                  
 28973                                  	;cmp	byte [SS:SCAN_FLAG],0
 28974                                  	;JZ	SHORT PRINTON	
 28975                                  	;mov	byte [ss:SCAN_FLAG],0
 28976                                  
 28977                                  	; 05/05/2019
 28978                                  	; MSDOS 6.0
 28979 000052F5 3C10                    	CMP	AL,"P"-"@"
 28980                                  	;;;;  7/14/86	ALT_Q key fix
 28981 000052F7 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 28982                                  ;NOPRINT:	
 28983                                  	;IF	NOT TOGLPRN
 28984                                  	;CMP	AL,"N"-"@"
 28985                                  	;JZ	short PRINTOFF
 28986                                  	;ENDIF
 28987 000052F9 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 28988                                  	;retnz
 28989 000052FB 75DF                    	jnz	short STATCHK_RETN
 28990                                  
 28991                                  	; !! NOTE: FALL THROUGH !!
 28992                                  
 28993                                  ;---------------------------------------------------------------------------
 28994                                  ;
 28995                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 28996                                  ;
 28997                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 28998                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 28999                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 29000                                  ; processing to continue; 2) the original interrupt return address to the code
 29001                                  ; that performed the function call in the first place. If the user CTRL-C
 29002                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 29003                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 29004                                  ; is simulated.
 29005                                  ;
 29006                                  ;---------------------------------------------------------------------------
 29007                                  
 29008                                  CNTCHAND:
 29009                                  	; MSDOS 6.0			; SS override
 29010                                  					; AN002; from RAWOUT
 29011                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 29012                                  	;JNZ	short around_deadlock 	; AN002;
 29013                                  
 29014                                  	; 05/05/2019 - Retro DOS v4.0
 29015 000052FD 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 29016 00005303 7508                    	JNZ	short around_deadlock 	; AN002;
 29017                                  
 29018 00005305 B003                            MOV     AL,3			; Display "^C"
 29019 00005307 E86DC4                          CALL	BUFOUT
 29020 0000530A E808C3                          CALL	CRLF
 29021                                  around_deadlock:
 29022 0000530D 16                              PUSH    SS
 29023 0000530E 1F                              POP     DS
 29024 0000530F 803E[5703]00                    CMP     BYTE [CONSWAP],0
 29025 00005314 7403                            JZ      SHORT NOSWAP
 29026 00005316 E856E0                          CALL	SWAPBACK
 29027                                  NOSWAP:
 29028 00005319 FA                      	CLI				; Prepare to play with stack
 29029 0000531A 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 29030 0000531E 8B26[8405]              	MOV	SP,[USER_SP]
 29031 00005322 E86FB1                          CALL	restore_world       ; User registers now restored
 29032                                  
 29033                                  	; 30/07/2018 - Retro DOS v3.0 
 29034                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 29035                                          ; 14/03/2018 - Retro DOS v2.0
 29036                                  	;MOV	BYTE [CS:INDOS],0	
 29037                                          ;MOV	BYTE [CS:ERRORMODE],0
 29038                                          ;MOV	[CS:ConC_Spsave],SP
 29039                                  	;clc	;30/07/2018
 29040                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 29041                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 29042                                  			; Return: return via RETF 2 with CF set
 29043                                  			; DOS will abort program with errorlevel 0
 29044                                  			; else
 29045                                  			; interrupted DOS call continues
 29046                                  
 29047                                  	; 05/05/2019 - Retro DOS v4.0
 29048                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29049                                  
 29050                                  	; CS was used to address these variables. We have to use DOSDATA
 29051                                  	
 29052 00005325 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29053                                  			; (pop es, after 'call restore_world')	
 29054 00005326 1E                      	push	ds
 29055                                  	;getdseg <ds>			; ds -> dosdata
 29056 00005327 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29057 0000532C C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29058 00005331 C606[2003]00            	mov	byte [ERRORMODE],0
 29059 00005336 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29060                                  	; User SP has changed because of push. Adjust for it
 29061 0000533A 8306[3203]02            	add	word [ConC_Spsave],2
 29062                                  
 29063 0000533F 803E[1112]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29064 00005344 1F                       	pop	ds	; restore ds
 29065 00005345 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29066 00005347 F8                      	CLC				
 29067 00005348 CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29068 0000534A EB06                    	jmp	short ctrlc_ret_addr
 29069                                  
 29070                                  	; 05/05/2019
 29071                                  do_low_int23:
 29072 0000534C F8                      	clc
 29073 0000534D 2EFF1E[B251]            	call	far [cs:LowInt23Addr]	
 29074                                  
 29075                                  	; 30/07/2018 
 29076                                  
 29077                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29078                                  
 29079                                  ; The user has returned to us. The circumstances we allow are:
 29080                                  ;
 29081                                  ;   IRET	We retry the operation by redispatching the system call
 29082                                  ;   CLC/RETF	POP the stack and retry
 29083                                  ;   ... 	Exit the current process with ^C exit
 29084                                  ;
 29085                                  ; User's may RETURN to us and leave interrupts on. 
 29086                                  ; Turn 'em off just to be sure
 29087                                  
 29088                                  ctrlc_ret_addr: ; 05/05/2019
 29089                                  
 29090 00005352 FA                      	CLI
 29091                                  
 29092                                  	; MSDOS 3.3 
 29093                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 29094                                  	;PUSHF				; and the flags (maybe new call)
 29095                                  	;POP	AX
 29096                                  
 29097                                  	; 05/05/2019
 29098                                  	; MSDOS 6.0
 29099                                  
 29100                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 29101                                  
 29102 00005353 50                      	push	ax
 29103 00005354 8CD8                    	mov	ax,ds
 29104                                  	;getdseg <ds>			; ds -> dosdata
 29105 00005356 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29106 0000535B A3[0A0D]                	mov	[TEMPSEG],ax
 29107 0000535E 58                      	pop	ax
 29108 0000535F A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 29109 00005362 9C                      	pushf				; and the flags (maybe new call)
 29110 00005363 58                      	pop	ax
 29111                                  
 29112                                  ; See if the input stack is identical to the output stack
 29113                                  
 29114                                  	; MSDOS 3.3
 29115                                  	;CMP	SP,[CS:ConC_Spsave]
 29116                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29117                                  
 29118                                  	; MSDOS 6.0
 29119 00005364 3B26[3203]              	CMP	SP,[ConC_Spsave]
 29120 00005368 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29121                                  
 29122                                  ; Repeat the operation by redispatching the system call.
 29123                                  
 29124                                  ctrlc_repeat:
 29125                                  	; MSDOS 3.3
 29126                                  	;MOV	AX,[CS:USER_IN_AX]
 29127                                  	; 05/05/2019
 29128                                  	; MSDOS 6.0
 29129 0000536A A1[3A03]                	mov	ax,[USER_IN_AX]
 29130 0000536D 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 29131                                  	; MSDOS 3.3 & MSDOS 6.0 
 29132                                  	;transfer COMMAND
 29133                                  COMMANDJ:
 29134 00005371 E9D3AF                  	JMP	COMMAND
 29135                                  
 29136                                  ; The current SP is NOT the same as the input SP. Presume that he 
 29137                                  ; RETF'd leaving some flags on the stack and examine the input
 29138                                  
 29139                                  ctrlc_try_new:
 29140 00005374 83C402                  	ADD	SP,2			; pop those flags
 29141                                  	;;test	ax,1
 29142                                  	;TEST	AX,f_Carry		; did he return with carry?
 29143 00005377 A801                    	test	al,f_Carry ; test al,1
 29144 00005379 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 29145                                  
 29146                                  	; MSDOS 6.0
 29147 0000537B 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 29148                                  
 29149                                  	; Well...  time to abort the user.  
 29150                                  	; Signal a ^C exit and use the EXIT system call..
 29151                                  
 29152                                  ctrlc_abort:
 29153                                  	; MSDOS 3.3
 29154                                          ;;MOV	AX,(EXIT SHL 8) + 0
 29155                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 29156                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 29157                                          ;transfer COMMAND	    ; give up by faking $EXIT
 29158                                  	;;JMP	SHORT COMMANDJ
 29159                                  	;JMP	COMMAND
 29160                                  
 29161                                  	; 05/05/2019 - Retro DOS v4.0
 29162                                  	; MSDOS 6.0
 29163 0000537F B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 29164 00005382 1E                      	push	ds
 29165                                  	;getdseg <ds>			; ds -> dosdata
 29166 00005383 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 29167 00005388 C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 29168 0000538D 1F                      	pop	ds
 29169                                  	;transfer COMMAND		; give up by faking $EXIT
 29170 0000538E EBE1                    	JMP	SHORT COMMANDJ
 29171                                  	;JMP	COMMAND
 29172                                  
 29173                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 29174                                  ;----------------------------------------------------------------------------
 29175                                  ;
 29176                                  ; Procedure Name : DIVOV
 29177                                  ;
 29178                                  ; Default handler for division overflow trap
 29179                                  ;
 29180                                  ;----------------------------------------------------------------------------
 29181                                  
 29182                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29183                                  DIVOV: 
 29184                                  	; 05/05/2019 - Retro DOS v4.0
 29185                                  	; 30/07/2018
 29186                                  	; 07/07/2018 - Retro DOS v3.0
 29187 00005390 BE[F109]                	mov	si,DIVMES
 29188 00005393 2E8B1E[040A]            	mov	bx,[cs:DivMesLen]
 29189                                  	;mov	ax,cs
 29190                                  	;mov	ss,ax
 29191                                  	; 05/05/2019
 29192                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 29193 00005398 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 29194 0000539D BC[A007]                	mov     sp,AUXSTACK
 29195                                  	;call	RealDivOv ; MSDOS 3.3
 29196 000053A0 E80200                  	call	_OUTMES ; MSDOS 6.0
 29197 000053A3 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 29198                                  
 29199                                  ; 30/07/2018
 29200                                  
 29201                                  ; MSDOS 6.0
 29202                                  ;---------------------------------------------------------------------------
 29203                                  ;
 29204                                  ; Procedure Name : OutMes
 29205                                  ;
 29206                                  ;
 29207                                  ; OutMes: perform message output
 29208                                  ; Inputs:   SS:SI points to message
 29209                                  ;	    BX has message length
 29210                                  ; Outputs:  message to BCON
 29211                                  ;
 29212                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29213                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29214                                  ;NB. This procedure is called only from DIVOV. -SR
 29215                                  ;
 29216                                  ;---------------------------------------------------------------------------
 29217                                  
 29218                                  ;MSDOS 3.3
 29219                                  ;---------------------------------------------------------------------------
 29220                                  ; RealDivOv: perform actual divide overflow stuff.
 29221                                  ; Inputs:   none
 29222                                  ; Outputs:  message to BCON
 29223                                  ;---------------------------------------------------------------------------
 29224                                  
 29225                                  	; 05/05/2019 - Retro DOS v4.0
 29226                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 29227                                  
 29228                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29229                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 29230                                  
 29231                                  ;---------------------------------------------------------------------------
 29232                                  ;
 29233                                  ; Procedure Name : OutMes
 29234                                  ;
 29235                                  ; OutMes: perform message output
 29236                                  ; Inputs:   SS:SI points to message
 29237                                  ;	    BX has message length
 29238                                  ; Outputs:  message to BCON
 29239                                  ;
 29240                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29241                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29242                                  ;NB. This procedure is called only from DIVOV. -SR
 29243                                  ;
 29244                                  ;---------------------------------------------------------------------------
 29245                                  
 29246                                  	; 30/07/2018
 29247                                  	; MSDOS 6.0
 29248                                  _OUTMES:
 29249                                  	; MSDOS 3.3
 29250                                  ;RealDivOv:
 29251                                  	; 07/07/2018 - Retro DOS v3.0
 29252                                          ;Context ES
 29253 000053A5 16                      	push	ss ; 05/05/2019
 29254                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 29255 000053A6 07                      	POP	ES
 29256                                          ;Context DS
 29257 000053A7 16                      	push	ss ; 05/05/2019	
 29258                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 29259 000053A8 1F                      	POP	DS
 29260 000053A9 C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 29261 000053AE C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 29262 000053B3 C706[9503]0000                  MOV     WORD [DSKSTST],0
 29263                                  	; BX = [DivMesLen] = 19
 29264 000053B9 891E[A403]                      MOV     [DSKSTCNT],BX
 29265 000053BD BB[9203]                        MOV     BX,DSKSTCALL
 29266 000053C0 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 29267                                  	; 08/09/2018
 29268                                  	;mov	[DEVIOBUF_PTR],si
 29269                                  	; MSDOS 6.0
 29270                                  					; CS is used for string, fill in 
 29271                                  					; segment address 
 29272 000053C4 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 29273                                  
 29274 000053C8 C536[3200]                      LDS     SI,[BCON]
 29275 000053CC E882F3                          CALL	DEVIOCALL2
 29276                                  
 29277                                  	;; 14/03/2018
 29278                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 29279                                  	;; 08/09/2018
 29280                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 29281                                          ;MOV	WORD [CS:DSKSTCNT],1
 29282                                          
 29283                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29284                                  
 29285                                  	; ES still points to DOSDATA. ES is
 29286                                  					; not destroyed by deviocall2. So use
 29287                                  					; ES override.
 29288                                  
 29289 000053CF 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 29290 000053D6 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 29291                                  
 29292 000053DD C3                      	RETN
 29293                                  
 29294                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 29295                                  ;---------------------------------------------------------------------------
 29296                                  ;
 29297                                  ; Procedure Name : CHARHARD
 29298                                  ;
 29299                                  ;
 29300                                  ; Character device error handler
 29301                                  ; Same function as HARDERR
 29302                                  ;
 29303                                  ;---------------------------------------------------------------------------
 29304                                  
 29305                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29306                                  CHARHARD:
 29307                                  	; 05/05/2019 - Retro DOS v4.0
 29308                                  	; 30/07/2018
 29309                                  	; 08/07/2018 - Retro DOS v3.0
 29310                                  
 29311                                  	; MSDOS 6.0
 29312                                  		   			; M024 - start
 29313 000053DE 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 29314                                  	;jne	short @f		; Y: allow fail
 29315 000053E4 750B                    	jne	short chard1
 29316                                  
 29317 000053E6 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 29318                                  
 29319 000053E9 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 29320 000053EF 7503                    	jnz	short ctrlp		; Y: 
 29321                                  ;@@:
 29322                                  chard1:					; M024 - end
 29323                                  	; MSDOS 6.0 & MSDOS 3.3
 29324                                  
 29325                                  ; Character device error handler
 29326                                  ; Same function as HARDERR
 29327                                  
 29328                                  	;or	ah,38h
 29329 000053F1 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 29330                                  ctrlp:			; SS override for Allowed and EXITHOLD
 29331 000053F4 368826[4B03]            	mov	[SS:ALLOWED],ah
 29332                                  
 29333                                  	; 15/03/2018
 29334 000053F9 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 29335 000053FE 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 29336 00005403 56                              PUSH    SI
 29337                                  	;and	di,0FFh
 29338 00005404 81E7FF00                        AND     DI,STECODE
 29339 00005408 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 29340 0000540A E86400                          CALL    FATALC
 29341 0000540D 5E                              POP     SI
 29342                                  	;return
 29343 0000540E C3                              RETN
 29344                                  
 29345                                  ;---------------------------------------------------------------------------
 29346                                  ;
 29347                                  ; Procedure Name : HardErr
 29348                                  ;
 29349                                  ; Hard disk error handler. Entry conditions:
 29350                                  ;	DS:BX = Original disk transfer address
 29351                                  ;	DX = Original logical sector number
 29352                                  ;	CX = Number of sectors to go (first one gave the error)
 29353                                  ;	AX = Hardware error code
 29354                                  ;	DI = Original sector transfer count	
 29355                                  ;	ES:BP = Base of drive parameters
 29356                                  ;	[READOP] = 0 for read, 1 for write
 29357                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 29358                                  ; Output:
 29359                                  ;	[FAILERR] will be set if user responded FAIL
 29360                                  ;
 29361                                  ;--------------------------------------------------------------------------
 29362                                  
 29363                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29364                                  HARDERR:
 29365                                  	; 05/05/2019 - Retro DOS v4.0
 29366                                  	; 30/07/2018
 29367                                  	; 08/07/2018 - Retro DOS v3.0
 29368 0000540F 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 29369                                          ;and	di,0FFh
 29370 00005410 81E7FF00                	AND     DI,STECODE              ; And off status bits
 29371                                          ;CMP	DI,WRECODE		; Write Protect Error?
 29372                                  	;cmp	di,0
 29373 00005414 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 29374 00005417 750A                            JNZ     short NOSETWRPERR
 29375 00005419 50                              PUSH    AX
 29376                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29377                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29378                                          ;;MOV	AL,[ES:BP+0]
 29379                                  	; 15/12/2022
 29380 0000541A 268A4600                	mov	al,[ES:BP]
 29381                                          	; 15/03/2018
 29382 0000541E 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 29383 00005422 58                              POP     AX
 29384                                  NOSETWRPERR:
 29385 00005423 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 29386 00005425 01C2                            ADD     DX,AX                   ; First sector number to retry
 29387 00005427 52                              PUSH    DX
 29388                                  	; 08/07/2018
 29389                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 29390 00005428 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 29391 0000542C 5A                              POP     DX
 29392 0000542D 01C3                            ADD     BX,AX                   ; First address for retry
 29393 0000542F 30E4                            XOR     AH,AH                   ; Flag disk section in error
 29394                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 29395 00005431 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 29396 00005435 721A                            JB      SHORT ERRINT
 29397 00005437 FEC4                            INC     AH                      ; Flag for FAT
 29398                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 29399                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 29400 00005439 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 29401 0000543D 7308                    	JAE	short TESTDIR 		; No
 29402                                  		 ; Err in FAT must force recomp of freespace
 29403                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 29404                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 29405 0000543F 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 29406 00005445 EB0A                    	JMP	SHORT ERRINT
 29407                                  TESTDIR:
 29408 00005447 FEC4                            INC     AH
 29409                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 29410 00005449 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 29411 0000544D 7202                            JB      SHORT ERRINT
 29412 0000544F FEC4                            INC     AH                      ; Must be in data area
 29413                                  ERRINT:
 29414 00005451 D0E4                            SHL     AH,1                    ; Make room for read/write bit
 29415 00005453 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 29416                                  
 29417                                  	; 15/08/2018
 29418                                  					; SS override for allowed and EXITHOLD
 29419 00005458 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 29420                                  
 29421                                          ;entry   FATAL
 29422                                  FATAL:
 29423                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29424                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29425                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 29426                                  	; 15/12/2022
 29427 0000545D 268A4600                	MOV	AL,[ES:BP]        
 29428                                  
 29429                                  	;entry   FATAL1
 29430                                  FATAL1:  
 29431                                  	; 15/03/2018      
 29432 00005461 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 29433 00005466 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 29434                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 29435                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 29436 0000546B 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 29437 0000546F 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 29438                                  
 29439                                  	; DI has the INT-24-style extended error. We now map the error code 
 29440                                  	; for this into the normalized get extended error set by using the 
 29441                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 29442                                  	; the device returned codes and leave all others beyond the look up 
 29443                                  	; table alone.
 29444                                  
 29445                                  	; 08/07/2018 - Retro DOS v3.0
 29446                                  FATALC:
 29447 00005471 E89701                  	call	SET_I24_EXTENDED_ERROR
 29448                                  	;cmp	di,0Ch
 29449 00005474 83FF0C                  	CMP	DI,error_I24_gen_failure
 29450 00005477 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 29451 00005479 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 29452                                  					;  Only come via GetExtendedError
 29453                                  ;** ----------------------------------------------------------------
 29454                                  ;
 29455                                  ; Entry point used by REDIRector on Network I 24 errors.
 29456                                  ;
 29457                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 29458                                  ;
 29459                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 29460                                  ;     EXITHOLD set for restore of ES:BP.
 29461                                  ; ------------------------------------------------------------------
 29462                                  	;entry	NET_I24_ENTRY
 29463                                  NET_I24_ENTRY:
 29464                                  GOT_RIGHT_CODE:
 29465 0000547C 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 29466 00005482 7404                            JZ	SHORT NoSetFail
 29467 00005484 B003                    	MOV	AL,3
 29468 00005486 EB6C                    	JMP	short FailRet
 29469                                  NoSetFail:
 29470 00005488 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 29471 0000548D 16                              PUSH	SS
 29472 0000548E 07                              POP	ES
 29473                                      
 29474                                  	; Wango!!! We may need to free some user state info... In 
 29475                                  	; particular, we may have locked down a JFN for a user and he may 
 29476                                  	; NEVER return to us. Thus,we need to free it here and then 
 29477                                  	; reallocate it when we come back.
 29478                                  
 29479 0000548F 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 29480 00005495 740C                    	JZ	short _NoFree
 29481 00005497 1E                      	push	ds
 29482 00005498 56                      	push	si
 29483 00005499 36C536[AE05]            	LDS	SI,[SS:PJFN]
 29484 0000549E C604FF                  	MOV	BYTE [SI],0FFH
 29485 000054A1 5E                      	pop	si
 29486 000054A2 1F                      	pop	ds
 29487                                  
 29488                                  _NoFree:
 29489 000054A3 FA                      	CLI
 29490                                  					; Prepare to play with stack
 29491 000054A4 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 29492 000054A9 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 29493                                  
 29494                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29495                                  
 29496                                  	;; Extended Open hooks
 29497                                  					; AN000;IFS.I24 error disabled
 29498                                  	;test	byte [ss:EXTOPEN_ON],2
 29499 000054AE 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 29500 000054B4 7404                    	JZ	short i24yes		; AN000;IFS.no
 29501                                  faili24:				; AN000;
 29502 000054B6 B003                    	MOV	AL,3			; AN000;IFS.fake fail
 29503 000054B8 EB29                    	JMP	short passi24 		; AN000;IFS.exit
 29504                                  i24yes: 				; AN000;
 29505                                  	;; Extended Open hooks
 29506                                  
 29507 000054BA 368E16[8605]                    MOV     SS,[SS:USER_SS]
 29508 000054BF 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 29509                                  
 29510                                  	;;int	24h	
 29511                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 29512                                  					; must preserve ES
 29513                                  	; 05/05/2019
 29514 000054C4 26803E[1112]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 29515 000054CA 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 29516 000054CC CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 29517                                  					; must preserve ES
 29518 000054CE EB05                    	jmp	short criterr_ret_addr
 29519                                  
 29520                                  do_low_int24:
 29521                                  	; 05/05/2019
 29522                                  	; MSDOS 6.0
 29523 000054D0 2EFF1E[B651]            	call    far [cs:LowInt24Addr]
 29524                                  criterr_ret_addr:
 29525 000054D5 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 29526 000054DA 268C16[8605]                    MOV     [ES:USER_SS],SS
 29527 000054DF 8CC5                            MOV     BP,ES
 29528 000054E1 8ED5                            MOV     SS,BP
 29529                                  passi24:
 29530 000054E3 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 29531 000054E8 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 29532 000054ED 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 29533 000054F3 FB                              STI
 29534                                  FailRet:
 29535 000054F4 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 29536                                  	
 29537                                  	; 08/07/2018
 29538                                  
 29539                                  	; Triage the user's reply.
 29540                                  
 29541 000054F9 3C01                    	CMP	AL,1
 29542 000054FB 723D                    	JB	short CheckIgnore	; 0 => ignore
 29543 000054FD 7445                    	JZ	short CheckRetry	; 1 => retry
 29544 000054FF 3C03                    	CMP	AL,3			; 3 => fail
 29545 00005501 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 29546                                  
 29547                                  	; The reply was fail. See if we are allowed to fail.
 29548                                  
 29549                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 29550                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 29551                                  	;test	byte [ss:ALLOWED],8
 29552 00005503 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 29553 00005509 7443                    	jz	short DoAbort	; No, do abort
 29554                                  DoFail:
 29555 0000550B B003                    	MOV	AL,3		; just in case...
 29556                                  				; AN000;EO. I24 error disabled
 29557                                  	; 05/05/2019
 29558                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 29559 0000550D 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 29560 00005513 7505                    	jnz	short CleanUp 		; AN000;EO. no
 29561                                  	
 29562 00005515 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 29563                                  CleanUp:
 29564 0000551A 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 29565 00005520 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 29566                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29567                                  	;jnz	short CleanUp2
 29568                                  	;retn
 29569                                  	; 17/12/2022
 29570 00005526 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 29571                                  CleanUp2:
 29572 00005528 1E                      	push	ds
 29573 00005529 56                      	push	si
 29574 0000552A 50                      	push	ax
 29575 0000552B 36A1[AA05]              	MOV	AX,[ss:SFN]
 29576 0000552F 36C536[AE05]            	LDS	SI,[ss:PJFN]
 29577 00005534 8804                    	MOV	[SI],AL
 29578 00005536 58                      	pop	ax
 29579 00005537 5E                      	pop	si
 29580 00005538 1F                      	pop	ds
 29581                                  Cleanup_retn:
 29582 00005539 C3                      	retn
 29583                                  
 29584                                  	; The reply was IGNORE. See if we are allowed to ignore.
 29585                                  
 29586                                  CheckIgnore:
 29587                                  	;test	byte [ss:ALLOWED],20h
 29588 0000553A 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 29589 00005540 74C9                    	jz	short DoFail			 ; No, do fail
 29590 00005542 EBD6                    	jmp	short CleanUp
 29591                                  
 29592                                  	; The reply was RETRY. See if we are allowed to retry.
 29593                                  
 29594                                  CheckRetry:
 29595                                  	;test	byte [ss:ALLOWED],10h
 29596 00005544 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 29597 0000554A 74BF                    	jz	short DoFail			; No, do fail
 29598 0000554C EBCC                    	JMP	short CleanUp
 29599                                  
 29600                                  	; The reply was ABORT.
 29601                                  DoAbort:
 29602 0000554E 16                      	push	ss
 29603 0000554F 1F                      	pop	ds
 29604                                  
 29605 00005550 803E[5703]00            	CMP	byte [CONSWAP],0
 29606 00005555 7403                    	JZ	short NOSWAP2
 29607 00005557 E815DE                  	call	SWAPBACK
 29608                                  NOSWAP2:
 29609                                  	; See if we are to truly abort. If we are in the process of aborting, 
 29610                                  	; turn this abort into a fail.
 29611                                  
 29612                                  	;test	[fAborting],0FFh
 29613                                  	;jnz	short DoFail
 29614                                  
 29615 0000555A 803E[5903]00            	cmp	byte [fAborting],0
 29616 0000555F 75AA                    	JNZ	short DoFail
 29617                                  
 29618                                  	; Set return code
 29619                                  
 29620 00005561 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 29621 00005566 30C0                    	XOR	AL,AL
 29622                                  
 29623                                  	; we are truly aborting the process. Go restore information from 
 29624                                  	; the PDB as necessary.
 29625                                  
 29626 00005568 E9990D                  	jmp	exit_inner
 29627                                  
 29628                                  ;** --------------------------------------------------------------------------
 29629                                  ;
 29630                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 29631                                  ; different, then an old-style return is performed. If they are the same,
 29632                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 29633                                  ; the source of the terminate addresses.
 29634                                  ;
 29635                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 29636                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 29637                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 29638                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 29639                                  ; flag that will indicate that if any abort code is seen, we just continue the
 29640                                  ; operation. In essence, we dis-allow the abort response.
 29641                                  ;
 29642                                  ; output:   none.
 29643                                  ; ----------------------------------------------------------------------------
 29644                                  
 29645                                  	;entry	reset_environment
 29646                                  	
 29647                                  reset_environment:
 29648                                  	; 30/07/2018 - Retro DOS v3.0
 29649                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 29650                                  
 29651                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 29652                                  
 29653 0000556B 1E                      	PUSH	DS			; save PDB of process
 29654                                  
 29655                                  	; There are no critical sections in force. Although we may enter 
 29656                                  	; here with critical sections locked down, they are no longer 
 29657                                  	; relevant. We may safely free all allocated resources.
 29658                                  
 29659 0000556C B482                    	MOV	AH,82h
 29660                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 29661                                  	;int	2Ah 	
 29662 0000556E CD2A                    	INT	int_IBM
 29663                                  
 29664                                  					; SS override
 29665 00005570 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 29666                                  
 29667                                  					; DOS 4.00 doesn't need it
 29668                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 29669                                  					; Allow REDIR to clear some stuff
 29670                                  					; On process exit.
 29671 00005576 B82211                  	mov     ax, 1122h
 29672 00005579 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 29673                                  			; SS = DOS CS
 29674                                  	;mov	al,22h	
 29675 0000557B B022                    	MOV	AL,int_terminate
 29676 0000557D E884B9                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 29677                                  
 29678 00005580 59                      	POP	CX			; get ThisPDB
 29679 00005581 06                      	push	es
 29680 00005582 53                      	push	bx			; save return address
 29681                                  
 29682 00005583 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 29683 00005588 8EDB                    	MOV	DS,BX
 29684 0000558A A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 29685                                  
 29686                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 29687                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 29688                                  	; is not Exit_keep_process
 29689                                  	
 29690 0000558D 39D8                    	CMP	AX,BX
 29691 0000558F 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 29692 00005591 39CB                    	CMP	BX,CX
 29693 00005593 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 29694 00005595 50                      	PUSH	AX			; save parent
 29695                                  
 29696                                  					; SS override
 29697                                  	;cmp	byte [SS:EXIT_TYPE],3
 29698 00005596 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 29699 0000559C 7406                    	JZ	short reset_to_parent 	; keeping this process
 29700                                  
 29701                                  	; We are truly removing a process. Free all allocation blocks 
 29702                                  	; belonging to this PDB
 29703                                  
 29704                                  	;invoke	arena_free_process
 29705 0000559E E89B0D                  	call	arena_free_process
 29706                                  
 29707                                  	; Kill off remainder of this process. Close file handles and signal 
 29708                                  	; to relevant network folks that this process is dead. Remember that 
 29709                                  	; CurrentPDB is STILL the current process!
 29710                                  
 29711                                  	;invoke	DOS_ABORT
 29712 000055A1 E8B6D9                  	call	DOS_ABORT
 29713                                  
 29714                                  reset_to_parent:
 29715                                  					; SS override
 29716 000055A4 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 29717                                  
 29718                                  reset_return:				; come here for normal return
 29719                                  	;Context DS			; DS is used to refer to DOSDATA  
 29720 000055A9 16                      	push	ss
 29721 000055AA 1F                      	pop	ds	
 29722                                  
 29723 000055AB B0FF                    	MOV	AL,-1
 29724                                  
 29725                                  	; make sure that everything is clean In this case ignore any errors, 
 29726                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 29727                                  
 29728                                  	;EnterCrit critDisk
 29729 000055AD E8D8BD                  	call	ECritDisk
 29730                                  	;invoke	FLUSHBUF
 29731 000055B0 E8B605                  	call	FLUSHBUF
 29732                                  	;LeaveCrit critDisk
 29733 000055B3 E8EDBD                  	call	LCritDisk
 29734                                  
 29735                                  	; Decrement open ref. count if we had done a virtual open earlier.
 29736                                  
 29737 000055B6 E879F7                  	call	CHECK_VIRT_OPEN
 29738 000055B9 FA                      	CLI
 29739 000055BA C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 29740 000055BF C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 29741 000055C4 C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 29742 000055C9 8F06[8005]              	POP	WORD [EXITHOLD]
 29743 000055CD 8F06[8205]              	POP	WORD [EXITHOLD+2]
 29744                                  
 29745                                  	; Snake into multitasking... Get stack from CurrentPDB person
 29746                                  
 29747 000055D1 8E1E[3003]              	MOV	DS,[CurrentPDB]
 29748 000055D5 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 29749 000055D9 8B262E00                	MOV	SP,[PDB.USER_STACK]
 29750                                  
 29751 000055DD E8B4AE                  	call	restore_world
 29752                                  
 29753                                  	; 05/05/2019
 29754 000055E0 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 29755                                  
 29756                                  	; MSDOS 6.0
 29757 000055E1 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 29758 000055E2 8CD8                    	mov	ax,ds			; and not on stack.
 29759                                  	;getdseg <ds>			; ds -> dosdata
 29760 000055E4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 29761 000055E9 A3[0A0D]                	mov	[TEMPSEG],ax
 29762 000055EC 58                      	pop	ax
 29763                                  					; set up ds to DOSDATA
 29764                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 29765 000055ED A3[8405]                	mov	[USER_SP],ax
 29766                                  
 29767 000055F0 58                      	POP	AX			; suck off CS:IP of interrupt...
 29768 000055F1 58                      	POP	AX
 29769 000055F2 58                      	POP	AX
 29770                                  
 29771                                  ; M011 : BEGIN
 29772                                  
 29773                                  	; MSDOS 3.3
 29774                                  ;	MOV	AX,0F202h	; STI
 29775                                  
 29776                                  	; MSDOS 6.0
 29777 000055F3 9F                      	LAHF
 29778 000055F4 86E0                    	XCHG	AH,AL
 29779 000055F6 2402                    	AND	AL,2
 29780 000055F8 B4F2                    	MOV	AH,0F2h
 29781                                  
 29782                                  ; M011 : END
 29783                                  
 29784                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29785 000055FA 50                      	PUSH	AX
 29786                                   
 29787                                  	;PUSH	word [CS:EXITHOLD+2]
 29788                                  	;PUSH	word [CS:EXITHOLD]
 29789                                  	
 29790                                  	; MSDOS 6.0
 29791 000055FB FF36[8205]              	PUSH	word [EXITHOLD+2]
 29792 000055FF FF36[8005]              	PUSH	word [EXITHOLD]
 29793                                  
 29794                                  	;MOV	AX,[CS:USER_SP]
 29795                                  
 29796                                  	; MSDOS 6.0
 29797 00005603 A1[8405]                	MOV	AX,[USER_SP]
 29798 00005606 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 29799                                  
 29800 0000560A CF                      	IRET			; Long return back to user terminate address
 29801                                  
 29802                                  ;---------------------------------------------------------------------------
 29803                                  ;
 29804                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 29805                                  ;
 29806                                  ; This routine handles extended error codes.
 29807                                  ; Input : DI = error code from device
 29808                                  ; Output: All EXTERR fields are set
 29809                                  ;
 29810                                  ;--------------------------------------------------------------------------
 29811                                  
 29812                                  SET_I24_EXTENDED_ERROR:
 29813 0000560B 50                      	PUSH	AX
 29814                                  					; ErrMap24End is in DOSDATA
 29815 0000560C B8[BB0E]                	MOV	AX,ErrMap24End
 29816 0000560F 2D[AB0E]                	SUB	AX,ErrMap24
 29817                                  					; Change to dosdata to access 
 29818                                  					; ErrMap24 and EXTERR -SR
 29819                                  	; 05/05/2019 - Retro DOS v4.0
 29820                                  	
 29821                                  	; MSDOS 6.0
 29822 00005612 1E                      	push	ds
 29823                                  	;getdseg <ds>			; ds ->dosdata
 29824 00005613 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29825                                  
 29826                                  	; AX is the index of the first unavailable error. Do not translate 
 29827                                  	; if greater or equal to AX.
 29828                                  
 29829 00005618 39C7                    	CMP	DI,AX
 29830 0000561A 89F8                    	MOV	AX,DI
 29831 0000561C 7306                    	JAE	short NoTrans
 29832                                  
 29833                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 29834 0000561E 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 29835 00005622 30E4                    	XOR	AH,AH
 29836                                  NoTrans:
 29837                                  	;MOV	[CS:EXTERR],AX
 29838 00005624 A3[2403]                	mov	[EXTERR],AX
 29839 00005627 1F                      	pop	ds
 29840                                  	;assume	ds:nothing
 29841 00005628 58                      	POP	AX
 29842                                  
 29843                                  	; Now Extended error is set correctly. Translate it to get correct 
 29844                                  	; error locus class and recommended action.
 29845                                  
 29846 00005629 56                      	PUSH	SI
 29847                                  					; ERR_TABLE_24 is in DOSCODE 
 29848 0000562A BE[5B0E]                	MOV	SI,ERR_TABLE_24
 29849 0000562D E897B0                  	call	CAL_LK			; Set other extended error fields
 29850 00005630 5E                      	POP	SI
 29851 00005631 C3                      	retn
 29852                                  
 29853                                  ;============================================================================
 29854                                  ; FAT.ASM, MSDOS 6.0, 1991
 29855                                  ;============================================================================
 29856                                  ; 30/07/2018 - Retro DOS v3.0
 29857                                  ; 20/05/2019 - Retro DOS v4.0
 29858                                  
 29859                                  ;	TITLE	FAT - FAT maintenance routines
 29860                                  ;	NAME	FAT
 29861                                  
 29862                                  ;**	FAT.ASM
 29863                                  ;----------------------------------------------------------------------------
 29864                                  ;	Low level local device routines for performing disk change sequence,
 29865                                  ;	setting cluster validity, and manipulating the FAT
 29866                                  ;
 29867                                  ;	IsEof
 29868                                  ;	UNPACK
 29869                                  ;	PACK
 29870                                  ;	MAPCLUSTER
 29871                                  ;	FATREAD_SFT
 29872                                  ;	FATREAD_CDS
 29873                                  ;	FAT_operation
 29874                                  ;
 29875                                  ;	Revision history:
 29876                                  ;
 29877                                  ;	  AN000  version Jan. 1988
 29878                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 29879                                  ;
 29880                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 29881                                  ;	       from CL0FATENTRY rather than disk.
 29882                                  
 29883                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 29884                                  
 29885                                  ;Break <IsEOF - check the quantity in BX for EOF>
 29886                                  ;----------------------------------------------------------------------------
 29887                                  ;
 29888                                  ; Procedure Name : IsEOF
 29889                                  ;
 29890                                  ; IsEOF - check the fat value in BX for eof.
 29891                                  ;
 29892                                  ;   Inputs:	ES:BP point to DPB
 29893                                  ;		BX has fat value
 29894                                  ;   Outputs:	JAE eof
 29895                                  ;   Registers modified: none
 29896                                  ;
 29897                                  ;---------------------------------------------------------------------------
 29898                                  
 29899                                  IsEOF:
 29900                                  	;cmp	word [es:bp+0Dh],0FF6h
 29901 00005632 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 29902 00005638 730B                    	JAE	short EOF16			; yes, check for eof there
 29903                                  
 29904                                  ;J.K. 8/27/86
 29905                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 29906                                  ;of any media that has "F0"(Other) as a MediaByte.
 29907                                  ;Hopely, this does not create any side effect for those who may use any value
 29908                                  ;other than "FF8-FFF" as an EOF for their own file.
 29909                                  
 29910 0000563A 81FBF00F                	cmp	bx,0FF0h
 29911 0000563E 7404                    	je	short IsEOF_other
 29912                                  
 29913 00005640 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 29914                                  IsEOF_other:
 29915 00005644 C3                      	retn
 29916                                  EOF16:
 29917 00005645 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 29918 00005648 C3                      	retn
 29919                                  
 29920                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 29921                                  
 29922                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 29923                                  ;---------------------------------------------------------------------------
 29924                                  ;
 29925                                  ; Procedur Name : UNPACK
 29926                                  ;
 29927                                  ; Inputs:
 29928                                  ;	BX = Cluster number (may be full 16-bit quantity)
 29929                                  ;	ES:BP = Base of drive parameters
 29930                                  ; Outputs:
 29931                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 29932                                  ;	Zero set means DI=0 (free cluster)
 29933                                  ;	Carry set means error (currently user FAILed to I 24)
 29934                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 29935                                  ;
 29936                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 29937                                  ;
 29938                                  ;----------------------------------------------------------------------------
 29939                                  	
 29940                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29941                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 29942                                  
 29943                                  	; 20/05/2019 - Retro DOS v4.0
 29944                                  UNPACK:
 29945                                  	; MSDOS 6.0			; M014 - Start
 29946 00005649 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 29947 0000564B 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 29948 0000564D 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 29949 00005651 09FF                    	or	di,di 			; return z if di=0
 29950 00005653 C3                      	retn				; done
 29951                                  up_cont:				; M014 - End
 29952                                  	; MSDOS 3.3 & MSDOS 6.0
 29953                                  	;cmp	bx,[es:bp+0Dh]
 29954 00005654 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 29955 00005658 7726                    	JA	short HURTFAT
 29956 0000565A E8DC00                  	CALL	MAPCLUSTER
 29957 0000565D 721E                    	jc	short _DoContext
 29958 0000565F 8B3D                    	MOV	DI,[DI]
 29959 00005661 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 29960 00005663 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 29961 00005667 81FEF60F                	CMP	SI,4096-10
 29962 0000566B 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 29963 0000566D 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 29964 0000566F EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 29965                                  High12:
 29966 00005671 D1EF                    	SHR	DI,1
 29967 00005673 D1EF                    	SHR	DI,1
 29968 00005675 D1EF                    	SHR	DI,1
 29969 00005677 D1EF                    	SHR	DI,1
 29970                                  Unpack12:
 29971 00005679 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 29972                                  _DoContext:
 29973 0000567D 16                      	PUSH	SS
 29974 0000567E 1F                      	POP	DS
 29975 0000567F C3                      	retn
 29976                                  HURTFAT:
 29977                                  	;;mov	word [es:bp+1Eh],0FFFFh
 29978                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 29979 00005680 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 29980 00005686 50                      	PUSH	AX
 29981 00005687 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 29982                                  
 29983                                  ;hkn; SS override
 29984 00005689 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 29985                                  ;
 29986                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 29987                                  ;
 29988 0000568F BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 29989 00005692 E8C8FD                  	call	FATAL
 29990 00005695 3C03                    	CMP	AL,3
 29991 00005697 F8                      	CLC
 29992 00005698 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 29993 0000569A F9                      	STC				; User said FAIL
 29994                                  OKU_RET:
 29995 0000569B 58                      	POP	AX
 29996                                  hurtfat_retn:
 29997 0000569C C3                      	retn
 29998                                  
 29999                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 30000                                  
 30001                                  ;Break	<PACK -- PACK FAT ENTRIES>
 30002                                  ;----------------------------------------------------------------------------
 30003                                  ;
 30004                                  ; Procedure Name : PACK
 30005                                  ;
 30006                                  ; Inputs:
 30007                                  ;	BX = Cluster number
 30008                                  ;	DX = Data
 30009                                  ;	ES:BP = Pointer to drive DPB
 30010                                  ; Outputs:
 30011                                  ;	The data is stored in the FAT at the given cluster.
 30012                                  ;	SI,DX,DI all destroyed
 30013                                  ;	Carry set means error (currently user FAILed to I 24)
 30014                                  ;	No other registers affected
 30015                                  ;
 30016                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 30017                                  ;
 30018                                  ;---------------------------------------------------------------------------
 30019                                  
 30020                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30021                                  	; 20/05/2019 - Retro DOS v4.0
 30022                                  PACK:
 30023                                  	; MSDOS 6.0			; M014 - start
 30024 0000569D 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 30025 0000569F 7505                    	jnz	short p_cont		; N: proceed with normal pack
 30026 000056A1 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 30027 000056A5 C3                      	retn				; done
 30028                                  p_cont:					; M014 - end
 30029                                  	; MSDOS 3.3 & MSDOS 6.0
 30030 000056A6 E89000                  	CALL	MAPCLUSTER
 30031 000056A9 72D2                    	JC	short _DoContext
 30032 000056AB 8B35                    	MOV	SI,[DI]
 30033 000056AD 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 30034 000056AF 51                      	PUSH	CX			; move data to upper 12 bits
 30035 000056B0 B104                    	MOV	CL,4
 30036 000056B2 D3E2                    	SHL	DX,CL
 30037 000056B4 59                      	POP	CX
 30038 000056B5 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 30039 000056B8 EB14                    	JMP	SHORT PACKIN
 30040                                  ALIGNED:
 30041                                  	;cmp	word [es:bp+0Dh],0FF6h
 30042 000056BA 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 30043 000056C0 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 30044 000056C2 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30045 000056C6 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30046 000056CA EB02                    	JMP	SHORT PACKIN		; MZ go store
 30047                                  Pack16:
 30048 000056CC 31F6                    	XOR	SI,SI			; MZ no original data
 30049                                  PACKIN:
 30050 000056CE 09D6                    	OR	SI,DX
 30051 000056D0 8935                    	MOV	[DI],SI
 30052                                  
 30053                                  ;hkn; SS override
 30054 000056D2 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30055                                  	; MSDOS 6.0
 30056 000056D7 F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30057                                  					;LB. if already dirty		  ;AN000;
 30058 000056DB 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30059                                  	; 10/06/2019
 30060 000056DD E89105                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30061                                  	
 30062                                  	;or	byte [si+5],40h
 30063 000056E0 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30064                                  yesdirty11:				;LB.				;AN000;
 30065                                  ;hkn; SS override
 30066 000056E4 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30067                                  ;hkn; SS is DOSDATA
 30068 000056EA 16                      	push	ss
 30069 000056EB 1F                      	pop	ds
 30070 000056EC 74AE                    	jz	short hurtfat_retn	; Carry clear
 30071 000056EE 50                      	PUSH	AX
 30072 000056EF 53                      	PUSH	BX
 30073 000056F0 51                      	PUSH	CX
 30074 000056F1 A1[8E05]                	MOV	AX,[CLUSSAVE]
 30075 000056F4 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30076                                  	;;add	si,16 ; MSDOS 3.3
 30077                                  	;add	si,20 ; MSDOS 6.0
 30078 000056F8 83C614                  	ADD	SI,BUFINSIZ
 30079 000056FB 8824                    	MOV	[SI],AH
 30080                                  ;hkn; SS is DOSDATA
 30081                                  	;Context DS
 30082 000056FD 16                      	push	ss
 30083 000056FE 1F                      	pop	ds
 30084                                  	
 30085 000056FF 50                      	PUSH	AX
 30086                                  	
 30087                                  	; MSDOS 6.0
 30088 00005700 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 30089 00005704 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 30090                                  
 30091                                  	; MSDOS 3.3 & MSDOS 6.0
 30092 00005708 8B16[9005]              	MOV	DX,[CLUSSEC]
 30093 0000570C BE0100                  	MOV	SI,1
 30094 0000570F 30C0                    	XOR	AL,AL
 30095 00005711 E85903                  	call	GETBUFFRB
 30096 00005714 58                      	POP	AX
 30097 00005715 721C                    	JC	short POPP_RET
 30098 00005717 C53E[E205]              	LDS	DI,[CURBUF]
 30099                                  	
 30100                                  	; MSDOS 6.0
 30101 0000571B F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 30102                                  					;LB. if already dirty		  ;AN000;
 30103 0000571F 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 30104 00005721 E84D05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 30105                                  	
 30106                                  	;or	byte [di+5],40h
 30107 00005724 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 30108                                  yesdirty12:
 30109                                  	;;add	di,16
 30110                                  	;add	di,20 ; MSDOS 6.0
 30111 00005728 83C714                  	ADD	DI,BUFINSIZ
 30112 0000572B 4F                      	DEC	DI
 30113                                  	;add	di,[es:bp+2]
 30114 0000572C 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 30115 00005730 8805                    	MOV	[DI],AL
 30116 00005732 F8                      	CLC
 30117                                  POPP_RET:
 30118 00005733 16                      	PUSH	SS
 30119 00005734 1F                      	POP	DS
 30120 00005735 59                      	POP	CX
 30121 00005736 5B                      	POP	BX
 30122 00005737 58                      	POP	AX
 30123 00005738 C3                      	retn
 30124                                  
 30125                                  ; 31/07/2018 - Retro DOS v3.0
 30126                                  
 30127                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 30128                                  ;---------------------------------------------------------------------------
 30129                                  ;
 30130                                  ; Procedure Name : MAPCLUSTER
 30131                                  ;
 30132                                  ; Inputs:
 30133                                  ;	ES:BP Points to DPB
 30134                                  ;	BX Is cluster number
 30135                                  ; Function:
 30136                                  ;	Get a pointer to the cluster
 30137                                  ; Outputs:
 30138                                  ;	DS:DI Points to contents of FAT for given cluster
 30139                                  ;	DS:SI Points to start of buffer
 30140                                  ;	Zero Not set if cluster data is in high 12 bits of word
 30141                                  ;	Zero set if cluster data is in low 12 or 16 bits
 30142                                  ;	Carry set if failed.
 30143                                  ; SI is destroyed.
 30144                                  ;
 30145                                  ;---------------------------------------------------------------------------
 30146                                  
 30147                                  	; 20/05/2019 - Retro DOS v4.0
 30148                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 30149                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30150                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 30151                                  
 30152                                  MAPCLUSTER:
 30153                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 30154 00005739 C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 30155                                  	;SAVE	<AX,BX,CX,DX>
 30156 0000573E 50                      	push	ax
 30157 0000573F 53                      	push	bx
 30158 00005740 51                      	push	cx
 30159 00005741 52                      	push	dx
 30160 00005742 89D8                    	MOV	AX,BX			; AX = BX
 30161 00005744 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 30162 0000574A 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 30163 0000574C D1E8                    	SHR	AX,1			; AX = BX/2
 30164                                  Map16:	
 30165                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 30166 0000574E 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 30167                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30168 00005750 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 30169 00005752 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 30170 00005754 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 30171                                  
 30172                                  ;IF FastDiv
 30173                                  ;
 30174                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 30175                                  ; case and apply a really fast algorithm to get the desired results
 30176                                  ;
 30177                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 30178                                  ; Fast method takes 39+20*4=119
 30179                                  ;
 30180                                  ; This saves a bunch.
 30181                                  
 30182 00005758 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 30183 0000575C 7510                    	jne	short _DoDiv		; 4  for no jump
 30184 0000575E 89C2                    	MOV	DX,AX			; 2  get set for remainder
 30185 00005760 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 30186 00005764 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 30187                                  	; MDOS 3.3
 30188                                  	;shr	al,1	
 30189                                  	; MDOS 6.0
 30190 00005766 D1EF                    	shr	di,1			; 2
 30191 00005768 D0D8                    	rcr	al,1			; 2
 30192                                  	; MDOS 3.3 (& MSDOS 6.0)
 30193 0000576A 30E4                    	xor	ah,ah			; 3
 30194 0000576C EB04                    	jmp	short DivDone		; 16
 30195                                  _DoDiv:
 30196                                  ;ENDIF
 30197                                  	; MSDOS 3.3
 30198                                  	;xor	dx,dx
 30199                                  	; MSDOS 6.0
 30200 0000576E 89FA                    	mov	dx,di			; 2
 30201                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 30202 00005770 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 30203                                  ;IF FastDiv
 30204                                  DivDone:
 30205                                  ;ENDIF
 30206                                  	;add	ax,[es:bp+6]
 30207 00005772 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 30208 00005776 49                      	DEC	CX			; CX is sector size - 1
 30209                                  	;SAVE	<AX,DX,CX>
 30210 00005777 50                      	push	ax
 30211 00005778 52                      	push	dx
 30212 00005779 51                      	push	cx
 30213 0000577A 89C2                    	MOV	DX,AX
 30214                                  
 30215                                  	; MSDOS 6.0
 30216 0000577C C706[0706]0000          	MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 30217                                  	; MDOS 3.3 (& MSDOS 6.0)
 30218 00005782 30C0                    	XOR	AL,AL
 30219 00005784 BE0100                  	MOV	SI,1
 30220                                  	;invoke	GETBUFFRB
 30221 00005787 E8E302                  	call	GETBUFFRB
 30222                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 30223 0000578A 59                      	pop	cx
 30224 0000578B 58                      	pop	ax
 30225 0000578C 5A                      	pop	dx
 30226 0000578D 7257                    	JC	short MAP_POP
 30227                                  
 30228 0000578F C536[E205]              	LDS	SI,[CURBUF]
 30229                                  	;;lea	di,[si+16]
 30230                                  	;lea	di,[si+20] ; MSDOS 6.0
 30231 00005793 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30232 00005796 01C7                    	ADD	DI,AX
 30233 00005798 39C8                    	CMP	AX,CX
 30234 0000579A 7537                    	JNZ	short MAPRET
 30235 0000579C 8A05                    	MOV	AL,[DI]
 30236                                  	;Context DS		 	;hkn; SS is DOSDATA
 30237 0000579E 16                      	push	ss
 30238 0000579F 1F                      	pop	ds	
 30239 000057A0 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 30240 000057A4 A2[8E05]                	MOV	[CLUSSAVE],AL
 30241 000057A7 8916[9005]              	MOV	[CLUSSEC],DX
 30242                                  	; MSDOS 6.0
 30243 000057AB C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 30244 000057B1 42                      	INC	DX
 30245 000057B2 C706[0706]0000          	MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 30246                                  	; MDOS 3.3 (& MSDOS 6.0)
 30247 000057B8 30C0                    	XOR	AL,AL
 30248 000057BA BE0100                  	MOV	SI,1
 30249                                  	;invoke	GETBUFFRB
 30250 000057BD E8AD02                  	call	GETBUFFRB
 30251 000057C0 7224                    	JC	short MAP_POP
 30252 000057C2 C536[E205]              	LDS	SI,[CURBUF]
 30253 000057C6 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30254 000057C9 8A05                    	MOV	AL,[DI]
 30255                                  	;Context DS			;hkn; SS is DOSDATA
 30256 000057CB 16                      	push	ss
 30257 000057CC 1F                      	pop	ds
 30258 000057CD A2[8F05]                	MOV	[CLUSSAVE+1],AL
 30259                                  
 30260                                  ;hkn; CLUSSAVE is in DOSDATA
 30261 000057D0 BF[8E05]                	MOV	DI,CLUSSAVE
 30262                                  MAPRET:
 30263                                  	;RESTORE <DX,CX,BX>
 30264 000057D3 5A                      	pop	dx
 30265 000057D4 59                      	pop	cx
 30266 000057D5 5B                      	pop	bx
 30267 000057D6 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 30268 000057D8 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 30269 000057DE 7302                    	JAE	short MapSet		; MZ no, set flags
 30270 000057E0 89D8                    	MOV	AX,BX
 30271                                  MapSet:
 30272 000057E2 A801                    	TEST	AL,1			; set zero flag if not on boundary
 30273                                  	;RESTORE <AX>
 30274 000057E4 58                      	pop	ax
 30275 000057E5 C3                      	retn
 30276                                  
 30277                                  MAP_POP:
 30278                                  	;RESTORE <DX,CX,BX,AX>
 30279 000057E6 5A                      	pop	dx
 30280 000057E7 59                      	pop	cx
 30281 000057E8 5B                      	pop	bx
 30282 000057E9 58                      	pop	ax
 30283                                  fatread_sft_retn: ; 17/12/2022
 30284 000057EA C3                      	retn
 30285                                  
 30286                                  ; 20/05/2019 - Retro DOS v4.0
 30287                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 30288                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30289                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 30290                                  
 30291                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 30292                                  ;----------------------------------------------------------------------------
 30293                                  ;
 30294                                  ; Procedure Name : FATREAD_SFT
 30295                                  ;
 30296                                  ; Inputs:
 30297                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 30298                                  ;		giving a NET SFT will produce system crashing results).
 30299                                  ;	DS DOSDATA
 30300                                  ; Function:
 30301                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 30302                                  ;	if disk changed.
 30303                                  ;	In other respects, same as FATREAD_CDS.
 30304                                  ;	(note ES:DI destroyed!)
 30305                                  ; Outputs:
 30306                                  ;	Carry set if error (currently user FAILed to I 24)
 30307                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 30308                                  ;	as far as invalidating curdir_ID is concerned.
 30309                                  ;	Since getting a true disk changed on this call is a screw up
 30310                                  ;	anyway, that's the way it goes.
 30311                                  ;
 30312                                  ;---------------------------------------------------------------------------
 30313                                  
 30314                                  FATREAD_SFT:
 30315 000057EB 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 30316                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30317                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30318                                  	; 15/12/2022
 30319 000057EF 268A4600                	mov	AL,[ES:BP]
 30320 000057F3 A2[7605]                	MOV	[THISDRV],AL
 30321 000057F6 E882AE                  	call	GOTDPB			;Set THISDPB
 30322                                  	;CALL	FAT_GOT_DPB
 30323                                  	; 17/12/2022
 30324 000057F9 EB78                    	jmp	FAT_GOT_DPB
 30325                                  ;fatread_sft_retn:
 30326                                  	;retn
 30327                                  
 30328                                  ;----------------------------------------------------------------------------
 30329                                  ;
 30330                                  ; Procedure Name : FATREAD_CDS
 30331                                  ;
 30332                                  ; Inputs:
 30333                                  ;	DS:DOSDATA
 30334                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 30335                                  ;		giving a NET or NUL CDS will produce system crashing results).
 30336                                  ; Function:
 30337                                  ;	If disk may have been changed, media is determined and buffers are
 30338                                  ;	flagged invalid. If not, no action is taken.
 30339                                  ; Outputs:
 30340                                  ;	ES:BP = Drive parameter block
 30341                                  ;	THISDPB = ES:BP
 30342                                  ;	THISDRV set
 30343                                  ;	Carry set if error (currently user FAILed to I 24)
 30344                                  ; DS preserved , all other registers destroyed
 30345                                  ;
 30346                                  ;---------------------------------------------------------------------------
 30347                                  
 30348                                  	; 20/05/2019 - Retro DOS v4.0
 30349                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 30350                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30351                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 30352                                  
 30353                                  FATREAD_CDS:
 30354 000057FB 06                      	PUSH	ES
 30355 000057FC 57                      	PUSH	DI
 30356                                  	;les	bp,[es:di+45h]
 30357 000057FD 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 30358                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30359                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30360                                  	; 15/12/2022
 30361 00005801 268A4600                	mov	AL,[ES:BP]
 30362 00005805 A2[7605]                	MOV	[THISDRV],AL
 30363 00005808 E870AE                  	call	GOTDPB			;Set THISDPB
 30364 0000580B E86500                  	CALL	FAT_GOT_DPB
 30365 0000580E 5F                      	POP	DI			;Get back CDS pointer
 30366 0000580F 07                      	POP	ES
 30367 00005810 72D8                    	jc	short fatread_sft_retn
 30368 00005812 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 30369                                  
 30370                                  ;	Media changed. We now need to find all CDS structures which use this
 30371                                  ;	DPB and invalidate their ID pointers.
 30372                                  
 30373                                  MED_CHANGE:
 30374 00005814 31C0                    	XOR	AX,AX
 30375 00005816 48                      	DEC	AX			; AX = -1
 30376 00005817 1E                      	PUSH	DS
 30377 00005818 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 30378 0000581C 30ED                    	XOR	CH,CH			; CX is number of structures
 30379                                  	;lds	si,[es:di+45h]
 30380 0000581E 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 30381                                  
 30382                                  ;hkn; SS override
 30383                                  
 30384                                  ;	Find all CDSs with this DevPtr
 30385                                  ;
 30386                                  ;	(ax) = -1
 30387                                  ;	(ds:si) = DevPtr
 30388                                  
 30389 00005822 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 30390                                  frcd20: 
 30391                                  	;;test	word [es:di+43h],8000h
 30392                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 30393 00005827 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 30394 0000582C 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 30395                                  
 30396                                  	; MSDOS 3.3
 30397                                  	;push	es
 30398                                  	;push	di
 30399                                  	;les	di,[es:di+45h]
 30400                                  	;;les	di,[ES:DI+curdir.devptr]
 30401                                  	;call	POINTCOMP
 30402                                  	;pop	di
 30403                                  	;pop	es
 30404                                  	;jnz	short frcd25
 30405                                  
 30406                                  	; MSDOS 6.0
 30407 0000582E 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 30408 00005832 7512                    	jne	short frcd25		; no match
 30409 00005834 8CDB                    	mov	bx,ds
 30410 00005836 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 30411 0000583A 750A                    	jne	short frcd25		; CDS not for this drive
 30412                                  
 30413                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30414                                  	;test	[es:di+49h],ax
 30415 0000583C 26854549                	test	[ES:DI+curdir.ID],AX
 30416 00005840 7404                    	JZ	short frcd25		; If root (0), leave root
 30417                                  	;mov	[es:di+49h],ax
 30418 00005842 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 30419                                  frcd25:	
 30420                                  	;;add	di,81  ; MSDOS 3.3
 30421                                  	;add	di,88  ; MSDOS 6.0	 
 30422 00005846 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 30423 00005849 E2DC                    	LOOP	frcd20
 30424 0000584B 1F                      	POP	DS
 30425                                  NO_CHANGE:
 30426 0000584C C42E[8A05]              	LES	BP,[THISDPB]
 30427 00005850 F8                      	CLC
 30428 00005851 C3                      	retn
 30429                                  
 30430                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 30431                                  ;----------------------------------------------------------------------------
 30432                                  ;
 30433                                  ; Procedure Name : FAT_operation
 30434                                  ;
 30435                                  ;----------------------------------------------------------------------------
 30436                                  
 30437                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30438                                  
 30439                                  FAT_operation:
 30440                                  	; 31/07/2018 - Retro DOS v3.0
 30441                                  FATERR:
 30442                                  	;mov	word [es:bp+1Eh],-1
 30443                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 30444 00005852 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 30445                                  					; Err in FAT must force recomp of freespace
 30446                                  	;and	di,0FFh
 30447 00005858 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 30448                                  	;mov	byte [ALLOWED],18h
 30449 0000585C C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30450                                  	;mov	ah,1Ah
 30451 00005861 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 30452 00005863 A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 30453 00005866 E8F8FB                  	call	FATAL1
 30454 00005869 C42E[8A05]              	LES	BP,[THISDPB]
 30455 0000586D 3C03                    	CMP	AL,3
 30456 0000586F 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 30457 00005871 F9                      	STC				; User said FAIL
 30458 00005872 C3                      	retn
 30459                                  
 30460                                  FAT_GOT_DPB:
 30461                                  	;Context DS			;hkn; SS is DOSDATA
 30462 00005873 16                      	push	ss			
 30463 00005874 1F                      	pop	ds
 30464                                  	;mov	al,0Fh
 30465 00005875 B00F                    	MOV	AL,DMEDHL
 30466                                  	;mov	ah,[es:bp+1]
 30467 00005877 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 30468 0000587B A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 30469 0000587E C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 30470 00005883 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30471                                  	;;mov	al,[es:bp+16h]
 30472                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 30473 00005889 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30474 0000588D A2[6703]                	MOV	[CALLMED],AL
 30475 00005890 06                      	PUSH	ES
 30476 00005891 1E                      	PUSH	DS
 30477                                  
 30478                                  ;hkn; DEVCALL is in DOSDATA
 30479 00005892 BB[5A03]                	MOV	BX,DEVCALL
 30480                                  	;;lds	si,[es:bp+12h]
 30481                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 30482 00005895 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 30483 00005899 07                      	POP	ES			; ES:BX Points to call header
 30484 0000589A E8B4EE                  	call	DEVIOCALL2
 30485                                  	;Context DS		 	;hkn; SS is DOSDATA
 30486 0000589D 16                      	push	ss
 30487 0000589E 1F                      	pop	ds
 30488 0000589F 07                      	POP	ES			; Restore ES:BP
 30489 000058A0 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30490                                  	;test	di,8000h
 30491                                  	;jnz	short FATERR
 30492 000058A4 09FF                    	or	di,di
 30493 000058A6 78AA                    	js	short FATERR		; have error
 30494 000058A8 30E4                    	XOR	AH,AH
 30495                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 30496                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 30497 000058AA 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 30498 000058AE A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 30499                                  ; See if we had changed volume id by creating one on the diskette
 30500 000058B1 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 30501 000058B5 7508                    	jnz	short CHECK_BYT
 30502 000058B7 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 30503 000058BC E9A700                  	jmp	GOGETBPB		; Need to get device driver to read in
 30504                                  					; new volume label.
 30505                                  CHECK_BYT:
 30506 000058BF 0A26[6803]              	OR	AH,[CALLRBYT]
 30507                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30508                                  	;JMP	short NEWDSK
 30509                                  	; 17/12/2022
 30510 000058C3 7865                    	js	short NEWDSK
 30511                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30512                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30513                                  	;JMP	short NEWDSK
 30514                                  
 30515                                  CHECK_ZR:
 30516 000058C5 743C                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 30517 000058C7 F8                      	CLC
 30518 000058C8 C3                      	retn				; If Media not changed (NZ)
 30519                                  
 30520                                  DISK_CHNG_ERR:
 30521 000058C9 06                      	PUSH	ES
 30522 000058CA 55                      	PUSH	BP
 30523                                  	;;les	bp,[es:bp+12h]
 30524                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 30525 000058CB 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 30526                                  	;;test	word [es:bp+4],800h
 30527                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 30528 000058CF 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 30529 000058D4 5D                      	POP	BP
 30530 000058D5 07                      	POP	ES
 30531 000058D6 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 30532 000058D8 1E                      	PUSH	DS			; Save buffer pointer for ignore
 30533 000058D9 57                      	PUSH	DI
 30534 000058DA 16                      	push	ss			;hkn; SS is DOSDATA
 30535 000058DB 1F                      	pop	ds
 30536                                  	;mov	byte [ALLOWED],18h
 30537 000058DC C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30538 000058E1 06                      	PUSH	ES
 30539 000058E2 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 30540 000058E6 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 30541 000058EA 07                      	POP	ES
 30542 000058EB 893E[2803]              	MOV	[EXTERRPT],DI
 30543                                  	;mov	ax,0Fh
 30544 000058EF B80F00                  	MOV	AX,error_I24_wrong_disk
 30545 000058F2 C606[7505]01            	MOV	byte [READOP],1		; Write
 30546                                  	;invoke	HARDERR
 30547 000058F7 E815FB                  	call	HARDERR
 30548 000058FA 5F                      	POP	DI			; Get back buffer for ignore
 30549 000058FB 1F                      	POP	DS
 30550 000058FC 3C03                    	CMP	AL,3
 30551                                  FAIL_OPJ2:
 30552 000058FE 741D                    	JZ	short FAIL_OP
 30553 00005900 E970FF                  	JMP	FAT_GOT_DPB		; Retry
 30554                                  
 30555                                  CHKBUFFDIRT:
 30556                                  	; 20/05/2019 - Retro DOS v4.0
 30557                                  
 30558                                  	; MSDOS 3.3
 30559                                  	;lds	di,[BUFFHEAD]
 30560                                  
 30561                                  	; MSDOS 6.0
 30562 00005903 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 30563 00005909 741F                    	je	short NEWDSK			; no, skip the check
 30564 0000590B E8F800                  	call	GETCURHEAD			; get pointer to first buffer
 30565                                  nbuffer:
 30566                                  	;cmp	al,[di+4]
 30567 0000590E 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 30568 00005911 750E                    	jne	short lfnxt			; no, go for next buffer
 30569                                  	;test   byte [di+5],40h
 30570 00005913 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 30571 00005917 7408                    	jz	short lfnxt			; no, go for next buffer
 30572                                  	;Context DS
 30573 00005919 16                      	push	ss
 30574 0000591A 1F                      	pop	ds
 30575 0000591B F8                      	clc
 30576 0000591C C3                      	retn
 30577                                  
 30578                                  FAIL_OP:					; This label & code is here
 30579                                  	;Context DS				;  for reachability
 30580 0000591D 16                      	push	ss
 30581 0000591E 1F                      	pop	ds
 30582 0000591F F9                      	STC
 30583 00005920 C3                      	retn
 30584                                  
 30585                                  lfnxt:
 30586                                  	; 15/08/2018 - Retro DOS v3.0
 30587                                  	; MSDOS 3.3
 30588                                  	;lds	di,[di]
 30589                                  
 30590                                  	; 20/05/2019 - Retro DOS v4.0
 30591 00005921 8B3D                    	mov	di,[di]
 30592                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 30593                                  	
 30594                                  	; MSDOS 3.3
 30595                                  	;cmp	di,-1
 30596                                  	;jne	short nbuffer
 30597                                  	
 30598                                  	; MSDOS 6.0
 30599 00005923 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 30600 00005928 75E4                    	jne	short nbuffer			; no, check this guy also
 30601                                  
 30602                                  ; If no dirty buffers, assume Media changed
 30603                                  NEWDSK:
 30604                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 30605                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30606 0000592A 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 30607                                  						;  recompute
 30608                                  	; MSDOS 3.3
 30609                                  	;call	SETVISIT
 30610                                  	; MSDOS 6.0
 30611 00005930 E8D300                  	call	 GETCURHEAD
 30612                                  nxbuffer:
 30613                                  	; MSDOS 3.3
 30614                                  	;or 	byte [di+5],20h
 30615                                  	; MSDOS 3.3 & MSDOS 6.0
 30616                                  	;cmp	[di+4],al
 30617 00005933 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 30618 00005936 7510                    	jne	short lfnxt2
 30619                                  	;test	byte [di+5],40h
 30620 00005938 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 30621 0000593C 758B                    	jnz	short DISK_CHNG_ERR
 30622                                  	;mov	word [di+4],20FFh
 30623 0000593E C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 30624 00005943 E8D200                  	call	SCANPLACE
 30625                                  	; MSDOS 6.0
 30626 00005946 EB02                    	jmp	short skpbuff
 30627                                  lfnxt2:
 30628 00005948 8B3D                    	mov	di,[di]
 30629                                  	;mov	di,[di+BUFFINFO.buf_next]
 30630                                  skpbuff:
 30631                                  	; MSDOS 6.0
 30632 0000594A 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 30633 0000594F 75E2                    	jne	short nxbuffer
 30634                                  
 30635 00005951 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 30636 00005957 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 30637 00005959 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 30638 0000595E 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 30639 00005960 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 30640                                  ;lfnxt2:
 30641                                  	; MSDOS 3.3
 30642                                  	;call	SKIPVISIT
 30643                                  	;jnz	short nxbuffer
 30644                                  GOGETBPB:
 30645                                  	; MSDOS 3.3 & MSDOS 6.0
 30646                                  	;;lds	di,[es:bp+12h]
 30647                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 30648 00005966 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 30649                                  	; 20/05/2019
 30650                                  	;test	word [di+4],2000h
 30651                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 30652 0000596A F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 30653 0000596E 7510                    	JNZ	short GETFREEBUF
 30654                                  	;context DS	    		;hkn; SS is DOSDATA
 30655 00005970 16                      	push	ss
 30656 00005971 1F                      	pop	ds
 30657 00005972 BB0200                  	MOV	BX,2
 30658 00005975 E8D1FC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 30659                                  FAIL_OPJ:
 30660 00005978 72A3                    	JC	short FAIL_OP
 30661 0000597A C53E[E205]              	LDS	DI,[CURBUF]
 30662 0000597E EB13                    	JMP	SHORT GOTGETBUF
 30663                                  
 30664                                  GETFREEBUF:
 30665 00005980 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 30666 00005981 55                      	PUSH	BP
 30667                                  	; MSDOS 3.3
 30668                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 30669                                  	; MSDOS 6.0
 30670 00005982 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 30671                                  ;hkn; SS override
 30672 00005984 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 30673 00005989 E87A00                  	call	GETCURHEAD		;LB.			  ;AN000;
 30674                                  	; MSDOS 3.3 & MSDOS 6.0
 30675 0000598C E84202                  	call	BUFWRITE
 30676 0000598F 5D                      	POP	BP
 30677 00005990 07                      	POP	ES
 30678                                  	;JC	short FAIL_OPJ
 30679 00005991 728A                    	jc	short FAIL_OP
 30680                                  GOTGETBUF:
 30681                                  	;;add	di,16
 30682                                  	;add	di,20 ; MSDOS 6.0
 30683 00005993 83C714                  	ADD	DI,BUFINSIZ
 30684                                  
 30685                                  ;hkn; SS override
 30686 00005996 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 30687                                  	;Context DS			;hkn; SS is DOSDATA
 30688 0000599B 16                      	push	ss
 30689 0000599C 1F                      	pop	ds
 30690 0000599D 893E[6803]              	MOV	[CALLXAD],DI
 30691                                  	;mov	al,16h
 30692 000059A1 B016                    	MOV	AL,DBPBHL
 30693                                  	;mov	ah,[es:bp+1]
 30694 000059A3 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 30695 000059A7 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 30696 000059AA C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 30697 000059AF C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30698                                  	;;mov	al,[es:bp+16h]
 30699                                  	;mov	al,[es:bp+17h]
 30700 000059B5 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30701 000059B9 A2[6703]                	MOV	[CALLMED],AL
 30702 000059BC 06                      	PUSH	ES
 30703 000059BD 1E                      	PUSH	DS
 30704                                  	;;push	word [es:bp+14h]
 30705                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 30706 000059BE 26FF7615                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 30707                                  	;;push	word [es:bp+12h]
 30708                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 30709 000059C2 26FF7613                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 30710                                  
 30711                                  ;hkn; DEVCALL is in DOSDATA
 30712 000059C6 BB[5A03]                	MOV	BX,DEVCALL
 30713 000059C9 5E                      	POP	SI
 30714 000059CA 1F                      	POP	DS			; DS:SI Points to device header
 30715 000059CB 07                      	POP	ES			; ES:BX Points to call header
 30716                                  	;invoke	DEVIOCALL2
 30717 000059CC E882ED                  	call	DEVIOCALL2
 30718 000059CF 07                      	POP	ES			; Restore ES:BP
 30719                                  	;Context DS
 30720 000059D0 16                      	push	ss		 	;hkn; SS is DOSDATA
 30721 000059D1 1F                      	pop	ds
 30722 000059D2 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30723                                  	; MSDOS 3.3
 30724                                  	;test	di,8000h
 30725                                  	;jnz	short FATERRJ
 30726                                  	; MSDOS 6.0
 30727 000059D6 09FF                    	or	di,di
 30728 000059D8 7829                    	js	short FATERRJ 		; have error
 30729                                  	;;mov	al,[es:bp+16h]
 30730                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 30731 000059DA 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30732 000059DE C536[6C03]              	LDS	SI,[CALLBPB]
 30733                                  	;;mov	word [es:bp+1Ch],0
 30734                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 30735 000059E2 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 30736                                  	;invoke	$SETDPB
 30737 000059E8 E85DB6                  	call	_$SETDPB
 30738                                  
 30739                                  ;hkn; SS override
 30740 000059EB 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 30741                                  	;mov	al,[es:bp+8]
 30742 000059F0 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 30743                                  
 30744                                  	; MSDOS 3.3
 30745                                  	;;mov	ah,[es:bp+0Fh]
 30746                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 30747                                  	;;mov	[DI-8],ax
 30748                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 30749                                  
 30750                                  	; MSDOS 6.0
 30751                                  	;mov	[di-0Ah],al
 30752 000059F4 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 30753                                  						;>32mb		  ;AN000;
 30754                                  	;mov	ax,[es:bp+0Fh]
 30755 000059F7 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 30756                                  	;mov	[di-9h],ax			  ;AC000;
 30757 000059FB 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 30758                                  					;>32mb Correct buffer info ;AC000;
 30759                                  	;Context DS			;hkn; SS is DOSDATA
 30760 000059FE 16                      	push	ss
 30761 000059FF 1F                      	pop	ds
 30762 00005A00 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 30763 00005A02 C3                      	retn
 30764                                  
 30765                                  FATERRJ: 
 30766 00005A03 E94CFE                  	JMP	FATERR
 30767                                  
 30768                                  ;============================================================================
 30769                                  ; STDBUF.ASM
 30770                                  ;============================================================================
 30771                                  ; Retro DOS v2.0 - 12/03/2018
 30772                                  
 30773                                  ;
 30774                                  ; Standard buffer management for MSDOS
 30775                                  ;
 30776                                  
 30777                                  ;.xlist
 30778                                  ;.xcref
 30779                                  ;INCLUDE STDSW.ASM
 30780                                  ;.cref
 30781                                  ;.list
 30782                                  
 30783                                  ;TITLE	STDBUF - MSDOS buffer management
 30784                                  ;NAME	STDBUF
 30785                                  
 30786                                  ;INCLUDE BUF.ASM
 30787                                  
 30788                                  ;============================================================================
 30789                                  ; BUF.ASM
 30790                                  ;============================================================================
 30791                                  ; 31/07/2018 - Retro DOS v3.0
 30792                                  ; Retro DOS v2.0 - 12/03/2018
 30793                                  ;
 30794                                  ; buffer management for MSDOS
 30795                                  ;
 30796                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 30797                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 30798                                  ;
 30799                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 30800                                  ;
 30801                                  ;SETVISIT:
 30802                                  ;	; 31/07/2018 - Retro DOS v3.0
 30803                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 30804                                  ;; Inputs:
 30805                                  ;;      None
 30806                                  ;; Function:
 30807                                  ;;      Set up a scan of I/O buffers
 30808                                  ;; Outputs:
 30809                                  ;;      All visit flags = 0
 30810                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 30811                                  ;;                    may cause a scan to stop in the middle leaving some
 30812                                  ;;                    visit flags set, and some not set.
 30813                                  ;;      DS:DI Points to [BUFFHEAD]
 30814                                  ;; No other registers altered
 30815                                  ;
 30816                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30817                                  ;	PUSH    AX
 30818                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 30819                                  ;	;mov	al,0DFh
 30820                                  ;	mov	al,~buf_visit
 30821                                  ;SETLOOP:
 30822                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 30823                                  ;	;and	[DI+5],al
 30824                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 30825                                  ;       LDS     DI,[DI]
 30826                                  ;       CMP     DI,-1
 30827                                  ;       JNZ     SHORT SETLOOP
 30828                                  ;       POP     AX ; 09/09/2018
 30829                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30830                                  ;SVISIT_RETN:
 30831                                  ;       RETN
 30832                                  ;
 30833                                  ;SKIPVISIT:
 30834                                  ;	; 31/07/2018 - Retro DOS v3.0
 30835                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 30836                                  ;
 30837                                  ;; Inputs:
 30838                                  ;;      DS:DI Points to a buffer
 30839                                  ;; Function:
 30840                                  ;;      Skip visited buffers
 30841                                  ;; Outputs:
 30842                                  ;;      DS:DI Points to next unvisited buffer
 30843                                  ;;      Zero is set if skip to LAST buffer
 30844                                  ;; No other registers altered
 30845                                  ;
 30846                                  ;       CMP     DI,-1
 30847                                  ;       ;retz
 30848                                  ;       JZ	SHORT SVISIT_RETN
 30849                                  ;
 30850                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 30851                                  ;       ;;;retnz
 30852                                  ;       ;;JNZ	SHORT SVISIT_RETN
 30853                                  ;
 30854                                  ;	;test	byte [di+5],20h
 30855                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 30856                                  ;	JNZ	short SKIPLOOP
 30857                                  ;	
 30858                                  ;	push	ax
 30859                                  ;	or	al,1
 30860                                  ;	pop	ax
 30861                                  ;	retn	
 30862                                  ;
 30863                                  ;SKIPLOOP:
 30864                                  ;	LDS     DI,[DI]
 30865                                  ;       JMP     SHORT SKIPVISIT
 30866                                  
 30867                                  ;============================================================================
 30868                                  ; BUF.ASM, MSDOS 6.0, 1991
 30869                                  ;============================================================================
 30870                                  ; 31/07/2018 - Retro DOS v3.0
 30871                                  ; 04/05/2019 - Retro DOS v4.0
 30872                                  
 30873                                  ;	TITLE	BUF - MSDOS buffer management
 30874                                  ;	NAME	BUF
 30875                                  
 30876                                  ;**	BUF.ASM - Low level routines for buffer cache management
 30877                                  ;
 30878                                  ;	GETCURHEAD
 30879                                  ;	ScanPlace
 30880                                  ;	PLACEBUF
 30881                                  ;	PLACEHEAD
 30882                                  ;	PointComp
 30883                                  ;	GETBUFFR
 30884                                  ;	GETBUFFRB
 30885                                  ;	FlushBuf
 30886                                  ;	BufWrite
 30887                                  ;	SET_RQ_SC_PARMS
 30888                                  ;
 30889                                  ;	Revision history:
 30890                                  ;
 30891                                  ;		AN000  version 4.00  Jan. 1988
 30892                                  ;		A004   PTM 3765 -- Disk reset failed
 30893                                  ;		M039 DB 10/17/90 - Disk write optimization
 30894                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 30895                                  
 30896                                  ;Break	<GETCURHEAD -- Get current buffer header>
 30897                                  ;----------------------------------------------------------------------------
 30898                                  ; Procedure Name : GetCurHead
 30899                                  ; Inputs:
 30900                                  ;	 No Inputs
 30901                                  ; Function:
 30902                                  ;	Returns the pointer to the first buffer in Queue
 30903                                  ;	and updates FIRST_BUFF_ADDR
 30904                                  ;       and invalidates LASTBUFFER (recency pointer)
 30905                                  ; Outputs:
 30906                                  ;	DS:DI = pointer to the first buffer in Queue
 30907                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 30908                                  ;       LASTBUFFER = -1
 30909                                  ; No other registers altered
 30910                                  ;----------------------------------------------------------------------------
 30911                                  
 30912                                  ; 04/05/2019 - Retro DOS v4.0
 30913                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 30914                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30915                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 30916                                  
 30917                                  GETCURHEAD:
 30918 00005A06 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 30919 00005A0B 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 30920 00005A12 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 30921 00005A17 C3                      	retn
 30922                                  
 30923                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 30924                                  ;----------------------------------------------------------------------------
 30925                                  ; Procedure Name : ScanPlace
 30926                                  ; Inputs:
 30927                                  ;	Same as PLACEBUF
 30928                                  ; Function:
 30929                                  ;	Save scan location and call PLACEBUF
 30930                                  ; Outputs:
 30931                                  ;	DS:DI Points to saved scan location
 30932                                  ; All registers, except DS:DI, preserved.
 30933                                  ;----------------------------------------------------------------------------
 30934                                  ;M039: Rewritten to preserve registers.
 30935                                  
 30936                                  ;SCANPLACE:
 30937                                  ;	; 31/07/2018 - Retro DOS v3.0
 30938                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 30939                                  ;	push	es
 30940                                  ;	les	si,[di]
 30941                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 30942                                  ;	call	PLACEBUF
 30943                                  ;	push	es
 30944                                  ;	pop	ds
 30945                                  ;	mov	di,si
 30946                                  ;	pop	es
 30947                                  ;scanplace_retn:
 30948                                  ;	retn	
 30949                                  	
 30950                                  	; MSDOS 6.0
 30951                                  SCANPLACE:
 30952 00005A18 FF35                    	push	word [di]
 30953                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 30954 00005A1A E80200                  	call	PLACEBUF
 30955 00005A1D 5F                      	pop	di
 30956 00005A1E C3                      	retn
 30957                                  
 30958                                  ;----------------------------------------------------------------------------
 30959                                  ; Procedure Name : PlaceBuf
 30960                                  ; Input:
 30961                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 30962                                  ; Function:
 30963                                  ;	Remove buffer from queue and re-insert it in proper place.
 30964                                  ; NO registers altered
 30965                                  ;----------------------------------------------------------------------------
 30966                                  
 30967                                  ;procedure PLACEBUF,NEAR
 30968                                  
 30969                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30970                                  	; 20/05/2019 - Retro DOS v4.0
 30971                                  PLACEBUF:
 30972                                  	; 31/07/2018 - Retro DOS v3.0
 30973                                  
 30974                                  	; MSDOS 6.0
 30975 00005A1F 50                      	push	AX			;Save only regs we modify	;AN000;
 30976 00005A20 53                      	push	BX							;AN000;
 30977 00005A21 56                      	push	SI							;AN000;
 30978                                  	
 30979 00005A22 8B05                    	mov	ax,[di]
 30980                                  	;mov	ax,[di+BUFFINFO.buf_next]
 30981 00005A24 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 30982                                  	
 30983 00005A29 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 30984 00005A2B 7420                    	je	short nret			;Yes, special case	;AN000;
 30985 00005A2D 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 30986 00005A2F 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 30987 00005A31 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 30988 00005A35 EB16                    	jmp	short nret 			;Continue with repositioning;AN000;
 30989                                  not_first:
 30990                                  	;mov	si,[di+2]
 30991 00005A37 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 30992 00005A3A 8904                    	mov	[si],ax
 30993                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 30994 00005A3C 96                      	xchg	si,ax
 30995                                  	;mov	[si+2],ax
 30996 00005A3D 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 30997                                  	
 30998 00005A40 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 30999 00005A43 893C                    	mov	[si],di
 31000                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 31001 00005A45 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 31002 00005A48 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 31003 00005A4B 891D                    	mov	[di],bx
 31004                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 31005                                  nret:									;AN000;
 31006 00005A4D 5E                      	pop	SI							;AN000;
 31007 00005A4E 5B                      	pop	BX							;AN000;
 31008 00005A4F 58                      	pop	AX							;AN000;
 31009                                  									;AN000;
 31010                                  	;cmp	byte [di+4],0FFh
 31011 00005A50 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 31012 00005A54 7505                            jne	short pbx			; M039: -no, jump.
 31013 00005A56 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 31014                                  pbx:	
 31015 00005A5B C3                      	retn								;AN000;
 31016                                  
 31017                                  	; 31/07/2018 - Retro DOS v3.0
 31018                                  
 31019                                  	; MSDOS 3.3
 31020                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31021                                  
 31022                                  ;PLACEBUF:
 31023                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31024                                  ;	
 31025                                  ;       CALL	save_world
 31026                                  ;       LES     CX,[DI]
 31027                                  ;       CMP     CX,-1           	; Buf is LAST?
 31028                                  ;       JZ      SHORT NRET		; Buffer already last
 31029                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 31030                                  ;       PUSH    DS
 31031                                  ;       POP     ES              	; Buf is ES:DI
 31032                                  ;	; 15/03/2018
 31033                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 31034                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 31035                                  ;       JNZ     SHORT BUFLOOP
 31036                                  ;       MOV     [SS:BUFFHEAD],CX
 31037                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 31038                                  ;       JMP     SHORT LOOKEND
 31039                                  ;BUFLOOP:
 31040                                  ;	; 31/07/2018
 31041                                  ;	mov	ax,ds
 31042                                  ;	mov	bx,si
 31043                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31044                                  ;       LDS     SI,[SI]
 31045                                  ;       CALL    POINTCOMP
 31046                                  ;       jnz	short BUFLOOP
 31047                                  ;	;
 31048                                  ;	mov	ds,ax
 31049                                  ;	mov	si,bx
 31050                                  ;	mov	[SI],cx
 31051                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 31052                                  ;	mov	[SI+2],bp
 31053                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 31054                                  ;LOOKEND:
 31055                                  ;	mov	ax,ds
 31056                                  ;	mov	bx,si
 31057                                  ;       LDS     SI,[SI]
 31058                                  ;       CMP     SI,-1
 31059                                  ;       jnz     short LOOKEND
 31060                                  ;GOTHEEND:
 31061                                  ;       mov	ds,ax
 31062                                  ;	mov	[BX],di
 31063                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 31064                                  ;       MOV     WORD [ES:DI],-1
 31065                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 31066                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 31067                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 31068                                  ;NRET:
 31069                                  ;       CALL	restore_world
 31070                                  ;	
 31071                                  ;	;cmp	byte [di+4],-1
 31072                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 31073                                  ;	jnz     short scanplace_retn
 31074                                  ;	call    PLACEHEAD
 31075                                  ;	retn
 31076                                  
 31077                                  ;EndProc PLACEBUF
 31078                                  
 31079                                  ;M039 - Removed PLACEHEAD.
 31080                                  ;----------------------------------------------------------------------------
 31081                                  ; places buffer at head
 31082                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 31083                                  ;	ONE IN THE LIST!!!!!!!
 31084                                  ; BUGBUG ---- this routine can be removed because it has only
 31085                                  ; BUGBUG ---- one instruction. This routine is called from
 31086                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 31087                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 31088                                  ; BUGBUG ---- But kept as it is for modularity
 31089                                  ;----------------------------------------------------------------------------
 31090                                  ;procedure   PLACEHEAD,NEAR
 31091                                  ;	mov	word ptr [BufferQueue], di
 31092                                  ;	ret
 31093                                  ;EndProc PLACEHEAD
 31094                                  ;M039
 31095                                  
 31096                                  ;----------------------------------------------------------------------------
 31097                                  ; Procedure Name : PLACEHEAD
 31098                                  ;
 31099                                  ; SAME AS PLACEBUF except places buffer at head
 31100                                  ;----------------------------------------------------------------------------
 31101                                  
 31102                                  	; MSDOS 3.3 (Retro DOS v3.0)
 31103                                  	; 05/09/2018
 31104                                  	; MSDOS 2.11 (Retro DOS v2.0)
 31105                                  ;PLACEHEAD:
 31106                                  ;	; 31/07/2018 - Retro DOS v3.0
 31107                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 31108                                  ;
 31109                                  ;       CALL	save_world
 31110                                  ;       PUSH	DS
 31111                                  ;       POP	ES
 31112                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31113                                  ;       LDS     SI,[SS:BUFFHEAD]
 31114                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 31115                                  ;	CALL    POINTCOMP
 31116                                  ;       JZ      SHORT GOTHEEND2
 31117                                  ;	MOV	[ES:DI],SI
 31118                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 31119                                  ;       MOV	[ES:DI+2],DS
 31120                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 31121                                  ;       MOV	[SS:BUFFHEAD],DI
 31122                                  ;       MOV	[SS:BUFFHEAD+2],ES
 31123                                  ;LOOKEND2:
 31124                                  ;       mov	ax,ds
 31125                                  ;	mov	bx,si
 31126                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31127                                  ;       LDS     SI,[SI]
 31128                                  ;       CALL    POINTCOMP
 31129                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 31130                                  ;       mov	ds,ax
 31131                                  ;	mov	word [bx],-1
 31132                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 31133                                  ;	mov	word [bx+2],-1
 31134                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 31135                                  ;GOTHEEND2:
 31136                                  ;      	call	restore_world
 31137                                  ;placehead_retn:
 31138                                  ;	retn
 31139                                  
 31140                                  ; 20/05/2019 - Retro DOS v4.0
 31141                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 31142                                  
 31143                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 31144                                  ;----------------------------------------------------------------------------
 31145                                  ;
 31146                                  ; Procedure Name : PointComp
 31147                                  ; Inputs:
 31148                                  ;         DS:SI & ES:DI
 31149                                  ; Function:
 31150                                  ;          Checks for ((SI==DI) && (ES==DS))
 31151                                  ;	   Assumes that pointers are normalized for the
 31152                                  ;	   same segment
 31153                                  ;
 31154                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 31155                                  ; DO NOT USE FOR < or >
 31156                                  ; No Registers altered
 31157                                  ;
 31158                                  ;----------------------------------------------------------------------------
 31159                                  
 31160                                  POINTCOMP:
 31161                                  	; 31/07/2018 - Retro DOS v3.0
 31162                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 31163 00005A5C 39FE                    	CMP	SI,DI
 31164 00005A5E 750A                    	jnz	short _ret_label	; return if nz
 31165                                  	;jnz	short placehead_retn 
 31166 00005A60 51                      	PUSH	CX
 31167 00005A61 52                      	PUSH	DX
 31168 00005A62 8CD9                    	MOV	CX,DS
 31169 00005A64 8CC2                    	MOV	DX,ES
 31170 00005A66 39D1                    	CMP	CX,DX
 31171 00005A68 5A                      	POP	DX
 31172 00005A69 59                      	POP	CX
 31173                                  _ret_label:
 31174 00005A6A C3                      	retn
 31175                                  
 31176                                  ; 01/08/2018 - Retro DOS v3.0
 31177                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 31178                                  
 31179                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 31180                                  
 31181                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 31182                                  ;----------------------------------------------------------------------------
 31183                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 31184                                  ;	It gets the specified local sector into one of the I/O buffers
 31185                                  ;	and shuffles the queue
 31186                                  ; 
 31187                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31188                                  ;		       ELSE no pre-read
 31189                                  ;		(DX) = Desired physical sector number	      (LOW)
 31190                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31191                                  ;		(ES:BP) = Pointer to drive parameters
 31192                                  ;		ALLOWED set in case of INT 24
 31193                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31194                                  ;		'C' clear if OK
 31195                                  ;		CURBUF Points to the Buffer for the sector
 31196                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31197                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31198                                  ;----------------------------------------------------------------------------
 31199                                  
 31200                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 31201                                  ;----------------------------------------------------------------------------
 31202                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 31203                                  ;	It gets the specified sector into one of the I/O buffers
 31204                                  ;	and shuffles the queue. We need a special entry point so that
 31205                                  ;	we can read the alternate FAT sector if the first read fails, also
 31206                                  ;	so we can mark the buffer as a FAT sector.
 31207                                  ; 
 31208                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31209                                  ;		       ELSE no pre-read
 31210                                  ;		(DX) = Desired physical sector number	     (LOW)
 31211                                  ;		(SI) != 0
 31212                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31213                                  ;		(ES:BP) = Pointer to drive parameters
 31214                                  ;		ALLOWED set in case of INT 24
 31215                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31216                                  ;		'C' clear if OK
 31217                                  ;		CUR ddBUF Points to the Buffer for the sector
 31218                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31219                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31220                                  ;----------------------------------------------------------------------------
 31221                                  
 31222                                  	; 20/05/2019 - Retro DOS v4.0
 31223                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 31224                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31225                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 31226                                  GETBUFFR:
 31227 00005A6B 31F6                    	XOR	SI,SI
 31228                                  
 31229                                  ;	This entry point is called for FAT buffering with SI != 0
 31230                                  
 31231                                  GETBUFFRB:
 31232 00005A6D A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 31233                                  	; 15/12/2022
 31234 00005A70 268A4600                	mov	al,[ES:BP]
 31235                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31236                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 31237 00005A74 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 31238                                  	; MSDOS 6.0
 31239                                  ;hkn; SS override
 31240 00005A78 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 31241                                  
 31242                                  ;	See if this is the buffer that was most recently returned.
 31243                                  ;	A big performance win if it is.
 31244                                  
 31245 00005A7D 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 31246 00005A80 7412                    	je	short getb5			; No
 31247                                  	;cmp	dx,[di+6]
 31248 00005A82 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31249 00005A85 750D                    	JNZ	short getb5			; Wrong sector
 31250                                  	
 31251                                  	; MSDOS 6.0
 31252                                  	;cmp	cx,[di+8]
 31253 00005A87 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 31254 00005A8A 7508                    	JNZ	short getb5			; F.C. >32mb		;AN000;
 31255                                  	
 31256                                  	;cmp	al,[di+4]
 31257 00005A8C 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31258                                  	;JZ	getb35				; Just asked for same buffer
 31259 00005A8F 7503                    	jnz	short getb5
 31260                                  	;jmp	getb35
 31261                                  	; 17/12/2022
 31262                                  	; 28/07/2019
 31263 00005A91 E9C800                  	jmp	getb35x
 31264                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31265                                  	;jmp	getb35
 31266                                  
 31267                                  ;	It's not the buffer most recently returned. See if it's in the
 31268                                  ;	cache.
 31269                                  ;
 31270                                  ;	(cx:dx) = sector #
 31271                                  ;	(al) = drive #
 31272                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31273                                  ;	??? list may be incomplete ???
 31274                                  
 31275                                  getb5:	
 31276                                  	; MSDOS 3.3
 31277                                  	;lds	di,[SS:BUFFHEAD]
 31278                                  	; MSDOS 6.0
 31279 00005A94 E86FFF                  	CALL	GETCURHEAD			; get Q Head
 31280                                  getb10:	
 31281                                  	;cmp	dx,[di+6]
 31282 00005A97 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31283 00005A9A 750D                    	jne	short getb12			; wrong sector lo
 31284                                  	
 31285                                  	; MSDOS 6.0
 31286                                  	;cmp	cx,[di+8]
 31287 00005A9C 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 31288 00005A9F 7508                    	jne	short getb12			; wrong sector hi
 31289                                  	
 31290                                  	;cmp	al,[di+4]
 31291 00005AA1 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31292                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 31293 00005AA4 7503                    	jne	short getb12
 31294 00005AA6 E98D00                  	jmp	getb25
 31295                                  getb12:	
 31296                                  	; MSDOS 3.3
 31297                                  	;;mov	di,[DI]
 31298                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 31299                                  	;
 31300                                  	; 15/08/2018
 31301                                  	;lds	di,[di]
 31302                                  
 31303                                  	;cmp	di,-1 ; 0FFFFh
 31304                                  	;jne	short getb10
 31305                                  	;lds	di,[SS:BUFFHEAD]
 31306                                  
 31307                                  	; MSDOS 6.0
 31308 00005AA9 8B3D                    	mov	di,[di]
 31309                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 31310 00005AAB 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 31311 00005AB0 75E5                    	jne	short getb10			; no, continue looking
 31312                                  
 31313                                  ;	The requested sector is not available in the buffers. DS:DI now points
 31314                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 31315                                  ;	new sector into it.
 31316                                  ;
 31317                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 31318                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 31319                                  ;	him, we should take LRU. And the above lookup shouldn't be
 31320                                  ;	down a chain, but should be hashed.
 31321                                  ;
 31322                                  ;	(DS:DI) = first buffer in the queue
 31323                                  ;	(CX:DX) = sector # we want
 31324                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31325                                  
 31326                                  	; MSDOS 3.3 & MSDOS 6.0
 31327                                  ;hkn; SS override
 31328 00005AB2 51                      	PUSH	CX  ; MSDOS 6.0
 31329 00005AB3 56                      	push	si
 31330 00005AB4 52                      	push	dx
 31331 00005AB5 55                      	push	bp
 31332 00005AB6 06                      	push	es
 31333 00005AB7 E81701                  	CALL	BUFWRITE			; Write out the dirty buffer
 31334 00005ABA 07                      	pop	es
 31335 00005ABB 5D                      	pop	bp
 31336 00005ABC 5A                      	pop	dx
 31337 00005ABD 5E                      	pop	si
 31338 00005ABE 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 31339                                  	;jc	short getbx			; if got hard error
 31340 00005AC3 7303                    	jnc	short getb13
 31341 00005AC5 E99E00                  	jmp	getbx
 31342                                  
 31343                                  getb13:
 31344                                  	; MSDOS 6.0
 31345 00005AC8 E89301                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 31346                                  
 31347                                  ;	We're ready to read in the buffer, if need be. If the caller
 31348                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 31349                                  
 31350 00005ACB 30E4                    	XOR	AH,AH				; initial flags
 31351                                  ;hkn; SS override
 31352                                  	;test	byte [ss:PREREAD],0FFh
 31353                                  	;jnz	short getb20
 31354 00005ACD 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 31355 00005AD2 754A                    	JNZ	short getb20			; no, we're done
 31356                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 31357                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31358 00005AD4 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 31359 00005AD7 B90100                  	MOV	CX,1
 31360 00005ADA 56                      	push	si
 31361 00005ADB 57                      	push	di
 31362 00005ADC 52                      	push	dx
 31363                                  	; MSDOS 6.0
 31364 00005ADD 06                      	push	es ; ***
 31365                                  
 31366                                  ; Note: As far as I can tell, all disk reads into buffers go through
 31367                                  ;	this point. -mrw 10/88
 31368                                  	
 31369 00005ADE 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 31370 00005AE4 7407                    	jz	short getb14
 31371 00005AE6 1E                      	push	ds ; **
 31372 00005AE7 53                      	push	bx ; *
 31373 00005AE8 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 31374                                  getb14:
 31375                                  ;M039: Eliminated redundant HMA code.
 31376                                  
 31377                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31378 00005AED 09F6                    	OR	SI,SI			; FAT sector ?
 31379 00005AEF 7407                    	JZ	short getb15		
 31380                                  
 31381 00005AF1 E8A9DC                  	call	FATSECRD
 31382                                  	;mov	ah,2
 31383 00005AF4 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 31384                                  
 31385 00005AF6 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 31386                                  
 31387                                  getb15:
 31388 00005AF8 E8CEDC                  	call	DREAD			; Buffer is marked free if read barfs
 31389 00005AFB B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 31390                                  getb17:
 31391                                  	; 17/12/2022	
 31392                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31393                                  ;%if 0
 31394                                  	; MSDOS 6.0							  ;I001
 31395 00005AFD 9C                      	pushf								  ;I001
 31396 00005AFE 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 31397 00005B04 7411                    	jz	short not_in_hma	; no				  ;I001
 31398                                  	;mov	cx,[es:bp+2]
 31399 00005B06 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 31400 00005B0A D1E9                    	shr	cx,1							  ;I001
 31401 00005B0C 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 31402 00005B0D 89DE                    	mov	si,bx							  ;I001
 31403 00005B0F 5F                      	pop	di ; *							  ;I001
 31404 00005B10 07                      	pop	es ; **							  ;I001
 31405 00005B11 FC                      	cld								  ;I001
 31406 00005B12 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 31407 00005B13 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 31408 00005B15 06                      	push	es							  ;I001
 31409 00005B16 1F                      	pop	ds							  ;I001
 31410                                  ;%endif
 31411                                  
 31412                                  ; 17/12/2022
 31413                                  %if 0
 31414                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31415                                  	; MSDOS 5.0
 31416                                  	pushf
 31417                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 31418                                  	jz	short not_in_hma	; no
 31419                                  	popf
 31420                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 31421                                  	shr	cx,1
 31422                                  	mov	si,bx
 31423                                  	pop	di ; *
 31424                                  	pop	es ; **
 31425                                  	cld
 31426                                  	rep	movsw
 31427                                  	push	es
 31428                                  	pop	ds
 31429                                  	jmp	short getb19 ; 27/11/2022
 31430                                  %endif
 31431                                  
 31432                                  not_in_hma:								  ;I001
 31433 00005B17 9D                      	popf							 	  ;I001
 31434                                  getb19:
 31435 00005B18 07                      	pop	es ; ***
 31436 00005B19 5A                      	pop	dx
 31437 00005B1A 5F                      	pop	di
 31438 00005B1B 5E                      	pop	si
 31439 00005B1C 7248                    	JC	short getbx
 31440                                  
 31441                                  ;	The buffer has the data setup in it (if we were to read)
 31442                                  ;	Setup the various buffer fields
 31443                                  ;
 31444                                  ;	(ds:di) = buffer address
 31445                                  ;	(es:bp) = DPB address
 31446                                  ;	(HIGH_SECTOR:DX) = sector #
 31447                                  ;	(ah) = BUF_FLAGS value
 31448                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 31449                                  
 31450                                  ;hkn; SS override
 31451                                  getb20:	; MSDOS 6.0
 31452 00005B1E 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 31453                                  	;mov	[di+8],cx
 31454 00005B23 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 31455                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31456                                   	;mov	[di+6],dx
 31457 00005B26 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 31458                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 31459                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 31460 00005B29 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 31461                                  	;;mov	[di+0Ch],es
 31462                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 31463 00005B2C 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 31464                                  	; 15/12/2022
 31465 00005B2F 268A4600                	mov	al,[es:bp]
 31466                                  	;mov	al,[es:bp+0]
 31467                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31468                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 31469                                  	;mov	[di+4],ax
 31470 00005B33 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 31471                                  getb25:	
 31472                                  	; MSDOS 3.3
 31473                                  	;mov     ax,1
 31474                                  
 31475                                  	; MSDOS 6.0
 31476                                  	;mov	byte [di+0Ah],1
 31477 00005B36 C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 31478 00005B3A 31C0                    	XOR	AX,AX
 31479                                  
 31480                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31481 00005B3C 09F6                    	OR	SI,SI				; FAT sector ?
 31482 00005B3E 740B                    	JZ	short getb30
 31483                                  
 31484                                  	;mov	al,[es:bp+8]
 31485 00005B40 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 31486                                  	
 31487                                  	; MSDOS 6.0
 31488 00005B44 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 31489                                  	;mov	ax,[es:bp+0Fh]
 31490 00005B47 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 31491                                  						;  sectors
 31492                                  	; MSDOS 3.3
 31493                                  	;;mov	ah,[es:bp+0Fh]
 31494                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31495                                  
 31496                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 31497                                  ;		is set
 31498                                  
 31499                                  getb30:	
 31500                                  	; MSDOS 6.0
 31501                                  	;mov	[di+0Bh],ax
 31502 00005B4B 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 31503                                  
 31504                                  	; MSDOS 3.3
 31505                                  	;;mov	[di+8],ax ; 15/08/2018	
 31506                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 31507                                  
 31508 00005B4E E8CEFE                  	CALL	PLACEBUF
 31509                                  
 31510                                  ;hkn; SS override for next 4
 31511                                  getb35: 
 31512                                  	; 17/12/2022
 31513                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31514                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 31515                                  	;MOV	[SS:CURBUF+2],DS
 31516                                  	;MOV	[SS:LastBuffer+2],DS
 31517                                  	;MOV	[SS:CURBUF],DI
 31518                                  	;MOV	[SS:LastBuffer],DI
 31519                                  	;CLC
 31520                                  
 31521                                  	; 17/12/2022
 31522                                  	; 07/12/2022
 31523                                  	; Retro DOS v4.0
 31524 00005B51 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 31525 00005B56 36893E[1E00]            	mov	[ss:LastBuffer],di
 31526 00005B5B F8                      	clc
 31527                                  getb35x: ; 28/07/2019
 31528 00005B5C 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 31529 00005B61 36893E[E205]            	MOV	[ss:CURBUF],di
 31530                                  
 31531                                  ;	Return with 'C' set appropriately
 31532                                  ;	(dx) = caller's original value
 31533                                  
 31534                                  getbx:	
 31535 00005B66 16                      	push	ss
 31536 00005B67 1F                      	pop	ds
 31537                                  	;retn
 31538                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31539                                  getbuffrb_retn:
 31540                                  ;flushbuf_retn:	; 17/12/2022
 31541 00005B68 C3                      	retn
 31542                                  
 31543                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 31544                                  ;----------------------------------------------------------------------------
 31545                                  ; Input:
 31546                                  ;	DS = DOSGROUP
 31547                                  ;	AL = Physical unit number local buffers only
 31548                                  ;	   = -1 for all units and all remote buffers
 31549                                  ; Function:
 31550                                  ;	Write out all dirty buffers for unit, and flag them as clean
 31551                                  ;	Carry set if error (user FAILed to I 24)
 31552                                  ;	    Flush operation completed.
 31553                                  ; DS Preserved, all others destroyed (ES too)
 31554                                  ;----------------------------------------------------------------------------
 31555                                  
 31556                                  	; 20/05/2019 - Retro DOS v4.0
 31557                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 31558                                  
 31559                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31560                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 31561                                  FLUSHBUF:
 31562                                  	; MSDOS 3.3
 31563                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 31564                                  	;lds	di,[BUFFHEAD]
 31565                                  
 31566                                  	; MSDOS 6.0
 31567 00005B69 E89AFE                  	call	GETCURHEAD
 31568                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31569 00005B6C 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31570 00005B72 7508                    	jnz	short scan_buf_queue
 31571 00005B74 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 31572 00005B7A 7423                    	je	short end_scan
 31573                                  	
 31574                                  scan_buf_queue:
 31575 00005B7C E82900                  	call	CHECKFLUSH
 31576                                  	;push	ax  ; MSDOS 3.3
 31577                                  	; MSDOS 6.0
 31578                                  	;mov	ah,[di+4]
 31579 00005B7F 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 31580 00005B82 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 31581 00005B87 7408                    	je	short free_the_buf
 31582                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31583 00005B89 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31584 00005B8F 7405                    	jz	short dont_free_the_buf
 31585                                  	; MSDOS 3.3
 31586                                  	;;mov	al,[di+4]
 31587                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 31588                                  	;cmp	[SS:WPERR],al					;hkn;
 31589                                  	; 15/08/2018
 31590                                  	;jne	short dont_free_the_buf	
 31591                                  free_the_buf:
 31592                                  	; MSDOS 6.0 (& MSDOS 3.3)
 31593 00005B91 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 31594                                  dont_free_the_buf:
 31595                                  	;pop	ax  ; MSDOS 3.3 	   	
 31596                                  
 31597                                  	; MSDOS 3.3
 31598                                  	;mov	di,[DI]
 31599                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 31600                                  	;
 31601                                  	; 15/08/2018
 31602                                  	;lds	di,[di]
 31603                                  	;
 31604                                  	;cmp	di,-1 ; 0FFFFh
 31605                                  	;jnz	short scan_buf_queue 
 31606                                  	
 31607                                  	; MSDOS 6.0
 31608 00005B96 8B3D                    	mov	di,[di]
 31609                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 31610 00005B98 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 31611 00005B9D 75DD                    	jne	short scan_buf_queue
 31612                                  
 31613                                  end_scan:
 31614 00005B9F 16                      	push	ss
 31615 00005BA0 1F                      	pop	ds
 31616                                  	; 01/08/2018 - Retro DOS v3.0
 31617                                  	;cmp	byte [FAILERR],0
 31618                                  	;jne	short bad_flush
 31619                                  	;retn
 31620                                  ;bad_flush:
 31621                                  	;stc
 31622                                  	;retn
 31623                                  
 31624                                  	; 17/12/2022
 31625                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31626                                  	; 01/08/2018 - Retro DOS v3.0
 31627 00005BA1 803E[4A03]01            	cmp	byte [FAILERR],1
 31628 00005BA6 F5                      	cmc
 31629                                  flushbuf_retn:
 31630 00005BA7 C3                      	retn
 31631                                  	
 31632                                  	; 17/12/2022
 31633                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31634                                  	;cmp	byte [FAILERR],0
 31635                                  	;jne	short bad_flush
 31636                                  	;retn
 31637                                  ;bad_flush:
 31638                                  	;stc
 31639                                  	;retn
 31640                                  
 31641                                  ;----------------------------------------------------------------------------
 31642                                  ;
 31643                                  ; Procedure Name : CHECKFLUSH
 31644                                  ;
 31645                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 31646                                  ;	   DS:DI - pointer to buffer
 31647                                  ;
 31648                                  ; Function : Write out a buffer if it is dirty
 31649                                  ;
 31650                                  ; Carry set if problem (currently user FAILed to I 24)
 31651                                  ;
 31652                                  ;----------------------------------------------------------------------------
 31653                                  
 31654                                  CHECKFLUSH:
 31655                                  	; MSDOS 6.0
 31656 00005BA8 B4FF                    	mov	ah, -1 ; 01/08/2018 Retro DOS v3.0
 31657                                  	;cmp	[di+4],ah
 31658 00005BAA 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 31659 00005BAD 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 31660 00005BAF 38C4                    	CMP	AH,AL			; 
 31661 00005BB1 7406                    	JZ	short DOBUFFER		; do this buffer
 31662                                  	;cmp	al,[di+4]
 31663 00005BB3 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31664 00005BB6 F8                      	CLC
 31665 00005BB7 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 31666                                  DOBUFFER:
 31667                                  	;test	byte [di+5],40h
 31668 00005BB9 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31669 00005BBD 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 31670 00005BBF 50                      	PUSH	AX
 31671                                  	;push	word [di+4]
 31672 00005BC0 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 31673 00005BC3 E80B00                  	CALL	BUFWRITE
 31674 00005BC6 58                      	POP	AX
 31675 00005BC7 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 31676                                  	;and	ah,0BFh
 31677 00005BC9 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 31678                                  	;mov	[di+4],ax
 31679 00005BCC 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 31680                                  LEAVE_BUF:
 31681 00005BCF 58                      	POP	AX			; Search info
 31682                                  checkflush_retn:
 31683 00005BD0 C3                      	retn
 31684                                  
 31685                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 31686                                  ;----------------------------------------------------------------------------
 31687                                  ;
 31688                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 31689                                  ;
 31690                                  ;	ENTRY	DS:DI Points to the buffer
 31691                                  ;
 31692                                  ;	EXIT	Buffer marked free
 31693                                  ;		Carry set if error (currently user FAILed to I 24)
 31694                                  ;
 31695                                  ;	USES	All buf DS:DI
 31696                                  ;		HIGH_SECTOR
 31697                                  ;----------------------------------------------------------------------------
 31698                                  
 31699                                  	; 20/05/2019 - Retro DOS v4.0
 31700                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 31701                                  
 31702                                  
 31703                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31704                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 31705                                  
 31706                                  BUFWRITE:
 31707                                  	; 10/09/2018
 31708                                  	; 01/08/2018 - Retro DOS v3.0
 31709                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 31710 00005BD1 B8FF00                  	MOV	AX,00FFH
 31711                                  	;xchg	ax,[di+4]
 31712 00005BD4 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 31713 00005BD7 3CFF                    	CMP	AL,0FFH
 31714 00005BD9 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 31715                                  	;test	ah,40h
 31716 00005BDB F6C440                  	test	AH,buf_dirty
 31717 00005BDE 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 31718                                  	; MSDOS 6.0
 31719 00005BE0 E89400                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 31720                                  
 31721                                  ;hkn; SS override
 31722 00005BE3 363A06[2203]            	CMP	AL,[SS:WPERR]
 31723 00005BE8 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 31724                                  
 31725                                  ;hkn; SS override
 31726                                  	; MSDOS 6.0
 31727 00005BEA 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 31728                                  	
 31729                                  	;;les	bp,[di+10] ; MSDOS 3.3
 31730                                  	;les	bp,[di+13] ; MSDOS 6.0
 31731 00005BEE C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 31732                                  	;;lea	bx,[di+16]
 31733                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31734 00005BF1 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 31735                                  	;mov	dx,[di+6]
 31736 00005BF4 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 31737                                  	
 31738                                  	; MSDOS 6.0
 31739                                  	;mov	cx,[di+8]
 31740 00005BF7 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 31741                                  
 31742                                  ;hkn; SS override
 31743 00005BFA 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 31744 00005BFF 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 31745                                  	; MSDOS 3.3
 31746                                  	;; mov	cx,[DI+8]
 31747                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 31748                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 31749 00005C02 30ED                    	XOR	CH,CH
 31750                                  	;;mov	ah,ch ; MSDOS 3.3
 31751                                  
 31752                                  ;hkn; SS override for ALLOWED
 31753                                  	;mov	byte [SS:ALLOWED],18h
 31754 00005C04 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 31755                                  	;test	byte [di+5],8
 31756                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 31757                                  	;test	ah,8
 31758 00005C0A F6C408                  	test	AH,buf_isDATA
 31759 00005C0D 7406                    	JZ	short NO_IGNORE
 31760                                  	;or	byte [SS:ALLOWED],20h
 31761 00005C0F 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 31762                                  NO_IGNORE:
 31763                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 31764                                  	; MSDOS 6.0
 31765                                  	;mov	ax,[di+11]
 31766 00005C15 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 31767                                  
 31768 00005C18 57                      	PUSH	DI		; Save buffer pointer
 31769 00005C19 31FF                    	XOR	DI,DI		; Indicate failure
 31770                                  
 31771 00005C1B 1E                      	push	ds ; *
 31772 00005C1C 53                      	push	bx ; **
 31773                                  WRTAGAIN:
 31774 00005C1D 57                      	push	di ; ***
 31775 00005C1E 51                      	push	cx ; ****
 31776 00005C1F 50                      	push	ax ; *****
 31777                                  	;MOV	CX,1
 31778                                  	; 17/12/2022
 31779                                  	; ch = 0
 31780 00005C20 B101                    	mov	cl,1 ; 24/07/2019
 31781                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31782                                  	;mov	cx,1
 31783 00005C22 53                      	push	bx ; ******
 31784 00005C23 52                      	push	dx ; *******
 31785 00005C24 1E                      	push	ds ; ********
 31786                                  
 31787                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 31788                                  
 31789                                  	; MSDOS 6.0
 31790 00005C25 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 31791 00005C2B 7418                    	jz	short NBUFFINHMA
 31792 00005C2D 51                      	push	cx
 31793 00005C2E 06                      	push	es
 31794 00005C2F 89DE                    	mov	si,bx
 31795 00005C31 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 31796 00005C35 D1E9                    	shr	cx,1
 31797 00005C37 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 31798 00005C3C 89FB                    	mov	bx,di
 31799 00005C3E FC                      	cld
 31800 00005C3F F3A5                    	rep	movsw
 31801 00005C41 06                      	push	es
 31802 00005C42 1F                      	pop	ds
 31803 00005C43 07                      	pop	es
 31804 00005C44 59                      	pop	cx
 31805                                  NBUFFINHMA:
 31806 00005C45 E8E1DB                  	call	DWRITE		; Write out the dirty buffer
 31807 00005C48 1F                      	pop	ds ; ********
 31808 00005C49 5A                      	pop	dx ; *******
 31809 00005C4A 5B                      	pop	bx ; ******
 31810 00005C4B 58                      	pop	ax ; *****
 31811 00005C4C 59                      	pop	cx ; ****
 31812 00005C4D 5F                      	pop	di ; ***
 31813 00005C4E 7201                    	JC	short NOSET
 31814 00005C50 47                      	INC	DI		; If at least ONE write succeedes, the operation
 31815                                  NOSET:				;	succeedes.
 31816 00005C51 01C2                    	ADD	DX,AX
 31817 00005C53 E2C8                    	LOOP	WRTAGAIN
 31818 00005C55 5B                      	pop	bx ; **
 31819 00005C56 1F                      	pop	ds ; *
 31820 00005C57 09FF                    	OR	DI,DI		; Clears carry
 31821 00005C59 7501                    	JNZ	short BWROK	; At least one write worked
 31822 00005C5B F9                      	STC			; DI never got INCed, all writes failed.
 31823                                  BWROK:	
 31824 00005C5C 5F                      	POP	DI
 31825 00005C5D C3                      	retn
 31826                                  
 31827                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 31828                                  ;----------------------------------------------------------------------------
 31829                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 31830                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 31831                                  ;	SC_DRIVE even if SC is disabled to save the testing
 31832                                  ;	code and time
 31833                                  ;
 31834                                  ;	ENTRY	ES:BP = drive parameter block
 31835                                  ;
 31836                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 31837                                  ;		[SC_DRIVE]= drive #
 31838                                  ;
 31839                                  ;	USES	Flags
 31840                                  ;----------------------------------------------------------------------------
 31841                                  
 31842                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31843                                  ; 04/05/2019 - Retro DOS v4.0
 31844                                  
 31845                                  SET_RQ_SC_PARMS:
 31846                                  ;hkn; SS override for all variables used in this procedure.
 31847 00005C5E 50                      	push	ax
 31848                                  	;mov	ax,[es:bp+2]
 31849 00005C5F 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 31850 00005C63 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 31851                                  	;;mov	al,[es:bp+0]
 31852                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31853                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 31854                                  	; 15/12/2022
 31855 00005C67 268A4600                	mov	al,[ES:BP]
 31856 00005C6B 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 31857 00005C6F 58                      	pop	ax
 31858                                  srspx:	
 31859 00005C70 C3                      	retn					;LB. return
 31860                                  
 31861                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 31862                                  ;----------------------------------------------------------------------------
 31863                                  ; Input:
 31864                                  ;	none
 31865                                  ; Function:
 31866                                  ;	increment dirty buffers count
 31867                                  ; Output:
 31868                                  ;	dirty buffers count is incremented
 31869                                  ;
 31870                                  ; All registers preserved
 31871                                  ;----------------------------------------------------------------------------
 31872                                  
 31873                                  INC_DIRTY_COUNT:
 31874                                  ;; BUGBUG  ---- remove this routine
 31875                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 31876 00005C71 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 31877 00005C76 C3                      	retn
 31878                                  
 31879                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 31880                                  ;----------------------------------------------------------------------------
 31881                                  ; Input:
 31882                                  ;	none
 31883                                  ; Function:
 31884                                  ;	decrement dirty buffers count
 31885                                  ; Output:
 31886                                  ;	dirty buffers count is decremented
 31887                                  ;
 31888                                  ; All registers preserved
 31889                                  ;----------------------------------------------------------------------------
 31890                                  
 31891                                  DEC_DIRTY_COUNT:
 31892 00005C77 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 31893 00005C7D 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 31894 00005C7F 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 31895                                  					; error condition to underflow here? ;hkn;
 31896                                  ddcx:	
 31897 00005C84 C3                      	retn
 31898                                  
 31899                                  ;============================================================================
 31900                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 31901                                  ;============================================================================
 31902                                  ; 02/08/2018 - Retro DOS v3.0
 31903                                  ; 29/04/2019 - Retro DOS v4.0
 31904                                  
 31905                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 31906                                  
 31907                                  ; Pseudo EXEC system call for DOS
 31908                                  
 31909                                  ;	TITLE	MSPROC - process maintenance
 31910                                  ;	NAME	MSPROC
 31911                                  
 31912                                  ; =========================================================================
 31913                                  ;**	Process related system calls and low level routines for DOS 2.X.
 31914                                  ;	I/O specs are defined in DISPATCH.
 31915                                  ;
 31916                                  ;	$WAIT
 31917                                  ;	$EXEC
 31918                                  ;	$Keep_process
 31919                                  ;	Stay_resident
 31920                                  ;	$EXIT
 31921                                  ;	$ABORT
 31922                                  ;	abort_inner
 31923                                  ;
 31924                                  ;	Modification history:
 31925                                  ;
 31926                                  ;		Created: ARR 30 March 1983
 31927                                  ;		AN000	version 4.0 jan. 1988
 31928                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 31929                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 31930                                  ;
 31931                                  ;		M000	added support for loading programs into UMBs 7/9/90
 31932                                  ;
 31933                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 31934                                  ;		       dossym.inc. 7/30/90
 31935                                  ;		M005 - Support for EXE programs with out STACK segment and 
 31936                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 31937                                  ;		       stack is provided at the end of the program. Note that
 31938                                  ;		       only SP is changed.
 31939                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 31940                                  ;
 31941                                  ;		M028 - 4b04 implementation
 31942                                  ;
 31943                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 31944                                  ;			in memory block >= 64K, sp = 0. If memory block
 31945                                  ;			obtained is <64K, point sp at the end of the memory
 31946                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 31947                                  ;			added for a stack segment which may be needed if it
 31948                                  ;			is loaded in low memory situations.
 31949                                  ;
 31950                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 31951                                  ;
 31952                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 31953                                  ;			a bad environment if it reached 32767 bytes. Changed
 31954                                  ;			to allow 32768 bytes of environment.
 31955                                  ;
 31956                                  ;		M047 - Release the allocated UMB when we failed to load a 
 31957                                  ;		       COM file high. Also ensure that if the biggest block
 31958                                  ;		       into which we load the com file is less than 64K then
 31959                                  ;		       we provide atleast 256 bytes of stack to the user.
 31960                                  ;
 31961                                  ;		M050 - Made Lie table search CASE insensitive
 31962                                  ;
 31963                                  ;		M060 - Removed special version table from the kernal and
 31964                                  ;                      put it in a device drive which puts the address
 31965                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 31966                                  ;		       as a DWORD.
 31967                                  ;
 31968                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 31969                                  ;		       entry do not try to load low if there is no space in
 31970                                  ;		       UMBs.
 31971                                  ;
 31972                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 31973                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 31974                                  ;		       change return address to LeaveDos if AL=5.
 31975                                  ;
 31976                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 31977                                  ;                      controls building a version of MSDOS.SYS that only
 31978                                  ;                      runs programs from a fixed list (defined in the
 31979                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 31980                                  ;                      for details.  This feature is used to build a
 31981                                  ;                      "special" version of DOS that can be handed out to
 31982                                  ;                      OEM/ISV customers as part of a "service" disk.
 31983                                  ;
 31984                                  ; =========================================================================
 31985                                  
 31986                                  ;SAVEXIT  EQU  10
 31987                                  
 31988                                  ;BREAK	<$WAIT - return previous process error code>
 31989                                  ; =========================================================================
 31990                                  ;	$WAIT - Return previous process error code.
 31991                                  ;
 31992                                  ;	Assembler usage:
 31993                                  ;
 31994                                  ;	    MOV     AH, WaitProcess
 31995                                  ;	    INT     int_command
 31996                                  ;
 31997                                  ;	ENTRY	none
 31998                                  ;	EXIT	(ax) = exit code
 31999                                  ;	USES	all
 32000                                  ; =========================================================================
 32001                                  
 32002                                  	; 20/05/2019 - Retro DOS v4.0
 32003                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 32004                                  
 32005                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32006                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 32007                                  _$WAIT:
 32008                                  	; 02/08/2018 - Retro DOS v3.0
 32009                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 32010                                  
 32011 00005C85 31C0                    	xor	AX,AX
 32012 00005C87 368706[3403]            	xchg	AX,[ss:exit_code]
 32013 00005C8C E9F5A9                  	jmp	SYS_RET_OK
 32014                                  
 32015                                  ; =========================================================================
 32016                                  ;BREAK <$exec - load/go a program>
 32017                                  ;	EXEC.ASM - EXEC System Call
 32018                                  ;
 32019                                  ;
 32020                                  ; Assembler usage:
 32021                                  ;	    lds     DX, Name
 32022                                  ;	    les     BX, Blk
 32023                                  ;	    mov     AH, Exec
 32024                                  ;	    mov     AL, FUNC
 32025                                  ;	    int     INT_COMMAND
 32026                                  ;
 32027                                  ;	AL  Function
 32028                                  ;	--  --------
 32029                                  ;	 0  Load and execute the program.
 32030                                  ;	 1  Load, create the program header but do not
 32031                                  ;	    begin execution.
 32032                                  ;	 3  Load overlay. No header created.
 32033                                  ;
 32034                                  ;	    AL = 0 -> load/execute program
 32035                                  ;
 32036                                  ;	    +---------------------------+
 32037                                  ;	    | WORD segment address of	|
 32038                                  ;	    | environment.		|
 32039                                  ;	    +---------------------------+
 32040                                  ;	    | DWORD pointer to ASCIZ	|
 32041                                  ;	    | command line at 80h	|
 32042                                  ;	    +---------------------------+
 32043                                  ;	    | DWORD pointer to default	|
 32044                                  ;	    | FCB to be passed at 5Ch	|
 32045                                  ;	    +---------------------------+
 32046                                  ;	    | DWORD pointer to default	|
 32047                                  ;	    | FCB to be passed at 6Ch	|
 32048                                  ;	    +---------------------------+
 32049                                  ;
 32050                                  ;	    AL = 1 -> load program
 32051                                  ;
 32052                                  ;	    +---------------------------+
 32053                                  ;	    | WORD segment address of	|
 32054                                  ;	    | environment.		|
 32055                                  ;	    +---------------------------+
 32056                                  ;	    | DWORD pointer to ASCIZ	|
 32057                                  ;	    | command line at 80h	|
 32058                                  ;	    +---------------------------+
 32059                                  ;	    | DWORD pointer to default	|
 32060                                  ;	    | FCB to be passed at 5Ch	|
 32061                                  ;	    +---------------------------+
 32062                                  ;	    | DWORD pointer to default	|
 32063                                  ;	    | FCB to be passed at 6Ch	|
 32064                                  ;	    +---------------------------+
 32065                                  ;	    | DWORD returned value of	|
 32066                                  ;	    | CS:IP			|
 32067                                  ;	    +---------------------------+
 32068                                  ;	    | DWORD returned value of	|
 32069                                  ;	    | SS:IP			|
 32070                                  ;	    +---------------------------+
 32071                                  ;
 32072                                  ;	    AL = 3 -> load overlay
 32073                                  ;
 32074                                  ;	    +---------------------------+
 32075                                  ;	    | WORD segment address where|
 32076                                  ;	    | file will be loaded.	|
 32077                                  ;	    +---------------------------+
 32078                                  ;	    | WORD relocation factor to |
 32079                                  ;	    | be applied to the image.	|
 32080                                  ;	    +---------------------------+
 32081                                  ;
 32082                                  ; Returns:
 32083                                  ;	    AX = error_invalid_function
 32084                                  ;	       = error_bad_format
 32085                                  ;	       = error_bad_environment
 32086                                  ;	       = error_not_enough_memory
 32087                                  ;	       = error_file_not_found
 32088                                  ; =========================================================================
 32089                                  ;
 32090                                  ;   Revision history:
 32091                                  ;
 32092                                  ;	 A000	version 4.00  Jan. 1988
 32093                                  ;
 32094                                  ; =========================================================================
 32095                                  
 32096                                  Exec_Internal_Buffer		EQU	OPENBUF
 32097                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 32098                                  
 32099                                  ; =========================================================================
 32100                                  
 32101                                  ;IF1		; warning message on buffers
 32102                                  ;%out	Please make sure that the following are contiguous and of the
 32103                                  ;%out	following sizes:
 32104                                  ;%out
 32105                                  ;%out	OpenBuf     128
 32106                                  ;%out	RenBuf	    128
 32107                                  ;%out	SearchBuf    53
 32108                                  ;%out	DummyCDS    curdirLen
 32109                                  ;ENDIF
 32110                                  
 32111                                  ; =========================================================================
 32112                                  
 32113                                  ; =========================================================================
 32114                                  ;
 32115                                  ; =========================================================================
 32116                                  
 32117                                  	; 20/05/2019 - Retro DOS v4.0
 32118                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 32119                                  
 32120                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32121                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 32122                                  	
 32123                                  _$EXEC:
 32124                                  	; 02/08/2018 - Retro DOS v3.0
 32125                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 32126                                  
 32127                                  EXEC001S:
 32128                                  	;LocalVar    Exec_Blk		,DWORD
 32129                                  	;LocalVar    Exec_Func		,BYTE
 32130                                  	;LocalVar    Exec_Load_High	,BYTE
 32131                                  	;LocalVar    Exec_FH		,WORD
 32132                                  	;LocalVar    Exec_Rel_Fac	,WORD
 32133                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 32134                                  	;LocalVar    Exec_Environ	,WORD
 32135                                  	;LocalVar    Exec_Size		,WORD
 32136                                  	;LocalVar    Exec_Load_Block	,WORD
 32137                                  	;LocalVar    Exec_DMA		,WORD
 32138                                  	;LocalVar    ExecNameLen 	,WORD
 32139                                  	;LocalVar    ExecName		,DWORD
 32140                                  	;
 32141                                  	;LocalVar    Exec_DMA_Save	,WORD
 32142                                  	;LocalVar    Exec_NoStack	,BYTE
 32143                                  
 32144                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32145                                  	;%define	Exec_Blk	dword [bp-4]
 32146                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 32147                                  	%define		Exec_BlkL	word [bp-4]	
 32148                                  	%define		Exec_BlkH	word [bp-2]
 32149                                  	%define		Exec_Func	byte [bp-5]
 32150                                  	%define		Exec_Load_High	byte [bp-6]
 32151                                  	%define		Exec_FH		word [bp-8]
 32152                                  	%define		Exec_Rel_Fac	word [bp-10]
 32153                                  	%define		Exec_Res_Len_Para word [bp-12]
 32154                                  	%define		Exec_Environ	word [bp-14]
 32155                                  	%define		Exec_Size	word [bp-16]
 32156                                  	%define		Exec_Load_Block	word [bp-18]
 32157                                  	%define		Exec_DMA	word [bp-20]
 32158                                  	%define		ExecNameLen	word [bp-22]
 32159                                  	;%define	ExecName	dword [bp-26]
 32160                                  	%define		ExecName	[bp-26] ; 09/08/2018
 32161                                  	%define		ExecNameL	word [bp-26]	
 32162                                  	%define		ExecNameH	word [bp-24]
 32163                                  	; MSDOS 6.0
 32164                                  	%define		Exec_DMA_Save	word [bp-28]
 32165                                  	%define		Exec_NoStack	byte [bp-29]
 32166                                  	
 32167                                  	; ==================================================================
 32168                                  	; validate function
 32169                                  	; ==================================================================
 32170                                  		      	
 32171                                  	; M068 - Start
 32172                                  	;
 32173                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 32174                                  	; possibility that the count may not be decremented all the way to
 32175                                  	; 0. A typical case is if the program for which we intended to keep 
 32176                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 32177                                  	; calls), exits pre-maturely due to error conditions.
 32178                                  
 32179                                  	; MSDOS 6.0
 32180 00005C8F 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 32181                                  
 32182                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 32183                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 32184                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 32185                                  
 32186 00005C95 3C05                    	cmp	al,5			; Q: is this ExecReady call
 32187                                  	;jne	short @f
 32188 00005C97 7505                    	jne	short Exec_@f		; N: continue
 32189                                  					; Y: change ret addr. to LeaveDos.
 32190 00005C99 59                      	pop	cx			; Note CX is not input to ExecReady
 32191 00005C9A B9[4C04]                	mov	cx,LeaveDOS
 32192 00005C9D 51                      	push	cx
 32193                                  ;@@:
 32194                                  Exec_@f:
 32195                                  	; M068 - End
 32196                                  	
 32197                                  	;Enter
 32198                                  
 32199 00005C9E 55                      	push	bp
 32200 00005C9F 89E5                    	mov	bp,sp
 32201                                  	;;sub	sp,26	; MSDOS 3.3
 32202                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 32203                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 32204                                  	; 17/12/2022
 32205                                  	; 20/05/2019
 32206 00005CA1 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 32207                                  
 32208                                  	; MSDOS 6.0
 32209 00005CA4 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 32210                                  					; M030
 32211 00005CA6 7614                    	jna	short Exec_Check_2
 32212                                  
 32213                                  	; MSDOS 3.3
 32214                                  	;cmp	AL,3
 32215                                  	;jna	short Exec_Check_2
 32216                                  
 32217                                  Exec_Bad_Fun:
 32218 00005CA8 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 32219                                  					; Extended Error Locus	;smr;SS Override
 32220                                  	;mov	al,1
 32221 00005CAE B001                    	mov	al,error_invalid_function
 32222                                  
 32223                                  Exec_Ret_Err:
 32224                                  	;Leave
 32225 00005CB0 89EC                    	mov	sp,bp
 32226 00005CB2 5D                      	pop	bp
 32227                                  	;transfer SYS_RET_ERR
 32228 00005CB3 E9D7A9                  	jmp	SYS_RET_ERR
 32229                                  
 32230                                  	; MSDOS 6.0
 32231                                  ExecReadyJ:
 32232 00005CB6 E80318                  	call	ExecReady		; M028
 32233 00005CB9 E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 32234                                  
 32235                                  Exec_Check_2:
 32236 00005CBC 3C02                    	cmp	AL,2			
 32237 00005CBE 74E8                    	je	short Exec_Bad_Fun
 32238                                  
 32239                                  	; MSDOS 6.0
 32240 00005CC0 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 32241 00005CC2 74E4                    	je	short Exec_Bad_Fun
 32242                                  	
 32243 00005CC4 3C05                    	cmp	al,5			; M028 ; M030
 32244 00005CC6 74EE                    	je	short ExecReadyJ	; M028
 32245                                  
 32246                                  	;mov	[bp-4],bx
 32247 00005CC8 895EFC                  	mov	Exec_BlkL,BX		; stash args
 32248                                  	;mov	[bp-2],es
 32249 00005CCB 8C46FE                  	mov	Exec_BlkH,ES
 32250                                  	;mov	[bp-5],al
 32251 00005CCE 8846FB                  	mov	Exec_Func,AL
 32252                                  	;mov	byte [bp-6],0
 32253 00005CD1 C646FA00                	mov	Exec_Load_High,0
 32254                                  
 32255                                  	;mov	[bp-26],dx
 32256 00005CD5 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 32257                                  	;mov	[bp-24],ds
 32258 00005CD8 8C5EE8                  	mov	ExecNameH,DS
 32259 00005CDB 89D6                    	mov	SI,DX			; move pointer to convenient place
 32260                                  	;invoke	DStrLen
 32261 00005CDD E891B5                  	call	DStrLen
 32262                                  	;mov	[bp-22],cx
 32263 00005CE0 894EEA                  	mov	ExecNameLen,CX		; save length
 32264                                  
 32265                                  	; MSDOS 6.0
 32266 00005CE3 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 32267 00005CE7 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 32268                                  
 32269 00005CEB 30C0                    	xor	AL,AL			; open for reading
 32270 00005CED 55                      	push	BP
 32271                                  
 32272                                  	; MSDOS 6.0
 32273                                  	;or	byte [ss:DOS_FLAG],1
 32274 00005CEE 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 32275                                  					; the redir that this open call is
 32276                                  					; due to an exec.
 32277                                  
 32278                                  	;invoke	$OPEN			; is the file there?
 32279 00005CF4 E80B13                  	call	_$OPEN
 32280                                  
 32281                                  	; MSDOS 6.0
 32282 00005CF7 9C                      	pushf
 32283                                  	; 02/06/2019
 32284                                  	;and	byte [ss:DOS_FLAG],0FEh
 32285 00005CF8 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 32286 00005CFE 9D                      	popf
 32287                                  
 32288 00005CFF 5D                      	pop	BP
 32289                                  
 32290                                  	; MSDOS 3.3 & MSDOS 6.0
 32291 00005D00 72AE                    	jc	short Exec_Ret_Err
 32292                                  
 32293                                  	;mov	[bp-8],ax
 32294 00005D02 8946F8                  	mov	Exec_FH,AX
 32295 00005D05 89C3                    	mov	BX,AX
 32296 00005D07 30C0                    	xor	AL,AL
 32297                                  	;invoke	$Ioctl
 32298 00005D09 E8FAC5                  	call	_$IOCTL
 32299 00005D0C 7207                    	jc	short Exec_BombJ
 32300                                  
 32301                                  	;test	dl,80h
 32302 00005D0E F6C280                  	test	DL,devid_ISDEV
 32303 00005D11 740A                    	jz	short Exec_Check_Environ
 32304                                  
 32305                                  	;mov	al,2
 32306 00005D13 B002                    	mov	AL,error_file_not_found
 32307                                  Exec_BombJ:
 32308 00005D15 E9CA00                  	jmp	Exec_Bomb
 32309                                  
 32310                                  BadEnv:
 32311                                  	;mov	al,0Ah
 32312 00005D18 B00A                    	mov	AL,error_bad_environment
 32313 00005D1A E9C500                  	jmp	Exec_Bomb
 32314                                  
 32315                                  Exec_Check_Environ:
 32316                                  	;mov	word [bp-18],0
 32317 00005D1D C746EE0000              	mov	Exec_Load_Block,0
 32318                                  	;mov	word [bp-14],0
 32319 00005D22 C746F20000              	mov	Exec_Environ,0
 32320                                  					; overlays... no environment
 32321                                  	;test	byte [bp-5],2
 32322 00005D27 F646FB02                	test	Exec_Func,exec_func_overlay
 32323 00005D2B 7552                    	jnz	short Exec_Read_Header
 32324                                  
 32325                                  	;lds	si,[bp-4]
 32326 00005D2D C576FC                  	lds	SI,Exec_Blk		; get block
 32327 00005D30 8B04                    	mov	ax,[SI]
 32328                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 32329 00005D32 09C0                    	or	AX,AX
 32330 00005D34 750C                    	jnz	short Exec_Scan_Env
 32331                                  
 32332 00005D36 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 32333                                  	;mov	ax,[44]
 32334 00005D3B A12C00                  	mov	AX,[PDB.ENVIRON]
 32335                                  
 32336                                  ; MSDOS 6.0
 32337                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 32338                                  ;
 32339                                  ; Exec_environ is being correctly initialized after the environment has been
 32340                                  ; allocated and copied form the parent's env. It must not be initialized here.
 32341                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 32342                                  ; parent's environment.
 32343                                  ;	mov	Exec_Environ,AX
 32344                                  ;
 32345                                  ;----------------------------------------------------------------------------
 32346                                  
 32347                                  	;mov	[bp-14],ax
 32348                                  	;mov	Exec_Environ,ax
 32349                                  
 32350 00005D3E 09C0                    	or	AX,AX
 32351 00005D40 743D                    	jz	short Exec_Read_Header
 32352                                  
 32353                                  Exec_Scan_Env:
 32354 00005D42 8EC0                    	mov	ES,AX
 32355 00005D44 31FF                    	xor	DI,DI
 32356                                  	;mov	cx,7FFFh ; MSDOS 3.3
 32357 00005D46 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 32358 00005D49 30C0                    	xor	AL,AL
 32359                                  
 32360                                  Exec_Get_Environ_Len:
 32361 00005D4B F2AE                    	repnz	scasb			; find that nul byte
 32362 00005D4D 75C9                    	jnz	short BadEnv
 32363                                  
 32364 00005D4F 49                      	dec	CX			; Dec CX for the next nul byte test
 32365 00005D50 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 32366                                  
 32367 00005D52 AE                      	scasb				; is there another nul byte?
 32368 00005D53 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 32369                                  
 32370 00005D55 57                      	push	DI
 32371                                  	;lea	bx,[DI+11h]
 32372 00005D56 8D5D11                  	lea	BX,[DI+0Fh+2]
 32373                                  	;add	bx,[bp-22]
 32374 00005D59 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 32375                                  					; remember argv[0] length
 32376                                  					; round up and remember argc
 32377 00005D5C B104                    	mov	CL,4
 32378 00005D5E D3EB                    	shr	BX,CL			; number of paragraphs needed
 32379 00005D60 06                      	push	ES
 32380                                  	;invoke	$Alloc			; can we get the space?
 32381 00005D61 E84406                  	call	_$ALLOC
 32382 00005D64 1F                      	pop	DS
 32383 00005D65 59                      	pop	CX
 32384                                  
 32385                                  	;jnc	short Exec_Save_Environ
 32386                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 32387                                  	; 17/12/2022
 32388 00005D66 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 32389                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32390                                  	;jnc	short Exec_Save_Environ
 32391                                  	;jmp	SHORT Exec_No_Mem
 32392                                  
 32393                                  Exec_Save_Environ:
 32394 00005D68 8EC0                    	mov	ES,AX
 32395                                  	;mov	[bp-14],ax
 32396 00005D6A 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 32397 00005D6D 31F6                    	xor	SI,SI
 32398 00005D6F 89F7                    	mov	DI,SI
 32399 00005D71 F3A4                    	rep	movsb			; copy the environment
 32400 00005D73 B80100                  	mov	AX,1
 32401 00005D76 AB                      	stosw
 32402                                  	;lds	si,[bp-26]
 32403 00005D77 C576E6                  	lds	SI,ExecName
 32404                                  	;mov	cx,[bp-22]
 32405 00005D7A 8B4EEA                  	mov	CX,ExecNameLen
 32406 00005D7D F3A4                    	rep	movsb
 32407                                  
 32408                                  Exec_Read_Header:
 32409                                  	; We read in the program header into the above data area and
 32410                                  	; determine where in this memory the image will be located.
 32411                                  
 32412                                  	;Context DS
 32413 00005D7F 16                      	push	ss
 32414 00005D80 1F                      	pop	ds
 32415                                  	;mov	cx,26
 32416 00005D81 B91A00                  	mov	CX,exec_header_len	; header size
 32417 00005D84 BA[C80F]                	mov	DX,exec_signature
 32418 00005D87 06                      	push	ES
 32419 00005D88 1E                      	push	DS
 32420 00005D89 E88304                  	call	ExecRead
 32421 00005D8C 1F                      	pop	DS
 32422 00005D8D 07                      	pop	ES
 32423 00005D8E 7250                    	jc	short Exec_Bad_File
 32424                                  
 32425 00005D90 09C0                    	or	AX,AX
 32426 00005D92 744C                    	jz	short Exec_Bad_File
 32427                                  	;cmp	ax,26
 32428 00005D94 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 32429 00005D97 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 32430                                  
 32431 00005D99 F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 32432 00005D9F 7504                    	jnz	short Exec_Check_Sig
 32433                                  
 32434                                  	;mov	byte [bp-6],0FFh
 32435 00005DA1 C646FAFF                	mov	Exec_Load_High,-1
 32436                                  
 32437                                  Exec_Check_Sig:
 32438 00005DA5 A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 32439                                  	;cmp	ax,5A4Dh ; 'MZ'
 32440 00005DA8 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 32441 00005DAB 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32442                                  
 32443                                  	;cmp	ax,4D5Ah ; 'ZM'
 32444 00005DAD 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 32445 00005DB0 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32446                                  
 32447                                  Exec_Com_Filej:
 32448 00005DB2 E9E901                  	jmp	Exec_Com_File
 32449                                  
 32450                                  	; We have the program header... determine memory requirements
 32451                                  
 32452                                  Exec_Save_Start:
 32453 00005DB5 A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 32454 00005DB8 B105                    	mov	CL,5			; convert to paragraphs
 32455 00005DBA D3E0                    	shl	AX,CL
 32456 00005DBC 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 32457                                  	;mov	[bp-12],ax
 32458 00005DC0 8946F4                  	mov	Exec_Res_Len_Para,AX
 32459                                  
 32460                                  		; Do we need to allocate memory?
 32461                                  		; Yes if function is not load-overlay
 32462                                  
 32463                                  	;test	byte [bp-5],2
 32464 00005DC3 F646FB02                	test	Exec_Func,exec_func_overlay
 32465 00005DC7 7445                    	jz	short Exec_Allocate	; allocation of space
 32466                                  
 32467                                  		; get load address from block
 32468                                  
 32469                                  	;les	di,[bp-4]
 32470 00005DC9 C47EFC                  	les	DI,Exec_Blk
 32471 00005DCC 268B05                  	mov	ax,[es:di]
 32472                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 32473                                  	;mov	[bp-20],ax
 32474 00005DCF 8946EC                  	mov	Exec_DMA,AX
 32475                                  
 32476                                  	; 17/12/2022
 32477                                  	;;mov	ax,[es:di+2]
 32478                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 32479                                  	;;mov	[bp-10],ax
 32480                                  	;mov	Exec_Rel_Fac,AX
 32481                                  
 32482                                  	; 17/12/2022
 32483                                  	; 30/11/2022 (!most proper code!)
 32484                                  	;mov	dx,[es:di+2]
 32485 00005DD2 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 32486                                  	;mov	[bp-10],dx
 32487 00005DD6 8956F6                  	mov	Exec_Rel_Fac,dx
 32488                                  	; ax = Exec_DMA
 32489 00005DD9 E9DE00                  	jmp	Exec_Find_Res
 32490                                  
 32491                                  ; 17/12/2022
 32492                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32493                                  ; 27/09/2023
 32494                                  %if 0
 32495                                  	; 02/06/2019 - Retro DOS v4.0
 32496                                  	;mov	ax,[bp-20]  ; *+*
 32497                                  	mov	AX,Exec_DMA ; *+*
 32498                                  	; 10/08/2018
 32499                                  	jmp	Exec_Find_Res		; M000
 32500                                  %endif
 32501                                  
 32502                                  Exec_No_Mem:
 32503                                  	;mov	al,8
 32504 00005DDC B008                    	mov	AL,error_not_enough_memory
 32505 00005DDE EB02                    	jmp	short Exec_Bomb
 32506                                  
 32507                                  Exec_Bad_File:
 32508                                  	;mov	al,0Bh
 32509 00005DE0 B00B                    	mov	AL,error_bad_format
 32510                                  
 32511                                  Exec_Bomb:
 32512                                  	;mov	bx,[bp-8]
 32513 00005DE2 8B5EF8                  	mov	BX,Exec_FH
 32514 00005DE5 E84004                  	call	Exec_Dealloc
 32515                                  	;LeaveCrit CritMem
 32516 00005DE8 E8B8B5                  	call	LCritMEM
 32517                                  	;save	<AX,BP>
 32518 00005DEB 50                      	push	ax
 32519 00005DEC 55                      	push	bp
 32520                                  	;invoke	$CLOSE
 32521 00005DED E83E0A                  	call	_$CLOSE
 32522                                  	;restore <BP,AX>
 32523 00005DF0 5D                      	pop	bp
 32524 00005DF1 58                      	pop	ax
 32525 00005DF2 E9BBFE                  	jmp	Exec_Ret_Err
 32526                                  
 32527                                  Exec_Chk_Mem: 
 32528                                  
 32529                                  ; 17/12/2022
 32530                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32531                                  ;%if 0
 32532                                  	; MSDOS 6.0    			; M063 - Start
 32533                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32534                                  	; 10/06/2019
 32535 00005DF5 A0[0203]                	mov	al,[AllocMethod]
 32536                                  	;mov	bl,[ss:ALLOCMSAVE]
 32537 00005DF8 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 32538                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 32539 00005DFC 881E[0203]              	mov	[AllocMethod],bl
 32540                                  	
 32541 00005E00 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32542 00005E03 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32543                                  	;				; N: continue
 32544                                  	;
 32545 00005E05 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32546 00005E07 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 32547                                  	; 02/06/2019
 32548                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32549 00005E09 A1[8A00]                	mov	ax,[SAVE_AX]
 32550                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 32551                                  					; M063 - End
 32552 00005E0C EB2B                    	jmp	short Exec_Norm_Alloc1
 32553                                  ;%endif
 32554                                  
 32555                                  ; 17/12/2022
 32556                                  %if 0
 32557                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32558                                  	; MSDOS 6.0    			; M063 - Start
 32559                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32560                                  	mov	bl,[ss:ALLOCMSAVE]
 32561                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32562                                  
 32563                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32564                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32565                                  	;				; N: continue
 32566                                  	;
 32567                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32568                                  	jz	short Exec_No_Mem	; N: no memory 
 32569                                  
 32570                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32571                                  	jmp	short Exec_Norm_Alloc	;    Try again
 32572                                  					; M063 - End
 32573                                  %endif
 32574                                  
 32575                                  Exec_Allocate:
 32576                                  	; 09/09/2018
 32577                                  
 32578                                  	; M005 - START
 32579                                  	; If there is no STACK segment for this exe file and if this
 32580                                  	; not an overlay and the resident size is less than 64K - 
 32581                                  	; 256 bytes we shall add 256 bytes to the programs 
 32582                                  	; resident memory requirement and set Exec_SP to this value.
 32583                                  	
 32584                                  	; 17/12/2022
 32585 00005E0E 29DB                    	sub	bx,bx ; 0	
 32586                                  
 32587                                  	; MSDOS 6.0
 32588                                  	;;mov	byte [bp-29],0
 32589                                  	;mov	Exec_NoStack,0
 32590                                  	; 17/12/2022
 32591 00005E10 885EE3                  	mov	Exec_NoStack,bl ; 0
 32592 00005E13 391E[D60F]              	cmp	[exec_SS],bx ; 0
 32593                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 32594 00005E17 7511                    	jne	short ea1		; Y: continue normal processing
 32595 00005E19 391E[D80F]              	cmp	[exec_SP],bx ; 0
 32596                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 32597 00005E1D 750B                    	jne	short ea1		; Y: continue normal processing
 32598                                  
 32599                                  	;inc	byte [bp-29]
 32600 00005E1F FE46E3                  	inc	Exec_NoStack
 32601 00005E22 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 32602 00005E25 7303                    	jae	short ea1		; Y: don't set Exec_SP
 32603                                  
 32604 00005E27 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 32605                                  ea1:
 32606                                  	; M005 - END
 32607                                  
 32608                                  	; MSDOS 6.0			; M000 - start
 32609                                  	; 20/05/2019
 32610                                  	; (ds = ss = DOSDATA)
 32611 00005E2A F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 32612                                  					; Q: is the alloc strat high_first
 32613 00005E2F 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 32614                                  					; Y: set high_only bit
 32615 00005E31 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 32616                                  					; M000 - end
 32617                                  Exec_Norm_Alloc:
 32618 00005E36 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 32619                                  Exec_Norm_Alloc1:	; 02/06/2019
 32620                                  					; M000: attempt at allocating memory
 32621                                  	; MSDOS 3.3
 32622                                  	;push	ax			; M000
 32623                                  
 32624 00005E39 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 32625 00005E3C 1E                      	push	DS
 32626                                  	;invoke	$Alloc			; should have carry set and BX has max
 32627 00005E3D E86805                  	call	_$ALLOC
 32628 00005E40 1F                      	pop	DS
 32629                                  
 32630                                  	; MSDOS 6.0
 32631 00005E41 A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 32632                                  	; MSDOS 3.3
 32633                                  	;pop	ax			; M000
 32634                                  
 32635 00005E44 83C010                  	add	AX,10h			; room for header
 32636 00005E47 83FB11                  	cmp	BX,11h			; enough room for a header
 32637                                  	; MSDOS 6.0
 32638 00005E4A 72A9                    	jb	short Exec_Chk_Mem	; M000
 32639                                  	; MSDOS 3.3	
 32640                                  	;jb	short Exec_No_Mem
 32641                                  
 32642 00005E4C 39D8                    	cmp	AX,BX			; is there enough for bare image?
 32643                                  	; MSDOS 6.0
 32644 00005E4E 77A5                    	ja	short Exec_Chk_Mem	; M000
 32645                                  	; MSDOS 3.3
 32646                                  	;ja	short Exec_No_Mem
 32647                                  
 32648                                  	;test	byte [bp-6],0FFh
 32649 00005E50 F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 32650 00005E54 7518                    	jnz	short Exec_BX_Max	; use max
 32651                                  
 32652                                  	; 09/09/2018
 32653                                  
 32654 00005E56 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 32655                                  	; MSDOS 6.0
 32656 00005E5A 7299                    	jc	short Exec_Chk_Mem		; M000
 32657                                  	; MSDOS 3.3
 32658                                  	;jc	short Exec_No_Mem
 32659                                  
 32660 00005E5C 39D8                    	cmp	AX,BX			; enough space?
 32661                                  	; MSDOS 6.0
 32662 00005E5E 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 32663                                  	; MSDOS 3.3
 32664                                  	;ja	short Exec_No_Mem
 32665                                  
 32666 00005E60 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 32667 00005E64 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 32668 00005E68 7204                    	jc	short Exec_BX_Max
 32669                                  
 32670 00005E6A 39D8                    	cmp	AX,BX
 32671 00005E6C 7602                    	jbe	short Exec_Got_Block
 32672                                  
 32673                                  Exec_BX_Max:
 32674 00005E6E 89D8                    	mov	AX,BX
 32675                                  
 32676                                  Exec_Got_Block:
 32677                                  	; 03/08/2018 - Retro DOS v3.0
 32678                                  
 32679 00005E70 1E                      	push	DS
 32680 00005E71 89C3                    	mov	BX,AX
 32681                                  	;mov	[bp-16],bx
 32682 00005E73 895EF0                  	mov	Exec_Size,BX
 32683                                  	;invoke	$Alloc			; get the space
 32684 00005E76 E82F05                  	call	_$ALLOC
 32685 00005E79 1F                      	pop	DS
 32686                                  	; MSDOS 6.0
 32687                                  	;jc	short Exec_Chk_Mem	; M000
 32688                                  	; MSDOS 3.3
 32689                                  	;;jc	short Exec_No_Mem
 32690                                  	; 20/05/2019
 32691 00005E7A 7303                    	jnc	short ea0
 32692 00005E7C E976FF                  	jmp	Exec_Chk_Mem
 32693                                  ea0:
 32694                                  	; MSDOS 6.0
 32695 00005E7F 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 32696 00005E83 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 32697                                  
 32698                                  ;M029; Begin changes
 32699                                  ; This code does special handling for programs with no stack segment. If so,
 32700                                  ;check if the current block is larger than 64K. If so, we do not modify
 32701                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 32702                                  ;case Exec_SS is not changed.
 32703                                  
 32704                                  	; MSDOS 6.0
 32705                                  	;cmp	byte [bp-29],0
 32706 00005E87 807EE300                	cmp	Exec_NoStack,0
 32707                                  	;je	@f
 32708 00005E8B 7412                    	je	short ea2
 32709                                  
 32710 00005E8D 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 32711                                  	;jae	@f			; Y: Exec_SP = 0
 32712 00005E91 730C                    	jae	short ea2
 32713                                  
 32714                                  ;Make Exec_SP point at the top of the memory block
 32715                                  
 32716 00005E93 B104                    	mov	cl,4
 32717 00005E95 D3E3                    	shl	bx,cl			; get byte offset
 32718 00005E97 81EB0001                	sub	bx,100h			; take care of PSP
 32719 00005E9B 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 32720                                  ea2:
 32721                                  ;@@:
 32722                                  ;M029; end changes
 32723                                  
 32724                                  	;mov	[bp-18],ax
 32725 00005E9F 8946EE                  	mov	Exec_Load_Block,AX
 32726 00005EA2 83C010                  	add	AX,10h
 32727                                  	;test	byte [bp-6],0FFh
 32728 00005EA5 F646FAFF                	test	Exec_Load_High,-1
 32729 00005EA9 7409                    	jz	short Exec_Use_AX	; use ax for load info
 32730                                  
 32731                                  	;add	ax,[bp-16]
 32732 00005EAB 0346F0                  	add	AX,Exec_Size		; go to end
 32733                                  	;sub	ax,[bp-12]
 32734 00005EAE 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 32735 00005EB1 83E810                  	sub	AX,10h			; drop off pdb
 32736                                  
 32737                                  Exec_Use_AX:
 32738                                  	;mov	[bp-10],ax
 32739 00005EB4 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 32740                                  	;mov	[bp-20],ax
 32741 00005EB7 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 32742                                  
 32743                                  	; Determine the location in the file of the beginning of
 32744                                  	; the resident
 32745                                  
 32746                                  ; 17/12/2022
 32747                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32748                                  ;%if 0
 32749                                  
 32750                                  Exec_Find_Res:
 32751                                  	; MSDOS 6.0
 32752                                  	;;mov	dx,[bp-20]
 32753                                  	;mov	DX,Exec_DMA ; *+*
 32754                                  	;;mov	[bp-28],dx
 32755                                  	;mov	Exec_DMA_Save,DX
 32756                                  
 32757                                  	; 17/12/2022
 32758                                  	; AX = Exec_DMA
 32759                                  
 32760                                  	; 02/06/2019 - Retro DOS v4.0
 32761                                  	;mov	[bp-28],ax ; *+*
 32762 00005EBA 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 32763                                  
 32764                                  ;%endif
 32765                                  
 32766                                  ; 17/12/2022
 32767                                  %if 0
 32768                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32769                                  Exec_Find_Res:
 32770                                  	;mov	dx,[bp-20]
 32771                                  	mov	DX,Exec_DMA ; *+*
 32772                                  	;mov	[bp-28],dx
 32773                                  	mov	Exec_DMA_Save,DX
 32774                                  %endif
 32775                                  
 32776                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32777 00005EBD 8B16[D00F]              	mov	DX,[exec_par_dir]
 32778 00005EC1 52                      	push	DX
 32779 00005EC2 B104                    	mov	CL,4
 32780 00005EC4 D3E2                    	shl	DX,CL			; low word of location
 32781 00005EC6 58                      	pop	AX
 32782 00005EC7 B10C                    	mov	CL,12
 32783 00005EC9 D3E8                    	shr	AX,CL			; high word of location
 32784 00005ECB 89C1                    	mov	CX,AX			; CX <- high
 32785                                  
 32786                                  		; Read in the resident image (first, seek to it)
 32787                                  	;mov	bx,[bp-8]
 32788 00005ECD 8B5EF8                  	mov	BX,Exec_FH
 32789 00005ED0 1E                      	push	DS
 32790 00005ED1 30C0                    	xor	AL,AL
 32791                                  	;invoke	$Lseek			; Seek to resident
 32792 00005ED3 E8D40A                  	call	_$LSEEK
 32793 00005ED6 1F                      	pop	DS
 32794 00005ED7 7303                    	jnc	short Exec_Big_Read
 32795                                  
 32796 00005ED9 E906FF                  	jmp	Exec_Bomb
 32797                                  
 32798                                  Exec_Big_Read:				; Read resident into memory
 32799                                  	;mov	bx,[bp-12]
 32800 00005EDC 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 32801 00005EDF 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 32802 00005EE3 7203                    	jb	short Exec_Read_OK
 32803                                  
 32804 00005EE5 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 32805                                  
 32806                                  Exec_Read_OK:
 32807                                  	;sub	[bp-12],bx
 32808 00005EE8 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 32809 00005EEB 53                      	push	BX
 32810 00005EEC B104                    	mov	CL,4
 32811 00005EEE D3E3                    	shl	BX,CL			; Get count in bytes from paras
 32812 00005EF0 89D9                    	mov	CX,BX			; Count in correct register
 32813 00005EF2 1E                      	push	DS
 32814                                  	;mov	ds,[bp-20]
 32815 00005EF3 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 32816                                  
 32817 00005EF6 31D2                    	xor	DX,DX
 32818 00005EF8 51                      	push	CX			; Save our count
 32819 00005EF9 E81303                  	call	ExecRead
 32820 00005EFC 59                      	pop	CX			; Get old count to verify
 32821 00005EFD 1F                      	pop	DS
 32822 00005EFE 7248                    	jc	short Exec_Bad_FileJ
 32823                                  
 32824 00005F00 39C1                    	cmp	CX,AX			; Did we read enough?
 32825 00005F02 5B                      	pop	BX			; Get paragraph count back
 32826 00005F03 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 32827                                  
 32828                                  	; The read did not match the request. If we are off by 512
 32829                                  	; bytes or more then the header lied and we have an error.
 32830                                  
 32831 00005F05 29C1                    	sub	CX,AX
 32832 00005F07 81F90002                	cmp	CX,512
 32833 00005F0B 733B                    	jae	short Exec_Bad_FileJ
 32834                                  
 32835                                  	; We've read in CX bytes... bump DTA location
 32836                                  
 32837                                  ExecCheckEnd:
 32838                                  	;add	[bp-20],bx
 32839 00005F0D 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 32840                                  	;test	word [bp-12],0FFFFh
 32841 00005F10 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 32842 00005F15 75C5                    	jnz	short Exec_Big_Read
 32843                                  
 32844                                  	; The image has now been read in. We must perform relocation
 32845                                  	; to the current location.
 32846                                  
 32847                                  exec_do_reloc:
 32848                                  	;mov	cx,[bp-10]
 32849 00005F17 8B4EF6                  	mov	CX,Exec_Rel_Fac
 32850 00005F1A A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 32851 00005F1D 01C8                    	add	AX,CX			; and relocate him
 32852 00005F1F A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 32853                                  
 32854 00005F22 A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 32855 00005F25 A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 32856                                  
 32857 00005F28 C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 32858 00005F2C A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 32859 00005F2F 8CC0                    	mov	AX,ES			; rms;NSS
 32860 00005F31 01C8                    	add	AX,CX			; relocated...
 32861 00005F33 A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 32862                                  
 32863 00005F36 31C9                    	xor	CX,CX
 32864 00005F38 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 32865                                  	;mov	bx,[bp-8]
 32866 00005F3C 8B5EF8                  	mov	BX,Exec_FH
 32867 00005F3F 1E                      	push	DS
 32868 00005F40 31C0                    	xor	AX,AX
 32869                                  	;invoke	$Lseek
 32870 00005F42 E8650A                  	call	_$LSEEK
 32871 00005F45 1F                      	pop	DS
 32872 00005F46 7303                    	jnc	short exec_get_entries
 32873                                  
 32874                                  Exec_Bad_FileJ:
 32875 00005F48 E995FE                  	jmp	Exec_Bad_File
 32876                                  
 32877                                  exec_get_entries:
 32878 00005F4B 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 32879                                  
 32880                                  exec_read_reloc:
 32881 00005F4F 52                      	push	DX
 32882                                  	;mov	dx,OPENBUF
 32883 00005F50 BA[BE03]                	mov	DX,Exec_Internal_Buffer
 32884                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 32885                                  	;mov	cx,396 ; MSDOS 6.0
 32886 00005F53 B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 32887 00005F56 1E                      	push	DS
 32888 00005F57 E8B502                  	call	ExecRead
 32889 00005F5A 07                      	pop	ES
 32890 00005F5B 5A                      	pop	DX
 32891 00005F5C 72EA                    	jc	short Exec_Bad_FileJ
 32892                                  
 32893                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 32894                                  	;mov	cx,99 ;  MSDOS 6.0
 32895 00005F5E B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 32896                                  					; Pointer to byte location in header
 32897                                  	;mov	di,OPENBUF
 32898 00005F61 BF[BE03]                	mov	DI,Exec_Internal_Buffer
 32899                                  	;mov	si,[bp-10]
 32900 00005F64 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 32901                                  
 32902                                  exec_reloc_one:
 32903 00005F67 09D2                    	or	DX,DX			; Any more entries?
 32904 00005F69 7416                    	jz	short Exec_Set_PDBJ
 32905                                  
 32906                                  exec_get_addr:
 32907 00005F6B 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 32908 00005F6E 8CD8                    	mov	AX,DS			; Relocate address of item
 32909                                  
 32910                                  	; MSDOS 6.0
 32911                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 32912                                  	;add	ax,[bp-28]
 32913 00005F70 0346E4                  	add	AX,Exec_DMA_Save
 32914                                  
 32915 00005F73 8ED8                    	mov	DS,AX
 32916 00005F75 0137                    	add	[BX],SI
 32917 00005F77 83C704                  	add	DI,4
 32918 00005F7A 4A                      	dec	DX
 32919 00005F7B E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 32920                                  
 32921                                  	; We've exhausted a single buffer's worth. Read in the next
 32922                                  	; piece of the relocation table.
 32923                                  
 32924 00005F7D 06                      	push	ES
 32925 00005F7E 1F                      	pop	DS
 32926 00005F7F EBCE                    	jmp	short exec_read_reloc
 32927                                  
 32928                                  Exec_Set_PDBJ:
 32929                                  	; MSDOS 6.0
 32930                                  	
 32931                                  	; We now determine if this is a buggy exe packed file and if 
 32932                                  	; so we patch in the right code. Note that fixexepatch will
 32933                                  	; point to a ret if dos loads low. The load segment as 
 32934                                  	; determined above will be in exec_dma_save
 32935                                  	
 32936 00005F81 06                      	push	es
 32937 00005F82 50                      	push	ax			; M030
 32938 00005F83 51                      	push	cx			; M030
 32939                                  	;mov	es,[bp-28]
 32940 00005F84 8E46E4                  	mov	es,Exec_DMA_Save
 32941 00005F87 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 32942 00005F8B 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 32943 00005F90 36FF16[1212]            	call	word [ss:FixExePatch]
 32944                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32945                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 32946                                  	;call	word [ss:Rational386PatchPtr]
 32947 00005F95 59                      	pop	cx			; M030
 32948 00005F96 58                      	pop	ax			; M030
 32949 00005F97 07                      	pop	es
 32950                                  
 32951 00005F98 E9DE00                  	jmp	Exec_Set_PDB
 32952                                  
 32953                                  Exec_No_Memj:
 32954 00005F9B E93EFE                  	jmp	Exec_No_Mem
 32955                                  
 32956                                  	; we have a .COM file. First, determine if we are merely
 32957                                  	; loading an overlay.
 32958                                  
 32959                                  Exec_Com_File:
 32960                                  	;test	byte [bp-5],2
 32961 00005F9E F646FB02                	test	Exec_Func,exec_func_overlay
 32962 00005FA2 742D                    	jz	short Exec_Alloc_Com_File
 32963                                  	;lds	si,[bp-4]
 32964 00005FA4 C576FC                  	lds	SI,Exec_Blk		; get arg block
 32965 00005FA7 AD                      	lodsw				; get load address
 32966                                  	;mov	[bp-20],ax
 32967 00005FA8 8946EC                  	mov	Exec_DMA,AX
 32968 00005FAB B8FFFF                  	mov	AX,0FFFFh
 32969 00005FAE EB63                    	jmp	short Exec_Read_Block	; read it all!
 32970                                  
 32971                                  Exec_Chk_Com_Mem:			
 32972                                  	; MSDOS 6.0	     		; M063 - Start
 32973 00005FB0 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32974 00005FB4 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 32975 00005FB9 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32976 00005FBE F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32977 00005FC1 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 32978                                  					; N: continue
 32979                                  	
 32980 00005FC3 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32981 00005FC5 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 32982                                  	
 32983                                  	;mov	ax,[bp-18]
 32984 00005FC7 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 32985 00005FCA 31DB                    	xor	bx,bx			; M047: bx => free arena
 32986 00005FCC E87502                  	call	ChangeOwner		; M047: free this block
 32987                                  	
 32988 00005FCF EB0E                    	jmp	short Exec_Norm_Com_Alloc
 32989                                  					; M063 - End
 32990                                  	
 32991                                  	; We must allocate the max possible size block (ick!)
 32992                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 32993                                  	; size of block.
 32994                                  
 32995                                  Exec_Alloc_Com_File:
 32996                                  	; MSDOS 6.0			; M000 -start
 32997 00005FD1 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 32998                                  					; Q: is the alloc strat high_first
 32999 00005FD7 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 33000                                  					; Y: set high_only bit
 33001 00005FD9 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 33002                                  					; M000 - end
 33003                                  Exec_Norm_Com_Alloc:			; M000
 33004                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33005 00005FDF BBFFFF                  	mov	BX,0FFFFh
 33006                                  	;invoke	$Alloc			; largest piece available as error
 33007 00005FE2 E8C303                  	call	_$ALLOC
 33008 00005FE5 09DB                    	or	BX,BX
 33009                                  	; MSDOS 6.0
 33010 00005FE7 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 33011                                  	; MSDOS 3.3
 33012                                  	;jz	short Exec_No_Memj
 33013                                  
 33014                                  	;mov	[bp-16],bx
 33015 00005FE9 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 33016 00005FEC 53                      	push	BX
 33017                                  	;invoke	$ALLOC			; largest piece available
 33018 00005FED E8B803                  	call	_$ALLOC
 33019 00005FF0 5B                      	pop	BX			; get size of block...
 33020                                  	;mov	[bp-18],ax
 33021 00005FF1 8946EE                  	mov	Exec_Load_Block,AX
 33022                                  
 33023 00005FF4 83C010                  	add	AX,10h			; increment for header
 33024                                  	;mov	[bp-20],ax
 33025 00005FF7 8946EC                  	mov	Exec_DMA,AX
 33026                                  
 33027 00005FFA 31C0                    	xor	AX,AX			; presume 64K read...
 33028 00005FFC 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 33029 00006000 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 33030                                  
 33031 00006002 89D8                    	mov	AX,BX			; convert size to bytes
 33032 00006004 B104                    	mov	CL,4
 33033 00006006 D3E0                    	shl	AX,CL
 33034                                  	; 17/12/2022
 33035                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33036                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 33037                                  	; MSDOS 5.0
 33038                                  	;cmp	AX,100h   
 33039                                  	; 02/06/2019 - Retro DOS v4.0
 33040                                  	; MSDOS 6.0
 33041                                          ; 17/12/2022
 33042 00006008 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 33043 0000600B 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33044                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 33045                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 33046                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33047                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 33048                                  
 33049                                  					; M047: size of the block is < 64K
 33050 0000600D 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 33051                                  
 33052                                  Exec_Read_Com:
 33053                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33054 00006010 2D0001                  	sub	AX,100h 		; remember size of psp
 33055                                  Exec_Read_Block:
 33056 00006013 50                      	push	AX			; save number to read
 33057                                  	;mov	bx,[bp-8]
 33058 00006014 8B5EF8                  	mov	BX,Exec_FH		; of com file
 33059 00006017 31C9                    	xor	CX,CX			; but seek to 0:0
 33060 00006019 89CA                    	mov	DX,CX
 33061 0000601B 31C0                    	xor	AX,AX			; seek relative to beginning
 33062                                  	;invoke	$Lseek			; back to beginning of file
 33063 0000601D E88A09                  	call	_$LSEEK
 33064 00006020 59                      	pop	CX			; number to read
 33065                                  	;mov	ds,[bp-20]
 33066 00006021 8E5EEC                  	mov	DS,Exec_DMA
 33067 00006024 31D2                    	xor	DX,DX
 33068 00006026 51                      	push	CX
 33069 00006027 E8E501                  	call	ExecRead
 33070 0000602A 5E                      	pop	SI			; get number of bytes to read
 33071 0000602B 7303                    	jnc	short OkRead
 33072 0000602D E9B0FD                  	jmp	Exec_Bad_File
 33073                                  
 33074                                  	; 10/09/2018
 33075                                  OkRead:
 33076 00006030 39F0                    	cmp	AX,SI			; did we read them all?
 33077                                  	; MSDOS 6.0
 33078                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 33079                                  	; MSDOS 3.3
 33080                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 33081 00006032 7503                    	jne	short OkRead2
 33082 00006034 E979FF                  	jmp	Exec_Chk_Com_Mem
 33083                                  OkRead2:
 33084                                  	; MSDOS 6.0
 33085 00006037 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 33086 0000603C 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 33087                                  
 33088                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33089                                  	;test	byte [bp-5],2
 33090 00006041 F646FB02                	test	Exec_Func,exec_func_overlay
 33091 00006045 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 33092                                  
 33093                                  	;mov	ax,[bp-20]
 33094 00006047 8B46EC                  	mov	AX,Exec_DMA
 33095 0000604A 83E810                  	sub	AX,10h
 33096 0000604D 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 33097 00006051 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 33098                                  
 33099                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 33100                                  	; of 0 on stack.
 33101                                  
 33102 00006058 81C6FE00                	add	SI,0FEh 		; make room for stack
 33103                                  
 33104                                  	; MSDOS 6.0
 33105 0000605C 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 33106 0000605F 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 33107 00006061 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 33108                                  
 33109                                  Exec_St_Ok:
 33110                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33111 00006065 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 33112 0000606A 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 33113 0000606E 8ED8                    	mov	DS,AX
 33114 00006070 C7040000                	mov	WORD [SI],0		; 0 for return
 33115                                  
 33116                                  	; MSDOS 6.0
 33117                                  
 33118                                  	; M068
 33119                                  	;
 33120                                  	; We now determine if this is a Copy Protected App. If so the 
 33121                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 33122                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 33123                                  
 33124 00006074 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 33125                                  
 33126                                  Exec_Set_PDB:
 33127                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33128                                  	;mov	bx,[bp-8]
 33129 00006079 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 33130 0000607C E8A901                  	call	Exec_Dealloc
 33131 0000607F 55                      	push	BP
 33132                                  	;invoke	$Close			; release the jfn
 33133 00006080 E8AB07                  	call	_$CLOSE
 33134 00006083 5D                      	pop	BP
 33135 00006084 E89301                  	call	Exec_Alloc
 33136                                  	;test	byte [bp-5],2
 33137 00006087 F646FB02                	test	Exec_Func,exec_func_overlay
 33138 0000608B 743A                    	jz	short Exec_Build_Header
 33139                                  
 33140                                  	; MSDOS 6.0
 33141 0000608D E8C201                  	call	Scan_Execname
 33142 00006090 E8D601                  	call	Scan_Special_Entries
 33143                                  ;SR;
 33144                                  ;The current lie strategy uses the PSP to store the lie version. However,
 33145                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 33146                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 33147                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 33148                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 33149                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 33150                                  ;issues the version check, it gets the lie version until the next overlay
 33151                                  ;call is issued.
 33152                                  
 33153 00006093 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 33154 00006099 7426                    	je	short norm_ovl		;yes, no special handling
 33155 0000609B 56                      	push	si
 33156 0000609C 06                      	push	es
 33157 0000609D 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 33158                                  	 
 33159                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 33160 000060A2 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 33161 000060A6 7411                    	je	short sysinit_done	;no, Sysinit is finished
 33162                                  	
 33163 000060A8 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 33164 000060AD 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 33165 000060B2 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 33166                                  		;;; PDB.VERSION
 33167 000060B7 EB06                    	jmp	short setver_done
 33168                                  sysinit_done:
 33169 000060B9 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 33170                                  setver_done:
 33171 000060BF 07                      	pop	es
 33172 000060C0 5E                      	pop	si
 33173                                  norm_ovl:
 33174                                  	;leave
 33175 000060C1 89EC                    	mov	sp,bp		
 33176 000060C3 5D                      	pop	bp
 33177                                  
 33178                                  	;transfer SYS_RET_OK		; overlay load -> done
 33179 000060C4 E9BDA5                  	jmp	SYS_RET_OK
 33180                                  
 33181                                  Exec_Build_Header:
 33182                                  	;mov	dx,[bp-18]
 33183 000060C7 8B56EE                  	mov	DX,Exec_Load_Block
 33184                                  					; assign the space to the process
 33185                                  	;mov	si,1
 33186 000060CA BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 33187                                  	;mov	ax,[bp-14]
 33188 000060CD 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 33189 000060D0 09C0                    	or	AX,AX
 33190 000060D2 7405                    	jz	short No_Owner		; no environment
 33191                                  
 33192 000060D4 48                      	dec	AX			; point to header
 33193 000060D5 8ED8                    	mov	DS,AX
 33194 000060D7 8914                    	mov	[SI],DX 		; assign ownership
 33195                                  No_Owner:
 33196                                  	;mov	ax,[bp-18]
 33197                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 33198                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 33199                                  	; 17/12/2022
 33200 000060D9 89D0                    	mov	ax,dx ; 06/06/2019
 33201                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 33202                                  	
 33203 000060DB 48                      	dec	AX
 33204 000060DC 8ED8                    	mov	DS,AX			; point to header
 33205 000060DE 8914                    	mov	[SI],DX 		; assign ownership
 33206                                  
 33207                                  	; MSDOS 6.0
 33208 000060E0 1E                      	push	DS			;AN000;MS. make ES=DS
 33209 000060E1 07                      	pop	ES			;AN000;MS.
 33210                                  	;mov	di,8
 33211 000060E2 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 33212 000060E5 E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 33213                                  					;	   ds:si->name, cx=name length
 33214 000060E8 51                      	push	CX			;AN007;;MS. save for fake version
 33215 000060E9 56                      	push	SI			;AN007;;MS. save for fake version
 33216                                  
 33217                                  MoveName:				;AN000;
 33218 000060EA AC                      	lodsb				;AN000;;MS. get char
 33219 000060EB 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 33220 000060ED 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 33221                                  					;AN000;
 33222 000060EF AA                      	stosb				;AN000;;MS. move char
 33223                                  					; MSKK bug fix - limit length copied
 33224 000060F0 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 33225 000060F3 7302                    	jae	short Mem_Done		; jump if so
 33226                                  	;
 33227 000060F5 E2F3                    	loop	MoveName		;AN000;;MS. continue
 33228                                  Mem_Done:				;AN000;
 33229 000060F7 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 33230                                  	;cmp	di,16
 33231 000060F9 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 33232 000060FC 7301                    	jae	short Fill8		;AN000;MS.
 33233                                  	
 33234 000060FE AA                      	stosb				;AN000;MS.
 33235                                  	
 33236                                  Fill8:					;AN000;
 33237 000060FF 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 33238 00006100 59                      	pop	CX			;AN007;MS.
 33239                                  	
 33240 00006101 E86501                  	call	Scan_Special_Entries	;AN007;MS.
 33241                                  
 33242                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33243 00006104 52                      	push	DX
 33244                                  	;mov	si,[bp-16]
 33245 00006105 8B76F0                  	mov	SI,Exec_Size
 33246 00006108 01D6                    	add	SI,DX
 33247                                  	;Invoke	$Dup_PDB		; ES is now PDB
 33248 0000610A E802B0                  	call	_$DUP_PDB
 33249 0000610D 5A                      	pop	DX
 33250                                  
 33251                                  	;push	word [bp-14]
 33252 0000610E FF76F2                  	push	Exec_Environ
 33253                                  	;pop	WORD [ES:2Ch]
 33254 00006111 268F062C00              	pop	word [ES:PDB.ENVIRON]
 33255                                  
 33256                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 33257                                  					; version number in PSP
 33258 00006116 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 33259 0000611B 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 33260                                  		; PDB.VERSION
 33261                                  
 33262                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 33263                                  	;lds	si,[bp-4]
 33264 00006120 C576FC                  	lds	SI,Exec_Blk		; get the block
 33265 00006123 1E                      	push	DS			; save its location
 33266 00006124 56                      	push	SI
 33267                                  	;lds	si,[si+6]
 33268 00006125 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 33269                                  
 33270                                  	; DS points to user space 5C FCB
 33271                                  
 33272 00006128 B90C00                  	mov	CX,12			; copy drive, name and ext
 33273 0000612B 51                      	push	CX
 33274 0000612C BF5C00                  	mov	DI,5Ch
 33275 0000612F 8A1C                    	mov	BL,[SI]
 33276 00006131 F3A4                    	rep	movsb
 33277                                  
 33278                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 33279                                  
 33280 00006133 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 33281 00006135 AB                      	stosw
 33282 00006136 AB                      	stosw
 33283                                  
 33284                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 33285                                  
 33286 00006137 59                      	pop	CX
 33287 00006138 5E                      	pop	SI			; get block
 33288 00006139 1F                      	pop	DS
 33289 0000613A 1E                      	push	DS			; save (again)
 33290 0000613B 56                      	push	SI
 33291                                  	;lds	si,[si+0Ah]
 33292 0000613C C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 33293                                  
 33294                                  	; DS points to user space 6C FCB
 33295                                  
 33296 0000613F 8A3C                    	mov	BH,[SI] 		; do same as above
 33297 00006141 F3A4                    	rep	movsb
 33298 00006143 AB                      	stosw
 33299 00006144 AB                      	stosw
 33300 00006145 5E                      	pop	SI			; get block (last time)
 33301 00006146 1F                      	pop	DS
 33302                                  	;ld	si,[si+2]
 33303 00006147 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 33304                                  
 33305                                  	; DS points to user space 80 command line
 33306                                  
 33307 0000614A 80C980                  	or	CL,80h
 33308 0000614D 89CF                    	mov	DI,CX
 33309 0000614F F3A4                    	rep	movsb			; Wham!
 33310                                  
 33311                                  	; Process BX into default AX (validity of drive specs on args).
 33312                                  	; We no longer care about DS:SI.
 33313                                  
 33314 00006151 FEC9                    	dec	CL			; get 0FFh in CL
 33315 00006153 88F8                    	mov	AL,BH
 33316 00006155 30FF                    	xor	BH,BH
 33317                                  	;invoke	GetVisDrv
 33318 00006157 E8410A                  	call	GetVisDrv
 33319 0000615A 7302                    	jnc	short Exec_BL
 33320                                  
 33321 0000615C 88CF                    	mov	BH,CL
 33322                                  
 33323                                  Exec_BL:
 33324 0000615E 88D8                    	mov	AL,BL
 33325 00006160 30DB                    	xor	BL,BL
 33326                                  	;invoke	GetVisDrv
 33327 00006162 E8360A                  	call	GetVisDrv
 33328 00006165 7302                    	jnc	short Exec_Set_Return
 33329                                  
 33330 00006167 88CB                    	mov	BL,CL
 33331                                  
 33332                                  Exec_Set_Return:
 33333                                  	;invoke	Get_User_Stack			; get his return address
 33334 00006169 E85EA3                  	call	Get_User_Stack
 33335                                  
 33336                                  	;push	word [si+14h]
 33337 0000616C FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33338                                  	;push	word [si+12h]
 33339 0000616F FF7412                  	push	word [SI+user_env.user_IP]
 33340                                  	;push	word [si+14h]
 33341 00006172 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33342                                  	;push	word [si+12h]
 33343 00006175 FF7412                  	push	word [SI+user_env.user_IP]
 33344                                  	;pop	word [ES:0Ah]
 33345 00006178 268F060A00              	pop	WORD [ES:PDB.EXIT]
 33346                                  	;pop	word [ES:0Ch]
 33347 0000617D 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 33348                                  
 33349 00006182 31C0                    	xor	AX,AX
 33350 00006184 8ED8                    	mov	DS,AX
 33351                                  					; save them where we can get them
 33352                                  					; later when the child exits.
 33353                                  	;pop	word [88h]
 33354 00006186 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 33355                                  	;pop	word [90h]
 33356 0000618A 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 33357                                  
 33358 0000618E 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 33359 00006195 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 33360 0000619A 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 33361                                  
 33362                                  	;test	byte [bp-5],1
 33363 0000619F F646FB01                	test	Exec_Func,exec_func_no_execute
 33364 000061A3 7427                    	jz	short exec_go
 33365                                  
 33366 000061A5 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 33367                                  	;les	di,[bp-4]
 33368 000061AA C47EFC                  	les	DI,Exec_Blk		; and block for return
 33369                                  	;mov	[es:di+10h],ds
 33370 000061AD 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 33371                                  
 33372 000061B1 4E                      	dec	SI			; 'push' default AX
 33373 000061B2 4E                      	dec	SI
 33374 000061B3 891C                    	mov	[SI],BX 		; save default AX reg
 33375                                  	;mov	[es:di+0Eh], si
 33376 000061B5 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 33377                                  
 33378 000061B9 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 33379                                  	;mov	[es:di+14h],ds
 33380 000061BE 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 33381                                  	;mov	[es:di+12h],ax
 33382 000061C2 26894512                	mov	[ES:DI+EXEC1.IP],AX
 33383                                  	
 33384                                  	;leave
 33385 000061C6 89EC                    	mov	sp,bp
 33386 000061C8 5D                      	pop	bp	
 33387                                  
 33388                                  	;transfer SYS_RET_OK
 33389 000061C9 E9B8A4                  	jmp	SYS_RET_OK
 33390                                  
 33391                                  exec_go:
 33392 000061CC 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 33393 000061D1 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 33394 000061D6 8CC0                    	mov	AX,ES
 33395                                  
 33396                                  	; MSDOS 6.0
 33397 000061D8 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 33398 000061DE 741A                    	je	short Xfer_To_User	; N: transfer control to user
 33399                                  
 33400 000061E0 1E                      	push	ds			; Y: control must go to low mem stub
 33401                                  		
 33402 000061E1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 33403                                  					;    control to user 
 33404 000061E6 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 33405                                  					; M004: Set bit to signal int 21
 33406                                  					; ah = 25 & ah= 49. See dossym.inc 
 33407                                  					; under TAG M003 & M009 for 
 33408                                  					; explanation
 33409 000061EB 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 33410                                  					; M068: going to be turned OFF.
 33411                                  	
 33412 000061EF 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 33413 000061F1 1F                      	pop	ds
 33414                                  	
 33415 000061F2 50                      	push	ax			; ret far into the low mem stub
 33416 000061F3 B8[1511]                	mov	ax,disa20_xfer
 33417 000061F6 50                      	push	ax
 33418 000061F7 8CC0                    	mov	AX,ES			; restore ax
 33419 000061F9 CB                      	retf
 33420                                  
 33421                                  Xfer_To_User:
 33422                                  	; DS:SI points to entry point
 33423                                  	; AX:DI points to initial stack
 33424                                  	; DX has PDB pointer
 33425                                  	; BX has initial AX value
 33426                                  
 33427 000061FA FA                      	cli
 33428                                  	; 15/08/2018
 33429 000061FB 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 33430                                  
 33431 00006201 8ED0                    	mov	SS,AX			; set up user's stack
 33432 00006203 89FC                    	mov	SP,DI			; and SP
 33433 00006205 FB                      	sti
 33434                                  
 33435 00006206 1E                      	push	DS			; fake long call to entry
 33436 00006207 56                      	push	SI
 33437 00006208 8EC2                    	mov	ES,DX			; set up proper seg registers
 33438 0000620A 8EDA                    	mov	DS,DX
 33439 0000620C 89D8                    	mov	AX,BX			; set up proper AX
 33440                                  
 33441 0000620E CB                      	retf
 33442                                  
 33443                                  ; 04/08/2018 - Retro DOS v3.0
 33444                                  
 33445                                  ;----------------------------------------------------------------------------
 33446                                  ;
 33447                                  ;----------------------------------------------------------------------------
 33448                                  
 33449                                  ExecRead:
 33450 0000620F E81600                  	CALL	Exec_Dealloc
 33451                                  	;mov	bx,[bp-8]
 33452 00006212 8B5EF8                  	MOV	bx,Exec_FH
 33453                                  
 33454 00006215 55                      	PUSH	BP
 33455 00006216 E82607                  	call	_$READ
 33456 00006219 5D                      	POP	BP
 33457                                  
 33458                                  	;CALL	Exec_Alloc
 33459                                  	;retn
 33460                                  	; 18/12/2022
 33461                                  	;jmp	short Exec_Alloc
 33462                                  
 33463                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 33464                                  
 33465                                  ;----------------------------------------------------------------------------
 33466                                  ;
 33467                                  ;----------------------------------------------------------------------------
 33468                                  
 33469                                  Exec_Alloc:
 33470 0000621A 53                      	push	BX
 33471                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33472                                  	; 20/05/2019 - Retro DOS v4.0
 33473                                  	; MSDOS 6.0
 33474 0000621B 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 33475 00006220 E81000                  	call	ChangeOwners
 33476 00006223 E87DB1                  	call	LCritMEM
 33477 00006226 5B                      	pop	BX
 33478 00006227 C3                      	retn
 33479                                  
 33480                                  ;----------------------------------------------------------------------------
 33481                                  ;
 33482                                  ;----------------------------------------------------------------------------
 33483                                  
 33484                                  Exec_Dealloc:
 33485 00006228 53                      	push	BX
 33486                                  	;mov	bx,0
 33487 00006229 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 33488 0000622B E85AB1                  	call	ECritMEM
 33489 0000622E E80200                  	call	ChangeOwners
 33490 00006231 5B                      	pop	BX
 33491 00006232 C3                      	retn
 33492                                  
 33493                                  ; 18/12/2022
 33494                                  %if 0
 33495                                  ;----------------------------------------------------------------------------
 33496                                  ;
 33497                                  ;----------------------------------------------------------------------------
 33498                                  
 33499                                  Exec_Alloc:
 33500                                  	push	BX
 33501                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33502                                  	; 20/05/2019 - Retro DOS v4.0
 33503                                  	; MSDOS 6.0
 33504                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 33505                                  	call	ChangeOwners
 33506                                  	call	LCritMEM
 33507                                  	pop	BX
 33508                                  	retn
 33509                                  
 33510                                  %endif
 33511                                  
 33512                                  ;----------------------------------------------------------------------------
 33513                                  ;
 33514                                  ;----------------------------------------------------------------------------
 33515                                  
 33516                                  ChangeOwners:
 33517 00006233 9C                      	pushf
 33518 00006234 50                      	push	AX
 33519                                  	;mov	ax,[bp-14]
 33520 00006235 8B46F2                  	mov	AX,Exec_Environ
 33521 00006238 E80900                  	call	ChangeOwner
 33522                                  	;mov	ax,[bp-18]
 33523 0000623B 8B46EE                  	mov	AX,Exec_Load_Block
 33524 0000623E E80300                  	call	ChangeOwner
 33525 00006241 58                      	pop	AX
 33526 00006242 9D                      	popf
 33527                                  chgown_retn:
 33528 00006243 C3                      	retn
 33529                                  
 33530                                  ;----------------------------------------------------------------------------
 33531                                  ;
 33532                                  ;----------------------------------------------------------------------------
 33533                                  
 33534                                  ChangeOwner:
 33535 00006244 09C0                    	or	AX,AX			; is area allocated?
 33536 00006246 74FB                    	jz	short chgown_retn	; no, do nothing
 33537 00006248 48                      	dec	AX
 33538 00006249 1E                      	push	DS
 33539 0000624A 8ED8                    	mov	DS,AX
 33540 0000624C 891E0100                	mov	[ARENA.OWNER],BX
 33541 00006250 1F                      	pop	DS
 33542 00006251 C3                      	retn
 33543                                  
 33544                                  ;----------------------------------------------------------------------------
 33545                                  ;
 33546                                  ;----------------------------------------------------------------------------
 33547                                  
 33548                                  ; 20/05/2019 - Retro DOS v4.0
 33549                                  
 33550                                  	; MSDOS 6.0
 33551                                  Scan_Execname:
 33552 00006252 C576E6                  	lds	SI,ExecName		; DS:SI points to name
 33553                                  Scan_Execname1:				; M028
 33554                                  Save_Begin:				;
 33555 00006255 89F1                    	mov	CX,SI			; CX= starting addr
 33556                                  Scan0:					;
 33557 00006257 AC                      	lodsb				; get char
 33558                                  
 33559 00006258 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 33560 0000625A 74F9                    	jz	short Save_Begin	; yes, save si
 33561 0000625C 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 33562 0000625E 74F5                    	jz	short Save_Begin	; yes, save si
 33563 00006260 3C00                    	cmp	AL,0			; is end of name
 33564 00006262 75F3                    	jnz	short Scan0		; no, continue scanning
 33565 00006264 29CE                    	sub	SI,CX			; get name's length
 33566 00006266 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 33567                                  
 33568 00006268 C3                      	retn
 33569                                  
 33570                                  ;----------------------------------------------------------------------------
 33571                                  ;
 33572                                  ;----------------------------------------------------------------------------
 33573                                  
 33574                                  ; 20/05/2019 - Retro DOS v4.0
 33575                                  
 33576                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33577                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 33578                                  
 33579                                  	; MSDOS 6.0
 33580                                  
 33581                                  Scan_Special_Entries:
 33582                                  
 33583 00006269 49                      	dec	CX			; cx= name length
 33584                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 33585                                  					;reset to current version
 33586                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 33587                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 33588                                  	;mov	word [ss:SPECIAL_VERSION],5
 33589                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 33590                                  
 33591                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 33592 0000626A 36C706[BD0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 33593                                  				; 1506h for Retro DOS v4.0 (MSDOS 6.21)
 33594                                  ;***	call	Reset_Version
 33595                                  
 33596                                  ;M060	push	SS
 33597                                  ;M060	pop	ES
 33598                                  
 33599 00006271 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 33600 00006276 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 33601 00006278 09F8                    	or	AX,DI			;M060; be sure the table exists
 33602 0000627A 7427                    	jz	short End_List		;M060; If ZR then no table
 33603                                  
 33604                                  GetEntries:
 33605 0000627C 268A05                  	mov	AL,[ES:DI]		; end of list
 33606 0000627F 08C0                    	or	AL,AL
 33607 00006281 7420                    	jz	short End_List		; yes
 33608                                  
 33609 00006283 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 33610 00006288 38C8                    	cmp	AL,CL			; same length ?
 33611 0000628A 751B                    	jnz	short SkipOne 		; no
 33612                                  
 33613 0000628C 47                      	inc	DI			; es:di -> special name
 33614 0000628D 51                      	push	CX			; save length and name addr
 33615 0000628E 56                      	push	SI
 33616                                  
 33617                                  ; M050 - BEGIN
 33618                                  
 33619 0000628F 50                      	push	ax			; save len
 33620                                  sse_next_char:
 33621 00006290 AC                      	lodsb
 33622 00006291 E8BCEE                  	call	UCase
 33623 00006294 AE                      	scasb
 33624 00006295 750D                    	jne	short Not_Matched
 33625 00006297 E2F7                    	loop	sse_next_char
 33626                                  	
 33627                                  ;	repz	cmpsb			; same name ?
 33628                                  ;	jnz	short Not_Matched	; no
 33629                                  
 33630 00006299 58                      	pop	ax			; take len off the stack
 33631                                  
 33632                                  ; M050 - END
 33633                                  
 33634 0000629A 268B05                  	mov	AX,[ES:DI]		; get special version
 33635 0000629D 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 33636                                  
 33637                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 33638                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 33639                                  
 33640 000062A1 5E                      	pop	SI
 33641 000062A2 59                      	pop	CX
 33642                                  	; 18/12/2022
 33643                                  	;jmp	SHORT End_List
 33644                                  
 33645                                  	; 18/12/2022
 33646                                  End_List:
 33647 000062A3 C3                      	retn
 33648                                  
 33649                                  Not_Matched:
 33650 000062A4 58                      	pop	ax			; get len from stack ; M050
 33651 000062A5 5E                      	pop	SI			; restore si,cx
 33652 000062A6 59                      	pop	CX
 33653                                  
 33654                                  SkipOne:
 33655 000062A7 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 33656 000062AC 30E4                    	xor	AH,AH			; position to next entry
 33657 000062AE 01C7                    	add	DI,AX
 33658                                  
 33659 000062B0 83C703                  	add	DI,3			; DI -> next entry length
 33660                                  ;***	add	DI,4			; DI -> next entry length
 33661                                  
 33662 000062B3 EBC7                    	jmp	short GetEntries
 33663                                  
 33664                                  	; 18/12/2022
 33665                                  ;End_List:
 33666                                  	;retn
 33667                                  
 33668                                  ; 04/08/2018 - Retro DOS v3.0
 33669                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 33670                                  
 33671                                  ;----------------------------------------------------------------------------
 33672                                  ;SUBTTL Terminate and stay resident handler
 33673                                  ;
 33674                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 33675                                  ;	    truncate the current block.
 33676                                  ;
 33677                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 33678                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 33679                                  ;	    and restoring the vectors.
 33680                                  ;
 33681                                  ;----------------------------------------------------------------------------
 33682                                  
 33683                                  	; 20/05/2019 - Retro DOS v4.0
 33684                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 33685                                  
 33686                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33687                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 33688                                  
 33689                                  _$KEEP_PROCESS:
 33690 000062B5 50                      	push	AX			; keep exit code around
 33691                                  	;mov	byte [SS:EXIT_TYPE],3
 33692 000062B6 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 33693 000062BC 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 33694 000062C1 83FA06                  	cmp	DX,6h			; keep enough space around for system
 33695 000062C4 7303                    	jae	short Keep_Shrink	; info
 33696                                  
 33697 000062C6 BA0600                  	mov	DX,6h
 33698                                  
 33699                                  Keep_Shrink:
 33700 000062C9 89D3                    	mov	BX,DX
 33701 000062CB 53                      	push	BX
 33702 000062CC 06                      	push	ES
 33703 000062CD E82E02                  	call	_$SETBLOCK		; ignore return codes.
 33704 000062D0 1F                      	pop	DS
 33705 000062D1 5B                      	pop	BX
 33706 000062D2 7207                    	jc	short Keep_Done		; failed on modification
 33707                                  
 33708 000062D4 8CD8                    	mov	AX,DS
 33709 000062D6 01D8                    	add	AX,BX
 33710                                  	;mov	[2],ax
 33711 000062D8 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 33712                                  
 33713                                  Keep_Done:
 33714 000062DB 58                      	pop	AX
 33715 000062DC EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 33716                                  
 33717                                  ;----------------------------------------------------------------------------
 33718                                  ;
 33719                                  ;----------------------------------------------------------------------------
 33720                                  
 33721                                  STAY_RESIDENT:
 33722                                  	;mov	ax,3100h
 33723 000062DE B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 33724 000062E1 83C20F                  	add	DX,15
 33725 000062E4 D1DA                    	rcr	DX,1
 33726 000062E6 B103                    	mov	CL,3
 33727 000062E8 D3EA                    	shr	DX,CL
 33728                                  
 33729 000062EA E95AA0                  	jmp	COMMAND
 33730                                  
 33731                                  ;----------------------------------------------------------------------------
 33732                                  ;SUBTTL $EXIT - return to parent process
 33733                                  ;   Assembler usage:
 33734                                  ;	    MOV     AL, code
 33735                                  ;	    MOV     AH, Exit
 33736                                  ;	    INT     int_command
 33737                                  ;   Error return:
 33738                                  ;	    None.
 33739                                  ;
 33740                                  ;----------------------------------------------------------------------------
 33741                                  
 33742                                  	; 20/05/2019 - Retro DOS v4.0
 33743                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 33744                                  
 33745                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33746                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 33747                                  _$EXIT:
 33748                                  	; 04/08/2018 - Retro DOS v3.0
 33749                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 33750 000062ED 30E4                    	xor	AH,AH
 33751 000062EF 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 33752 000062F4 08E4                    	or	AH,AH
 33753                                  	;mov	BYTE [SS:EXIT_TYPE],0
 33754 000062F6 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 33755 000062FC 7406                    	jz	short exit_inner
 33756                                  	;mov	BYTE [SS:EXIT_TYPE],1
 33757 000062FE 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 33758                                  
 33759                                  	;entry	Exit_inner
 33760                                  exit_inner:
 33761 00006304 E8C3A1                  	call	Get_User_Stack		;PBUGBUG
 33762                                  
 33763 00006307 36FF36[3003]            	push	word [ss:CurrentPDB]
 33764                                  	;pop	word [si+14h]
 33765 0000630C 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 33766 0000630F EB08                    	jmp	short abort_inner
 33767                                  
 33768                                  ;BREAK <$ABORT -- Terminate a process>
 33769                                  ;----------------------------------------------------------------------------
 33770                                  ; Inputs:
 33771                                  ;	user_CS:00 must point to valid program header block
 33772                                  ; Function:
 33773                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 33774                                  ;	to the terminate address
 33775                                  ; Returns:
 33776                                  ;	TO THE TERMINATE ADDRESS
 33777                                  ;----------------------------------------------------------------------------
 33778                                  
 33779                                  _$ABORT:
 33780 00006311 30C0                    	xor	AL,AL
 33781                                  	;mov	byte [SS:EXIT_TYPE],0
 33782                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 33783 00006313 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 33784                                  
 33785                                  	; abort_inner must have AL set as the exit code! The exit type
 33786                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 33787                                  	; to be correct as the one that is terminating.
 33788                                  
 33789                                  abort_inner:
 33790 00006319 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 33791 0000631E 36A3[3403]              	mov	[SS:exit_code],AX
 33792 00006322 E8A5A1                  	call	Get_User_Stack
 33793                                  
 33794                                  	;mov	ds,[si+14h]
 33795 00006325 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 33796 00006328 31C0                    	xor	AX,AX
 33797 0000632A 8EC0                    	mov	ES,AX
 33798                                  	;mov	si,10
 33799 0000632C BE0A00                  	mov	SI,SAVEXIT
 33800                                  	;mov	di,88h
 33801 0000632F BF8800                  	mov	DI,addr_int_terminate
 33802 00006332 A5                      	movsw
 33803 00006333 A5                      	movsw
 33804 00006334 A5                      	movsw
 33805 00006335 A5                      	movsw
 33806 00006336 A5                      	movsw
 33807 00006337 A5                      	movsw
 33808 00006338 E930F2                  	jmp	reset_environment
 33809                                  
 33810                                  ;----------------------------------------------------------------------------
 33811                                  ;
 33812                                  ; fixexepatch will point to this is DOS loads low. 
 33813                                  ;
 33814                                  ;----------------------------------------------------------------------------
 33815                                  ; MSDOS 6.0
 33816                                  
 33817                                  ; 29/04/2019 - Retro DOS v4.0
 33818                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 33819                                  
 33820                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33821                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 33822                                  
 33823                                  RetExePatch: ; proc near
 33824                                  	
 33825 0000633B C3                      	retn
 33826                                  
 33827                                  ;============================================================================
 33828                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 33829                                  ;============================================================================
 33830                                  ; 04/08/2018 - Retro DOS v3.0
 33831                                  ; 14/05/2019 - Retro DOS v4.0
 33832                                  
 33833                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 33834                                  
 33835                                  ;**
 33836                                  ;	Microsoft Confidential
 33837                                  ;	Copyright (C) Microsoft Corporation 1991
 33838                                  ;	All Rights Reserved.
 33839                                  ;
 33840                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 33841                                  ;	I/O specs are defined in DISPATCH.
 33842                                  ;
 33843                                  ;	$ALLOC
 33844                                  ;	$SETBLOCK
 33845                                  ;	$DEALLOC
 33846                                  ;	$AllocOper
 33847                                  ;	arena_free_process
 33848                                  ;	arena_next
 33849                                  ;	check_signature
 33850                                  ;	Coalesce
 33851                                  ;
 33852                                  ;	Modification history:
 33853                                  ;
 33854                                  ;	    Created: ARR 30 March 1983
 33855                                  ;
 33856                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 33857                                  ;		      M003 - added support for link/unlink UMBs from
 33858                                  ;			     DOS arena chain. 7/18/90
 33859                                  ;		      M009 - Added error returns invalid function and 
 33860                                  ;			     arena trashed in set link state call.
 33861                                  ;		      M010 - Release UMB arenas allocated to current PDB
 33862                                  ;			     if UMB_HEAD is initialized.
 33863                                  ;
 33864                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 33865                                  ;			     support. Please see under M009 in 
 33866                                  ;			     ..\inc\dossym.inc. 8/31/90.
 33867                                  ;
 33868                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 33869                                  ;			     sure that umb_head arena is valid and also make
 33870                                  ;			     sure that the previous arena is pointing to 
 33871                                  ;			     umb_head.
 33872                                  ;
 33873                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 33874                                  ;			     set allloc strategy.
 33875                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 33876                                  ;			     bx in AllocSetStrat.
 33877                                  ;
 33878                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 33879                                  ;			     a bit to indicate to dos dispatcher to turn
 33880                                  ;			     a20 off before iret. See M016.
 33881                                  ;
 33882                                  
 33883                                  ;	BREAK	<memory allocation utility routines>
 33884                                  
 33885                                  
 33886                                  ; 15/04/2018 - Retro DOS v2.0
 33887                                  ;----------------------------------------------------------------------------
 33888                                  ; xenix memory calls for MSDOS
 33889                                  ;
 33890                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 33891                                  ; arena_owner_system are all equal to zero and are contained in DI.
 33892                                  ;
 33893                                  ;INCLUDE DOSSEG.ASM
 33894                                  
 33895                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 33896                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 33897                                  
 33898                                  ;.xlist
 33899                                  ;.xcref
 33900                                  ;INCLUDE DOSSYM.ASM
 33901                                  ;INCLUDE DEVSYM.ASM
 33902                                  ;.cref
 33903                                  ;.list
 33904                                  
 33905                                  ;TITLE ALLOC.ASM - memory arena manager
 33906                                  ;NAME Alloc
 33907                                  
 33908                                  ;SUBTTL memory allocation utility routines
 33909                                  ;PAGE
 33910                                  ;
 33911                                  ; arena data
 33912                                  ;
 33913                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 33914                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 33915                                  ;       i_need  FirstArena,WORD         ; first free block found
 33916                                  ;       i_need  BestArena,WORD          ; best free block found
 33917                                  ;       i_need  LastArena,WORD          ; last free block found
 33918                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 33919                                  
 33920                                  ;**	Arena_Free_Process
 33921                                  ;----------------------------------------------------------------------------
 33922                                  ;	Free all arena blocks allocated to a prOcess
 33923                                  ;
 33924                                  ;	ENTRY	(bx) = PID of process
 33925                                  ;	EXIT	none
 33926                                  ;	USES	????? BUGBUG
 33927                                  ;----------------------------------------------------------------------------
 33928                                  
 33929                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33930                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 33931                                  
 33932                                  arena_free_process:
 33933                                  	; 14/05/2019 - Retro DOS v4.0
 33934                                  	; 04/08/2018 - Retro DOS v3.0
 33935 0000633C 36A1[2400]                      MOV	AX,[SS:arena_head]
 33936                                  arena_free_process_start:
 33937 00006340 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 33938                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 33939 00006343 E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 33940                                  
 33941                                  arena_free_process_loop:
 33942                                          ;retc
 33943 00006346 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 33944 00006348 06                      	PUSH    ES
 33945 00006349 1F                              POP     DS
 33946                                  	;cmp	[1],bx 
 33947 0000634A 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 33948 0000634E 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 33949                                  	;mov	[1],di
 33950 00006350 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 33951                                  
 33952                                  arena_free_next:
 33953                                  	;cmp	byte [di],5Ah ;'Z'
 33954 00006354 803D5A                          CMP     BYTE [DI],arena_signature_end
 33955                                                                          ; end of road, Jack?
 33956                                          ;retz				; never come back no more
 33957                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 33958                                  	; 14/05/2019
 33959                                  	; MSDOS 6.0
 33960 00006357 7405                    	jz	short arena_chk_umbs
 33961                                          
 33962 00006359 E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 33963 0000635C EBE8                            JMP     SHORT arena_free_process_loop
 33964                                  
 33965                                  	; MSDOS 6.0
 33966                                  arena_chk_umbs:				; M010 - Start
 33967                                  	; 20/05/2019
 33968 0000635E 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 33969 00006362 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 33970 00006365 741E                    	je	short ret_label		; N: we're done
 33971                                  	
 33972 00006367 8CDF                    	mov	di,ds			; di = last arena
 33973 00006369 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 33974 0000636B 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 33975 0000636D EBD1                    	jmp	short arena_free_process_start
 33976                                  					; M010 - End
 33977                                  ;AFP_RETN:
 33978                                  ;	RETN
 33979                                  
 33980                                  ;	BREAK	<Arena Helper Routines>
 33981                                  
 33982                                  ;**	Arena_Next - Find Next item in Arena
 33983                                  ;----------------------------------------------------------------------------
 33984                                  ;	ENTRY	DS - pointer to block head
 33985                                  ;		(di) = 0
 33986                                  ;	EXIT	AX,ES - pointers to next head
 33987                                  ;		'C' set iff arena damaged
 33988                                  ;----------------------------------------------------------------------------
 33989                                  
 33990                                  arena_next:
 33991 0000636F 8CD8                            MOV     AX,DS                   ; AX <- current block
 33992 00006371 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 33993 00006375 40                              INC     AX                      ; remember that header!
 33994                                  
 33995                                  ;       fall into check_signature and return
 33996                                  ;
 33997                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 33998                                  ;       RETN
 33999                                  
 34000                                  ;**	Check_Signature - Check Memory Block Signature
 34001                                  ;----------------------------------------------------------------------------
 34002                                  ;	ENTRY	(AX) = address of block header
 34003                                  ;		(di) = 0
 34004                                  ;	EXIT	 ES = AX
 34005                                  ;		'C' clear if signature good
 34006                                  ;		'C' set if signature bad
 34007                                  ;	USES	ES, Flags
 34008                                  ;----------------------------------------------------------------------------
 34009                                  
 34010                                  check_signature:        
 34011                                  
 34012 00006376 8EC0                    	MOV     ES,AX                   ; ES <- AX
 34013                                  	;cmp	byte [es:di],4Dh ; 'M'
 34014 00006378 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 34015                                                                          ; IF next signature = not_end THEN
 34016 0000637C 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 34017                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 34018 0000637E 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 34019                                                                          ; IF next signature = end then
 34020 00006382 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 34021 00006384 F9                              STC                             ; set error
 34022                                  ret_label: ; MSDOS 6.0
 34023                                  AFP_RETN:
 34024                                   	; Retro DOS v2.0 - 05/03/2018
 34025                                  check_signature_ok:
 34026                                  COALESCE_RETN:
 34027 00006385 C3                      	RETN
 34028                                  
 34029                                  ;**	Coalesce - Combine free blocks ahead with current block
 34030                                  ;----------------------------------------------------------------------------
 34031                                  ;	Coalesce adds the block following the argument to the argument block,
 34032                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 34033                                  ;	some callers (such as $setblock) use it to join a free block to it's
 34034                                  ;	preceeding allocated block.
 34035                                  ;
 34036                                  ;	ENTRY	(ds) = pointer to the head of a free block
 34037                                  ;		(di) = 0
 34038                                  ;	EXIT	'C' clear if OK
 34039                                  ;		  (ds) unchanged, this block updated
 34040                                  ;		  (ax) = address of next block, IFF not at end
 34041                                  ;		'C' set if arena trashed
 34042                                  ;	USES	(cx)
 34043                                  ;----------------------------------------------------------------------------
 34044                                          
 34045                                  Coalesce:
 34046                                  	;cmp	byte [di],5Ah ; 'Z'
 34047 00006386 803D5A                  	CMP     BYTE [DI],arena_signature_end
 34048                                                                          ; IF current signature = END THEN
 34049                                          ;retz				;   GOTO ok
 34050 00006389 74FA                            jz	short COALESCE_RETN
 34051 0000638B E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 34052                                          ;retc				; IF no error THEN GOTO check
 34053 0000638E 72F5                    	jc	short COALESCE_RETN
 34054                                  
 34055                                  coalesce_check:
 34056                                  	;cmp	[es:1],di
 34057 00006390 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 34058                                          ;retnz				; IF next block isnt free THEN return
 34059 00006395 75EE                            JNZ	SHORT COALESCE_RETN
 34060                                  	;mov	cx,[ES:3]
 34061 00006397 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 34062 0000639C 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 34063                                          ;ADD	[3],CX
 34064 0000639D 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 34065 000063A1 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 34066 000063A4 880D                            MOV     [DI],CL
 34067 000063A6 EBDE                            JMP     SHORT Coalesce		; try again
 34068                                  
 34069                                  ; 04/08/2018 - Retro DOS v3.0
 34070                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 34071                                  
 34072                                  ;	BREAK  <$Alloc - allocate space in memory>
 34073                                  
 34074                                  ; MSDOS 6.0
 34075                                  ;----------------------------------------------------------------------------
 34076                                  ;**	$Alloc - Allocate Memory Space
 34077                                  ;
 34078                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 34079                                  ;	Alloc returns a pointer to a free block of memory that
 34080                                  ;	has the requested size in paragraphs.
 34081                                  ;
 34082                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 34083                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 34084                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 34085                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 34086                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 34087                                  ;
 34088                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 34089                                  ;	starts from arena_head.
 34090                                  ;
 34091                                  ;	Assembler usage:
 34092                                  ;           MOV     BX,size
 34093                                  ;           MOV     AH,Alloc
 34094                                  ;           INT     21h
 34095                                  ;
 34096                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 34097                                  ;	so that we start searching the arena at it's first non-trivial free
 34098                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 34099                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 34100                                  ;	doesn't have too many memory objects in it beyond the first free one.
 34101                                  ;	verify that this is true; if so, this can stay as is
 34102                                  ;
 34103                                  ;	ENTRY	(bx) = requested size, in bytes
 34104                                  ;		(DS) = (ES) = DOSGROUP
 34105                                  ;	EXIT	'C' clear if memory allocated
 34106                                  ;		  (ax:0) = address of requested memory
 34107                                  ;		'C' set if request failed
 34108                                  ;		  (AX) = error_not_enough_memory
 34109                                  ;		    (bx) = max size we could have allocated
 34110                                  ;		  (ax) = error_arena_trashed
 34111                                  ;	USES	All
 34112                                  ;----------------------------------------------------------------------------
 34113                                  
 34114                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34115                                  ;----------------------------------------------------------------------------
 34116                                  ;SUBTTL $Alloc - allocate space in memory
 34117                                  ;
 34118                                  ;   Assembler usage:
 34119                                  ;           MOV     BX,size
 34120                                  ;           MOV     AH,Alloc
 34121                                  ;           INT     21h
 34122                                  ;         AX:0 is pointer to allocated memory
 34123                                  ;         BX is max size if not enough memory
 34124                                  ;
 34125                                  ;   Description:
 34126                                  ;           Alloc returns  a  pointer  to  a  free  block of
 34127                                  ;       memory that has the requested  size  in  paragraphs.
 34128                                  ;
 34129                                  ;   Error return:
 34130                                  ;           AX = error_not_enough_memory
 34131                                  ;              = error_arena_trashed
 34132                                  ;----------------------------------------------------------------------------
 34133                                  
 34134                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 34135                                  
 34136                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34137                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 34138                                  
 34139                                  _$ALLOC:
 34140                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 34141                                  	; 14/05/2019 - Retro DOS v4.0
 34142                                  	; 04/08/2018 - Retro DOS v3.0
 34143                                  	;EnterCrit critMem
 34144 000063A8 E8DDAF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34145                                  
 34146                                  ; 17/12/2022
 34147                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34148                                  ;%if 0
 34149                                  	; 14/05/2019
 34150 000063AB 16                      	push	ss
 34151 000063AC 1F                      	pop	ds
 34152                                  
 34153                                  	; MSDOS 6.0
 34154                                  	;mov	ax,[ss:arena_head]
 34155                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34156                                  
 34157 000063AD A1[2400]                	mov	ax,[arena_head]
 34158 000063B0 A3[8E00]                	mov	[START_ARENA],ax			
 34159                                  	
 34160                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34161 000063B3 F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 34162                                  					; Q: should we start scanning from 
 34163                                  					;    UMB's
 34164 000063B8 740D                    	jz	short norm_alloc	; N: scan from arena_head
 34165                                  		
 34166                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34167                                  	;cmp	word [UMB_HEAD],-1
 34168                                  	;je	short norm_alloc	; N: scan from arena_head
 34169                                  
 34170                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34171 000063BA F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 34172 000063BF 7406                    	jz	short norm_alloc	; N: scan from arena_head
 34173                                  	
 34174                                  	;mov	ax,[ss:UMB_HEAD]
 34175                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34176 000063C1 A1[8C00]                	mov	ax,[UMB_HEAD]
 34177 000063C4 A3[8E00]                	mov	[START_ARENA],ax
 34178                                  					; M000 - end
 34179                                  norm_alloc:
 34180 000063C7 31C0                            XOR     AX,AX
 34181 000063C9 89C7                            MOV     DI,AX
 34182                                  	; 15/03/2018
 34183                                          ;MOV	[SS:FirstArena],AX	; init the options
 34184                                          ;MOV	[SS:BestArena],AX
 34185                                          ;MOV	[SS:LastArena],AX
 34186                                  	; 14/05/2019
 34187 000063CB A3[4003]                	MOV	[FirstArena],AX		; init the options
 34188 000063CE A3[4203]                        MOV	[BestArena],AX
 34189 000063D1 A3[4403]                        MOV	[LastArena],AX
 34190 000063D4 50                              PUSH    AX                      ; alloc_max <- 0
 34191                                  	; 04/08/2018
 34192                                  start_scan:
 34193                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34194                                  	;MOV	AX,[arena_head]
 34195                                  
 34196                                  	; 14/05/2019	
 34197                                  	; MSDOS 6.0
 34198                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34199 000063D5 A1[8E00]                	mov	ax,[START_ARENA]
 34200                                  
 34201                                  	; 27/09/2023 (BugFix) (*) 
 34202                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 34203                                  start_scan_x:
 34204                                  
 34205 000063D8 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 34206 000063DB 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 34207                                  
 34208                                  ;%endif
 34209                                  
 34210                                  ; 17/12/2022
 34211                                  %if 0
 34212                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34213                                  
 34214                                  	; MSDOS 6.0
 34215                                  	mov	ax,[ss:arena_head]
 34216                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34217                                  
 34218                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34219                                  					; Q: should we start scanning from 
 34220                                  					;    UMB's
 34221                                  	jz	short norm_alloc	; N: scan from arena_head
 34222                                  		
 34223                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34224                                  	;je	short norm_alloc	; N: scan from arena_head
 34225                                  
 34226                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34227                                  	jz	short norm_alloc	; N: scan from arena_head
 34228                                  	
 34229                                  	mov	ax,[ss:UMB_HEAD]
 34230                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34231                                  					; M000 - end
 34232                                  norm_alloc:
 34233                                          XOR     AX,AX
 34234                                          MOV     DI,AX
 34235                                  	; 15/03/2018
 34236                                  	MOV	[SS:FirstArena],AX	; init the options
 34237                                  	MOV	[SS:BestArena],AX
 34238                                  	MOV	[SS:LastArena],AX
 34239                                          PUSH    AX                      ; alloc_max <- 0
 34240                                  	; 04/08/2018
 34241                                  start_scan:
 34242                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34243                                  	; 14/05/2019	
 34244                                  	; MSDOS 6.0
 34245                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34246                                  	CALL    check_signature         ; ES <- AX, carry set if error
 34247                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 34248                                  %endif
 34249                                  
 34250                                  alloc_scan:
 34251 000063DD 06                              PUSH    ES
 34252 000063DE 1F                              POP     DS                      ; DS <- ES
 34253 000063DF 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 34254 000063E3 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 34255                                  
 34256                                  alloc_next:
 34257                                  	; MSDOS 6.0			; M000 - start 
 34258 000063E5 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34259 000063EB 741C                    	jz	short norm_strat	; N: see if we reached last arena
 34260                                  	
 34261 000063ED 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 34262                                  					; Q: is alloc strategy high_first
 34263 000063F3 7414                    	jz	short norm_strat	; N: see if we reached last arena
 34264 000063F5 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 34265 000063F9 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 34266                                  					;    arena_head
 34267 000063FE 7509                    	jne	short norm_strat	; N: see if we reached last arena
 34268 00006400 8CD8                    	mov	ax,ds			; ax = current block
 34269 00006402 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 34270 00006407 EB03                    	jmp	short alloc_chk_end
 34271                                  
 34272                                  norm_strat:
 34273                                  	;cmp	byte [di],5Ah ; 'Z'
 34274 00006409 803D5A                          CMP     BYTE [DI],arena_signature_end
 34275                                                                          ; IF current block is last THEN
 34276                                  alloc_chk_end:
 34277 0000640C 740E                            JZ      SHORT alloc_end		;   GOTO end
 34278 0000640E E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 34279 00006411 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 34280                                  
 34281                                  alloc_err:
 34282 00006413 58                              POP     AX
 34283                                  
 34284                                  alloc_trashed:
 34285                                  	;LeaveCrit critMem
 34286 00006414 E88CAF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 34287                                          ;error	error_arena_trashed
 34288                                  	;mov	al,7
 34289 00006417 B007                    	MOV	AL,error_arena_trashed
 34290                                  alloc_errj:
 34291 00006419 E971A2                  	JMP	SYS_RET_ERR
 34292                                  
 34293                                  alloc_end:
 34294                                  	; 18/05/2019
 34295 0000641C 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 34296 00006422 7403                    	jz	short alloc_chk 
 34297 00006424 E98400                  	jmp	alloc_do_split
 34298                                  
 34299                                  alloc_chk:
 34300                                  	; MSDOS 6.0
 34301 00006427 36A1[2400]              	mov	ax,[ss:arena_head]
 34302 0000642B 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 34303 00006430 740E                    	je	short alloc_fail	; Y: not enough memory
 34304                                  					; N:
 34305                                  					; Q: is the alloc strat HIGH_ONLY
 34306 00006432 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 34307 00006438 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 34308                                  	
 34309 0000643A 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 34310                                  	; 27/09/2023 (*)
 34311 0000643E EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 34312                                  	;jmp	short start_scan
 34313                                  					; M000 - end
 34314                                  
 34315                                  alloc_fail:
 34316                                          ;invoke Get_User_Stack
 34317 00006440 E887A0                          CALL	Get_User_Stack
 34318 00006443 5B                      	POP     BX
 34319                                          ;MOV	[SI].user_BX,BX
 34320                                  	;MOV	[SI+2],BX
 34321 00006444 895C02                  	mov	[SI+user_env.user_BX],bx
 34322                                  	;LeaveCrit critMem
 34323 00006447 E859AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34324                                  	;error	error_not_enough_memory
 34325                                  	;mov	al,8
 34326 0000644A B008                    	MOV	AL,error_not_enough_memory
 34327                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34328 0000644C EBCB                    	jmp	short alloc_errj
 34329                                  	;JMP	SYS_RET_ERR
 34330                                  
 34331                                  alloc_free:
 34332 0000644E E835FF                          CALL    Coalesce		; add following free block to current
 34333 00006451 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 34334 00006453 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34335 00006457 5A                              POP     DX                      ; check for max found size
 34336 00006458 39D1                            CMP     CX,DX
 34337 0000645A 7602                            JNA     SHORT alloc_test
 34338 0000645C 89CA                            MOV     DX,CX
 34339                                  
 34340                                  alloc_test:
 34341 0000645E 52                              PUSH    DX
 34342 0000645F 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 34343 00006461 7782                    	JA      SHORT alloc_next	;   GOTO next
 34344                                  
 34345                                  	; 15/03/2018
 34346 00006463 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 34347 00006469 7505                    	JNZ	SHORT alloc_best
 34348 0000646B 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 34349                                  alloc_best:
 34350 00006470 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 34351 00006476 740E                            JZ      SHORT alloc_make_best	; initial best
 34352 00006478 06                              PUSH	ES
 34353 00006479 368E06[4203]                    MOV     ES,[SS:BestArena]
 34354 0000647E 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 34355 00006483 07                              POP	ES
 34356 00006484 7605                            JBE     SHORT alloc_last
 34357                                  alloc_make_best:
 34358 00006486 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 34359                                  alloc_last:
 34360 0000648B 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 34361 00006490 E952FF                          JMP     alloc_next
 34362                                  ;
 34363                                  ; split the block high
 34364                                  ;
 34365                                  alloc_do_split_high:
 34366 00006493 368E1E[4403]                    MOV     DS,[SS:LastArena]
 34367 00006498 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34368 0000649C 29D9                            SUB     CX,BX
 34369 0000649E 8CDA                            MOV     DX,DS
 34370 000064A0 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 34371 000064A2 01CA                            ADD     DX,CX                   ; point to next block
 34372 000064A4 8EC2                            MOV     ES,DX                   ; no decrement!
 34373 000064A6 49                              DEC     CX
 34374 000064A7 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 34375 000064A9 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 34376                                  ;
 34377                                  ; we have scanned memory and have found all appropriate blocks
 34378                                  ; check for the type of allocation desired; first and best are identical
 34379                                  ; last must be split high
 34380                                  ;
 34381                                  alloc_do_split:
 34382                                  
 34383                                  ; 17/12/2022
 34384                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34385                                  ;%if 0
 34386                                  	; 14/05/2019
 34387                                  	; MSDOS 6.0			; M000 - start
 34388                                  	;xor	cx,cx
 34389 000064AB 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 34390                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34391 000064B0 80E13F                  	and	cl,3Fh
 34392                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34393 000064B3 80F901                  	cmp	cl,BEST_FIT
 34394 000064B6 77DB                    	ja	short alloc_do_split_high
 34395                                  ;%endif
 34396                                  
 34397                                  	; 17/12/2022
 34398                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34399                                  	; MSDOS 6.0 & MSDOS 5.0
 34400                                  	;xor	cx,cx
 34401                                  	;mov	cl,[ss:AllocMethod]
 34402                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34403                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34404                                  	;ja	short alloc_do_split_high
 34405                                  
 34406                                  	; 15/03/2018
 34407                                          ;;CMP	BYTE [SS:AllocMethod], 1
 34408                                  	; 04/08/2018
 34409                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 34410                                          ;JA	SHORT alloc_do_split_high
 34411                                          
 34412 000064B8 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 34413 000064BD 7205                    	JB      SHORT alloc_get_size
 34414 000064BF 368E1E[4203]            	MOV     DS,[SS:BestArena]
 34415                                  
 34416                                  alloc_get_size:
 34417 000064C4 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34418 000064C8 29D9                            SUB     CX,BX                   ; get room left over
 34419 000064CA 8CD8                            MOV     AX,DS
 34420 000064CC 89C2                            MOV     DX,AX                   ; save for owner setting
 34421 000064CE 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 34422 000064D0 01D8                            ADD     AX,BX
 34423 000064D2 40                              INC     AX                      ; remember the header
 34424 000064D3 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 34425 000064D5 49                              DEC     CX                      ; CX <- size of split block
 34426                                  alloc_set_sizes:
 34427 000064D6 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 34428 000064DA 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 34429                                  	;mov	bl,4Dh ; 'M'
 34430 000064DF B34D                            MOV     BL,arena_signature_normal
 34431 000064E1 861D                            XCHG    BL,[DI]			; current signature <- 4D
 34432 000064E3 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 34433 000064E6 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34434                                  
 34435                                  alloc_set_owner:
 34436 000064EB 8EDA                            MOV     DS,DX
 34437 000064ED 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 34438 000064F1 A30100                          MOV     [ARENA.OWNER],AX
 34439 000064F4 8CD8                            MOV     AX,DS
 34440 000064F6 40                              INC     AX
 34441 000064F7 5B                              POP     BX
 34442                                  	;LeaveCrit critMem
 34443 000064F8 E8A8AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34444                                  	
 34445                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34446                                  alloc_ok:
 34447                                          ;transfer SYS_RET_OK
 34448 000064FB E986A1                  	JMP	SYS_RET_OK
 34449                                  
 34450                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 34451                                  
 34452                                  ; MSDOS 6.0
 34453                                  ;----------------------------------------------------------------------------
 34454                                  ;**	$SETBLOCK - Change size of an Allocated Block
 34455                                  ;
 34456                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 34457                                  ;	any following free space onto this block; then we try to trim the
 34458                                  ;	block down to the size requested.
 34459                                  ;
 34460                                  ;	Note that if the guy wants to grow the block but that growth fails,
 34461                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 34462                                  ;	Thus the maximum-size-possible value that we return has already
 34463                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 34464                                  ;
 34465                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 34466                                  ;		finish it's work. For this reason we build the allocsf
 34467                                  ;		structure on the frame, to make us compatible with $ALLOCs
 34468                                  ;		code.
 34469                                  ;
 34470                                  ;	ENTRY	(es) = segment of old block
 34471                                  ;		(bx) = newsize
 34472                                  ;		(ah) = SETBLOCK
 34473                                  ;
 34474                                  ;	EXIT	'C' clear if OK
 34475                                  ;		'C' set if error
 34476                                  ;		  (ax) = error_invalid_block
 34477                                  ;		       = error_arena_trashed
 34478                                  ;		       = error_not_enough_memory
 34479                                  ;		       = error_invalid_function
 34480                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 34481                                  ;	USES	???? BUGBUG
 34482                                  ;----------------------------------------------------------------------------
 34483                                  
 34484                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34485                                  ;----------------------------------------------------------------------------
 34486                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 34487                                  ;
 34488                                  ;   Assembler usage:
 34489                                  ;           MOV     ES,block
 34490                                  ;           MOV     BX,newsize
 34491                                  ;           MOV     AH,setblock
 34492                                  ;           INT     21h
 34493                                  ;         if setblock fails for growing, BX will have the maximum
 34494                                  ;         size possible
 34495                                  ;   Error return:
 34496                                  ;           AX = error_invalid_block
 34497                                  ;              = error_arena_trashed
 34498                                  ;              = error_not_enough_memory
 34499                                  ;              = error_invalid_function
 34500                                  ;----------------------------------------------------------------------------
 34501                                  
 34502                                  _$SETBLOCK:        
 34503                                  	; 04/08/2018 - Retro DOS v3.0
 34504                                  	;EnterCrit   critMem
 34505 000064FE E887AE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34506                                  
 34507 00006501 BF0000                  	MOV     DI,ARENA.SIGNATURE
 34508 00006504 8CC0                            MOV     AX,ES
 34509 00006506 48                              DEC     AX
 34510 00006507 E86CFE                          CALL    check_signature
 34511 0000650A 7303                            JNC     SHORT setblock_grab
 34512                                  
 34513                                  setblock_bad:
 34514 0000650C E905FF                          JMP     alloc_trashed
 34515                                  
 34516                                  setblock_grab:
 34517 0000650F 8ED8                            MOV     DS,AX
 34518 00006511 E872FE                          CALL    Coalesce
 34519 00006514 72F6                            JC      SHORT setblock_bad
 34520 00006516 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34521 0000651A 51                              PUSH    CX
 34522 0000651B 39CB                            CMP     BX,CX
 34523 0000651D 76A5                            JBE     SHORT alloc_get_size
 34524 0000651F E91EFF                          JMP     alloc_fail
 34525                                  
 34526                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 34527                                  
 34528                                  ; MSDOS 6.0
 34529                                  ;----------------------------------------------------------------------------
 34530                                  ;**	$DEALLOC - Free Heap Memory
 34531                                  ;
 34532                                  ;	ENTRY	(es) = address of item
 34533                                  ;
 34534                                  ;	EXIT	'C' clear of OK
 34535                                  ;		'C' set if error
 34536                                  ;		  (AX) = error_invalid_block
 34537                                  ;	USES	???? BUGBUG
 34538                                  
 34539                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34540                                  ;----------------------------------------------------------------------------
 34541                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 34542                                  ;
 34543                                  ;   Assembler usage:
 34544                                  ;           MOV     ES,block
 34545                                  ;           MOV     AH,dealloc
 34546                                  ;           INT     21h
 34547                                  ;
 34548                                  ;   Error return:
 34549                                  ;           AX = error_invalid_block
 34550                                  ;              = error_arena_trashed
 34551                                  ;---------------------------------------------------------------------------- 
 34552                                  
 34553                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34554                                  _$DEALLOC:
 34555                                  	; 14/05/2019 - Retro DOS v4.0    
 34556                                  	; 04/08/2018 - Retro DOS v3.0
 34557                                  	;EnterCrit   critMem
 34558 00006522 E863AE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34559                                  
 34560                                  	; MSDOS 6.0			; M016, M068 - Start
 34561 00006525 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 34562                                  					; Q: was the previous call an int 21
 34563                                  					;    exec call
 34564 0000652B 740E                    	jz	short deallocate	; N: continue
 34565 0000652D 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 34566 00006533 7506                    	jne	short deallocate	; N: continue
 34567 00006535 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 34568                                  deallocate:				; M016, M068 - End
 34569 0000653B BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 34570 0000653E 8CC0                            MOV     AX,ES
 34571 00006540 48                              DEC     AX
 34572 00006541 E832FE                          CALL    check_signature
 34573 00006544 720A                            JC      SHORT dealloc_err
 34574 00006546 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34575                                  	;LeaveCrit critMem
 34576 0000654B E855AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34577                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34578                                          ;transfer SYS_RET_OK
 34579                                  dealloc_ok:
 34580 0000654E EBAB                    	jmp	short alloc_ok
 34581                                  	;JMP	SYS_RET_OK
 34582                                  
 34583                                  dealloc_err:
 34584                                  	;LeaveCrit critMem
 34585 00006550 E850AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34586                                          ;error	error_invalid_block
 34587                                  	;mov	al,9
 34588 00006553 B009                    	MOV	AL,error_invalid_block
 34589                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34590                                  dealloc_errj:
 34591                                  AllocOperErrj:	; 17/12/2022
 34592 00006555 E935A1                  	JMP	SYS_RET_ERR
 34593                                  
 34594                                  ;	BREAK $AllocOper - get/set allocation mechanism
 34595                                  
 34596                                  ; MSDOS 6.0
 34597                                  ;----------------------------------------------------------------------------
 34598                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 34599                                  ;
 34600                                  ;	Assembler usage:
 34601                                  ;           MOV     AH,AllocOper
 34602                                  ;           MOV     BX,method
 34603                                  ;           MOV     AL,func
 34604                                  ;           INT     21h
 34605                                  ;
 34606                                  ;	ENTRY	
 34607                                  ;		(al) = 0
 34608                                  ;		  Get allocation Strategy in (ax)
 34609                                  ;
 34610                                  ;		(al) = 1, (bx) = method = zw0000xy
 34611                                  ;		  Set allocation strategy.
 34612                                  ;		   w  = 1  => HIGH_ONLY
 34613                                  ;		   z  = 1  => HIGH_FIRST
 34614                                  ;		   xy = 00 => FIRST_FIT
 34615                                  ;		      = 01 => BEST_FIT
 34616                                  ;		      = 10 => LAST_FIT
 34617                                  ;
 34618                                  ;		(al) = 2
 34619                                  ;		  Get UMB link state in (al)
 34620                                  ;
 34621                                  ;		(al) = 3
 34622                                  ;		  Set UMB link state
 34623                                  ;		   (bx) = 0 => Unlink UMBs
 34624                                  ;		   (bx) = 1 => Link UMBs
 34625                                  ;
 34626                                  ;
 34627                                  ;	EXIT	'C' clear if OK
 34628                                  ;
 34629                                  ;		 if (al) = 0
 34630                                  ;		  (ax) = existing method
 34631                                  ;		 if (al) = 1
 34632                                  ;		  Sets allocation strategy
 34633                                  ;		 if (al) = 2
 34634                                  ;		  (al) = 0 => UMBs not linked
 34635                                  ;		  (al) = 1 => UMBs linked in
 34636                                  ;		 if (al) = 3
 34637                                  ;		  Links/Unlinks the UMBs into DOS chain
 34638                                  ;
 34639                                  ;		'C' set if error
 34640                                  ;		  AX = error_invalid_function
 34641                                  ;
 34642                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 34643                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 34644                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 34645                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 34646                                  ;		    arena' if an arena sig is damaged.
 34647                                  ;----------------------------------------------------------------------------
 34648                                  
 34649                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34650                                  ;----------------------------------------------------------------------------
 34651                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 34652                                  ;
 34653                                  ;   Assembler usage:
 34654                                  ;           MOV     AH,AllocOper
 34655                                  ;           MOV     BX,method
 34656                                  ;           MOV     AL,func
 34657                                  ;           INT     21h
 34658                                  ;
 34659                                  ;   Error return:
 34660                                  ;           AX = error_invalid_function
 34661                                  ;----------------------------------------------------------------------------
 34662                                  
 34663                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34664                                  _$ALLOCOPER:
 34665                                  	; 14/05/2019 - Retro DOS v4.0
 34666                                  	; MSDOS 6.0
 34667 00006558 08C0                    	or	al,al ; 0
 34668 0000655A 741E                    	jz	short AllocGetStrat
 34669                                  	; 17/12/2022
 34670                                  	;cmp	al,1
 34671                                  	;jz	short AllocSetStrat
 34672                                  
 34673                                  	; 01/12/2022
 34674                                  	;cmp	al, 2
 34675                                  	;jb	short AllocSetStrat
 34676                                  	;ja	short AllocSetLink
 34677                                  	;;jmp	short AllocGetLink
 34678                                  ;AllocGetLink:
 34679                                  	; MSDOS 6.0
 34680                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 34681                                  	;and 	al,LINKSTATE		
 34682                                  	;;transfer SYS_RET_OK
 34683                                  	;jmp	SYS_RET_OK
 34684                                  
 34685 0000655C 3C02                    	cmp	al,2
 34686                                  	; 17/12/2022
 34687 0000655E 7223                    	jb	short AllocSetStrat ; al = 1
 34688 00006560 7432                    	je	short AllocGetLink
 34689                                  
 34690                                  	;cmp	al,2
 34691                                  	;jz	short AllocGetLink
 34692 00006562 3C03                    	cmp	al,3
 34693 00006564 7436                    	jz	short AllocSetLink
 34694                                  
 34695                                  	; 15/04/2018
 34696                                  	;CMP	AL,1
 34697                                          ;JB	SHORT AllocOperGet
 34698                                          ;JZ	SHORT AllocOperSet
 34699                                  
 34700                                  AllocOperError:
 34701                                  	; 04/08/2018 - Retro DOS v3.0
 34702                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 34703                                  	;mov	byte [ss:EXTERR_LOCUS],5
 34704 00006566 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34705                                  	;error	error_invalid_function
 34706                                  	;mov	al,1
 34707 0000656C B001                    	MOV	AL,error_invalid_function
 34708                                  	; 17/12/2022
 34709                                  ;AllocOperErrj:
 34710                                  	;JMP	SYS_RET_ERR
 34711                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34712                                  	;jmp	short dealloc_errj
 34713                                  	; 17/12/2022
 34714 0000656E EBE5                    	jmp	short AllocOperErrj
 34715                                  
 34716                                  AllocArenaError:
 34717                                  	; MSDOS 6.0
 34718 00006570 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34719                                  					; M009: Extended Error Locus
 34720                                  	;error	error_arena_trashed	; M009:
 34721                                  	;mov	al,7
 34722 00006576 B007                    	MOV	AL,error_arena_trashed
 34723                                  	;JMP	SYS_RET_ERR
 34724 00006578 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 34725                                  
 34726                                  AllocGetStrat: 
 34727                                  	; MSDOS 6.0
 34728                                  AllocOperGet:
 34729 0000657A 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 34730 0000657E 30E4                            XOR     AH,AH
 34731                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34732                                  	;transfer SYS_RET_OK
 34733                                  AllocOperOk:
 34734                                  	; 17/12/2022
 34735                                  	;jmp	short dealloc_ok
 34736 00006580 E901A1                  	JMP	SYS_RET_OK
 34737                                  
 34738                                  AllocSetStrat: 
 34739                                  	; 14/05/2019
 34740                                  	; MSDOS 6.0
 34741 00006583 53                      	push	bx			; M000 - start
 34742                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34743                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 34744                                  	; 17/12/2022
 34745 00006584 80E33F                  	and	bl,3Fh
 34746 00006587 83FB02                  	cmp	bx,2			; BX must be 0-2
 34747                                  	;cmp	bl,2
 34748 0000658A 5B                      	pop	bx			; M000 - end
 34749 0000658B 77D9                    	ja	short AllocOperError
 34750                                  
 34751                                  AllocOperSet:
 34752 0000658D 36881E[0203]                    MOV     [SS:AllocMethod],BL
 34753                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34754                                  	;transfer SYS_RET_OK
 34755                                  AllocOperOkj:
 34756 00006592 EBEC                    	jmp	short AllocOperOk
 34757                                  	;JMP	SYS_RET_OK
 34758                                  
 34759                                  AllocGetLink:
 34760                                  	; MSDOS 6.0
 34761 00006594 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 34762                                  	;and	al,1
 34763 00006598 2401                    	and 	al,LINKSTATE		
 34764                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34765                                  	;transfer SYS_RET_OK
 34766                                  AllocOperOkj2:
 34767                                  	; 17/12/2022
 34768 0000659A EBE4                    	jmp	short AllocOperOk
 34769                                  	;jmp	short AllocOperOkj
 34770                                  	;;JMP	SYS_RET_OK
 34771                                  
 34772                                  AllocSetLink:
 34773                                  	; MSDOS 6.0			; M009 - start
 34774 0000659C 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 34775 000065A1 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 34776 000065A4 74C0                    	je	short AllocOperError	; N: error
 34777                                  					; Y: continue
 34778                                  					; M009 - end
 34779 000065A6 83FB01                  	cmp	bx,1			
 34780 000065A9 7204                    	jb	short UnlinkUmbs
 34781 000065AB 741C                    	jz	short LinkUmbs
 34782                                  	
 34783 000065AD EBB7                    	jmp	short AllocOperError
 34784                                  	
 34785                                  UnlinkUmbs:
 34786                                  	;test	byte [ss:UMBFLAG],1
 34787 000065AF 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 34788 000065B5 7410                    	jz	short unlinked		; Y: return 
 34789                                  	
 34790 000065B7 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 34791 000065BA 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 34792                                  	
 34793                                  					; make it last
 34794 000065BC C60600005A              	mov	byte [0],arena_signature_end
 34795                                  	
 34796                                  	;and	byte [ss:UMBFLAG],0FEh
 34797 000065C1 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 34798                                  	
 34799                                  unlinked:
 34800                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34801                                  	;transfer SYS_RET_OK
 34802                                  	; 17/12/2022
 34803 000065C7 EBB7                    	jmp	short AllocOperOk
 34804                                  	;jmp	short AllocOperOkj2
 34805                                  	;;JMP	SYS_RET_OK
 34806                                  
 34807                                  LinkUmbs:
 34808 000065C9 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 34809 000065CF 7510                    	jnz	short linked		; Y: return
 34810                                  	
 34811 000065D1 E80F00                  	call	GetLastArena		; get arena before umb_head
 34812 000065D4 729A                    	jc	short AllocArenaError	; M009: arena trashed
 34813                                  	
 34814                                  					; make it normal. M061: ds points to
 34815                                  					; arena before umb_head
 34816 000065D6 C60600004D              	mov	byte [0],arena_signature_normal
 34817                                  	
 34818 000065DB 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 34819                                  linked:
 34820                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34821                                  	;transfer SYS_RET_OK
 34822                                  	; 17/12/2022
 34823 000065E1 EB9D                    	jmp	short AllocOperOk
 34824                                  	;jmp	short unlinked
 34825                                  	;;JMP	SYS_RET_OK
 34826                                  
 34827                                  ; MSDOS 6.0
 34828                                  ;--------------------------------------------------------------------------
 34829                                  ; Procedure Name : GetLastArena		-  M003
 34830                                  ;
 34831                                  ; Inputs	 : cx = umb_head
 34832                                  ;
 34833                                  ;
 34834                                  ; Outputs	 : If UMBs are linked
 34835                                  ;			ES = umb_head
 34836                                  ;			DS = arena before umb_head
 34837                                  ;		   else
 34838                                  ;			DS = last arena
 34839                                  ;			ES = next arena. will be umb_head if NC.
 34840                                  ;
 34841                                  ;		   CY if error
 34842                                  ;
 34843                                  ; Uses		 : DS, ES, DI, BX
 34844                                  ;--------------------------------------------------------------------------
 34845                                  
 34846                                  ; 14/05/2019 - Retro DOS v4.0
 34847                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 34848                                  
 34849                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34850                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 34851                                  	
 34852                                  GetLastArena:
 34853 000065E3 50                      	push	ax			; save ax
 34854                                  
 34855 000065E4 36A1[2400]              	mov	ax,[ss:arena_head]
 34856 000065E8 8EC0                    	mov	es,ax			; es = arena_head
 34857 000065EA 31FF                    	xor	di,di
 34858                                  
 34859 000065EC 26803D5A                	cmp     byte [es:di],arena_signature_end
 34860                                  					; Q: is this the last arena
 34861 000065F0 7419                    	je	short GLA_done		; Y: return last arena in ES		
 34862                                  					
 34863                                  GLA_next:
 34864 000065F2 8ED8                    	mov	ds,ax
 34865 000065F4 E878FD                  	call	arena_next		; ax, es -> next arena
 34866                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34867                                  	;jc	short GLA_err
 34868                                  	; 17/12/2022
 34869 000065F7 7228                    	jc	short GLA_err2
 34870                                  
 34871 000065F9 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 34872 000065FF 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 34873                                  					;    umb_head
 34874                                  					; N: terminating condition is 05Ah
 34875                                  
 34876 00006601 26803D5A                	cmp     byte [es:di],arena_signature_end
 34877                                  					; Q: is this the last arena
 34878 00006605 EB02                    	jmp	short GLA_@f
 34879                                  GLA_chkumb:
 34880 00006607 39C8                    	cmp	ax,cx			; Q: is this umb_head
 34881                                  GLA_@f:
 34882 00006609 75E7                    	jne	short GLA_next		; N: get next arena
 34883                                  
 34884                                  GLA_done:
 34885                                  					; M061 - Start
 34886 0000660B 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 34887 00006611 750B                    	jnz	short GLA_ret		; Y: we're done
 34888                                  					; N: let us confirm that the next 
 34889                                  					;    arena is umb_head
 34890 00006613 8ED8                    	mov	ds,ax
 34891 00006615 E857FD                  	call	arena_next		; ax, es -> next arena
 34892                                  	;jc	short GLA_err
 34893 00006618 7207                    	jc	short GLA_err2
 34894 0000661A 39C8                    	cmp	ax,cx			; Q: is this umb_head
 34895 0000661C 7502                    	jne	short GLA_err		; N: error
 34896                                  					; M061 - End
 34897                                  GLA_ret:
 34898                                  	; 17/12/2022				
 34899                                  	;clc
 34900                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34901                                  	;clc
 34902 0000661E 58                      	pop	ax			; M061
 34903 0000661F C3                      	retn				; M061
 34904                                  
 34905                                  GLA_err:
 34906 00006620 F9                      	stc				; M061
 34907                                  GLA_err2:
 34908 00006621 58                      	pop	ax
 34909 00006622 C3                      	retn
 34910                                  
 34911                                  ;============================================================================
 34912                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 34913                                  ;============================================================================
 34914                                  ; 04/08/2018 - Retro DOS v3.0
 34915                                  
 34916                                  ;	TITLE SRVCALL - Server DOS call
 34917                                  ;	NAME  SRVCALL
 34918                                  
 34919                                  ;**	SRVCALL.ASM - Server DOS call functions
 34920                                  ;
 34921                                  ;
 34922                                  ;	$ServerCall
 34923                                  ;
 34924                                  ;	Modification history:
 34925                                  ;
 34926                                  ;	    Created: ARR 08 August 1983
 34927                                  
 34928                                  ;AsmVars <Installed>
 34929                                  
 34930                                  ;include dpl.asm
 34931                                  
 34932                                  ;Installed = TRUE
 34933                                  
 34934                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 34935                                  ; ---------------------------------------------------------------------------
 34936                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34937                                  
 34938                                  ;BREAK <ServerCall -- Server DOS call>
 34939                                  
 34940                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 34941                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 34942                                  
 34943                                  ;hkn; TABLE	SEGMENT
 34944                                  ;Public SRVC001S,SRVC001E
 34945                                  ;SRVC001S label byte
 34946                                  
 34947                                  SRVC001S:
 34948                                  
 34949 00006623 [2766]                  SERVERTAB:	dw	SERVER_DISP
 34950 00006625 [7966]                  SERVERLEAVE:	dw	SERVERRETURN
 34951 00006627 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 34952 00006628 [E166]                  		dw	SRV_CALL	; 0
 34953 0000662A [7A66]                  		dw	COMMIT_ALL	; 1
 34954 0000662C [B066]                  		dw	CLOSE_NAME	; 2
 34955 0000662E [BB66]                  		dw	CLOSE_UID	; 3
 34956 00006630 [C266]                  		dw	CLOSE_UID_PID	; 4
 34957 00006632 [C966]                  		dw	GET_LIST	; 5
 34958 00006634 [2267]                  		dw	GET_DOS_DATA	; 6
 34959 00006636 [4667]                  		dw	SPOOL_OPER	; 7
 34960 00006638 [4667]                  		dw	SPOOL_OPER	; 8
 34961 0000663A [4667]                  		dw	SPOOL_OPER	; 9
 34962 0000663C [5267]                  		dw	_$SetExtendedError  ; 10
 34963                                  
 34964                                  SERVER_DISP_END:  ;  LABEL BYTE
 34965                                  
 34966                                  ;SRVC001E label byte
 34967                                  
 34968                                  SRVC001E:
 34969                                  
 34970                                  ;hkn; TABLE	ENDS
 34971                                  
 34972                                  ;----------------------------------------------------------------------------
 34973                                  ;
 34974                                  ; Procedure Name : $ServerCall
 34975                                  ;
 34976                                  ; Inputs:
 34977                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 34978                                  ; Function:
 34979                                  ;	AL=0	Server DOS call
 34980                                  ;	AL=1	Commit All files
 34981                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 34982                                  ;	AL=3	Close all files for DPL_UID
 34983                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 34984                                  ;	AL=5	Get open file list entry
 34985                                  ;		    IN: BX File Index
 34986                                  ;			CX User Index
 34987                                  ;		    OUT:ES:DI -> Name
 34988                                  ;			BX = UID
 34989                                  ;		    CX = # locked blocks held by this UID
 34990                                  ;	AL=6	Get DOS data area
 34991                                  ;		    OUT: DS:SI -> Start
 34992                                  ;			CX size in bytes of swap if indos
 34993                                  ;			DX size in bytes of swap always
 34994                                  ;	AL=7	Get truncate flag
 34995                                  ;	AL=8	Set truncate flag
 34996                                  ;	AL=9	Close all spool files
 34997                                  ;	AL=10	SetExtendedError
 34998                                  ;
 34999                                  ;----------------------------------------------------------------------------
 35000                                  
 35001                                  _$ServerCall:
 35002                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35003                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 35004                                  	; 10/06/2019
 35005                                  	; 29/04/2019 - Retro DOS v4.0
 35006                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 35007                                  
 35008                                  	; 05/08/2018 - Retro DOS v3.0
 35009                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 35010 0000663E 3C07                    	CMP	AL,7
 35011 00006640 7204                    	JB	short SET_STUFF
 35012 00006642 3C09                    	CMP	AL,9
 35013 00006644 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 35014                                  SET_STUFF:
 35015 00006646 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 35016                                  	;mov	bx,[si+12h]
 35017 00006648 8B5C12                  	MOV	BX,[SI+DPL.UID]
 35018                                  
 35019                                  	; MSDOS 6.0
 35020                                  ;SR;
 35021                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 35022                                  ; of USER_ID
 35023                                  
 35024 0000664B 36F606[3010]01          	test	byte [SS:IsWin386],1
 35025 00006651 7505                    	jnz	short skip_win386
 35026                                  
 35027                                  ;hkn; SS override for user_id and proc_id
 35028                                  	; 15/08/2018
 35029 00006653 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 35030                                  
 35031                                  skip_win386:
 35032 00006658 8B5C14                  	MOV	BX,[SI+DPL.PID]
 35033 0000665B 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 35034                                  NO_SET_ID:
 35035                                  	; 10/06/2019 - Retro DOS v4.0
 35036 00006660 2EFF36[2566]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 35037 00006665 2EFF36[2366]            	PUSH	word [cS:SERVERTAB]	; push table address
 35038 0000666A 50                      	PUSH	AX
 35039 0000666B E82AAC                  	call	TableDispatch
 35040                                  
 35041                                  ;hkn; SS override
 35042                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 35043 0000666E 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35044                                  	;error	error_invalid_function
 35045                                  	;mov	al,1
 35046 00006674 B001                    	MOV	AL,error_invalid_function
 35047                                  servercall_error:
 35048 00006676 E914A0                  	JMP	SYS_RET_ERR
 35049                                  
 35050                                  SERVERRETURN:
 35051 00006679 C3                      	retn
 35052                                  
 35053                                  ; Commit - iterate through the open file list and make sure that the
 35054                                  ; directory entries are correctly updated.
 35055                                  
 35056                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35057                                  COMMIT_ALL:
 35058 0000667A 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 35059 0000667C 16                      	push	ss
 35060 0000667D 1F                      	pop	ds
 35061 0000667E E807AD                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 35062                                  CommitLoop:
 35063 00006681 53                      	push	bx
 35064 00006682 E82401                  	call	SFFromSFN
 35065 00006685 7222                    	JC	short CommitDone
 35066 00006687 26833D00                	cmp	word [es:di],0
 35067                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 35068                                  					; if (ThisSFT->refcount != 0)
 35069 0000668B 7418                    	JZ	short CommitNext
 35070                                  	;cmp	word [es:di],0FFFFh ; -1
 35071 0000668D 26833DFF                	cmp	word [ES:DI],sf_busy
 35072                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 35073                                  					; BUSY SFTs have god knows what
 35074 00006691 7412                    	JZ	short CommitNext	;   in them.
 35075                                  	; 17/12/2022
 35076 00006693 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 35077                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 35078 00006698 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 35079                                  					;	doesn't deadlock
 35080 0000669A 893E[9E05]              	MOV	[THISSFT],DI
 35081 0000669E 8C06[A005]              	MOV	[THISSFT+2],ES
 35082 000066A2 E876CA                  	call	DOS_COMMIT		;	DOSCommit ();
 35083                                  CommitNext:
 35084 000066A5 5B                      	pop	bx
 35085 000066A6 43                      	INC	BX
 35086 000066A7 EBD8                    	JMP	short CommitLoop
 35087                                  CommitDone:
 35088 000066A9 E8F7AC                  	call	LCritSFT
 35089 000066AC 5B                      	pop	bx
 35090                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35091                                  Commit_Ok:
 35092 000066AD E9D49F                  	jmp	SYS_RET_OK
 35093                                  	
 35094                                  
 35095                                  CLOSE_NAME:
 35096                                  
 35097                                  ;if installed
 35098                                  
 35099                                  ;hkn; SS override
 35100                                  	;call	far [ss:MFTcloN]
 35101 000066B0 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 35102                                  ;else
 35103                                  ;	Call	MFTcloN
 35104                                  ;endif
 35105                                  
 35106                                  CheckReturns:
 35107 000066B5 7202                    	JC	short func_err
 35108                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35109                                  	;transfer SYS_RET_OK
 35110                                  Commit_Okj:
 35111 000066B7 EBF4                    	jmp	short Commit_Ok
 35112                                  	;jmp	SYS_RET_OK
 35113                                  
 35114                                  func_err:
 35115                                  	;transfer SYS_RET_ERR
 35116                                  	;jmp	SYS_RET_ERR
 35117 000066B9 EBBB                    	jmp	short servercall_error
 35118                                  
 35119                                  CLOSE_UID:
 35120                                  
 35121                                  ;if installed
 35122                                  ;hkn; SS override
 35123                                  	;call	far [ss:MFTclU]
 35124 000066BB 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 35125                                  ;else
 35126                                  ;	Call	MFTclU
 35127                                  ;endif
 35128 000066C0 EBF3                    	JMP	short CheckReturns
 35129                                  
 35130                                  CLOSE_UID_PID:
 35131                                  
 35132                                  ;if installed
 35133                                  ;hkn; SS override
 35134                                  	;call	far [ss:MFTCloseP]
 35135 000066C2 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 35136                                  ;else
 35137                                  ;	Call	MFTCloseP
 35138                                  ;endif
 35139 000066C7 EBEC                    	JMP	short CheckReturns
 35140                                  
 35141                                  GET_LIST:
 35142                                  
 35143                                  ;if installed
 35144                                  ;hkn; SS override
 35145                                  	;call	far [ss:MFT_get]
 35146 000066C9 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 35147                                  ;else
 35148                                  ;	Call	MFT_get
 35149                                  ;endif
 35150 000066CE 72E9                    	JC	short func_err
 35151 000066D0 E8F79D                  	call	Get_User_Stack
 35152                                  	;mov	[si+2],bx
 35153 000066D3 895C02                  	MOV	[SI+user_env.user_BX],BX
 35154                                  	;mov	[si+10],di
 35155 000066D6 897C0A                  	MOV	[SI+user_env.user_DI],DI
 35156                                  	;mov	[si+16],es
 35157 000066D9 8C4410                  	MOV	[SI+user_env.user_ES],ES
 35158                                  SetCXOK:
 35159                                  	;mov	[si+4],cx
 35160 000066DC 894C04                  	MOV	[SI+user_env.user_CX],CX
 35161                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35162                                  	;transfer SYS_RET_OK
 35163                                  Commit_Okj2:
 35164                                  	; 17/12/2022
 35165 000066DF EBCC                    	jmp	short Commit_Ok
 35166                                  	;jmp	short Commit_Okj
 35167                                  	;;jmp	SYS_RET_OK
 35168                                  
 35169                                  SRV_CALL:
 35170 000066E1 58                      	POP	AX			; get rid of call to $srvcall
 35171 000066E2 1E                      	push	ds
 35172 000066E3 56                      	push	si
 35173 000066E4 E8E39D                  	call	Get_User_Stack
 35174 000066E7 5F                      	pop	di
 35175 000066E8 07                      	pop	es
 35176                                  
 35177                                  ; DS:SI point to stack
 35178                                  ; ES:DI point to DPL
 35179                                  
 35180 000066E9 E88BAB                  	call	XCHGP
 35181                                  
 35182                                  ; DS:SI point to DPL
 35183                                  ; ES:DI point to stack
 35184                                  ;
 35185                                  ; We now copy the registers from DPL to save stack
 35186                                  
 35187 000066EC 56                      	push	si
 35188 000066ED B90600                  	MOV	CX,6
 35189 000066F0 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 35190 000066F2 47                      	INC	DI
 35191 000066F3 47                      	INC	DI			; Skip user_BP
 35192 000066F4 A5                      	MOVSW				; DS
 35193 000066F5 A5                      	MOVSW				; ES
 35194 000066F6 5E                      	pop	si			; DS:SI -> DPL
 35195 000066F7 8B04                    	mov	ax,[SI]
 35196                                  	;MOV	AX,[SI+DPL.AX]
 35197                                  	;mov	bx,[si+2]
 35198 000066F9 8B5C02                  	MOV	BX,[SI+DPL.BX]
 35199                                  	;mov	cx,[si+4]
 35200 000066FC 8B4C04                  	MOV	CX,[SI+DPL.CX]
 35201                                  	;mov	dx,[si+6]
 35202 000066FF 8B5406                  	MOV	DX,[SI+DPL.DX]
 35203                                  	;mov	di,[si+10]
 35204 00006702 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 35205                                  	;mov	es,[si+14]
 35206 00006705 8E440E                  	MOV	ES,[SI+DPL.ES]
 35207                                  	;push	word [si+8]
 35208 00006708 FF7408                  	PUSH	word [SI+DPL.SI]
 35209                                  	;mov	ds,[si+12]
 35210 0000670B 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 35211 0000670E 5E                      	POP	SI
 35212                                  
 35213                                  ;hkn; SS override for next 3
 35214 0000670F 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 35215 00006714 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 35216 00006719 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 35217 0000671F E9A59C                  	jmp	REDISP
 35218                                  
 35219                                  GET_DOS_DATA:
 35220 00006722 16                      	push	ss
 35221 00006723 07                      	pop	es
 35222 00006724 BF[2003]                	MOV     DI,SWAP_START
 35223 00006727 B9[AC0A]                	MOV     CX,SWAP_END
 35224 0000672A BA[3A03]                	MOV     DX,SWAP_ALWAYS
 35225 0000672D 29F9                    	SUB     CX,DI
 35226 0000672F 29FA                    	SUB     DX,DI
 35227 00006731 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 35228 00006733 83D100                  	ADC     CX,0                    ; div by 2 + round up
 35229 00006736 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 35230 00006738 E88F9D                  	call	Get_User_Stack
 35231                                  	;mov	[si+14],es
 35232 0000673B 8C440E                  	MOV     [SI+user_env.user_DS],ES
 35233                                  	;mov	[si+8],di
 35234 0000673E 897C08                  	MOV     [SI+user_env.user_SI],DI
 35235                                  	;mov	[si+6],dx
 35236 00006741 895406                  	MOV     [SI+user_env.user_DX],DX
 35237 00006744 EB96                    	JMP	short SetCXOK
 35238                                  
 35239                                  SPOOL_OPER:
 35240                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 35241                                  
 35242 00006746 50                      	push    ax
 35243 00006747 B82511                  	mov     ax,1125h
 35244 0000674A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 35245                                  			; STACK: WORD subfunction
 35246                                  			; Return: CF set on error, AX = error code
 35247                                  			; STACK unchanged
 35248 0000674C 5B                      	pop	bx
 35249                                  	; 17/12/2022
 35250                                  	;JC	short func_err2
 35251 0000674D 7390                    	jnc	short Commit_Okj2
 35252                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35253                                  	;;jmp	SYS_RET_OK
 35254                                  	;jmp	short Commit_Okj2
 35255                                  	
 35256                                  func_err2:
 35257 0000674F E93B9F                  	jmp	SYS_RET_ERR
 35258                                  
 35259                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 35260                                  ;--------------------------------------------------------------------------
 35261                                  ;
 35262                                  ; Procedure Name : $SetExtendedError
 35263                                  ;
 35264                                  ; $SetExtendedError takes extended error information and loads it up for the
 35265                                  ; next extended error call.  This is used by interrupt-level proccessors to
 35266                                  ; mask their actions.
 35267                                  ;
 35268                                  ;   Inputs: DS:SI points to DPL which contains all registers
 35269                                  ;   Outputs: none
 35270                                  ;
 35271                                  ;---------------------------------------------------------------------------
 35272                                  
 35273                                  _$SetExtendedError:
 35274                                  
 35275                                  ;hkn; SS override for all variables used
 35276                                  
 35277 00006752 8B04                    	mov	ax,[si]
 35278                                  	;MOV	AX,[SI+DPL.AX]
 35279 00006754 36A3[2403]              	MOV	[SS:EXTERR],AX
 35280                                  	;mov	ax,[si+10]
 35281 00006758 8B440A                  	MOV	AX,[SI+DPL.DI]
 35282 0000675B 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 35283                                  	;mov	ax,[si+14]
 35284 0000675F 8B440E                  	MOV	AX,[SI+DPL.ES]
 35285 00006762 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 35286                                  	;mov	ax,[si+2]
 35287 00006766 8B4402                  	MOV	AX,[SI+DPL.BX]
 35288 00006769 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 35289                                  	;mov	ax,[si+4]
 35290 0000676D 8B4404                  	MOV	AX,[SI+DPL.CX]
 35291 00006770 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 35292 00006775 C3                      	retn
 35293                                  
 35294                                  ;============================================================================
 35295                                  ; UTIL.ASM, MSDOS 6.0, 1991
 35296                                  ;============================================================================
 35297                                  ; 05/08/2018 - Retro DOS v3.0
 35298                                  ; 05/05/2019 - Retro DOS v4.0
 35299                                  
 35300                                  ;**	Handle related utilities for MSDOS 2.X.
 35301                                  ;----------------------------------------------------------------------------
 35302                                  ;	pJFNFromHandle	written
 35303                                  ;	SFFromHandle	written
 35304                                  ;	SFFromSFN	written
 35305                                  ;	JFNFree 	written
 35306                                  ;	SFNFree 	written
 35307                                  ;
 35308                                  ;	Modification history:
 35309                                  ;
 35310                                  ;	    Created: MZ 1 April 1983
 35311                                  ;----------------------------------------------------------------------------
 35312                                  
 35313                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 35314                                  
 35315                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 35316                                  ;----------------------------------------------------------------------------
 35317                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 35318                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 35319                                  ;
 35320                                  ;	NOTE:
 35321                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35322                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 35323                                  ;
 35324                                  ;	ENTRY	(bx) = handle
 35325                                  ;	EXIT	'C' clear if ok
 35326                                  ;		  (es:di) = address of JFN value
 35327                                  ;		'C' set if error
 35328                                  ;		  (ax) = error code
 35329                                  ;	USES	AX, DI, ES, Flags
 35330                                  ;----------------------------------------------------------------------------
 35331                                  
 35332                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35333                                  
 35334                                  pJFNFromHandle:
 35335                                  	; 05/05/2019 - Retro DOS v4.0
 35336                                  	;getdseg <es>			; es -> dosdata
 35337 00006776 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35338                                  	
 35339                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 35340 0000677B 268E06[3003]            	mov	es,[es:CurrentPDB]
 35341                                  
 35342                                  	;cmp	bx,[ES:32h]
 35343 00006780 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 35344 00006785 7204                    	JB	short pjfn10		; no, get offset
 35345                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 35346                                  	;mov	al,6
 35347 00006787 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 35348                                  ReturnCarry:
 35349 00006789 F9                      	STC                             ; signal error
 35350 0000678A C3                      	retn				; go back
 35351                                  pjfn10: 
 35352                                  	;les	di,[es:34h]
 35353 0000678B 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 35354 00006790 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 35355                                  	;clc
 35356                                  pJFNFromHandle_error:
 35357 00006792 C3                      	retn
 35358                                  
 35359                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 35360                                  ;----------------------------------------------------------------------------
 35361                                  ;
 35362                                  ; Procedure Name : SFFromHandle
 35363                                  ;
 35364                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 35365                                  ;
 35366                                  ;   Input:      BX has handle
 35367                                  ;   Output:     Carry Set
 35368                                  ;                   AX has error code
 35369                                  ;               Carry Reset
 35370                                  ;                   ES:DI has pointer to SF entry
 35371                                  ;   Registers modified: If error, AX,ES, else ES:DI
 35372                                  ; NOTE:
 35373                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35374                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35375                                  ;
 35376                                  ;----------------------------------------------------------------------------
 35377                                  
 35378                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35379                                  
 35380                                  SFFromHandle:
 35381 00006793 E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 35382                                  	;retc				; return if error
 35383 00006796 72FA                    	jc	short pJFNFromHandle_error
 35384 00006798 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 35385                                  	;JNZ	short GetSF		; nope, suck out SF
 35386                                  	;;mov	al,6
 35387                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35388                                  	;jmp	short ReturnCarry	; signal it
 35389                                  	; 17/12/2022
 35390                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35391 0000679C 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 35392                                  	;JNZ	short GetSF		; nope, suck out SF
 35393                                  	;;mov	al,6
 35394                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35395                                  	;jmp	short ReturnCarry	; signal it
 35396                                  GetSF:
 35397 0000679E 53                      	push	bx			; save handle
 35398 0000679F 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 35399 000067A2 30FF                    	XOR     BH,BH                   ; ignore upper half
 35400 000067A4 E80200                  	CALL    SFFromSFN               ; get real sf spot
 35401 000067A7 5B                      	pop	bx			; restore
 35402 000067A8 C3                      	retn                        	; say goodbye
 35403                                  
 35404                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 35405                                  
 35406                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 35407                                  ;----------------------------------------------------------------------------
 35408                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 35409                                  ;	is more than just a simple index instruction because the SF table
 35410                                  ;	can be made up of multiple pieces chained together. We follow the
 35411                                  ;	chain to the right piece and then do the index operation.
 35412                                  ;
 35413                                  ;   NOTE:
 35414                                  ;	This routine is called from SFFromHandle which is called
 35415                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35416                                  ;
 35417                                  ;	ENTRY	BX has SF index
 35418                                  ;	EXIT	'C' clear if OK
 35419                                  ;		  ES:DI points to SF entry
 35420                                  ;		'C' set if index too large
 35421                                  ;	USES	BX, DI, ES
 35422                                  ;----------------------------------------------------------------------------
 35423                                  
 35424                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35425                                  
 35426                                  SFFromSFN:
 35427                                  	; 05/05/2019 - Retro DOS v4.0
 35428                                  	;getdseg <es>			; es -> dosdata
 35429 000067A9 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35430                                  
 35431                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 35432 000067AE 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 35433                                  sfsfn5:	
 35434                                  	;cmp	bx,[es:di+4]
 35435 000067B3 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 35436 000067B7 720E                    	JB	short sfsfn7		; yes, go grab it
 35437                                  	;sub	bx,[es:di+4]
 35438 000067B9 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 35439 000067BD 26C43D                  	les	di,[es:di] ; 14/08/2018
 35440                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 35441 000067C0 83FFFF                  	CMP     DI,-1                   ; end of tables?
 35442 000067C3 75EE                    	JNZ	short sfsfn5		; no, try again
 35443 000067C5 F9                      	STC
 35444 000067C6 C3                      	retn				; return with error, not found
 35445                                  sfsfn7:
 35446 000067C7 50                      	push	ax
 35447                                  	;mov	ax,53 ; MSDOS 3.3
 35448                                  	;mov	ax,59 ; MSDOS 6.0
 35449                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 35450                                  	
 35451                                  	; 17/12/2022
 35452 000067C8 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 35453                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35454                                  	;mov	ax,SF_ENTRY.size ; 59
 35455                                  	
 35456 000067CA F6E3                    	MUL	BL			; (ax) = offset into this SF block
 35457 000067CC 01C7                    	ADD	DI,AX			; add base of SF block
 35458 000067CE 58                      	pop	ax
 35459                                  	;add	di,6
 35460 000067CF 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 35461 000067D2 C3                      	retn				; return with 'C' clear
 35462                                  
 35463                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 35464                                  
 35465                                  ;**	JFNFree - Find a Free JFN Slot
 35466                                  ;----------------------------------------------------------------------------
 35467                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 35468                                  ;
 35469                                  ;	ENTRY	(ss) = DOSDATA
 35470                                  ;	EXIT	'C' clear if OK
 35471                                  ;		  (bx) = new handle
 35472                                  ;		  (es:di) = pointer to JFN slot
 35473                                  ;		'C' set if error
 35474                                  ;		  (al) = error code
 35475                                  ;	USES	bx, di, es, flags
 35476                                  ;----------------------------------------------------------------------------
 35477                                  
 35478                                  JFNFree:
 35479 000067D3 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 35480                                  jfnf1:	
 35481 000067D5 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 35482 000067D8 7209                    	JC	short jfnf5		; no more handles
 35483 000067DA 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 35484 000067DE 7405                    	je	short jfnfx		; yes, carry is clear
 35485 000067E0 43                      	INC     BX                      ; no, next handle
 35486 000067E1 EBF2                    	JMP	short jfnf1		; and try again
 35487                                  
 35488                                  	; Error. 'C' set
 35489                                  jfnf5:	
 35490                                  	;mov	al,4
 35491 000067E3 B004                    	MOV	AL,error_too_many_open_files
 35492                                  jfnfx:	
 35493 000067E5 C3                      	retn				; bye
 35494                                  
 35495                                  ;	BREAK <SFNFree - Allocate a free SFN>
 35496                                  
 35497                                  ;**	SFNFree - Allocate a Free SFN/SFT
 35498                                  ;----------------------------------------------------------------------------
 35499                                  ;	SFNFree scans through the sf table looking for a free entry
 35500                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 35501                                  ;
 35502                                  ;	The problem is that we want to mark the SFT busy so that other threads
 35503                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 35504                                  ;	we can't just mark it busy because we may get blown out of our open
 35505                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 35506                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 35507                                  ;	an SFT with this value we look to see if it belongs to this user
 35508                                  ;	and process.  If it does belong to us then it must be an orphan
 35509                                  ;	and we reclaim it.
 35510                                  ;
 35511                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 35512                                  ;		over and over, but we could at least set a high water mark...
 35513                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 35514                                  ;		even though this is not a frequently called routine - jgl
 35515                                  ;
 35516                                  ;	ENTRY	(ss) = DOSDATA
 35517                                  ;	EXIT	'C' clear if no error
 35518                                  ;		  (bx) = SFN
 35519                                  ;		  (es:di) = pointer to SFT
 35520                                  ;		  es:[di].SFT_REF_COUNT = -1
 35521                                  ;		'C' set if error
 35522                                  ;		  (al) = error code
 35523                                  ;	USES	bx, di, es, Flags
 35524                                  ;----------------------------------------------------------------------------
 35525                                  
 35526                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35527                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 35528                                  
 35529                                  SFNFree:
 35530                                  	; 12/08/2018
 35531                                  	; 05/08/2018 - Retro DOS v3.0
 35532                                  	;
 35533                                  	; MSDOS 6.0
 35534 000067E6 50                      	push	ax
 35535 000067E7 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 35536                                  sfnf5:	
 35537 000067E9 53                      	push	bx
 35538 000067EA E8BCFF                  	call	SFFromSFN		; get the potential handle
 35539 000067ED 5B                      	pop	bx
 35540 000067EE 723A                    	jc	short sfnf95		; no more free SFNs
 35541 000067F0 26833D00                	cmp	word [ES:DI],0
 35542                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 35543 000067F4 741D                    	je	short sfnf20			; yep, got one
 35544                                  	
 35545                                  	;cmp	word [es:di],0FFFFh ; -1
 35546 000067F6 26833DFF                	cmp	word [ES:DI],sf_busy
 35547                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35548 000067FA 7403                    	je	short sfnf10		; special busy mark
 35549                                  sfnf7:	
 35550 000067FC 43                      	inc	bx			; try the next one
 35551 000067FD EBEA                    	jmp	short sfnf5
 35552                                  
 35553                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 35554                                  ;	it was abandoned during a earlier call and we can use it.
 35555                                  ;
 35556                                  ;	(bx)	= SFN
 35557                                  ;	(es:di) = pointer to SFT
 35558                                  ;	(TOS)	= caller's (ax)
 35559                                  
 35560                                  sfnf10:	
 35561 000067FF 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35562                                  	;cmp	[es:di+2Fh],ax
 35563 00006803 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 35564 00006807 75F3                    	jnz	short sfnf7		; not ours
 35565 00006809 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35566                                  	;cmp	[es:di+31h],ax
 35567 0000680D 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 35568 00006811 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 35569                                  
 35570                                  ;	We have an SFT to allocate
 35571                                  ;
 35572                                  ;	(bx)	= SFN
 35573                                  ;	(es:di) = pointer to SFT
 35574                                  ;	(TOS)	= caller's (ax)
 35575                                  
 35576                                  sfnf20:
 35577                                  	; cf = 0 ;; Retro DOS v3.0
 35578                                  
 35579                                  	;mov	word [es:di],0FFFFh
 35580 00006813 26C705FFFF              	mov	word [ES:DI],sf_busy
 35581                                  					; make sure that this is allocated
 35582                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35583                                  
 35584 00006818 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35585                                  	;mov	[es:di+2Fh],ax
 35586 0000681C 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 35587 00006820 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35588                                  	;mov	[es:di+31h],ax
 35589 00006824 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 35590                                  sfnf21: ;; Retro DOS v3.0
 35591                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35592                                  	;pop	ax
 35593                                  	;;clc
 35594                                  	;retn				; return with no error
 35595                                  	; 17/12/2022
 35596 00006828 58                      	pop	ax
 35597                                  	;clc
 35598 00006829 C3                      	retn
 35599                                  
 35600                                  ;**	Error - no more free SFNs
 35601                                  ;
 35602                                  ;	'C' set
 35603                                  ;	(TOS) = saved ax
 35604                                  
 35605                                  sfnf95: 
 35606 0000682A 58                      	pop	ax
 35607                                  	;mov	al,4
 35608 0000682B B004                    	mov	al,error_too_many_open_files
 35609 0000682D C3                      	retn				; return with 'C' and error
 35610                                  
 35611                                  ;============================================================================
 35612                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 35613                                  ;============================================================================
 35614                                  ; 13/07/2018 - Retro DOS v3.0
 35615                                  ; 20/05/2019 - Retro DOS v4.0
 35616                                  
 35617                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 35618                                  
 35619                                  ;	BREAK <$Close - return a handle to the system>
 35620                                  ;----------------------------------------------------------------------------
 35621                                  ;
 35622                                  ;**	$Close - Close a file Handle
 35623                                  ;
 35624                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 35625                                  ;		path
 35626                                  ;
 35627                                  ;	Assembler usage:
 35628                                  ;	    MOV     BX, handle
 35629                                  ;	    MOV     AH, Close
 35630                                  ;	    INT     int_command
 35631                                  ;
 35632                                  ;	ENTRY	(bx) = handle
 35633                                  ;	EXIT	<normal INT21 return convention>
 35634                                  ;	USES	all
 35635                                  ;
 35636                                  ;----------------------------------------------------------------------------
 35637                                  
 35638                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35639                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 35640                                  
 35641                                  _$CLOSE:
 35642                                  ;	Grab the SFT pointer from the JFN.
 35643                                  
 35644 0000682E E85A02                  	call	CheckOwner		; get system file entry
 35645 00006831 722B                    	jc	short CloseError	; error return
 35646 00006833 16                      	push	ss
 35647 00006834 1F                      	pop	ds			; For DOS_CLOSE
 35648 00006835 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35649 00006839 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35650                                  
 35651                                  ; DS:SI point to JFN table entry.
 35652                                  ; ES:DI point to SFT
 35653                                  ;
 35654                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 35655                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 35656                                  ; If the file was not a net FCB, we free the JFN too.
 35657                                  
 35658                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 35659 0000683D 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 35660 00006841 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 35661                                  	;mov	al,[ES:DI+2]
 35662 00006843 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 35663                                  	;and	al,0F0h
 35664 00006847 24F0                    	AND	AL,SHARING_MASK
 35665                                  	;cmp	al,70h
 35666 00006849 3C70                    	CMP	AL,SHARING_NET_FCB
 35667 0000684B 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 35668                                  
 35669                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 35670                                  ; -1.
 35671                                  
 35672                                  FreeJFN:
 35673 0000684D E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 35674 00006850 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 35675                                  PostFree:
 35676                                  
 35677                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 35678                                  
 35679 00006854 E86FC7                  	call	DOS_CLOSE
 35680                                  
 35681                                  ; DOS_Close may return an error. If we see such an error, we report it but
 35682                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 35683                                  
 35684 00006857 7205                    	JC	short CloseError
 35685                                  	;mov	ah,3Eh
 35686 00006859 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 35687                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35688                                  CloseOk:
 35689 0000685B E9269E                  	jmp	SYS_RET_OK
 35690                                  CloseError:
 35691 0000685E E92C9E                  	jmp	SYS_RET_ERR
 35692                                  
 35693                                  ;	BREAK <$Commit - commit the file>
 35694                                  ;----------------------------------------------------------------------------
 35695                                  ;
 35696                                  ;**	$Commit - Commit a File
 35697                                  ;
 35698                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 35699                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 35700                                  ;	the directory entry, etc., so this commit is pretty useless. check
 35701                                  ;	and fix this!! jgl
 35702                                  ;
 35703                                  ;	Assembler usage:
 35704                                  ;	    MOV     BX, handle
 35705                                  ;	    MOV     AH, Commit
 35706                                  ;	    INT     int_command
 35707                                  ;
 35708                                  ;	ENTRY	(bx) = handle
 35709                                  ;	EXIT	none
 35710                                  ;	USES	all
 35711                                  ;;----------------------------------------------------------------------------
 35712                                  
 35713                                  _$COMMIT:
 35714                                  ;	Grab the SFT pointer from the JFN.
 35715                                  
 35716 00006861 E82702                  	call	CheckOwner		; get system file entry
 35717 00006864 7213                    	JC	short CommitError	; error return
 35718 00006866 16                      	push	ss
 35719 00006867 1F                      	pop	ds			; For DOS_COMMIT
 35720 00006868 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35721 0000686C 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35722                                  
 35723                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 35724                                  ;
 35725                                  ;	ES:DI point to SFT
 35726                                  
 35727 00006870 E8A8C8                  	call	DOS_COMMIT
 35728 00006873 7204                    	JC	short CommitError
 35729                                  	; 07/12/2022
 35730                                  	;jc	short CloseError
 35731                                  	;mov	ah,68h
 35732 00006875 B468                    	MOV	AH,COMMIT
 35733                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35734                                  	;jmp	SYS_RET_OK
 35735                                  CommitOk:
 35736 00006877 EBE2                    	jmp	short CloseOk	
 35737                                  
 35738                                  CommitError:
 35739                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35740                                  	;jmp	SYS_RET_ERR
 35741 00006879 EBE3                    	jmp	short CloseError
 35742                                  
 35743                                  ;	BREAK <$ExtHandle - extend handle count>
 35744                                  
 35745                                  ;**	$ExtHandle - Extend Handle Count
 35746                                  ;----------------------------------------------------------------------------
 35747                                  ;	Assembler usage:
 35748                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 35749                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 35750                                  ;	    INT     int_command 		 busy )
 35751                                  ;
 35752                                  ;	ENTRY	(bx) = new number of handles
 35753                                  ;	EXIT	'C' clear if OK
 35754                                  ;		'C' set iff err
 35755                                  ;		  (ax) = error code
 35756                                  ;			 AX = error_not_enough_memory
 35757                                  ;			      error_too_many_open_files
 35758                                  ;	USES	all
 35759                                  ;----------------------------------------------------------------------------
 35760                                  
 35761                                  _$ExtHandle:
 35762 0000687B 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 35763                                  	;cmp	bx,20
 35764 0000687D 83FB14                  	CMP	BX,FILPERPROC
 35765 00006880 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 35766 00006882 BB1400                  	MOV	BX,FILPERPROC
 35767                                  exth2:	
 35768 00006885 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 35769                                  	;mov	cx,[ES:32h]
 35770 0000688A 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 35771 0000688F 39CB                    	CMP	BX,CX			; the requested == current
 35772 00006891 7455                    	JE	short ok_done 		; yes and exit
 35773 00006893 7722                    	JA	short larger		; go allocate new table
 35774                                  
 35775                                  ;	We're going to shrink the # of handles available
 35776                                  
 35777 00006895 BD0100                  	MOV	BP,1			; shrink
 35778                                  	;mov	ds,[ES:36h]
 35779 00006898 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 35780 0000689D 89DE                    	MOV	SI,BX			;
 35781 0000689F 29D9                    	SUB	CX,BX			; get difference
 35782                                  
 35783                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 35784                                  chck_handles:
 35785 000068A1 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 35786 000068A4 753D                    	JNZ	short too_many_files	; status
 35787 000068A6 46                      	INC	SI
 35788 000068A7 E2F8                    	LOOP	chck_handles
 35789 000068A9 83FB14                  	CMP	BX,FILPERPROC		; = 20
 35790 000068AC 7709                    	JA	short larger		; no
 35791                                  
 35792 000068AE BD0200                  	MOV	BP,2			; psp
 35793                                  	;mov	di,24
 35794 000068B1 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 35795 000068B4 53                      	PUSH	BX
 35796 000068B5 EB1D                    	JMP	short movhandl
 35797                                  
 35798                                  larger:
 35799 000068B7 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 35800 000068BA 747F                    	JZ	short invalid_func	; 10/08/2018
 35801 000068BC F8                      	CLC
 35802 000068BD 53                      	PUSH	BX			; save requested number
 35803 000068BE 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 35804 000068C1 B104                    	MOV	CL,4
 35805                                  	;ror	bx,cl			; MSDOS 3.3
 35806 000068C3 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 35807 000068C5 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 35808                                  
 35809 000068C9 55                      	PUSH	BP
 35810 000068CA E8DBFA                  	call	_$ALLOC			; allocate memory
 35811 000068CD 5D                      	POP	BP
 35812 000068CE 7266                    	JC	short no_memory		; not enough meory
 35813                                  
 35814 000068D0 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 35815 000068D2 31FF                    	XOR	DI,DI
 35816                                  movhandl:
 35817 000068D4 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 35818                                  
 35819 000068D9 F7C50300                	test	BP,3			; enlarge ?
 35820 000068DD 740C                    	JZ	short enlarge 		; yes
 35821 000068DF 59                      	POP	CX			; cx = the amount you shrink
 35822 000068E0 51                      	PUSH	CX
 35823 000068E1 EB0C                    	JMP	short copy_hand
 35824                                  
 35825                                  ;	Done.  'C' clear
 35826                                  
 35827                                  ; 17/12/2022
 35828                                  ;ok_done:
 35829                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35830                                  ;	;jmp	short CommitOk
 35831                                  ;	; 17/12/2022
 35832                                  ;	jmp	SYS_RET_OK
 35833                                  
 35834                                  too_many_files:
 35835                                  	;mov	al,4
 35836 000068E3 B004                    	MOV	AL,error_too_many_open_files
 35837                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35838                                  	;jmp	SYS_RET_ERR
 35839                                  CommitErrorj:
 35840                                  	;jmp	short CommitError
 35841                                  	; 17/12/2022
 35842 000068E5 E9A59D                  	jmp	SYS_RET_ERR
 35843                                  
 35844                                  ; 17/12/2022 
 35845                                  ok_done:
 35846                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35847                                  	;jmp	short CommitOk
 35848                                  	; 17/12/2022
 35849 000068E8 E9999D                  	jmp	SYS_RET_OK
 35850                                  
 35851                                  enlarge:
 35852                                  	;mov	cx,[32h]
 35853 000068EB 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 35854                                  copy_hand:
 35855 000068EF 89CA                    	MOV	DX,CX
 35856                                  	;lds	si,[34h]
 35857 000068F1 C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 35858 000068F5 F3A4                    	REP	MOVSB			; copy infomation to new table
 35859 000068F7 59                      	POP	CX			; get new number of handles
 35860 000068F8 51                      	PUSH	CX			; save it again
 35861 000068F9 29D1                    	SUB	CX,DX			; get the difference
 35862 000068FB B0FF                    	MOV	AL,-1			; set availability to handles
 35863 000068FD F3AA                    	REP	STOSB
 35864 000068FF 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 35865                                  	;cmp	word [34h],0
 35866 00006904 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 35867 00006909 750D                    	JNZ	short update_info	; yes, go update PDB entries
 35868 0000690B 55                      	PUSH	BP
 35869 0000690C 1E                      	PUSH	DS			; save old table segment
 35870 0000690D 06                      	PUSH	ES			; save new table segment
 35871 0000690E 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 35872 00006912 E80DFC                  	call	_$DEALLOC		; deallocate old table meomory
 35873 00006915 07                      	POP	ES			; restore new table segment
 35874 00006916 1F                      	POP	DS			; restore old table segment
 35875 00006917 5D                      	POP	BP
 35876                                  
 35877                                  update_info:
 35878 00006918 F7C50200                	test	BP,2			; psp?
 35879 0000691C 7408                    	JZ	short non_psp 		; no
 35880                                  	;mov	word [34h],18h ; 24
 35881 0000691E C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 35882 00006924 EB06                    	JMP	short final
 35883                                  non_psp:
 35884                                  	;mov	word [34h],0
 35885 00006926 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 35886                                  final:
 35887                                  	;mov	[36h],es	
 35888 0000692C 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 35889                                  	;pop	word [32h]
 35890 00006930 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 35891                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35892                                  	;jmp	SYS_RET_OK
 35893                                  ok_done_j:
 35894 00006934 EBB2                    	jmp	short ok_done
 35895                                  
 35896                                  no_memory:
 35897 00006936 5B                      	POP	BX			; clean stack
 35898                                  	;mov	al,8
 35899 00006937 B008                    	MOV	AL,error_not_enough_memory
 35900                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35901                                  	;jmp	SYS_RET_ERR
 35902                                  CommitErrorj2:
 35903 00006939 EBAA                    	jmp	short CommitErrorj
 35904                                  
 35905                                  invalid_func:
 35906                                  	;mov	al,1
 35907 0000693B B001                    	MOV	AL,error_invalid_function
 35908                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35909                                  	;jmp	SYS_RET_ERR
 35910                                  CommitErrorj3:
 35911                                  	;jmp	short CommitErrorj2
 35912                                  	; 17/12/2022
 35913 0000693D EBA6                    	jmp	short CommitErrorj
 35914                                  
 35915                                  ; 20/05/2019 - Retro DOS v4.0
 35916                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 35917                                  
 35918                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35919                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 35920                                  
 35921                                  ;	BREAK <$READ - Read from a file handle>
 35922                                  ;----------------------------------------------------------------------------
 35923                                  ;
 35924                                  ;**	$Read - Read from a File Handle
 35925                                  ;
 35926                                  ;   Assembler usage:
 35927                                  ;
 35928                                  ;	LDS	DX, buf
 35929                                  ;	MOV	CX, count
 35930                                  ;	MOV	BX, handle
 35931                                  ;	MOV	AH, Read
 35932                                  ;	INT	int_command
 35933                                  ;	  AX has number of bytes read
 35934                                  ;
 35935                                  ;	ENTRY	(bx) = file handle
 35936                                  ;		(cx) = byte count
 35937                                  ;		(ds:dx) = buffer address
 35938                                  ;	EXIT	Through system call return so that to user:
 35939                                  ;		  'C' clear if OK
 35940                                  ;		    (ax) = bytes read
 35941                                  ;		  'C' set if error
 35942                                  ;		    (ax) = error code
 35943                                  ;
 35944                                  ;----------------------------------------------------------------------------
 35945                                  
 35946                                  _$READ:
 35947 0000693F BE[8933]                	MOV	SI,DOS_READ
 35948                                  ReadDo:
 35949 00006942 E831FE                  	call	pJFNFromHandle
 35950 00006945 7208                    	JC	short ReadError
 35951                                  
 35952 00006947 268A05                  	MOV	AL,[ES:DI]
 35953 0000694A E83E01                  	call	CheckOwner		; get the handle
 35954 0000694D 7303                    	JNC	short ReadSetup		; no errors do the operation
 35955                                  
 35956                                  ;	Have an error. 'C' set
 35957                                  
 35958                                  ReadError:
 35959                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35960                                  	;;jmp	SYS_RET_ERR		; go to error traps
 35961                                  	;jmp	short CommitErrorj3
 35962                                  	; 17/12/2022
 35963 0000694F E93B9D                  	jmp	SYS_RET_ERR
 35964                                  
 35965                                  ReadSetup:
 35966 00006952 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 35967 00006957 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 35968                                  	; 20/05/2019 - Retro DOS v4.0
 35969                                  	; MSDOS 6.0 
 35970                                  ;; Extended Open
 35971                                  	;test	byte [es:di+3],20h
 35972 0000695C 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 35973                                  						 ;AN000;;EO. need i24
 35974 00006961 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 35975 00006963 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 35976                                  					;AN000;;EO. set it off;smr;SS Override
 35977                                  needi24:				;AN000;
 35978                                  ;; Extended Open
 35979 00006969 36FF36[2C03]            	push	word [SS:DMAADD]
 35980 0000696E 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 35981                                  
 35982                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 35983                                  
 35984                                  	; 26/07/2019
 35985                                  
 35986                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35987                                  	;
 35988                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 35989                                  	; there is not another caller; it is better to put the code in this proc
 35990                                   	; here instead of calling it as a subroutine; but I have modified code
 35991                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 35992                                  
 35993                                  	; MSDOS 6.0
 35994 00006973 E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 35995                                  	
 35996                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35997                                  	; MSDOS 3.3
 35998                                  	;MOV	BX,DX			; copy offset
 35999                                  	;push	cx			; don't stomp on count
 36000                                  	;MOV	CL,4			; bits to shift bytes->para
 36001                                  	;SHR	BX,CL			; get number of paragraphs
 36002                                  	;pop	cx			; get count back
 36003                                  	;MOV	AX,DS			; get original segment
 36004                                  	;ADD	AX,BX			; get new segment
 36005                                  	;MOV	DS,AX			; in seg register
 36006                                  	;AND	DX,0Fh			; normalize offset
 36007                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36008                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36009                                  						;smr;SS Override
 36010                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36011                                  	
 36012 00006976 16                      	push	ss			; go for DOS addressability
 36013 00006977 1F                      	pop	ds
 36014                                  
 36015 00006978 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 36016                                  
 36017 0000697A 8F06[2E03]              	pop	word [DMAADD+2]
 36018 0000697E 8F06[2C03]              	pop	word [DMAADD]
 36019                                  	;JNC	short READ_OK		;AN002;
 36020                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 36021                                  	; 17/12/2022
 36022 00006982 72CB                    	jc	short ReadError
 36023                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36024                                  	;jnc	short READ_OK		;AN002;
 36025                                  	;jmp	short ReadError
 36026                                  
 36027                                  READ_OK:
 36028 00006984 89C8                    	MOV	AX,CX			; get correct return in correct reg
 36029                                  Read_Okj:
 36030                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36031                                  	;;jmp	SYS_RET_OK		; successful return
 36032                                  	;jmp	short ok_done_j
 36033                                  	; 17/12/2022
 36034 00006986 E9FB9C                  	jmp	SYS_RET_OK
 36035                                  
 36036                                  ; 13/07/2018 - Retro DOS v3.0
 36037                                  
 36038                                  ;----------------------------------------------------------------------------
 36039                                  
 36040                                  ;   Input: DS:DX points to user's buffer addr
 36041                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 36042                                  ;   Output: [DMAADD] set
 36043                                  
 36044                                  ; 20/05/2019 - Retro DOS v4.0
 36045                                  ; 26/07/2019
 36046                                  ;	; MSDOS 6.0
 36047                                  ;Align_Buffer:
 36048                                  ;	MOV	BX,DX			; copy offset
 36049                                  ;	push	cx			; don't stomp on count
 36050                                  ;	MOV	CL,4			; bits to shift bytes->para
 36051                                  ;	SHR	BX,CL			; get number of paragraphs
 36052                                  ;	pop	cx			; get count back
 36053                                  ;	MOV	AX,DS			; get original segment
 36054                                  ;	ADD	AX,BX			; get new segment
 36055                                  ;	MOV	DS,AX			; in seg register
 36056                                  ;	AND	DX,0Fh			; normalize offset
 36057                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36058                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36059                                  ;						;smr;SS Override
 36060                                  ;	retn
 36061                                  
 36062                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36063                                  Align_Buffer:
 36064 00006989 89D3                    	MOV	BX,DX			; copy offset
 36065 0000698B 51                      	push	cx			; don't stomp on count
 36066 0000698C B104                    	MOV	CL,4			; bits to shift bytes->para
 36067 0000698E D3EB                    	SHR	BX,CL			; get number of paragraphs
 36068 00006990 59                      	pop	cx			; get count back
 36069 00006991 8CD8                    	MOV	AX,DS			; get original segment
 36070 00006993 01D8                    	ADD	AX,BX			; get new segment
 36071 00006995 8ED8                    	MOV	DS,AX			; in seg register
 36072 00006997 83E20F                  	AND	DX,0Fh			; normalize offset
 36073 0000699A 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36074 0000699F 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36075                                  						;smr;SS Override
 36076 000069A4 C3                      	retn
 36077                                  
 36078                                  ; 20/05/2019 - Retro DOS v4.0
 36079                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 36080                                  
 36081                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36082                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 36083                                  
 36084                                  ;BREAK <$WRITE - write to a file handle>
 36085                                  ;----------------------------------------------------------------------------
 36086                                  ;
 36087                                  ;   Assembler usage:
 36088                                  ;	    LDS     DX, buf
 36089                                  ;	    MOV     CX, count
 36090                                  ;	    MOV     BX, handle
 36091                                  ;	    MOV     AH, Write
 36092                                  ;	    INT     int_command
 36093                                  ;	  AX has number of bytes written
 36094                                  ;   Errors:
 36095                                  ;	    AX = write_invalid_handle
 36096                                  ;	       = write_access_denied
 36097                                  ;
 36098                                  ;   Returns in register AX
 36099                                  ;
 36100                                  ;----------------------------------------------------------------------------
 36101                                  
 36102                                  _$WRITE:
 36103 000069A5 BE[B235]                	MOV	SI,DOS_WRITE
 36104 000069A8 EB98                    	JMP	short ReadDo
 36105                                  
 36106                                  ;BREAK <$LSEEK - move r/w pointer>
 36107                                  ;----------------------------------------------------------------------------
 36108                                  ;
 36109                                  ;   Assembler usage:
 36110                                  ;	    MOV     DX, offsetlow
 36111                                  ;	    MOV     CX, offsethigh
 36112                                  ;	    MOV     BX, handle
 36113                                  ;	    MOV     AL, method
 36114                                  ;	    MOV     AH, LSeek
 36115                                  ;	    INT     int_command
 36116                                  ;	  DX:AX has the new location of the pointer
 36117                                  ;   Error returns:
 36118                                  ;	    AX = error_invalid_handle
 36119                                  ;	       = error_invalid_function
 36120                                  ;   Returns in registers DX:AX
 36121                                  ;
 36122                                  ;----------------------------------------------------------------------------
 36123                                  
 36124                                  ; 21/05/2019 - Retro DOS v4.0
 36125                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 36126                                  
 36127                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36128                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 36129                                  
 36130                                  _$LSEEK:
 36131 000069AA E8DE00                  	call	CheckOwner		; get system file entry
 36132                                  
 36133                                  	; 17/12/2022
 36134                                  ;LSeekError:
 36135                                  	;JNC	short CHKOWN_OK		;AN002;
 36136                                  	;JMP	short ReadError		;AN002; error return
 36137                                  	; 17/12/2022
 36138                                  	; 02/06/2019
 36139 000069AD 72A0                    	jc	short ReadError
 36140                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36141                                  	;JNC	short CHKOWN_OK		;AN002;
 36142                                  	;JMP	short ReadError		;AN002; error return
 36143                                  
 36144                                  CHKOWN_OK:
 36145                                  					;AN002;
 36146 000069AF 3C02                    	CMP	AL,2			; is the seek value correct?
 36147 000069B1 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 36148                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 36149 000069B3 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36150                                  					;smr;SS Override
 36151                                  	;mov	al,1
 36152 000069B9 B001                    	mov	al,error_invalid_function ; invalid method
 36153                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36154                                  LSeekError2:
 36155 000069BB EB92                    	jmp	short ReadError
 36156                                  
 36157                                  LSeekDisp:
 36158 000069BD 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 36159 000069BF 720A                    	JB	short LSeekStore	; just store CX:DX
 36160 000069C1 771B                    	JA	short LSeekEOF		; seek from end of file
 36161                                  	;add	dx,[es:di+21]
 36162 000069C3 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 36163                                  	;adc	cx,[es:di+23]
 36164 000069C7 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 36165                                  LSeekStore:
 36166 000069CB 89C8                    	MOV	AX,CX			; AX:DX
 36167 000069CD 92                      	XCHG	AX,DX			; DX:AX is the correct value
 36168                                  LSeekSetpos:
 36169                                  	;mov	[es:di+21],ax
 36170 000069CE 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 36171                                  	;mov	[es:di+23],dx
 36172 000069D2 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 36173 000069D6 E8F19A                  	call	Get_User_Stack
 36174                                  	;mov	[si+6],dx
 36175 000069D9 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 36176                                  	;jmp	SYS_RET_OK		; successful return
 36177                                  	; 25/06/2019
 36178                                  	;jmp	SYS_RET_OK_clc
 36179                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36180                                  	;jmp	SYS_RET_OK_clc
 36181                                  LSeekOk:
 36182 000069DC EBA8                    	jmp     short Read_Okj
 36183                                  
 36184                                  LSeekEOF:
 36185                                  	;;test	word [es:di+5],8000h
 36186                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36187                                  	; 21/05/2019 - Retro DOS v4.0
 36188 000069DE 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 36189 000069E3 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 36190                                  LOCAL_LSeek:
 36191                                  	;add	dx,[es:di+17]
 36192 000069E5 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 36193                                  	;adc	cx,[es:di+19]
 36194 000069E9 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 36195 000069ED EBDC                    	JMP	short LSeekStore	; go and set the position
 36196                                  
 36197                                  Check_LSeek_Mode:
 36198                                  	;;test	word [es:di+2],8000h
 36199                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 36200                                  	; 21/05/2019
 36201 000069EF 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 36202 000069F4 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 36203                                  	;mov	ax,[es:di+2]
 36204 000069F6 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 36205                                  	;and	ax, 0F0h
 36206 000069FA 25F000                  	AND	AX,SHARING_MASK
 36207                                  	;cmp	ax,40h
 36208 000069FD 83F840                  	CMP	AX,SHARING_DENY_NONE
 36209 00006A00 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 36210                                  	;cmp	ax,30h
 36211 00006A02 83F830                  	CMP	AX,SHARING_DENY_READ
 36212 00006A05 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 36213                                  NET_LSEEK:
 36214                                  ;	JMP	short LOCAL_LSeek
 36215                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 36216                                  	;CallInstall Net_Lseek,MultNET,33
 36217                                  	;JNC	short LSeekSetPos
 36218                                  
 36219 00006A07 B82111                  	mov     ax,1121h
 36220 00006A0A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 36221                                  			; CX:DX = offset (in bytes) from end
 36222                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 36223                                  			; SS = DOS CS
 36224                                  			; Return: CF set on error
 36225                                  			; CF clear if successful, DX:AX = new file position
 36226 00006A0C 73C0                    	jnb     short LSeekSetpos
 36227                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36228                                  	;jmp	SYS_RET_ERR
 36229                                  ;LSeekError3:
 36230                                  	; 17/12/2022
 36231                                  LSeekError:
 36232                                  	;jmp	short LSeekError2
 36233                                  DupErr:	; 17/12/2022
 36234 00006A0E E97C9C                  	jmp	SYS_RET_ERR
 36235                                  
 36236                                  ;BREAK <FileTimes - modify write times on a handle>
 36237                                  ;----------------------------------------------------------------------------
 36238                                  ;
 36239                                  ;   Assembler usage:
 36240                                  ;	    MOV AH, FileTimes (57H)
 36241                                  ;	    MOV AL, func
 36242                                  ;	    MOV BX, handle
 36243                                  ;	; if AL = 1 then then next two are mandatory
 36244                                  ;	    MOV CX, time
 36245                                  ;	    MOV DX, date
 36246                                  ;	    INT 21h
 36247                                  ;	; if AL = 0 then CX/DX has the last write time/date
 36248                                  ;	; for the handle.
 36249                                  ;
 36250                                  ;	AL=02		 get extended attributes
 36251                                  ;	   BX=handle
 36252                                  ;	   CX=size of buffer (0, return max size )
 36253                                  ;	   DS:SI query list (si=-1, selects all EA)
 36254                                  ;	   ES:DI buffer to hold EA list
 36255                                  ;
 36256                                  ;	AL=03		 get EA name list
 36257                                  ;	   BX=handle
 36258                                  ;	   CX=size of buffer (0, return max size )
 36259                                  ;	   ES:DI buffer to hold name list
 36260                                  ;
 36261                                  ;	AL=04		 set extended attributes
 36262                                  ;	   BX=handle
 36263                                  ;	   ES:DI buffer of EA list
 36264                                  ;
 36265                                  ;
 36266                                  ;   Error returns:
 36267                                  ;	    AX = error_invalid_function
 36268                                  ;	       = error_invalid_handle
 36269                                  ;
 36270                                  ;----------------------------------------------------------------------------
 36271                                  
 36272                                  ; 21/05/2019 - Retro DOS v4.0
 36273                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 36274                                  
 36275                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36276                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 36277                                  
 36278                                  _$FILE_TIMES:
 36279                                  	; 13/07/2018 - Retro DOS v3.0
 36280                                  
 36281                                  	; MSDOS 3.3
 36282                                  	;cmp	al,2			; correct subfunction ?
 36283                                  	;jb	short ft1
 36284                                  
 36285                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 36286                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36287                                  						;SS Overr
 36288                                  	;;mov	al,1
 36289                                  	;mov	al,error_invalid_function ; give bad return
 36290                                  	;jmp	SYS_RET_ERR
 36291                                  
 36292                                  	; MSDOS 6.0
 36293 00006A11 3C02                    	cmp	al,2			; correct subfunction ?
 36294 00006A13 7340                    	jae	short inval_func
 36295                                  ;ft1:
 36296 00006A15 E87300                  	call	CheckOwner		; get sft
 36297                                  	; 17/12/2022
 36298 00006A18 72F4                    	jc	short LSeekError	; bad handle
 36299                                  
 36300 00006A1A 08C0                    	or	al,al			; get time/date ?
 36301 00006A1C 7515                    	jnz	short ft_set_time
 36302                                  
 36303                                  ;------ here we get the time & date from the sft for the user
 36304                                  
 36305 00006A1E FA                      	cli				; is this cli/sti reqd ? BUGBUG
 36306                                  	;mov	cx,[es:di+13]
 36307 00006A1F 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 36308                                  	;mov	dx,[es:di+15]
 36309 00006A23 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 36310 00006A27 FB                      	sti
 36311 00006A28 E89F9A                  	call	Get_User_Stack
 36312                                  	;mov	[si+4],cx
 36313 00006A2B 894C04                  	mov	[si+user_env.user_CX],cx
 36314                                  	;mov	[si+6],dx
 36315 00006A2E 895406                  	mov	[si+user_env.user_DX],dx
 36316 00006A31 EB1F                    	jmp	short ok_ret
 36317                                  
 36318                                  ;------ here we set the time in sft
 36319                                  
 36320                                  ft_set_time:
 36321 00006A33 E852A9                  	call    ECritSFT
 36322                                  	;mov	[es:di+13],cx
 36323 00006A36 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 36324                                  	;mov	[es:di+15],dx
 36325 00006A3A 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 36326                                  
 36327 00006A3E 31C0                    	xor	ax, ax
 36328 00006A40 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 36329                                  
 36330                                  ;------ set the flags in SFT entry
 36331                                  	;and	word [es:di+5],0FFBFh
 36332                                  	; 18/12/2022
 36333                                  	;and	byte [es:di+5],0BFh
 36334 00006A45 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 36335                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 36336                                  							; mark file as dirty
 36337                                  	;or	word [es:di+5],4000h
 36338                                  	; 17/12/2022
 36339                                  	;or	byte [es:di+6],40h
 36340 00006A4A 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 36341                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 36342                                  							; ask close not to
 36343                                  							;   bother about date
 36344                                  							;   and time
 36345 00006A4F E851A9                  	call	LCritSFT
 36346                                  ok_ret:
 36347                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36348                                  	; 17/12/2022
 36349 00006A52 E92F9C                  	jmp	SYS_RET_OK
 36350                                  	;jmp	short LSeekOk
 36351                                  
 36352                                  inval_func:
 36353                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36354 00006A55 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36355                                  						;SS Overr
 36356                                  	;mov	al,1
 36357 00006A5B B001                    	mov	al,error_invalid_function ; give bad return
 36358                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36359                                  ft_error:
 36360                                  	;;jmp	SYS_RET_ERR
 36361                                  	;jmp	short LSeekError3
 36362                                  	; 17/12/2022
 36363 00006A5D EBAF                    	jmp	short LSeekError
 36364                                  
 36365                                  ; 21/05/2019 - Retro DOS v4.0
 36366                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 36367                                  
 36368                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36369                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 36370                                  
 36371                                  ;BREAK <$DUP - duplicate a jfn>
 36372                                  ;----------------------------------------------------------------------------
 36373                                  ;
 36374                                  ;   Assembler usage:
 36375                                  ;	    MOV     BX, fh
 36376                                  ;	    MOV     AH, Dup
 36377                                  ;	    INT     int_command
 36378                                  ;	  AX has the returned handle
 36379                                  ;   Errors:
 36380                                  ;	    AX = dup_invalid_handle
 36381                                  ;	       = dup_too_many_open_files
 36382                                  ;
 36383                                  ;----------------------------------------------------------------------------
 36384                                  
 36385                                  _$DUP:
 36386 00006A5F 89D8                    	MOV	AX,BX			; save away old handle in AX
 36387 00006A61 E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 36388                                  DupErrorCheck:
 36389 00006A64 72A8                    	JC	short DupErr		; nope, bye
 36390 00006A66 06                      	push	es
 36391 00006A67 57                      	push	di			; save away SFT
 36392 00006A68 5E                      	pop	si			; into convenient place DS:SI
 36393 00006A69 1F                      	pop	ds
 36394 00006A6A 93                      	XCHG	AX,BX			; get back old handle
 36395 00006A6B E81D00                  	call	CheckOwner		; get sft in ES:DI
 36396 00006A6E 729E                    	JC	short DupErr		; errors go home
 36397 00006A70 E861C0                  	call	DOS_Dup_Direct
 36398 00006A73 E800FD                  	call	pJFNFromHandle		; get pointer
 36399 00006A76 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 36400 00006A79 881C                    	MOV	[SI],BL			; stuff in new SFT
 36401                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36402                                  	;jmp	SYS_RET_OK		; and go home
 36403 00006A7B EBD5                    	jmp	short ok_ret
 36404                                  
 36405                                  	; 17/12/2022
 36406                                  ;DupErr:
 36407                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36408                                  	;;jmp	SYS_RET_ERR
 36409                                  	;jmp	short ft_error
 36410                                  
 36411                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 36412                                  ;----------------------------------------------------------------------------
 36413                                  ;
 36414                                  ;   Assembler usage:
 36415                                  ;	    MOV     BX, fh
 36416                                  ;	    MOV     CX, newfh
 36417                                  ;	    MOV     AH, Dup2
 36418                                  ;	    INT     int_command
 36419                                  ;   Error returns:
 36420                                  ;	    AX = error_invalid_handle
 36421                                  ;
 36422                                  ;----------------------------------------------------------------------------
 36423                                  
 36424                                  _$DUP2:
 36425 00006A7D 53                      	push	bx
 36426 00006A7E 51                      	push	cx			; save source
 36427 00006A7F 89CB                    	MOV	BX,CX			; get one to close
 36428 00006A81 E8AAFD                  	call	_$CLOSE			; close destination handle
 36429 00006A84 5B                      	pop	bx
 36430 00006A85 58                      	pop	ax			; old in AX, new in BX
 36431 00006A86 E8EDFC                  	call	pJFNFromHandle		; get pointer
 36432 00006A89 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 36433                                  
 36434                                  ;Break	<CheckOwner - verify ownership of handles from server>
 36435                                  ;----------------------------------------------------------------------------
 36436                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 36437                                  ;   process without the process knowing it (delete/rename of open files, for
 36438                                  ;   example), it is possible for the redirector to issue a call to a handle
 36439                                  ;   that it soes not rightfully own. We check here to make sure that the
 36440                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 36441                                  ;   SFFromHandle to really make sure that the SFT is good.
 36442                                  ;
 36443                                  ;	ENTRY	BX has the handle
 36444                                  ;		User_ID is the current user
 36445                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 36446                                  ;		Carry Set => AX has error code
 36447                                  ;	USES	none
 36448                                  ;----------------------------------------------------------------------------
 36449                                  
 36450                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36451                                  	; 21/05/2019 - Retro DOS v4.0
 36452                                  CheckOwner:
 36453                                  	; 13/07/2018 - Retro DOS v3.0
 36454                                  
 36455 00006A8B E805FD                  	call	SFFromHandle
 36456 00006A8E 721B                    	jc	short co_ret_label	; retc
 36457                                  
 36458 00006A90 50                      	push	ax
 36459                                  
 36460                                  	; MSDOS 6.0
 36461                                  
 36462                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 36463                                  ;SR; are shared across multiple VMs in win386.
 36464                                  
 36465 00006A91 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 36466 00006A97 7404                    	jz	short no_win386		;win386 is not present
 36467 00006A99 31C0                    	xor	ax,ax			;set the zero flag
 36468 00006A9B EB08                    	jmp	short _skip_win386	
 36469                                  
 36470                                  no_win386:
 36471 00006A9D 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 36472                                  	;cmp	ax,[es:di+47]
 36473 00006AA1 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 36474                                  
 36475                                  _skip_win386:
 36476 00006AA5 58                      	pop	ax
 36477                                  	
 36478                                  	; 17/12/2022
 36479 00006AA6 7403                    	jz	short co_ret_label
 36480                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36481                                  	;jnz	short CheckOwner_err
 36482                                  	;retn
 36483                                  	
 36484                                  CheckOwner_err:
 36485                                  	;mov	al,6
 36486 00006AA8 B006                    	mov	al,error_invalid_handle
 36487 00006AAA F9                      	stc
 36488                                  
 36489                                  co_ret_label:
 36490 00006AAB C3                      	retn
 36491                                  
 36492                                  ;============================================================================
 36493                                  ; MACRO.ASM, MSDOS 6.0, 1991
 36494                                  ;============================================================================
 36495                                  ; Retro	DOS v3.0 - 11/07/2018
 36496                                  ; 21/05/2019 - Retro DOS v4.0
 36497                                  
 36498                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 36499                                  ;	NAME	MACRO
 36500                                  
 36501                                  ;	Microsoft Confidential
 36502                                  ;	Copyright (C) Microsoft Corporation 1991
 36503                                  ;	All Rights Reserved.
 36504                                  
 36505                                  ;**	MACRO.ASM
 36506                                  ;
 36507                                  ;	$AssignOper
 36508                                  ;	FIND_DPB
 36509                                  ;	InitCDS
 36510                                  ;	$UserOper
 36511                                  ;	GetVisDrv
 36512                                  ;	GetThisDrv
 36513                                  ;	GetCDSFromDrv
 36514                                  ;
 36515                                  ;   Revision history:
 36516                                  ;
 36517                                  ;	Created: MZ 4 April 1983
 36518                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 36519                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 36520                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 36521                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 36522                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 36523                                  ;				    aliasing.
 36524                                  ;
 36525                                  ;   MSDOS performs several types of name translation. First, we maintain for
 36526                                  ;   each valid drive letter the text of the current directory on that drive.
 36527                                  ;   For invalid drive letters, there is no current directory so we pretend to
 36528                                  ;   be at the root. A current directory is either the raw local directory
 36529                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 36530                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 36531                                  ;
 36532                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 36533                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 36534                                  ;   this and all * are expanded into ?'s.
 36535                                  ;
 36536                                  ;   The second part of name translation involves subtree aliasing. A list of
 36537                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 36538                                  ;   the previous 'canonicalization' are then examined to see if any of the
 36539                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 36540                                  ;   replaced with the other subtree in the pair.
 36541                                  ;
 36542                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 36543                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 36544                                  ;   The output of the previous translation is examined to see if any of the
 36545                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 36546                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 36547                                  ;   'mount' one device under another.
 36548                                  ;
 36549                                  ;   The final form of name translation involves the mapping of a user's
 36550                                  ;   logical drive number into the internal physical drive. This is
 36551                                  ;   accomplished by converting the drive number into letter:CON, performing
 36552                                  ;   the above translation and then converting the character back into a drive
 36553                                  ;   number.
 36554                                  ;
 36555                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 36556                                  ;   take a path and form the real text of the pathname with all . and ..
 36557                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 36558                                  ;   TransPath.
 36559                                  ;
 36560                                  ;	A000	version 4.00  Jan. 1988
 36561                                  
 36562                                  ;Installed = TRUE
 36563                                  
 36564                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 36565                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 36566                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 36567                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 36568                                  ;					; current drive)
 36569                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 36570                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 36571                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 36572                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 36573                                  ;	I_need	MYNAME,16		; machine name
 36574                                  ;	I_need	MYNUM,WORD		; machine number
 36575                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 36576                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 36577                                  ;	I_need	DrvErr,BYTE		; drive error
 36578                                  
 36579                                  ;BREAK <$AssignOper -- Set up a Macro>
 36580                                  ;----------------------------------------------------------------------------
 36581                                  ; Inputs:
 36582                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 36583                                  ;	AL = 01 set assign mode 		    (SetMode)
 36584                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 36585                                  ;	AL = 03 Define Macro (attch start)
 36586                                  ;	    BL = Macro type
 36587                                  ;	       = 0 alias
 36588                                  ;	       = 1 file/device
 36589                                  ;	       = 2 drive
 36590                                  ;	       = 3 Char device -> network
 36591                                  ;	       = 4 File device -> network
 36592                                  ;	    DS:SI -> ASCIZ source name
 36593                                  ;	    ES:DI -> ASCIZ destination name
 36594                                  ;	AL = 04 Cancel Macro
 36595                                  ;	    DS:SI -> ASCIZ source name
 36596                                  ;	AL = 05 Modified get attach list entry
 36597                                  ;	AL = 06 Get ifsfunc item
 36598                                  ;	AL = 07 set in_use of a drive's CDS
 36599                                  ;	     DL = drive number, 0=default  0=A,,
 36600                                  ;	AL = 08 reset in_use of a drive's CDS
 36601                                  ;	     DL = drive number, 0=A, 1=B,,,
 36602                                  ; Function:
 36603                                  ;	Do macro stuff
 36604                                  ; Returns:
 36605                                  ;	Std Xenix style error return
 36606                                  ;----------------------------------------------------------------------------
 36607                                  
 36608                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36609                                  	; 21/05/2019 - Retro DOS v4.0
 36610                                  _$AssignOper:
 36611                                  	; MSDOS 6.0
 36612 00006AAC 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 36613 00006AAE 7525                    	JNZ	short chk08		      ; no			;AN000;
 36614                                  srinuse:								;AN000;
 36615 00006AB0 50                      	PUSH	AX			      ; save al 		;AN000;
 36616 00006AB1 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 36617 00006AB3 E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 36618 00006AB6 58                      	POP	AX			      ; 			;AN000;
 36619 00006AB7 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 36620                                  	;cmp	word [si+45h],0
 36621 00006AB9 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 36622 00006ABD 7410                    	JZ	short baddrv		      ;     no			;AN000;
 36623 00006ABF 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 36624 00006AC1 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 36625                                  	;or	word [si+43h],4000h
 36626                                  	; 17/12/2022
 36627                                  	;or	byte [si+44h],40h
 36628 00006AC3 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36629                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 36630 00006AC7 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 36631                                  resetdrv:
 36632                                  	;and	word [si+43h],0BFFFh									;AN000;
 36633                                  	; 18/12/2022
 36634 00006AC9 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 36635                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 36636 00006ACD EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 36637                                  
 36638                                  	; 17/12/2022
 36639                                  baddrv: 								;AN000;
 36640 00006ACF B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 36641                                  
 36642                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36643                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 36644                                  	; 17/12/2022
 36645                                  	; 21/05/2019
 36646                                  ASS_ERR:
 36647 00006AD2 E9B89B                  	jmp	SYS_RET_ERR
 36648                                  
 36649                                  chk08:									;AN000;
 36650 00006AD5 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 36651 00006AD7 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 36652                                  
 36653                                    ;IF	NOT INSTALLED
 36654                                  	;transfer NET_ASSOPER
 36655                                    ;ELSE
 36656                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36657 00006AD9 50                      	PUSH	AX
 36658                                  	;mov	ax,111Eh
 36659                                  	;MOV	AX,(MultNET SHL 8) OR 30
 36660 00006ADA B81E11                  	mov	ax,(MultNET*256)+30
 36661 00006ADD CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 36662                                  			; SS = DOS CS
 36663                                  			; STACK: WORD function to execute
 36664                                  			; Return: CF set on error, AX = error code
 36665                                  			; STACK unchanged
 36666 00006ADF 5B                      	POP	BX			; Don't zap error code in AX
 36667 00006AE0 72F0                    	JC	short ASS_ERR
 36668                                  okdone:
 36669 00006AE2 E99F9B                  	jmp	SYS_RET_OK
 36670                                  
 36671                                  	; 17/12/2022
 36672                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36673                                  ;ASS_ERR:
 36674                                  	;jmp	SYS_RET_ERR
 36675                                  
 36676                                    ;ENDIF
 36677                                  
 36678                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 36679                                  ;----------------------------------------------------------------------------
 36680                                  ;**	FIND_DPB - Find a DPB from a Drive #
 36681                                  ;
 36682                                  ;	ENTRY	AL has drive number A = 0
 36683                                  ;	EXIT	'C' set
 36684                                  ;		    No DPB for this drive number
 36685                                  ;		'C' clear
 36686                                  ;		    DS:SI points to DPB for drive
 36687                                  ;	USES	SI, DS, Flags
 36688                                  ;----------------------------------------------------------------------------
 36689                                  
 36690                                  	; 21/05/2019 - Retro DOS v4.0
 36691                                  FIND_DPB:
 36692 00006AE5 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 36693                                  fdpb5:	
 36694 00006AEA 83FEFF                  	CMP	SI,-1
 36695 00006AED 7409                    	JZ	short fdpb10
 36696 00006AEF 3A04                    	cmp	al,[si]
 36697                                  	;CMP	AL,[SI+DPB.DRIVE]
 36698 00006AF1 7406                    	jz	short ret_label15	; Carry clear (retz)
 36699                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 36700                                  	;lds	si,[si+19h] ; MSDOS 6.0
 36701 00006AF3 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 36702 00006AF6 EBF2                    	JMP	short fdpb5
 36703                                  fdpb10:	
 36704 00006AF8 F9                      	STC
 36705                                  ret_label15:
 36706 00006AF9 C3                      	retn
 36707                                  
 36708                                  ;	Break <InitCDS - set up an empty CDS>
 36709                                  ;----------------------------------------------------------------------------
 36710                                  ;**	InitCDS - Setup an Empty CDS
 36711                                  ;
 36712                                  ;	ENTRY	ThisCDS points to CDS
 36713                                  ;		AL has uppercase drive letter
 36714                                  ;	EXIT	ThisCDS is now empty
 36715                                  ;		(ES:DI) = CDS
 36716                                  ;		'C' set if no DPB associated with drive
 36717                                  ;	USES	AH,ES,DI, Flags
 36718                                  ;----------------------------------------------------------------------------
 36719                                  
 36720                                  ; 21/05/2019 - Retro DOS v4.0
 36721                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 36722                                  
 36723                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36724                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 36725                                  
 36726                                  InitCDS:
 36727                                  	; 19/08/2018
 36728                                  	; 05/08/2018 - Retro DOS v3.0
 36729                                  	; MSDOS 6.0
 36730 00006AFA 50                      	push	ax			; save (AL) for caller
 36731 00006AFB 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 36732                                  	;mov	word [es:di+67],0
 36733 00006B00 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 36734 00006B06 2C40                    	SUB	AL,"A"-1                ; A = 1
 36735 00006B08 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 36736 00006B0D 7236                    	JC	short icdsx		; Drive does not map a physical drive
 36737 00006B0F 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 36738 00006B10 50                      	PUSH	AX			; save drive number for later
 36739 00006B11 0441                    	add	al,"A"
 36740 00006B13 B43A                    	MOV	AH,':'
 36741 00006B15 268905                  	mov	[ES:DI],ax
 36742                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 36743                                  	;mov	ax,"\"
 36744                                  	;mov	[es:di+2],ax
 36745                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 36746 00006B18 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 36747                                  	;or	word [es:di+67],4000h
 36748                                  	;or	byte [es:di+68],40h
 36749 00006B1E 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36750 00006B23 29C0                    	sub	ax,ax
 36751                                  	;MOV	[es:di+73],ax ; 0
 36752 00006B25 26894549                	MOV	[ES:DI+curdir.ID],ax
 36753                                  	;mov	[es:di+75],ax ; 0
 36754 00006B29 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 36755 00006B2D B002                    	mov	al,2
 36756                                  	;mov	[es:di+79],aX ; 2
 36757 00006B2F 2689454F                	MOV	[ES:DI+curdir.end],ax
 36758 00006B33 58                      	POP	AX			; (al) = drive number
 36759 00006B34 1E                      	push	ds
 36760 00006B35 56                      	push	si
 36761 00006B36 E8ACFF                  	call	FIND_DPB
 36762 00006B39 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 36763                                  	;mov	[es:di+69],si
 36764 00006B3B 26897545                	MOV	[ES:DI+curdir.devptr],SI
 36765                                  	;mov	[es:di+71],ds
 36766 00006B3F 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 36767                                  icds5:	
 36768 00006B43 5E                      	pop	si
 36769 00006B44 1F                      	pop	ds
 36770                                  icdsx:	
 36771 00006B45 58                      	pop	ax
 36772                                  RET45:
 36773 00006B46 C3                      	retn
 36774                                  
 36775                                  ;Break <$UserOper - get/set current user ID (for net)>
 36776                                  ;----------------------------------------------------------------------------
 36777                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 36778                                  ;	maintain this string and do no verifications.
 36779                                  ;
 36780                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 36781                                  ;				      4-printer-set-flags,5-printer-get-flags)
 36782                                  ;		DS:DX is user string pointer (calls 1,2)
 36783                                  ;		ES:DI is user buffer (call 3)
 36784                                  ;		BX is assign index (calls 2,3,4,5)
 36785                                  ;		CX is user number (call 1)
 36786                                  ;		DX is flag word (call 4)
 36787                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 36788                                  ;			and user CX is set to the user number
 36789                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 36790                                  ;		If AL = 5 then DX is flag word
 36791                                  ;----------------------------------------------------------------------------
 36792                                  
 36793                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36794                                  	; 21/05/2019 - Retro DOS v4.0
 36795                                  _$UserOper:
 36796                                  	; 05/08/2018 - Retro DOS v3.0
 36797                                  	; MSDOS 6.0 (& MSDOS 3.3)
 36798 00006B47 50                      	PUSH	AX
 36799 00006B48 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 36800 00006B4A 58                      	POP	AX
 36801 00006B4B 7211                    	JB	short UserGet 		; return to user the string
 36802 00006B4D 742E                    	JZ	short UserSet 		; set the current user
 36803 00006B4F 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 36804 00006B51 763D                    	JBE	short UserPrint		; yep
 36805                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36806 00006B53 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 36807                                  					; Extended Error Locus
 36808                                  	;error	error_invalid_function	; not 0,1,2,3
 36809                                  	;mov	al,1
 36810 00006B59 B001                    	MOV	AL,error_invalid_function
 36811                                  useroper_error:
 36812                                  	; 17/12/2022
 36813                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36814 00006B5B E92F9B                  	JMP	SYS_RET_ERR
 36815                                  	;jmp	short ASS_ERR
 36816                                  
 36817                                  UserGet:
 36818                                  ; Transfer MYNAME to DS:DX
 36819                                  ; Set Return CX to MYNUM
 36820 00006B5E 1E                      	PUSH	DS			; switch registers
 36821 00006B5F 07                      	POP	ES
 36822 00006B60 89D7                    	MOV	DI,DX			; destination
 36823 00006B62 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 36824 00006B67 E86099                  	call	Get_User_Stack
 36825                                  	;mov	[si+4],cx
 36826 00006B6A 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 36827 00006B6D 16                      	push	ss			; point to DOSDATA
 36828 00006B6E 1F                      	pop	ds
 36829 00006B6F BE[0503]                	MOV	SI,MYNAME		; point source to user string
 36830                                  UserMove:
 36831 00006B72 B90F00                  	MOV	CX,15
 36832 00006B75 F3A4                    	REP	MOVSB			; blam.
 36833 00006B77 31C0                    	XOR	AX,AX			; 16th byte is 0
 36834 00006B79 AA                      	STOSB
 36835                                  UserBye:
 36836 00006B7A E9079B                  	jmp	SYS_RET_OK		; no errors here
 36837                                  
 36838                                  UserSet:
 36839                                  ; Transfer DS:DX to MYNAME
 36840                                  ; CX to MYNUM
 36841 00006B7D 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 36842 00006B82 89D6                    	MOV	SI,DX			; user space has source
 36843 00006B84 16                      	push	ss
 36844 00006B85 07                      	pop	es
 36845 00006B86 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 36846 00006B89 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 36847 00006B8E EBE2                    	JMP	short UserMove
 36848                                  
 36849                                  UserPrint:
 36850                                  
 36851                                    ;IF NOT Installed
 36852                                    ;	transfer PRINTER_GETSET_STRING
 36853                                    ;ELSE
 36854 00006B90 50                      	PUSH	AX
 36855                                  	;mov	ax,111Fh
 36856                                  	;MOV	AX,(MultNET SHL 8) OR 31
 36857 00006B91 B81F11                  	mov	ax,(MultNET<<8)|31
 36858 00006B94 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 36859                                  			; STACK: WORD function
 36860                                  			; Return: CF set on error, AX = error code
 36861                                  			; STACK unchanged
 36862 00006B96 5A                      	POP	DX			; Clean stack
 36863                                  	;JNC	short OKPA
 36864 00006B97 73E1                    	jnc	short UserBye ; 21/05/2019
 36865                                  	; 17/12/2022
 36866 00006B99 EBC0                    	jmp	short useroper_error
 36867                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36868                                  	;jnb     short OKPA
 36869                                  	;jmp     short useroper_error
 36870                                  
 36871                                  	; 17/12/2022
 36872                                  ;OKPA:
 36873                                  ;	jmp	short UserBye
 36874                                  
 36875                                    ;ENDIF
 36876                                  
 36877                                  
 36878                                  ;Break	<GetVisDrv - return visible drive>
 36879                                  ;----------------------------------------------------------------------------
 36880                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 36881                                  ;
 36882                                  ;   Inputs:	AL has drive identifier (0=default)
 36883                                  ;   Outputs:	Carry Set - invalid drive/macro
 36884                                  ;		Carry Clear - AL has physical drive (0=A)
 36885                                  ;		    ThisCDS points to CDS
 36886                                  ;   Registers modified: AL
 36887                                  ;----------------------------------------------------------------------------
 36888                                  
 36889                                  	; 21/05/2019 - Retro DOS v4.0
 36890                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 36891                                  
 36892                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36893                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 36894                                  GetVisDrv:
 36895                                  	; 05/08/2018 - Retro DOS v3.0
 36896                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 36897 00006B9B E81900                  	CALL	GETTHISDRV		; get inuse drive
 36898 00006B9E 72A6                    	jc	short RET45
 36899 00006BA0 1E                      	push	ds
 36900 00006BA1 56                      	push	si
 36901 00006BA2 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 36902                                  	;test	word [si+67],2000h
 36903                                  	; 17/12/2022
 36904                                  	;test	byte [si+68],20h
 36905 00006BA7 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 36906                                  	;TEST	word [SI+curdir.flags],curdir_splice
 36907 00006BAB 5E                      	pop	si
 36908 00006BAC 1F                      	pop	ds
 36909 00006BAD 7497                    	jz	short RET45		; if not spliced, return OK
 36910                                  	; MSDOS 6.0
 36911                                  	;mov	byte [ss:DrvErr],0Fh
 36912 00006BAF 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 36913 00006BB5 F9                      	STC				; signal error
 36914 00006BB6 C3                      	retn
 36915                                  
 36916                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 36917                                  ;----------------------------------------------------------------------------
 36918                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 36919                                  ;	macro pointer
 36920                                  ;
 36921                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 36922                                  ;   Outputs:
 36923                                  ;		Carry Set - invalid drive/macro
 36924                                  ;		Carry Clear - AL has physical drive (0=A)
 36925                                  ;		   ThisCDS points to macro
 36926                                  ;   Registers modified: AL
 36927                                  ;----------------------------------------------------------------------------
 36928                                  
 36929                                  	; 21/05/2019 - Retro DOS v4.0
 36930                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 36931                                  
 36932                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36933                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 36934                                  GETTHISDRV:
 36935                                  	; 05/08/2018
 36936                                  	; 12/07/2018 - Retro DOS v3.0
 36937                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 36938                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36939 00006BB7 08C0                    	OR	AL,AL			; are we using default drive?
 36940 00006BB9 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 36941 00006BBB 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 36942                                  	;INC	ax			; Counteract next instruction
 36943                                  	; 04/09/2018
 36944                                  	;inc	al
 36945                                  	; 07/12/2022
 36946 00006BBF 40                      	inc	ax
 36947                                  GTD10:	
 36948                                  	;DEC	AX
 36949                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36950 00006BC0 48                      	dec	ax			; 0 = A
 36951                                  	;dec	al
 36952 00006BC1 1E                      	PUSH	DS			; save world
 36953 00006BC2 56                      	PUSH	SI
 36954                                  	;mov	byte [ss:EXTERR_LOCUS],2
 36955 00006BC3 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 36956 00006BC9 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 36957 00006BCF 7420                    	JZ	SHORT GTD20		; Logical
 36958 00006BD1 50                      	PUSH	AX
 36959 00006BD2 06                      	PUSH	ES
 36960 00006BD3 57                      	PUSH	DI
 36961 00006BD4 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 36962                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 36963 00006BDB 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 36964 00006BE0 0441                    	ADD	AL,'A'
 36965 00006BE2 E815FF                  	CALL	InitCDS			; InitCDS(c);
 36966                                  	;test	word [es:di+67],4000h
 36967                                  	; 17/12/2022
 36968                                  	;test	byte [es:di+68],40h
 36969 00006BE5 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36970                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 36971 00006BEA 5F                      	POP	DI
 36972 00006BEB 07                      	POP	ES
 36973 00006BEC 58                      	POP	AX
 36974 00006BED 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 36975 00006BEF EB18                    	JMP	SHORT GTDX		; carry clear
 36976                                  GTD20:
 36977 00006BF1 E81800                  	CALL	GetCDSFromDrv
 36978 00006BF4 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 36979                                  	;test	word [si+43h],4000h
 36980                                  	; 17/12/2022
 36981                                  	;test	byte [si+44h],40h
 36982 00006BF6 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36983                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 36984 00006BFA 750D                    	JNZ	SHORT GTDX		; carry clear
 36985                                  GTD30:	
 36986                                  	; 21/05/2019
 36987                                  	; MSDOS 6.0
 36988 00006BFC B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 36989 00006BFE 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 36990                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 36991 00006C02 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 36992 00006C08 F9                      	STC
 36993                                  GTDX:	
 36994 00006C09 5E                      	POP	SI			; restore world
 36995 00006C0A 1F                      	POP	DS
 36996 00006C0B C3                      	RETN
 36997                                   
 36998                                  
 36999                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 37000                                  ;----------------------------------------------------------------------------
 37001                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 37002                                  ;	pointer, returning an error if the drive number is greater than the
 37003                                  ;	number of CDS's
 37004                                  ;
 37005                                  ;   Inputs:	AL is physical unit # A=0...
 37006                                  ;   Outputs:	Carry Set if Bad Drive
 37007                                  ;		Carry Clear
 37008                                  ;		    DS:SI -> CDS
 37009                                  ;		    [THISCDS] = DS:SI
 37010                                  ;   Registers modified: DS,SI
 37011                                  ;----------------------------------------------------------------------------
 37012                                  
 37013                                  	; 21/05/2019 - Retro DOS v4.0
 37014                                  GetCDSFromDrv:
 37015 00006C0C 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 37016 00006C11 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 37017 00006C13 F9                      	STC				; signal error
 37018 00006C14 C3                      	RETN				; bye
 37019                                  GetCDS:
 37020 00006C15 53                      	PUSH	BX
 37021 00006C16 50                      	PUSH	AX
 37022 00006C17 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 37023                                  	;mov	bl,81 ; MSDOS 3.3
 37024                                  	;mov	bl,88 ; MSDOS 6.0 
 37025 00006C1C B358                    	MOV	BL,curdir.size		; size in convenient spot
 37026 00006C1E F6E3                    	MUL	BL			; get net offset
 37027 00006C20 01C6                    	ADD	SI,AX			; convert to true pointer
 37028 00006C22 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 37029 00006C27 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 37030 00006C2C 58                      	POP	AX
 37031 00006C2D 5B                      	POP	BX
 37032 00006C2E F8                      	CLC				; no error
 37033 00006C2F C3                      	RETN				; bye!
 37034                                  
 37035                                  ;============================================================================
 37036                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 37037                                  ;============================================================================
 37038                                  ; Retro	DOS v3.0 - 12/07/2018
 37039                                  ; 22/05/2019 - Retro DOS v4.0
 37040                                  
 37041                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 37042                                  ;----------------------------------------------------------------------------
 37043                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 37044                                  ;       gritty substitution.
 37045                                  ;
 37046                                  ;   Inputs:     DS:DX - pointer to FCB
 37047                                  ;               ES:DI - point to destination
 37048                                  ;   Outputs:    Carry Set - invalid path in final map
 37049                                  ;               Carry Clear - FCB has been mapped into ES:DI
 37050                                  ;                   Sattrib is set from possibly extended FCB
 37051                                  ;                   ExtFCB set if extended FCB found
 37052                                  ;   Registers modified: most
 37053                                  ;----------------------------------------------------------------------------
 37054                                  
 37055                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37056                                  TransFCB:
 37057                                  	; 22/05/2019 - Retro DOS v4.0
 37058                                  	; 12/07/2018 - Retro DOS v3.0
 37059                                  	;LocalVar FCBTmp,16
 37060                                  	;ENTER
 37061 00006C30 55                      	push	bp
 37062 00006C31 89E5                    	mov	bp,sp
 37063                                  	;sub	sp,15	; MSDOS 3.3
 37064 00006C33 83EC10                  	sub	sp,16	; MSDOS 6.0
 37065 00006C36 16                      	push	ss
 37066 00006C37 07                      	pop	es
 37067 00006C38 06                      	push	es
 37068 00006C39 57                      	push	di
 37069                                  	;lea	di,[bp-15] ; MSDOS 3.3
 37070                                  	;LEA	DI,FCBTmp 
 37071 00006C3A 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 37072 00006C3D 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 37073 00006C43 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 37074 00006C49 E8A1B0                  	call	GetExtended             ; get FCB, extended or not
 37075                                  	; 06/12/2022
 37076 00006C4C 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 37077 00006C4E 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 37078 00006C51 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 37079 00006C55 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 37080                                  GetDrive:
 37081 00006C5B AC                      	lodsb				; get drive byte
 37082 00006C5C E858FF                  	call	GETTHISDRV
 37083 00006C5F 722A                    	jc	short BadPack
 37084 00006C61 E87403                  	call	TextFromDrive           ; convert 0-based drive to text
 37085                                  
 37086                                  ; Scan the source to see if there are any illegal chars
 37087                                  
 37088                                  	;mov	bx,CharType		; load lookup table
 37089 00006C64 B90B00                  	mov	cx,11
 37090 00006C67 56                      	push	si			; back over name, ext
 37091                                  FCBScan:
 37092 00006C68 AC                      	lodsb				; get a byte
 37093                                  	
 37094                                  	; 09/08/2018
 37095                                  	;;xlat	byte [es:bx]
 37096                                  	;es	xlat
 37097                                  
 37098                                  	; 22/05/2019 - Retro DOS v4.0	
 37099 00006C69 E81CE5                  	call	GetCharType		; get flags
 37100                                  
 37101                                  	;test	al,8	
 37102 00006C6C A808                    	test	al,FFCB
 37103 00006C6E 741B                    	jz	short BadPack
 37104                                  NextCh: 
 37105 00006C70 E2F6                    	loop	FCBScan
 37106 00006C72 5E                      	pop	si
 37107 00006C73 89FB                    	mov	bx,di
 37108 00006C75 E8CEB4                  	call	PackName                ; crunch the path
 37109 00006C78 5F                      	pop	di			; get original destination
 37110 00006C79 07                      	pop	es
 37111 00006C7A 16                      	push	ss			; get DS addressability
 37112 00006C7B 1F                      	pop	ds
 37113                                  	;lea	si,[bp-15] ; MSDOS 3.3
 37114                                  	;LEA	SI,FCBTmp		; point at new pathname
 37115 00006C7C 8D76F0                  	lea	si,[bp-16]
 37116 00006C7F 803F00                  	cmp	byte [bx],0
 37117 00006C82 7407                    	jz	short BadPack
 37118 00006C84 55                      	push	bp
 37119 00006C85 E80E00                  	call	TransPathSet            ; convert the path
 37120 00006C88 5D                      	pop	bp
 37121 00006C89 7303                    	jnc	short FCBRet		; bye with transPath error code
 37122                                  BadPack:
 37123 00006C8B F9                      	STC
 37124                                  	;mov	al,3
 37125 00006C8C B003                    	MOV     AL,error_path_not_found
 37126                                  FCBRet: 
 37127                                  	;LEAVE
 37128 00006C8E 89EC                    	mov	sp,bp
 37129 00006C90 5D                      	pop	bp
 37130                                  TransPath_retn:
 37131 00006C91 C3                      	retn
 37132                                  
 37133                                  ; 12/07/2018 - Retro DOS v3.0
 37134                                  
 37135                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 37136                                  ;----------------------------------------------------------------------------
 37137                                  ;
 37138                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 37139                                  ;       substitution, insertion of current directory and fixing . and ..
 37140                                  ;       entries. Perform splicing. Allow input string to match splice
 37141                                  ;       exactly.
 37142                                  ;
 37143                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 37144                                  ;       matches splice.
 37145                                  ;
 37146                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 37147                                  ;
 37148                                  ;   The following anomalous behaviour is required:
 37149                                  ;
 37150                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 37151                                  ;       Paths on devices are ignored. (truncate to 0-length)
 37152                                  ;       Raw net I/O sets ThisCDS => NULL.
 37153                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 37154                                  ;
 37155                                  ;   Other behaviour:
 37156                                  ;
 37157                                  ;       ThisCDS set up.
 37158                                  ;       FatRead done on local CDS.
 37159                                  ;       ValidateCDS done on local CDS.
 37160                                  ;
 37161                                  ;   Brief flowchart:
 37162                                  ;
 37163                                  ;       if fSharing then
 37164                                  ;           set up DummyCDS (ThisCDS)
 37165                                  ;           canonicalize (sets cMeta)
 37166                                  ;           splice
 37167                                  ;           fatRead
 37168                                  ;           return
 37169                                  ;       if \\ or d:\\ lead then
 37170                                  ;           set up null CDS (ThisCDS)
 37171                                  ;           canonicalize (sets cMeta)
 37172                                  ;           return
 37173                                  ;       if device then
 37174                                  ;           set up dummyCDS (ThisCDS)
 37175                                  ;           canonicalize (sets cMeta)
 37176                                  ;           return
 37177                                  ;       if file then
 37178                                  ;           getCDS (sets (ThisCDS) from name)
 37179                                  ;           validateCDS (may reset current dir)
 37180                                  ;           Copy current dir
 37181                                  ;           canonicalize (set cMeta)
 37182                                  ;           splice
 37183                                  ;           generate correct CDS (ThisCDS)
 37184                                  ;           if local then
 37185                                  ;               fatread
 37186                                  ;           return
 37187                                  ;
 37188                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37189                                  ;               DI - point to buffer in DOSDATA
 37190                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37191                                  ;                   syntax, etc. or user FAILed to I 24.
 37192                                  ;               WFP_Start - points to beginning of buffer
 37193                                  ;               Curr_Dir_End - points to end of current dir in path
 37194                                  ;               DS - DOSDATA
 37195                                  ;   Registers modified: most
 37196                                  ;
 37197                                  ;----------------------------------------------------------------------------
 37198                                  
 37199                                  ; 22/05/2019
 37200                                  ; 13/05/2019 - Retro DOS v4.0
 37201                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 37202                                  
 37203                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37204                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 37205                                  
 37206                                  TransPath:
 37207 00006C92 30C0                    	XOR     AL,AL
 37208 00006C94 EB02                    	JMP     SHORT SetSplice
 37209                                  TransPathSet:
 37210 00006C96 B0FF                    	MOV     AL,-1
 37211                                  SetSplice:
 37212 00006C98 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 37213 00006C9C B0FF                    	MOV     AL,-1
 37214                                  TransPathNoSet:
 37215 00006C9E 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 37216 00006CA2 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 37217 00006CA8 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 37218 00006CAD 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 37219 00006CB4 16                      	push	ss
 37220 00006CB5 07                      	pop	es
 37221                                  	;lea	bp,[di+134]
 37222 00006CB6 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 37223                                  ;
 37224                                  ; if this is through the server dos call, fsharing is set. We set up a
 37225                                  ; dummy cds and let the operation go.
 37226                                  ;
 37227 00006CBA 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 37228 00006CC0 7435                    	JZ	short CheckUNC		; skip to UNC check
 37229                                  ;
 37230                                  ; ES:DI point to buffer
 37231                                  ;
 37232 00006CC2 E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 37233 00006CC5 E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 37234 00006CC8 722A                    	jc	short NoPath
 37235 00006CCA E80B03                  	CALL	TextFromDrive		; drop in new
 37236 00006CCD 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 37237 00006CD0 E83401                  	CALL	Canonicalize            ; copy and canonicalize
 37238 00006CD3 72BC                    	jc	short TransPath_retn	; errors
 37239                                  ;
 37240                                  ; Perform splices for net guys.
 37241                                  ;
 37242 00006CD5 16                      	push	ss
 37243 00006CD6 1F                      	pop	ds
 37244 00006CD7 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 37245 00006CDB F606[7105]FF            	TEST	byte [FSPLICE],-1
 37246 00006CE0 7403                    	JZ	short NoServerSplice
 37247 00006CE2 E83102                  	CALL    Splice
 37248                                  NoServerSplice:
 37249 00006CE5 16                      	push	ss
 37250 00006CE6 1F                      	pop	ds                      ; for FATREAD
 37251 00006CE7 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 37252 00006CEB E89AA6                  	call	ECritDisk
 37253 00006CEE E80AEB                  	call	FATREAD_CDS
 37254 00006CF1 E8AFA6                  	call	LCritDisk
 37255                                  NoPath:
 37256                                  	;mov	al,3
 37257 00006CF4 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37258 00006CF6 C3                      	retn				; any errors are in Carry flag
 37259                                  
 37260                                  ; Let the network decide if the name is for a spooled device. It will map
 37261                                  ; the name if so.
 37262                                  
 37263                                  CheckUNC:
 37264 00006CF7 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 37265                                  	;CallInstall NetSpoolCheck,MultNET,35
 37266 00006CFE B82311                  	mov	ax,1123h
 37267 00006D01 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 37268                                  			; DS:SI -> ASCIZ filename to canonicalize
 37269                                  			; ES:DI -> 128-byte buffer for qualified name
 37270                                  			; Return: CF set if not resolved
 37271 00006D03 7329                    	JNC	short UNCDone
 37272                                  
 37273                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 37274                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 37275                                  ; input, then the name has been changed to the remote spooler by the above net
 37276                                  ; call. Also, there may be a drive in front of the \\.
 37277                                  
 37278                                  NO_CHECK:
 37279 00006D05 E8B902                  	CALL    DriveFromText		; eat drive letter
 37280 00006D08 50                      	PUSH    AX                      ; save it
 37281 00006D09 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 37282 00006D0B E897E4                  	call    PATHCHRCMP              ; convert to normal form
 37283 00006D0E 86E0                    	XCHG    AH,AL                   ; swap for second byte
 37284 00006D10 E892E4                  	call    PATHCHRCMP              ; convert to normal form
 37285 00006D13 751F                    	JNZ	short CheckDevice	; not a path char
 37286 00006D15 38C4                    	CMP     AH,AL                   ; are they same?
 37287 00006D17 751B                    	JNZ	short CheckDevice	; nope
 37288                                  
 37289                                  ; We have a UNC request. We must copy the string up to the beginning of the
 37290                                  ; local machine root path
 37291                                  
 37292 00006D19 58                      	POP     AX
 37293 00006D1A A5                      	MOVSW                           ; get the lead \\.
 37294                                  UNCCpy:
 37295 00006D1B AC                      	LODSB                           ; get a byte
 37296 00006D1C E831E4                   	call	UCase                   ;AN000;; convert the char
 37297 00006D1F 08C0                    	OR      AL,AL
 37298 00006D21 740E                    	JZ	short UNCTerm		; end of string. All done.
 37299 00006D23 E87FE4                  	call    PATHCHRCMP              ; is it a path char?
 37300 00006D26 89FB                    	MOV     BX,DI                   ; backup position
 37301 00006D28 AA                      	STOSB
 37302 00006D29 75F0                    	JNZ	short UNCCpy		; no, go copy
 37303 00006D2B E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 37304                                  UNCDone:
 37305 00006D2E 16                      	push	ss
 37306 00006D2F 1F                      	pop	ds
 37307 00006D30 C3                       	retn				; return error code
 37308                                  UNCTerm:
 37309 00006D31 AA                      	STOSB                           ;AN000;
 37310 00006D32 EBFA                    	JMP	short UNCDone		;AN000;
 37311                                  
 37312                                  CheckDevice:
 37313                                  
 37314                                  ; Check DS:SI for device. First eat any path stuff
 37315                                  
 37316 00006D34 58                      	POP     AX                      ; retrieve drive info
 37317 00006D35 803C00                  	CMP     BYTE [SI],0		; check for null file
 37318 00006D38 7504                    	JNZ	short CheckPath
 37319                                  	;mov	al,2 
 37320 00006D3A B002                    	MOV     AL,error_file_not_found ; bad file error
 37321 00006D3C F9                      	STC                             ; signal error on null input
 37322 00006D3D C3                      	RETN				; bye!
 37323                                  CheckPath:
 37324 00006D3E 50                      	push	ax
 37325 00006D3F 55                      	push	bp			; save drive number
 37326                                  
 37327                                  
 37328                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37329                                  %if 0
 37330                                  	; MSDOS 6.0
 37331                                  ;;;BUGBUG BUG 10-26-1992 scottq
 37332                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 37333                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 37334                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 37335                                  ;;;end up having a 5D in the opcode's displacement field. The
 37336                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 37337                                  ;;;
 37338                                  ;;;What we do here is do a call to a function that is less than 5Dh
 37339                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 37340                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 37341                                  ;;;
 37342                                  ;;;More info:
 37343                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 37344                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 37345                                  ;;;
 37346                                  	call	no5Dshere
 37347                                  start5Dhack:
 37348                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 37349                                  backfrom5Dhack:
 37350                                  
 37351                                  %endif
 37352                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37353                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 37354 00006D40 E8B8D6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 37355                                  
 37356 00006D43 5D                      	pop	bp
 37357 00006D44 58                      	pop	ax			; get drive letter back
 37358 00006D45 731C                    	JNC	short DoFile		; yes we have a file.
 37359                                  
 37360                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 37361                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 37362                                  ; call.
 37363                                  
 37364 00006D47 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 37365 00006D4D E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 37366 00006D50 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 37367                                  
 37368                                  ; Now that we have noted that we have a device, we put it into a form that
 37369                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 37370                                  ; string. We relax this to state that if the d:\ is present then the path
 37371                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 37372                                  ; a device.
 37373                                  
 37374 00006D56 E87F02                  	CALL    TextFromDrive
 37375 00006D59 B02F                    	MOV     AL,'/'                  ; path sep.
 37376 00006D5B AA                      	STOSB
 37377 00006D5C E8ECA4                  	call	StrCpy			; move remainder of string
 37378                                  
 37379 00006D5F F8                      	CLC                             ; everything OK.
 37380 00006D60 16                      	push	ss
 37381 00006D61 1F                      	pop	ds                      ; remainder of OK stuff
 37382                                  DoFile_retn:
 37383 00006D62 C3                      	retn
 37384                                  
 37385                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37386                                  %if 0
 37387                                  
 37388                                  no5Dshere:
 37389                                  	; 10/08/2018
 37390                                  	jmp	CheckThisDevice		; snoop for device
 37391                                  %endif
 37392                                  
 37393                                  ;.erre (no5Dshere - start5Dhack - 5D)
 37394                                  
 37395                                  ; We have a file. Get the raw CDS.
 37396                                  
 37397                                  DoFile:
 37398                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37399                                  
 37400 00006D63 E835FE                  	call	GetVisDrv               ; get proper CDS
 37401                                  	;mov	al,3 
 37402 00006D66 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 37403 00006D68 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 37404                                  
 37405                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 37406                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 37407                                  ; Use the one that we are going to use (ES:DI).
 37408                                  
 37409                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 37410 00006D6A 1E                      	push	ds
 37411 00006D6B 56                      	push	si
 37412 00006D6C 06                      	push	es
 37413 00006D6D 57                      	push	di
 37414 00006D6E E8CED5                  	call	ValidateCDS             ; poke CDS and make everything OK
 37415                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 37416 00006D71 5F                      	pop	di
 37417 00006D72 07                      	pop	es
 37418 00006D73 5E                      	pop	si
 37419 00006D74 1F                      	pop	ds
 37420                                  	;mov	al,3
 37421 00006D75 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37422                                  	;retc				; someone failed an operation
 37423 00006D77 72E9                    	jc	short DoFile_retn
 37424                                  
 37425                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 37426                                  ; current directory. Copy it in.
 37427                                  
 37428 00006D79 1E                      	push	ds
 37429 00006D7A 56                      	push	si
 37430 00006D7B 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 37431 00006D80 89FB                    	MOV     BX,DI                   ; point to destination
 37432                                  	;add	bx,[si+79] ; MSDOS 6.0
 37433 00006D82 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 37434                                  	;lea	bp,[di+134]
 37435 00006D85 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 37436                                  					;AN000;
 37437 00006D89 E8CEA4                  	call	FStrCpy                 ; copy string. ES:DI point to end
 37438 00006D8C 4F                      	DEC     DI                      ; point to NUL byte
 37439                                  
 37440                                  ; Make sure that there is a path char at end.
 37441                                  
 37442 00006D8D B05C                    	MOV     AL,'\'
 37443 00006D8F 263845FF                	CMP     [ES:DI-1],AL
 37444 00006D93 7401                    	JZ	short GetOrig
 37445 00006D95 AA                      	STOSB
 37446                                  
 37447                                  ; Now get original string.
 37448                                  
 37449                                  GetOrig:
 37450 00006D96 4F                      	DEC     DI                      ; point to path char
 37451 00006D97 5E                      	pop	si
 37452 00006D98 1F                      	pop	ds
 37453                                  
 37454                                  ; BX points to the end of the root part of the CDS (at where a path char
 37455                                  ; should be). Now, we decide whether we use this root or extend it with the
 37456                                  ; current directory. See if the input string begins with a leading 
 37458 00006D99 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 37459 00006D9C 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 37460 00006D9E 08C0                    	OR      AL,AL                   ; end of string?
 37461 00006DA0 7410                    	JZ	short DoCanon		; yes, skip.
 37462                                  ;
 37463                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 37464                                  ; to this root. Make sure that there is a path char there and advance the
 37465                                  ; source string over all leading \'s.
 37466                                  ;
 37467 00006DA2 89DF                    	MOV     DI,BX                   ; back up to root point.
 37468                                  SkipPath:
 37469 00006DA4 AC                      	LODSB
 37470 00006DA5 E8FDE3                  	call    PATHCHRCMP
 37471 00006DA8 74FA                    	JZ	short SkipPath
 37472 00006DAA 4E                      	DEC     SI
 37473 00006DAB 08C0                    	OR      AL,AL
 37474 00006DAD 7403                    	JZ	short DoCanon
 37475                                  
 37476                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 37477                                  ; for yucks.
 37478                                  
 37479                                  PathAssure:
 37480 00006DAF B05C                    	MOV     AL,'\'	; 5Ch
 37481 00006DB1 AA                      	STOSB
 37482                                  
 37483                                  ; ES:DI point to the correct spot for canonicalization to begin.
 37484                                  ; BP is the max extent to advance DI
 37485                                  ; BX is the backup limit for ..
 37486                                  
 37487                                  DoCanon:
 37488 00006DB2 E85200                  	CALL    Canonicalize            ; wham.
 37489                                  	;retc				; badly formatted path.
 37490 00006DB5 72AB                    	jc	short DoFile_retn
 37491                                  
 37492                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 37493                                  ; to wfp_start and do string substitution. BP is still the max position in
 37494                                  ; buffer.
 37495                                  
 37496 00006DB7 16                      	push	ss
 37497 00006DB8 1F                      	pop	ds
 37498 00006DB9 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 37499 00006DBD C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 37500 00006DC1 E81C02                  	CALL    PathPref                ; is there a prefix?
 37501 00006DC4 7514                    	JNZ	short DoSplice		; no, do splice
 37502                                  
 37503                                  ; We have a match. Check to see if we ended in a path char.
 37504                                  
 37505 00006DC6 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 37506 00006DC9 E8D9E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 37507 00006DCC 740C                    	JZ	short DoSplice		; yes, no current dir here.
 37508                                  Pathline:                               ; 2/13/KK
 37509 00006DCE 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 37510 00006DD2 7406                    	JZ	short DoSplice
 37511 00006DD4 47                      	INC     DI                      ; point to after current path char
 37512 00006DD5 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 37513                                  
 37514                                  ; Splice the result.
 37515                                  
 37516                                  DoSplice:
 37517 00006DDA 16                      	push	ss
 37518 00006DDB 1F                      	pop	ds			; back to DOSDATA
 37519 00006DDC 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 37520 00006DE0 31C9                    	XOR     CX,CX
 37521 00006DE2 F606[7105]FF            	TEST	byte [FSPLICE],-1
 37522 00006DE7 7403                    	JZ	short SkipSplice
 37523 00006DE9 E82A01                  	CALL    Splice                  ; replaces in place.
 37524                                  SkipSplice:
 37525                                  
 37526                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 37527                                  ; device.
 37528                                  
 37529 00006DEC 16                      	push	ss
 37530 00006DED 1F                      	pop	ds
 37531 00006DEE C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 37532                                  	;test	word [es:di+67],8000h
 37533                                  	; 17/12/2022
 37534                                  	;test	byte [es:di+68],80h
 37535 00006DF2 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 37536                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 37537 00006DF7 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 37538 00006DF9 E30B                    	JCXZ    Done
 37539 00006DFB E88AA5                  	call	ECritDisk
 37540 00006DFE E8FAE9                  	call	FATREAD_CDS
 37541 00006E01 E89FA5                  	call	LCritDisk
 37542                                  	;mov	al, 3
 37543 00006E04 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37544                                  Done:   
 37545 00006E06 C3                      	retn                         ; any errors in carry flag.
 37546                                  
 37547                                  ; 13/07/2018
 37548                                  
 37549                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 37550                                  ;----------------------------------------------------------------------------
 37551                                  ;   Canonicalize - copy path removing . and .. entries.
 37552                                  ;
 37553                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37554                                  ;               ES:DI - point to buffer
 37555                                  ;               BX - backup limit (offset from ES) points to slash
 37556                                  ;               BP - end of buffer
 37557                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37558                                  ;                   syntax, etc.
 37559                                  ;               Carry Clear -
 37560                                  ;                   DS:DI - advanced to end of string
 37561                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 37562                                  ;   Registers modified: AX CX DX (in addition to those above)
 37563                                  ;----------------------------------------------------------------------------
 37564                                  
 37565                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37566                                  
 37567                                  Canonicalize:
 37568                                  
 37569                                  ; We copy all leading path separators.
 37570                                  
 37571 00006E07 AC                      	LODSB                           ;   while (PathChr (*s))
 37572 00006E08 E89AE3                  	call    PATHCHRCMP
 37573 00006E0B 7507                    	JNZ	short CanonDec
 37574 00006E0D 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 37575 00006E0F 7319                    	JAE	short CanonBad		;           goto error;
 37576 00006E11 AA                      	STOSB
 37577 00006E12 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 37578                                  CanonDec:
 37579 00006E14 4E                      	DEC     SI
 37580                                  
 37581                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 37582                                  ; component (no leading path separators) and ES:DI being the destination
 37583                                  ; buffer.
 37584                                  
 37585                                  CanonLoop:
 37586                                  
 37587                                  ; If we are at the end of the source string, then we need to check to see that
 37588                                  ; a potential drive specifier is correctly terminated with a path sep char.
 37589                                  ; Otherwise, do nothing
 37590                                  
 37591 00006E15 31C0                    	XOR     AX,AX
 37592 00006E17 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 37593 00006E19 751A                    	JNZ	short DoComponent
 37594 00006E1B 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 37595 00006E20 7505                    	JNZ	short DoTerminate
 37596 00006E22 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 37597 00006E24 AA                      	STOSB
 37598 00006E25 88E0                    	MOV     AL,AH
 37599                                  DoTerminate:
 37600 00006E27 AA                      	STOSB                           ;           *d++ = 0;
 37601 00006E28 F8                      	CLC                             ;           return (0);
 37602 00006E29 C3                      	retn
 37603                                  
 37604                                  CanonBad:
 37605 00006E2A E8CC01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 37606                                  	;mov	al,3
 37607 00006E2D B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 37608 00006E2F 7402                    	JZ	short PathEnc		; path character encountered in string
 37609                                  	;mov	al,2
 37610 00006E31 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 37611                                  PathEnc:
 37612 00006E33 F9                      	STC
 37613                                  CanonBad_retn:
 37614 00006E34 C3                      	retn
 37615                                  
 37616                                  ; We have a textual component that we must copy. We uppercase it and truncate
 37617                                  ; it to 8.3
 37618                                  
 37619                                  DoComponent:                            ;           }
 37620 00006E35 E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 37621 00006E38 72FA                    	jc	short CanonBad_retn	;           return (-1);
 37622                                  
 37623                                  ; We special case the . and .. cases.  These will be backed up.
 37624                                  
 37625                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 37626 00006E3A 26833D2E                	CMP	WORD [ES:DI],002Eh
 37627 00006E3E 7408                    	JZ	short Skip1
 37628                                  	;CMP	WORD PTR ES:[DI],'..'
 37629 00006E40 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 37630 00006E45 750A                    	JNZ	short CanonNormal
 37631 00006E47 4F                      	DEC     DI                      ;           d--;
 37632                                  Skip1:  
 37633 00006E48 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 37634                                  	;mov	al,3
 37635 00006E4B B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37636 00006E4D 72E5                    	jc	short CanonBad_retn
 37637 00006E4F EB02                    	JMP     short CanonPath         ;           }
 37638                                  
 37639                                  ; We have a normal path. Advance destination pointer over it.
 37640                                  
 37641                                  CanonNormal:                            ;       else
 37642 00006E51 01CF                    	ADD     DI,CX                   ;           d += ct;
 37643                                  
 37644                                  ; We have successfully copied a component. We are now pointing at a path
 37645                                  ; sep char or are pointing at a nul or are pointing at something else.
 37646                                  ; If we point at something else, then we have an error.
 37647                                  
 37648                                  CanonPath:
 37649 00006E53 E81600                  	CALL    PathSep
 37650 00006E56 75D2                    	JNZ	short CanonBad		; something else...
 37651                                  
 37652                                  ; Copy the first path char we see.
 37653                                  
 37654 00006E58 AC                      	LODSB                           ; get the char
 37655 00006E59 E849E3                  	call    PATHCHRCMP              ; is it path char?
 37656 00006E5C 75B6                    	JNZ	short CanonDec		; no, go test for nul
 37657 00006E5E 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 37658 00006E60 73C8                    	JAE	short CanonBad		; yep, error.
 37659 00006E62 AA                      	STOSB                           ; copy the one byte
 37660                                  
 37661                                  ; Skip all remaining path chars
 37662                                  
 37663                                  CanonPathLoop:
 37664 00006E63 AC                      	LODSB                           ; get next byte
 37665 00006E64 E83EE3                  	call    PATHCHRCMP              ; path char again?
 37666 00006E67 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 37667 00006E69 4E                      	DEC     SI                      ; back up
 37668 00006E6A EBA9                    	JMP	short  CanonLoop	; go copy component
 37669                                  
 37670                                  ;BREAK <PathSep - determine if char is a path separator>
 37671                                  ;----------------------------------------------------------------------------
 37672                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 37673                                  ;   Inputs:     DS:SI - point to a char
 37674                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 37675                                  ;               Zero set if AL is / \ or NUL
 37676                                  ;               Zero reset otherwise
 37677                                  ;   Registers modified: AL
 37678                                  ;----------------------------------------------------------------------------
 37679                                  
 37680                                  PathSep:
 37681 00006E6C 8A04                    	MOV     AL,[SI]                 ; get the character
 37682                                  PathSepGotCh:				; already have character
 37683 00006E6E 08C0                    	OR      AL,AL                   ; test for zero
 37684 00006E70 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 37685                                  	;call	PATHCHRCMP              ; check for path character
 37686                                  	;retn				; and return HIS determination
 37687                                  	; 18/12/2022
 37688 00006E72 E930E3                  	jmp	PATHCHRCMP
 37689                                  
 37690                                  
 37691                                  ;BREAK <SkipBack - move backwards to a path separator>
 37692                                  ;----------------------------------------------------------------------------
 37693                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 37695                                  ;               BX has current directory back up limit (point to a / \)
 37696                                  ;   Outputs:    ES:DI backed up to point to a path char
 37697                                  ;               AL has char from output ES:DI (path sep if carry clear)
 37698                                  ;               Carry set if illegal backup
 37699                                  ;               Carry Clear if ok
 37700                                  ;   Registers modified: DI,AL
 37701                                  ;----------------------------------------------------------------------------
 37702                                  
 37703                                  SkipBack:
 37704 00006E75 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 37705 00006E77 720B                    	JB	short SkipBad		;       if (d < dlim)
 37706 00006E79 4F                      	DEC     DI                      ;           goto err;
 37707 00006E7A 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 37708 00006E7D E825E3                  	call    PATHCHRCMP              ;           break;
 37709 00006E80 75F3                    	JNZ	short SkipBack		;       }
 37710 00006E82 F8                      	CLC                             ;   return (0);
 37711 00006E83 C3                      	retn				;
 37712                                  SkipBad:                                ;err:
 37713                                  	;mov	al,3
 37714 00006E84 B003                    	MOV     AL,error_path_not_found ; bad path error
 37715 00006E86 F9                      	STC                             ;   return (-1);
 37716 00006E87 C3                      	retn				;
 37717                                  
 37718                                  ;Break <CopyComponent - copy out a file path component>
 37719                                  ;----------------------------------------------------------------------------
 37720                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 37721                                  ;
 37722                                  ;   Inputs:     DS:SI - source path
 37723                                  ;               ES:DI - destination
 37724                                  ;               ES:BP - end of buffer
 37725                                  ;   Outputs:    Carry Set - too long
 37726                                  ;               Carry Clear - DS:SI moved past component
 37727                                  ;                   CX has length of destination
 37728                                  ;   Registers modified: AX,CX,DX
 37729                                  ;----------------------------------------------------------------------------
 37730                                  
 37731                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37732                                  
 37733                                  CopyComponent:
 37734                                  
 37735                                  %define CopyBP	 [BP]		; word
 37736                                  %define CopyD	 [BP+2]		; dword
 37737                                  %define CopyDoff [BP+2]		; word
 37738                                  %define CopyS	 [BP+6]		; dword
 37739                                  %define CopySoff [BP+6]		; word
 37740                                  %define CopyTemp [BP+10]	; byte
 37741                                  
 37742 00006E88 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 37743 00006E8B 1E                      	push	ds
 37744 00006E8C 56                      	push	si
 37745 00006E8D 06                      	push	es
 37746 00006E8E 57                      	push	di
 37747 00006E8F 55                      	push	bp
 37748 00006E90 89E5                    	MOV     BP,SP
 37749 00006E92 B42E                    	MOV     AH,'.'
 37750 00006E94 AC                      	LODSB
 37751 00006E95 AA                      	STOSB
 37752 00006E96 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 37753 00006E98 7518                    	JNZ	short NormalComp
 37754 00006E9A E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 37755 00006E9D 740B                    	JZ	short NulTerm
 37756                                  TryTwoDot:
 37757 00006E9F AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 37758 00006EA0 AA                      	STOSB
 37759 00006EA1 38E0                    	CMP     AL,AH
 37760 00006EA3 7557                    	JNZ	short CopyBad
 37761 00006EA5 E8C4FF                  	CALL    PathSep
 37762 00006EA8 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 37763                                  NulTerm:                                ;               return -1;
 37764 00006EAA 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 37765 00006EAC AA                      	STOSB
 37766 00006EAD 897606                  	MOV     CopySoff,SI
 37767 00006EB0 EB47                    	JMP     SHORT _GoodRet		;       }
 37768                                  NormalComp:                             ;   else {
 37769 00006EB2 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 37770 00006EB5 E82BE2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 37771 00006EB8 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 37772 00006EBB 743F                    	JZ	short CopyBad		;           return (-1);
 37773 00006EBD 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 37774 00006EC3 7510                    	JNZ	short DoPack
 37775 00006EC5 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 37776 00006EC8 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 37777 00006ECD 7F2D                    	JG	short CopyBad		;               return (-1);
 37778 00006ECF 7504                    	JNZ	short DoPack		;           else
 37779 00006ED1 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 37780 00006ED3 742F                    	JZ	short CopyBadPath	;               return (-1);
 37781                                  DoPack:                                 ;           }
 37782 00006ED5 897606                  	MOV     CopySoff,SI ; [bp+6]
 37783 00006ED8 16                      	push	ss
 37784 00006ED9 1F                      	pop	ds
 37785 00006EDA BE[4B05]                	MOV     SI,NAME1
 37786 00006EDD 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 37787 00006EE0 57                      	push	di
 37788 00006EE1 E862B2                  	call	PackName                ;       PackName (Name1, temp);
 37789 00006EE4 5F                      	pop	di
 37790 00006EE5 E87BA3                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 37791 00006EE8 49                      	DEC     CX
 37792 00006EE9 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 37793                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37794                                  	;cmp	cx,[bp+0]
 37795                                  	; 15/12/2022
 37796                                  	;cmp	cx,[bp]
 37797 00006EEC 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 37798 00006EEF 730B                    	JAE	short CopyBad		;           return (-1);
 37799 00006EF1 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 37800 00006EF3 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 37801 00006EF6 E861A3                  	call	FStrCpy
 37802                                  _GoodRet:				;       }
 37803 00006EF9 F8                      	CLC
 37804 00006EFA EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 37805                                  CopyBad:
 37806 00006EFC F9                      	STC
 37807 00006EFD E8F900                  	CALL    ScanPathChar            ; check for path chars in rest of string
 37808                                  	;mov	al,2
 37809 00006F00 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 37810 00006F02 7503                    	JNZ	short CopyEnd
 37811                                  CopyBadPath:
 37812 00006F04 F9                      	STC
 37813                                  	;mov	al,3
 37814 00006F05 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 37815                                  CopyEnd:
 37816 00006F07 5D                      	pop	bp
 37817 00006F08 5F                      	pop	di
 37818 00006F09 07                      	pop	es
 37819 00006F0A 5E                      	pop	si
 37820 00006F0B 1F                      	pop	ds
 37821 00006F0C 9F                      	LAHF
 37822 00006F0D 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 37823 00006F10 E850A3                  	call	StrLen
 37824 00006F13 49                      	DEC     CX
 37825 00006F14 9E                      	SAHF
 37826 00006F15 C3                      	retn
 37827                                  
 37828                                  ; 14/05/2019 - Retro DOS v4.0
 37829                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 37830                                  
 37831                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37832                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 37833                                  
 37834                                  ;Break <Splice - pseudo mount by string substitution>
 37835                                  ;----------------------------------------------------------------------------
 37836                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 37837                                  ;       ThisCDS to point to physical drive CDS.
 37838                                  ;   Inputs:     DS:SI point to string
 37839                                  ;               NoSetDir = TRUE => exact matches with splice fail
 37840                                  ;   Outputs:    DS:SI points to thisCDS
 37841                                  ;               ES:DI points to DPB
 37842                                  ;               String at DS:SI may be reduced in length by removing prefix
 37843                                  ;               and substituting drive letter.
 37844                                  ;               CX = 0 If no splice done
 37845                                  ;               CX <> 0 otherwise
 37846                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 37847                                  ;                   left alone
 37848                                  ;               ThisDPB points to proper DPB
 37849                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 37850                                  ;----------------------------------------------------------------------------
 37851                                  
 37852                                  Splice:
 37853 00006F16 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 37854 00006F1C 7469                    	JZ	short AllDone
 37855 00006F1E 36FF36[A205]            	push	word [SS:THISCDS]
 37856 00006F23 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 37857 00006F28 1E                      	push	ds
 37858 00006F29 56                      	push	si
 37859 00006F2A 5F                      	pop	di
 37860 00006F2B 07                      	pop	es
 37861 00006F2C 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 37862                                  SpliceScan:
 37863 00006F2E E8DBFC                  	call	GetCDSFromDrv
 37864 00006F31 724A                    	JC	short SpliceDone
 37865 00006F33 FEC0                    	INC     AL
 37866                                  	; 17/12/2022
 37867                                  	;test	byte [si+68],20h
 37868 00006F35 F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 37869                                  	;;test	word [si+67],2000h
 37870                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37871 00006F39 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 37872 00006F3B 57                      	push	di
 37873 00006F3C E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 37874 00006F3F 7403                    	JZ	short SpliceFound	;
 37875                                  SpliceSkip:
 37876 00006F41 5F                      	pop	di
 37877 00006F42 EBEA                    	JMP	short SpliceScan	;               continue;
 37878                                  SpliceFound:
 37879 00006F44 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 37880 00006F48 7508                    	JNZ	short SpliceDo
 37881 00006F4A 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 37882 00006F50 75EF                    	JNZ	short SpliceSkip
 37883                                  SpliceDo:
 37884 00006F52 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 37885 00006F54 06                      	push	es
 37886 00006F55 1F                      	pop	ds
 37887 00006F56 5F                      	pop	di
 37888 00006F57 E88000                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 37889 00006F5A 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 37890 00006F5E 09C0                    	OR      AX,AX
 37891 00006F60 7808                    	JS	short NoPoke
 37892 00006F62 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 37893 00006F64 29F0                    	SUB     AX,SI
 37894 00006F66 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 37895                                  NoPoke:
 37896 00006F6A 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 37897 00006F6D 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 37898 00006F6F B05C                    	MOV     AL,"\"
 37899 00006F71 AA                      	STOSB
 37900                                  SpliceCopy:                             ;               strcpy (src, p);
 37901 00006F72 E8E5A2                  	call	FStrCpy
 37902 00006F75 83C404                  	ADD     SP,4                    ; throw away saved stuff
 37903 00006F78 80C901                  	OR      CL,1                    ; signal splice done.
 37904 00006F7B EB0C                    	JMP     SHORT DoSet             ;               return;
 37905                                  SpliceDone:                             ;               }
 37906 00006F7D 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 37907 00006F82 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 37908                                  AllDone:
 37909 00006F87 31C9                    	XOR     CX,CX
 37910                                  DoSet:
 37911 00006F89 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 37912                                  	;les	di,[si+69]
 37913 00006F8E C47C45                  	LES     DI,[SI+curdir.devptr]	
 37914 00006F91 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 37915 00006F96 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 37916                                  Splice_retn:
 37917 00006F9B C3                      	retn
 37918                                  
 37919                                  ; 15/05/2019 - Retro DOS v4.0
 37920                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 37921                                  
 37922                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37923                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 37924                                  
 37925                                  ;Break <$NameTrans - partially process a name>
 37926                                  ;----------------------------------------------------------------------------
 37927                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 37928                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 37929                                  ;   to Transpath playing games with devices, we need to insure that the output
 37930                                  ;   has drive letter and : in it.
 37931                                  ;
 37932                                  ;   Inputs:     DS:SI - source string for translation
 37933                                  ;               ES:DI - pointer to buffer
 37934                                  ;   Outputs:
 37935                                  ;       Carry Clear
 37936                                  ;               Buffer at ES:DI is filled in with data
 37937                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 37938                                  ;       Carry Set
 37939                                  ;               AX = error_path_not_found
 37940                                  ;   Registers modified: all
 37941                                  ;----------------------------------------------------------------------------
 37942                                  
 37943                                  _$NameTrans:
 37944 00006F9C 1E                      	push	ds
 37945 00006F9D 56                      	push	si
 37946 00006F9E 06                      	push	es
 37947 00006F9F 57                      	push	di
 37948 00006FA0 51                      	push	cx ; MSDOS 6.0
 37949                                  	
 37950                                  	; MSDOS 6.0	
 37951                                  ; M027 - Start
 37952                                  ;
 37953                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 37954                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 37955                                  ; device if the old call set the volume attribute bit. Note that devname in
 37956                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 37957                                  ; and restore CX.
 37958                                  
 37959                                  	;mov	ch,16h
 37960 00006FA1 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 37961 00006FA3 E8BA02                  	call	SetAttrib
 37962                                  
 37963                                  ; M027 - End
 37964                                  
 37965                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37966 00006FA6 BF[BE03]                	MOV     DI,OPENBUF
 37967 00006FA9 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 37968 00006FAC 59                      	pop	cx ; MSDOS 6.0
 37969 00006FAD 5F                      	pop     di
 37970 00006FAE 07                      	pop	es
 37971 00006FAF 5E                      	pop     si
 37972 00006FB0 1F                      	pop     ds
 37973 00006FB1 7303                    	JNC	short TransOK
 37974 00006FB3 E9D796                  	jmp	SYS_RET_ERR
 37975                                  TransOK:
 37976 00006FB6 BE[BE03]                	MOV     SI,OPENBUF
 37977 00006FB9 16                      	push	ss
 37978 00006FBA 1F                      	pop	ds
 37979                                  ;GotText:
 37980 00006FBB E89CA2                  	call	FStrCpy
 37981 00006FBE E9C396                  	jmp	SYS_RET_OK
 37982                                  
 37983                                  ;Break   <DriveFromText - return drive number from a text string>
 37984                                  ;----------------------------------------------------------------------------
 37985                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 37986                                  ;   pointer.
 37987                                  ;
 37988                                  ;   Inputs:     DS:SI point to a text string
 37989                                  ;   Outputs:    AL has drive number
 37990                                  ;               DS:SI advanced
 37991                                  ;   Registers modified: AX,SI.
 37992                                  ;----------------------------------------------------------------------------
 37993                                  
 37994                                  DriveFromText:
 37995 00006FC1 30C0                    	XOR     AL,AL                   ;       drive = 0;
 37996 00006FC3 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 37997 00006FC6 74D3                    	jz	short Splice_retn
 37998 00006FC8 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 37999 00006FCC 75CD                    	jnz	short Splice_retn
 38000 00006FCE AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 38001 00006FCF 0C20                    	OR      AL,20h
 38002                                  	;sub	al,60h
 38003 00006FD1 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 38004 00006FD3 75C6                    	jnz	short Splice_retn
 38005 00006FD5 B0FF                    	MOV     AL,-1                   ; nuke AL...
 38006 00006FD7 C3                      	retn				;           }
 38007                                  
 38008                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 38009                                  ;----------------------------------------------------------------------------
 38010                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 38011                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 38012                                  ;
 38013                                  ;   Inputs:     AL has 0-based drive number
 38014                                  ;   Outputs:    ES:DI advanced
 38015                                  ;   Registers modified: AX
 38016                                  ;----------------------------------------------------------------------------
 38017                                  
 38018                                  TextFromDrive:
 38019 00006FD8 FEC0                    	INC     AL
 38020                                  TextFromDrive1:
 38021                                  	;add	al,40h
 38022 00006FDA 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 38023 00006FDC B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 38024 00006FDE AB                      	STOSW
 38025                                  PathPref_retn:
 38026 00006FDF C3                      	retn
 38027                                  
 38028                                  ;Break   <PathPref - see if one path is a prefix of another>
 38029                                  ;----------------------------------------------------------------------------
 38030                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 38031                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 38032                                  ;   prefix: A:\ and A:\FOO
 38033                                  ;
 38034                                  ;   Inputs:     DS:SI potential prefix
 38035                                  ;               ES:DI string
 38036                                  ;   Outputs:    Zero set => prefix found
 38037                                  ;                   DI/SI advanced past matching part
 38038                                  ;               Zero reset => no prefix, DS/SI garbage
 38039                                  ;   Registers modified: CX
 38040                                  ;----------------------------------------------------------------------------
 38041                                  
 38042                                  PathPref:
 38043 00006FE0 E88EA2                  	call	DStrLen                 ; get length
 38044 00006FE3 49                      	DEC     CX                      ; do not include nul byte
 38045 00006FE4 F3A6                    	REPZ    CMPSB                   ; compare
 38046 00006FE6 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 38047 00006FE8 50                      	push	ax			; save char register
 38048 00006FE9 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 38049 00006FEC E8B6E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 38050 00006FEF 7406                    	JZ	short Prefix		; yes, match root (I hope)
 38051                                  NotSep:                                 ; 2/13/KK
 38052 00006FF1 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 38053 00006FF4 E877FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 38054                                  Prefix:
 38055 00006FF7 58                      	pop	ax			; get back original
 38056 00006FF8 C3                      	retn
 38057                                  
 38058                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 38059                                  ;----------------------------------------------------------------------------
 38060                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 38061                                  ;     a path separator.
 38062                                  ;
 38063                                  ;     Input:    DS:SI target string (null terminated)
 38064                                  ;     Output:   Zero set => path separator encountered in string
 38065                                  ;               Zero clear => null encountered
 38066                                  ;     Registers modified: SI
 38067                                  ;----------------------------------------------------------------------------
 38068                                  
 38069                                  ScanPathChar:
 38070 00006FF9 AC                      	LODSB                           ; fetch a character
 38071 00006FFA E871FE                  	call    PathSepGotCh
 38072 00006FFD 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 38073                                  	;call	PATHCHRCMP              ; path separator?
 38074                                  	;retn
 38075                                  	; 18/12/2022
 38076 00006FFF E9A3E1                  	jmp	PATHCHRCMP
 38077                                  
 38078                                  ;============================================================================
 38079                                  ; FILE.ASM, MSDOS 6.0, 1991
 38080                                  ;============================================================================
 38081                                  ; 14/07/2018 - Retro DOS v3.0
 38082                                  
 38083                                  ; 13/05/2019 - Retro DOS v4.0
 38084                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 38085                                  
 38086                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38087                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 38088                                  
 38089                                  ; MSDOS 2.11
 38090                                  ;BREAK <$Open - open a file handle>
 38091                                  ;----------------------------------------------------------------------------
 38092                                  ;   Assembler usage:
 38093                                  ;           LDS     DX, Name
 38094                                  ;           MOV     AH, Open
 38095                                  ;           MOV     AL, access
 38096                                  ;           INT     int_command
 38097                                  ;
 38098                                  ;       ACCESS          Function
 38099                                  ;       ------          --------
 38100                                  ;       open_for_read   file is opened for reading
 38101                                  ;       open_for_write  file is opened for writing
 38102                                  ;       open_for_both   file is opened for both reading and writing.
 38103                                  ;
 38104                                  ;   Error returns:
 38105                                  ;           AX = error_invalid_access
 38106                                  ;              = error_file_not_found
 38107                                  ;              = error_access_denied
 38108                                  ;              = error_too_many_open_files
 38109                                  ;----------------------------------------------------------------------------
 38110                                  
 38111                                  ; MSDOS 6.0
 38112                                  ;	BREAK <$Open - open a file from a path string>
 38113                                  ;----------------------------------------------------------------------------
 38114                                  ;
 38115                                  ;**	$OPen - Open a File
 38116                                  ;
 38117                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 38118                                  ;	file and and returns a handle
 38119                                  ;
 38120                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 38121                                  ;		(AL) = open mode
 38122                                  ;	EXIT	'C' clear if OK
 38123                                  ;		  (ax) = file handle
 38124                                  ;		'C' set if error
 38125                                  ;		  (ax) = error code
 38126                                  ;	USES	all
 38127                                  ;
 38128                                  ;----------------------------------------------------------------------------
 38129                                  
 38130                                  ; 13/05/2019 - Retro DOS v4.0
 38131                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38132                                  
 38133                                  _$OPEN:       
 38134 00007002 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 38135                                  _$Open2:
 38136                                  	;mov	ch,16h
 38137 00007004 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 38138 00007006 E85702                  	call	SetAttrib
 38139 00007009 B9[0A2C]                	mov	cx,DOS_OPEN
 38140                                  
 38141                                  	;xor	ah,ah  ; MSDOS 3.3
 38142                                  
 38143 0000700C 50                      	push	ax
 38144                                  
 38145                                  ;*	General file open/create code. The $CREATE call and the various
 38146                                  ;	$OPEN calls all come here.
 38147                                  ;
 38148                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 38149                                  ;	path names, etc., and then dispatch to our individual handlers.
 38150                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 38151                                  ;
 38152                                  ;	(TOS) = create mode
 38153                                  ;	(CX) = address of routine to call to do actual function
 38154                                  ;	(DS:DX) = ASCIZ name
 38155                                  ;	SAttrib = Attribute mask
 38156                                  
 38157                                  ;	Get a free SFT and mark it "being allocated"
 38158                                  
 38159                                  AccessFile:
 38160 0000700D E878A3                  	call	ECritSFT
 38161 00007010 E8D3F7                  	call	SFNFree			; get a free sfn
 38162 00007013 E88DA3                  	call	LCritSFT
 38163 00007016 7214                    	jc	short OpenFailJ		; oops, no free sft's
 38164 00007018 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 38165 0000701D 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 38166 00007022 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 38167                                  
 38168                                  ;	Find a free area in the user's JFN table.
 38169                                  
 38170 00007027 E8A9F7                  	call	JFNFree			; get a free jfn
 38171 0000702A 7303                    	jnc	short SaveJFN
 38172                                  OpenFailJ:
 38173 0000702C E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 38174                                  
 38175                                  SaveJFN:
 38176 0000702F 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 38177 00007034 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 38178 00007039 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 38179                                  
 38180                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 38181                                  ;	reusing the same JFN.
 38182                                  
 38183 0000703E 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 38184 00007043 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 38185 00007046 89D6                    	MOV	SI,DX			; get name in appropriate place
 38186 00007048 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38187 0000704B 51                      	push	cx			; save routine to call
 38188 0000704C E843FC                  	call	TransPath		; convert the path
 38189 0000704F 5B                      	pop	bx			; (bx) = routine to call
 38190                                  
 38191 00007050 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 38192 00007055 720A                    	JC	short OpenCleanJ	; no error, go and open file
 38193 00007057 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 38194 0000705D 7404                    	JZ	short SetSearch
 38195                                  	;mov	al,2
 38196 0000705F B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 38197                                  OpenCleanJ:
 38198 00007061 EB50                    	JMP	short OpenClean
 38199                                  
 38200                                  SetSearch:
 38201 00007063 58                      	pop	ax			; Mode (Open), Attributes (Create)
 38202                                  
 38203                                  ;	We need to get the new inheritance bits.
 38204                                  
 38205 00007064 31C9                    	xor	cx,cx
 38206                                  	; MSDOS 6.0
 38207                                  	;mov	[si+2],cx ; 0
 38208 00007066 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 38209                                  	;mov    [si+51],cx ; 0
 38210 00007069 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 38211                                  	;
 38212 0000706C 81FB[0A2C]              	CMP	BX,DOS_OPEN
 38213 00007070 7509                    	JNZ	short _DoOper
 38214                                  	;test   al,80h
 38215 00007072 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 38216 00007074 7405                    	JZ	short _DoOper ; 10/08/2018
 38217 00007076 247F                    	AND	AL,7Fh			; mask off inherit bit
 38218                                  	;mov	cx,1000h
 38219 00007078 B90010                  	MOV	CX,sf_no_inherit
 38220                                  _DoOper:
 38221                                  	;; MSDOS 3.3
 38222                                  	;;mov	word [si+2], 0
 38223                                  	;;mov	word [si+33h], 0
 38224                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 38225                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 38226                                  
 38227                                  	; MSDOS 6.0
 38228                                  ;**	Check if this is an extended open. If so you must set the
 38229                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 38230                                  ;	Set_EXT_mode in creat.asm
 38231                                  
 38232                                  	; MSDOS 6.0
 38233                                  	;SAVE	<di, es>                ;M022 conditional removed here
 38234 0000707B 57                      	push	di
 38235 0000707C 06                      	push	es
 38236 0000707D 1E                      	push	ds
 38237 0000707E 07                      	pop	es
 38238 0000707F 56                      	push	si
 38239 00007080 5F                      	pop	di			; (es:di) = SFT address
 38240 00007081 E872BB                  	call	Set_EXT_mode
 38241                                  	;RESTORE <es, di>
 38242 00007084 07                      	pop	es
 38243 00007085 5F                      	pop	di
 38244                                  
 38245                                  	;Context DS
 38246 00007086 16                      	push	ss
 38247 00007087 1F                      	pop	ds	
 38248                                  
 38249 00007088 51                      	push	cx
 38250 00007089 FFD3                    	CALL	BX			; blam!
 38251 0000708B 59                      	pop	cx
 38252 0000708C C536[9E05]              	LDS	SI,[THISSFT]
 38253 00007090 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 38254                                  	;jc	short OpenE ; MSDOS 3.3
 38255                                  
 38256                                  ;	The SFT was successfully opened. Remove busy mark.
 38257                                  
 38258                                  OpenOK:
 38259                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 38260 00007092 C7040100                	mov	word [SI],1
 38261                                  	;or	[SI+5],cx
 38262 00007096 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 38263                                  
 38264                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 38265                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 38266                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 38267                                  ;
 38268                                  ; Since this is only relevant on sharer systems, we stick this code into the
 38269                                  ; sharer.
 38270                                  
 38271 00007099 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 38272 0000709D 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 38273                                  
 38274 000070A2 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 38275                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38276                                  OpenOkj:
 38277 000070A9 E9D895                  	jmp	SYS_RET_OK		; bye with no errors
 38278                                  
 38279                                  	; MSDOS 6.0
 38280                                  ;Extended Open hooks check
 38281                                  OpenE2:					;AN000;;EO.
 38282 000070AC 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 38283 000070AF 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 38284 000070B1 EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 38285                                  
 38286                                  ;	Extended Open hooks check
 38287                                  ;
 38288                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 38289                                  
 38290                                  OpenClean:
 38291 000070B3 5B                      	pop	bx			; clean off stack
 38292                                  OpenE:
 38293                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 38294 000070B4 C7040000                	mov	word [SI],0
 38295 000070B8 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 38296 000070BD C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 38297 000070C0 EB02                    	JMP	SHORT OpenCritLeave
 38298                                  
 38299                                  OpenFail:
 38300 000070C2 FB                      	STI
 38301 000070C3 59                      	pop	cx			; Clean stack
 38302                                  OpenCritLeave:
 38303 000070C4 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 38304                                  
 38305                                  	; MSDOS 6.0
 38306                                  ; File Tagging DOS 4.00
 38307 000070CB 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 38308                                  					;AN000;;FT. code page mismatch
 38309 000070D1 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 38310 000070D3 E9BF95                  	jmp	From_GetSet		;AN000;;FT. yes
 38311                                  NORERR: 				;AN000;
 38312                                  ; File Tagging DOS 4.00
 38313                                  
 38314 000070D6 E9B495                  	jmp	SYS_RET_ERR		; no free, return error
 38315                                  
 38316                                  ; MSDOS 2.11
 38317                                  ;BREAK <$CREAT - creat a new file and open him for input>
 38318                                  ;----------------------------------------------------------------------------
 38319                                  ;   Assembler usage:
 38320                                  ;           LDS     DX, name
 38321                                  ;           MOV     AH, Creat
 38322                                  ;           MOV     CX, access
 38323                                  ;           INT     21h
 38324                                  ;       ; AX now has the handle
 38325                                  ;
 38326                                  ;   Error returns:
 38327                                  ;           AX = error_access_denied
 38328                                  ;              = error_path_not_found
 38329                                  ;              = error_too_many_open_files
 38330                                  ;----------------------------------------------------------------------------
 38331                                  
 38332                                  ; MSDOS 6.0
 38333                                  ;	BREAK <$Creat - create a brand-new file>
 38334                                  ;----------------------------------------------------------------------------
 38335                                  ;
 38336                                  ;**	$Creat - Create a File
 38337                                  ;
 38338                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 38339                                  ;	initial attributes contained in CX
 38340                                  ;
 38341                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 38342                                  ;		(CX) = initial attributes
 38343                                  ;	EXIT	'C' set if error
 38344                                  ;		  (ax) = error code
 38345                                  ;		'C' clear if OK
 38346                                  ;		  (ax) = file handle
 38347                                  ;	USES	all
 38348                                  ;
 38349                                  ;----------------------------------------------------------------------------
 38350                                  
 38351                                  _$CREAT:
 38352 000070D9 51                      	push	cx			; Save attributes on stack
 38353 000070DA B9[E02A]                	mov	CX,DOS_CREATE		; routine to call
 38354                                  AccessSet:
 38355                                  	;mov	byte [ss:SATTRIB],6
 38356 000070DD 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 38357                                  	; 10/08/2018
 38358 000070E3 E927FF                  	JMP	AccessFile		; use good ol' open
 38359                                  
 38360                                  ; MSDOS 6.0 (MSDOS 3.3)
 38361                                  ;	BREAK <$CHMOD - change file attributes>
 38362                                  ;----------------------------------------------------------------------------
 38363                                  ;
 38364                                  ;**	$CHMOD - Change File Attributes
 38365                                  ;
 38366                                  ;   Assembler usage:
 38367                                  ;	    LDS     DX, name
 38368                                  ;	    MOV     CX, attributes
 38369                                  ;	    MOV     AL,func (0=get, 1=set)
 38370                                  ;	    INT     21h
 38371                                  ;   Error returns:
 38372                                  ;	    AX = error_path_not_found
 38373                                  ;	    AX = error_access_denied
 38374                                  ;
 38375                                  ;----------------------------------------------------------------------------
 38376                                  
 38377                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38378                                  _$CHMOD:
 38379                                  	; 05/08/2018 - Retro DOS v3.0
 38380                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 38381 000070E6 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38382 000070E9 50                      	push	ax
 38383 000070EA 51                      	push	cx			; save function and attributes
 38384 000070EB 89D6                    	MOV	SI,DX			; get things in appropriate places
 38385 000070ED E8A6FB                  	call	TransPathSet		; get correct path
 38386 000070F0 59                      	pop	cx
 38387 000070F1 58                      	pop	ax			; and get function and attrs back
 38388 000070F2 7257                    	JC	short ChModErr		; errors get mapped to path not found
 38389 000070F4 16                      	push	ss			; set up for later possible calls
 38390 000070F5 1F                      	pop	ds
 38391 000070F6 803E[7A05]FF            	CMP	byte [CMETA],-1
 38392 000070FB 754E                    	JNZ	short ChModErr
 38393                                  	;mov	byte [SATTRIB],16h
 38394 000070FD C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 38395 00007102 2C01                    	SUB	AL,1			; fast way to discriminate
 38396 00007104 720B                    	JB	short ChModGet		; 0 -> go get value
 38397 00007106 7417                    	JZ	short ChModSet		; 1 -> go set value
 38398                                  	;mov	byte [EXTERR_LOCUS],1
 38399 00007108 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 38400                                  	;mov	al,1
 38401 0000710D B001                    	mov	al,error_invalid_function ; bad value
 38402                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38403                                  chmod_errj:	
 38404                                  	;;jmp	SYS_RET_ERR
 38405                                  	;jmp	short ChModE	
 38406 0000710F EBC5                    	jmp	short NORERR	; 06/12/2022
 38407                                  ChModGet:
 38408 00007111 E8B6B8                  	call	GET_FILE_INFO		; suck out the ol' info
 38409 00007114 7237                    	JC	short ChModE		; error codes are already set for ret
 38410 00007116 E8B193                  	call	Get_User_Stack		; point to user saved vaiables
 38411                                  	;mov	[SI+4],ax
 38412 00007119 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 38413                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38414                                  OpenOkj2:
 38415                                  	; 17/12/2022
 38416                                  	;;jmp	SYS_RET_OK		; say sayonara
 38417                                  	;jmp	short OpenOkj
 38418                                  	; 25/06/2019
 38419 0000711C E96895                  	jmp	SYS_RET_OK_clc
 38420                                  
 38421                                  ChModSet:
 38422 0000711F 89C8                    	MOV	AX,CX			; get attrs in position
 38423 00007121 E804B9                  	call	SET_FILE_ATTRIBUTE	; go set
 38424 00007124 7227                    	JC	short ChModE		; errors are set
 38425                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38426                                  	;jmp	SYS_RET_OK
 38427                                  OpenOkj3:
 38428                                  	;jmp	short OpenOkj2
 38429                                  	; 17/12/2022
 38430 00007126 E95B95                  	jmp	SYS_RET_OK
 38431                                  
 38432                                  ; 17/12/2022
 38433                                  %if 0
 38434                                  ChModErr:
 38435                                  NotFound:	; 17/12/2022
 38436                                  	;mov	al,3
 38437                                  	mov	al,error_path_not_found
 38438                                  ChModE:
 38439                                  UnlinkE:	; 17/12/2022
 38440                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38441                                  	;;jmp	SYS_RET_ERR
 38442                                  	;jmp	short chmod_errj
 38443                                  	; 17/12/2022
 38444                                  	jmp	short NORERR
 38445                                  %endif
 38446                                  
 38447                                  ; 22/05/2019 - Retro DOS v4.0
 38448                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 38449                                  
 38450                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38451                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 38452                                  
 38453                                  ;	BREAK <$UNLINK - delete a file entry>
 38454                                  ;----------------------------------------------------------------------------
 38455                                  ;
 38456                                  ;**	$UNLINK - Delete a File
 38457                                  ;
 38458                                  ;
 38459                                  ;	Assembler usage:
 38460                                  ;	    LDS     DX, name
 38461                                  ;	    IF VIA SERVER DOS CALL
 38462                                  ;	     MOV     CX,SEARCH_ATTRIB
 38463                                  ;	    MOV     AH, Unlink
 38464                                  ;	    INT     21h
 38465                                  ;
 38466                                  ;	ENTRY	(ds:dx) = path name
 38467                                  ;		(cx) = search_attribute, if via server_dos
 38468                                  ;	EXIT	'C' clear if no error
 38469                                  ;		'C' set if error
 38470                                  ;		  (ax) = error code
 38471                                  ;			= error_file_not_found
 38472                                  ;			= error_access_denied
 38473                                  ;
 38474                                  ;----------------------------------------------------------------------------
 38475                                  
 38476                                  _$UNLINK:
 38477 00007129 51                      	push	cx			; Save possible CX input parm
 38478 0000712A 89D6                    	MOV	SI,DX			; Point at input string
 38479 0000712C BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 38480 0000712F E864FB                  	call	TransPathSet		; go get normalized path
 38481 00007132 59                      	pop	cx
 38482 00007133 7216                    	JC	short ChModErr		; badly formed path
 38483 00007135 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 38484 0000713B 750E                    	JNZ	short NotFound
 38485 0000713D 16                      	push	ss
 38486 0000713E 1F                      	pop	ds
 38487                                  	;mov	ch,6
 38488 0000713F B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 38489 00007141 E81C01                  	call	SetAttrib
 38490 00007144 E871B4                  	call	DOS_DELETE		; remove that file
 38491                                  	;JC	short UnlinkE 		; error is there
 38492                                  	; 17/12/2022
 38493 00007147 728D                    	jc	short NORERR
 38494                                  
 38495                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38496                                  UnlinkOk:
 38497                                  	;jmp	SYS_RET_OK		; okey doksy
 38498 00007149 EBDB                    	jmp	short OpenOkj3
 38499                                  
 38500                                  	; 17/12/2022
 38501                                  ChModErr:	; 17/12/2022
 38502                                  NotFound:
 38503                                  	;mov	al,3
 38504 0000714B B003                    	MOV	AL,error_path_not_found
 38505                                  ChModE:		; 17/12/2022
 38506                                  UnlinkE:
 38507                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38508                                  	;;jmp	SYS_RET_ERR		; bye
 38509                                  	;jmp	short ChModE
 38510                                  	; 17/12/2022
 38511 0000714D EB87                    	jmp	short NORERR
 38512                                  
 38513                                  ;BREAK <$RENAME - move directory entries around>
 38514                                  ;----------------------------------------------------------------------------
 38515                                  ;
 38516                                  ;   Assembler usage:
 38517                                  ;	    LDS     DX, source
 38518                                  ;	    LES     DI, dest
 38519                                  ;	    IF VIA SERVER DOS CALL
 38520                                  ;	      MOV   CX,SEARCH_ATTRIB
 38521                                  ;	    MOV     AH, Rename
 38522                                  ;	    INT     21h
 38523                                  ;
 38524                                  ;   Error returns:
 38525                                  ;	    AX = error_file_not_found
 38526                                  ;	       = error_not_same_device
 38527                                  ;	       = error_access_denied
 38528                                  ;
 38529                                  ;----------------------------------------------------------------------------
 38530                                  
 38531                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38532                                  _$RENAME:
 38533                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38534 0000714F 51                      	push	cx
 38535 00007150 1E                      	push	ds
 38536 00007151 52                      	push	dx			; save source and possible CX arg
 38537 00007152 06                      	PUSH	ES
 38538 00007153 1F                      	POP	DS			; move dest to source
 38539 00007154 89FE                    	MOV	SI,DI			; save for offsets
 38540 00007156 BF[3E04]                	MOV	DI,RENBUF
 38541 00007159 E83AFB                  	call	TransPathSet		; munge the paths
 38542 0000715C 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 38543 00007161 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 38544 00007166 5E                      	pop	si
 38545 00007167 1F                      	pop	ds
 38546 00007168 59                      	pop	cx			; get back source and possible CX arg
 38547                                  epjc2:	
 38548 00007169 72E0                    	JC	short ChModErr		; get old error
 38549 0000716B 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 38550 00007171 75D8                    	JNZ	short NotFound
 38551 00007173 51                      	push	cx			; Save possible CX arg
 38552 00007174 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38553 00007177 E81CFB                  	call	TransPathSet		; wham
 38554 0000717A 59                      	pop	cx
 38555 0000717B 72EC                    	JC	short epjc2
 38556 0000717D 16                      	push	ss
 38557 0000717E 1F                      	pop	ds
 38558 0000717F 803E[7A05]FF            	CMP	byte [CMETA],-1
 38559 00007184 72C5                    	JB	short NotFound
 38560                                  
 38561                                  	; MSDOS 6.0
 38562 00007186 FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 38563 0000718A FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 38564 0000718E BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 38565 00007191 16                      	PUSH	SS			   ;AN000;;MS.
 38566 00007192 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 38567 00007193 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 38568                                  rnloop: 				   ;AN000;
 38569 00007195 E874FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 38570 00007198 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 38571 0000719A E88CA0                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 38572 0000719D 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 38573 0000719F FEC0                    	INC	AL			   ;AN000;;MS.	next
 38574 000071A1 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 38575                                  rnerr:					   ;AN000;
 38576 000071A3 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 38577                                  	;error	error_current_directory    ;AN000;;MS.
 38578 000071A6 B010                    	mov	al,error_current_directory 
 38579                                  	;jmp	SYS_RET_ERR
 38580                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38581 000071A8 EBA3                    	jmp	short UnlinkE
 38582                                  dorn:					   ;AN000;
 38583 000071AA 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38584 000071AF 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38585                                  
 38586 000071B4 16                      	push	ss
 38587 000071B5 1F                      	pop	ds
 38588                                  
 38589                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38590                                  	;mov	ch,16h
 38591 000071B6 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 38592                                  					; rename appropriate files
 38593 000071B8 E8A500                  	call	SetAttrib
 38594 000071BB E8D8B5                  	call	DOS_RENAME		; do the deed
 38595 000071BE 728D                    	JC	short UnlinkE 		; errors
 38596                                  
 38597                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38598                                  	;jmp	SYS_RET_OK
 38599 000071C0 EB87                    	jmp	short UnlinkOk
 38600                                  
 38601                                  
 38602                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38603                                  
 38604                                  ; 14/07/2018 - Retro DOS v3.0
 38605                                  ; MSDOS 3.3 (& MSDOS 6.0)
 38606                                  
 38607                                  ;Break <$CreateNewFile - Create a new directory entry>
 38608                                  ;----------------------------------------------------------------------------
 38609                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 38610                                  ;	was no previous directory entry, and fail if a directory entry with
 38611                                  ;	the same name existed previously.
 38612                                  ;
 38613                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 38614                                  ;		CX contains default file attributes
 38615                                  ;   Outputs:	Carry Clear:
 38616                                  ;		    AX has file handle opened for read/write
 38617                                  ;		Carry Set:
 38618                                  ;		    AX has error code
 38619                                  ;   Registers modified: All
 38620                                  ;----------------------------------------------------------------------------
 38621                                  
 38622                                  _$CreateNewFile:
 38623 000071C2 51                      	push	cx			; Save attributes on stack
 38624 000071C3 B9[AD2B]                	MOV	CX,DOS_Create_New	; routine to call
 38625 000071C6 E914FF                  	JMP	AccessSet		; use good ol' open
 38626                                  
 38627                                  ;**	BinToAscii - convert a number to a string.
 38628                                  ;----------------------------------------------------------------------------
 38629                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 38630                                  ;	This routine is used to generate temp file names so we don't spend
 38631                                  ;	the time and code needed for a true hex number, we just use
 38632                                  ;	A thorugh O.
 38633                                  ;
 38634                                  ;	ENTRY	(ax) = value
 38635                                  ;		(es:di) = destination
 38636                                  ;	EXIT	(es:di) updated by 4
 38637                                  ;	USES	cx, di, flags
 38638                                  ;----------------------------------------------------------------------------
 38639                                  
 38640                                  ; MSDOS 3.3
 38641                                  ;BinToAscii:
 38642                                  ;	mov     cx,4
 38643                                  ;bta5:
 38644                                  ;	push    cx
 38645                                  ;	mov     cl,4
 38646                                  ;	rol     ax,cl
 38647                                  ;	push    ax
 38648                                  ;	and     al,0Fh
 38649                                  ;	add     al,'0'
 38650                                  ;	cmp     al,'9'
 38651                                  ;	jbe     short bta6
 38652                                  ;	add     al,7
 38653                                  ;bta6: 
 38654                                  ;	stosb
 38655                                  ;	pop     ax
 38656                                  ;	pop     cx
 38657                                  ;	loop    bta5
 38658                                  ;	retn
 38659                                  
 38660                                  ; MSDOS 6.0
 38661                                  BinToAscii:
 38662 000071C9 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 38663                                  bta5:	
 38664 000071CC D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 38665 000071CE 50                      	push	ax			; preserve remainder of digits
 38666 000071CF 240F                    	AND	AL,0Fh			; grab low nibble
 38667 000071D1 0441                    	ADD	AL,'A'			; turn into ascii
 38668 000071D3 AA                      	STOSB				; drop in the character
 38669 000071D4 58                      	pop	ax			; (ax) = shifted number
 38670 000071D5 FECD                    	dec	ch
 38671 000071D7 75F3                    	jnz	short bta5		; process 4 digits
 38672 000071D9 C3                      	retn
 38673                                  
 38674                                  ;Break	<$CreateTempFile - create a unique name>
 38675                                  ;----------------------------------------------------------------------------
 38676                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 38677                                  ;	Method used is to get the current time, convert to a name and attempt
 38678                                  ;	a create new. Repeat until create new succeeds.
 38679                                  ;
 38680                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 38681                                  ;		CX  contains default attributes
 38682                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 38683                                  ;		AX has handle
 38684                                  ;   Registers modified: all
 38685                                  ;----------------------------------------------------------------------------
 38686                                  
 38687                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38688                                  
 38689                                  _$CreateTempFile:
 38690                                  	;Enter
 38691 000071DA 55                      	push	bp
 38692 000071DB 89E5                    	mov	bp,sp
 38693                                  
 38694                                  	;LocalVar  EndPtr,DWORD
 38695                                  	;LocalVar  FilPtr,DWORD
 38696                                  	;LocalVar  Attr,WORD
 38697                                  
 38698 000071DD 83EC0A                  	sub	sp,10
 38699                                  
 38700                                  	;test	cx,0FFD8h
 38701 000071E0 F7C1D8FF                	test	CX,~attr_changeable
 38702 000071E4 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 38703                                  
 38704                                  ; We need this "hook" here to detect these cases (like user sets one both of
 38705                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 38706                                  ; below. The code loops on error_access_denied, but if one of the non
 38707                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 38708                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 38709                                  ; need to detect these cases before getting to the loop.
 38710                                  
 38711                                  	;mov	ax, 5
 38712 000071E6 B80500                  	MOV	AX,error_access_denied
 38713 000071E9 EB69                    	JMP	SHORT SETTMPERR
 38714                                  
 38715                                  OKatts:
 38716                                  	;MOV	attr,CX 		; save attribute
 38717 000071EB 894EF6                  	mov     [bp-10],cx
 38718                                  	;MOV	FilPtrL,DX		; pointer to file
 38719 000071EE 8956F8                  	mov	[bp-8],dx
 38720                                  	;MOV	FilPtrH,DS
 38721 000071F1 8C5EFA                  	mov	[bp-6],ds
 38722                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 38723 000071F4 8C5EFE                  	mov	[bp-2],ds
 38724 000071F7 1E                      	PUSH	DS
 38725 000071F8 07                      	POP	ES			; destination for nul search
 38726 000071F9 89D7                    	MOV	DI,DX
 38727 000071FB 89F9                    	MOV	CX,DI
 38728 000071FD F7D9                    	NEG	CX			; number of bytes remaining in segment
 38729                                  	; MSDOS 6.0
 38730 000071FF 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 38731 00007201 7501                    	JNZ	short okok		;AN000;MS. no
 38732                                  	;MOV	CX,-1			;AN000;MS.
 38733                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38734                                  	; 17/12/2022
 38735 00007203 49                      	dec	cx  ; mov cx,-1
 38736                                  	;mov	cx,-1 ; 0FFFh
 38737                                  okok:					;AN000;
 38738 00007204 31C0                    	XOR	AX,AX			;AN000;
 38739 00007206 F2AE                    	REPNZ	SCASB			;AN000;
 38740                                  					;AN000;
 38741 00007208 4F                      	DEC	DI			; point back to the null
 38742 00007209 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 38743 0000720D E895DF                  	call	PATHCHRCMP		; Is it a path separator?
 38744 00007210 7403                    	JZ	short SETENDPTR		; Yes
 38745                                  STOREPTH:
 38746 00007212 B05C                    	MOV	AL,'\'
 38747 00007214 AA                      	STOSB				; Add a path separator (and INC DI)
 38748                                  SETENDPTR:
 38749                                  	;MOV	EndPtrL,DI		; pointer to the tail
 38750 00007215 8856FC                  	mov	[bp-4],dl
 38751                                  CreateLoop:
 38752 00007218 16                      	push	ss			; let ReadTime see variables
 38753 00007219 1F                      	pop	ds
 38754 0000721A 55                      	push	bp
 38755 0000721B E85299                  	call	READTIME		; go get time
 38756 0000721E 5D                      	pop	bp
 38757                                  ;
 38758                                  ; Time is in CX:DX. Go drop it into the string.
 38759                                  ;
 38760                                  	;les	di,EndPtr		; point to the string
 38761 0000721F C47EFC                  	les	di,[BP-4]
 38762 00007222 89C8                    	mov	ax,cx
 38763 00007224 E8A2FF                  	call	BinToAscii		; store upper word
 38764 00007227 89D0                    	mov	ax,dx
 38765 00007229 E89DFF                  	call	BinToAscii		; store lower word
 38766 0000722C 30C0                    	xor	al,al
 38767 0000722E AA                      	STOSB				; nul terminate
 38768                                  	;LDS	DX,FilPtr		; get name
 38769 0000722F C556F8                  	lds	dx,[bp-8]
 38770                                  	;MOV	CX,Attr 		; get attr
 38771 00007232 8B4EF6                  	mov	cx,[bp-10]
 38772 00007235 55                      	push	bp
 38773 00007236 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 38774 00007239 5D                      	pop	bp
 38775 0000723A 7319                    	JNC	short CreateDone	; failed, go try again
 38776                                  
 38777                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 38778                                  ; error and figure out what to do.
 38779                                  
 38780                                  	;; MSDOS 3.3			; M049 - start
 38781                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 38782                                  ;;	cmp	al,error_file_exists
 38783                                  ;;	jz	short CreateLoop	; file existed => try with new name
 38784                                  ;;	cmp	al,error_access_denied
 38785                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 38786                                  
 38787                                  	; MSDOS 6.0
 38788                                  	;cmp	al,50h
 38789 0000723C 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 38790 0000723E 74D8                    	JZ	short CreateLoop	; Y: try again
 38791                                  	;cmp	al,5
 38792 00007240 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 38793 00007242 7510                    	JNZ	short SETTMPERR		; N: Error out
 38794                                  					; Y: Check to see if we got this due
 38795                                  					;    to the network drive. Note that
 38796                                  					;    the redir will set the exterr
 38797                                  					;    to error_cannot_make if this is 
 38798                                  					;    so. 
 38799 00007244 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 38800                                  					; See if it's REALLY an att mismatch
 38801 0000724A 7408                    	je	short SETTMPERR		; no, network error, stop
 38802                                  ;M070
 38803                                  ; If the user failed on an I24, we do not want to try again
 38804                                  ;
 38805 0000724C 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 38806                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 38807                                  
 38808                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 38809                                  	; 17/12/2022
 38810 00007252 75C4                    	jne	short CreateLoop ; 10/06/2019 
 38811                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38812                                  	;jz	short SETTMPERR
 38813                                  	;jmp	short CreateLoop
 38814                                  
 38815                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 38816                                  					; M049 - end
 38817                                  SETTMPERR:
 38818 00007254 F9                      	STC
 38819                                  CreateDone:
 38820                                  	;Leave
 38821 00007255 89EC                    	mov	sp,bp
 38822 00007257 5D                      	pop	bp
 38823 00007258 7203                    	JC	short CreateFail
 38824 0000725A E92794                  	jmp	SYS_RET_OK		; success!
 38825                                  CreateFail:
 38826 0000725D E92D94                  	jmp	SYS_RET_ERR
 38827                                  
 38828                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 38829                                  ;   (CH) or to the value in CL if the current system call is through
 38830                                  ;   serverdoscall.
 38831                                  ;
 38832                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 38833                                  ;		fSharing == TRUE => set sattrib to CL
 38834                                  ;   Outputs:	none
 38835                                  ;   Registers changed:	CX
 38836                                  
 38837                                  SetAttrib:
 38838 00007260 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 38839 00007266 7502                    	jnz	short Set
 38840 00007268 88E9                    	mov	cl,ch
 38841                                  Set:
 38842 0000726A 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 38843 0000726F C3                      	retn
 38844                                  
 38845                                  ; 14/07/2018 - Retro DOS v3.0
 38846                                  ; MSDOS 6.0
 38847                                  
 38848                                  ; 29/04/2019 - Retro DOS v4.0
 38849                                  
 38850                                  ;Break	<Extended_Open- Extended open the file>
 38851                                  ;----------------------------------------------------------------------------
 38852                                  ; Input: AL= 0 reserved  AH=6CH
 38853                                  ;	 BX= mode
 38854                                  ;	 CL= create attribute  CH=search attribute (from server)
 38855                                  ;	 DX= flag
 38856                                  ;	 DS:SI = file name
 38857                                  ;	 ES:DI = parm list
 38858                                  ;			   DD  SET EA list (-1) null
 38859                                  ;			   DW  n  parameters
 38860                                  ;			   DB  type (TTTTTTLL)
 38861                                  ;			   DW  IOMODE
 38862                                  ; Function: Extended Open
 38863                                  ; Output: carry clear
 38864                                  ;		     AX= handle
 38865                                  ;		     CX=1 file opened
 38866                                  ;			2 file created/opened
 38867                                  ;			3 file replaced/opened
 38868                                  ;	  carry set: AX has error code
 38869                                  ;----------------------------------------------------------------------------
 38870                                  
 38871                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38872                                  _$Extended_Open:			  ;AN000;
 38873                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 38874 00007270 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 38875 00007275 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 38876                                  	; 17/12/2022
 38877 0000727C F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 38878                                  	;;test	dx,0FE00h
 38879                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 38880 0000727F 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 38881 00007281 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 38882 00007283 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 38883 00007286 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 38884                                  	;and	dl,0Fh
 38885 00007288 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 38886 0000728B 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 38887 0000728E 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 38888                                  	;and	ah,0F0h
 38889 00007290 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 38890 00007293 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 38891 00007296 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 38892                                  
 38893 00007298 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 38894 0000729D 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 38895 000072A2 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 38896 000072A7 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 38897 000072AC 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 38898 000072B1 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 38899 000072B6 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 38900 000072BB 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 38901 000072C0 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 38902 000072C2 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 38903 000072C4 EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 38904                                  ext_inval2:				  ;AN000;;EO.
 38905                                  	;mov	al,1
 38906 000072C6 B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 38907                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38908                                  eo_err:
 38909                                  	;jmp	SYS_RET_ERR
 38910 000072C8 EB93                    	jmp	short CreateFail
 38911                                  
 38912                                  ext_inval_parm:				  ;AN000;EO..
 38913 000072CA 59                      	POP	CX			  ;AN000;EO..  pop up satck
 38914 000072CB 5E                      	POP	SI			  ;AN000;EO..
 38915                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 38916                                  	;mov	al,13
 38917 000072CC B00D                    	mov	al,error_invalid_data
 38918                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38919                                  	;;jmp	SYS_RET_ERR
 38920                                  	;jmp	short eo_err
 38921                                  	; 17/12/2022
 38922 000072CE EB8D                    	jmp	short CreateFail
 38923                                  
 38924                                  	; 17/12/2022	
 38925                                  ;error_return:				  ;AN000;EO.
 38926                                  ;	retn				  ;AN000;EO.. return with error
 38927                                  
 38928                                  goopen2:				  ;AN000;
 38929                                  	; 17/12/2022
 38930                                  	;test	bh,20h				 
 38931 000072D0 F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 38932                                  	;;test	bx,2000h
 38933                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 38934 000072D3 7406                    	JZ	short goopen		  ;AN000;EO.. no
 38935                                  	;or	byte [SS:EXTOPEN_ON],2
 38936 000072D5 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 38937                                  goopen:					  ;AN000;
 38938                                  	;or	byte [SS:EXTOPEN_ON],1 
 38939 000072DB 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 38940                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 38941                                  	; 18/12/2022
 38942 000072E1 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 38943                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 38944 000072E7 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 38945 000072ED 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 38946 000072EF E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 38947 000072F2 723F                    	JC	short error_return	  ;AN000;;EO. error
 38948                                  
 38949 000072F4 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 38950 000072FA 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 38951                                  	;mov	word [SS:EXTOPEN_FLAG],2
 38952 000072FC 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 38953 00007303 EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 38954                                  
 38955                                  	; 17/12/2022
 38956                                  ;ok_return2:
 38957                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 38958                                  
 38959                                  chknext:
 38960                                  	; 17/12/2022
 38961 00007305 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 38962                                  	;;test	word [SS:EXTOPEN_FLAG],1
 38963                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 38964 0000730B 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 38965 0000730D E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 38966 00007310 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 38967 00007312 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 38968 00007318 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 38969 0000731A 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 38970 00007321 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 38971 00007327 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 38972 00007329 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 38973 00007330 EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 38974                                  error_return2:
 38975 00007332 F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 38976                                  error_return:	 ;17/12/2022
 38977 00007333 C3                      	retn				  ;AN000;;EO. return with error
 38978                                  
 38979                                  	; 17/12/2022
 38980                                  ok_return:
 38981                                  ok_return2:
 38982 00007334 E94D93                  	jmp	SYS_RET_OK
 38983                                  
 38984                                  exist_open:				  ;AN000;
 38985 00007337 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 38986 0000733D 7402                    	jz	short noserver		  ;AN000;;EO. no
 38987 0000733F 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 38988                                  noserver:
 38989 00007341 E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 38990 00007344 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 38991 00007346 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 38992 0000734C 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 38993                                  local_extopen:
 38994                                  	;cmp	ax,2
 38995 0000734E 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 38996 00007351 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 38997                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 38998                                  	; 17/12/2022
 38999 00007353 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 39000                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 39001                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 39002                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 39003                                  	; 17/12/2022
 39004 00007359 745D                    	jz	short extexit ; 10/06/2019
 39005                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39006                                  	;jnz	short do_creat
 39007                                  	;jmp	short extexit
 39008                                  do_creat:
 39009 0000735B 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 39010 00007360 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 39011 00007365 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 39012 00007367 E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 39013 0000736A 724C                    	JC	short extexit 		  ;AN000;;EO. error
 39014                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39015 0000736C 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39016                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 39017 00007373 EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39018                                  
 39019                                  ext_ok:
 39020 00007375 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 39021 0000737B 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 39022                                  	;mov	word [SS:EXTOPEN_FLAG],1
 39023 0000737D 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 39024                                  setXAttr:
 39025                                  	; 29/04/2019
 39026 00007384 50                      	push	ax
 39027 00007385 E84291                  	call	Get_User_Stack		  ;AN000;;EO.
 39028 00007388 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 39029                                  	;mov	[si+4],ax
 39030 0000738C 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 39031 0000738F 58                      	pop	ax			  ;AN000;;EO.
 39032 00007390 8904                    	mov	[si],ax
 39033                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 39034                                  	; 17/12/2022
 39035 00007392 EBA0                    	jmp	short ok_return
 39036                                  ;ok_return:				  ;AN000;
 39037                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 39038                                  
 39039                                  extexit2:				  ;AN000; ERROR RECOVERY
 39040 00007394 5B                      	POP	BX			  ;AN000;EO. close the handle
 39041 00007395 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 39042                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 39043 00007396 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39044                                  					  ;AN000;EO. from create;smr;SS Override
 39045 0000739C 750C                    	JNZ	short justopen		  ;AN000;EO.
 39046 0000739E 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 39047 000073A3 C514                    	LDS	DX,[SI]			  ;AN000;EO.
 39048 000073A5 E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 39049 000073A8 EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 39050                                  
 39051                                  justopen:				  ;AN000;
 39052 000073AA E881F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 39053                                  reserror:				  ;AN000;
 39054 000073AD 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 39055 000073AE EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 39056                                  
 39057                                  ext_file_unfound:			  ;AN000;
 39058                                  	;mov	ax,2
 39059 000073B0 B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 39060 000073B3 EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 39061                                  ext_inval:				  ;AN000;
 39062                                  	;mov	ax,1
 39063 000073B5 B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 39064                                  lockoperr:	; 17/12/2022
 39065                                  extexit:
 39066 000073B8 E9D292                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 39067                                  
 39068                                  ;============================================================================
 39069                                  ; LOCK.ASM, MSDOS 6.0, 1991
 39070                                  ;============================================================================
 39071                                  ; 14/07/2018 - Retro DOS v3.0
 39072                                  ; 22/05/2019 - Retro DOS v4.0
 39073                                  
 39074                                  ;BREAK <$LockOper - Lock Calls>
 39075                                  ;----------------------------------------------------------------------------
 39076                                  ;
 39077                                  ;   Assembler usage:
 39078                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 39079                                  ;	    MOV     CX, OffsetHigh
 39080                                  ;	    MOV     DX, OffsetLow
 39081                                  ;	    MOV     SI, LengthHigh
 39082                                  ;	    MOV     DI, LengthLow
 39083                                  ;	    MOV     AH, LockOper
 39084                                  ;	    MOV     AL, Request
 39085                                  ;	    INT     21h
 39086                                  ;
 39087                                  ;   Error returns:
 39088                                  ;	    AX = error_invalid_handle
 39089                                  ;	       = error_invalid_function
 39090                                  ;	       = error_lock_violation
 39091                                  ;
 39092                                  ;   Assembler usage:
 39093                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 39094                                  ;
 39095                                  ;				    0? lock all
 39096                                  ;				    8? lock write
 39097                                  ;				    ?2 lock multiple
 39098                                  ;				    ?3 unlock multiple
 39099                                  ;				    ?4 lock/read
 39100                                  ;				    ?5 write/unlock
 39101                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 39102                                  ;	    MOV     BX, Handle
 39103                                  ;	    MOV     CX, count or size
 39104                                  ;	    LDS     DX, buffer
 39105                                  ;	    INT     21h
 39106                                  ;
 39107                                  ;   Error returns:
 39108                                  ;	    AX = error_invalid_handle
 39109                                  ;	       = error_invalid_function
 39110                                  ;	       = error_lock_violation
 39111                                  ;
 39112                                  ;----------------------------------------------------------------------------
 39113                                  
 39114                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39115                                  _$LockOper:
 39116 000073BB 3C01                    	CMP	AL,1
 39117 000073BD 770B                    	JA	short lock_bad_func
 39118                                  
 39119 000073BF 57                      	PUSH	DI			       ; Save LengthLow
 39120 000073C0 E8D0F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 39121 000073C3 731D                    	JNC	short lock_do 		       ; have valid handle
 39122 000073C5 5F                      	POP	DI			       ; Clean stack
 39123                                  	;mov	al,6
 39124 000073C6 B006                    	mov	al,error_invalid_handle
 39125                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39126                                  ;lockoperr:
 39127                                  	;jmp	SYS_RET_ERR
 39128                                  	; 17/12/2022
 39129 000073C8 EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 39130                                  
 39131                                  lock_bad_func:
 39132                                  	;mov	byte [ss:EXTERR_LOCUS],1
 39133 000073CA 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 39134                                  	;mov	al,1
 39135 000073D0 B001                    	mov	al,error_invalid_function
 39136                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39137                                  lockoperrj:
 39138                                  	;jmp	SYS_RET_ERR
 39139 000073D2 EBE4                    	jmp	short lockoperr
 39140                                  
 39141                                  	; 22/05/2019 - Retro DOS v4.0
 39142                                  
 39143                                  	; MSDOS 6.0 
 39144                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 39145                                  ; Dead code deleted, MD, 23 Mar 90
 39146                                  
 39147                                  ;lock_do:
 39148                                  ;	; MSDOS 3.3
 39149                                  ;	or	al,al
 39150                                  ;	pop	ax
 39151                                  ;	jz	short DOS_Lock
 39152                                  ;DOS_Unlock:
 39153                                  ;	;test	word [es:di+5],8000h
 39154                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39155                                  ;	JZ	short LOCAL_UNLOCK
 39156                                  ;	push    ax
 39157                                  ;	mov     ax,110Bh
 39158                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39159                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39160                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 39161                                  ;			; SFT DPB field -> DPB of drive containing file
 39162                                  ;			; Return: CF set error
 39163                                  ;	pop     bx
 39164                                  ;	jmp     short ValChk
 39165                                  ;
 39166                                  ;LOCAL_UNLOCK:
 39167                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39168                                  ;ValChk:
 39169                                  ;	JNC	short Lock_OK
 39170                                  ;lockerror:
 39171                                  ;	jmp	SYS_RET_ERR
 39172                                  ;Lock_OK:
 39173                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39174                                  ;	jmp	SYS_RET_OK
 39175                                  ;DOS_Lock:
 39176                                  ;	;test	word [es:di+5],8000h
 39177                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39178                                  ;	JZ	short LOCAL_LOCK
 39179                                  ;	;CallInstall NET_XLock,MultNET,10
 39180                                  ;	mov     ax, 110Ah
 39181                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39182                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39183                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 39184                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39185                                  ;			; Return: CF set error
 39186                                  ;	JMP	short ValChk
 39187                                  ;
 39188                                  ;LOCAL_LOCK:
 39189                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39190                                  ;	JMP	short ValChk
 39191                                  
 39192                                  ; 17/12/2022
 39193                                  LOCAL_UNLOCK:
 39194                                  	; MSDOS 3.3
 39195                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39196                                  	; MSDOS 6.0
 39197 000073D4 FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39198                                  ValChk:
 39199 000073D8 7302                    	JNC	short Lock_OK
 39200                                  lockerror:
 39201                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39202                                  	;;jmp	SYS_RET_ERR
 39203                                  	;jmp	short lockoperrj
 39204                                  	; 17/12/2022
 39205 000073DA EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 39206                                  Lock_OK:
 39207                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39208                                  	; 10/06/2019
 39209 000073DC A1[0C06]                	mov	ax,[TEMP_VAR]
 39210 000073DF E9A292                  	jmp	SYS_RET_OK
 39211                                  
 39212                                  	; 22/05/2019
 39213                                  lock_do:
 39214                                  	; MSDOS 6.0
 39215 000073E2 89C3                    	MOV	BX,AX				; save AX
 39216 000073E4 BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 39217                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39218                                  	;;mov	[bp+0],dx
 39219                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 39220                                  	; 15/12/2022
 39221 000073E7 895600                  	mov	[bp],dx
 39222                                  	;mov	[bp+2],cx
 39223 000073EA 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 39224 000073ED 59                      	POP	CX				; get low length
 39225                                  	;mov	[bp+4],cx
 39226 000073EE 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 39227                                  	;mov	[bp+6],si
 39228 000073F1 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 39229 000073F4 B90100                  	MOV	CX,1				; one range
 39230                                  
 39231                                  ;	PUSH	CS				;
 39232                                  ;	POP	DS				; DS:DX points to
 39233                                  
 39234 000073F7 16                      	push	ss
 39235 000073F8 1F                      	pop	ds
 39236                                  
 39237 000073F9 89EA                    	MOV	DX,BP				; Lock_Buffer
 39238                                  	;test	al,1
 39239 000073FB A801                    	TEST	AL,UNLOCK_ALL			; function 1
 39240                                  	;JNZ	short DOS_Unlock		; yes
 39241                                  	;JMP	short DOS_Lock			; function 0
 39242                                  	; 17/12/2022
 39243                                  	; 10/06/2019
 39244 000073FD 740E                    	jz	short DOS_Lock
 39245                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39246                                  	;JNZ	short DOS_Unlock
 39247                                  	;JMP	short DOS_Lock
 39248                                  
 39249                                  DOS_Unlock:
 39250                                  	;;test	word [es:di+5],8000h
 39251                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39252 000073FF 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39253 00007404 74CE                    	JZ	short LOCAL_UNLOCK
 39254                                  
 39255                                  lock_unlock: ; 22/05/2019
 39256                                  	
 39257                                  	;CallInstall Net_Xlock,MultNET,10
 39258                                  	
 39259                                  	; MSDOS 3.3
 39260                                  	;mov     ax,110Bh
 39261                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39262                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39263                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 39264                                  			; SFT DPB field -> DPB of drive containing file
 39265                                  			; Return: CF set error
 39266                                  	; MSDOS 6.0
 39267 00007406 B80A11                  	mov     ax,110Ah
 39268 00007409 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39269                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39270                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39271                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39272                                  			; Return: CF set error
 39273                                  
 39274 0000740B EBCB                    	JMP	SHORT ValChk
 39275                                  
 39276                                  ; 17/12/2022
 39277                                  %if 0
 39278                                  LOCAL_UNLOCK:
 39279                                  	; MSDOS 3.3
 39280                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39281                                  	; MSDOS 6.0
 39282                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39283                                  ValChk:
 39284                                  	JNC	short Lock_OK
 39285                                  lockerror:
 39286                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39287                                  	;jmp	SYS_RET_ERR
 39288                                  	jmp	short lockoperrj
 39289                                  Lock_OK:
 39290                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39291                                  	; 10/06/2019
 39292                                  	mov	ax,[TEMP_VAR]
 39293                                  	jmp	SYS_RET_OK
 39294                                  %endif
 39295                                  
 39296                                  DOS_Lock:
 39297                                  	;;test	word [es:di+5],8000h
 39298                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39299 0000740D 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39300 00007412 7407                    	JZ	short LOCAL_LOCK
 39301                                  
 39302                                  	;CallInstall NET_XLock,MultNET,10
 39303                                  
 39304 00007414 B80A11                  	mov     ax,110Ah
 39305 00007417 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39306                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39307                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39308                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39309                                  			; Return: CF set error
 39310                                  
 39311 00007419 EBBD                    	JMP	short ValChk
 39312                                  
 39313                                  LOCAL_LOCK:
 39314                                  	; MSDOS 3.3
 39315                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39316                                  	; MSDOS 6.0
 39317 0000741B FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39318                                  
 39319 0000741F EBB7                    	JMP	short ValChk
 39320                                  
 39321                                  ; 14/07/2018 - Retro DOS v3.0
 39322                                  ; LOCK_CHECK
 39323                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39324                                  
 39325                                  ;----------------------------------------------------------------------------
 39326                                  ; Inputs:
 39327                                  ;	Outputs of SETUP
 39328                                  ;	[USER_ID] Set
 39329                                  ;	[PROC_ID] Set
 39330                                  ; Function:
 39331                                  ;	Check for lock violations on local I/O
 39332                                  ;	Retries are attempted with sleeps in between
 39333                                  ; Outputs:
 39334                                  ;    Carry clear
 39335                                  ;	Operation is OK
 39336                                  ;    Carry set
 39337                                  ;	A lock violation detected
 39338                                  ; Outputs of SETUP preserved
 39339                                  ;----------------------------------------------------------------------------
 39340                                  
 39341                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39342                                  	; 22/05/2019 - Retro DOS v4.0
 39343                                  LOCK_CHECK:
 39344 00007421 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 39345                                  LockRetry:
 39346 00007425 53                      	push	bx		; save regs
 39347 00007426 50                      	push	ax ; MSDOS 6.0
 39348                                  
 39349                                  	;MSDOS 3.3
 39350                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 39351                                  	;MSDOS 6.0
 39352 00007427 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 39353                                  
 39354 0000742B 58                      	pop	ax ; MSDOS 6.0
 39355 0000742C 5B                      	pop	bx		; restrore regs
 39356 0000742D 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 39357                                  LockN:
 39358 0000742F E84C9E                  	call	Idle		; wait a while
 39359 00007432 4B                      	DEC	BX		; remember a retry
 39360 00007433 75F0                    	JNZ	short LockRetry	; more retries left...
 39361 00007435 F9                      	STC
 39362                                  lc_ret_label:
 39363 00007436 C3                      	retn
 39364                                  
 39365                                  ; 14/07/2018 - Retro DOS v3.0
 39366                                  ; LOCK_VIOLATION
 39367                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39368                                  
 39369                                  ;----------------------------------------------------------------------------
 39370                                  ; Inputs:
 39371                                  ;	[THISDPB] set
 39372                                  ;	[READOP] indicates whether error on read or write
 39373                                  ; Function:
 39374                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 39375                                  ; Outputs:
 39376                                  ;	Carry set if user says FAIL, causes error_lock_violation
 39377                                  ;	Carry clear if user wants a retry
 39378                                  ;
 39379                                  ; DS, ES, DI, CX preserved, others destroyed
 39380                                  ;----------------------------------------------------------------------------
 39381                                  
 39382                                  LOCK_VIOLATION:
 39383 00007437 1E                      	PUSH	DS
 39384 00007438 06                      	PUSH	ES
 39385 00007439 57                      	PUSH	DI
 39386 0000743A 51                      	PUSH	CX
 39387                                  	;mov	ax,21h
 39388 0000743B B82100                  	MOV	AX,error_lock_violation
 39389                                  	;mov	byte [ALLOWED],18h
 39390 0000743E C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39391 00007443 C42E[8A05]              	LES	BP,[THISDPB]
 39392 00007447 BF0100                  	MOV	DI,1		; Fake some registers
 39393 0000744A 89F9                    	MOV	CX,DI
 39394                                  	;mov	dx,[es:bp+11]
 39395 0000744C 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 39396 00007450 E8BCDF                  	call	HARDERR
 39397 00007453 59                      	POP	CX
 39398 00007454 5F                      	POP	DI
 39399 00007455 07                      	POP	ES
 39400 00007456 1F                      	POP	DS
 39401 00007457 3C01                    	CMP	AL,1
 39402 00007459 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 39403 0000745B F9                      	STC
 39404 0000745C C3                      	retn
 39405                                  
 39406                                  ; 14/07/2018 - Retro DOS v3.0
 39407                                  
 39408                                  ;----------------------------------------------------------------------------
 39409                                  
 39410                                  ;	do a retz to return error
 39411                                  
 39412                                  	; 22/05/2019 - Retro DOS v4.0
 39413                                  CheckShare:
 39414                                  	; MSDOS 3.3
 39415                                  	;cmp	byte [cs:fShare],0
 39416                                  	;retn
 39417                                  
 39418                                  	; MSDOS 6.0
 39419 0000745D 1E                      	push	ds			;smr;
 39420                                  	;getdseg <ds>			; ds -> dosdata
 39421 0000745E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 39422 00007463 803E[0303]00            	cmp	byte [fShare],0
 39423 00007468 1F                      	pop	ds			;smr;
 39424 00007469 C3                      	retn
 39425                                  	
 39426                                  ;============================================================================
 39427                                  ; SHARE.ASM, MSDOS 6.0, 1991
 39428                                  ;============================================================================
 39429                                  ; 14/07/2018 - Retro DOS v3.0
 39430                                  ; 22/05/2019 - Retro DOS v4.0
 39431                                  
 39432                                  ; SHARE_CHECK
 39433                                  ;----------------------------------------------------------------------------
 39434                                  ; Inputs:
 39435                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 39436                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 39437                                  ;       [WFP_START] has full path of name
 39438                                  ;       [USER_ID] Set
 39439                                  ;       [PROC_ID] Set
 39440                                  ; Function:
 39441                                  ;       Check for sharing violations on local file/device access
 39442                                  ; Outputs:
 39443                                  ;    Carry clear
 39444                                  ;       Sharing approved
 39445                                  ;    Carry set
 39446                                  ;       A sharing violation detected
 39447                                  ;           AX is error code
 39448                                  ; USES    ALL but DS
 39449                                  ;----------------------------------------------------------------------------
 39450                                  
 39451                                  	; 22/05/2019 - Retro DOS v4.0
 39452                                  SHARE_CHECK:
 39453                                  	; 26/07/2019
 39454 0000746A FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 39455                                  shchk_retn:
 39456 0000746E C3                      	retn
 39457                                  
 39458                                  ; SHARE_VIOLATION
 39459                                  ;----------------------------------------------------------------------------
 39460                                  ; Inputs:
 39461                                  ;       [THISDPB] Set
 39462                                  ;       AX has error code
 39463                                  ; Function:
 39464                                  ;       Handle Sharing errors
 39465                                  ; Outputs:
 39466                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 39467                                  ;       Carry clear if user wants a retry
 39468                                  ;
 39469                                  ; DS, ES, DI preserved, others destroyed
 39470                                  ;----------------------------------------------------------------------------
 39471                                  
 39472                                  SHARE_VIOLATION:
 39473 0000746F 1E                      	PUSH    DS
 39474 00007470 06                      	PUSH	ES
 39475 00007471 57                      	PUSH    DI
 39476 00007472 C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 39477                                  	;mov	byte [ALLOWED],18h
 39478 00007477 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39479 0000747C C42E[8A05]              	LES     BP,[THISDPB]
 39480 00007480 BF0100                  	MOV     DI,1			; Fake some registers
 39481 00007483 89F9                    	MOV     CX,DI
 39482                                  	;mov	dx,[es:bp+17]
 39483 00007485 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 39484 00007489 E883DF                  	call	HARDERR
 39485 0000748C 5F                      	POP     DI
 39486 0000748D 07                      	POP	ES
 39487 0000748E 1F                      	POP     DS
 39488 0000748F 3C01                    	CMP     AL,1
 39489 00007491 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 39490 00007493 F9                      	STC
 39491 00007494 C3                      	retn
 39492                                  
 39493                                  ;----------------------------------------------------------------------------
 39494                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 39495                                  ;       NOT perform a close, it merely asserts that the sharing information
 39496                                  ;       for the SFT/UID/PID may be safely released.
 39497                                  ;
 39498                                  ;   Inputs:     ES:DI points to an SFT
 39499                                  ;   Outputs:    None
 39500                                  ;   Registers modified: all except DS,ES,DI
 39501                                  ;----------------------------------------------------------------------------
 39502                                  
 39503                                  ShareEnd:
 39504                                  	; 26/07/2019
 39505 00007495 FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 39506 00007499 C3                      	retn
 39507                                  
 39508                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 39509                                  ;----------------------------------------------------------------------------
 39510                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 39511                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 39512                                  ;
 39513                                  ;   Inputs:     ThisSFT points to the SFT
 39514                                  ;               WFP_Start points to the WFP
 39515                                  ;   Outputs:    Carry clear => successful entry
 39516                                  ;               Carry set => failed system call
 39517                                  ;   Registers modified: all
 39518                                  ;----------------------------------------------------------------------------
 39519                                  
 39520                                  ShareEnter:
 39521 0000749A 51                      	push	cx
 39522                                  retry:
 39523 0000749B 8B0E[1A00]              	mov     cx,[RetryCount]
 39524                                  attempt:
 39525 0000749F C43E[9E05]              	les     di,[THISSFT]		; grab sft
 39526 000074A3 31C0                    	XOR     AX,AX
 39527                                   	;mov	[es:di+51],axfff
 39528 000074A5 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 39529 000074A9 51                      	push	cx
 39530 000074AA E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 39531 000074AD 59                      	pop	cx
 39532 000074AE 730A                    	jnc	short done		; success, let the user see this
 39533 000074B0 E8CB9D                  	call	Idle                    ; wait a while
 39534 000074B3 E2EA                    	loop    attempt                 ; go back for another attempt
 39535 000074B5 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 39536 000074B8 73E1                    	jnc	short retry		; user said to retry, go do it
 39537                                  done:
 39538 000074BA 59                      	pop	cx
 39539 000074BB C3                      	retn
 39540                                  
 39541                                  ;============================================================================
 39542                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 39543                                  ;============================================================================
 39544                                  ; 29/04/2019 - Retro DOS 4.0
 39545                                  
 39546                                  ;** EXEPATCH.ASM 
 39547                                  ;----------------------------------------------------------------------------
 39548                                  ;	Contains the foll:
 39549                                  ;
 39550                                  ;		- code to find and overlay buggy unpack code
 39551                                  ;		- new code to be overlayed on buggy unpack code 
 39552                                  ;		- old code sequence to identify buggy unpack code
 39553                                  ;
 39554                                  ;	Revision history:
 39555                                  ;
 39556                                  ;		Created: 5/14/90
 39557                                  ;----------------------------------------------------------------------------
 39558                                  
 39559                                  ;----------------------------------------------------------------------------
 39560                                  ;
 39561                                  ; M020 : Fix for rational bug - for details see routine header
 39562                                  ; M028 : 4b04 implementation
 39563                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 39564                                  ; M032 : set turnoff bit only if DOS in HMA.
 39565                                  ; M033 : if IP < 2 then not exepacked.
 39566                                  ; M046 : support for a 4th version of exepacked files.
 39567                                  ; M068 : support for copy protected apps.
 39568                                  ; M071 : use A20OFF_COUNT of 10.
 39569                                  ;
 39570                                  ;----------------------------------------------------------------------------
 39571                                  
 39572                                  PATCH1_COM_OFFSET	EQU	06CH
 39573                                  PATCH1_OFFSET		EQU	028H
 39574                                  PATCH1_CHKSUM		EQU	0EF4EH
 39575                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 39576                                  
 39577                                  PATCH2_COM_OFFSET	EQU	076H
 39578                                  PATCH2_OFFSET		EQU	032H
 39579                                  
 39580                                  	; The strings that start at offset 076h have two possible 
 39581                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 39582                                  
 39583                                  PATCH2_CHKSUM		EQU	78B2H
 39584                                  CHKSUM2_LEN		EQU	119H/2
 39585                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 39586                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 39587                                  
 39588                                  PATCH3_COM_OFFSET	EQU	074H
 39589                                  PATCH3_OFFSET		EQU	032H
 39590                                  PATCH3_CHKSUM		EQU	4EDEH
 39591                                  CHKSUM3_LEN		EQU	117H/2
 39592                                  
 39593                                  ;**	Data structure passed for ExecReady call
 39594                                  ;
 39595                                  ;struc ERStruc
 39596                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 39597                                  ; .ER_Flags:	resw	1
 39598                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 39599                                  ; .ER_PSP:	resw	1	; PSP of the program
 39600                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 39601                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 39602                                  ; .size:
 39603                                  ;endstruc
 39604                                  
 39605                                  ;DOSCODE SEGMENT
 39606                                  
 39607                                  	; 22/05/2019 - Retro DOS v4.0
 39608                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 39609                                  
 39610                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39611                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 39612                                  
 39613                                  ; M028 - BEGIN
 39614                                  
 39615                                  ;--------------------------------------------------------------------------
 39616                                  ;
 39617                                  ;	Procedure Name		: ExecReady
 39618                                  ;
 39619                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 39620                                  ;
 39621                                  ;--------------------------------------------------------------------------
 39622                                  
 39623                                  ExecReady:
 39624 000074BC 89D6                    	mov	si,dx			; move the pointer into a friendly one
 39625                                  	;;test	word [si+2],1
 39626                                  	; 17/12/2022
 39627 000074BE F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39628                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 39629 000074C2 7413                    	jz	short er_setver		; only setver for .COM files
 39630                                  
 39631                                  	;mov	ax,[si+8]
 39632 000074C4 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 39633 000074C7 83C010                  	add	ax,10h
 39634 000074CA 8EC0                    	mov	es,ax
 39635                                  
 39636                                  	;mov	cx,[si+10]
 39637 000074CC 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 39638                                  	;mov	cx,[si+12]
 39639 000074CF 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 39640                                  
 39641 000074D2 36FF16[1212]            	call	[ss:FixExePatch]
 39642                                  	
 39643                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39644                                  	;call	[ss:Rational386PatchPtr]
 39645                                  
 39646                                  er_setver:
 39647                                  	;;test	word [si+2],2		; Q: is this an overlay
 39648                                  	; 17/12/2022
 39649 000074D7 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 39650                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 39651 000074DB 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 39652                                  					; N: set up lie version first
 39653 000074DD 1E                      	push	ds
 39654 000074DE 56                      	push	si
 39655                                  	;lds	si,[si+4]
 39656 000074DF C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 39657 000074E2 E870ED                  	call	Scan_Execname1
 39658 000074E5 E881ED                  	call	Scan_Special_Entries
 39659 000074E8 5E                      	pop	si
 39660 000074E9 1F                      	pop	ds
 39661                                  	;mov	es,[si+8]
 39662 000074EA 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 39663 000074ED 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 39664 000074F1 26A34000                	mov	[es:PDB.Version],ax
 39665                                  
 39666                                  er_chkdoshi:
 39667 000074F5 36803E[1112]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 39668 000074FB 741F                    	je	short er_done		; M032: N: done
 39669                                  
 39670                                  					; M068 - Start
 39671                                  	;mov	ax,[si+8]
 39672 000074FD 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 39673                                  
 39674                                  	;or	byte [ss:DOS_FLAG],4
 39675 00007500 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 39676                                  					; ah = 25 & ah= 49. See dossym.inc 
 39677                                  					; under TAG M003 & M009 for 
 39678                                  					; explanation
 39679                                  	;;test	word [si+2],1
 39680                                  	; 17/12/2022
 39681 00007506 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39682                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 39683 0000750A 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 39684                                  					;    a20off_psp and ret
 39685 0000750C 1E                         	push	ds
 39686 0000750D 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 39687 0000750F E85D03                  	call	IsCopyProt		; check if copy protected
 39688 00007512 1F                      	pop	ds
 39689                                  
 39690                                  er_setA20:
 39691                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 39692                                  	; is non-zero at this point it indicates that the A20 is to be 
 39693                                  	; turned off for that many int 21 calls made by the app. In 
 39694                                  	; addition the A20 has to be turned off when we exit from this 
 39695                                  	; call. Hence the inc.
 39696                                  
 39697 00007513 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 39698 00007518 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 39699                                  					; turned OFF.
 39700                                  er_done:				; M068 - End
 39701 0000751C 31C0                    	xor	ax,ax
 39702 0000751E C3                      	retn
 39703                                  
 39704                                  ; M028 - END
 39705                                  
 39706                                  
 39707                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39708                                  %if 0
 39709                                  
 39710                                  ;----------------------------------------------------------------------------
 39711                                  ;
 39712                                  ; procedure : Rational386Patch
 39713                                  ;
 39714                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 39715                                  ; 386 registers (usually just the high word of 32 bit registers) during
 39716                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 39717                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 39718                                  ;
 39719                                  ; This routine applies patches to the Rational DOS Extender to work around
 39720                                  ; most of the register trashing bugs.
 39721                                  ;
 39722                                  ; Note that there are additional register trashing bugs not fixed by these
 39723                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 39724                                  ; may be modified on interrupts.
 39725                                  ;
 39726                                  ; There are two different Rational DOS Extender patchs in this module.
 39727                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 39728                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 39729                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 39730                                  ; or not.
 39731                                  ;
 39732                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 39733                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 39734                                  ; running in the HMA.
 39735                                  ;
 39736                                  ; This patch detection and replacement is based on an example supplied by
 39737                                  ; Ben Williams at Rational.
 39738                                  ;
 39739                                  ;----------------------------------------------------------------------------
 39740                                  
 39741                                  ; 22/05/2019 - Retro DOS v4.0
 39742                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 39743                                  
 39744                                  ;----------------------------------------------------------------------------
 39745                                  ;
 39746                                  ; INPUT : ES = segment where program got loaded
 39747                                  ;
 39748                                  ;----------------------------------------------------------------------------
 39749                                  
 39750                                  rpFind1:
 39751                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 39752                                  
 39753                                  rpFind1Len equ	$ - rpFind1
 39754                                  
 39755                                  ;	cli
 39756                                  ;	in	al, 21h
 39757                                  ;	pusha
 39758                                  ;	xor	ax, ax
 39759                                  ;	out	43h, al
 39760                                  ;	mov	dx, ...
 39761                                  
 39762                                  rpFind1a:
 39763                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 39764                                  
 39765                                  rpFind1aLen equ	$ - rpFind1a
 39766                                  
 39767                                  ;	mov	al, 0Eh
 39768                                  ;	out	37h, al
 39769                                  ;	xor	ax, ax
 39770                                  ;	out	0F2h, al
 39771                                  
 39772                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 39773                                  
 39774                                  rpFind2:
 39775                                  	db	0Fh, 20h, 0C0h
 39776                                  
 39777                                  rpFind2Len equ	$ - rpFind2
 39778                                  
 39779                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 39780                                  
 39781                                  rpFind3:
 39782                                  	db	0Fh, 22h, 0C0h, 0EAh
 39783                                  
 39784                                  rpFind3Len equ	$ - rpFind3
 39785                                  
 39786                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 39787                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 39788                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 39789                                  
 39790                                  ; note, there is no rpRepl1 string
 39791                                  
 39792                                  rpRepl2:
 39793                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 39794                                  
 39795                                  rpRepl2Len equ	$ - rpRepl2
 39796                                  
 39797                                  ;	push	eax
 39798                                  ;	push	cx
 39799                                  ;	mov	eax, cr0
 39800                                  
 39801                                  rpRepl3:
 39802                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 39803                                  
 39804                                  rpRepl3Len equ	$ - rpRepl3
 39805                                  
 39806                                  ;	mov	ss, bx
 39807                                  ;	pop	cx
 39808                                  ;	pop	eax
 39809                                  
 39810                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 39811                                  
 39812                                  rpFind4:
 39813                                  	db	93h, 58h, 8Bh, 0CCh
 39814                                  
 39815                                  rpFind4Len equ	$ - rpFind4
 39816                                  
 39817                                  ;	xchg	bx, ax
 39818                                  ;	pop	ax
 39819                                  ;	mov	cx, sp
 39820                                  
 39821                                  rpFind5:
 39822                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 39823                                  
 39824                                  rpFind5Len equ	$ - rpFind5
 39825                                  
 39826                                  ;	mov	ax, DE0Ch
 39827                                  ;	int	67h
 39828                                  ;	mov	sp, cx
 39829                                  ;	jmp	bx
 39830                                  
 39831                                  rpRepl4:
 39832                                  	db	93h, 58h, 8Bh, 0CCh
 39833                                  	db	02Eh, 066h, 0A3h
 39834                                  
 39835                                  rpRepl4o1Len equ $ - rpRepl4
 39836                                  
 39837                                  	db	00h, 00h
 39838                                  	db	02Eh, 066h, 89h, 36h
 39839                                  
 39840                                  rpRepl4o2Len equ $ - rpRepl4
 39841                                  
 39842                                  	db	00h, 00h
 39843                                  
 39844                                  rpRepl4Len equ	$ - rpRepl4
 39845                                  
 39846                                  ;	xchg	bx, ax
 39847                                  ;	pop	ax
 39848                                  ;	mov	cx, sp
 39849                                  ;	mov	dword ptr cs:[xxxx], eax
 39850                                  ;	mov	dword ptr cs:[xxxx], esi
 39851                                  
 39852                                  rpRepl5:
 39853                                  	db	8Bh, 0E1h
 39854                                  	db	2Eh, 66h, 0A1h
 39855                                  
 39856                                  rpRepl5o1Len equ $ - rpRepl5
 39857                                  
 39858                                  	db	00h, 00h
 39859                                  	db	2Eh, 66h, 8Bh, 36h
 39860                                  
 39861                                  rpRepl5o2Len equ $ - rpRepl5
 39862                                  
 39863                                  	db	00h, 00h
 39864                                  	db	0FFh, 0E3h
 39865                                  
 39866                                  rpRepl5Len equ	$ - rpRepl5
 39867                                  
 39868                                  ;	mov	sp, cx
 39869                                  ;	mov	eax, dword ptr cs:[xxxx]
 39870                                  ;	mov	esi, dword ptr cs:[xxxx]
 39871                                  ;	jmp	bx
 39872                                  
 39873                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 39874                                  
 39875                                  rpFind6:
 39876                                  	db	0FAh, 52h, 51h
 39877                                  
 39878                                  rpFind6Len equ	$ - rpFind6
 39879                                  
 39880                                  ;	cli
 39881                                  ;	push	dx
 39882                                  ;	push	cx
 39883                                  
 39884                                  rpFind7a:
 39885                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 39886                                  
 39887                                  rpFind7aLen equ	$ - rpFind7a
 39888                                  
 39889                                  ;	mov	ax, 0DE0Ch
 39890                                  ;	call	fword ptr es:[xxxx]
 39891                                  
 39892                                  rpFind7b:
 39893                                  	db	59h, 5Ah, 5Bh
 39894                                  
 39895                                  rpFind7bLen equ	$ - rpFind7b
 39896                                  
 39897                                  ;	pop	cx
 39898                                  ;	pop	dx
 39899                                  ;	pop	bx
 39900                                  
 39901                                  rpRepl6 :
 39902                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 39903                                  
 39904                                  rpRepl6Len equ	$ - rpRepl6
 39905                                  
 39906                                  ;	cli
 39907                                  ;	push	eax
 39908                                  ;	push	ebx
 39909                                  ;	push	ecx
 39910                                  ;	push	edx
 39911                                  
 39912                                  rpRepl7:
 39913                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 39914                                  
 39915                                  rpRepl7Len equ	$ - rpRepl7
 39916                                  
 39917                                  ;	pop	edx
 39918                                  ;	pop	ecx
 39919                                  ;	pop	ebx
 39920                                  ;	pop	eax
 39921                                  ;	pop	bx
 39922                                  
 39923                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 39924                                  
 39925                                  rpFind8:
 39926                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 39927                                  
 39928                                  rpFind8Len equ	$ - rpFind8
 39929                                  
 39930                                  ;	pusha
 39931                                  ;	push	es
 39932                                  ;	push	ds
 39933                                  ;	mov	ax, dgroup	;jump back to here from replace8
 39934                                  ;	mov	ds, ax
 39935                                  
 39936                                  rpFind9 :
 39937                                  	db	1Fh, 07h, 61h
 39938                                  
 39939                                  rpFind9Len equ	$ - rpFind9
 39940                                  
 39941                                  ;	pop	ds
 39942                                  ;	pop	es
 39943                                  ;	popa
 39944                                  
 39945                                  rpRepl8:
 39946                                   	db	66h, 60h, 06h, 1Eh
 39947                                  
 39948                                  rpRepl8Len equ	$ - rpRepl8
 39949                                  
 39950                                  ;	pushad
 39951                                  ;	push	es
 39952                                  ;	push	ds
 39953                                  
 39954                                  rpRepl9:
 39955                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 39956                                  
 39957                                  rpRepl9Len equ	$ - rpRepl9
 39958                                  
 39959                                  ;	pop	ds
 39960                                  ;	pop	es
 39961                                  ;	popad
 39962                                  ;	retn			;no need to jmp back to main-line
 39963                                  
 39964                                  ;----------------------------------------------------------------------------
 39965                                  
 39966                                  struc SearchPair
 39967                                   .sp_off1: resw 1	; offset of 1st search string
 39968                                   .sp_len1: resw 1	; length of 1st search string
 39969                                   .sp_off2: resw 1	; 2nd string
 39970                                   .sp_len2: resw 1	; 2nd string
 39971                                   .sp_diff: resw 1	; max difference between offsets
 39972                                   .size:
 39973                                  endstruc
 39974                                  
 39975                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 39976                                  
 39977                                  rpBug1Strs:
 39978                                  	dw	rpFind2
 39979                                  	dw	rpFind2Len ; 3
 39980                                  	dw	rpFind3
 39981                                  	dw	rpFind3Len ; 4
 39982                                  	dw	20h
 39983                                  
 39984                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 39985                                  
 39986                                  rpBug2Strs:
 39987                                  	dw	rpFind4
 39988                                  	dw	rpFind4Len ; 4
 39989                                  	dw	rpFind5
 39990                                  	dw	rpFind5Len ; 9
 39991                                  	dw	80h
 39992                                  
 39993                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 39994                                  
 39995                                  rpBug3Strs:
 39996                                  	dw	rpFind6
 39997                                  	dw	rpFind6Len ; 3
 39998                                  	dw	rpFind7a
 39999                                  	dw	rpFind7aLen ; 7
 40000                                  	dw	80h
 40001                                  
 40002                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 40003                                  
 40004                                  rpBug4Strs:
 40005                                  	dw	rpFind8
 40006                                  	dw	4
 40007                                  	dw	rpFind9
 40008                                  	dw	rpFind9Len ; 3
 40009                                  	dw	80h
 40010                                  
 40011                                  ;----------------------------------------------------------------------------
 40012                                  
 40013                                  struc StackVars
 40014                                   .sv_wVersion:	resw 1		; Rational extender version #
 40015                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 40016                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 40017                                   .size:
 40018                                  endstruc
 40019                                  
 40020                                  ;----------------------------------------------------------------------------
 40021                                  
 40022                                  ; 22/05/2019 - Retro DOS v4.0
 40023                                  
 40024                                  Rational386Patch:
 40025                                  	; Do a few quick checks to see if this looks like a Rational
 40026                                  	; Extended application. Hopefully this will quickly weed out
 40027                                  	; most non Rational apps.
 40028                                  
 40029                                  	cmp	word [es:0],395		; version number goes here - versions
 40030                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 40031                                  
 40032                                  	cmp	word [es:0Ch],20h	; always has this value here
 40033                                  	jne	short rp3QuickOut
 40034                                  
 40035                                  	push	ax
 40036                                  
 40037                                  	mov	ax,18h 			; extender has 18h at
 40038                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 40039                                  	jne	short rp3QO_ax
 40040                                  	cmp	[es:28],ax
 40041                                  	jne	short rp3QO_ax
 40042                                  	cmp	[es:36],ax
 40043                                  	je	short rp3Maybe
 40044                                  rp3QO_ax:
 40045                                  	pop	ax
 40046                                  rp3QuickOut:
 40047                                  	retn
 40048                                  
 40049                                  ; It might be the rational extender, do more extensive checking
 40050                                  
 40051                                  rp3Maybe:
 40052                                  	cld
 40053                                  	push	bx			; note ax pushed above
 40054                                  	push	cx
 40055                                  	push	dx
 40056                                  	push	si
 40057                                  	push	di
 40058                                  	push	es
 40059                                  	push	ds			; we use all of them
 40060                                  	push	bp
 40061                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 40062                                  	mov	bp,sp
 40063                                  
 40064                                  	push	cs
 40065                                  	pop	ds
 40066                                  
 40067                                  	mov	ax,[es:0]		; save version #
 40068                                  	;mov	[bp+StackVars.sv_wVersion],ax
 40069                                  	mov	[bp],ax	
 40070                                  					; check that binary version # matches
 40071                                  	call	VerifyVersion		;   ascii string
 40072                                  	jne	short rp3Exit_j
 40073                                  
 40074                                  ; Looks like this is it, find where to put the patch code.  The
 40075                                  ; patch will be located on top of Rational code specific to 80286
 40076                                  ; processors, so these patchs MUST NOT be applied if running on
 40077                                  ; an 80286 system.
 40078                                  
 40079                                  	; Rational says the code to patch will never be beyond offset 46xxh
 40080                                  
 40081                                  	mov	cx,4500h		; force search len to 4700h (searches
 40082                                  	;mov	[bp+2],cx
 40083                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 40084                                  
 40085                                  	mov	es,[es:20h]		; es=code segment
 40086                                  
 40087                                  	mov	si,rpFind1		; string to find
 40088                                  	mov	dx,rpFind1Len ; 10	; length to match
 40089                                  	call	ScanCodeSeq		; look for code seq
 40090                                  	jz	short rpGotPatch
 40091                                  
 40092                                  ; According to Rational, some very old versions of the extender may not
 40093                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 40094                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 40095                                  
 40096                                  	mov	si,rpFind1a
 40097                                  	mov	dx,rpFind1aLen  ;8
 40098                                  	call	ScanCodeSeq
 40099                                  	jz	short rpGotPatch
 40100                                  
 40101                                  rp3Exit_j:
 40102                                  	jmp	rp3Exit
 40103                                  
 40104                                  ; Found the location to write patch code! DI = offset in code seg.
 40105                                  
 40106                                  rpGotPatch:
 40107                                  	;mov	[bp+4],di
 40108                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 40109                                  
 40110                                  ;----------------------------------------------------------------------------
 40111                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40112                                  
 40113                                  	;cmp	word [bp+0],381
 40114                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 40115                                  	cmp	word [bp],381
 40116                                  	jae	short rpBug2			;   < 3.81
 40117                                  
 40118                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 40119                                  	call	FindBadCode
 40120                                  	jc	short rpBug2
 40121                                  
 40122                                  ; si = rpFind2 offset, di = rpFind3 offset
 40123                                  
 40124                                  	push	di
 40125                                  	mov	di,si				; rpFind2 offset
 40126                                  	mov	dx,rpFind2Len ; 3
 40127                                  
 40128                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 40129                                  	jne	short rp_no_cx
 40130                                  
 40131                                  	dec	di				;   yes, gobble up push cx too
 40132                                  	inc	dx
 40133                                  rp_no_cx:
 40134                                  	mov	si,rpRepl2			; patch out find2 sequence
 40135                                  	mov	cx,rpRepl2Len  ; 6
 40136                                  	call	GenPatch
 40137                                  
 40138                                  	pop	di				; rpFind3 offset
 40139                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 40140                                  	jne	short rp_no_cx2
 40141                                  
 40142                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 40143                                  rp_no_cx2:
 40144                                  	;mov	ax,[bp+4]
 40145                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 40146                                  	;mov	[es:di+4],ax
 40147                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 40148                                  
 40149                                  	push	di				; save find3 offset
 40150                                  	mov	si,rpRepl3			; copy repl3 to patch area
 40151                                  	mov	cx,rpRepl3Len ; 5
 40152                                  	call	CopyPatch
 40153                                  
 40154                                  	pop	bx				; find3 offset
 40155                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 40156                                  	call	GenJump 			; jmp back from patch area
 40157                                  	;mov	[bp+4],di
 40158                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 40159                                  						;   area pointer
 40160                                  
 40161                                  ;----------------------------------------------------------------------------
 40162                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 40163                                  
 40164                                  rpBug2:
 40165                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 40166                                  	call	FindBadCode
 40167                                  	jc	short rpBug3
 40168                                  
 40169                                  ; si = rpFind4 offset, di = rpFind5 offset
 40170                                  
 40171                                  	;push	word [bp+4]
 40172                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 40173                                  						;   (where repl4 goes)
 40174                                  	push	di				; save find5 offset
 40175                                  
 40176                                  	mov	di,si
 40177                                  	mov	dx,rpFind4Len ; 4
 40178                                  	mov	si,rpRepl4
 40179                                  	mov	cx,rpRepl4Len ; 15
 40180                                  	call	GenPatch			; patch out find4 code
 40181                                  
 40182                                  	pop	di				; find5 offset
 40183                                  	add	di,5				; keep 5 bytes of find5 code
 40184                                  	;mov	bx,[bp+4]
 40185                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 40186                                  	push	bx				; save repl5 location
 40187                                  	call	GenJump
 40188                                  
 40189                                  	mov	si,rpRepl5			; copy repl5 code to patch
 40190                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 40191                                  	call	CopyPatch			;   so no need to jmp back to
 40192                                  						;   main-line code
 40193                                  
 40194                                  ; patches have been made, now update the patch code to store/load dwords just
 40195                                  ; after the code in the patch area
 40196                                  
 40197                                  	pop	di				; repl5 location
 40198                                  	pop	si				; repl4 location
 40199                                  
 40200                                  	;mov	ax,[bp+4]
 40201                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 40202                                  
 40203                                  	;mov	[es:si+7],ax
 40204                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 40205                                  	;mov	[es:di+5],ax
 40206                                  	mov	[es:di+rpRepl5o1Len],ax
 40207                                  	add	ax,4
 40208                                  	;mov	[es:si+0Dh],ax
 40209                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 40210                                  	;mov	[es:di+0Bh],ax
 40211                                  	mov	[es:di+rpRepl5o2Len],ax
 40212                                  
 40213                                  	;add	word [bp+4],8
 40214                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 40215                                  						; patch area
 40216                                  
 40217                                  ;----------------------------------------------------------------------------
 40218                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 40219                                  
 40220                                  rpBug3:
 40221                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 40222                                  	call	FindBadCode
 40223                                  	jc	short rpBug4
 40224                                  
 40225                                  	;add	di,9
 40226                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 40227                                  	push	si				;   code and locate find7b
 40228                                  	mov	si,rpFind7b			;   sequence
 40229                                  	mov	dx,rpFind7bLen ; 3
 40230                                  	call	ScanCodeSeq_di
 40231                                  	pop	si
 40232                                  	jnz	short rpBug4
 40233                                  
 40234                                  	push	di				; save find7b code offset
 40235                                  
 40236                                  	mov	di,si
 40237                                  	mov	dx,rpFind6Len ; 3
 40238                                  	mov	si,rpRepl6
 40239                                  	mov	cx,rpRepl6Len ; 9
 40240                                  	call	GenPatch			; patch out find6 code
 40241                                  
 40242                                  	pop	di
 40243                                  	mov	dx,rpFind7bLen ; 3
 40244                                  	mov	si,rpRepl7
 40245                                  	mov	cx,rpRepl7Len ; 9
 40246                                  	call	GenPatch			; patch out find7b code
 40247                                  
 40248                                  ;----------------------------------------------------------------------------
 40249                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 40250                                  
 40251                                  rpBug4:
 40252                                  	;cmp	word [bp+0],360
 40253                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 40254                                  	cmp	word [bp],360
 40255                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 40256                                  
 40257                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 40258                                  	call	FindBadCode
 40259                                  	jc	short rp3Exit
 40260                                  
 40261                                  	push	di				; save find9 code offset
 40262                                  
 40263                                  	mov	di,si
 40264                                  	mov	dx,3
 40265                                  	mov	si,rpRepl8
 40266                                  	mov	cx,rpRepl8Len ; 4
 40267                                  	call	GenPatch			; patch out find8 code
 40268                                  
 40269                                  	pop	di				; find9 offset
 40270                                  	;mov	bx,[bp+4]
 40271                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 40272                                  	call	GenJump 			;   patch area
 40273                                  
 40274                                  	mov	si,rpRepl9			; copy replacement code to
 40275                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 40276                                  	call	CopyPatch			;   so no jmp back to main-line
 40277                                  
 40278                                  rp3Exit:
 40279                                  	add	sp,StackVars.size
 40280                                  	pop	bp
 40281                                  	pop	ds
 40282                                  	pop	es
 40283                                  	pop	di
 40284                                  	pop	si
 40285                                  	pop	dx
 40286                                  	pop	cx
 40287                                  	pop	bx
 40288                                  	pop	ax
 40289                                  	retn
 40290                                  
 40291                                  ;----------------------------------------------------------------------------
 40292                                  ;
 40293                                  ; FindBadCode
 40294                                  ;
 40295                                  ; Searches Rational code segment looking for a pair of find strings (all
 40296                                  ; patches have at least two find strings).
 40297                                  ;
 40298                                  ; Entry:
 40299                                  ;	ES    = code segment to search
 40300                                  ;	DS:BX = search pair structure for this search
 40301                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 40302                                  ;
 40303                                  ; Exit:
 40304                                  ;	CY flag clear if both strings found, and
 40305                                  ;	SI    = offset in ES of 1st string
 40306                                  ;	DI    = offset in ES of 2nd string
 40307                                  ;	CY set if either string not found, or strings too far apart
 40308                                  ;
 40309                                  ; Used:
 40310                                  ;	CX
 40311                                  ;
 40312                                  ;----------------------------------------------------------------------------
 40313                                  
 40314                                  ;struc SearchPair
 40315                                  ; .sp_off1: resw 1	; offset of 1st search string
 40316                                  ; .sp_len1: resw 1	; length of 1st search string
 40317                                  ; .sp_off2: resw 1	; 2nd string
 40318                                  ; .sp_len2: resw 1	; 2nd string
 40319                                  ; .sp_diff: resw 1	; max difference between offsets
 40320                                  ; .size:
 40321                                  ;endstruc
 40322                                  
 40323                                  FindBadCode:
 40324                                  	;mov	cx,[bp+2]
 40325                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 40326                                  
 40327                                  	mov	si,[bx]	; mov si,[bx+0]
 40328                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 40329                                  	
 40330                                  	;mov	dx,[bx+2]
 40331                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 40332                                  	call	ScanCodeSeq
 40333                                  	jnz	short fbc_error		; done if 1st not found
 40334                                  
 40335                                  	push	di			; save 1st string offset
 40336                                  
 40337                                  	;mov	si,[bx+4]
 40338                                  	mov	si,[bx+SearchPair.sp_off2]
 40339                                  	;mov	dx,[bx+6]
 40340                                  	mov	dx,[bx+SearchPair.sp_len2]
 40341                                  	call	ScanCodeSeq_di		; don't change flags after this!
 40342                                  
 40343                                  	pop	si			; restore 1st string offset
 40344                                  	jnz	short fbc_error
 40345                                  
 40346                                  	mov	ax,di			; sanity check that
 40347                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 40348                                  	jc	short fbc_error
 40349                                  	;cmp	ax,[bx+8]
 40350                                  	cmp	ax,[bx+SearchPair.sp_diff]
 40351                                  	ja	short fbc_error
 40352                                  
 40353                                  	clc
 40354                                  	retn
 40355                                  
 40356                                  fbc_error:
 40357                                  	stc
 40358                                  	retn
 40359                                  
 40360                                  ;----------------------------------------------------------------------------
 40361                                  ;
 40362                                  ; GenPatch
 40363                                  ;
 40364                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 40365                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 40366                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 40367                                  ; code.
 40368                                  ;
 40369                                  ; Entry:
 40370                                  ;	ES:DI = start of buggy code to be patched
 40371                                  ;	DX    = length of buggy code to be patched
 40372                                  ;	DS:SI = replacement patch code
 40373                                  ;	CX    = length of replacement patch code
 40374                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40375                                  ;
 40376                                  ; Exit:
 40377                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 40378                                  ;
 40379                                  ; Used:
 40380                                  ;	AX, BX, SI, Flags
 40381                                  ;
 40382                                  ;----------------------------------------------------------------------------
 40383                                  
 40384                                  GenPatch:
 40385                                  	push	di			;save offset of buggy code
 40386                                  
 40387                                  	;mov	bx,[bp+4]
 40388                                  	mov	bx,[bp+StackVars.sv_pPatch]
 40389                                  					;jump from buggy code to patch area
 40390                                  	call	GenJump
 40391                                  
 40392                                  	call	CopyPatch		;copy replacement code to patch area
 40393                                  
 40394                                  	pop	bx			;offset of buggy code + buggy code
 40395                                  	add	bx,dx			;  length = return from patch offset
 40396                                  
 40397                                  	call	GenJump 		;jump from patch area back to main-
 40398                                  	;mov	[bp+4],di
 40399                                  	mov	[bp+StackVars.sv_pPatch],di
 40400                                  					;  line code, update patch pointer
 40401                                  	retn
 40402                                  
 40403                                  ;----------------------------------------------------------------------------
 40404                                  ;
 40405                                  ; CopyPatch
 40406                                  ;
 40407                                  ; Copies patch code to patch location.
 40408                                  ;
 40409                                  ; Entry:
 40410                                  ;	DS:SI = patch code to be copied
 40411                                  ;	ES    = segment of code to patch
 40412                                  ;	CX    = length of code to copy
 40413                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40414                                  ;
 40415                                  ; Exit:
 40416                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 40417                                  ;
 40418                                  ; Used:
 40419                                  ;	SI, Flags
 40420                                  ;
 40421                                  ;----------------------------------------------------------------------------
 40422                                  
 40423                                  CopyPatch:
 40424                                  	push	cx
 40425                                  	;mov	di,[bp+4]
 40426                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 40427                                  	cld
 40428                                  	rep movsb
 40429                                  	pop	cx
 40430                                  	;mov	[bp+4],di
 40431                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 40432                                  	retn
 40433                                  
 40434                                  ;----------------------------------------------------------------------------
 40435                                  ;
 40436                                  ; GenJump
 40437                                  ;
 40438                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 40439                                  ;
 40440                                  ; Entry:
 40441                                  ;	ES:DI = from location (where to put jmp instruction)
 40442                                  ;	BX    = to location (where to jump to)
 40443                                  ;
 40444                                  ; Exit:
 40445                                  ;	DI = byte after generated jump
 40446                                  ;
 40447                                  ; Used:
 40448                                  ;	AX
 40449                                  ;
 40450                                  ;----------------------------------------------------------------------------
 40451                                  
 40452                                  GenJump:
 40453                                  	mov	al,0E9h		; jmp rel16 opcode
 40454                                  	stosb
 40455                                  
 40456                                  	mov	ax,bx		; calc offset to 'to' location
 40457                                  	sub	ax,di
 40458                                  	sub	ax,2
 40459                                  
 40460                                  	stosw			; output offset
 40461                                  
 40462                                  	retn
 40463                                  
 40464                                  ;----------------------------------------------------------------------------
 40465                                  ;
 40466                                  ; ScanCodeSeq
 40467                                  ;
 40468                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 40469                                  ;
 40470                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 40471                                  ;
 40472                                  ;----------------------------------------------------------------------------
 40473                                  
 40474                                  ScanCodeSeq:
 40475                                  	mov	di,200h
 40476                                  ScanCodeSeq_di:
 40477                                  	push	cx
 40478                                  	sub	cx,dx
 40479                                  	inc	cx
 40480                                  scsagain:
 40481                                  	push	si
 40482                                  	push	di
 40483                                  	push	cx
 40484                                  	mov	cx,dx
 40485                                  	rep	cmpsb
 40486                                  	pop	cx
 40487                                  	pop	di
 40488                                  	pop	si
 40489                                  	je	short scsfound
 40490                                  	inc	di
 40491                                  	loop	scsagain
 40492                                  scsfound:
 40493                                  	pop	cx
 40494                                  vvexit:		; 18/12/2022
 40495                                  	retn
 40496                                  	
 40497                                  ;----------------------------------------------------------------------------
 40498                                  ;
 40499                                  ; VerifyVersion
 40500                                  ;
 40501                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 40502                                  ; from ES:2A.
 40503                                  ;
 40504                                  ;       Entry: AX = binary version number 
 40505                                  ;       Exit : Z flag set if version numbers match
 40506                                  ;
 40507                                  ;----------------------------------------------------------------------------
 40508                                  
 40509                                  VerifyVersion:
 40510                                  	mov	si,[es:2Ah]		; offset of version number
 40511                                  					;  in ascii
 40512                                  	mov	bl,10
 40513                                  	add	si,3			; point to last digit
 40514                                  
 40515                                  	call	VVDigit
 40516                                  	jne	short vvexit
 40517                                  	call	VVDigit
 40518                                  	jne	short vvexit
 40519                                  	cmp	byte [es:si],'.'
 40520                                  	jne	short vvexit
 40521                                  	dec	si
 40522                                  	;call	VVDigit
 40523                                  	; 18/12/2022
 40524                                  	;jmp	short VVDigit
 40525                                  ;vvexit:
 40526                                  	;retn
 40527                                  VVDigit:
 40528                                  	div	bl
 40529                                  	add	ah,'0'
 40530                                  	dec	si
 40531                                  	cmp	[es:si+1],ah
 40532                                  	mov	ah,0			; do not xor or sub we need Z
 40533                                  	retn
 40534                                  
 40535                                  %endif
 40536                                  
 40537                                  ;-----------------------------------------------------------------------
 40538                                  
 40539                                  ; 23/05/2019 - Retro DOS v4.0
 40540                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 40541                                  
 40542                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40543                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 40544                                  
 40545                                  exepatch_start:	 ; label byte
 40546                                  
 40547                                  	; The following is the code that'll be layed over the buggy unpack
 40548                                  	; code.
 40549                                  str1:
 40550 0000751F 06                      	db  06h	  		;push	es		 
 40551 00007520 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 40552                                  
 40553                                  first_stop equ	$-str1
 40554                                  			
 40555 00007522 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 40556                                  
 40557                                  first:  ; label	byte
 40558                                  
 40559 00007524 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40560 00007526 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40561 00007528 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40562 0000752B 57                      	db  57h	    		;push	di
 40563 0000752C B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40564 0000752F B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 40565 00007531 F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 40566 00007533 47                      	db  47h	    		;inc	di			
 40567 00007534 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 40568 00007536 5F                      	db  5Fh	    		;pop	di
 40569 00007537 58                      	db  58h	    		;pop	ax
 40570                                  
 40571                                  second_stop equ	$-first
 40572                                  
 40573 00007538 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 40574                                  
 40575                                  second: ; label	byte
 40576                                  
 40577 0000753A 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 40578                                  		    		;NextRec:				
 40579 0000753C B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 40580                                  		    		;norm_agn:				
 40581 0000753F 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 40582 00007541 F7D0                    	db  0F7h,0D0h		;not	ax		
 40583 00007543 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40584 00007545 7413                    	db  74h,13h		;jz	short SI_ok			
 40585 00007547 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 40586 00007549 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 40587 0000754C 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 40588 0000754E 7308                    	db  73h,08h		;jnc	short SItoDS			
 40589 00007550 F7DA                    	db  0F7h,0DAh		;neg	dx			
 40590 00007552 D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 40591 00007554 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 40592 00007556 33D2                    	db  33h,0D2h		;xor	dx,dx			
 40593                                  				;SItoDS: 				
 40594 00007558 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40595                                  				;SI_ok:					
 40596 0000755A 87F7                    	db  87h,0F7h		;xchg	si,di			
 40597 0000755C 1E                      	db  1Eh			;push	ds			
 40598 0000755D 06                      	db  06h			;push	es			
 40599 0000755E 1F                      	db  1Fh			;pop	ds			
 40600 0000755F 07                      	db  07h			;pop	es			
 40601 00007560 FECD                    	db  0FEh,0CDh		;dec	ch			
 40602 00007562 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 40603 00007564 AC                      	db  0ACh		;lodsb			
 40604 00007565 92                      	db  92h			;xchg	dx,ax
 40605 00007566 4E                      	db  4Eh			;dec	si
 40606 00007567 AD                      	db  0ADh		;lodsw			
 40607 00007568 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40608 0000756A 46                      	db  46h			;inc	si		
 40609 0000756B 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40610 0000756D 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40611 0000756F 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40612 00007571 7505                    	db  75h,05h		;jne	short TryEnum
 40613 00007573 AC                      	db  0ACh		;lodsb				
 40614 00007574 F3AA                    	db  0F3h,0AAh		;rep stosb			
 40615                                  
 40616                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 40617 00007576 EB06                    	db  0EBh,06h		;jmp	short TryNext
 40618                                  
 40619                                  				;TryEnum:
 40620 00007578 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40621 0000757A 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 40622 0000757C F3A4                    	db  0F3h,0A4h		;rep movsb			
 40623                                  				;TryNext:
 40624                                  
 40625 0000757E 92                      	db  92h			;xchg	dx,ax
 40626                                  ;	db  8Ah,0C2h		;mov	al,dl			
 40627                                  
 40628 0000757F A801                    	db  0A8h,01h		;test	al,1			
 40629 00007581 74B9                    	db  74h,0B9h		;jz	short NextRec			
 40630 00007583 9090                    	db  90h,90h		;nop,nop
 40631                                  	
 40632                                  last_stop equ $-second
 40633                                  size_str1 equ $-str1
 40634                                  
 40635                                  	; The following is the code that we need to look for in the exe
 40636                                  	; file.
 40637                                  
 40638                                  scan_patch1: ; label byte
 40639                                  
 40640 00007585 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40641 00007587 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40642 00007589 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 40643 0000758B 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40644 0000758D 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40645 0000758F BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40646 00007592 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40647 00007595 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40648 00007597 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40649 00007599 47                      	db  47h			;inc	di			
 40650 0000759A 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40651 0000759C 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40652 0000759E 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 40653 000075A0 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40654 000075A2 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40655                                  				;NextRec:
 40656 000075A5 B104                    	db  0B1h,04h		;mov	cl,4
 40657 000075A7 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40658 000075A9 F7D0                    	db  0F7h,0D0h		;not	ax		
 40659 000075AB D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40660 000075AD 7409                    	db  74h,09h		;jz	short SI_ok
 40661 000075AF 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40662 000075B1 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40663 000075B3 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40664 000075B5 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 40665                                  	       			;SI_ok:
 40666 000075B8 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40667 000075BA F7D0                    	db  0F7h,0D0h		;not	ax
 40668 000075BC D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40669 000075BE 7409                    	db  74h,09h		;jz	short DI_ok
 40670 000075C0 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40671 000075C2 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40672 000075C4 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40673 000075C6 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40674                                  				;DI_ok:
 40675                                  
 40676                                  size_scan_patch1 equ $-scan_patch1
 40677                                  
 40678                                  scan_patch2: ; label byte
 40679                                  			
 40680 000075C9 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40681 000075CB 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40682 000075CD 48                      	db  48h			;dec	ax
 40683 000075CE 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40684 000075D0 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40685 000075D2 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40686 000075D5 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40687 000075D8 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40688 000075DA F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40689 000075DC 47                      	db  47h			;inc	di			
 40690 000075DD 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40691 000075DF 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40692 000075E1 48                      	db  48h			;dec	ax
 40693 000075E2 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40694 000075E4 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40695                                  				;NextRec:
 40696 000075E7 B104                    	db  0B1h,04h		;mov	cl,4
 40697 000075E9 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40698 000075EB F7D0                    	db  0F7h,0D0h		;not	ax		
 40699 000075ED D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40700 000075EF 740A                    	db  74h,0Ah		;jz	short SI_ok
 40701 000075F1 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40702 000075F3 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40703 000075F5 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40704 000075F7 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 40705                                  				;or	si,0FFF0H
 40706                                  				;SI_ok:
 40707 000075FB 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40708 000075FD F7D0                    	db  0F7h,0D0h		;not	ax
 40709 000075FF D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40710 00007601 740A                    	db  74h,0Ah		;jz	short DI_ok
 40711 00007603 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40712 00007605 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40713 00007607 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40714 00007609 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 40715                                  				;or	di,0FFF0H
 40716                                  				;DI_ok:
 40717                                  
 40718                                  size_scan_patch2 equ $-scan_patch2
 40719                                  
 40720                                  scan_patch3: ; label byte
 40721                                  
 40722 0000760D 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40723 0000760F 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40724 00007611 48                      	db  48h			;dec	ax
 40725 00007612 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40726 00007614 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40727 00007616 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40728 00007619 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40729 0000761C B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40730 0000761E F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40731 00007620 47                      	db  47h			;inc	di			
 40732 00007621 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40733 00007623 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40734 00007625 48                      	db  48h			;dec	ax
 40735 00007626 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40736 00007628 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40737                                  				;NextRec:
 40738 0000762B B104                    	db  0B1h,04h		;mov	cl,4
 40739 0000762D 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40740 0000762F F7D0                    	db  0F7h,0D0h		;not	ax		
 40741 00007631 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40742 00007633 7409                    	db  74h,09h		;jz	short SI_ok
 40743 00007635 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40744 00007637 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40745 00007639 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 40746 0000763B 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 40747                                  				;SI_ok:
 40748 0000763E 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40749 00007640 F7D0                    	db  0F7h,0D0h		;not	ax
 40750 00007642 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40751 00007644 7409                    	db  74h,09h		;jz	short DI_ok
 40752 00007646 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40753 00007648 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40754 0000764A 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40755 0000764C 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40756                                  				;DI_ok:
 40757                                  
 40758                                  size_scan_patch3 equ $-scan_patch3
 40759                                  
 40760                                  scan_com: ; label byte
 40761                                  
 40762 0000764F AC                      	db  0ACh		;lodsb			
 40763 00007650 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 40764 00007652 4E                      	db  4Eh			;dec	si
 40765 00007653 AD                      	db  0ADh		;lodsw			
 40766 00007654 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40767 00007656 46                      	db  46h			;inc	si		
 40768 00007657 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40769 00007659 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40770 0000765B 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40771 0000765D 7506                    	db  75h,06h		;jne	short TryEnum
 40772 0000765F AC                      	db  0ACh		;lodsb				
 40773 00007660 F3AA                    	db  0F3h,0AAh		;rep stosb			
 40774 00007662 EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 40775                                  				;TryEnum:
 40776 00007665 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40777 00007667 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 40778 00007669 F3A4                    	db  0F3h,0A4h		;rep movsb			
 40779                                  				;TryNext:
 40780 0000766B 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 40781 0000766D A801                    	db  0A8h,01h		;test	al,1			
 40782                                  ;	db  74h,0BAh		;jz	short NextRec			
 40783                                  
 40784                                  size_scan_com	equ	$-scan_com
 40785                                  
 40786                                  ;-----------------------------------------------------------------------
 40787                                  
 40788                                  ; 23/05/2019 - Retro DOS v4.0
 40789                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 40790                                  
 40791                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40792                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 40793                                  
 40794                                  ExePatch:
 40795 0000766F E80600                  	call	ExePackPatch
 40796 00007672 36FF16[1412]            	call	word [ss:RationalPatchPtr]
 40797 00007677 C3                      	retn
 40798                                  
 40799                                  ;-----------------------------------------------------------------------
 40800                                  ;
 40801                                  ; Procedure Name 	: ExePackPatch
 40802                                  ;
 40803                                  ; Inputs	 	: DS 			-> DOSDATA
 40804                                  ;			  ES:0 			-> read in image
 40805                                  ;			  ax:cx = start cs:ip of program
 40806                                  ; Output		:		
 40807                                  ;
 40808                                  ;	1. If ES <= 0fffh
 40809                                  ;	   2. if exepack signature ('RB') found
 40810                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 40811                                  ;	       	 4. if rest of the code & checksum compares
 40812                                  ;	  	    5. overlay buggy code with code in 
 40813                                  ;		       doscode:str1.
 40814                                  ;		 6. endif
 40815                                  ;	      7. endif
 40816                                  ;	   8. endif
 40817                                  ;	9. endif
 40818                                  ;
 40819                                  ;
 40820                                  ; Uses			: NONE
 40821                                  ;
 40822                                  ;-----------------------------------------------------------------------
 40823                                  		
 40824                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40825                                  	; 23/05/2019 - Retro DOS v4.0	
 40826                                  ExePackPatch:
 40827 00007678 53                      	push	bx
 40828 00007679 8CC3                    	mov	bx,es			; bx has load segment
 40829 0000767B 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 40830 0000767F 7602                    	jbe	short ep_cont		; N: 
 40831 00007681 5B                      	pop	bx			; Y: no need to patch
 40832 00007682 C3                      	retn
 40833                                  ep_cont:
 40834 00007683 1E                      	push	ds
 40835 00007684 06                      	push	es
 40836 00007685 50                      	push	ax
 40837 00007686 51                      	push	cx
 40838 00007687 56                      	push	si
 40839 00007688 57                      	push	di
 40840                                  	
 40841                                  		; M033 - start
 40842                                  		; exepacked programs have an IP of 12h (>=2)
 40843                                  
 40844 00007689 83E902                  	sub	cx,2			; Q: is IP >=2 
 40845 0000768C 7303                    	jnb	short epp_1		; N: exit
 40846 0000768E E9C500                  	jmp	ep_notpacked
 40847                                  					; ax:cx now points to location of
 40848                                  					; 'RB' if this is an exepacked file.
 40849                                  		; M033 - end
 40850                                  epp_1:
 40851 00007691 89CF                    	mov	di,cx
 40852 00007693 8EC0                    	mov	es,ax
 40853 00007695 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 40854                                  					; unpack_offset
 40855                                  
 40856 0000769A 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 40857                                  	;ljne	ep_notpacked
 40858 0000769F 7403                    	je	short epp_2
 40859 000076A1 E9B200                  	jmp	ep_notpacked
 40860                                  epp_2:
 40861 000076A4 0E                      	push	cs
 40862 000076A5 1F                      	pop	ds			; set ds to cs
 40863                                  
 40864                                  	;add	di,6Ch
 40865 000076A6 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 40866                                  					;          file where we hope to find
 40867                                  					;	   scan string. 
 40868                                  
 40869 000076A9 E8B200                  	call	chk_common_str		; check for match
 40870                                  
 40871 000076AC 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 40872                                  					; N: check at patch2_offset
 40873                                  					; Y: check for rest of patch string
 40874 000076AE BE[8575]                	mov	si,scan_patch1
 40875                                  					; ds:si -> scan string 
 40876 000076B1 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 40877                                  
 40878                                  	;add	di,28h
 40879                                  	; 07/12/2022
 40880 000076B6 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 40881                                  					;          file where we hope to find
 40882                                  					;	   scan string. 
 40883                                  	;mov	cx,68
 40884 000076B9 B94400                  	mov	cx,size_scan_patch1
 40885                                  	;mov	bx,142
 40886 000076BC BB8E00                  	mov	bx,CHKSUM1_LEN
 40887                                  	;mov	ax,0EF4Eh
 40888 000076BF B84EEF                  	mov	ax,PATCH1_CHKSUM
 40889 000076C2 E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 40890 000076C5 7208                    	jc	short ep_done1		; Q: did we pass the test
 40891                                  					; N: exit
 40892                                  					; Y: overlay code with new 
 40893 000076C7 BE[1F75]                	mov	si,str1
 40894                                  	;mov	cx,102
 40895 000076CA B96600                  	mov	cx,size_str1
 40896                                  	
 40897 000076CD F3A4                    	rep	movsb
 40898                                  ep_done1:
 40899 000076CF E98400                  	jmp	ep_done
 40900                                  
 40901                                  ep_chkpatch2:
 40902                                  	;mov	di,76h
 40903 000076D2 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 40904                                  					; in another version of unpack
 40905 000076D5 E88600                  	call	chk_common_str		; check for match
 40906                                  
 40907 000076D8 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 40908                                  					; N: check for patch3_offset
 40909                                  					; Y: check for rest of patch string
 40910                                  
 40911 000076DA BE[C975]                	mov	si,scan_patch2
 40912                                  					; ds:si -> scan string 
 40913                                  	;mov	di,32h
 40914 000076DD BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 40915                                  					;          file where we hope to find
 40916                                  	;mov	cx,68			;	   scan string. 
 40917 000076E0 B94400                  	mov	cx,size_scan_patch2
 40918                                  	;mov	bx,140
 40919 000076E3 BB8C00                  	mov	bx,CHKSUM2_LEN
 40920                                  	;mov	ax,78B2h
 40921 000076E6 B8B278                  	mov	ax,PATCH2_CHKSUM
 40922 000076E9 E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 40923                                  
 40924                                  					; M046 - Start
 40925                                  					; Q: did we pass the test
 40926 000076EC 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 40927                                  					; N: try with a different chksum
 40928                                  
 40929                                  
 40930 000076EE BE[C975]                	mov	si,scan_patch2
 40931                                  					; ds:si -> scan string 
 40932                                  	;mov	cx,68
 40933 000076F1 B94400                  	mov	cx,size_scan_patch2
 40934                                  	;mov	bx,129
 40935 000076F4 BB8100                  	mov	bx,CHKSUM2A_LEN
 40936                                  	;mov	ax,1C47h
 40937 000076F7 B8471C                  	mov	ax,PATCH2A_CHKSUM
 40938 000076FA E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 40939                                  					; Q: did we pass the test
 40940 000076FD 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 40941                                  					; Y: overlay code with new 
 40942                                  						
 40943                                  ep_patchcode2:			       	; M046 - End
 40944 000076FF BE[1F75]                	mov	si,str1
 40945                                  	;mov	cx,3
 40946 00007702 B90300                  	mov	cx,first_stop
 40947 00007705 F3A4                    	rep	movsb
 40948 00007707 B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 40949 0000770A AB                      	stosw
 40950 0000770B 83C602                  	add	si,2
 40951                                  	;mov	cx,20
 40952 0000770E B91400                  	mov	cx,second_stop
 40953 00007711 F3A4                    	rep	movsb
 40954 00007713 AB                      	stosw				; put in dec ax and nop
 40955 00007714 83C602                  	add	si,2
 40956                                  	;mov	cx,75
 40957 00007717 B94B00                  	mov	cx,last_stop
 40958 0000771A F3A4                    	rep	movsb
 40959 0000771C EB38                    	jmp	short ep_done
 40960                                  
 40961                                  ep_chkpatch3:
 40962                                  	;mov	di,74h
 40963 0000771E BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 40964                                  					; in another version of unpack
 40965 00007721 E83A00                  	call	chk_common_str		; check for match
 40966                                  
 40967 00007724 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 40968                                  					; N: exit
 40969                                  					; Y: check for rest of patch string
 40970 00007726 BE[0D76]                	mov	si,scan_patch3
 40971                                  					; ds:si -> scan string 
 40972                                  	;mov	di,32h
 40973 00007729 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 40974                                  					;          file where we hope to find
 40975                                  					;	   scan string. 
 40976                                  	;mov	cx,66
 40977 0000772C B94200                  	mov	cx,size_scan_patch3
 40978                                  	;mov	bx,139
 40979 0000772F BB8B00                  	mov	bx,CHKSUM3_LEN
 40980                                  	;mov	ax,4EDEh
 40981 00007732 B8DE4E                  	mov	ax,PATCH3_CHKSUM
 40982 00007735 E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 40983 00007738 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 40984                                  					; N: exit
 40985                                  					; Y: overlay code with new 
 40986 0000773A BE[1F75]                	mov	si,str1
 40987                                  	;mv	cx,3
 40988 0000773D B90300                  	mov	cx,first_stop
 40989 00007740 F3A4                    	rep	movsb
 40990 00007742 B048                    	mov	al,48h			; al = opcode for dec ax
 40991 00007744 AA                      	stosb
 40992 00007745 83C602                  	add	si,2
 40993                                  	;mov	cx,20
 40994 00007748 B91400                  	mov	cx,second_stop
 40995 0000774B F3A4                    	rep	movsb
 40996 0000774D AA                      	stosb				; put in dec ax
 40997 0000774E 83C602                  	add	si,2
 40998                                  	;mov	cx,75
 40999 00007751 B94B00                  	mov	cx,last_stop
 41000 00007754 F3A4                    	rep	movsb
 41001                                  
 41002                                  ep_notpacked:
 41003                                  	;stc
 41004                                  ep_done:
 41005 00007756 5F                      	pop	di
 41006 00007757 5E                      	pop	si
 41007 00007758 59                      	pop	cx
 41008 00007759 58                      	pop	ax
 41009 0000775A 07                      	pop	es
 41010 0000775B 1F                      	pop	ds
 41011 0000775C 5B                      	pop	bx
 41012 0000775D C3                      	retn
 41013                                  
 41014                                  ;-------------------------------------------------------------------------
 41015                                  ;
 41016                                  ; 	Procedure Name	: chk_common_str
 41017                                  ;
 41018                                  ;	Input		: DS = DOSCODE
 41019                                  ;			; ES:DI points to string in packed file
 41020                                  ;
 41021                                  ;	Output		; Z if match else NZ
 41022                                  ;
 41023                                  ;-------------------------------------------------------------------------
 41024                                  
 41025                                  	; 23/05/2019 - Retro DOS v4.0
 41026                                  chk_common_str:
 41027 0000775E BE[4F76]                	mov	si,scan_com
 41028                                  					; ds:si -> scan string 
 41029                                  	;mov	cx,32
 41030 00007761 B92000                  	mov	cx,size_scan_com
 41031                                  
 41032 00007764 F3A6                    	repe	cmpsb	       
 41033                                  
 41034                                  					; M046 - start
 41035                                  	; a fourth possible version of these exepacked programs have a 
 41036                                  	; 056h instead of 06Bh. See scan_com above
 41037                                  	;
 41038                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 41039                                  	;
 41040                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 41041                                  	; we shall try to match the rest of the string
 41042                                  	;
 41043                                  
 41044 00007766 7409                    	jz	short ccs_done
 41045 00007768 26807DFF56              	cmp	byte [es:di-1],56h
 41046 0000776D 7502                    	jnz	short ccs_done
 41047                                  
 41048 0000776F F3A6                    	repe	cmpsb	    
 41049                                  ccs_done:				; M046 - end
 41050 00007771 C3                      	retn
 41051                                  
 41052                                  ;-------------------------------------------------------------------------
 41053                                  ;
 41054                                  ;	Procedure Name	: chk_patchsum
 41055                                  ;
 41056                                  ;	Input		: DS:SI -> string we're looking for
 41057                                  ;			: ES:DI -> offset in packed file
 41058                                  ;			: CX 	= scan length
 41059                                  ;			: BX	= length of check sum
 41060                                  ;			: AX 	= value of check sum
 41061                                  ;
 41062                                  ;	Output		: if patch & check sum compare
 41063                                  ;				NC
 41064                                  ;			  else
 41065                                  ;				CY
 41066                                  ;
 41067                                  ;	Uses		: AX, BX, CX, SI
 41068                                  ;
 41069                                  ;-------------------------------------------------------------------------
 41070                                  
 41071                                  	; 23/05/2019 - Retro DOS v4.0
 41072                                  chk_patchsum:
 41073 00007772 57                      	push	di
 41074                                  
 41075 00007773 F3A6                    	repe	cmpsb			   
 41076                                  
 41077 00007775 751A                    	jnz	short cp_fail		; Q: does the patch match
 41078                                  					; N: exit
 41079                                  					; Y:	
 41080                                  
 41081                                  		; we do a check sum starting from the location of the 
 41082                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 41083                                  		; unpacking code.
 41084                                  
 41085 00007777 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 41086 0000777C 89D9                    	mov	cx,bx			; cx = length of check sum
 41087                                  
 41088 0000777E 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 41089 00007780 31C0                    	xor	ax,ax
 41090                                  ep_chksum:
 41091 00007782 260305                  	add	ax,[es:di]
 41092 00007785 83C702                  	add	di,2
 41093 00007788 E2F8                    	loop	ep_chksum
 41094                                  
 41095 0000778A 5F                      	pop	di			; restore di
 41096                                  
 41097 0000778B 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 41098 0000778D 7502                    	jne	short cp_fail		; N: exit
 41099                                  					; Y: 
 41100 0000778F F8                      	clc	
 41101 00007790 C3                      	retn
 41102                                  
 41103                                  cp_fail:
 41104 00007791 F9                      	stc
 41105 00007792 C3                      	retn
 41106                                  
 41107                                  ; M020 : BEGIN
 41108                                  ;
 41109                                  ;----------------------------------------------------------------------------
 41110                                  ;
 41111                                  ; procedure : RationalPatch
 41112                                  ;
 41113                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 41114                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 41115                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 41116                                  ;
 41117                                  ; THE BUG is in the following code sequence:
 41118                                  ;
 41119                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 41120                                  ;90		even				; word align
 41121                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 41122                                  ;e8 xx xx	call	set_A20			; enable A20
 41123                                  ;
 41124                                  ; This patch routine replaces the mov & the loop with a far call into a
 41125                                  ; routine in DOS data segment which is in low memory (because A20 line
 41126                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 41127                                  ; a mov & loop.
 41128                                  ;
 41129                                  ; Identification of Buggy Rational EXE
 41130                                  ; ====================================
 41131                                  ;
 41132                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 41133                                  ;
 41134                                  ; OFFSET				Contains
 41135                                  ; ------				--------
 41136                                  ; 0000h			100 times Version number in binary
 41137                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 41138                                  ;
 41139                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 41140                                  ;
 41141                                  ; 002ah			offset where version number is stored in ASCII
 41142                                  ;				e.g. '3.48A'
 41143                                  ;
 41144                                  ; 0030h			offset of copyright string. Copyright strings either
 41145                                  ;			start with "DOS/16M Copyright...." or
 41146                                  ;			"Copyright.....". The string contains
 41147                                  ;			"Rational Systems, Inc."
 41148                                  ;
 41149                                  ; 0020h			word : Paragraph offset of the buggy code segment
 41150                                  ;				from the program image
 41151                                  ; 0016h			word : size of buggy code segment
 41152                                  ;
 41153                                  ;	Buggy code is definite to start after offset 200h in its segment
 41154                                  ;
 41155                                  ;----------------------------------------------------------------------------
 41156                                  
 41157                                  ; 23/05/2019 - Retro DOS v4.0
 41158                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 41159                                  
 41160                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41161                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 41162                                  
 41163                                  RScanPattern1:
 41164 00007793 000020000000400001-     	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 41164 0000779C 00                 
 41165                                  
 41166                                  RLen1 equ $ - RScanPattern1
 41167                                  
 41168                                  RScanPattern2:
 41169 0000779D 8B0E100090E2FEE8        	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 41170                                  
 41171                                  RLen2 equ $ - RScanPattern2
 41172                                  
 41173                                  RScanPattern3:
 41174 000077A5 8B0E1000E2FEE8          	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 41175                                  
 41176                                  RLen3 equ $ - RScanPattern2
 41177                                  
 41178                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 41179                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 41180                                  
 41181                                  ;----------------------------------------------------------------------------
 41182                                  ;
 41183                                  ; INPUT : ES = segment where program got loaded
 41184                                  ;
 41185                                  ;----------------------------------------------------------------------------
 41186                                  
 41187                                  RationalPatch:
 41188 000077AC FC                      	cld
 41189 000077AD 50                      	push	ax
 41190 000077AE 53                      	push	bx
 41191 000077AF 51                      	push	cx
 41192 000077B0 52                      	push	dx
 41193 000077B1 56                      	push	si
 41194 000077B2 57                      	push	di
 41195 000077B3 06                      	push	es
 41196 000077B4 1E                      	push	ds			; we use all of them
 41197 000077B5 BF0A00                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 41198 000077B8 0E                      	push	cs
 41199 000077B9 1F                      	pop	ds
 41200                                  	
 41201 000077BA BE[9377]                	mov	si,RScanPattern1
 41202                                  	;mov	cx,10
 41203 000077BD B90A00                  	mov	cx,RLen1
 41204 000077C0 F3A6                    	rep	cmpsb			; do we have the pattern ?
 41205 000077C2 754A                    	jne	short rpexit
 41206 000077C4 26A10000                	mov	ax,[es:0]
 41207 000077C8 3D5C01                  	cmp	ax,348			; is it a buggy version ?
 41208 000077CB 7241                    	jb	short rpexit
 41209 000077CD 3D7F01                  	cmp	ax,383			; is it a buggy version
 41210 000077D0 773C                    	ja	short rpexit
 41211                                  
 41212 000077D2 E85A00                  	call	VerifyVersion
 41213 000077D5 7537                    	jne	short rpexit
 41214                                  
 41215 000077D7 268B0E1600              	mov	cx,[es:16h]		; Length of buggy code seg
 41216 000077DC 81E90002                	sub	cx,200h			; Length we search (we start
 41217                                  					;  at offset 200h)
 41218 000077E0 268E062000              	mov	es,[es:20h]		; es=buggy code segment
 41219 000077E5 BE[9D77]                	mov	si,RScanPattern2
 41220                                  	;mov	dx,8	
 41221 000077E8 BA0800                  	mov	dx,RLen2
 41222 000077EB E82900                  	call	ScanCodeSeq		; look for code seq with nop
 41223 000077EE 740B                    	jz	short rpfound
 41224                                  
 41225 000077F0 BE[A577]                	mov	si,RScanPattern3
 41226                                  	;mov	dx,15
 41227 000077F3 BA0F00                  	mov	dx,RLen3
 41228 000077F6 E81E00                  	call	ScanCodeSeq		; look for code seq w/o nop
 41229 000077F9 7513                    	jnz	short rpexit
 41230                                  
 41231                                  rpfound:
 41232                                  	
 41233                                  ;	we set up a far call into DOS data
 41234                                  ;	dx has the length of the code seq we were searching for
 41235                                  
 41236 000077FB B09A                    	mov	al,9Ah			; far call opcode
 41237 000077FD AA                      	stosb
 41238 000077FE B8[1612]                	mov	ax,RatBugCode
 41239 00007801 AB                      	stosw
 41240 00007802 8CD0                    	mov	ax,ss
 41241 00007804 AB                      	stosw
 41242 00007805 89D1                    	mov	cx,dx
 41243 00007807 83E906                  	sub	cx,6			; filler (with NOPs)
 41244 0000780A B090                    	mov	al,90h
 41245 0000780C F3AA                    	rep	stosb
 41246                                  rpexit:
 41247 0000780E 1F                      	pop	ds
 41248 0000780F 07                      	pop	es
 41249 00007810 5F                      	pop	di
 41250 00007811 5E                      	pop	si
 41251 00007812 5A                      	pop	dx
 41252 00007813 59                      	pop	cx
 41253 00007814 5B                      	pop	bx
 41254 00007815 58                      	pop	ax
 41255 00007816 C3                      	retn
 41256                                  
 41257                                  ; M020 END
 41258                                  
 41259                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41260                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41261                                  
 41262                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 41263                                  
 41264                                  ;----------------------------------------------------------------------------
 41265                                  ;
 41266                                  ; ScanCodeSeq
 41267                                  ;
 41268                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41269                                  ;
 41270                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41271                                  ;
 41272                                  ;----------------------------------------------------------------------------
 41273                                  
 41274                                  ScanCodeSeq:
 41275                                  	; 17/12/2022
 41276 00007817 BF0002                  	mov	di,200h
 41277                                  ;ScanCodeSeq_di:
 41278 0000781A 51                      	push	cx
 41279 0000781B 29D1                    	sub	cx,dx
 41280 0000781D 41                      	inc	cx
 41281                                  	; 17/12/2022
 41282                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41283                                  	;mov	di,200h
 41284                                  scsagain:
 41285 0000781E 56                      	push	si
 41286 0000781F 57                      	push	di
 41287 00007820 51                      	push	cx
 41288 00007821 89D1                    	mov	cx,dx
 41289 00007823 F3A6                    	rep	cmpsb
 41290 00007825 59                      	pop	cx
 41291 00007826 5F                      	pop	di
 41292 00007827 5E                      	pop	si
 41293 00007828 7403                    	je	short scsfound
 41294 0000782A 47                      	inc	di
 41295 0000782B E2F1                    	loop	scsagain
 41296                                  scsfound:
 41297 0000782D 59                      	pop	cx
 41298                                  vvexit:		; 18/12/2022
 41299 0000782E C3                      	retn
 41300                                  
 41301                                  
 41302                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41303                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41304                                  
 41305                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 41306                                  
 41307                                  ;----------------------------------------------------------------------------
 41308                                  ;
 41309                                  ; VerifyVersion
 41310                                  ;
 41311                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41312                                  ; from ES:2A.
 41313                                  ;
 41314                                  ;       Entry: AX = binary version number 
 41315                                  ;       Exit : Z flag set if version numbers match
 41316                                  ;
 41317                                  ;----------------------------------------------------------------------------
 41318                                  
 41319                                  VerifyVersion:
 41320 0000782F 268B362A00              	mov	si,[es:2Ah]		; offset of version number
 41321                                  					;  in ascii
 41322 00007834 B30A                    	mov	bl,10
 41323 00007836 83C603                  	add	si,3			; point to last digit
 41324                                  
 41325 00007839 E80E00                  	call	VVDigit
 41326 0000783C 75F0                    	jne	short vvexit
 41327 0000783E E80900                  	call	VVDigit
 41328 00007841 75EB                    	jne	short vvexit
 41329 00007843 26803C2E                	cmp	byte [es:si],'.' ; 2Eh
 41330 00007847 75E5                    	jne	short vvexit
 41331 00007849 4E                      	dec	si
 41332                                  	;call	VVDigit
 41333                                  	; 18/12/2022
 41334                                  	;jmp	short VVDigit
 41335                                  ;vvexit:
 41336                                  	;retn
 41337                                  VVDigit:
 41338 0000784A F6F3                    	div	bl
 41339 0000784C 80C430                  	add	ah,'0' ; 30h
 41340 0000784F 4E                      	dec	si
 41341 00007850 26386401                	cmp	[es:si+1],ah
 41342 00007854 B400                    	mov	ah,0			; do not xor or sub we need Z
 41343 00007856 C3                      	retn
 41344                                  
 41345                                  ;---------------------------------------------------------------------------
 41346                                  ;
 41347                                  ;	M068
 41348                                  ;
 41349                                  ; 	Procedure Name	: IsCopyProt
 41350                                  ;
 41351                                  ;	Inputs		: DS:100 -> start of com file just read in
 41352                                  ;
 41353                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 41354                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 41355                                  ;			  copy protect scheme that relies on the A20 line
 41356                                  ;			  being turned off for it's scheme to work.
 41357                                  ;
 41358                                  ;			  Note: The int 21 function dispatcher will turn 
 41359                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 41360                                  ;				and dec the A20OFF_COUNT before	iretting 
 41361                                  ;				to the user. 
 41362                                  ;
 41363                                  ;	Uses		: ES, DI, SI, CX
 41364                                  ;
 41365                                  ;---------------------------------------------------------------------------
 41366                                  
 41367                                  ; 23/05/2019 - Retro DOS v4.0
 41368                                  
 41369                                  CPStartOffset	EQU	0175h
 41370                                  CPID1Offset	EQU	011Bh
 41371                                  CPID2Offset	EQU	0173h
 41372                                  CPID3Offset	EQU	0146h
 41373                                  CPID4Offset	EQU	0124h
 41374                                  ID1		EQU	05343h
 41375                                  ID2		EQU	05044h
 41376                                  ID3		EQU	0F413h
 41377                                  ID4		EQU	08000h
 41378                                  
 41379                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 41380                                  
 41381                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41382                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 41383                                  
 41384                                  CPScanPattern:
 41385 00007857 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 41386 0000785B 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 41387 0000785F C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 41388 00007865 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 41389 00007869 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 41390 0000786C BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 41391                                  
 41392                                  CPSPlen	EQU $ - CPScanPattern
 41393                                  
 41394                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 41395                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 41396                                  
 41397                                  IsCopyProt:
 41398 0000786F 813E1B014353            	cmp	word [CPID1Offset],ID1
 41399 00007875 752D                    	jne	short CP_done
 41400                                  
 41401 00007877 813E73014450            	cmp	word [CPID2Offset],ID2
 41402 0000787D 7525                    	jne	short CP_done
 41403                                  
 41404 0000787F 813E460113F4            	cmp	word [CPID3Offset],ID3
 41405 00007885 751D                    	jne	short CP_done
 41406                                  
 41407 00007887 813E24010080            	cmp	word [CPID4Offset],ID4
 41408 0000788D 7515                    	jne	short CP_done
 41409                                  
 41410 0000788F 0E                      	push	cs
 41411 00007890 07                      	pop	es
 41412 00007891 BF[5778]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 41413                                  
 41414 00007894 BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 41415                                  					; of pattern
 41416                                  
 41417 00007897 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 41418 0000789A F3A6                    	repe	cmpsb
 41419 0000789C 7506                    	jnz	short CP_done
 41420                                  
 41421 0000789E 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 41422                                  CP_done:
 41423 000078A4 C3                      	retn
 41424                                  	
 41425                                  ;DOSCODE ENDS
 41426                                  
 41427                                  	;END
 41428                                  
 41429                                  ;----------------------------------------------------------------------------
 41430                                  
 41431                                  ;align 2 ; 05/09/2018 (Error!)
 41432                                  
 41433                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41434                                  ;align 16 ; 08/09/2018 (OK.)
 41435 000078A5 90                      align 2
 41436                                  
 41437                                  ; 06/08/2018 - Retro DOS v3.0
 41438                                  ;============================================================================
 41439                                  ; MSINIT.ASM
 41440                                  ;============================================================================
 41441                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 41442                                  ;
 41443                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41444                                  ;
 41445                                  	; 15/07/2018 - Retro DOS v3.0
 41446                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 41447                                  
 41448                                  ; temp iret instruction
 41449                                  
 41450                                  
 41451                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41452                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 41453                                  
 41454                                  initiret: ; MSDOS 6.0
 41455                                  SYSBUF:
 41456                                  ;IRETT: ; 06/05/2019
 41457 000078A6 CF                      	iret
 41458                                  
 41459                                  ; 22/04/2019 - Retro DOS v4.0
 41460                                  
 41461                                  ; pointer to the BIOS data segment that will be available just to the
 41462                                  ; initialization code
 41463                                  
 41464 000078A7 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 41465                                  
 41466                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41467                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 41468                                  
 41469                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 41470                                  
 41471                                  ParaRound:
 41472 000078A9 83C00F                  	add	ax, 15
 41473 000078AC D1D8                    	rcr	ax, 1
 41474 000078AE D1E8                    	shr	ax, 1
 41475 000078B0 D1E8                    	shr	ax, 1
 41476 000078B2 D1E8                    	shr	ax, 1
 41477 000078B4 C3                      	retn
 41478                                  
 41479                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41480                                  
 41481                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41482                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 41483                                  	
 41484                                  	; 30/05/2019
 41485                                  	; 22/04/2019 - Retro DOS v4.0
 41486                                  	; 07/07/2018 - Retro DOS v3.0
 41487                                  	; Retro DOS v2.0 - 03/03/2018
 41488                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41489                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 41490                                  DOSINIT:
 41491                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 41492                                  	;
 41493                                  	; Far call from SYSINIT
 41494                                  	; DX = Memory size in paragraphs
 41495                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 41496                                  	;	  (Retro DOS v2.0, 16/03/2018)
 41497                                  	;
 41498                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 41499                                  	;	  (Retro DOS v4.0, 20/04/2019)
 41500                                  
 41501 000078B5 FA                              CLI
 41502 000078B6 FC                              CLD
 41503                                  
 41504                                  	; 03/11/2022
 41505                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 41506                                  	
 41507                                  	; 17/12/2022
 41508                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41509                                  	;push	dx ; =*=		; save parameters from BIOS
 41510                                  	
 41511 000078B7 56                      	push	si
 41512 000078B8 1E                      	push	ds
 41513 000078B9 57                      	push	di			;save di (ptr to BiosComBlock)
 41514                                  
 41515 000078BA 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 41516                                  
 41517                                  ; First, move the DOS data segment to its final location in low memory
 41518                                  
 41519                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 41520                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 41521 000078BC B8[6E7D]                	mov	ax,MEMSTRT		; get offset of end of init code
 41522                                  
 41523                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 41524                                  	;and	ax,~15	; 0FFF0h	; boundary
 41525                                  
 41526                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 41527                                  					; code segment
 41528                                  
 41529                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41530 000078BF 83C00F                  	add	ax,15			; round to nearest paragraph
 41531 000078C2 83E0F0                  	and	ax,~15			; boundary
 41532                                  
 41533 000078C5 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 41534                                  					; code segment
 41535                                  	; 05/12/2022
 41536                                  	; 30/04/2019 - Retro DOS v4.0
 41537                                  	;xor	si,si
 41538                                  	
 41539 000078C7 8CC8                    	mov	ax,cs
 41540 000078C9 8ED8                    	mov	ds,ax			; ds = current code segment
 41541                                  					; DS:SI now points to dosdata
 41542                                  
 41543                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 41544                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 41545                                  					;  BData segment. Cannot use
 41546                                  					;  getdseg macro here!!!
 41547                                  	; 17/12/2022
 41548 000078CB 8E06[A778]              	mov	es,[InitBioDataSeg]
 41549                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41550                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 41551                                  
 41552                                  	;mov	es,[es:3]
 41553 000078CF 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 41554                                  
 41555 000078D4 31FF                    	xor	di,di			; ES:DI now points to RAM data
 41556                                  
 41557                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 41558                                  	;mov	cx,4976  ; 25/05/2019
 41559                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41560                                  	;mov	cx,4962
 41561                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 41562 000078D6 B96213                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 41563 000078D9 F3A4                    	rep	movsb			; move data to final location
 41564                                  	
 41565 000078DB 5F                      	pop	di			; restore ptr to BiosComBlock
 41566 000078DC 1F                      	pop	ds			; restore parms from BIOS
 41567 000078DD 5E                      	pop	si
 41568                                  	; 17/12/2022
 41569                                  	;pop	dx ; 30/05/2019	
 41570                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41571                                  	;pop	dx ; =*=		
 41572                                  
 41573 000078DE 06                      	push	es
 41574 000078DF 1E                      	push	ds
 41575 000078E0 07                      	pop	es			; es:si -> device chain
 41576 000078E1 1F                      	pop	ds			; ds points to dosdata
 41577                                  
 41578                                  ;SR;
 41579                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 41580                                  ;now so that the EXEC call knows when SysInit is present to do the special
 41581                                  ;lie table handling for device drivers. This can be expanded later on to
 41582                                  ;establish a communication block from the BIOS to the DOS.
 41583                                  
 41584                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 41585                                  	;mov	[1042h],bx
 41586 000078E2 893E[4010]              	mov	[BiosDataPtr],di
 41587 000078E6 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 41588                                  
 41589 000078EA 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 41590                                  
 41591                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 41592                                  
 41593 000078EF 2E8C1E[B451]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 41594 000078F4 2E8C1E[B851]            	mov	[cs:LowInt24Addr+2],ds
 41595 000078F9 2E8C1E[BC51]            	mov	[cs:LowInt28Addr+2],ds
 41596                                  
 41597                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 41598                                  	;mov	[584h],sp
 41599                                  	;mov	[586h],ss
 41600 000078FE 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 41601 00007902 8926[8405]              	mov	[USER_SP],sp
 41602 00007906 8C16[8605]              	mov	[USER_SS],ss
 41603                                  
 41604 0000790A 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 41605 0000790C 8ED0                    	mov	ss,ax
 41606                                  
 41607                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 41608                                  	;mov	sp,offset dosdata:dskstack
 41609 0000790E BC[2009]                	mov	sp,DSKSTACK
 41610                                  
 41611                                  ;M023
 41612                                  ; Init patch ptrs to default values
 41613                                  
 41614                                  	;mov	word [1212h],RetExePatch
 41615                                  	;mov	word [1214h],RetExePatch
 41616                                  	;mov	word [61h],RetExePatch
 41617 00007911 C706[1212][3B63]        	mov	word [FixExePatch],RetExePatch	; M023
 41618 00007917 C706[1412][3B63]        	mov	word [RationalPatchPtr],RetExePatch ; M023
 41619 0000791D C706[6100][3B63]        	mov	word [ChkCopyProt],RetExePatch	; M068
 41620                                  
 41621                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41622                                  %if 0	
 41623                                  
 41624                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 41625                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 41626                                  ; running in the HMA.
 41627                                  
 41628                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 41629                                  	cmp	al,2		;   386 or later?
 41630                                  	mov	ax,Rational386Patch
 41631                                  	jae	short di_set_patch
 41632                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 41633                                  di_set_patch:
 41634                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 41635                                  
 41636                                  %endif
 41637                                  	; Set up the variable temp_dosloc to point to the dos code segment
 41638                                  
 41639 00007923 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 41640                                  
 41641                                  	; ax now holds segment of DOS code
 41642 00007925 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 41643                                  
 41644 00007928 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 41645 0000792C 8936[4800]              	mov	word [NULDEV],si
 41646                                  ;SR;
 41647                                  ; There are some locations in the Win386 instance data structures
 41648                                  ; which need to be set up with the DOS data segment. First, initialize
 41649                                  ; the segment part of the instance table pointer in the SIS.
 41650                                  
 41651                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 41652 00007930 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 41653                                  
 41654                                  ; Now initialize the segment part of the pointer to the data in each
 41655                                  ; instance table entry.
 41656                                  
 41657 00007934 56                      	push	si		; preserve pointer to device chain
 41658                                  	; 18/12/2022
 41659                                  	; cx = 0
 41660 00007935 B107                    	mov	cl,7
 41661                                  	;mov	cx,7		; There are 7 entries in the instance table
 41662                                  				; M019
 41663                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 41664 00007937 BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 41665                                  Instance_init_loop:
 41666 0000793A 8C1C                    	mov	[si],ds		; set offset in instance entry
 41667                                  	;add	si,6
 41668 0000793C 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 41669 0000793F E2F9                    	loop	Instance_init_loop
 41670                                  
 41671                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 41672                                  
 41673                                  	; 18/12/2022
 41674 00007941 B105                    	mov	cl,5
 41675                                  	;mov	cx,5		; There are five entries in the instance table
 41676                                  
 41677                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 41678                                  	;mov	si,11EDh	; point si to segment field
 41679 00007943 BE[ED11]                	mov	si,OldInstanceJunk+6
 41680                                  OldInstance_init_loop:
 41681 00007946 8C1C                    	mov	[si],ds		; set offset in instance entry
 41682 00007948 83C606                  	add	si,6		; move on to next entry
 41683 0000794B E2F9                    	loop	OldInstance_init_loop
 41684 0000794D 5E                      	pop	si		; restore pointer to device chain
 41685                                  
 41686                                  ; End of WIN386 2.xx compatibility bullshit
 41687                                  
 41688                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41689                                  %if 0	
 41690                                     	; 30/04/2019
 41691                                  	;push	es
 41692                                  	;pop	ds
 41693                                  			; ds:si points to console device
 41694                                  
 41695                                  	; 24/04/2019 - Retro DOS v4.0
 41696                                  
 41697                                  	; 15/07/2018
 41698                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 41699                                  	; (Set INT 2Ah handler address to an 'IRET')
 41700                                  
 41701                                  	; need crit vector inited to use deviocall
 41702                                  	;push	ds			; preserve segment of device chain
 41703                                  	push	es ; 30/04/2019
 41704                                  
 41705                                  %endif
 41706                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41707 0000794E 06                      	push	es
 41708                                  	; 17/12/2022
 41709                                  	;pop	ds
 41710                                  	;push	ds
 41711                                  
 41712 0000794F 31C0                    	xor	ax,ax
 41713 00007951 8ED8                    	mov	ds,ax			; point DS to int vector table
 41714 00007953 B8[A678]                	mov	ax,initiret
 41715                                  	;mov	[0A8h],ax  ; [2Ah*4]
 41716 00007956 A3A800                  	mov	[addr_int_ibm],ax
 41717 00007959 8CC8                    	mov	ax,cs
 41718                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 41719 0000795B A3AA00                  	mov	[addr_int_ibm+2],ax
 41720 0000795E 1F                      	pop	ds			; restore segment of device chain
 41721                                  
 41722 0000795F E81F02                  	call	CHARINIT  		; initialize console driver
 41723 00007962 56                      	push	si			; save pointer to header
 41724                                  
 41725 00007963 16                      	push	ss			; move pointer to dos data...
 41726 00007964 07                      	pop	es			; ...into ES
 41727                                  
 41728                                  	;initialize sft for file 0 (CON)
 41729                                  
 41730                                          ; 07/07/2018 - Retro DOS v3.0
 41731                                  	; 24/04/2019 - Retro DOS v4.0
 41732                                  	;mov	di,SFTABL+6 
 41733 00007965 BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 41734 00007968 B80300                          MOV     AX,3
 41735 0000796B AB                              STOSW           	; Refcount
 41736 0000796C FEC8                            DEC     AL
 41737 0000796E AB                              STOSW           	; Access rd/wr, compatibility
 41738 0000796F 30C0                            XOR     AL,AL
 41739 00007971 AA                              STOSB           	; attribute
 41740                                  	;mov	al,0C3h
 41741 00007972 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 41742 00007974 AB                      	STOSW			; flags
 41743 00007975 89F0                            mov	ax,si
 41744 00007977 AB                              stosw			; device pointer in devptr	
 41745 00007978 8CD8                            mov	ax,ds
 41746 0000797A AB                      	stosw
 41747 0000797B 31C0                    	xor	ax,ax	; 0
 41748 0000797D AB                      	stosw			; firclus
 41749 0000797E AB                      	stosw			; time
 41750 0000797F AB                      	stosw			; date
 41751 00007980 48                      	dec	ax	; -1
 41752 00007981 AB                      	stosw			; size
 41753 00007982 AB                      	stosw
 41754 00007983 40                      	inc	ax	; 0
 41755 00007984 AB                      	stosw			; position
 41756 00007985 AB                      	stosw
 41757                                  	;add	di,7
 41758 00007986 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 41759                                  				; point at name
 41760                                  	;add	si,10
 41761 00007989 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 41762                                  				; point to name
 41763 0000798C B90400                  	mov	cx,4
 41764 0000798F F3A5                    	rep	movsw		; name
 41765 00007991 B103                    	mov	cl,3
 41766 00007993 B020                    	mov	al," "
 41767 00007995 F3AA                    	rep	stosb		; extension
 41768                                  
 41769 00007997 5E                      	pop	si		; get back pointer to header
 41770                                  
 41771                                  				; mark device as CON I/O
 41772                                  	; 15/07/2018
 41773                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 41774 00007998 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 41775                                  	; 12/03/2018
 41776                                  	;mov	[ss:32h],si
 41777 0000799C 368936[3200]            	MOV     [SS:BCON],SI
 41778                                  	;mov	[ss:34h],ds
 41779 000079A1 368C1E[3400]                    MOV     [SS:BCON+2],DS
 41780                                  
 41781                                  	; initialize each device until the clock device is found
 41782                                  
 41783                                  CHAR_INIT_LOOP:
 41784 000079A6 C534                            LDS     SI,[SI]			; AUX device
 41785 000079A8 E8D601                  	call	CHARINIT 
 41786                                         	;15/07/2018
 41787                                  	;test	byte [SI+4],8
 41788 000079AB F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 41789 000079AF 74F5                            JZ      SHORT CHAR_INIT_LOOP
 41790                                  	; 12/03/2018
 41791                                  	;mov	[ss:2Eh],si
 41792 000079B1 368936[2E00]                    MOV     [SS:BCLOCK],SI
 41793                                  	;mov	[ss:30h],ds
 41794 000079B6 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 41795                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 41796                                  
 41797                                  	;mov	bp,4970			; bp = pointer to free mem
 41798                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 41799                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 41800                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 41801 000079BB BD6213                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 41802                                  
 41803 000079BE 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 41804 000079C3 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 41805                                  PERDRV:
 41806                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 41807 000079C8 C534                            LDS	SI,[SI]			; Next device
 41808 000079CA 83FEFF                          CMP	SI,-1	; 0FFFFh
 41809 000079CD 7479                    	JZ	SHORT CONTINIT
 41810                                  
 41811 000079CF E8AF01                          call	CHARINIT
 41812                                  
 41813                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 41814                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 41815                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 41816                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 41817                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 41818                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 41819                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 41820                                  
 41821                                          ; 15/07/2018
 41822                                  	;test	word [SI+4],8000h		; DEVTYP
 41823                                          ; 17/12/2022
 41824                                  	;test	byte [SI+5],80h
 41825 000079D2 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 41826                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 41827 000079D6 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 41828                                  
 41829 000079D8 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 41830 000079DD 30ED                    	XOR     CH,CH
 41831                                          ; 07/07/2018
 41832                                  	;MOV	[SI+10],CL		; Number of units in name field
 41833 000079DF 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 41834 000079E2 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 41835 000079E7 30F6                    	XOR     DH,DH
 41836 000079E9 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 41837 000079EE 1E                      	PUSH    DS
 41838 000079EF 56                              PUSH    SI
 41839 000079F0 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 41840                                  
 41841                                  PERUNIT:
 41842 000079F5 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 41843 000079F7 43                              INC     BX
 41844 000079F8 43                              INC     BX                      ; On to next BPB
 41845                                  	; 15/12/2022
 41846                                  	; 07/07/2018
 41847                                          ;mov	[ES:BP+DPB.DRIVE],DL
 41848 000079F9 26885600                	MOV     [ES:BP],DL
 41849                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41850                                  	;;mov	[ES:BP+0],DL
 41851                                  	;mov	[ES:BP+DPB.DRIVE],DL
 41852                                  
 41853                                  	;MOV	[ES:BP+1],DH
 41854 000079FD 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 41855 00007A01 53                              PUSH    BX
 41856 00007A02 51                              PUSH    CX
 41857 00007A03 52                              PUSH    DX
 41858                                  
 41859                                          ;invoke	$SETDPB
 41860 00007A04 E84196                          CALL	_$SETDPB		; build DPB!
 41861                                  
 41862                                  	; 07/07/2018
 41863                                  	;MOV	AX,[ES:BP+2]
 41864 00007A07 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 41865                                          ; 12/03/2018
 41866 00007A0B 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 41867 00007A10 7604                    	JBE     SHORT NOTMAX		; N:
 41868 00007A12 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 41869                                  NOTMAX:					
 41870                                  	; set the next dpb field in the currently built bpb
 41871                                  	; and mark as never accessed
 41872                                          
 41873                                  	; 24/04/2019
 41874 00007A16 89E8                    	mov	ax,bp			; get pointer to DPB
 41875                                  	;add	ax,33
 41876 00007A18 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 41877                                  					; set seg & offset of next DPB
 41878                                  	;mov	[es:bp+25],ax
 41879 00007A1B 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 41880                                  	;mov	[es:bp+27],es
 41881 00007A1F 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 41882                                  					; mark as never accessed
 41883                                  	;mov	byte [es:bp+24],0FFh
 41884 00007A23 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 41885                                  
 41886 00007A28 5A                      	POP     DX
 41887 00007A29 59                              POP     CX
 41888 00007A2A 5B                              POP     BX
 41889 00007A2B 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 41890 00007A2D 5E                              POP     SI
 41891 00007A2E 1F                              POP     DS
 41892                                  					; ds:si -> device header
 41893                                  					; store it in the corresponding dpb
 41894                                  	; 07/07/2018
 41895                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 41896 00007A2F 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 41897                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 41898 00007A33 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 41899                                  
 41900 00007A37 1E                              PUSH    DS			; save pointer to device header
 41901 00007A38 56                              PUSH    SI
 41902 00007A39 FEC6                            INC     DH			; inc unit #
 41903 00007A3B FEC2                            INC     DL			; inc drive #
 41904 00007A3D 8ED8                            MOV     DS,AX			; restore segment of BPB array
 41905                                          ;add	bp,33 ; 24/04/2019
 41906 00007A3F 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 41907 00007A42 E2B1                    	LOOP    PERUNIT			; process all units in each driver
 41908                                          
 41909 00007A44 5E                      	POP     SI			; restore pointer to device header
 41910 00007A45 1F                              POP     DS
 41911 00007A46 EB80                    	JMP	PERDRV			; process all drivers in chain
 41912                                  
 41913                                  CONTINIT:
 41914                                  	; 24/04/2019
 41915                                  	;sub	bp,33			; set link in last DPB to -1
 41916 00007A48 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 41917                                  					; set last link offset & segment
 41918                                  	;mov	word [bp+25],0FFFFh
 41919 00007A4B C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 41920                                  	;mov	word [bp+27],0FFFFh
 41921 00007A50 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 41922                                  	;add	bp,33
 41923 00007A55 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 41924                                  					; the DPB chain is done.  
 41925 00007A58 16                      	push	ss
 41926 00007A59 1F                      	pop	ds
 41927                                  
 41928 00007A5A 89E8                    	mov	ax,bp
 41929 00007A5C E84AFE                  	call	ParaRound		; round up to segment
 41930                                  
 41931 00007A5F 8CDA                    	mov	dx,ds			; dx = dosdata segment
 41932 00007A61 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 41933                                  
 41934 00007A63 BB0F00                  	mov	bx,0Fh
 41935                                  	
 41936                                  	; 24/05/2019
 41937                                  	;mov	cx,[ENDMEM]
 41938                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41939                                  	; 17/12/2022
 41940                                  	;mov	cx,[ENDMEM] 
 41941                                  					; set seg inpacketto dosdata					
 41942 00007A66 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 41943                                  
 41944                                  ; Patch in the segments of the interrupt vectors with current code segment.
 41945                                  ; Also patch in the segment of the pointers in the dosdata area.
 41946                                  ;
 41947                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 41948                                  ; calls were done. The procedure patch_misc_segments is called multiple
 41949                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 41950                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 41951                                  
 41952 00007A6A 52                      	push	dx			; preserve first free segment
 41953                                  
 41954 00007A6B A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 41955 00007A6E 8EC0                    	mov	es,ax			; es = segment of DOS
 41956 00007A70 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 41957                                  
 41958 00007A76 E8E101                  	call	patch_vec_segments	; uses AX as doscode segment
 41959 00007A79 E81602                  	call	patch_misc_segments	; patch in segments for sharer and 
 41960                                  					; other tables with seg in ES.
 41961                                  	; 17/12/2022
 41962                                  	; cx = 0
 41963 00007A7C 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 41964                                  
 41965 00007A80 5A                      	pop	dx			; restore first free segment
 41966                                  
 41967                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 41968                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 41969                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 41970                                  ; low_mem_stub by seg_reinit.
 41971                                  
 41972                                  	;xor	ax,ax ; 0
 41973                                  	;mov	ds,ax
 41974                                  	;mov	es,ax
 41975                                  	; 17/12/2022
 41976                                  	; cx = 0
 41977                                  	;xor	cx,cx ; 0
 41978 00007A81 8ED9                    	mov	ds,cx
 41979 00007A83 8EC1                    	mov	es,cx
 41980                                  
 41981                                  	; set the segment of int 24 vector that was 
 41982                                  	; left out by patch_vec_segments above.
 41983                                  
 41984                                  	; 17/12/2022
 41985                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41986                                  ;%if 0
 41987                                  	; 24/05/2019
 41988                                  	;;mov	di,90h
 41989                                  	;;mov	di,4*int_fatal_abort
 41990                                  	;mov	di,addr_int_fatal_abort
 41991 00007A85 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 41992                                  
 41993 00007A88 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 41994                                  	;mov	[di+2],ax  ; int 24h segment
 41995 00007A8C 8905                    	mov	[di],ax ; 24/05/2019
 41996                                  
 41997                                  	;;mov	di,82h
 41998                                  	;mov	di,INTBASE+2
 41999                                  
 42000                                  ;%endif
 42001                                  	; 17/12/2022
 42002                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42003                                  	;;mov	di,90h
 42004                                  	;;mov	di,4*int_fatal_abort
 42005                                  	;mov	di,addr_int_fatal_abort
 42006                                  	;mov	ax,[ss:TEMP_DOSLOC]
 42007                                  	;mov	[di+2],ax  ; int 24h segment
 42008                                  	;;mov	di,82h
 42009                                  	;mov	di,INTBASE+2
 42010                                  
 42011                                  	; set default divide trap offset
 42012                                  
 42013                                  	;mov	word ptr ds:[0],offset doscode:divov
 42014 00007A8E C7060000[9053]          	mov	word [0],DIVOV	
 42015                                  
 42016                                  	; set vectors 20-28 and 2a-3f to point to iret.
 42017                                  
 42018                                  	;mov	di,80h
 42019 00007A94 BF8000                  	mov	di,INTBASE
 42020                                  	;mov	ax,offset doscode:irett
 42021 00007A97 B8[2103]                	mov	ax,IRETT
 42022                                  
 42023                                  	; 17/12/2022
 42024                                  	; cx = 0
 42025 00007A9A B109                    	mov	cl,9
 42026                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 42027                                  					;   sets offsets for ints 20h-28h
 42028                                  iset1:
 42029 00007A9C AB                      	stosw
 42030 00007A9D 83C702                  	add	di,2
 42031 00007AA0 E2FA                    	loop	iset1
 42032                                  
 42033 00007AA2 83C704                  	add	di,4			; skip vector 29h
 42034                                  
 42035                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 42036                                  ;					;   sets offsets for ints 2ah-2fh
 42037                                  ;iset2:
 42038                                  ;	stosw
 42039                                  ;	add	di,2
 42040                                  ;	loop	iset2
 42041                                  
 42042                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42043                                  ; patch_vec_segments above. So skip it.
 42044                                  
 42045                                  ;	add	di,8			; skip vector 30h & 31h 
 42046                                  
 42047                                  	;;;
 42048                                  	; 06/05/2019 - Retro DOS v4.0
 42049                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 42050                                  	; 17/12/2022
 42051 00007AA5 B105                    	mov	cl,5 ; 28/06/2019
 42052                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42053                                  	;mov	cx,6
 42054                                  iset2:
 42055 00007AA7 AB                      	stosw
 42056 00007AA8 83C702                  	add	di,2
 42057 00007AAB E2FA                    	loop	iset2
 42058                                  
 42059                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42060                                  	; 17/12/2022
 42061 00007AAD 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 42062                                  	;add	di,8
 42063                                  	;;;
 42064                                  
 42065                                  	; 17/12/2022
 42066 00007AB0 B10E                    	mov	cl,14
 42067                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 42068                                  					;   sets offsets for ints 32h-3fh
 42069                                  iset3:
 42070 00007AB2 AB                      	stosw
 42071 00007AB3 83C702                  	add	di,2
 42072 00007AB6 E2FA                    	loop	iset3
 42073                                  
 42074                                  ;if installed
 42075                                  	; set the offset of int2f handler
 42076                                  	;mov	word [0BCh],INT2F
 42077 00007AB8 C706BC00[5007]          	mov	word [02Fh*4],INT2F
 42078                                  	; set segment to doscode as we have to do int 2f to check for XMS
 42079 00007ABE 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 42080                                  	;mov	[0BEh],ax
 42081 00007AC2 A3BE00                  	mov	[(02Fh*4)+2],ax
 42082                                  ;endif
 42083                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 42084                                  	; long jump will be patched in by seg_reinit
 42085                                  
 42086                                  	;mov	byte [C0h],0EAh
 42087 00007AC5 C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 42088                                  	;mov	byte [C1h],CALL_ENTRY
 42089 00007ACA C706C100[2203]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 42090                                  
 42091 00007AD0 C7068000[1B03]          	mov	word [addr_int_abort],QUIT	; INT 20h
 42092 00007AD6 C7068400[4703]          	mov	word [addr_int_command],COMMAND ; INT 21h
 42093 00007ADC C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 42094 00007AE2 89168A00                	mov	word [addr_int_terminate+2],dx	
 42095 00007AE6 C7069400[7A05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 42096 00007AEC C7069800[0106]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 42097 00007AF2 C7069C00[DE62]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 42098                                  
 42099 00007AF8 16                      	push	ss
 42100 00007AF9 1F                      	pop	ds
 42101                                  	
 42102                                  	; 24/05/2019
 42103                                  	;push	ss
 42104                                  	;pop	es
 42105                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42106                                  	; 17/12/2022
 42107                                  	;push	ss
 42108                                  	;pop	es
 42109                                  
 42110 00007AFA 52                      	push	dx			; remember address of arena
 42111                                  
 42112 00007AFB 42                      	inc	dx			; leave room for arena header
 42113                                  	;mov	[330h],dx
 42114 00007AFC 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 42115                                  
 42116 00007B00 31FF                    	xor	di,di			; point es:di at end of memory
 42117 00007B02 8EC2                    	mov	es,dx			; ...where psp will be
 42118 00007B04 31C0                    	xor	ax,ax
 42119                                  	;mov	cx,80h			; psp is 128 words
 42120                                  	; 17/12/2022
 42121 00007B06 B180                    	mov	cl,128 ; 28/06/2019
 42122                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42123                                  	;mov	cx,128
 42124                                  
 42125 00007B08 F3AB                    	rep	stosw			; zero out psp area
 42126 00007B0A A1[4603]                        mov     ax,[ENDMEM]
 42127                                  	
 42128                                  	; 17/12/2022
 42129                                  	; cx = 0
 42130 00007B0D E88696                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 42131                                  
 42132                                  	; ds, es now point to PSP
 42133                                  
 42134 00007B10 16                      	push	ss
 42135 00007B11 1F                      	pop	ds
 42136                                  
 42137                                  	;mov	di,24
 42138 00007B12 BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 42139 00007B15 31C0                    	xor	ax,ax
 42140 00007B17 AB                      	stosw
 42141 00007B18 AA                      	stosb				; 0,1 and 2 are con device
 42142 00007B19 B0FF                    	mov	al,0FFh
 42143                                  	;mov	cx,FILPERPROC-3 ; 17
 42144                                  	; 17/12/2022
 42145                                  	; cx = 4
 42146 00007B1B B111                    	mov	cl,FILPERPROC-3 ; 17
 42147 00007B1D F3AA                    	rep	stosb			; rest are unused
 42148                                  
 42149 00007B1F 16                      	push	ss
 42150 00007B20 07                      	pop	es
 42151                                  					; must be set to print messages
 42152 00007B21 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 42153                                  
 42154                                  ; after this point the char device functions for con will work for
 42155                                  ; printing messages
 42156                                  
 42157                                  	; 24/04/2019 - Retro DOS v4.0
 42158                                  
 42159                                  ; 12/05/2019
 42160                                  ;
 42161                                  ;write_version_msg:
 42162                                  ;
 42163                                  ;	;if	(not ibm)
 42164                                  ;	;mov	si,offset doscode:header
 42165                                  ;	mov	si,HEADER
 42166                                  ;outmes:
 42167                                  ;	;lods	cs:byte ptr [si]
 42168                                  ;	cs
 42169                                  ;	lodsb
 42170                                  ;	cmp	al,"$"
 42171                                  ;	je	short outdone
 42172                                  ;	call	OUTT
 42173                                  ;	jmp	short outmes
 42174                                  ;outdone:
 42175                                  ;	push	ss			; out stomps on segments
 42176                                  ;	pop	ds
 42177                                  ;	push	ss
 42178                                  ;	pop	es
 42179                                  ;	;endif
 42180                                  
 42181                                  	; at this point es is dosdata
 42182                                  
 42183                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 42184                                  	; in sysinittable (ms_data.asm)
 42185                                  
 42186                                  	;mov	si,0D28h
 42187 00007B25 BE[280D]                	mov	si,SysInitTable
 42188                                  
 42189                                  	; 17/12/2022
 42190                                  	; ds = es = ss
 42191                                  
 42192                                  	; 17/12/2022
 42193                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42194                                  ;%if 0
 42195                                  	;;mov	[es:si+6],es
 42196                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42197                                  	;;mov	[es:si+2],es
 42198                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42199                                  	
 42200 00007B28 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 42201 00007B2B 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 42202                                  
 42203                                  	; buffhead -> dosdata:hashinitvar 
 42204                                  
 42205                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42206 00007B2E 8C06[3A00]              	mov	[BUFFHEAD+2],es
 42207                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42208                                  	;mov	si,6Dh
 42209 00007B32 BE[6D00]                	mov	si,HASHINITVAR
 42210                                  	;mov	[es:BUFFHEAD],si
 42211 00007B35 8936[3800]              	mov	[BUFFHEAD],si
 42212                                  
 42213 00007B39 5A                              pop     dx                      ; restore address of arena
 42214                                  
 42215                                  	;mov	[032Ch+2],dx
 42216 00007B3A 8916[2E03]                      mov     [DMAADD+2],dx
 42217                                  
 42218                                  	;mov	[es:arena_head],dx
 42219 00007B3E 8916[2400]              	mov	[arena_head],dx
 42220                                  
 42221                                  ;%endif
 42222                                  
 42223                                  ; 17/12/2022
 42224                                  %if 0
 42225                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42226                                  	;;;
 42227                                  	;mov	[es:si+6],es
 42228                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42229                                  	;mov	[es:si+2],es
 42230                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42231                                  
 42232                                  	; buffhead -> dosdata:hashinitvar 
 42233                                  
 42234                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42235                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42236                                  	;mov	si,6Dh
 42237                                  	mov	si,HASHINITVAR
 42238                                  	mov	[es:BUFFHEAD],si
 42239                                  
 42240                                          pop     dx                      ; restore address of arena
 42241                                  
 42242                                  	;mov	[032Ch+2],dx
 42243                                          mov     [DMAADD+2],dx
 42244                                  
 42245                                  	mov	[es:arena_head],dx
 42246                                  	;;;
 42247                                  %endif
 42248                                  
 42249 00007B42 8EDA                            mov     ds,dx
 42250                                  
 42251                                  	;mov	byte [0],'Z'
 42252 00007B44 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 42253                                          ;mov	word [1],0
 42254 00007B49 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 42255                                  
 42256 00007B4F 36A1[4603]                      mov     ax,[ss:ENDMEM]
 42257 00007B53 29D0                    	sub	ax,dx
 42258 00007B55 48                              dec     ax
 42259 00007B56 A30300                          mov     [ARENA.SIZE],ax
 42260                                  
 42261                                  	; point to sft 0
 42262                                  
 42263                                  	;mov	di,offset dosdata:sftabl + sftable
 42264                                  	;mov	di,SFTABL+6
 42265 00007B59 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 42266 00007B5C B80300                          mov     ax,3
 42267 00007B5F AB                              stosw           		; adjust refcount
 42268                                  
 42269                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 42270                                  
 42271                                          ;mov	di,offset dosdata:sysinittable
 42272                                  	;mov	di,0D28h
 42273 00007B60 BF[280D]                	mov	di,SysInitTable	
 42274                                  
 42275 00007B63 42                      	inc	dx			; advance dx from arena to psp
 42276 00007B64 8EDA                    	mov	ds,dx			; point ds to psp
 42277                                  
 42278                                  					; pass the address os seg_reinit 
 42279                                  					; in dx
 42280 00007B66 BA[D47B]                	mov	dx,seg_reinit
 42281 00007B69 B9[1F75]                	mov	cx,exepatch_start
 42282 00007B6C 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 42283                                  
 42284 00007B70 B8[A678]                	mov	ax,SYSBUF
 42285 00007B73 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 42286                                  	
 42287 00007B76 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 42288 00007B7B 368E16[8605]                    mov     ss,[ss:USER_SS]
 42289                                  
 42290 00007B80 CB                              retf
 42291                                  
 42292                                  ;
 42293                                  ; END OF DOSINIT
 42294                                  ;
 42295                                  ;--------------------------------------------------------------------------
 42296                                  
 42297                                  CHARINIT:
 42298                                  	; 24/04/2019 - Retro DOS v4.0
 42299                                  	; 07/07/2018 - Retro DOS v3.0
 42300                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 42301 00007B81 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 42302                                  	;mov	byte [ss:035Bh],0
 42303 00007B87 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 42304                                  	;mov	byte [ss:035Ch],0
 42305 00007B8D 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 42306                                  	;mov	word [ss:035BD],0
 42307 00007B93 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 42308 00007B9A 06                              PUSH	ES
 42309 00007B9B 53                              PUSH	BX
 42310 00007B9C 50                              PUSH	AX
 42311 00007B9D BB[5A03]                        MOV	BX,DEVCALL
 42312                                          ;PUSH	CS
 42313 00007BA0 16                      	PUSH	SS ; 30/04/2019
 42314 00007BA1 07                              POP	ES
 42315 00007BA2 E8ACCB                          CALL	DEVIOCALL2	
 42316 00007BA5 58                      	POP	AX
 42317 00007BA6 5B                              POP	BX
 42318 00007BA7 07                              POP	ES
 42319 00007BA8 C3                              RETN
 42320                                  
 42321                                  ; 25/04/2019 - Retro DOS v4.0
 42322                                  
 42323                                  ;-----------------------------------------------------------------------------
 42324                                  ;
 42325                                  ;	check_XMM: routine to check presence of XMM driver
 42326                                  ;
 42327                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 42328                                  ;
 42329                                  ;	USED:	none
 42330                                  ;
 42331                                  ;-----------------------------------------------------------------------------
 42332                                  
 42333                                  check_XMM: ; proc near
 42334                                  ;
 42335                                  ; determine whether or not an XMM driver is installed
 42336                                  ;
 42337 00007BA9 50                      	push	ax
 42338                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 42339 00007BAA B80043                  	mov	ax,4300h
 42340 00007BAD CD2F                    	int	2Fh
 42341                                  		; - Multiplex - XMS - INSTALLATION CHECK
 42342                                  		; Return: AL = 80h XMS driver installed
 42343                                  		; AL <> 80h no driver
 42344 00007BAF 3C80                    	cmp	al,80h			; Q: installed
 42345 00007BB1 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 42346                                  ;
 42347                                  ; get the XMM control functions entry point, save it, we
 42348                                  ; need to call it later.
 42349                                  ;
 42350 00007BB3 53                      	push	bx
 42351 00007BB4 52                      	push	dx
 42352 00007BB5 1E                      	push	ds
 42353 00007BB6 06                      	push	es
 42354                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 42355 00007BB7 B81043                  	mov	ax,4310h
 42356 00007BBA CD2F                    	int	2Fh
 42357                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 42358                                  		; Return: ES:BX -> driver entry point
 42359                                  
 42360 00007BBC 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42361                                  
 42362 00007BC1 891E[6311]              	mov	[XMMcontrol],bx
 42363 00007BC5 8C06[6511]              	mov	[XMMcontrol+2],es
 42364                                  cXMMexit:
 42365 00007BC9 F8                      	clc
 42366 00007BCA 07                      	pop	es
 42367 00007BCB 1F                      	pop	ds
 42368 00007BCC 5A                      	pop	dx
 42369 00007BCD 5B                      	pop	bx
 42370 00007BCE 58                      	pop	ax
 42371 00007BCF C3                      	retn				; done
 42372                                  ;
 42373                                  ; set carry if XMM driver not present
 42374                                  ;
 42375                                  cXMM_no_driver:
 42376 00007BD0 F9                      	stc
 42377 00007BD1 58                      	pop	ax
 42378 00007BD2 C3                      	retn
 42379                                  
 42380                                  ;-----------------------------------------------------------------------------
 42381                                  ;
 42382                                  ; Procedure Name : seg_reinit
 42383                                  ;
 42384                                  ; Inputs	 : ES has final dos code location
 42385                                  ;		   AX = 0 / 1
 42386                                  ;
 42387                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 42388                                  ;		   if AX =0
 42389                                  ;		      if first entry
 42390                                  ;			 patch segment & offset of vectors with stub
 42391                                  ;			 and stub with segment in ES
 42392                                  ;		      else
 42393                                  ;			 patch stub with segment in ES
 42394                                  ;
 42395                                  ;		   else if AX = 1
 42396                                  ;			patch segment of vectors with segment in ES	
 42397                                  ;
 42398                                  ; NOTE		 : This routine can be called at most twice!
 42399                                  ;
 42400                                  ; Regs Mod.	 : es, ax, di, cx, bx
 42401                                  ;-----------------------------------------------------------------------------
 42402                                  
 42403 00007BD3 00                      num_entry: db	0		; keeps track of the # of times this routine
 42404                                  				; has been called. (0 or 1)
 42405                                  
 42406                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 42407                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 42408                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 42409                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 42410                                  
 42411                                  seg_reinit:	; proc	far
 42412 00007BD4 1E                      	push	ds
 42413                                  
 42414 00007BD5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42415                                  
 42416 00007BDA E8B500                  	call	patch_misc_segments	; patch in segments for sharer and 
 42417                                  					; other tables with seg in ES.
 42418                                  	; 17/12/2022
 42419                                  	; cx = 0
 42420 00007BDD 39C8                    	cmp	ax,cx ; 0
 42421                                  	;cmp	ax,0
 42422 00007BDF 756C                    	jne	short patch_vec_seg	; patch vectors with segment in es
 42423                                  
 42424                                  	; 17/12/2022
 42425 00007BE1 2E380E[D37B]            	cmp	[cs:num_entry],cl ; 0
 42426                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 42427 00007BE6 7508                    	jne	short second_entry	; N: just patch the stub with 
 42428                                  					;    segment in ES
 42429                                  					; Y: patch the vectors with stub 
 42430 00007BE8 8CD8                    	mov	ax,ds
 42431 00007BEA E86D00                  	call	patch_vec_segments	; patch the segment of vectors
 42432 00007BED E8EC00                  	call	patch_offset		; patch the offsets of vectors 
 42433                                  					; with those in the stub.
 42434                                  	; 17/12/2022
 42435                                  	; cx = 0
 42436                                  second_entry:
 42437 00007BF0 8CC0                    	mov	ax,es			; patch the stub with segment in es
 42438                                  
 42439                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 42440                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 42441 00007BF2 BF[6210]                	mov	di,DOSINTTABLE
 42442                                  	; 17/12/2022
 42443                                  	; cx = 0
 42444                                  	;mov	cx,9
 42445 00007BF5 B109                    	mov	cl,9
 42446 00007BF7 1E                      	push	ds			
 42447 00007BF8 07                      	pop	es			; es:di -> DOSINTTABLE
 42448                                  
 42449                                  dosinttabloop:
 42450 00007BF9 83C702                  	add	di,2
 42451 00007BFC AB                      	stosw
 42452 00007BFD E2FA                    	loop	dosinttabloop	
 42453                                  
 42454                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 42455                                  ; use the HMA, so we don't want to check CS
 42456                                  
 42457                                  ;ifndef ROMDOS
 42458 00007BFF 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 42459 00007C02 724E                    	jb	short sr_done		; N: done
 42460                                  ;endif
 42461 00007C04 E8A2FF                  	call	check_XMM		; Y: set up the XMS entry point
 42462 00007C07 7249                    	jc	short sr_done		; failed to set up XMS do not do
 42463                                  					; A20 toggling in the stub.
 42464                                  	; 17/12/2022
 42465                                  	; cx = 0
 42466 00007C09 E84B01                  	call	patch_in_nops		; enable the stub to check A20 state
 42467                                  ; M021-
 42468                                  	;mov	byte [1211h],1
 42469 00007C0C C606[1112]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 42470                                  				
 42471                                  					; set pointer to the routine that 
 42472                                  					; patches buggy exepacked code.
 42473                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 42474 00007C11 C706[1212][6F76]        	mov	word [FixExePatch],ExePatch
 42475                                  					; M068: set pointer to the routine 
 42476                                  					; M068: that detects copy protected
 42477                                  					; M068: apps
 42478                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 42479 00007C17 C706[6100][6F78]        	mov	word [ChkCopyProt],IsCopyProt
 42480                                  
 42481                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 42482                                  
 42483                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42484                                  ;
 42485                                  ;; M020 - begin
 42486                                  ;
 42487                                  ;	call	WhatCPUType
 42488                                  ;	cmp	al,1
 42489                                  ;	jne	short sr_done 		; we need Rational Patch only
 42490                                  ;					;  on 286 systems
 42491                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 42492                                  ;	mov	word [RationalPatchPtr],RationalPatch
 42493                                  ;
 42494                                  ;; M020 - end
 42495                                  ;
 42496                                  ;	jmp	short sr_done
 42497                                  ;
 42498                                  ;patch_vec_seg:				; patch vectors with segment in es
 42499                                  ;	mov	ax,es
 42500                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 42501                                  ;					; NOTE we don't have to patch the 
 42502                                  ;					; offsets as they have been already
 42503                                  ;					; set to the doscode offsets at
 42504                                  ;					; DOSINIT.
 42505                                  ;sr_done:
 42506                                  ;	mov	byte [cs:num_entry],1
 42507                                  ;	pop	ds
 42508                                  ;	retf	; ! far return !
 42509                                  
 42510                                  ;----------------------------------------------------------------------------
 42511                                  ;
 42512                                  ; Procedure Name : WhatCPUType
 42513                                  ;
 42514                                  ; Inputs	 : none
 42515                                  ;
 42516                                  ; Outputs	 : AL = 0 if CPU <  286
 42517                                  ;		      = 1 if CPU == 286
 42518                                  ;		      = 2 if CPU >= 386
 42519                                  ;
 42520                                  ; Regs. Mod.	 : AX
 42521                                  ;
 42522                                  ;----------------------------------------------------------------------------
 42523                                  
 42524                                  WhatCPUType:
 42525                                  	; 25/04/2019 - Retro DOS v4.0
 42526                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 42527                                  
 42528                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 42529                                  
 42530                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 42531                                  ; 	it is called from both CODE and SYSINITSEG.
 42532                                  ;
 42533                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 42534                                  ;  Returns: AX = 0 if 8086 or 8088
 42535                                  ;              = 1 if 80286
 42536                                  ;              = 2 if 80386
 42537                                  
 42538                                  	; 04/11/2022
 42539                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 42540                                  
 42541                                  Get_CPU_Type:	;macro
 42542 00007C1D 9C                      	pushf
 42543 00007C1E 53                      	push	bx			; preserve bx
 42544 00007C1F 31DB                    	xor	bx,bx			; init bx to zero
 42545                                  
 42546 00007C21 31C0                    	xor	ax,ax			; 0000 into AX
 42547 00007C23 50                      	push	ax			; put it on the stack...
 42548 00007C24 9D                      	popf				; ...then shove it into the flags
 42549 00007C25 9C                      	pushf				; get it back out of the flags...
 42550 00007C26 58                      	pop	ax			; ...and into ax
 42551 00007C27 2500F0                  	and	ax,0F000h		; mask off high four bits
 42552 00007C2A 3D00F0                  	cmp	ax,0F000h		; was it all 1's?
 42553 00007C2D 740E                    	je	short cpu_8086		; aye; it's an 8086 or 8088
 42554                                  
 42555 00007C2F B800F0                  	mov	ax,0F000h		; now try to set the high four bits..
 42556 00007C32 50                      	push	ax
 42557 00007C33 9D                      	popf
 42558 00007C34 9C                      	pushf
 42559 00007C35 58                      	pop	ax			; ...and see what happens
 42560 00007C36 2500F0                  	and	ax,0F000h		; any high bits set ?
 42561 00007C39 7401                    	jz	short cpu_286		; nay; it's an 80286
 42562                                  
 42563                                  cpu_386:				; bx starts as zero
 42564 00007C3B 43                      	inc	bx			; inc twice if 386
 42565                                  cpu_286:				; just inc once if 286
 42566 00007C3C 43                      	inc	bx
 42567                                  cpu_8086:				; don't inc at all if 086
 42568 00007C3D 89D8                    	mov	ax,bx			; put CPU type value in ax
 42569 00007C3F 5B                      	pop	bx			; restore original bx
 42570 00007C40 9D                      	popf
 42571                                  	
 42572                                  	;endm
 42573                                  
 42574                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 42575                                  	;retn
 42576                                  
 42577                                  	; 04/11/2022
 42578                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 42579 00007C41 3C01                    	cmp	al,1
 42580 00007C43 750D                    	jne	short sr_done 		; we need Rational Patch only
 42581                                  					;  on 286 systems
 42582 00007C45 C706[1412][AC77]        	mov	word [RationalPatchPtr],RationalPatch
 42583                                  
 42584 00007C4B EB05                    	jmp	short sr_done
 42585                                  
 42586                                  patch_vec_seg:				; patch vectors with segment in es
 42587 00007C4D 8CC0                    	mov	ax,es
 42588 00007C4F E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 42589                                  					; NOTE we don't have to patch the 
 42590                                  					; offsets as they have been already
 42591                                  					; set to the doscode offsets at
 42592                                  					; DOSINIT.
 42593                                  sr_done:
 42594 00007C52 2EC606[D37B]01          	mov	byte [cs:num_entry],1
 42595 00007C58 1F                      	pop	ds
 42596 00007C59 CB                      	retf	; ! far return !
 42597                                  
 42598                                  ;----------------------------------------------------------------------------
 42599                                  ;
 42600                                  ; Procedure Name : patch_vec_segments
 42601                                  ;
 42602                                  ; Inputs	 : ax -> has segment address to patch in
 42603                                  ;		   ds -> DOSDATA
 42604                                  ;
 42605                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 42606                                  ;			
 42607                                  ;			0,20-28,3a-3f
 42608                                  ;
 42609                                  ; Regs. Mod.	 : DI,CX,DX,AX
 42610                                  ;
 42611                                  ;----------------------------------------------------------------------------
 42612                                  
 42613                                  patch_vec_segments:
 42614                                  
 42615 00007C5A 06                      	push	es
 42616                                  
 42617 00007C5B 31C9                    	xor	cx,cx ; 0
 42618 00007C5D 8EC1                    	mov	es,cx
 42619                                  
 42620                                  	;mov	di,82h
 42621 00007C5F BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 42622                                  
 42623 00007C62 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 42624                                  
 42625                                  					; set vectors 20 & 21
 42626                                  	; 04/11/2022
 42627                                  	;mov	cx,2
 42628                                  	; 17/12/2022
 42629                                  	;mov	cl,2
 42630                                  ps_set1:
 42631 00007C66 AB                      	stosw	; int 20h segment
 42632                                  	;add	di,2
 42633                                  	; 17/12/2022
 42634 00007C67 47                      	inc	di
 42635 00007C68 47                      	inc	di
 42636                                  	;loop	ps_set1
 42637                                  
 42638                                  	; 17/12/2022
 42639 00007C69 AB                      	stosw	; int 21h segment
 42640                                  	;inc	di
 42641                                  	;inc	di
 42642                                  
 42643                                  	;add	di,4			; skip int 22h vector
 42644 00007C6A 83C706                  	add	di,6 ; *
 42645                                  
 42646 00007C6D AB                      	stosw				; set int 23h
 42647 00007C6E 83C706                  	add	di,6			; skip int 24h
 42648                                  
 42649                                  					; set vectors 25-28 and 2a-3f 
 42650                                  	; 04/11/2022
 42651                                  	;mov	cx,4			; set 4 segments
 42652                                  	; 17/12/2022
 42653 00007C71 B104                    	mov	cl,4
 42654                                  ps_set2:
 42655 00007C73 AB                      	stosw				
 42656                                  	;add	di,2
 42657                                  	; 17/12/2022
 42658 00007C74 47                      	inc	di
 42659 00007C75 47                      	inc	di
 42660 00007C76 E2FB                    	loop	ps_set2
 42661                                  
 42662 00007C78 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 42663                                  					;   already be set.
 42664                                  	; 04/11/2022
 42665                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 42666                                  	; 17/12/2022
 42667 00007C7B B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 42668                                  ps_set3:
 42669 00007C7D AB                      	stosw
 42670                                  	;add	di,2
 42671                                  	; 17/12/2022
 42672 00007C7E 47                      	inc	di
 42673 00007C7F 47                      	inc	di
 42674 00007C80 E2FB                    	loop	ps_set3
 42675                                  
 42676                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42677                                  ; below. So skip it.
 42678                                  
 42679 00007C82 83C708                  	add	di,8			; skip vector 30h & 31h 
 42680                                  	
 42681                                  	; 04/11/2022
 42682                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 42683                                  	; 17/12/2022
 42684 00007C85 B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 42685                                  ps_set4:
 42686 00007C87 AB                      	stosw
 42687                                  	;add	di,2
 42688                                  	; 17/12/2022
 42689 00007C88 47                      	inc	di
 42690 00007C89 47                      	inc	di
 42691 00007C8A E2FB                    	loop	ps_set4
 42692                                  
 42693                                  ; set offset of int2f
 42694                                  
 42695                                  ;if installed
 42696                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 42697                                  ;endif
 42698                                  	;mov	[es:0C3h],ax
 42699 00007C8C 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 42700                                  	; 17/12/2022
 42701                                  	; cx = 0
 42702 00007C90 07                      	pop	es
 42703 00007C91 C3                      	retn
 42704                                  
 42705                                  ;---------------------------------------------------------------------------
 42706                                  ;
 42707                                  ; Procedure Name : patch_misc_segments
 42708                                  ;
 42709                                  ; Inputs	 : es = segment to patch in
 42710                                  ;		   ds = dosdata
 42711                                  ;
 42712                                  ; outputs	 : patches in the sharer and other tables in the dos
 42713                                  ;		   with right dos code segment in es
 42714                                  ;
 42715                                  ; Regs Mod	 : DI,SI,CX
 42716                                  ;
 42717                                  ;---------------------------------------------------------------------------
 42718                                  
 42719                                  patch_misc_segments:
 42720                                  
 42721 00007C92 53                      	push	bx
 42722 00007C93 06                      	push	es
 42723 00007C94 50                      	push	ax
 42724                                  
 42725 00007C95 8CC0                    	mov	ax,es			; ax - > DOS segment
 42726                                  	
 42727 00007C97 1E                      	push	ds
 42728 00007C98 07                      	pop	es			; es -> DOSDATA
 42729                                  	
 42730                                  ; initialize the jump table for the sharer...
 42731                                  
 42732                                  	;mov	di,offset dosdata:jshare
 42733                                  	;mov	di,90h
 42734 00007C99 BF[9000]                	mov	di,JShare
 42735                                  	;mov	bx,[0AAAh]
 42736 00007C9C 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 42737                                  					; table was patched during the first
 42738                                  					; call to this routine
 42739 00007CA0 B90F00                  	mov	cx,15
 42740                                  jumptabloop:
 42741                                  	;add	di,2			; skip offset
 42742                                  	; 17/12/2022
 42743 00007CA3 47                      	inc	di
 42744 00007CA4 47                      	inc	di
 42745 00007CA5 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 42746 00007CA8 7405                    	je	short share_patch	; Y: patch in sharer table
 42747                                  					; N: 
 42748 00007CAA 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 42749 00007CAD 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 42750                                  share_patch:
 42751 00007CAF AB                      	stosw				; drop in segment
 42752                                  no_share_patch:
 42753 00007CB0 E2F1                    	loop	jumptabloop
 42754                                  					; BUGBUG patching the country info 
 42755                                  					; with dosdata can be done inline
 42756                                  					; in dosinit.
 42757                                  					; for dos 3.3 country info
 42758                                  					; table address
 42759                                  
 42760                                  	;mov	si,offset dosdata:country_cdpg
 42761                                  	;mov	si,122Ah   
 42762 00007CB2 BE[2A12]                	mov	si,COUNTRY_CDPG
 42763                                  					; initialize double word
 42764                                  					; pointers with dosdata in ds
 42765                                  	;mov	[si+4Fh],ds
 42766                                  	;mov	[si+54h],ds
 42767                                  	;mov	[si+59h],ds
 42768                                  	;mov	[si+5Eh],ds
 42769                                  	;mov	[si+80h],ds
 42770                                  	;mov	[si+63h],ds
 42771 00007CB5 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 42772 00007CB8 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 42773 00007CBB 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 42774 00007CBE 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 42775 00007CC1 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 42776 00007CC5 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 42777                                  
 42778                                  					; fastopen routines are in doscode
 42779                                  					; so patch with doscode seg in ax
 42780                                  
 42781                                  	;mov	si,offset dosdata:fastopentable
 42782                                  	;mov	si,0D30h
 42783 00007CC8 BE[300D]                	mov	si,FastOpenTable
 42784                                  
 42785                                  	; 17/12/2022
 42786                                  	; bx = [TEMP_DOSLOC]
 42787 00007CCB 83FBFF                  	cmp	bx,-1
 42788                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 42789 00007CCE 7405                    	je	short fast_patch	; Y: patch segment
 42790                                  	;mov	cx,[TEMP_DOSLOC]
 42791                                  					; Q: has fastopen patched in it's
 42792                                  					;    segment
 42793                                  	; 17/12/2022
 42794 00007CD0 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 42795                                  	;;cmp	cx,[si+4]
 42796                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 42797 00007CD3 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 42798                                  
 42799                                  fast_patch:
 42800                                  	;mov	[si+4],ax
 42801 00007CD5 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 42802                                  no_fast_patch:
 42803                                  	; 17/12/2022
 42804                                  	; cx = 0
 42805 00007CD8 58                      	pop	ax
 42806 00007CD9 07                      	pop	es
 42807 00007CDA 5B                      	pop	bx
 42808                                  
 42809 00007CDB C3                      	retn
 42810                                  
 42811                                  ;--------------------------------------------------------------------------
 42812                                  ;
 42813                                  ; Procedure Name : patch_offset
 42814                                  ; 
 42815                                  ; Inputs	 : NONE
 42816                                  ;
 42817                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 42818                                  ;		   0,20-28,3a-3f, and 30,31
 42819                                  ;
 42820                                  ;
 42821                                  ; Regs. Mod	 : AX,DI,CX
 42822                                  ;--------------------------------------------------------------------------
 42823                                  
 42824                                  patch_offset:
 42825 00007CDC 06                      	push	es		; preserve es
 42826                                  
 42827 00007CDD 31C0                    	xor	ax,ax
 42828 00007CDF 8EC0                    	mov	es,ax
 42829                                  				; set default divide trap address
 42830                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 42831                                  	;mov	word [es:0],108Ah
 42832 00007CE1 26C7060000[8A10]        	mov	word [es:0],ldivov
 42833                                  
 42834                                  	;mov	di,80h
 42835 00007CE8 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 42836                                  	;mov	ax,offset dosdata:lirett
 42837                                  	;mov	ax,10DAh
 42838 00007CEB B8[DA10]                	mov	ax,lirett
 42839                                  				; set vectors 20 & 21 to point to iret.
 42840                                  	; 17/12/2022
 42841                                  	; cx = 0
 42842                                  
 42843                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 42844                                  po_iset1:
 42845 00007CEE AB                      	stosw	; int 20h offset
 42846                                  	;add	di,2 ; *
 42847                                  	;loop	po_iset1
 42848                                  	; 17/12/2022
 42849 00007CEF 47                      	inc	di
 42850 00007CF0 47                      	inc	di
 42851 00007CF1 AB                      	stosw	; int 21h offset
 42852                                  
 42853                                  	;add	di,4		; skip vector 22h
 42854                                  	; 17/12/2022
 42855 00007CF2 83C706                  	add	di,6 ; *	
 42856                                  
 42857 00007CF5 AB                      	stosw			; set offset of 23h
 42858                                  	;add	di,6		; skip 24h
 42859                                  	; 19/09/2023
 42860 00007CF6 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 42861                                  
 42862                                  				; set vectors 25-28 and 2a-3f to iret.
 42863                                  	; 04/11/2022
 42864                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 42865                                  	; 19/09/2023
 42866                                  	; 17/12/2022
 42867                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 42868                                  po_iset2:
 42869 00007CF9 AB                      	stosw		; set offset for int 28h ; 19/09/2023
 42870                                  	;add	di,2
 42871                                  	; 19/09/2023
 42872                                  	; 17/12/2022
 42873                                  	;inc	di
 42874                                  	;inc	di
 42875                                  	; 19/09/2023
 42876                                  	;loop	po_iset2
 42877                                  
 42878                                  	;add	di,4		; skip vector 29h
 42879                                  	; 19/09/2023
 42880 00007CFA 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 42881                                  
 42882                                  	; 04/11/2022
 42883                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 42884                                  	; 17/12/2022
 42885                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 42886 00007CFD B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 42887                                  po_iset3:
 42888 00007CFF AB                      	stosw
 42889                                  	;add	di,2
 42890                                  	; 17/12/2022
 42891 00007D00 47                      	inc	di
 42892 00007D01 47                      	inc	di
 42893 00007D02 E2FB                    	loop	po_iset3
 42894                                  
 42895                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 42896                                  ; below. So skip it.
 42897                                  
 42898                                  	;add	di,8		; skip vector 30h & 31h 
 42899                                  	; 17/12/2022
 42900 00007D04 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 42901                                  
 42902                                  	; 04/11/2022
 42903                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 42904                                  				;   sets offsets for ints 32h-3fh
 42905                                  	; 17/12/2022
 42906 00007D07 B10E                    	mov	cl,14 ; 26/06/2019
 42907                                  po_iset4:
 42908 00007D09 AB                      	stosw
 42909                                  	;add	di,2
 42910                                  	; 17/12/2022
 42911 00007D0A 47                      	inc	di
 42912 00007D0B 47                      	inc	di
 42913 00007D0C E2FB                    	loop	po_iset4
 42914                                  
 42915                                  ;if installed
 42916                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 42917                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 42918 00007D0E 26C706BC00[C610]        	mov	word [es:(2Fh*4)],lint2f
 42919                                  ;endif
 42920                                  
 42921                                  ; set up entry point call at vectors 30-31h
 42922                                  	;mov	byte [es:0C0h],0EAh
 42923 00007D15 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 42924                                  	;mov	word [es:0C1h],10D0h
 42925                                  
 42926 00007D1B 26C706C100[D010]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 42927                                  
 42928                                  							; 19/09/2023
 42929                                  	;mov	word [es:80h],1094h
 42930 00007D22 26C7068000[9410]        	mov	word [es:addr_int_abort],lquit		; int 20h
 42931                                  	;mov	word [es:84h],109Eh
 42932 00007D29 26C7068400[9E10]        	mov	word [es:addr_int_command],lcommand	; int 21h
 42933                                  	;mov	word [es:94h],10A8h
 42934 00007D30 26C7069400[A810]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 42935                                  	;mov	word [es:98h],10B2h
 42936 00007D37 26C7069800[B210]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 42937                                  	;mov	word [es:9Ch],10BCh
 42938 00007D3E 26C7069C00[BC10]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 42939                                  
 42940                                  	; 17/12/2022
 42941                                  	; CX = 0
 42942 00007D45 07                      	pop	es		; restore es
 42943 00007D46 C3                      	retn
 42944                                  
 42945                                  ;--------------------------------------------------------------------------
 42946                                  ;
 42947                                  ; 	Procedure Name	:	patch_in_nops
 42948                                  ;
 42949                                  ; 	Entry		: 	ES -> DOSDATA
 42950                                  ;
 42951                                  ;	Regs Mod	: 	cx, di
 42952                                  ;
 42953                                  ;	Description:
 42954                                  ;		This routine patches in 2 nops at the offsets specified in 
 42955                                  ;	patch_table. This basically enables the low mem stub to start 
 42956                                  ;	making XMS calls.
 42957                                  ;
 42958                                  ;--------------------------------------------------------------------------
 42959                                  
 42960                                  	; 04/11/2022
 42961                                  	; (MSDOS 5.0 MSDOS.SYS)
 42962                                  	; DOSCODE:0BC50h
 42963                                  
 42964                                  patch_table:	; label	byte
 42965                                  	;dw	offset dosdata:i0patch
 42966                                  	;dw	offset dosdata:i20patch
 42967                                  	;dw	offset dosdata:i21patch
 42968                                  	;dw	offset dosdata:i25patch
 42969                                  	;dw	offset dosdata:i26patch
 42970                                  	;dw	offset dosdata:i27patch
 42971                                  	;dw	offset dosdata:i2fpatch
 42972                                  	;dw	offset dosdata:cpmpatch
 42973 00007D47 [8A10]                  	dw	i0patch
 42974 00007D49 [9410]                  	dw	i20patch
 42975 00007D4B [9E10]                  	dw	i21patch
 42976 00007D4D [A810]                  	dw	i25patch
 42977 00007D4F [B210]                  	dw	i26patch
 42978 00007D51 [BC10]                  	dw	i27patch
 42979 00007D53 [C610]                  	dw	i2fpatch
 42980 00007D55 [D010]                  	dw	cpmpatch
 42981                                  
 42982                                  patch_table_size equ ($-patch_table)/2
 42983                                  
 42984                                  patch_in_nops:
 42985 00007D57 50                      	push	ax
 42986 00007D58 56                      	push	si
 42987 00007D59 BE[477D]                	mov	si,patch_table
 42988 00007D5C B89090                  	mov	ax,9090h ; nop, nop
 42989                                  	; 17/12/2022
 42990                                  	; cx = 0
 42991                                  	;mov	cx,8
 42992                                  	;mov	cx,patch_table_size ; 8
 42993 00007D5F B108                    	mov	cl,patch_table_size ; 8
 42994                                  pin_loop:
 42995 00007D61 2E8B3C                  	mov	di,[cs:si]
 42996 00007D64 AB                      	stosw
 42997                                  	;add	si,2
 42998                                  	; 17/12/2022
 42999 00007D65 46                      	inc	si
 43000 00007D66 46                      	inc	si
 43001 00007D67 E2F8                    	loop	pin_loop
 43002 00007D69 5E                      	pop	si
 43003 00007D6A 58                      	pop	ax
 43004 00007D6B C3                      	retn
 43005                                  
 43006                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43007                                  ; ---------------------------------------------------------------------------
 43008                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 43009                                  ; ---------------------------------------------------------------------------
 43010                                  
 43011                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 43012                                  DOSCODE_END:
 43013                                  	;times	9 db 0	; db 9 dup(0)
 43014                                  	; 18/12/2022
 43015 00007D6C 0000                    	dw	0  ;	times 2 db 0
 43016                                  
 43017                                  ;align 16
 43018                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 43019                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 43020                                  
 43021                                  ; ---------------------------------------------------------------------------
 43022                                  
 43023                                  
 43024                                  ;memstrt label word
 43025                                  ; ---------------------------------------------------------------------------
 43026                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 43027                                  ; ---------------------------------------------------------------------------
 43028                                  
 43029                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 43030                                  
 43031                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 43032                                  ; the dos initialization segment
 43033                                  
 43034                                  ;ifndef ROMDOS
 43035                                  
 43036                                  ;doscode ends
 43037                                  
 43038                                  ;else
 43039                                  
 43040                                  ;;dosinitseg ends
 43041                                  
 43042                                  ;endif ; ROMDOS
 43043                                  
 43044                                  ;============================================================================
 43045                                  
 43046                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 43047                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 43048                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 43049                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 43050                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 43051                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 43052                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 43053                                  
 43054                                  ;; burasý doscode sonu
 43055                                  
 43056                                  ;============================================================================
 43057                                  ; DOSDATA
 43058                                  ;============================================================================
 43059                                  ; 29/04/2019 - Retro DOS 4.0
 43060                                  
 43061                                  ;[BITS 16]
 43062                                  
 43063                                  ;[ORG 0]
 43064                                  
 43065                                  ; 25/04/2019 - Retro DOS v4.0
 43066                                  
 43067                                  ;============================================================================
 43068                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 43069                                  ;============================================================================
 43070                                  
 43071                                  ;align 16
 43072                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 43073                                  	; (4970 bytes for MSDOS 6.21)
 43074                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 43075                                  
 43076                                  ;============================================================================
 43077                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 43078                                  ;============================================================================
 43079                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43080                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 43081                                  ; 16/07/2018 - Retro DOS 3.0	
 43082                                  
 43083                                  ;Break <Initialized data and data used at DOS initialization>
 43084                                  ;----------------------------------------------------------------------------
 43085                                  
 43086                                  ; We need to identify the parts of the data area that are relevant to tasks
 43087                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 43088                                  ; data will be gathered with the system code. The process data under 2.x will
 43089                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43090                                  ;
 43091                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43092                                  ; describing that data item.
 43093                                  
 43094                                  ;DOSDATA SEGMENT
 43095                                  
 43096                                  ; 04/11/2022
 43097                                  ;[ORG 0]
 43098                                  
 43099                                  ; ----------------------------------------------------------------------------
 43100                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43101                                  ; ----------------------------------------------------------------------------
 43102                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 43103                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 43104                                  ; ----------------------------------------------------------------------------
 43105                                  
 43106                                  ; 04/11/2022
 43107                                  
 43108                                  ;DOSDATA:0000h
 43109                                  
 43110 00007D6E 90<rep 2h>              align 16
 43111                                  
 43112                                  ; ----------------------------------------------------------------------------
 43113                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43114                                  ; ----------------------------------------------------------------------------
 43115                                  
 43116                                  segment .data  vstart=0 ; 06/12/2022
 43117                                  								
 43118                                  ; ============================================================================
 43119                                  
 43120                                  ; 06/12/2022
 43121                                  ;DOSDATASTART equ $
 43122                                  DOSDATASTART:
 43123                                  
 43124                                  
 43125                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 43126                                  
 43127                                  	;; 03/11/2022
 43128                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 43129                                  
 43130                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43131                                  	;db	4 dup (?)	
 43132 00000000 00<rep 4h>              	times	4 db 0
 43133                                  
 43134                                  	; 29/04/2019 - Retro DOS v4.0 modification
 43135                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 43136                                  	;dw	0
 43137                                  
 43138                                  	;EVEN
 43139                                  
 43140                                  ;align 2
 43141                                  
 43142                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 43143                                  ; area compatability. This location must be incremented EACH TIME the data
 43144                                  ; area here gets mucked with.
 43145                                  ;
 43146                                  ; Also, do NOT change this position relative to DOSDATA:0.
 43147                                  
 43148                                  MSCT001S:	; LABEL BYTE
 43149                                  	
 43150                                  DataVersion:	
 43151 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 43152                                  
 43153                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 43154                                  ;hkn; been removed to DOSCODE above
 43155                                  
 43156                                  ;M044
 43157                                  ; First part of save area for saving last para of Window memory
 43158                                  
 43159                                  WinoldPatch1:	; db 8 dup (?)	;M044
 43160 00000006 00<rep 8h>              	times	8 db 0
 43161                                  
 43162                                  	; MSDOS 6.21 DOSDATA:000Eh
 43163                                  MYNUM:			; Offset 000Eh
 43164 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 43165                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 43166 00000010 0000                    	dw	0
 43167                                  OpenLRU:
 43168 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 43169                                  OEM_HANDLER: 		
 43170 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 43171                                  
 43172                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 43173                                  ;;			way that we leave DOS???? - jgl
 43174                                  
 43175                                  LeaveAddr:
 43176 00000018 [4C04]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 43177                                  RetryCount:		
 43178 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 43179                                  RetryLoop:
 43180 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 43181                                  LastBuffer:
 43182 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 43183                                  CONTPOS:
 43184 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 43185                                  arena_head:
 43186 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 43187                                  
 43188                                  ;; 16/07/2018
 43189                                  ;;***************************************************************************
 43190                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 43191                                  ;;***************************************************************************
 43192                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 43193                                  ;;
 43194                                  ;;	AH = 52h
 43195                                  ;;
 43196                                  ;;	on return:
 43197                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 43198                                  ;;		Known "invars" fields follow (varies with DOS version):
 43199                                  ;;
 43200                                  ;;	Offset Size		 Description
 43201                                  ;;
 43202                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 43203                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 43204                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 43205                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 43206                                  ;;		      0 indicates no unread input (DOS 3.x)
 43207                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 43208                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 43209                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 43210                                  ;;	  08   dword  pointer to $CLOCK device driver
 43211                                  ;;	  0C   dword  pointer to CON device driver
 43212                                  ;;	  10   byte   number of logical drives in system
 43213                                  ;;	  11   word   maximum bytes/block of any block device
 43214                                  ;;	  13   dword  pointer to DOS cache buffer header
 43215                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 43216                                  ;;		      point to the next device in device chain
 43217                                  ;;
 43218                                  ;;***************************************************************************
 43219                                  
 43220                                  ; The following block of data is used by SYSINIT. 
 43221                                  ; Do not change the order or size of this block
 43222                                  
 43223                                  ;SYSINITVAR:
 43224                                  ;----------------------------------------------------------------------------
 43225                                  SYSINITVARS:
 43226                                  DPBHEAD:
 43227 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 43228                                  SFT_ADDR:
 43229 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 43230                                  BCLOCK:
 43231 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 43232                                  BCON:
 43233 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 43234                                  MAXSEC:
 43235 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 43236                                  BUFFHEAD:
 43237 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 43238                                  CDSADDR:
 43239 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 43240                                  SFTFCB:
 43241 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 43242                                  KEEPCOUNT:
 43243 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 43244                                  NUMIO:
 43245 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 43246                                  CDSCOUNT:
 43247 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 43248                                  
 43249                                  ; A fake header for the NUL device
 43250                                  NULDEV:
 43251 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 43252                                  	;dw	8004h
 43253 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 43254 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 43255 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 43256 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 43257                                  SPLICES:
 43258 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 43259                                  
 43260                                  Special_Entries:
 43261 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 43262                                  UU_IFS_DOS_CALL:
 43263 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 43264                                  ; 
 43265                                  ; UU_IFS_HEADER:
 43266                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 43267                                  
 43268                                  ChkCopyProt:
 43269 00000061 0000                    	dw	0	; M068
 43270                                  A20OFF_PSP:
 43271 00000063 0000                    	dw	0	; M068
 43272                                  BUFFERS_PARM1:
 43273 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 43274                                  BUFFERS_PARM2:
 43275 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 43276                                  BOOTDRIVE:
 43277 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 43278                                  DDMOVE:
 43279 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 43280                                  EXT_MEM_SIZE:
 43281 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 43282                                  
 43283                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 43284                                  ;
 43285                                  ; Replaced by next two declarations
 43286                                  ;
 43287                                  ;UU_BUF_HASH_PTR:
 43288                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 43289                                  ;UU_BUF_HASH_COUNT:
 43290                                  ;	dw	1	; [SYSTEM] number of Hash entries
 43291                                  
 43292                                  BufferQueue:
 43293 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 43294                                  DirtyBufferCount:
 43295 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 43296                                  			; BUGBUG ---- change to byte
 43297                                  SC_CACHE_PTR:
 43298 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 43299                                  SC_CACHE_COUNT:
 43300 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 43301                                  BuffInHMA:
 43302 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 43303                                  LoMemBuff:
 43304 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 43305                                  			;  in Low mem when buffs are in HMA
 43306                                  ;
 43307                                  ; All variables which have UU_ as prefix can be reused for other
 43308                                  ; purposes and can be renamed. All these variables were used for
 43309                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 43310                                  ; manager ---- MOHANS
 43311                                  ;
 43312                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 43313                                  UU_BUF_EMS_FIRST_PAGE:	
 43314 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 43315                                  
 43316                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 43317                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 43318                                  ;	dw	0			
 43319                                  
 43320                                  CL0FATENTRY:
 43321 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 43322                                  			; is used in pack/unpack rts.
 43323                                  			; in fat.asm if cluster 0 is specified.
 43324                                  			; SR;
 43325                                  IoStatFail:
 43326 00000083 00                      	db	0	; IoStatFail has been added to 
 43327                                  			; record a fail on an I24 
 43328                                  			; issued from IOFUNC on a status call. 
 43329                                  
 43330                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 43331                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 43332                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 43333                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 43334                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 43335                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 43336                                  ;
 43337                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 43338                                  						; state of the 	buffers page.
 43339                                  						; This one byte is retained to 
 43340                                  						; keep the size of this data 
 43341                                  						; block the same.;
 43342                                  ALLOCMSAVE:
 43343 00000084 00                      	db	0	; M063: temp var. used to 
 43344                                  			; M063: save alloc method in
 43345                                  			; M063: msproc.asm
 43346                                  A20OFF_COUNT:
 43347 00000085 00                      	db	0	; M068: indiactes the # of 
 43348                                  			; M068: int 21 calls for 
 43349                                  			; M068: which A20 is off
 43350                                  DOS_FLAG:
 43351 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 43352                                  			; definitions
 43353                                  UNPACK_OFFSET:
 43354 00000087 0000                    	dw	0	; saves pointer to the start
 43355                                  			; of unpack code in exepatch.
 43356                                  			; asm.
 43357                                  UMBFLAG:
 43358 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 43359                                  			; M003: link state of the UMBs
 43360                                  			; M003: whether linked or not 
 43361                                  			; M003: to the DOS arena chain
 43362                                  SAVE_AX:
 43363 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 43364                                  			; M000: in msproc.asm
 43365                                  UMB_HEAD:
 43366 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 43367                                  			; M000: the first umb arena by 
 43368                                  			; M000: BIOS sysinit.
 43369                                  START_ARENA:
 43370 0000008E 0100                    	dw	1	; M000: this is the first arena 
 43371                                  			; M000: from which DOS will 
 43372                                  			; M000: start its scan for alloc.
 43373                                  
 43374                                  ; End of SYSINITVar block
 43375                                  ;----------------------------------------------------------------------------
 43376                                  
 43377                                  ; 25/04/2019 - Retro DOS v4.0
 43378                                  
 43379                                  ; 16/07/2018
 43380                                  ; MSDOS 3.3 (& MDOS 6.0)
 43381                                  
 43382                                  ;
 43383                                  ; Sharer jump table
 43384                                  ;
 43385                                  
 43386                                  ;PUBLIC	JShare
 43387                                  	;EVEN
 43388                                  
 43389                                  ;JShare	LABEL	DWORD
 43390                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 43391                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 43392                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 43393                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 43394                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 43395                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 43396                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 43397                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 43398                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 43399                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 43400                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 43401                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 43402                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 43403                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 43404                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 43405                                  
 43406                                  align 2
 43407                                  
 43408                                  JShare:
 43409 00000090 [4A07]0000              		DW	BadCall,0
 43410 00000094 [4E07]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 43411 00000098 [4E07]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 43412 0000009C [4A07]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 43413 000000A0 [4A07]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 43414 000000A4 [4A07]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 43415 000000A8 [4A07]0000              set_block:	DW	BadCall,0  ; 6   set_block
 43416 000000AC [4A07]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 43417 000000B0 [4E07]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 43418 000000B4 [4A07]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 43419 000000B8 [4A07]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 43420 000000BC [4A07]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 43421 000000C0 [4E07]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 43422 000000C4 [4A07]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 43423 000000C8 [4A07]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 43424                                  
 43425                                  
 43426                                  ;============================================================================
 43427                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 43428                                  ;============================================================================
 43429                                  ; 25/04/2019 - Retro DOS 4.0 
 43430                                  ; 16/07/2018 - Retro DOS 3.0	
 43431                                  
 43432                                  ;Break <Initialized data and data used at DOS initialization>
 43433                                  ;----------------------------------------------------------------------------
 43434                                  
 43435                                  ; We need to identify the parts of the data area that are relevant to tasks
 43436                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 43437                                  ; data will be gathered with the system code.  The process data under 2.x will
 43438                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43439                                  ;
 43440                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43441                                  ; describing that data item.
 43442                                  
 43443                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 43444                                  
 43445                                  ;
 43446                                  ; Table of routines for assignable devices
 43447                                  ;
 43448                                  ; MSDOS allows assignment if the following standard devices:
 43449                                  ;   stdin  (usually CON input)
 43450                                  ;   stdout (usually CON output)
 43451                                  ;   auxin  (usually AUX input)
 43452                                  ;   auxout (usually AUX output)
 43453                                  ;   stdlpt (usually PRN output)
 43454                                  ;
 43455                                  ; SPECIAL NOTE:
 43456                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 43457                                  ;   If we're not at end-of-file, then we always say that we have a character.
 43458                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 43459                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 43460                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 43461                                  ;   as EOF).
 43462                                  
 43463                                  ; Default SFTs for boot up
 43464                                  
 43465                                  		;PUBLIC	SFTABL
 43466                                  
 43467                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 43468 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 43469 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 43470 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 43471                                  		;times 295 db 0 ; MSDOS 6.0
 43472 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 43473                                  
 43474                                  ; the next two variables relate to the position of the logical stdout/stdin
 43475                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 43476                                  ; console.
 43477                                  		; DOSDATA:01F9h (MSDOS 6.21)
 43478 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 43479 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 43480                                  					;	   of buffered input call
 43481 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 43482 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 43483                                  		; DOSDATA:02FEh (MSDOS 6.21)
 43484 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 43485 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 43486 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 43487                                  switch_character:
 43488 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 43489 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 43490 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 43491 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 43492 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 43493                                  
 43494                                  ; The following table is a list of addresses that the sharer patches to be
 43495                                  ; PUSH AX to enable the critical sections
 43496                                  
 43497                                  		; DOSDATA:0315h (MSDOS 6.21)
 43498                                  
 43499                                  ;PUBLIC	CritPatch
 43500                                  
 43501                                  CritPatch:	; LABEL WORD
 43502                                  
 43503                                  ;IRP sect,<critDisk,critDevice>
 43504                                  
 43505                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 43506                                  ;
 43507                                  ;SR; Change code patch address to a variable in data segment
 43508                                  ;
 43509                                  ;       dw OFFSET DOSDATA: redir_patch
 43510                                  ;       dw OFFSET DOSDATA: redir_patch
 43511                                  ;
 43512                                  ;;hkn	Short_Addr  E&sect
 43513                                  ;;hkn	Short_Addr  L&sect
 43514                                  ;
 43515                                  ;ELSE
 43516                                  ;	DW	0
 43517                                  ;	DW	0
 43518                                  ;ENDIF
 43519                                  ;ENDM
 43520                                  ;	DW	0
 43521                                  
 43522                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 43523                                   
 43524 00000315 [0C0D]                  	dw 	redir_patch
 43525 00000317 [0C0D]                  	dw 	redir_patch			
 43526 00000319 [0C0D]                  	dw	redir_patch
 43527 0000031B [0C0D]                  	dw 	redir_patch
 43528                                  
 43529 0000031D 0000                    	dw	0
 43530                                  
 43531                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 43532                                  ; Also, IBM server 1.0 requires this also.
 43533                                  
 43534                                  	;EVEN			; Force swap area to start on word boundry
 43535 0000031F 90                      align 2
 43536                                  	;PUBLIC	SWAP_START
 43537                                  SWAP_START:	; LABEL BYTE
 43538 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 43539 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 43540 00000322 FF                      WPERR:		db -1		; Write protect error flag
 43541 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 43542 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 43543                                  
 43544                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 43545 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 43546 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 43547                                  ; end warning
 43548                                   
 43549 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 43550                                  
 43551 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 43552 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 43553 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 43554 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 43555 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 43556 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 43557                                  ;				; F.C. 2/17/86
 43558 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 43559 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 43560                                  ;align 2
 43561                                  SWAP_ALWAYS:	; 05/08/2018
 43562 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 43563                                  				;   extended error type stuff.
 43564                                  				;   NOTE: does not have Correct value on
 43565                                  				;   1-12, OEM, Get/Set CurrentPDB,
 43566                                  				;   GetExtendedError system calls)
 43567 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 43568 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 43569 00000340 0000                    FirstArena:	dw 0		; first free block found
 43570 00000342 0000                    BestArena:	dw 0		; best free block found
 43571 00000344 0000                    LastArena:	dw 0		; last free block found
 43572 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 43573 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 43574 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 43575 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 43576 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 43577 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 43578 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 43579                                  
 43580                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 43581                                  	;EVEN
 43582 0000034F 90                      align 2
 43583                                  		; DOSDATA:0350h (MSDOS 6.21)
 43584 00000350 00                      DAY:		db 0		; Day of month
 43585 00000351 00                      MONTH:		db 0		; Month of year
 43586 00000352 0000                    YEAR:		dw 0		; Year (with century)
 43587 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 43588 00000356 00                      WEEKDAY:	db 0		; Day of week
 43589                                  ; end warning
 43590                                  
 43591 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 43592 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 43593 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 43594                                  
 43595                                  ; Combination of all device call parameters
 43596                                  	;PUBLIC	DEVCALL 	;
 43597                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 43598                                  DEVCALL: ; 08/08/2018
 43599 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 43600 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 43601 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 43602 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 43603 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 43604                                  
 43605                                  	;PUBLIC	CALLUNIT
 43606                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 43607                                  CALLFLSH: ; LABEL   WORD	;
 43608 00000367 00                      CALLMED:	db 0		; media byte
 43609                                  CALLBR:	  ; LABEL   DWORD	;
 43610                                  	;PUBLIC	CALLXAD 	;
 43611                                  CALLXAD:  ; LABEL   DWORD	;
 43612 00000368 00                      CALLRBYT:	db 0		;
 43613                                  	;PUBLIC	CALLVIDM	;
 43614                                  CALLVIDM: ; LABEL   DWORD	;
 43615 00000369 00<rep 3h>              	times 3 db 0	;
 43616                                  	;PUBLIC CallBPB		;
 43617                                  CALLBPB:  ; LABEL   DWORD	;
 43618                                  CALLSCNT:			;
 43619 0000036C 0000                    		dw 0		;
 43620                                  	;PUBLIC	CALLSSEC	;
 43621                                  CALLSSEC: ; LABEL   WORD	;
 43622 0000036E 0000                    		dw 0		;
 43623 00000370 00000000                CALLVIDRW:	dd 0		;
 43624                                  ;MSDOS 6.0
 43625 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 43626 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 43627                                  
 43628                                  ; Same as above for I/O calls	;
 43629                                  				;
 43630                                  	;PUBLIC	IOCall		;
 43631                                  ;IOCALL	SRHEAD	<>		;
 43632                                  IOCALL:	; 07/08/2018
 43633 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 43634 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 43635 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 43636 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 43637 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 43638                                  IOFLSH:	  ; LABEL   WORD	;
 43639                                          ;PUBLIC  IORCHR		;
 43640                                  IORCHR:	  ; LABEL   BYTE	;
 43641 00000389 00                      IOMED:		db 0		;
 43642 0000038A 00000000                IOXAD:		dd 0		;
 43643 0000038E 0000                    IOSCNT:		dw 0		;	
 43644 00000390 0000                    IOSSEC:		dw 0		;
 43645                                  
 43646                                  ; Call struct for DSKSTATCHK	;
 43647 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 43648 00000393 00                      		db 0
 43649 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 43650 00000395 0000                    DSKSTST:	dw 0		;
 43651 00000397 00<rep 8h>              	times 8	db 0		;
 43652 0000039F 00                      DSKCHRET:	db 0		;
 43653                                  
 43654                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 43655                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 43656                                  ;hkn   short_addr  DEVIOBUF	;
 43657                                  	
 43658 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 43659 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 43660 000003A4 0100                    DSKSTCNT:	dw 1		;
 43661 000003A6 0000                    		dw 0		;
 43662                                  
 43663 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 43664                                  
 43665                                  ;MSDOS 6.0
 43666                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 43667 000003A9 00000000                		dd 0		;MS. position
 43668 000003AD 00000000                		dd 0		;MS. length
 43669                                  
 43670                                  ;hkn; the foll. was moved from dosmes.asm.
 43671                                  
 43672                                  	;EVEN
 43673 000003B1 90                      align 2				; needed to maintain offsets
 43674                                  
 43675                                  		; DOSDATA:03B2h (MSDOS 6.21)
 43676                                  USERNUM:
 43677 000003B2 0000                     		dw 0		; 24 bit user number
 43678 000003B4 00                      		db 0
 43679                                  ;IF IBM
 43680                                  ;IF IBMCOPYRIGHT
 43681                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 43682                                  ;ELSE
 43683                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 43684                                  ;ENDIF
 43685                                  ;ELSE
 43686 000003B5 FF                      OEMNUM:		DB 0FFh
 43687                                  ;ENDIF
 43688                                  
 43689                                  ;============================================================================
 43690                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 43691                                  ;============================================================================
 43692                                  ; 25/04/2019 - Retro DOS 4.0
 43693                                  
 43694                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 43695                                  ; ----------------------------------------------------------
 43696                                  ; This data section which was named as uninitialized data
 43697                                  ; (as overlayed by initialization code) but follows 
 43698                                  ; initialized data section from DOSDATA:03B6h address
 43699                                  ; (in otherwords, the method is different than MSDOS 3.3,
 43700                                  ; and there is not overlaying..)
 43701                                  ; **********************************************************
 43702                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 43703                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 43704                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 43705                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 43706                                  ; TIMEBUF is at offset 03B6h.
 43707                                  ; **********************************************************	
 43708                                  
 43709                                  ;Break <Uninitialized data overlayed by initialization code>
 43710                                  ;----------------------------------------------------------------------------
 43711                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 43712                                  ; Init code overlaps with data area below
 43713                                  
 43714                                  ; 	ORG     0
 43715                                  
 43716                                  MSDAT001S:	; label byte
 43717                                  
 43718                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 43719                                  TIMEBUF: ;	times 6 db 0
 43720 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 43721 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 43722                                  
 43723                                  ; The following areas are used as temp buffer in EXEC system call
 43724                                  
 43725                                  ; DOSDATA:03BEh
 43726                                  OPENBUF: ;times 64  dw	0
 43727 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 43728                                  RENBUF:	
 43729 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 43730                                  
 43731                                  ; Buffer for search calls
 43732                                  SEARCHBUF:	
 43733 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 43734                                  DUMMYCDS:  ;times 88 db 0
 43735 000004F3 00<rep 58h>             	times	curdirLen db 0
 43736                                  
 43737                                  ; End of contiguous buffer
 43738                                   
 43739                                  ; Temporary directory entry for use by many routines. Device directory
 43740                                  ; entries (bogus) are built here.
 43741                                  
 43742                                  ; DOSDATA:054Bh
 43743                                  
 43744                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 43745                                  
 43746                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 43747                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 43748                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 43749                                  
 43750                                  NAME1:	
 43751 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 43752                                  NAME2:
 43753 00000557 00<rep Dh>              	times	13 db	0 		;
 43754                                  DESTSTART:
 43755 00000564 0000                    	dw	0			;
 43756                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 43757                                  	;times	5  db	0
 43758 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 43759                                  
 43760                                  ; End Temporary directory entry.
 43761                                  
 43762 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 43763                                  EXTFCB:	
 43764 0000056C 00                      	db	0		; TRUE => extended FCB in use
 43765                                  SATTRIB:
 43766 0000056D 00                      	db	0		; Storage for search attributes
 43767                                  OPEN_ACCESS:
 43768 0000056E 00                      	db	0		; access of open system call
 43769                                  FOUNDDEL:
 43770 0000056F 00                      	db	0		; true => file was deleted
 43771                                  FOUND_DEV:
 43772 00000570 00                      	db	0		; true => search found a device
 43773                                  FSPLICE:
 43774 00000571 00                      	db	0		; true => do a splice in transpath
 43775                                  FSHARING:
 43776 00000572 00                      	db	0		; TRUE => no redirection
 43777                                  SECCLUSPOS:
 43778 00000573 00                      	db	0		; Position of first sector within cluster
 43779 00000574 00                      TRANS:	db	0		;
 43780 00000575 00                      READOP:	db	0		;
 43781                                  THISDRV:
 43782 00000576 00                      	db	0		;
 43783                                  CLUSFAC:
 43784 00000577 00                      	db	0		;
 43785                                  CLUSSPLIT:
 43786 00000578 00                      	db	0		;
 43787                                  INSMODE:
 43788 00000579 00                      	db	0		; true => insert mode in buffered read
 43789 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 43790 0000057B 00                      VOLID:	db	0		;
 43791                                  EXIT_TYPE:
 43792 0000057C 00                      	db	0		; type of exit...
 43793                                   
 43794                                  	;EVEN
 43795                                  
 43796 0000057D 90                      align 2
 43797                                  
 43798                                  ; DOSDATA:057Eh
 43799                                  
 43800                                  ; WARNING - the following two items are accessed as a word
 43801                                  
 43802                                  CREATING:
 43803 0000057E 00                      	db	0		; true => creating a file
 43804 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 43805                                  				; = DIRFREE iff BUGBUG
 43806                                  EXITHOLD:
 43807 00000580 00000000                	dd	0		; Temp location for proc terminate
 43808                                  USER_SP:
 43809 00000584 0000                    	dw	0		; User SP for system call
 43810                                  USER_SS:
 43811 00000586 0000                    	dw	0		; User SS for system call
 43812                                  CONTSTK:
 43813 00000588 0000                    	dw	0		;
 43814                                  THISDPB:
 43815 0000058A 00000000                	dd	0		;
 43816                                  CLUSSAVE:
 43817 0000058E 0000                    	dw	0		;
 43818                                  CLUSSEC:
 43819 00000590 00000000                	dd	0		;>32mb			AC0000
 43820                                  PREREAD:
 43821 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 43822 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 43823                                  FATBYTE:
 43824 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 43825                                  ; DOSDATA:059Ah
 43826 0000059A 00000000                DEVPT:	dd	0		;
 43827                                  THISSFT:
 43828 0000059E 00000000                	dd	0		; Address of user SFT
 43829                                  THISCDS:
 43830 000005A2 00000000                	dd	0		; Address of current CDS
 43831                                  THISFCB:
 43832 000005A6 00000000                	dd	0		; Address of user FCB
 43833 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 43834 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 43835 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 43836                                  WFP_START:
 43837 000005B2 0000                    	dw	0		;
 43838                                  REN_WFP:
 43839 000005B4 0000                    	dw	0		;
 43840                                  CURR_DIR_END:
 43841 000005B6 0000                    	dw	0		;
 43842                                  NEXTADD:
 43843 000005B8 0000                    	dw	0		;
 43844                                  LASTPOS:
 43845 000005BA 0000                    	dw	0		;
 43846                                  CLUSNUM:
 43847 000005BC 0000                    	dw	0		;
 43848 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 43849                                  DIRSTART:
 43850 000005C2 0000                    	dw	0		;
 43851 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 43852 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 43853                                                                  ; sectors
 43854                                  BYTSECPOS:
 43855 000005CC 0000                    	dw	0		; Position of first byte within sector
 43856                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 43857 000005CE 0000<rep 2h>                    times	2 dw 0
 43858                                  BYTCNT1:
 43859 000005D2 0000                    	dw	0		; No. of bytes in first sector
 43860                                  BYTCNT2:
 43861 000005D4 0000                    	dw	0		; No. of bytes in last sector
 43862 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 43863                                  ; DOSDATA:05D8h
 43864                                  ENTFREE:
 43865 000005D8 0000                    	dw	0		;
 43866                                  ENTLAST:
 43867 000005DA 0000                    	dw	0		;
 43868                                  NXTCLUSNUM:
 43869 000005DC 0000                    	dw	0		;
 43870                                  GROWCNT:
 43871 000005DE 00000000                	dd	0		;
 43872 000005E2 00000000                CURBUF:	dd	0		;
 43873 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 43874 000005EA 0000                    SAVEBX:	dw	0		;
 43875 000005EC 0000                    SAVEDS:	dw	0		;
 43876                                  RESTORE_TMP:
 43877 000005EE 0000                    	dw	0		; return address for restore world
 43878 000005F0 0000                    NSS:	dw	0
 43879 000005F2 0000                    NSP:	dw	0
 43880                                  ; DOSDATA:05F4h
 43881                                  EXTOPEN_FLAG:
 43882 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 43883                                  EXTOPEN_ON:
 43884 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 43885                                  EXTOPEN_IO_MODE:
 43886 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 43887                                  SAVE_DI:
 43888 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 43889                                  SAVE_ES:
 43890 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 43891                                  SAVE_DX:
 43892 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 43893                                  SAVE_CX:
 43894 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 43895                                  SAVE_BX:
 43896 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 43897                                  SAVE_SI:
 43898 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 43899                                  SAVE_DS:
 43900 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 43901                                  
 43902                                  ; DOSDATA:0607h
 43903                                  
 43904                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 43905                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 43906                                  ; the high 16, the low 16 are still in the register.
 43907                                  
 43908                                  HIGH_SECTOR:	
 43909 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 43910                                  ;OffsetMagicPatch:
 43911                                  ;	dw	MagicPatch ;scottq 8/6/92
 43912                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43913 00000609 0000                    	dw	0
 43914                                  				;see dos\mpatch.asm
 43915                                  DISK_FULL:
 43916 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 43917                                  TEMP_VAR:
 43918 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 43919                                  TEMP_VAR2:
 43920 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 43921 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 43922                                  DOS34_FLAG:
 43923 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 43924                                  NO_FILTER_PATH:
 43925 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 43926                                  NO_FILTER_DPATH:
 43927 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 43928                                  ; M008
 43929                                  AbsRdWr_SS:
 43930 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 43931                                  AbsRdWr_SP:
 43932 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 43933                                  
 43934                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 43935                                  ; M008
 43936                                   
 43937                                   
 43938                                  ; make those pushes fast!!!
 43939                                  
 43940                                  ;EVEN
 43941                                  
 43942 0000061F 90                      align 2
 43943                                  
 43944                                  StackSize   equ 180h  ; 384	; gross but effective
 43945                                  
 43946                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 43947                                  ;				; made up their minds about
 43948                                   
 43949                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 43950                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 43951                                  
 43952                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 43953                                   
 43954 00000620 00<rep 180h>                    times	StackSize db	0	;
 43955                                  AUXSTACK:			; LABEL   BYTE
 43956                                   
 43957 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 43958                                  DSKSTACK:			; LABEL   BYTE
 43959                                   
 43960 00000920 00<rep 180h>                    times	StackSize db	0	;
 43961                                  IOSTACK:			; LABEL   BYTE
 43962                                  
 43963                                  ; DOSDATA:0AA0h 
 43964                                   
 43965                                  ; patch space for Boca folks.
 43966                                  ; Say What????!!! This does NOT go into the swappable area!
 43967                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 43968                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 43969                                   
 43970                                  IBMPATCH: ; label byte
 43971                                  PRINTER_FLAG:
 43972 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 43973                                  VOLCHNG_FLAG:
 43974 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 43975                                  VIRTUAL_OPEN:
 43976 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 43977                                   
 43978                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 43979                                  
 43980                                  FSeek_drive:
 43981 00000AA3 00                      	db	0		;AN000; fastseek drive #
 43982                                  FSeek_firclus:
 43983 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 43984                                  FSeek_logclus:
 43985 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 43986                                  FSeek_logsave:
 43987 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 43988                                  
 43989                                  ; DOSDATA:0AAAh
 43990                                  
 43991                                  TEMP_DOSLOC:
 43992 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 43993                                  				;at SYSINIT time.
 43994                                  SWAP_END:  ; LABEL   BYTE
 43995                                   
 43996                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 43997                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 43998                                  ; to include this byte.
 43999                                   
 44000 00000AAC 00                      	db	0
 44001                                  
 44002                                  ; DOSDATA:0AADh
 44003                                   
 44004                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 44005                                  
 44006                                  ;DOSDATA    ENDS
 44007                                  
 44008                                  ;============================================================================
 44009                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 44010                                  ;============================================================================
 44011                                  ; 27/04/2019 - Retro DOS 4.0
 44012                                  ; 16/07/2018 - Retro DOS 3.0
 44013                                  
 44014                                  ;DOSDATA Segment
 44015                                  
 44016                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 44017                                  
 44018                                  ;
 44019                                  ; upper case table
 44020                                  ; ---------------------------------------------------------------------------
 44021                                  UCASE_TAB:	; label   byte
 44022 00000AAD 8000                    	dw	128
 44023 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 44024 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44025 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44026 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44027 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44028 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44029 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44030 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44031 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44032 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44033 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44034 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44035 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44036 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44037 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44038 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44039                                  ;
 44040                                  ; file upper case table
 44041                                  ; ---------------------------------------------------------------------------
 44042                                  FILE_UCASE_TAB:	; label  byte
 44043 00000B2F 8000                    	dw	128
 44044 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 44045 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44046 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44047 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44048 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44049 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44050 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44051 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44052 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44053 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44054 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44055 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44056 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44057 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44058 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44059 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44060                                  ;
 44061                                  ; file char list
 44062                                  ; ---------------------------------------------------------------------------
 44063                                  FILE_CHAR_TAB:	; label  byte
 44064 00000BB1 1600                    	dw	22				; length
 44065 00000BB3 0100FF                  	db	1,0,255 			; include all
 44066 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 44067 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 44067 00000BC2 7C3C3E2B3D3B2C     
 44068                                  	;db	24 dup (?)			; reserved
 44069 00000BC9 00<rep 18h>             	times	24 db 0
 44070                                  
 44071                                  ;
 44072                                  ; collate table
 44073                                  ; ---------------------------------------------------------------------------
 44074                                  COLLATE_TAB:	; label   byte
 44075 00000BE1 0001                    	dw	256
 44076 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 44077 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 44078 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 44079 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 44080 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 44081 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 44082 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 44083 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 44084 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 44085 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44086 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44087 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 44088 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 44089 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44090 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44091 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 44092 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 44093 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 44094 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 44095 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 44096 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 44097 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 44098 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44099 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44100 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44101 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44102 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44103 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44104 00000CC3 E053                    	db	224,"S"
 44105 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 44106 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44107 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44108 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44109                                  
 44110                                  ; ------------------------------------------------<MSKK01>----------------------
 44111                                  
 44112                                  ; DOSDATA:0CE3h
 44113                                  
 44114                                  ; 29/04/2019
 44115                                  
 44116                                  ; dbcs is not supported in DOS 3.3
 44117                                  ;		   DBCS_TAB	    CC_DBCS <>
 44118                                  ;
 44119                                  ; DBCS for DOS 4.00			   2/12/KK
 44120                                  
 44121                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 44122                                  ; ------------------------------------------------<MSKK01>----------------------
 44123                                  ;ifdef	DBCS
 44124                                  ; ifdef	  JAPAN
 44125                                  ;		dw	6		; <MSKK01>
 44126                                  ;		db	081h,09fh	; <MSKK01>
 44127                                  ;		db	0e0h,0fch	; <MSKK01>
 44128                                  ;		db	0,0		; <MSKK01>
 44129                                  ;
 44130                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 44131                                  ; endif
 44132                                  ; ifdef	  TAIWAN
 44133                                  ;		dw	4		; <TAIWAN>
 44134                                  ;		db	081h,0FEh	; <TAIWAN>
 44135                                  ;		db	0,0		; <TAIWAN>
 44136                                  ;
 44137                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44138                                  ; endif
 44139                                  ; ifdef   KOREA                         ; Keyl
 44140                                  ;               dw      4               ; <KOREA>
 44141                                  ;               db      0A1h,0FEh       ; <KOREA>
 44142                                  ;               db      0,0             ; <KOREA>
 44143                                  ;
 44144                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44145                                  ;  endif
 44146                                  ;else
 44147 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 44148                                  		;db	16 dup(0)	;AN000;  2/12/KK
 44149 00000CE5 00<rep 10h>             		times	16 db 0
 44150                                  
 44151                                  ;		dw	6		;  2/12/KK
 44152                                  ;		db	081h,09Fh	;  2/12/KK
 44153                                  ;		db	0E0h,0FCh	;  2/12/KK
 44154                                  ;		db	0,0		;  2/12/KK
 44155                                  ;
 44156                                  ;endif
 44157                                  ; ------------------------------------------------<MSKK01>----------------------
 44158                                  
 44159                                  ; DOSDATA:0CF5h
 44160                                  
 44161                                  ; ---------------------------------------------------------------------------
 44162                                  ;
 44163                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 44164                                  ;     ENTRY: AL = Character to map
 44165                                  ;     EXIT:  AL = The converted character
 44166                                  ; Alters no registers except AL and flags.
 44167                                  ; The routine should do nothing to chars below 80H.
 44168                                  ; ---------------------------------------------------------------------------
 44169                                  ; Example:
 44170                                  
 44171                                  MAP_CASE:
 44172                                  ;Procedure MAP_CASE,FAR
 44173                                  
 44174 00000CF5 3C80                    	CMP	AL,80h
 44175 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 44176 00000CF9 CB                      	RETF
 44177                                  Map1:
 44178 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 44179 00000CFC 1E                      	PUSH	DS
 44180 00000CFD 53                      	PUSH	BX
 44181 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 44182                                  FINISH:
 44183 00000D01 0E                      	PUSH	CS		;Move to DS
 44184 00000D02 1F                      	POP	DS
 44185 00000D03 D7                      	XLAT			;Get upper case character
 44186 00000D04 5B                      	POP	BX
 44187 00000D05 1F                      	POP	DS
 44188                                  L_RET:	
 44189 00000D06 CB                      	RETF
 44190                                  
 44191                                  ;EndProc MAP_CASE
 44192                                  
 44193                                  ; ---------------------------------------------------------------------------
 44194                                  
 44195                                  ; The variables for ECS version are moved here for the same data alignments
 44196                                  ; as IBM-DOS and MS-DOS.
 44197                                  
 44198                                  InterChar:
 44199 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 44200                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 44201                                  DUMMY:	; LABEL   WORD
 44202                                  InterCon:  
 44203 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 44204                                  SaveCurFlg:
 44205 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 44206                                  
 44207                                  ; ---------------------------------------------------------------------------
 44208                                  
 44209 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 44210                                  redir_patch:
 44211 00000D0C 00                      	  db	0
 44212                                  
 44213                                  ; DOSDATA:0D0Dh
 44214                                  
 44215                                  Mark1:	; label byte
 44216                                  
 44217                                  ;IF2
 44218                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 44219                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44220                                  ;	ENDIF
 44221                                  ;ENDIF
 44222                                  
 44223 00000D0D 00<rep 5h>              	  times 5 db 0
 44224                                  
 44225                                  ;############################################################################
 44226                                  ;
 44227                                  ; ** HACK FOR DOS 4.0 REDIR **
 44228                                  ; 
 44229                                  ; The redir requires the following:
 44230                                  ;
 44231                                  ;	MSVERS	offset D12H
 44232                                  ;	YRTAB	offset D14H
 44233                                  ; 	MONTAB	offset D1CH
 44234                                  ;
 44235                                  ; WARNING! WARNING!
 44236                                  ; 
 44237                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44238                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44239                                  ;
 44240                                  ; CURRENTLY MARK1 = 0D0DH
 44241                                  ;
 44242                                  ;############################################################################
 44243                                  
 44244                                  	;ORG	0D12h
 44245                                  
 44246                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 44247                                  
 44248                                  	;db	6
 44249                                  	;db	20
 44250                                  
 44251                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 44252                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 44253 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 44254 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 44255                                  
 44256                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 44257                                  ;
 44258                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 44259                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 44260                                  
 44261                                  ; Days in year
 44262                                  
 44263                                  YRTAB:   
 44264 00000D14 C8A6                    	DB	200,166			; Leap year
 44265 00000D16 C8A5                    	DB	200,165
 44266 00000D18 C8A5                    	DB	200,165
 44267 00000D1A C8A5                    	DB	200,165
 44268                                  
 44269                                  ; Days of each month
 44270                                  
 44271                                  MONTAB:        
 44272 00000D1C 1F                      	DB      31                      ; January
 44273                                  february:
 44274 00000D1D 1C                      	DB	28 			; February--reset each 
 44275                                  					; time year changes
 44276 00000D1E 1F                              DB      31                      ; March
 44277 00000D1F 1E                              DB      30                      ; April
 44278 00000D20 1F                              DB      31                      ; May
 44279 00000D21 1E                              DB      30                      ; June
 44280 00000D22 1F                              DB      31                      ; July
 44281 00000D23 1F                              DB      31                      ; August
 44282 00000D24 1E                              DB      30                      ; September
 44283 00000D25 1F                              DB      31                      ; October
 44284 00000D26 1E                              DB      30                      ; November
 44285 00000D27 1F                              DB      31                      ; December
 44286                                  
 44287                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 44288                                  
 44289                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 44290                                  
 44291                                  SysInitTable:
 44292                                  	;dw	SYSINITVAR
 44293 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 44294 00000D2A 0000                            dw      0		; segment
 44295 00000D2C [2A12]                          dw	COUNTRY_CDPG	; pointer to country tabl
 44296 00000D2E 0000                            dw      0		; segment of pointer
 44297                                  
 44298                                  ; DOS 3.3 F.C. 6/12/86
 44299                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 44300                                  
 44301                                  FastTable:				; a better name
 44302                                  FastOpenTable:
 44303 00000D30 0200                    	dw      2                       ; number of entries
 44304 00000D32 [1E13]                  	dw      FastRet			; pointer to ret instr.
 44305 00000D34 0000                    	dw      0                       ; and will be modified by
 44306 00000D36 [1E13]                  	dw      FastRet			; FASTxxx when loaded in
 44307 00000D38 0000                    	dw      0                       
 44308                                  
 44309                                  ; DOS 3.3 F.C. 6/12/86
 44310                                  
 44311                                  FastFlg:				; flags
 44312                                  FastOpenFlg:
 44313 00000D3A 00                      	db	0			; don't change the foll: order  
 44314                                  
 44315                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 44316                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 44317                                  ; or filled by FastOPen when calling FastOpen Lookup
 44318                                  
 44319                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 44320                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 44321                                  	;times	11 db 0
 44322 00000D3B 00<rep Bh>              	times	FEI.size db 0
 44323                                  
 44324                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 44325                                  ; when calling FastOpen Lookup
 44326                                  
 44327                                  Dir_Info_Buff:	; label  byte
 44328                                  	;db   	SIZE dir_entry dup (0)
 44329                                  	;times	32 db 0
 44330 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 44331                                  
 44332                                  Next_Element_Start:
 44333 00000D66 0000                    	dw	0			; save next element start offset
 44334                                  Del_ExtCluster:
 44335 00000D68 0000                    	dw	0			; for dos_delete                       
 44336                                  
 44337                                  ; The following is a stack and its pointer for interrupt 2F which is used
 44338                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 44339                                  ; not to destroy the INT 21 stack saved for the user.
 44340                                  
 44341                                  USER_SP_2F:	; LABEL  WORD
 44342 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 44343                                  
 44344                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 44345                                  DOS_TEMP:	; label  word		; temporary word
 44346                                  FAKE_STACK_2F:  
 44347                                  	; dw  14 dup (0)		; 12 register temporary storage
 44348 00000D6C 0000<rep Eh>            	times 14 dw 0
 44349                                  
 44350                                  Hash_Temp: 	;label  word		; temporary word             
 44351                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 44352 00000D88 0000<rep 4h>            	times 4 dw 0
 44353                                              	
 44354                                  SCAN_FLAG:	
 44355 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 44356                                  DATE_FLAG:
 44357 00000D91 0000                    	dw     0                	; flag to update the date
 44358                                  
 44359                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 44360 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 44361                                  
 44362                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 44363 00000D95 00000000                	dd     0               		; for extended error                   
 44364 00000D99 00000000                	dd     0			; for parser                           
 44365 00000D9D 00000000                	dd     0			; for critical errror                  
 44366 00000DA1 00000000                	dd     0			; for IFS                              
 44367 00000DA5 00000000                	dd     0			; for code reduction                   
 44368                                  
 44369                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 44370 00000DA9 FFFFFFFF                	dd     -1                                                        
 44371                                  SC_SECTOR_SIZE:
 44372 00000DAD 0000                    	dw	0			; sector size for SC                 
 44373                                  SC_DRIVE:
 44374 00000DAF 00                      	db	0			; drive # for secondary cache        
 44375                                  CurSC_DRIVE:
 44376 00000DB0 FF                      	db	-1			; current SC drive                   
 44377                                  CurSC_SECTOR:
 44378 00000DB1 00000000                	dd	0			; current SC starting sector         
 44379                                  SC_STATUS:
 44380 00000DB5 0000                    	dw	0			; SC status word                     
 44381                                  SC_FLAG:
 44382 00000DB7 00                      	db	0			; SC flag                            
 44383                                  AbsDskErr:
 44384 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 44385                                                                                            
 44386                                  NO_NAME_ID:	; label byte                                                           
 44387 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 44387 00000DC3 2020               
 44388                                  
 44389                                  ;hkn; moved from TABLE segment in kstrin.asm
 44390                                  
 44391                                  KISTR001S:	; label	byte		; 2/17/KK
 44392 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 44393                                  KISTR001E:	; label	byte		; 2/17/KK
 44394                                  
 44395                                  ; the nul device driver used to be part of the code. However, since the 
 44396                                  ; header is in the data, and the entry points are only given as an offset,
 44397                                  ; the strategy and interrupt entry points must also be in the data now.
 44398                                  
 44399                                  ; DOSDATA:0DC6h
 44400                                  
 44401                                  SNULDEV:
 44402                                  ;procedure snuldev,far
 44403                                  	;or	word [es:bx+3],100h
 44404                                  	; 17/12/2022
 44405                                  	;or	byte [es:bx+4],01h
 44406                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 44407                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 44408 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 44409                                  INULDEV:
 44410 00000DCC CB                      	retf				; must not be a return!
 44411                                  ;endproc snuldev
 44412                                  
 44413                                  ;M044
 44414                                  ; Second part of save area for saving last para of Windows memory
 44415                                  
 44416                                  WinoldPatch2:
 44417                                  	;db	8 dup (?)	; M044
 44418 00000DCD 00<rep 8h>              	times	8 db 0	
 44419                                  UmbSave2:
 44420                                  	;db	5 dup (?)	; M062
 44421 00000DD5 00<rep 5h>              	times	5 db 0
 44422                                  UmbSaveFlag:
 44423 00000DDA 00                      	db	0		; M062
 44424                                  
 44425                                  ; DOSDATA:0DDBh
 44426                                  
 44427                                  Mark2:	; label byte
 44428                                  
 44429                                  ;IF2
 44430                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 44431                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44432                                  ;	ENDIF
 44433                                  ;ENDIF
 44434                                  
 44435                                  ;############################################################################
 44436                                  ;
 44437                                  ; ** HACK FOR DOS 4.0 REDIR **
 44438                                  ; 
 44439                                  ; The redir requires the following:
 44440                                  ;
 44441                                  ;	ERR_TABLE_21	offset DDBH
 44442                                  ;	ERR_TABLE_24	offset E5BH
 44443                                  ; 	ErrMap24	offset EABH
 44444                                  ;
 44445                                  ; WARNING! WARNING!
 44446                                  ;
 44447                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44448                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44449                                  ;
 44450                                  ; CURRENTLY MARK2 = 0DD0H
 44451                                  ;
 44452                                  ;############################################################################
 44453                                  
 44454                                  	;ORG	0DDBh
 44455                                  
 44456                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 44457                                  
 44458                                  ; ---------------------------------------------------------------------------
 44459                                  ;
 44460                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 44461                                  ; errors. Each entry is 4 bytes long:
 44462                                  ;
 44463                                  ;       Err#,Class,Action,Locus
 44464                                  ;
 44465                                  ; A value of 0FFh indicates a call specific value (ie. should already
 44466                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44467                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 44468                                  ;
 44469                                  ; ---------------------------------------------------------------------------
 44470                                  
 44471                                  ;ErrTab  Macro   err,class,action,locus
 44472                                  ;ifidn <locus>,<0FFh>
 44473                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 44474                                  ;ELSE
 44475                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 44476                                  ;ENDIF
 44477                                  ;ENDM
 44478                                  
 44479                                  ERR_TABLE_21: ; LABEL   BYTE
 44480 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 44481 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44482 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44483 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 44484 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 44485 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44486 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 44487 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44488 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44489 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44490 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44491 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44492 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 44493 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44494 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 44495 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 44496 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44497 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 44498 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44499 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44500 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 44501 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 44502 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 44503 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44504 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 44505 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44506 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 44507 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44508                                      ; MSDOS 6.0
 44509 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44510 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44511 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 44512 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 44513                                  
 44514                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 44515                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 44516                                  ;		db 2,8,3,2
 44517                                  ;		db 3,8,3,2
 44518                                  ;		db 4,1,4,1
 44519                                  ;		db 5,3,3,0FFh
 44520                                  ;		db 6,7,4,1
 44521                                  ;		db 7,7,5,5
 44522                                  ;		db 8,1,4,5
 44523                                  ;		db 9,7,4,5
 44524                                  ;		db 0Ah,7,4,5
 44525                                  ;		db 0Bh,9,3,1
 44526                                  ;		db 0Ch,7,4,1
 44527                                  ;		db 0Dh,9,4,1
 44528                                  ;		db 0Fh,8,3,2
 44529                                  ;		db 10h,3,3,2
 44530                                  ;		db 11h,0Dh,3,2
 44531                                  ;		db 12h,8,3,2
 44532                                  ;		db 50h,0Ch,3,2
 44533                                  ;		db 20h,0Ah,2,2
 44534                                  ;		db 21h,0Ah,2,2
 44535                                  ;		db 54h,1,4,0FFh
 44536                                  ;		db 56h,3,3,1
 44537                                  ;		db 52h,1,4,2
 44538                                  ;		db 32h,9,3,3
 44539                                  ;		db 55h,0Ch,3,3
 44540                                  ;		db 57h,9,3,1
 44541                                  ;		db 53h,0Dh,4,1
 44542                                  ;		db 24h,1,4,5
 44543                                  ; MSDOS 6.0 (MSDOS 6.21)
 44544                                  ;		db 26h,1,4,1
 44545                                  ;		db 27h,1,4,1
 44546                                  ;		db 5Ah,0Dh,4,2
 44547                                  ; MSDOS 6.0 & MSDOS 3.3
 44548                                  ;		db 0FFh,0FFh,0FFh,0FFh
 44549                                  
 44550                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44551                                  
 44552                                  ; ---------------------------------------------------------------------------
 44553                                  ;
 44554                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 44555                                  ; errors. Each entry is 4 bytes long:
 44556                                  ;
 44557                                  ;       Err#,Class,Action,Locus
 44558                                  ;
 44559                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 44560                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44561                                  ; THE END.
 44562                                  ;
 44563                                  ; ---------------------------------------------------------------------------
 44564                                  
 44565                                  ERR_TABLE_24: ; LABEL   BYTE
 44566 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44567 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44568 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 44569 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44570 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44571 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44572 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 44573 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44574 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44575 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 44576 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 44577 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 44578 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 44579 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44580 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44581 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44582 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44583 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44584 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44585 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 44586                                  
 44587                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 44588                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 44589                                  ;		db 14h,4,5,1
 44590                                  ;		db 15h,5,7,0FFh
 44591                                  ;		db 16h,4,5,1
 44592                                  ;		db 17h,0Bh,4,2
 44593                                  ;		db 18h,4,5,1
 44594                                  ;		db 19h,5,1,2
 44595                                  ;		db 1Ah,0Bh,7,2
 44596                                  ;		db 1Bh,0Bh,4,2
 44597                                  ;		db 1Ch,2,7,4
 44598                                  ;		db 1Dh,5,4,0FFh
 44599                                  ;		db 1Eh,5,4,0FFh
 44600                                  ;		db 1Fh,0Dh,4,0FFh
 44601                                  ;		db 20h,0Ah,2,2
 44602                                  ;		db 21h,0Ah,2,2
 44603                                  ;		db 22h,0Bh,7,2
 44604                                  ;		db 32h,9,3,3
 44605                                  ;		db 23h,7,4,1
 44606                                  ;		db 24h,1,4,5
 44607                                  ;		db 0FFh,0Dh,5,0FFh
 44608                                  
 44609                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 44610                                  
 44611                                  ; ---------------------------------------------------------------------------
 44612                                  ;
 44613                                  ; We need to map old int 24 errors and device driver errors into the new set
 44614                                  ; of errors. The following table is indexed by the new errors
 44615                                  ;
 44616                                  ; ---------------------------------------------------------------------------
 44617                                  
 44618                                  ;Public  ErrMap24
 44619                                  ErrMap24: ; Label   BYTE
 44620 00000EAB 13                          DB  error_write_protect	; 0
 44621 00000EAC 14                          DB  error_bad_unit		; 1
 44622 00000EAD 15                          DB  error_not_ready		; 2
 44623 00000EAE 16                          DB  error_bad_command	; 3
 44624 00000EAF 17                          DB  error_CRC		; 4
 44625 00000EB0 18                          DB  error_bad_length	; 5
 44626 00000EB1 19                          DB  error_seek		; 6
 44627 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 44628 00000EB3 1B                          DB  error_sector_not_found	; 8
 44629 00000EB4 1C                          DB  error_out_of_paper	; 9
 44630 00000EB5 1D                          DB  error_write_fault	; A
 44631 00000EB6 1E                          DB  error_read_fault	; B
 44632 00000EB7 1F                          DB  error_gen_failure	; C
 44633 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 44634 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 44635 00000EBA 22                          DB  error_wrong_disk	; F
 44636                                  
 44637                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 44638                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 44639                                  	
 44640                                  ErrMap24End: ; LABEL   BYTE
 44641                                  
 44642                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44643                                  
 44644                                  ; ---------------------------------------------------------------------------
 44645                                  
 44646                                  ; 27/04/2019 - Retro DOS v4.0
 44647                                  
 44648                                  FIRST_BUFF_ADDR:
 44649 00000EBB 0000                    	dw	0			; first buffer address               
 44650                                  SPECIAL_VERSION:
 44651 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 44652                                  FAKE_COUNT:
 44653 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 44654                                  OLD_FIRSTCLUS:
 44655 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 44656                                  
 44657                                  ; ---------------------------------------------------------------------------
 44658                                  
 44659                                  ;smr; moved from TABLE segment in exec.asm
 44660                                  
 44661 00000FC0 0000                    exec_init_SP: dw 0
 44662 00000FC2 0000                    exec_init_SS: dw 0
 44663 00000FC4 0000                    exec_init_IP: dw 0
 44664 00000FC6 0000                    exec_init_CS: dw 0
 44665                                  
 44666                                  exec_signature:
 44667 00000FC8 0000                    	dw	0	; must contain 4D5A  (yay zibo!)
 44668                                  exec_len_mod_512:
 44669 00000FCA 0000                    	dw	0	; low 9 bits of length
 44670                                  exec_pages:
 44671 00000FCC 0000                    	dw	0	; number of 512b pages in file
 44672                                  exec_rle_count:
 44673 00000FCE 0000                    	dw	0	; count of reloc entries
 44674                                  exec_par_dir:
 44675 00000FD0 0000                    	dw	0	; number of paragraphs before image
 44676                                  exec_min_BSS:
 44677 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 44678                                  exec_max_BSS:
 44679 00000FD4 0000                    	dw	0	; max number of para of BSS
 44680                                  exec_SS:
 44681 00000FD6 0000                    	dw	0	; stack of image
 44682                                  exec_SP:
 44683 00000FD8 0000                    	dw	0	; SP of image
 44684                                  exec_chksum:
 44685 00000FDA 0000                    	dw	0	; checksum  of file (ignored)
 44686                                  exec_IP:
 44687 00000FDC 0000                    	dw	0	; IP of entry
 44688                                  exec_CS:
 44689 00000FDE 0000                    	dw	0	; CS of entry
 44690                                  exec_rle_table:
 44691 00000FE0 0000                    	dw	0	; byte offset of reloc table
 44692                                  
 44693                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 44694                                  
 44695                                  ;smr; eom
 44696                                  
 44697                                  ; ---------------------------------------------------------------------------
 44698                                  
 44699                                  ;SR;
 44700                                  ; WIN386 instance table for DOS
 44701                                  
 44702                                  Win386_Info:
 44703 00000FE2 0300                    	db	3, 0
 44704 00000FE4 000000000000000000-     	dd	0, 0, 0
 44704 00000FED 000000             
 44705 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 44706                                  
 44707                                  Instance_Table:
 44708 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 44709 00000FFA [3200]00000400          	dw	BCON, 0, 4
 44710 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 44711 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 44712 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 44713 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 44714 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 44715 0000101E 00000000                	dw	0, 0
 44716                                  
 44717                                  ; M001; SR;
 44718                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 44719                                  ; M001; some DOS variables. Note that the only really important variable in 
 44720                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 44721                                  ; M001; which does not need to be done in DOS 5.0. 
 44722                                  
 44723                                  Win386_DOSVars:
 44724 00001022 05                      	db	5	;Major version 5 ; M001
 44725 00001023 00                      	db	0	;Minor version 0 ; M001
 44726 00001024 [EC05]                  	dw	SAVEDS	; M001
 44727 00001026 [EA05]                  	dw	SAVEBX	; M001
 44728 00001028 [2103]                  	dw	INDOS	; M001
 44729 0000102A [3E03]                  	dw	USER_ID	; M001
 44730 0000102C [1503]                  	dw	CritPatch ; M001
 44731 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 44732                                  
 44733                                  ;SR;
 44734                                  ; Flag to indicate whether WIN386 is running or not
 44735                                  
 44736 00001030 00                      IsWin386: db	0
 44737                                  
 44738                                  ;M018
 44739                                  ; This variable contains the path to the VxD device needed for Win386
 44740                                  
 44741 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 44741 0000103A 2E33383600         
 44742                                  
 44743                                  ;End WIN386 support
 44744                                  
 44745                                  ; ---------------------------------------------------------------------------
 44746                                  
 44747                                  ;SR;
 44748                                  ; These variables have been added for the special lie support for device
 44749                                  ;drivers.
 44750                                  ;
 44751                                  
 44752                                  DriverLoad:	
 44753 0000103F 01                      	db	1	;initialized to do special handling
 44754                                  BiosDataPtr:
 44755 00001040 00000000                	dd	0
 44756                                  
 44757                                  ; 27/04/2019 - Retro DOS v4.0
 44758                                  ; 04/11/2022
 44759                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 44760                                  
 44761                                  ;------------------------------------------------------------------------
 44762                                  ; Patch for Sidekick
 44763                                  ;
 44764                                  ; A documented method for finding the offset of the Errormode flag in the 
 44765                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 44766                                  ; for the following sequence of instructions.
 44767                                  ;
 44768                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 44769                                  ;
 44770                                  ; The Offset of Errormode flag is 0320h
 44771                                  ;
 44772                                  ;------------------------------------------------------------------------
 44773                                  
 44774 00001044 36F6062003FF            	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 44775 0000104A 750C                    	db	075h, 0Ch			 ; jnz  NearLabel
 44776 0000104C 36FF365803              	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 44777 00001051 CD28                    	db	0CDh, 028h			 ; int  28h
 44778                                  
 44779                                  ;--------------------------------------------------------------------------
 44780                                  ; Patch for PortOfEntry - M036
 44781                                  ;
 44782                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 44783                                  ; the offset of Errormode flag. The following patch is to support them in 
 44784                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 44785                                  ;
 44786                                  ;---------------------------------------------------------------------------
 44787                                  
 44788 00001053 803E200300              	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 44789 00001058 7537                    	db	075h, 037h			 ; jnz	NearLabel
 44790 0000105A BCA00A                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 44791                                  
 44792                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 44793                                  
 44794                                  ;--------------------------------------------------------------------------
 44795                                  
 44796                                  ;*** New FCB Implementation
 44797                                  ; This variable is used as a cache in the new FCB implementation to remember
 44798                                  ;the address of a local SFT that can be recycled for a regenerate operation
 44799                                  
 44800 0000105D 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 44801                                  
 44802                                  ;DOSDATA ENDS
 44803                                  
 44804                                  ;============================================================================
 44805                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 44806                                  ;============================================================================
 44807                                  ; 27/04/2019 - Retro DOS 4.0
 44808                                  
 44809                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 44810                                  
 44811                                  ;---------------------------------------------------------------------------
 44812                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 44813                                  ;----------------------------------------------------------------------------
 44814                                  	
 44815                                  	;db	90h
 44816                                  
 44817                                  	;EVEN
 44818 00001061 90                      align 2
 44819                                  
 44820                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 44821                                  
 44822                                  DOSINTTABLE:	; LABEL	DWORD
 44823                                  
 44824                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 44825                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 44826                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 44827                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 44828                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 44829                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 44830                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 44831                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 44832                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 44833                                  	
 44834 00001062 [9053]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 44835 00001066 [1B03]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 44836 0000106A [4703]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 44837 0000106E [7A05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 44838 00001072 [0106]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 44839 00001076 [DE62]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 44840 0000107A [5007]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 44841 0000107E [2203]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 44842 00001082 [2103]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 44843                                  
 44844 00001086 0000                    SS_Save: dw	0		; save user's stack segment
 44845 00001088 0000                    SP_Save: dw	0		; save user's stack offset
 44846                                  
 44847                                  ;-------------------------------------------------------------------------
 44848                                  ;
 44849                                  ; LOW MEM STUB:
 44850                                  ;
 44851                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 44852                                  ; handled by DOS. This stub is installed if the user specifies that the 
 44853                                  ; DOS load in HIMEM. Each entry point does this.
 44854                                  ;
 44855                                  ; 	1. if jmp to 8 has been patched out
 44856                                  ;	   2. if A20 OFF
 44857                                  ;	      3. Enable A20
 44858                                  ;	   4. else 
 44859                                  ;	      5. just go to dos entry
 44860                                  ;	   6. endif
 44861                                  ;	7. else
 44862                                  ;	   8. just go to dos entry
 44863                                  ;	9. endif
 44864                                  ;
 44865                                  ;--------------------------------------------------------------------------
 44866                                  
 44867                                  ; 27/04/2019 - Retro DOS v4.0
 44868                                  
 44869                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 44870                                  
 44871                                  ;--------------------------------------------------------------------------
 44872                                  ;
 44873                                  ; DIVIDE BY 0 handler
 44874                                  ;
 44875                                  ;--------------------------------------------------------------------------
 44876                                  
 44877                                  ldivov:
 44878                                  	; The following jump, skipping the XMS calls will be patched to 
 44879                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44880                                  	; needed because the stub is installed even before the XMS driver
 44881                                  	; is loaded if the user specifies dos=high in the config.sys
 44882                                  i0patch:
 44883 0000108A EB03                    	jmp	short divov_cont	
 44884                                  
 44885 0000108C E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44886                                  divov_cont:
 44887 0000108F 2EFF2E[6210]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 44888                                  
 44889                                  ;------------------------------------------------------------------------
 44890                                  ;
 44891                                  ; INT 20 Handler
 44892                                  ;
 44893                                  ; Here we do not have to set up the stack to return here as the abort call
 44894                                  ; will return to the address after the int 21 ah=4b call. This would be the
 44895                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 44896                                  ; will be restored then.
 44897                                  ;
 44898                                  ;-------------------------------------------------------------------------
 44899                                  
 44900                                  lquit:
 44901                                  	; The following jump, skipping the XMS calls will be patched to 
 44902                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44903                                  	; needed because the stub is installed even before the XMS driver
 44904                                  	; is loaded if the user specifies dos=high in the config.sys
 44905                                  i20patch:
 44906 00001094 EB03                    	jmp	short quit_cont	
 44907                                  
 44908 00001096 E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44909                                  quit_cont:
 44910 00001099 2EFF2E[6610]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 44911                                  
 44912                                  ;--------------------------------------------------------------------------
 44913                                  ;
 44914                                  ; INT 21 Handler
 44915                                  ;
 44916                                  ;--------------------------------------------------------------------------
 44917                                  
 44918                                  lcommand:
 44919                                  	; The following jump, skipping the XMS calls will be patched to 
 44920                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44921                                  	; needed because the stub is installed even before the XMS driver
 44922                                  	; is loaded if the user specifies dos=high in the config.sys
 44923                                  i21patch:
 44924 0000109E EB03                    	jmp	short command_cont	
 44925                                  
 44926 000010A0 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44927                                  command_cont:
 44928 000010A3 2EFF2E[6A10]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 44929                                  
 44930                                  ;------------------------------------------------------------------------
 44931                                  ;
 44932                                  ; INT 25 
 44933                                  ;
 44934                                  ;----------------------------------------------------------------------------
 44935                                  
 44936                                  labsdrd:
 44937                                  	; The following jump, skipping the XMS calls will be patched to 
 44938                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44939                                  	; needed because the stub is installed even before the XMS driver
 44940                                  	; is loaded if the user specifies dos=high in the config.sys
 44941                                  i25patch:
 44942 000010A8 EB03                    	jmp	short absdrd_cont	
 44943                                  
 44944 000010AA E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44945                                  absdrd_cont:
 44946 000010AD 2EFF2E[6E10]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 44947                                  
 44948                                  ;-------------------------------------------------------------------------
 44949                                  ;
 44950                                  ; INT 26
 44951                                  ;
 44952                                  ;-----------------------------------------------------------------------
 44953                                  
 44954                                  labsdwrt:
 44955                                  	; The following jump, skipping the XMS calls will be patched to 
 44956                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44957                                  	; needed because the stub is installed even before the XMS driver
 44958                                  	; is loaded if the user specifies dos=high in the config.sys
 44959                                  i26patch:
 44960 000010B2 EB03                    	jmp	short absdwrt_cont	
 44961                                  
 44962 000010B4 E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44963                                  absdwrt_cont:
 44964 000010B7 2EFF2E[7210]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 44965                                  
 44966                                  ;------------------------------------------------------------------------
 44967                                  ;
 44968                                  ; INT 27
 44969                                  ;
 44970                                  ;-----------------------------------------------------------------------
 44971                                  
 44972                                  lstay_resident:
 44973                                  	; The following jump, skipping the XMS calls will be patched to 
 44974                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44975                                  	; needed because the stub is installed even before the XMS driver
 44976                                  	; is loaded if the user specifies dos=high in the config.sys
 44977                                  i27patch:
 44978 000010BC EB03                    	jmp	short sr_cont	
 44979                                  
 44980 000010BE E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44981                                  sr_cont:
 44982 000010C1 2EFF2E[7610]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 44983                                  
 44984                                  ;-----------------------------------------------------------------------------
 44985                                  ;
 44986                                  ; INT 2f
 44987                                  ;
 44988                                  ;-------------------------------------------------------------------------
 44989                                  
 44990                                  lint2f:
 44991                                  	; The following jump, skipping the XMS calls will be patched to 
 44992                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44993                                  	; needed because the stub is installed even before the XMS driver
 44994                                  	; is loaded if the user specifies dos=high in the config.sys
 44995                                  i2fpatch:
 44996 000010C6 EB03                    	jmp	short int2f_cont	
 44997                                  
 44998 000010C8 E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44999                                  int2f_cont:
 45000 000010CB 2EFF2E[7A10]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 45001                                  
 45002                                  ;-----------------------------------------------------------------------------
 45003                                  ;
 45004                                  ; CPM entry
 45005                                  ;
 45006                                  ;------------------------------------------------------------------------
 45007                                  
 45008                                  lcall_entry:
 45009                                  	; The following jump, skipping the XMS calls will be patched to 
 45010                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45011                                  	; needed because the stub is installed even before the XMS driver
 45012                                  	; is loaded if the user specifies dos=high in the config.sys
 45013                                  cpmpatch:
 45014 000010D0 EB03                    	jmp	short callentry_cont	
 45015                                  
 45016 000010D2 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45017                                  callentry_cont:
 45018 000010D5 2EFF2E[7E10]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 45019                                  
 45020                                  ;--------------------------------------------------------------------------
 45021                                  
 45022                                  lirett:
 45023 000010DA CF                      	iret
 45024                                  
 45025                                  ;---------------------------------------------------------------------------
 45026                                  ;
 45027                                  ; LowIntXX:
 45028                                  ;
 45029                                  ; Interrupts from DOS that pass control to a user program must be done from
 45030                                  ; low memory, as the user program may change the state of the A20 line or
 45031                                  ; they may require that the A20 line be OFF. The following piece of code is
 45032                                  ; far call'd from the following places in DOS:
 45033                                  ;
 45034                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 45035                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 45036                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 45037                                  ;
 45038                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 45039                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 45040                                  ; before doing the ints and then do a far junp back into DOS.
 45041                                  ;
 45042                                  ;---------------------------------------------------------------------------
 45043                                  
 45044 000010DB 00000000                DosRetAddr23:	dd	0
 45045 000010DF 00000000                DosRetAddr24:	dd	0
 45046 000010E3 00000000                DosRetAddr28:	dd	0
 45047                                  
 45048                                  	; Execute int 23h from low memory
 45049                                  LowInt23:
 45050                                  					; save the return address that is on
 45051                                  					; the stack
 45052 000010E7 2E8F06[DB10]            	pop	word [cs:DosRetAddr23]
 45053 000010EC 2E8F06[DD10]            	pop	word [cs:DosRetAddr23+2]
 45054                                  
 45055 000010F1 CD23                    	int	23h			; ctrl C
 45056                                  					; turn on A20 it has been turned OFF
 45057                                  					; by int 28/23/24 handler.
 45058                                  
 45059 000010F3 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 45060                                  
 45061 000010F6 2EFF2E[DB10]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 45062                                  
 45063                                  
 45064                                  	; Execute int 24h from low memory
 45065                                  LowInt24:
 45066                                  					; save the return address that is on
 45067                                  					; the stack
 45068 000010FB 2E8F06[DF10]            	pop	word [cs:DosRetAddr24]
 45069 00001100 2E8F06[E110]            	pop	word [cs:DosRetAddr24+2]
 45070                                  
 45071 00001105 CD24                    	int	24h			; crit error
 45072                                  					; turn on A20 it has been turned OFF
 45073                                  					; by int 28/23/24 handler.
 45074                                  
 45075 00001107 E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45076                                  
 45077 0000110A 2EFF2E[DF10]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 45078                                  
 45079                                  
 45080                                   
 45081                                  	; Execute int 28h from low memory
 45082                                  LowInt28:
 45083 0000110F CD28                    	int	28h			; idle int
 45084                                  					; turn on A20 it has been turned OFF
 45085                                  					; by int 28/23/24 handler.
 45086                                  
 45087 00001111 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45088                                  
 45089 00001114 CB                      	retf
 45090                                  
 45091                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 45092                                  
 45093                                  ;-------------------------------------------------------------------------
 45094                                  ;
 45095                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 45096                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 45097                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 45098                                  ; This is so because exepac'd programs rely on address wrap.
 45099                                  ;
 45100                                  ;------------------------------------------------------------------------- 
 45101                                  
 45102                                  disa20_xfer:
 45103 00001115 E83F00                  	call	XMMDisableA20		; disable A20
 45104                                  
 45105                                  	; Look at msproc.asm at label exec_go for understanding the following:
 45106                                  
 45107                                  	; DS:SI points to entry point
 45108                                  	; AX:DI points to initial stack
 45109                                  	; DX has PDB pointer
 45110                                  	; BX has initial AX value
 45111                                  
 45112 00001118 FA                      	cli
 45113 00001119 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 45114                                  
 45115 0000111F 8ED0                    	mov	SS,AX			; set up user's stack
 45116 00001121 89FC                    	mov	SP,DI			; and SP
 45117 00001123 FB                      	sti
 45118                                  
 45119 00001124 1E                      	push	DS			; fake long call to entry
 45120 00001125 56                      	push	SI
 45121 00001126 8EC2                    	mov	ES,DX			; set up proper seg registers
 45122 00001128 8EDA                    	mov	DS,DX
 45123 0000112A 89D8                    	mov	AX,BX			; set up proper AX
 45124 0000112C CB                      	retf
 45125                                  
 45126                                  ;-------------------------------------------------------------------------
 45127                                  ;
 45128                                  ; M003:
 45129                                  ;
 45130                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 45131                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 45132                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 45133                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 45134                                  ; more info.	
 45135                                  ;
 45136                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 45137                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 45138                                  ; stack to avoid additional stack overhead for the user.
 45139                                  ;
 45140                                  ; -------------------------------------------------------------------------
 45141                                  
 45142                                  disa20_iret:
 45143 0000112D E82700                  	call	XMMDisableA20
 45144 00001130 FE0E[2103]              	dec	byte [INDOS]
 45145 00001134 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 45146 00001138 8B26[8405]              	mov	SP,[USER_SP]
 45147 0000113C 89E5                    	mov	BP,SP
 45148                                  	;mov	[BP+user_env.user_AX],AL
 45149 0000113E 884600                  	mov	[bp],al
 45150 00001141 A1[F205]                	mov	AX,[NSP]
 45151 00001144 A3[8405]                	mov	[USER_SP],AX
 45152 00001147 A1[F005]                	mov	AX,[NSS]
 45153 0000114A A3[8605]                	mov	[USER_SS],AX
 45154                                  
 45155 0000114D 58                      	pop	AX			; restore user regs
 45156 0000114E 5B                      	pop	BX
 45157 0000114F 59                      	pop	CX
 45158 00001150 5A                      	pop	DX
 45159 00001151 5E                      	pop	SI
 45160 00001152 5F                      	pop	DI
 45161 00001153 5D                      	pop	BP
 45162 00001154 1F                      	pop	DS
 45163 00001155 07                      	pop	ES
 45164 00001156 CF                      	iret
 45165                                  
 45166                                  ;**************************************************************************
 45167                                  ;***	XMMDisableA20 - switch 20th address line			      
 45168                                  ;									      
 45169                                  ;	This routine is used to disable the 20th address line in 	      
 45170                                  ;	the system using XMM calls.					      
 45171                                  ;									      
 45172                                  ;	ENTRY	none		;ds = _DATA				      
 45173                                  ;	EXIT	A20 line disabled					      
 45174                                  ;	USES	NOTHING					      
 45175                                  ;									      
 45176                                  ;**************************************************************************
 45177                                  
 45178                                  XMMDisableA20:
 45179 00001157 53                      	push	bx
 45180 00001158 50                      	push	ax
 45181                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 45182 00001159 B406                    	mov	ah,6
 45183 0000115B 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 45184 00001160 58                      	pop	ax
 45185 00001161 5B                      	pop	bx
 45186 00001162 C3                      	retn
 45187                                  
 45188                                  ; The entry point in the BIOS XMS driver is defined here.
 45189                                  
 45190                                  XMMcontrol:
 45191 00001163 00000000                	dd	0
 45192                                  
 45193                                  ;--------------------------------------------------------------------------
 45194                                  ;
 45195                                  ;***	EnsureA20ON - Ensures that A20 is ON
 45196                                  ;									      
 45197                                  ;	This routine is used to query the A20 state in		 	      
 45198                                  ;	the system using XMM calls.					      
 45199                                  ;									      
 45200                                  ;	ENTRY: none		
 45201                                  ;
 45202                                  ;	EXIT : A20 will be ON
 45203                                  ;		
 45204                                  ; 	USES : NONE								      
 45205                                  ;									      
 45206                                  ;--------------------------------------------------------------------------
 45207                                  
 45208                                  LowMemory:	; label dword		; Set equal to 0000:0080
 45209 00001167 8000                    	dw	00080h
 45210 00001169 0000                    	dw	00000h
 45211                                  
 45212                                  HighMemory:	; label dword
 45213 0000116B 9000                    	dw	00090h			; Set equal to FFFF:0090
 45214 0000116D FFFF                    	dw	0FFFFh
 45215                                  
 45216                                  EnsureA20ON:
 45217 0000116F 9C                      	pushf
 45218 00001170 1E                      	push    ds
 45219 00001171 06                      	push	es
 45220 00001172 51                      	push	cx
 45221 00001173 56                      	push	si
 45222 00001174 57                      	push	di
 45223                                  
 45224 00001175 2EC536[6711]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 45225 0000117A 2EC43E[6B11]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 45226 0000117F B90400                  	mov	cx,4
 45227 00001182 FC                      	cld
 45228 00001183 F3A7                    	repe    cmpsw
 45229                                  
 45230 00001185 7407                    	jz	short EA20_OFF
 45231                                  EA20_RET:
 45232 00001187 5F                      	pop	di
 45233 00001188 5E                      	pop	si
 45234 00001189 59                      	pop	cx
 45235 0000118A 07                      	pop	es
 45236 0000118B 1F                      	pop	ds
 45237 0000118C 9D                      	popf
 45238 0000118D C3                      	retn
 45239                                  
 45240                                  EA20_OFF:
 45241                                  	; We are going to do the XMS call on the DOS's AuxStack.
 45242                                  	; NOTE: ints are disabled at this point.
 45243                                  
 45244 0000118E 53                      	push	bx
 45245 0000118F 50                      	push	ax
 45246                                  
 45247 00001190 8CD0                    	mov	ax,ss			; save user's stack pointer
 45248 00001192 2EA3[8610]              	mov	[cs:SS_Save],ax
 45249 00001196 2E8926[8810]            	mov	[cs:SP_Save],sp
 45250 0000119B 8CC8                    	mov	ax,cs
 45251 0000119D 8ED0                    	mov	ss,ax
 45252 0000119F BC[A007]                	mov	sp,AUXSTACK
 45253                                  					; ss:sp -> DOSDATA:AuxStack
 45254                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 45255 000011A2 B405                    	mov	ah,5
 45256 000011A4 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 45257 000011A9 09C0                    	or	ax,ax
 45258 000011AB 740F                    	jz	short XMMerror		; AX = 0 fatal error
 45259                                  
 45260 000011AD 2EA1[8610]              	mov	ax,[cs:SS_Save]		; restore user stack
 45261 000011B1 8ED0                    	mov	ss,ax
 45262 000011B3 2E8B26[8810]            	mov	sp,[cs:SP_Save]
 45263                                  
 45264 000011B8 58                      	pop	ax
 45265 000011B9 5B                      	pop	bx
 45266                                  
 45267 000011BA EBCB                    	jmp	short EA20_RET
 45268                                  
 45269                                  XMMerror:				; M006 - Start
 45270 000011BC B40F                    	mov	ah,0Fh			; get video mode
 45271 000011BE CD10                    	int	10h
 45272 000011C0 3C07                    	cmp	al,7			; Q: are we an MDA
 45273 000011C2 7406                    	je	short XMMcont			; Y: do not change mode
 45274 000011C4 30E4                    	xor	ah,ah ; 0			; set video mode
 45275 000011C6 B002                    	mov	al,02h			; 80 X 25 text
 45276 000011C8 CD10                    	int	10h
 45277                                  XMMcont:
 45278 000011CA B405                    	mov	ah,05h			; set display page
 45279 000011CC 30C0                    	xor	al,al			; page 0
 45280 000011CE CD10                    	int	10h
 45281                                  	
 45282 000011D0 BE[B812]                	mov	si,XMMERRMSG
 45283 000011D3 0E                      	push	cs
 45284 000011D4 1F                      	pop	ds
 45285 000011D5 FC                      	cld				; clear direction flag
 45286                                  XMMprnt:
 45287 000011D6 AC                      	lodsb
 45288 000011D7 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 45289 000011D9 7409                    	jz	short XMMStall		; function 0Eh	
 45290 000011DB B40E                    	mov	ah,0Eh
 45291 000011DD BB0700                  	mov	bx,7
 45292 000011E0 CD10                    	int	10h
 45293 000011E2 EBF2                    	jmp	short XMMprnt
 45294                                  
 45295                                  XMMStall:
 45296 000011E4 FB                      	sti				; allow the user to warm boot
 45297 000011E5 EBFD                    	jmp	short XMMStall		; M006 - End
 45298                                  
 45299                                  ;---------------------------------------------------------------------------
 45300                                  
 45301                                  ; 27/04/2019 - Retro DOS v4.0
 45302                                  
 45303                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 45304                                  ALTAH	equ 0Ch
 45305                                  
 45306                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 45307                                  ;table was different for this. Segments will be patched in at init time.
 45308                                  
 45309                                  OldInstanceJunk:
 45310 000011E7 7000                    	dw	70h	;segment of BIOS
 45311 000011E9 0000                    	dw	0	;indicate stacks in SYSINIT area
 45312 000011EB 0600                    	dw	6	;5 instance items
 45313                                  
 45314                                  	;dw	0,offset dosdata:contpos, 2
 45315                                  	;dw	0,offset dosdata:bcon, 4
 45316                                  	;dw	0,offset dosdata:carpos,106h
 45317                                  	;dw	0,offset dosdata:charco, 1
 45318                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 45319                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 45320                                  
 45321 000011ED 0000[2200]0200          	dw	0,CONTPOS,2
 45322 000011F3 0000[3200]0400          	dw	0,BCON,4
 45323 000011F9 0000[F901]0601          	dw	0,CARPOS,106h
 45324 000011FF 0000[0003]0100          	dw	0,CHARCO,1
 45325 00001205 0000[C00F]2200          	dw	0,exec_init_SP,34
 45326 0000120B 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 45327                                  
 45328                                  ;---------------------------------------------------------------------------
 45329                                  
 45330                                  ; M021-
 45331                                  ;
 45332                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 45333                                  ; 	takes control of the HMA. When running, this word is a reliable
 45334                                  ;	indicator that the DOS is actually using HMA. You can't just use
 45335                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 45336                                  
 45337                                  DosHasHMA:
 45338 00001211 00                      	db	0
 45339                                  FixExePatch:
 45340 00001212 0000                    	dw	0		; M012
 45341                                  RationalPatchPtr:
 45342 00001214 0000                    	dw	0		; M012
 45343                                  
 45344                                  ; End M021
 45345                                  
 45346                                  ;---------------------------------------------------------------------------
 45347                                  
 45348                                  ; M020 Begin
 45349                                  
 45350                                  RatBugCode:	; proc	far
 45351 00001216 51                      	push	cx
 45352 00001217 8B0E1000                	mov	cx,[10h]
 45353                                  rbc_loop:
 45354                                  	;loop	$
 45355 0000121B E2FE                    	loop	rbc_loop
 45356 0000121D 59                      	pop	cx
 45357 0000121E CB                      	retf
 45358                                  		
 45359                                  ; M020 End
 45360                                  
 45361                                  ;---------------------------------------------------------------------------
 45362                                  	
 45363                                  UmbSave1:
 45364                                  	;db	11 dup (?)	; M023
 45365 0000121F 00<rep Bh>              	times	11 db 0	
 45366                                  
 45367                                  ; DOSDATA:122Ah
 45368                                  
 45369                                  Mark3:	; label byte
 45370                                  
 45371                                  ;IF2
 45372                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 45373                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45374                                  ;	ENDIF
 45375                                  ;ENDIF
 45376                                  
 45377                                  ;############################################################################
 45378                                  ;
 45379                                  ; ** HACK FOR DOS 4.0 REDIR **
 45380                                  ;
 45381                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 45382                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 45383                                  ; COUNTRY_CDPG if it can. 
 45384                                  ;
 45385                                  ; MARK3 SHOULD NOT BE > 122AH 
 45386                                  ;
 45387                                  ; As of 9/6/90, this area is FULL!
 45388                                  ;
 45389                                  ;############################################################################
 45390                                   
 45391                                  	;ORG	0122Ah
 45392                                  
 45393                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45394                                  
 45395                                  ; The following table is used for DOS 3.3
 45396                                  ;DOS country and code page information is defined here for DOS 3.3.
 45397                                  ;The initial value for ccDosCountry is 1 (USA).
 45398                                  ;The initial value for ccDosCodepage is 850.
 45399                                  
 45400                                  ; country and code page information
 45401                                  ; ---------------------------------------------------------------------------
 45402                                  COUNTRY_CDPG:	; label  byte
 45403 0000122A 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 45404 00001232 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 45404 0000123B 53595300           
 45405                                  	;db   51 dup (?)
 45406 0000123F 00<rep 33h>             	times 51 db 0
 45407                                  ; ------------------------------------------------<MSKK01>-------------------
 45408                                  ;ifdef	DBCS
 45409                                  ;  ifdef JAPAN
 45410                                  ;	dw   932			; system code page id (JAPAN)
 45411                                  ;  endif
 45412                                  ;  ifdef TAIWAN
 45413                                  ;	dw   938			; system code page id (TAIWAN)
 45414                                  ;  endif
 45415                                  ;  ifdef KOREA
 45416                                  ;	dw   934			; system code page id (KOREA IBM)
 45417                                  ;  endif
 45418                                  ;else
 45419 00001272 B501                    	dw   437			; system code page id
 45420                                  ;endif
 45421                                  ; ------------------------------------------------<MSKK01>-------------------
 45422 00001274 0600                    	dw   6				; number of entries
 45423 00001276 02                      	db   SetUcase  ; 2		; Ucase type
 45424 00001277 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 45425 00001279 0000                    	dw   0				; segment of poiter
 45426 0000127B 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 45427 0000127C [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 45428 0000127E 0000                    	dw   0				; segment of poiter
 45429 00001280 05                      	db   SetFileList ; 5		; valid file chars type
 45430 00001281 [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 45431 00001283 0000                    	dw   0				; segment of poiter
 45432 00001285 06                      	db   SetCollate	; 6		; collate type
 45433 00001286 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 45434 00001288 0000                    	dw   0				; segment of poiter
 45435 0000128A 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 45436 0000128B [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 45437 0000128D 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 45438 0000128F 01                      	db   SetCountryInfo  ; 1	; country info type
 45439 00001290 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 45440                                  ; ------------------------------------------------<MSKK01>-------------------
 45441                                  ;ifdef	DBCS
 45442                                  ;	...... 
 45443                                  ;else
 45444 00001292 0100                    	dw   1				; USA country id
 45445 00001294 B501                    	dw   437			; USA system code page id
 45446 00001296 0000                    	dw   0 				; date format
 45447 00001298 2400000000              	db   '$',0,0,0,0		; currency symbol
 45448 0000129D 2C00                    	db   ',',0			; thousand separator
 45449 0000129F 2E00                    	db   '.',0			; decimal separator
 45450 000012A1 2D00                    	db   '-',0			; date separator
 45451 000012A3 3A00                    	db   ':',0			; time separator
 45452 000012A5 00                      	db   0				; currency format flag
 45453 000012A6 02                      	db   2				; # of digits in currency
 45454 000012A7 00                      	db   0 				; time format
 45455 000012A8 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 45456 000012AA 0000                    	dw   0				; segment of entry point
 45457 000012AC 2C00                    	db   ',',0			; data list separator
 45458 000012AE 000000000000000000-     	dw   0,0,0,0,0			; reserved
 45458 000012B7 00                 
 45459                                  ;endif
 45460                                  ; ------------------------------------------------<MSKK01>-------------------
 45461                                  
 45462                                  ; 27/04/2019 - Retro DOS v4.0
 45463                                  
 45464                                  ;include msdos.cl2			; XMMERRMSG
 45465                                  
 45466                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45467                                  
 45468                                  XMMERRMSG:
 45469 000012B8 0D0A                    	db	0Dh,0Ah
 45470 000012BA 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 45470 000012C3 617265204572726F72-
 45470 000012CC 0D0A24             
 45471                                  
 45472                                  ;DOSDATA ends
 45473                                  
 45474                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45475                                  
 45476                                  ;============================================================================
 45477                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 45478                                  ;============================================================================
 45479                                  ; 27/04/2019 - Retro DOS 4.0
 45480                                  
 45481                                  ;DOSDATA Segment
 45482                                  
 45483                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 45484                                  
 45485                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45486                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 45487                                  
 45488                                  ; first and second DOS patches
 45489                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 45490                                  ;
 45491                                  ; Code in disk.asm, 2 locations, one for read, one for write
 45492                                  ;	DVRDLP:
 45493                                  ;	DVWRTLP:
 45494                                  ;
 45495                                  ;
 45496                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 45497                                  ;	lds	si,si+7 				  ; sf_devptr
 45498                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 45499                                  
 45500 000012CF 36C536                  DOSP1_ID:	db	036h,0C5h,036h
 45501 000012D2 3605C57407E8            DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45502                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 45503                                  
 45504 000012D8 9090                    		db	90h, 90h
 45505                                  
 45506 000012DA 36C536                  DOSP12_ID:	db	036h,0C5h,036h
 45507 000012DD 3605C57407E8            DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45508                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 45509                                  
 45510                                  ; DOSDATA:12E3h
 45511                                  
 45512                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 45513                                  ;
 45514                                  ; Code in disk.asm, 1 location
 45515                                  ;	GETBUF:
 45516                                  ;
 45517                                  ; 051h	push	cx	<- begin special int28 mode
 45518                                  ;	push	es
 45519                                  ;	push	di
 45520                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 45521                                  ;	call	????	; $STD_CON_STRING_INPUT
 45522                                  ;	pop	di
 45523                                  ;	pop	es
 45524                                  ; 059h	pop	cx	<- end special int28 mode
 45525                                  
 45526 000012E3 510657BA                DOSP3_ID:	db	051h,006h,057h,0BAh
 45527 000012E7 2902E8                  DOSP3_CONBUF:	db	029h,002h,0E8h
 45528                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 45529 000012EA 9AE35F07                		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 45530 000012EE 59                      DOSP4_ID:	db	059h			; pop cx
 45531                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 45532                                  	
 45533                                  ; DOSDATA:12EFh
 45534                                  
 45535                                  ; Fifth DOS patch - System call 40h (Write) to console
 45536                                  ;
 45537                                  ; Code in disk.asm, 1 location
 45538                                  ;
 45539                                  ;		push	cx
 45540                                  ;      WRCONLP: lodsb
 45541                                  ;		cmp	al,1Ah
 45542                                  ;		jz	????
 45543                                  ;		call	????	<- "simulate" int28 event
 45544                                  ;		loop	WRCONLP
 45545                                  ;      CONEOF:	pop	ax
 45546                                  
 45547 000012EF 51                      DOSP5_ID:	db	051h			; push cx
 45548 000012F0 AC3C1A7405              		db	0ACh,03Ch,01Ah,074h,005h
 45549 000012F5 E8                      		db	0E8h			; call
 45550                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 45551                                  
 45552                                  ; DOSDATA:12F6h
 45553                                  
 45554                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 45555                                  ;
 45556                                  ; Code in disp.asm, 1 location
 45557                                  ;
 45558                                  ;
 45559                                  ;	mov [SaveDS],ds
 45560                                  ;	mov [SaveBX],bx
 45561                                  ;	mov bx,cs
 45562                                  ;	mov ds,bx
 45563                                  ;	inc [indos]
 45564                                  ;	xor ax,ax
 45565                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 45566                                  
 45567 000012F6 2E8C1E                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 45568 000012F9 7E05                    DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 45569 000012FB 2E891E                  		db	02Eh,089h,01Eh
 45570 000012FE 7C05                    DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 45571 00001300 8CCB                    		db	08Ch,0CBh		; mov bx,cs
 45572 00001302 8EDB                    		db	08Eh,0DBh		; mov ds,bx
 45573 00001304 FE06                    		db	0FEh,006h
 45574 00001306 CF02                    DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 45575 00001308 33C0                    		db	033h,0C0h		; xor ax,ax
 45576                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 45577                                  
 45578                                  ; DOSDATA:130Ah
 45579                                  
 45580                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 45581                                  ;
 45582                                  ; Code in handle.asm, 1 location in routine CheckOwner
 45583                                  ;
 45584                                  ;
 45585                                  ;
 45586                                  ;	push	ax
 45587                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 45588                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 45589                                  ;	pop	ax
 45590                                  ;	jz	????
 45591                                  
 45592 0000130A 50                      DOSP8_ID:	db	050h			; push ax
 45593 0000130B 36A1                    		db	036h,0A1h
 45594 0000130D EA02                    DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 45595 0000130F 263B45                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 45596                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 45597 00001312 2F58                    		db	02Fh,058h		; pop  ax
 45598                                  
 45599                                  ; DOSDATA:1314h
 45600                                  
 45601                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 45602                                  ;
 45603                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 45604                                  ;   a yeild when a character is not ready to be read.
 45605                                  ;
 45606                                  ; Code in disk.asm, 3 locations
 45607                                  ;
 45608                                  ;   DVRDRAW:
 45609                                  ;	    PUSH    ES
 45610                                  ;	    POP     DS
 45611                                  ;   ReadRawRetry:				<- Patch 10
 45612                                  ;	    MOV     BX,DI
 45613                                  ;	    XOR     AX,AX			<- Reenter #2
 45614                                  ;	    MOV     DX,AX
 45615                                  ;	    call    SETREAD
 45616                                  ;	    PUSH    DS				<- Reenter #1
 45617                                  ;	    LDS     SI,[THISSFT]
 45618                                  ;	    call    DEVIOCALL
 45619                                  ;	    MOV     DX,DI
 45620                                  ;	    MOV     AH,86H
 45621                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 45622                                  ;	    TEST    DI,STERR
 45623                                  ;	    JZ	    CRDROK
 45624                                  ;	    call    CHARHARD
 45625                                  ;	    MOV     DI,DX
 45626                                  ;	    OR	    AL,AL
 45627                                  ;	    JZ	    CRDROK
 45628                                  ;	    CMP     AL,3
 45629                                  ;	    JZ	    CRDFERR
 45630                                  ;	    POP     DS
 45631                                  ;	    JMP     ReadRawRetry
 45632                                  ;
 45633                                  ;   CRDFERR:
 45634                                  ;	    POP     DI				<- Patch 11
 45635                                  ;   DEVIOFERR:
 45636                                  ;	    LES     DI,[THISSFT]
 45637                                  ;	    jmp     SET_ACC_ERR_DS
 45638                                  ;
 45639                                  ;   CRDROK:
 45640                                  ;	    POP     DI				<- Patch 12
 45641                                  ;	    MOV     DI,DX
 45642                                  ;	    ADD     DI,[CALLSCNT]
 45643                                  ;	    JMP     SHORT ENDRDDEVJ3
 45644                                  
 45645 00001314 061F                    DOSP10_ID:		db	006H,01FH
 45646                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 45647 00001316 8BDF                    DOSP10_LOC:		db	08BH,0DFH
 45648                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 45649 00001318 33C08BD0E8              			db	033H,0C0H,08BH,0D0H,0E8H
 45650                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 45651 0000131D DF0E                    			db	0DFH,00EH
 45652                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 45653 0000131F 1E36C5363605E8AF0E      			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 45654 00001328 8BD7B486368B3E          			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 45655                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 45656 0000132F 0903                    			db	009H,003H
 45657 00001331 F7C700807419E84717      			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 45658 0000133A 8BFA0AC074103C0374-     			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 45658 00001343 03                 
 45659 00001344 1FEBCF                  			db	01FH,0EBH,0CFH
 45660                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 45661 00001347 5F                      			db	05FH
 45662                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 45663 00001348 36C43E3605E9A104        			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 45664                                  
 45665                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 45666 00001350 5F8BFA                  			db	05FH,08BH,0FAH
 45667                                  ; DOSDATA:1353h
 45668                                  
 45669                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 45670                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 45671                                  ;
 45672                                  ;	    Sets focus to current VM so user can see fatal message.
 45673                                  ;
 45674                                  ;
 45675                                  ;	l0: lodsb		<- Setfocus here
 45676                                  ;	    cmp al, '$'
 45677                                  ;	    je l1
 45678                                  ;	    mov bl, 7
 45679                                  ;	    mov ah, 0Eh
 45680                                  ;	    int 10h
 45681                                  ;	    jmp l0
 45682                                  ;	l1: jmp $
 45683                                  
 45684 00001353 AC                      DOSP13_ID:	db	0ACh			; l0: lodsb
 45685 00001354 3C24                    		db	03Ch,024h		;     cmp al, '$'
 45686 00001356 7408                    		db	074h,008h		;     je l1
 45687 00001358 B307                    		db	0B3h,007h		;     mov bl, 7
 45688 0000135A B40E                    		db	0B4h,00Eh		;     mov ah, 0Eh
 45689 0000135C CD10                    		db	0CDh,010h		;     int 10h
 45690 0000135E EBF3                    		db	0EBh,0F3h		;     jmp l0
 45691 00001360 EBFE                    		db	0EBh,0FEh		; l1: jmp $
 45692                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 45693                                  
 45694                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45695                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 45696                                  
 45697                                  ; 06/12/2022
 45698                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 45699                                  
 45700                                  ; DOSDATA ends
 45701                                  
 45702                                  ; 05/11/2022
 45703                                  ;----------------------------------------------------------------------------
 45704                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 45705                                  ;----------------------------------------------------------------------------
 45706                                    
 45707                                  %if 0
 45708                                  
 45709                                  ;============================================================================
 45710                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 45711                                  ;============================================================================
 45712                                  ; 27/04/2019 - Retro DOS 4.0
 45713                                  
 45714                                  ;mpatch.asm -- holds data patch location for callouts 
 45715                                  ; -- allocate cluster in rom.asm
 45716                                  ;
 45717                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 45718                                  ; Currently, this location is used only by magicdrv.sys's patch to
 45719                                  ; cluster allocation, however it can be expanded to be used by other
 45720                                  ; patches. This is important since we have an easy-access pointer to
 45721                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 45722                                  ; only patch out a far call/retf, so any space after that could be
 45723                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 45724                                  ; to call out here.
 45725                                  ;
 45726                                  ; Currently, we allocate only the minimum space required for the 6
 45727                                  ; byte magicdrv patch, so if you change the dos data, you may want
 45728                                  ; to reserve space here if your new data will be position dependent
 45729                                  ; and would prohibit growing of this table.
 45730                                  ;       
 45731                                  ;history	-	created 8-7-92 by scottq
 45732                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 45733                                  ;
 45734                                  ;Exported Functions
 45735                                  ;==================
 45736                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 45737                                  
 45738                                  ; DosData Segment
 45739                                  
 45740                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 45741                                  
 45742                                  ; ---------------------------------------------------------------------------
 45743                                  
 45744                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 45745                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 45746                                  ; greater). Added to this file because it needed to be somewhere and is
 45747                                  ; 'patch' related.
 45748                                  
 45749                                  Rational386PatchPtr:
 45750                                  	dw	0	; points to patch routine or RET instr.
 45751                                  ; ---------------------------------------------------------------------------
 45752                                  
 45753                                  MagicPatch:
 45754                                  ;MagicPatch proc far
 45755                                          retf            ;default is to just return to allocate
 45756                                          nop             ;however, this code will be patched
 45757                                          nop             ;by magicdrv.sys to
 45758                                          nop             ; call far ?:?     
 45759                                          nop             ; retf or perhaps just jmp far
 45760                                          nop             ;retf/nop take one byte, so we need six instructions
 45761                                                          ;for 6 byte patch
 45762                                  ;MagicPatch endp
 45763                                  
 45764                                  ; ---------------------------------------------------------------------------
 45765                                  
 45766                                  ;DosData Ends
 45767                                  
 45768                                  ; DOSDATA:136Ah
 45769                                  
 45770                                  ;----------------------------------------------------------------------------
 45771                                  
 45772                                  ;DOSDATALAST SEGMENT
 45773                                  
 45774                                  ; 29/04/2019 - Retro DOS v4.0
 45775                                  
 45776                                  ;----------------------------------------------------------------------------
 45777                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 45778                                  
 45779                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 45780                                  
 45781                                  ;align 16
 45782                                  
 45783                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 45784                                  
 45785                                  ;----------------------------------------------------------------------------
 45786                                  
 45787                                  %endif	; 05/11/2022
 45788                                  
 45789                                  ; 05/12/2022
 45790                                  ;MSDAT001E:	; label byte
 45791                                  
 45792                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45793                                  DOSDATAEND equ $
 45794                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 45795                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 45796                                  
 45797                                  ;DOSDATALAST ENDS
 45798                                  
 45799                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 45800                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 45801                                  ;============================================================================
 45802                                  ;	END
 45803                                  ;============================================================================
 45804                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 45805                                  ; -----------------------------
 45806                                  ; MAY 2019, ISTANBUL - TURKIYE.
